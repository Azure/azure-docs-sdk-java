### YamlMime:JavaType
uid: "com.azure.storage.file.share.ShareFileAsyncClient"
fullName: "com.azure.storage.file.share.ShareFileAsyncClient"
name: "ShareFileAsyncClient"
nameWithType: "ShareFileAsyncClient"
summary: "This class provides a client that contains all the operations for interacting with file in Azure Storage File Service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ShareFileAsyncClient"
methods:
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopy(String copyId)"
  name: "abortCopy(String copyId)"
  nameWithType: "ShareFileAsyncClient.abortCopy(String copyId)"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata."
  parameters:
  - description: "Specifies the copy id which has copying pending status associate with it."
    name: "copyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> abortCopy(String copyId)"
  desc: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n```java\nshareFileAsyncClient.abortCopy(\"someCopyId\")\n     .doOnSuccess(response -> System.out.println(\"Abort copying the file completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/abort-copy-file"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId)"
  name: "abortCopyWithResponse(String copyId)"
  nameWithType: "ShareFileAsyncClient.abortCopyWithResponse(String copyId)"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata."
  parameters:
  - description: "Specifies the copy id which has copying pending status associate with it."
    name: "copyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> abortCopyWithResponse(String copyId)"
  desc: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n```java\nshareFileAsyncClient.abortCopyWithResponse(\"someCopyId\")\n     .subscribe(response -> System.out.printf(\"Abort copying the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/abort-copy-file"
  returns:
    description: "A response containing the status of aborting copy the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  name: "abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  summary: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata."
  parameters:
  - description: "Specifies the copy id which has copying pending status associate with it."
    name: "copyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> abortCopyWithResponse(String copyId, ShareRequestConditions requestConditions)"
  desc: "Aborts a pending Copy File operation, and leaves a destination file with zero length and full metadata.\n\n**Code Samples**\n\nAbort copy file from copy id(\"someCopyId\")\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.abortCopyWithResponse(\"someCopyId\", requestConditions)\n     .subscribe(response -> System.out.printf(\"Abort copying the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/abort-copy-file"
  returns:
    description: "A response containing the status of aborting copy the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.PermissionCopyModeType,java.lang.Boolean,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  name: "beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  nameWithType: "ShareFileAsyncClient.beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  summary: "Copies a blob or file to a destination file within the storage account."
  parameters:
  - description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Mode of file permission acquisition."
    name: "filePermissionCopyMode"
    type: "<xref href=\"com.azure.storage.file.share.models.PermissionCopyModeType?alt=com.azure.storage.file.share.models.PermissionCopyModeType&text=PermissionCopyModeType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to copy despite target being read only. (default is false)"
    name: "ignoreReadOnly"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether the archive attribute is to be set on the target. (default is true)"
    name: "setArchiveAttribute"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the\n naming rules."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    name: "pollInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "destinationRequestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, FileSmbProperties smbProperties, String filePermission, PermissionCopyModeType filePermissionCopyMode, Boolean ignoreReadOnly, Boolean setArchiveAttribute, Map<String,String> metadata, Duration pollInterval, ShareRequestConditions destinationRequestConditions)"
  desc: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n boolean ignoreReadOnly = false; // Default value\n boolean setArchiveAttribute = true; // Default value\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n\n PollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\",\n     smbProperties, filePermission, PermissionCopyModeType.SOURCE, ignoreReadOnly, setArchiveAttribute,\n     Collections.singletonMap(\"file\", \"metadata\"), Duration.ofSeconds(2), requestConditions);\n\n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error), () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-file"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the file copy operation until it has completed or has been cancelled."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileCopyInfo?alt=com.azure.storage.file.share.models.ShareFileCopyInfo&text=ShareFileCopyInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,java.time.Duration,com.azure.storage.file.share.options.ShareFileCopyOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, Duration pollInterval, ShareFileCopyOptions options)"
  name: "beginCopy(String sourceUrl, Duration pollInterval, ShareFileCopyOptions options)"
  nameWithType: "ShareFileAsyncClient.beginCopy(String sourceUrl, Duration pollInterval, ShareFileCopyOptions options)"
  summary: "Copies a blob or file to a destination file within the storage account."
  parameters:
  - description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    name: "pollInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareFileCopyOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileCopyOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareFileCopyOptions?alt=com.azure.storage.file.share.options.ShareFileCopyOptions&text=ShareFileCopyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, Duration pollInterval, ShareFileCopyOptions options)"
  desc: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n boolean ignoreReadOnly = false; // Default value\n boolean setArchiveAttribute = true; // Default value\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n CopyableFileSmbPropertiesList list = new CopyableFileSmbPropertiesList().setCreatedOn(true).setLastWrittenOn(true);\n // NOTE: FileSmbProperties and CopyableFileSmbPropertiesList should never be both set\n\n ShareFileCopyOptions options = new ShareFileCopyOptions()\n     .setSmbProperties(smbProperties)\n     .setFilePermission(filePermission)\n     .setIgnoreReadOnly(ignoreReadOnly)\n     .setSetArchiveAttribute(setArchiveAttribute)\n     .setDestinationRequestConditions(requestConditions)\n     .setSmbPropertiesToCopy(list)\n     .setPermissionCopyModeType(PermissionCopyModeType.SOURCE)\n     .setMetadata(Collections.singletonMap(\"file\", \"metadata\"));\n\n PollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\", Duration.ofSeconds(2), options);\n\n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error), () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-file"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the file copy operation until it has completed or has been cancelled."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileCopyInfo?alt=com.azure.storage.file.share.models.ShareFileCopyInfo&text=ShareFileCopyInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  name: "beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  nameWithType: "ShareFileAsyncClient.beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  summary: "Copies a blob or file to a destination file within the storage account."
  parameters:
  - description: "Specifies the URL of the source file or blob, up to 2 KB in length."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata. Metadata names must adhere to the\n naming rules."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    name: "pollInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<ShareFileCopyInfo,Void> beginCopy(String sourceUrl, Map<String,String> metadata, Duration pollInterval)"
  desc: "Copies a blob or file to a destination file within the storage account.\n\n**Code Samples**\n\nCopy file from source url to the `resourcePath`\n\n```java\nPollerFlux<ShareFileCopyInfo, Void> poller = shareFileAsyncClient.beginCopy(\n     \"https://{accountName}.file.core.windows.net?{SASToken}\",\n     Collections.singletonMap(\"file\", \"metadata\"), Duration.ofSeconds(2));\n\n poller.subscribe(response -> {\n     final ShareFileCopyInfo value = response.getValue();\n     System.out.printf(\"Copy source: %s. Status: %s.%n\", value.getCopySourceUrl(), value.getCopyStatus());\n }, error -> System.err.println(\"Error: \" + error),\n     () -> System.out.println(\"Complete copying the file.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-file"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the file copy operation until it has completed or has been cancelled."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileCopyInfo?alt=com.azure.storage.file.share.models.ShareFileCopyInfo&text=ShareFileCopyInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRange(long length)"
  name: "clearRange(long length)"
  nameWithType: "ShareFileAsyncClient.clearRange(long length)"
  summary: "Clear a range of bytes to specific of a file in storage file service."
  parameters:
  - description: "Specifies the number of bytes being cleared."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileUploadInfo> clearRange(long length)"
  desc: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClears the first 1024 bytes.\n\n```java\nshareFileAsyncClient.clearRange(1024).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete clearing the range!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset)"
  name: "clearRangeWithResponse(long length, long offset)"
  nameWithType: "ShareFileAsyncClient.clearRangeWithResponse(long length, long offset)"
  summary: "Clear a range of bytes to specific of a file in storage file service."
  parameters:
  - description: "Specifies the number of bytes being cleared in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    name: "offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset)"
  desc: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClear the range starting from 1024 with length of 1024.\n\n```java\nshareFileAsyncClient.clearRangeWithResponse(1024, 1024).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete clearing the range!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "A response of <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref> that only contains headers and response\n status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long,long,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  name: "clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  summary: "Clear a range of bytes to specific of a file in storage file service."
  parameters:
  - description: "Specifies the number of bytes being cleared in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>"
    name: "offset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadInfo>> clearRangeWithResponse(long length, long offset, ShareRequestConditions requestConditions)"
  desc: "Clear a range of bytes to specific of a file in storage file service. Clear operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nClear the range starting from 1024 with length of 1024.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.clearRangeWithResponse(1024, 1024, requestConditions).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete clearing the range!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "A response of <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref> that only contains headers and response\n status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.create(long)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.create(long maxSize)"
  name: "create(long maxSize)"
  nameWithType: "ShareFileAsyncClient.create(long maxSize)"
  summary: "Creates a file in the storage account and returns a response of <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileInfo\"></xref> to interact with it."
  parameters:
  - description: "The maximum size in bytes for the file."
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileInfo> create(long maxSize)"
  desc: "Creates a file in the storage account and returns a response of <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileInfo\"></xref> to interact with it.\n\n**Code Samples**\n\nCreate the file with size 1KB.\n\n```java\nshareFileAsyncClient.create(1024).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing the file info and the status of creating the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileInfo?alt=com.azure.storage.file.share.models.ShareFileInfo&text=ShareFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  name: "createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  summary: "Creates a file in the storage account and returns a response of Share<wbr>File<wbr>Info to interact with it."
  parameters:
  - description: "The maximum size in bytes for the file."
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  desc: "Creates a file in the storage account and returns a response of ShareFileInfo to interact with it.\n\n**Code Samples**\n\nCreate the file with length of 1024 bytes, some headers, file smb properties and metadata.\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareFileAsyncClient.createWithResponse(1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"))\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file info\"></xref> and the status of creating the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileInfo?alt=com.azure.storage.file.share.models.ShareFileInfo&text=ShareFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  name: "createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  summary: "Creates a file in the storage account and returns a response of Share<wbr>File<wbr>Info to interact with it."
  parameters:
  - description: "The maximum size in bytes for the file."
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileInfo>> createWithResponse(long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  desc: "Creates a file in the storage account and returns a response of ShareFileInfo to interact with it.\n\n**Code Samples**\n\nCreate the file with length of 1024 bytes, some headers, file smb properties and metadata.\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n\n shareFileAsyncClient.createWithResponse(1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file info\"></xref> and the status of creating the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileInfo?alt=com.azure.storage.file.share.models.ShareFileInfo&text=ShareFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.delete()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.delete()"
  name: "delete()"
  nameWithType: "ShareFileAsyncClient.delete()"
  summary: "Deletes the file associate with the client."
  syntax: "public Mono<Void> delete()"
  desc: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n```java\nshareFileAsyncClient.delete().subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "ShareFileAsyncClient.deleteIfExists()"
  summary: "Deletes the file associate with the client if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Deletes the file associate with the client if it exists.\n\n**Code Samples**\n\nDelete the file\n\n```java\nshareFileAsyncClient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the file was successfully\n deleted, <code>false</code> indicates that the file did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteIfExistsWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteIfExistsWithResponse(ShareRequestConditions requestConditions)"
  name: "deleteIfExistsWithResponse(ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.deleteIfExistsWithResponse(ShareRequestConditions requestConditions)"
  summary: "Deletes the file associate with the client if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse(ShareRequestConditions requestConditions)"
  desc: "Deletes the file associate with the client if it does not exist.\n\n**Code Samples**\n\nDelete the file\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.deleteIfExistsWithResponse(requestConditions).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse()"
  name: "deleteWithResponse()"
  nameWithType: "ShareFileAsyncClient.deleteWithResponse()"
  summary: "Deletes the file associate with the client."
  syntax: "public Mono<Response<Void>> deleteWithResponse()"
  desc: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n```java\nshareFileAsyncClient.deleteWithResponse().subscribe(\n     response -> System.out.println(\"Complete deleting the file with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions)"
  name: "deleteWithResponse(ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.deleteWithResponse(ShareRequestConditions requestConditions)"
  summary: "Deletes the file associate with the client."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(ShareRequestConditions requestConditions)"
  desc: "Deletes the file associate with the client.\n\n**Code Samples**\n\nDelete the file\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.deleteWithResponse(requestConditions).subscribe(\n     response -> System.out.println(\"Complete deleting the file with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.download()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.download()"
  name: "download()"
  nameWithType: "ShareFileAsyncClient.download()"
  summary: "Downloads a file from the system, including its metadata and properties"
  syntax: "public Flux<ByteBuffer> download()"
  desc: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file with its metadata and properties.\n\n```java\nshareFileAsyncClient.download().subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete downloading the data!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "A reactive response containing the file data."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFile(String downloadFilePath)"
  name: "downloadToFile(String downloadFilePath)"
  nameWithType: "ShareFileAsyncClient.downloadToFile(String downloadFilePath)"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path."
  parameters:
  - description: "The path where store the downloaded file"
    name: "downloadFilePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileProperties> downloadToFile(String downloadFilePath)"
  desc: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown.\n\n**Code Samples**\n\nDownload the file to current folder.\n\n```java\nshareFileAsyncClient.downloadToFile(\"somelocalfilepath\").subscribe(\n     response -> {\n         if (Files.exists(Paths.get(\"somelocalfilepath\"))) {\n             System.out.println(\"Successfully downloaded the file.\");\n         }\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete downloading the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  name: "downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  nameWithType: "ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path."
  parameters:
  - description: "The path where store the downloaded file"
    name: "downloadFilePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range)"
  desc: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown.\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes to current folder.\n\n```java\nshareFileAsyncClient.downloadToFileWithResponse(\"somelocalfilepath\", new ShareFileRange(1024, 2047L))\n     .subscribe(\n         response -> {\n             if (Files.exists(Paths.get(\"somelocalfilepath\"))) {\n                 System.out.println(\"Successfully downloaded the file with status code \"\n                     + response.getStatusCode());\n             }\n         },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete downloading the file!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  name: "downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  summary: "Downloads a file from the system, including its metadata and properties into a file specified by the path."
  parameters:
  - description: "The path where store the downloaded file"
    name: "downloadFilePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileProperties>> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions)"
  desc: "Downloads a file from the system, including its metadata and properties into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown.\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes to current folder.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.downloadToFileWithResponse(\"somelocalfilepath\", new ShareFileRange(1024, 2047L),\n     requestConditions)\n     .subscribe(\n         response -> {\n             if (Files.exists(Paths.get(\"somelocalfilepath\"))) {\n                 System.out.println(\"Successfully downloaded the file with status code \"\n                     + response.getStatusCode());\n             }\n         },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete downloading the file!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  name: "downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  summary: "Downloads a file from the system, including its metadata and properties"
  parameters:
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional boolean which the service returns the MD5 hash for the range when it sets to\n true, as long as the range is less than or equal to 4 MB in size."
    name: "rangeGetContentMD5"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5)"
  desc: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nshareFileAsyncClient.downloadWithResponse(new ShareFileRange(1024, 2047L), false)\n     .subscribe(response ->\n             System.out.printf(\"Complete downloading the data with status code %d%n\", response.getStatusCode()),\n         error -> System.err.println(error.getMessage())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "A reactive response containing response data and the file data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse?alt=com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse&text=ShareFileDownloadAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.models.ShareFileRange,java.lang.Boolean,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  name: "downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  summary: "Downloads a file from the system, including its metadata and properties"
  parameters:
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional boolean which the service returns the MD5 hash for the range when it sets to"
    name: "rangeGetContentMD5"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>\n true, as long as the range is less than or equal to 4 MB in size."
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileRange range, Boolean rangeGetContentMD5, ShareRequestConditions requestConditions)"
  desc: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.downloadWithResponse(new ShareFileRange(1024, 2047L), false, requestConditions)\n     .subscribe(response ->\n             System.out.printf(\"Complete downloading the data with status code %d%n\", response.getStatusCode()),\n         error -> System.err.println(error.getMessage())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "A reactive response containing response data and the file data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse?alt=com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse&text=ShareFileDownloadAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(com.azure.storage.file.share.options.ShareFileDownloadOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.downloadWithResponse(ShareFileDownloadOptions options)"
  name: "downloadWithResponse(ShareFileDownloadOptions options)"
  nameWithType: "ShareFileAsyncClient.downloadWithResponse(ShareFileDownloadOptions options)"
  summary: "Downloads a file from the system, including its metadata and properties"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareFileDownloadOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileDownloadOptions\"></xref>\n true, as long as the range is less than or equal to 4 MB in size."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareFileDownloadOptions?alt=com.azure.storage.file.share.options.ShareFileDownloadOptions&text=ShareFileDownloadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileDownloadAsyncResponse> downloadWithResponse(ShareFileDownloadOptions options)"
  desc: "Downloads a file from the system, including its metadata and properties\n\n**Code Samples**\n\nDownload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n ShareFileRange range = new ShareFileRange(1024, 2047L);\n DownloadRetryOptions retryOptions = new DownloadRetryOptions().setMaxRetryRequests(3);\n ShareFileDownloadOptions options = new ShareFileDownloadOptions().setRange(range)\n     .setRequestConditions(requestConditions)\n     .setRangeContentMd5Requested(false)\n     .setRetryOptions(retryOptions);\n shareFileAsyncClient.downloadWithResponse(options)\n     .subscribe(response ->\n             System.out.printf(\"Complete downloading the data with status code %d%n\", response.getStatusCode()),\n         error -> System.err.println(error.getMessage())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file"
  returns:
    description: "A reactive response containing response data and the file data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse?alt=com.azure.storage.file.share.models.ShareFileDownloadAsyncResponse&text=ShareFileDownloadAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.exists()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.exists()"
  name: "exists()"
  nameWithType: "ShareFileAsyncClient.exists()"
  summary: "Determines if the file this client represents exists in the cloud."
  syntax: "public Mono<Boolean> exists()"
  desc: "Determines if the file this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  returns:
    description: "Flag indicating existence of the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.existsWithResponse()"
  name: "existsWithResponse()"
  nameWithType: "ShareFileAsyncClient.existsWithResponse()"
  summary: "Determines if the file this client represents exists in the cloud."
  syntax: "public Mono<Response<Boolean>> existsWithResponse()"
  desc: "Determines if the file this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  returns:
    description: "Flag indicating existence of the file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseAllHandles()"
  name: "forceCloseAllHandles()"
  nameWithType: "ShareFileAsyncClient.forceCloseAllHandles()"
  summary: "Closes all handles opened on the file at the service."
  syntax: "public Mono<CloseHandlesInfo> forceCloseAllHandles()"
  desc: "Closes all handles opened on the file at the service.\n\n**Code Samples**\n\nForce close all handles.\n\n```java\nshareFileAsyncClient.forceCloseAllHandles().subscribe(handlesClosedInfo ->\n     System.out.printf(\"Closed %d open handles on the file.%nFailed to close %d open handles on the file%n\",\n         handlesClosedInfo.getClosedHandles(), handlesClosedInfo.getFailedHandles()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/force-close-handles"
  returns:
    description: "A response that contains information about the closed handles."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.CloseHandlesInfo?alt=com.azure.storage.file.share.models.CloseHandlesInfo&text=CloseHandlesInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandle(String handleId)"
  name: "forceCloseHandle(String handleId)"
  nameWithType: "ShareFileAsyncClient.forceCloseHandle(String handleId)"
  summary: "Closes a handle on the file."
  parameters:
  - description: "Handle ID to be closed."
    name: "handleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CloseHandlesInfo> forceCloseHandle(String handleId)"
  desc: "Closes a handle on the file. This is intended to be used alongside <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.listHandles()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listHandles()\"></xref>.\n\n**Code Samples**\n\nForce close handles returned by list handles.\n\n```java\nshareFileAsyncClient.listHandles().subscribe(handleItem ->\n     shareFileAsyncClient.forceCloseHandle(handleItem.getHandleId()).subscribe(ignored ->\n         System.out.printf(\"Closed handle %s on resource %s%n\",\n             handleItem.getHandleId(), handleItem.getPath())));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/force-close-handles"
  returns:
    description: "A response that contains information about the closed handles."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.CloseHandlesInfo?alt=com.azure.storage.file.share.models.CloseHandlesInfo&text=CloseHandlesInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId)"
  name: "forceCloseHandleWithResponse(String handleId)"
  nameWithType: "ShareFileAsyncClient.forceCloseHandleWithResponse(String handleId)"
  summary: "Closes a handle on the file."
  parameters:
  - description: "Handle ID to be closed."
    name: "handleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CloseHandlesInfo>> forceCloseHandleWithResponse(String handleId)"
  desc: "Closes a handle on the file. This is intended to be used alongside <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.listHandles()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listHandles()\"></xref>.\n\n**Code Samples**\n\nForce close handles returned by list handles.\n\n```java\nshareFileAsyncClient.listHandles().subscribe(handleItem ->\n     shareFileAsyncClient.forceCloseHandleWithResponse(handleItem.getHandleId()).subscribe(response ->\n         System.out.printf(\"Closing handle %s on resource %s completed with status code %d%n\",\n             handleItem.getHandleId(), handleItem.getPath(), response.getStatusCode())));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/force-close-handles"
  returns:
    description: "A response that contains information about the closed handles along with headers and response status\n code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.CloseHandlesInfo?alt=com.azure.storage.file.share.models.CloseHandlesInfo&text=CloseHandlesInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  nameWithType: "ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  summary: "Generates a service SAS for the file using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
    name: "shareServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues?alt=com.azure.storage.file.share.sas.ShareServiceSasSignatureValues&text=ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  desc: "Generates a service SAS for the file using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n\n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n shareFileAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  nameWithType: "ShareFileAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the file using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
    name: "shareServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues?alt=com.azure.storage.file.share.sas.ShareServiceSasSignatureValues&text=ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the file using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n\n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n shareFileAsyncClient.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "ShareFileAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountUrl()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "ShareFileAsyncClient.getAccountUrl()"
  summary: "Get the url of the storage account."
  syntax: "public String getAccountUrl()"
  desc: "Get the url of the storage account."
  returns:
    description: "the URL of the storage account"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getFilePath()"
  name: "getFilePath()"
  nameWithType: "ShareFileAsyncClient.getFilePath()"
  summary: "Get file path of the client."
  syntax: "public String getFilePath()"
  desc: "Get file path of the client.\n\nGet the file path.\n\n```java\nString filePath = shareFileAsyncClient.getFilePath();\n System.out.println(\"The name of the file is \" + filePath);\n```"
  returns:
    description: "The path of the file."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getFileUrl()"
  name: "getFileUrl()"
  nameWithType: "ShareFileAsyncClient.getFileUrl()"
  summary: "Get the url of the storage file client."
  syntax: "public String getFileUrl()"
  desc: "Get the url of the storage file client."
  returns:
    description: "the URL of the storage file client"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "ShareFileAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "ShareFileAsyncClient.getProperties()"
  summary: "Retrieves the properties of the storage account's file."
  syntax: "public Mono<ShareFileProperties> getProperties()"
  desc: "Retrieves the properties of the storage account's file. The properties include file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n```java\nshareFileAsyncClient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"File latest modified date is %s.\", properties.getLastModified());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file-properties"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Storage file properties\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "ShareFileAsyncClient.getPropertiesWithResponse()"
  summary: "Retrieves the properties of the storage account's file."
  syntax: "public Mono<Response<ShareFileProperties>> getPropertiesWithResponse()"
  desc: "Retrieves the properties of the storage account's file. The properties include file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n```java\nshareFileAsyncClient.getPropertiesWithResponse()\n     .subscribe(response -> {\n         ShareFileProperties properties = response.getValue();\n         System.out.printf(\"File latest modified date is %s.\", properties.getLastModified());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file-properties"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"storage file properties\"></xref> and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  name: "getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  summary: "Retrieves the properties of the storage account's file."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileProperties>> getPropertiesWithResponse(ShareRequestConditions requestConditions)"
  desc: "Retrieves the properties of the storage account's file. The properties include file metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve file properties\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.getPropertiesWithResponse(requestConditions)\n     .subscribe(response -> {\n         ShareFileProperties properties = response.getValue();\n         System.out.printf(\"File latest modified date is %s.\", properties.getLastModified());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file-properties"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"storage file properties\"></xref> and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "ShareFileAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public ShareServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.share.ShareServiceVersion?alt=com.azure.storage.file.share.ShareServiceVersion&text=ShareServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getShareName()"
  name: "getShareName()"
  nameWithType: "ShareFileAsyncClient.getShareName()"
  summary: "Get the share name of file client."
  syntax: "public String getShareName()"
  desc: "Get the share name of file client.\n\nGet the share name.\n\n```java\nString shareName = directoryAsyncClient.getShareName();\n System.out.println(\"The share name of the directory is \" + shareName);\n```"
  returns:
    description: "The share name of the file."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.getShareSnapshotId()"
  name: "getShareSnapshotId()"
  nameWithType: "ShareFileAsyncClient.getShareSnapshotId()"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref>."
  syntax: "public String getShareSnapshotId()"
  desc: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareFileAsyncClient shareFileAsyncClient = new ShareFileClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .resourcePath(\"myfiile\")\n     .snapshot(currentTime.toString())\n     .buildFileAsyncClient();\n\n System.out.printf(\"Snapshot ID: %s%n\", shareFileAsyncClient.getShareSnapshotId());\n```"
  returns:
    description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles()"
  name: "listHandles()"
  nameWithType: "ShareFileAsyncClient.listHandles()"
  summary: "List of open handles on a file."
  syntax: "public PagedFlux<HandleItem> listHandles()"
  desc: "List of open handles on a file.\n\n**Code Samples**\n\nList all handles for the file client.\n\n```java\nshareFileAsyncClient.listHandles()\n     .subscribe(result -> System.out.printf(\"List handles completed with handle id %s\", result.getHandleId()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-handles"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.HandleItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"handles\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.HandleItem?alt=com.azure.storage.file.share.models.HandleItem&text=HandleItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles(java.lang.Integer)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listHandles(Integer maxResultsPerPage)"
  name: "listHandles(Integer maxResultsPerPage)"
  nameWithType: "ShareFileAsyncClient.listHandles(Integer maxResultsPerPage)"
  summary: "List of open handles on a file."
  parameters:
  - description: "Optional maximum number of results will return per page"
    name: "maxResultsPerPage"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<HandleItem> listHandles(Integer maxResultsPerPage)"
  desc: "List of open handles on a file.\n\n**Code Samples**\n\nList 10 handles for the file client.\n\n```java\nshareFileAsyncClient.listHandles(10)\n     .subscribe(result -> System.out.printf(\"List handles completed with handle id %s\", result.getHandleId()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-handles"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.HandleItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"handles\"></xref> in the file that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.HandleItem?alt=com.azure.storage.file.share.models.HandleItem&text=HandleItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges()"
  name: "listRanges()"
  nameWithType: "ShareFileAsyncClient.listRanges()"
  summary: "List of valid ranges for a file."
  syntax: "public PagedFlux<ShareFileRange> listRanges()"
  desc: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges for the file client.\n\n```java\nshareFileAsyncClient.listRanges().subscribe(range ->\n     System.out.printf(\"List ranges completed with start: %d, end: %d\", range.getStart(), range.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-ranges"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range)"
  name: "listRanges(ShareFileRange range)"
  nameWithType: "ShareFileAsyncClient.listRanges(ShareFileRange range)"
  summary: "List of valid ranges for a file."
  parameters:
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareFileRange> listRanges(ShareFileRange range)"
  desc: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nshareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L))\n     .subscribe(result -> System.out.printf(\"List ranges completed with start: %d, end: %d\",\n         result.getStart(), result.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-ranges"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  name: "listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  summary: "List of valid ranges for a file."
  parameters:
  - description: "Optional byte range which returns file data only from the specified range."
    name: "range"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareFileRange> listRanges(ShareFileRange range, ShareRequestConditions requestConditions)"
  desc: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.listRanges(new ShareFileRange(1024, 2048L), requestConditions)\n     .subscribe(result -> System.out.printf(\"List ranges completed with start: %d, end: %d\",\n         result.getStart(), result.getEnd()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-ranges"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesDiff(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesDiff(String previousSnapshot)"
  name: "listRangesDiff(String previousSnapshot)"
  nameWithType: "ShareFileAsyncClient.listRangesDiff(String previousSnapshot)"
  summary: "List of valid ranges for a file between the file and the specified snapshot."
  parameters:
  - description: "Specifies that the response will contain only ranges that were changed between target\n file and previous snapshot. Changed ranges include both updated and cleared ranges. The target file may be a\n snapshot, as long as the snapshot specified by previousSnapshot is the older of the two."
    name: "previousSnapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileRangeList> listRangesDiff(String previousSnapshot)"
  desc: "List of valid ranges for a file between the file and the specified snapshot.\n\n**Code Samples**\n\n```java\nfinal String prevSnapshot = \"previoussnapshot\";\n shareFileAsyncClient.listRangesDiff(prevSnapshot).subscribe(response -> {\n     System.out.println(\"Valid Share File Ranges are:\");\n     for (FileRange range : response.getRanges()) {\n         System.out.printf(\"Start: %s, End: %s%n\", range.getStart(), range.getEnd());\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-ranges"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRangeList?alt=com.azure.storage.file.share.models.ShareFileRangeList&text=ShareFileRangeList\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesDiffWithResponse(com.azure.storage.file.share.options.ShareFileListRangesDiffOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.listRangesDiffWithResponse(ShareFileListRangesDiffOptions options)"
  name: "listRangesDiffWithResponse(ShareFileListRangesDiffOptions options)"
  nameWithType: "ShareFileAsyncClient.listRangesDiffWithResponse(ShareFileListRangesDiffOptions options)"
  summary: "List of valid ranges for a file."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareFileListRangesDiffOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileListRangesDiffOptions\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareFileListRangesDiffOptions?alt=com.azure.storage.file.share.options.ShareFileListRangesDiffOptions&text=ShareFileListRangesDiffOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileRangeList>> listRangesDiffWithResponse(ShareFileListRangesDiffOptions options)"
  desc: "List of valid ranges for a file.\n\n**Code Samples**\n\nList all ranges within the file range from 1KB to 2KB.\n\n```java\nshareFileAsyncClient.listRangesDiffWithResponse(new ShareFileListRangesDiffOptions(\"previoussnapshot\")\n     .setRange(new ShareFileRange(1024, 2048L))).subscribe(response -> {\n         System.out.println(\"Valid Share File Ranges are:\");\n         for (FileRange range : response.getValue().getRanges()) {\n             System.out.printf(\"Start: %s, End: %s%n\", range.getStart(), range.getEnd());\n         }\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-ranges"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ranges\"></xref> in the files that satisfy the requirements"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileRangeList?alt=com.azure.storage.file.share.models.ShareFileRangeList&text=ShareFileRangeList\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.rename(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.rename(String destinationPath)"
  name: "rename(String destinationPath)"
  nameWithType: "ShareFileAsyncClient.rename(String destinationPath)"
  summary: "Moves the file to another location within the share."
  parameters:
  - description: "Relative path from the share to rename the file to."
    name: "destinationPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileAsyncClient> rename(String destinationPath)"
  desc: "Moves the file to another location within the share. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nShareFileAsyncClient renamedClient = client.rename(destinationPath).block();\n System.out.println(\"File Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/rename-file"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> used to interact with the new file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.renameWithResponse(com.azure.storage.file.share.options.ShareFileRenameOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.renameWithResponse(ShareFileRenameOptions options)"
  name: "renameWithResponse(ShareFileRenameOptions options)"
  nameWithType: "ShareFileAsyncClient.renameWithResponse(ShareFileRenameOptions options)"
  summary: "Moves the file to another location within the share."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareFileRenameOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileRenameOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareFileRenameOptions?alt=com.azure.storage.file.share.options.ShareFileRenameOptions&text=ShareFileRenameOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileAsyncClient>> renameWithResponse(ShareFileRenameOptions options)"
  desc: "Moves the file to another location within the share. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n ShareFileRenameOptions options = new ShareFileRenameOptions(destinationPath)\n     .setDestinationRequestConditions(new ShareRequestConditions().setLeaseId(leaseId))\n     .setSourceRequestConditions(new ShareRequestConditions().setLeaseId(leaseId))\n     .setIgnoreReadOnly(false)\n     .setReplaceIfExists(false)\n     .setFilePermission(\"filePermission\")\n     .setSmbProperties(smbProperties);\n\n ShareFileAsyncClient newRenamedClient = client.renameWithResponse(options).block().getValue();\n System.out.println(\"File Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/rename-file"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> used to interact with the file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "ShareFileAsyncClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the user-defined metadata to associate to the file."
  parameters:
  - description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ShareFileMetadataInfo> setMetadata(Map<String,String> metadata)"
  desc: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n```java\nshareFileAsyncClient.setMetadata(Collections.singletonMap(\"file\", \"updatedMetadata\"))\n     .doOnSuccess(response -> System.out.println(\"Setting the file metadata completed.\"));\n```\n\nClear the metadata of the file\n\n```java\nshareFileAsyncClient.setMetadataWithResponse(null).subscribe(\n     response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-metadata"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileMetadataInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file meta info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileMetadataInfo?alt=com.azure.storage.file.share.models.ShareFileMetadataInfo&text=ShareFileMetadataInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  summary: "Sets the user-defined metadata to associate to the file."
  parameters:
  - description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)"
  desc: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n```java\nshareFileAsyncClient.setMetadataWithResponse(Collections.singletonMap(\"file\", \"updatedMetadata\"))\n     .subscribe(response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file\n\n```java\nshareFileAsyncClient.setMetadataWithResponse(null).subscribe(\n     response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-metadata"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileMetadataInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file meta info\"></xref> and status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileMetadataInfo?alt=com.azure.storage.file.share.models.ShareFileMetadataInfo&text=ShareFileMetadataInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  name: "setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  summary: "Sets the user-defined metadata to associate to the file."
  parameters:
  - description: "Options.Metadata to set on the file, if null is passed the metadata for the file is cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata, ShareRequestConditions requestConditions)"
  desc: "Sets the user-defined metadata to associate to the file.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the file.\n\n**Code Samples**\n\nSet the metadata to \"file:updatedMetadata\"\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setMetadataWithResponse(Collections.singletonMap(\"file\", \"updatedMetadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setMetadataWithResponse(null, requestConditions).subscribe(\n     response -> System.out.printf(\"Setting the file metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-metadata"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileMetadataInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file meta info\"></xref> and status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileMetadataInfo?alt=com.azure.storage.file.share.models.ShareFileMetadataInfo&text=ShareFileMetadataInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  name: "setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "ShareFileAsyncClient.setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  summary: "Sets the user-defined file properties to associate to the file."
  parameters:
  - description: "New file size of the file"
    name: "newFileSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file"
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileInfo> setProperties(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  desc: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the fileProperties.httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the fileProperties.filesmbproperties it will preserve the filesmb properties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareFileAsyncClient.setProperties(1024, httpHeaders, smbProperties, filePermission)\n     .doOnSuccess(response -> System.out.println(\"Setting the file properties completed.\"));\n```\n\nClear the metadata of the file and preserve the SMB properties\n\n```java\nshareFileAsyncClient.setProperties(1024, null, null, null)\n     .subscribe(response -> System.out.println(\"Setting the file httpHeaders completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-properties"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileInfo?alt=com.azure.storage.file.share.models.ShareFileInfo&text=ShareFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  name: "setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  summary: "Sets the user-defined file properties to associate to the file."
  parameters:
  - description: "New file size of the file."
    name: "newFileSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission)"
  desc: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareFileAsyncClient.setPropertiesWithResponse(1024, httpHeaders, smbProperties, filePermission)\n     .subscribe(response -> System.out.printf(\"Setting the file properties completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file and preserve the SMB properties\n\n```java\nshareFileAsyncClient.setPropertiesWithResponse(1024, null, null, null)\n     .subscribe(response -> System.out.printf(\"Setting the file httpHeaders completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-properties"
  returns:
    description: "Response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file info\"></xref> and response status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileInfo?alt=com.azure.storage.file.share.models.ShareFileInfo&text=ShareFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  name: "setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  summary: "Sets the user-defined file properties to associate to the file."
  parameters:
  - description: "New file size of the file."
    name: "newFileSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileInfo>> setPropertiesWithResponse(long newFileSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, ShareRequestConditions requestConditions)"
  desc: "Sets the user-defined file properties to associate to the file.\n\nIf `null` is passed for the httpHeaders it will clear the httpHeaders associated to the file. If `null` is passed for the filesmbproperties it will preserve the filesmbproperties associated with the file.\n\n**Code Samples**\n\nSet the httpHeaders of contentType of \"text/plain\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setPropertiesWithResponse(1024, httpHeaders, smbProperties, filePermission, requestConditions)\n     .subscribe(response -> System.out.printf(\"Setting the file properties completed with status code %d\",\n         response.getStatusCode()));\n```\n\nClear the metadata of the file and preserve the SMB properties\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.setPropertiesWithResponse(1024, null, null, null, requestConditions)\n     .subscribe(response -> System.out.printf(\"Setting the file httpHeaders completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-properties"
  returns:
    description: "Response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file info\"></xref> and response status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileInfo?alt=com.azure.storage.file.share.models.ShareFileInfo&text=ShareFileInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.common.ParallelTransferOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions transferOptions)"
  name: "upload(Flux<ByteBuffer> data, ParallelTransferOptions transferOptions)"
  nameWithType: "ShareFileAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions transferOptions)"
  summary: "Buffers a range of bytes and uploads sub-ranges in parallel to a file in storage file service."
  parameters:
  - description: "The data which will upload to the storage file."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> to use to upload data."
    name: "transferOptions"
    type: "<xref href=\"com.azure.storage.common.ParallelTransferOptions?alt=com.azure.storage.common.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileUploadInfo> upload(Flux<ByteBuffer> data, ParallelTransferOptions transferOptions)"
  desc: "Buffers a range of bytes and uploads sub-ranges in parallel to a file in storage file service. Upload operations perform an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.upload(Flux.just(defaultData), null).subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete deleting the file!\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.upload(Flux<ByteBuffer> data, long length)"
  name: "upload(Flux<ByteBuffer> data, long length)"
  nameWithType: "ShareFileAsyncClient.upload(Flux<ByteBuffer> data, long length)"
  summary: "Uploads a range of bytes to the beginning of a file in storage file service."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.uploadRange(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#uploadRange(Flux, long)\"></xref> instead. Or consider <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.common.ParallelTransferOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#upload(Flux, ParallelTransferOptions)\"></xref> for an upload that can handle large amounts of data."
  parameters:
  - description: "The data which will upload to the storage file."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies the number of bytes being transmitted in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<ShareFileUploadInfo> upload(Flux<ByteBuffer> data, long length)"
  desc: "Uploads a range of bytes to the beginning of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.upload(Flux.just(defaultData), defaultData.remaining()).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  hasDeprecatedTag: true
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(String uploadFilePath)"
  name: "uploadFromFile(String uploadFilePath)"
  nameWithType: "ShareFileAsyncClient.uploadFromFile(String uploadFilePath)"
  summary: "Uploads file to storage file service."
  parameters:
  - description: "The path where store the source file to upload"
    name: "uploadFilePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> uploadFromFile(String uploadFilePath)"
  desc: "Uploads file to storage file service.\n\n**Code Samples**\n\nUpload the file from the source file path.\n\n```java\nshareFileAsyncClient.uploadFromFile(\"someFilePath\").subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].\n\n\n[Azure Docs Create File]: https://docs.microsoft.com/rest/api/storageservices/create-file\n[Azure Docs Upload]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  name: "uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  summary: "Uploads file to storage file service."
  parameters:
  - description: "The path where store the source file to upload"
    name: "uploadFilePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> uploadFromFile(String uploadFilePath, ShareRequestConditions requestConditions)"
  desc: "Uploads file to storage file service.\n\n**Code Samples**\n\nUpload the file from the source file path.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.uploadFromFile(\"someFilePath\", requestConditions).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs Create File][] and [Azure Docs Upload][].\n\n\n[Azure Docs Create File]: https://docs.microsoft.com/rest/api/storageservices/create-file\n[Azure Docs Upload]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRange(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRange(Flux<ByteBuffer> data, long length)"
  name: "uploadRange(Flux<ByteBuffer> data, long length)"
  nameWithType: "ShareFileAsyncClient.uploadRange(Flux<ByteBuffer> data, long length)"
  summary: "Uploads a range of bytes to the specified offset of a file in storage file service."
  parameters:
  - description: "The data which will upload to the storage file."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies the number of bytes being transmitted in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileUploadInfo> uploadRange(Flux<ByteBuffer> data, long length)"
  desc: "Uploads a range of bytes to the specified offset of a file in storage file service. Upload operations perform an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadRange(Flux.just(defaultData), defaultData.remaining()).subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nThis method does a single Put Range operation. For more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long,long,long,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  name: "uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  summary: "Uploads a range of bytes from one file to another file."
  parameters:
  - description: "Specifies the number of bytes being transmitted in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Starting point of the upload range on the destination."
    name: "destinationOffset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Starting point of the upload range on the source."
    name: "sourceOffset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of the source file."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileUploadRangeFromUrlInfo> uploadRangeFromUrl(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  desc: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nshareFileAsyncClient.uploadRangeFromUrl(6, 8, 0, \"sourceUrl\").subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed upload range from url!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range-from-url"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload range from url info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo?alt=com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo&text=ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(com.azure.storage.file.share.options.ShareFileUploadRangeFromUrlOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(ShareFileUploadRangeFromUrlOptions options)"
  name: "uploadRangeFromUrlWithResponse(ShareFileUploadRangeFromUrlOptions options)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse(ShareFileUploadRangeFromUrlOptions options)"
  summary: "Uploads a range of bytes from one file to another file."
  parameters:
  - description: "argument collection"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareFileUploadRangeFromUrlOptions?alt=com.azure.storage.file.share.options.ShareFileUploadRangeFromUrlOptions&text=ShareFileUploadRangeFromUrlOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(ShareFileUploadRangeFromUrlOptions options)"
  desc: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nshareFileAsyncClient.uploadRangeFromUrlWithResponse(\n     new ShareFileUploadRangeFromUrlOptions(6, \"sourceUrl\").setDestinationOffset(8))\n     .subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Completed upload range from url!\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range-from-url"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload range from url info\"></xref> with\n headers and response status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo?alt=com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo&text=ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  summary: "Uploads a range of bytes from one file to another file."
  parameters:
  - description: "Specifies the number of bytes being transmitted in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Starting point of the upload range on the destination."
    name: "destinationOffset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Starting point of the upload range on the source."
    name: "sourceOffset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of the source file."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl)"
  desc: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nshareFileAsyncClient.uploadRangeFromUrlWithResponse(6, 8, 0, \"sourceUrl\").subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed upload range from url!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range-from-url"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload range from url info\"></xref> with\n headers and response status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo?alt=com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo&text=ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long,long,long,java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  name: "uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  nameWithType: "ShareFileAsyncClient.uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  summary: "Uploads a range of bytes from one file to another file."
  parameters:
  - description: "Specifies the number of bytes being transmitted in the request body."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Starting point of the upload range on the destination."
    name: "destinationOffset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Starting point of the upload range on the source."
    name: "sourceOffset"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the URL of the source file."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "destinationRequestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadRangeFromUrlInfo>> uploadRangeFromUrlWithResponse(long length, long destinationOffset, long sourceOffset, String sourceUrl, ShareRequestConditions destinationRequestConditions)"
  desc: "Uploads a range of bytes from one file to another file.\n\n**Code Samples**\n\nUpload a number of bytes from a file at defined source and destination offsets\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareFileAsyncClient.uploadRangeFromUrlWithResponse(6, 8, 0, \"sourceUrl\", requestConditions).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed upload range from url!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range-from-url"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload range from url info\"></xref> with\n headers and response status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo?alt=com.azure.storage.file.share.models.ShareFileUploadRangeFromUrlInfo&text=ShareFileUploadRangeFromUrlInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeWithResponse(com.azure.storage.file.share.models.ShareFileUploadRangeOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeWithResponse(ShareFileUploadRangeOptions options)"
  name: "uploadRangeWithResponse(ShareFileUploadRangeOptions options)"
  nameWithType: "ShareFileAsyncClient.uploadRangeWithResponse(ShareFileUploadRangeOptions options)"
  summary: "Uploads a range of bytes to the specified offset of a file in storage file service."
  parameters:
  - description: "Argument collection for the upload operation."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileUploadRangeOptions?alt=com.azure.storage.file.share.models.ShareFileUploadRangeOptions&text=ShareFileUploadRangeOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadInfo>> uploadRangeWithResponse(ShareFileUploadRangeOptions options)"
  desc: "Uploads a range of bytes to the specified offset of a file in storage file service. Upload operations perform an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadRangeWithResponse(new ShareFileUploadRangeOptions(\n     Flux.just(defaultData), defaultData.remaining())).subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete deleting the file!\"));\n```\n\nThis method does a single Put Range operation. For more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(com.azure.storage.file.share.models.ShareFileUploadOptions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(ShareFileUploadOptions options)"
  name: "uploadWithResponse(ShareFileUploadOptions options)"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse(ShareFileUploadOptions options)"
  summary: "Buffers a range of bytes and uploads sub-ranges in parallel to a file in storage file service."
  parameters:
  - description: "Argument collection for the upload operation."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileUploadOptions?alt=com.azure.storage.file.share.models.ShareFileUploadOptions&text=ShareFileUploadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(ShareFileUploadOptions options)"
  desc: "Buffers a range of bytes and uploads sub-ranges in parallel to a file in storage file service. Upload operations perform an in-place write on the specified file.\n\n**Code Samples**\n\nUpload data \"default\" to the file in Storage File Service.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadWithResponse(new ShareFileUploadOptions(\n     Flux.just(defaultData))).subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  summary: "Uploads a range of bytes to specific of a file in storage file service."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeWithResponse(com.azure.storage.file.share.models.ShareFileUploadRangeOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#uploadRangeWithResponse(ShareFileUploadRangeOptions)\"></xref> instead. Or consider <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(com.azure.storage.file.share.models.ShareFileUploadOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#uploadWithResponse(ShareFileUploadOptions)\"></xref> for an upload that can handle large amounts of data."
  parameters:
  - description: "The data which will upload to the storage file."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies the number of bytes being transmitted in the request body. When the\n ShareFileRangeWriteType is set to clear, the value of this header must be set to zero."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>."
    name: "offset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)"
  desc: "Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadWithResponse(Flux.just(defaultData), defaultData.remaining(), 0L).subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete deleting the file!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  hasDeprecatedTag: true
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref> with headers and response\n status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  name: "uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  nameWithType: "ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  summary: "Uploads a range of bytes to specific offset of a file in storage file service."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.uploadRangeWithResponse(com.azure.storage.file.share.models.ShareFileUploadRangeOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#uploadRangeWithResponse(ShareFileUploadRangeOptions)\"></xref> instead. Or consider <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(com.azure.storage.file.share.models.ShareFileUploadOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#uploadWithResponse(ShareFileUploadOptions)\"></xref> for an upload that can handle large amounts of data."
  parameters:
  - description: "The data which will upload to the storage file."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Specifies the number of bytes being transmitted in the request body. When the\n ShareFileRangeWriteType is set to clear, the value of this header must be set to zero."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional starting point of the upload range. It will start from the beginning if it is\n <code>null</code>."
    name: "offset"
    type: "<xref href=\"java.lang.Long?alt=java.lang.Long&text=Long\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)"
  desc: "Uploads a range of bytes to specific offset of a file in storage file service. Upload operations performs an in-place write on the specified file.\n\n**Code Samples**\n\nUpload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5.\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n ByteBuffer defaultData = ByteBuffer.wrap(\"default\".getBytes(StandardCharsets.UTF_8));\n shareFileAsyncClient.uploadWithResponse(Flux.just(defaultData), defaultData.remaining(), 0L, requestConditions)\n     .subscribe(\n         response -> { },\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete deleting the file!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/put-range"
  hasDeprecatedTag: true
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareFileUploadInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file upload info\"></xref> with headers and response\n status code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all the operations for interacting with file in Azure Storage File Service. Operations allowed by the client are creating, copying, uploading, downloading, deleting and listing on a file, retrieving properties, setting metadata and list or force close handles of the file.\n\n**Instantiating an Asynchronous File Client**\n\n```java\nShareFileAsyncClient client = new ShareFileClientBuilder()\n     .connectionString(\"${connectionString}\")\n     .endpoint(\"${endpoint}\")\n     .buildFileAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.ShareFileClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.storage.file.share"
artifact: com.azure:azure-storage-file-share:12.14.0-beta.1
