### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles
  id: Doubles
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives
  children:
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.BYTES
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.asList(double...)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.compare(double,double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.concat(double[]...)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.constrainToRange(double,double,double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.contains(double[],double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.ensureCapacity(double[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.hashCode(double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf(double[],double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf(double[],double[])
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.isFinite(double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.join(java.lang.String,double...)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.lastIndexOf(double[],double)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator()
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.max(double...)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.min(double...)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[])
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending(double[])
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending(double[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter()
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.toArray(java.util.Collection<? extends java.lang.Number>)
  - com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse(java.lang.String)
  langs:
  - java
  name: Doubles
  nameWithType: Doubles
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles
  type: Class
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Static utility methods pertaining to `double` primitives, that are not already found in either <xref uid="java.lang.Double" data-throw-if-not-resolved="false">Double</xref> or <xref uid="" data-throw-if-not-resolved="false">Arrays</xref>.


    See the Guava User Guide article on [primitive utilities][].



    [primitive utilities]: https://github.com/google/guava/wiki/PrimitivesExplained
  syntax:
    content: public final class Doubles
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.BYTES
  id: BYTES
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: BYTES
  nameWithType: Doubles.BYTES
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.BYTES
  type: Field
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    The number of bytes required to represent a primitive `double` value.


    **Java 8 users:** use <xref uid="java.lang.Double.BYTES" data-throw-if-not-resolved="false">Double#BYTES</xref> instead.
  syntax:
    content: public static final int BYTES
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.Doubles()
  id: Doubles()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: Doubles()
  nameWithType: Doubles.Doubles()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.Doubles()
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.Doubles*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.primitives
  syntax:
    content: private Doubles()
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.asList(double...)
  id: asList(double...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: asList(double[] backingArray)
  nameWithType: Doubles.asList(double[] backingArray)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.asList(double[] backingArray)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a fixed-size list backed by the specified array, similar to <xref uid="" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>. The list supports <xref uid="java.util.List.set*" data-throw-if-not-resolved="false">List#set(int, Object)</xref>, but any attempt to set a value to `null` will result in a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref>.


    The returned list maintains the values, but not the identities, of `Double` objects written to or read from it. For example, whether `list.get(0) == list.get(0)` is true for the returned list is unspecified.


    The returned list may have unexpected behavior if it contains `NaN`, or if `NaN` is used as a parameter to any of its methods.


    **Note:** when possible, you should represent your data as an <xref uid="" data-throw-if-not-resolved="false">ImmutableDoubleArray</xref> instead, which has an <xref uid="" data-throw-if-not-resolved="false">asList</xref> view.
  syntax:
    content: public static List<Double> asList(double[] backingArray)
    parameters:
    - id: backingArray
      type: double[]
      description: the array to back the list
    return:
      type: java.util.List<java.lang.Double>
      description: a list view of the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.compare(double,double)
  id: compare(double,double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: compare(double a, double b)
  nameWithType: Doubles.compare(double a, double b)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.compare(double a, double b)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Compares the two specified `double` values. The sign of the value returned is the same as that of `((Double) a).compareTo(b)`. As with that method, `NaN` is treated as greater than all other values, and `0.0 > -0.0`.


    **Note:** this method simply delegates to the JDK method <xref uid="java.lang.Double.compare" data-throw-if-not-resolved="false">Double#compare</xref>. It is provided for consistency with the other primitive types, whose compare methods were not added to the JDK until JDK 7.
  syntax:
    content: public static int compare(double a, double b)
    parameters:
    - id: a
      type: double
      description: the first <code>double</code> to compare
    - id: b
      type: double
      description: the second <code>double</code> to compare
    return:
      type: int
      description: >-
        a negative value if <code>a</code> is less than <code>b</code>; a positive value if <code>a</code> is
             greater than <code>b</code>; or zero if they are equal
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.concat(double[]...)
  id: concat(double[]...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: concat(double[][] arrays)
  nameWithType: Doubles.concat(double[][] arrays)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.concat(double[][] arrays)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the values from each provided array combined into a single array. For example, `concat(new double[] {a, b}, new double[] {}, new double[] {c}` returns the array `{a, b, c}`.
  syntax:
    content: public static double[] concat(double[][] arrays)
    parameters:
    - id: arrays
      type: double[][]
      description: zero or more <code>double</code> arrays
    return:
      type: double[]
      description: a single array containing all the values from the source arrays, in order
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.constrainToRange(double,double,double)
  id: constrainToRange(double,double,double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: constrainToRange(double value, double min, double max)
  nameWithType: Doubles.constrainToRange(double value, double min, double max)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.constrainToRange(double value, double min, double max)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.constrainToRange*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the value nearest to `value` which is within the closed range `[min..max]`.


    If `value` is within the range `[min..max]`, `value` is returned unchanged. If `value` is less than `min`, `min` is returned, and if `value` is greater than `max`, `max` is returned.
  syntax:
    content: public static double constrainToRange(double value, double min, double max)
    parameters:
    - id: value
      type: double
      description: the <code>double</code> value to constrain
    - id: min
      type: double
      description: the lower bound (inclusive) of the range to constrain <code>value</code> to
    - id: max
      type: double
      description: the upper bound (inclusive) of the range to constrain <code>value</code> to
    return:
      type: double
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.contains(double[],double)
  id: contains(double[],double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: contains(double[] array, double target)
  nameWithType: Doubles.contains(double[] array, double target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.contains(double[] array, double target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns `true` if `target` is present as an element anywhere in `array`. Note that this always returns `false` when `target` is `NaN`.
  syntax:
    content: public static boolean contains(double[] array, double target)
    parameters:
    - id: array
      type: double[]
      description: an array of <code>double</code> values, possibly empty
    - id: target
      type: double
      description: a primitive <code>double</code> value
    return:
      type: boolean
      description: <code>true</code> if <code>array[i] == target</code> for some value of <code>i</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.ensureCapacity(double[],int,int)
  id: ensureCapacity(double[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: ensureCapacity(double[] array, int minLength, int padding)
  nameWithType: Doubles.ensureCapacity(double[] array, int minLength, int padding)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.ensureCapacity(double[] array, int minLength, int padding)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.ensureCapacity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns an array containing the same values as `array`, but guaranteed to be of a specified minimum length. If `array` already has a length of at least `minLength`, it is returned directly. Otherwise, a new array of size `minLength + padding` is returned, containing the values of `array`, and zeroes in the remaining places.
  syntax:
    content: public static double[] ensureCapacity(double[] array, int minLength, int padding)
    parameters:
    - id: array
      type: double[]
      description: the source array
    - id: minLength
      type: int
      description: the minimum length the returned array must guarantee
    - id: padding
      type: int
      description: an extra amount to "grow" the array by if growth is necessary
    return:
      type: double[]
      description: >-
        an array containing the values of <code>array</code>, with guaranteed minimum length <code>
             minLength</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.hashCode(double)
  id: hashCode(double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: hashCode(double value)
  nameWithType: Doubles.hashCode(double value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.hashCode(double value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a hash code for `value`; equal to the result of invoking `((Double) value).hashCode()`.


    **Java 8 users:** use <xref uid="java.lang.Double.hashCode*" data-throw-if-not-resolved="false">Double#hashCode(double)</xref> instead.
  syntax:
    content: public static int hashCode(double value)
    parameters:
    - id: value
      type: double
      description: a primitive <code>double</code> value
    return:
      type: int
      description: a hash code for the value
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf(double[],double)
  id: indexOf(double[],double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: indexOf(double[] array, double target)
  nameWithType: Doubles.indexOf(double[] array, double target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf(double[] array, double target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the first appearance of the value `target` in `array`. Note that this always returns `-1` when `target` is `NaN`.
  syntax:
    content: public static int indexOf(double[] array, double target)
    parameters:
    - id: array
      type: double[]
      description: an array of <code>double</code> values, possibly empty
    - id: target
      type: double
      description: a primitive <code>double</code> value
    return:
      type: int
      description: >-
        the least index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf(double[],double[])
  id: indexOf(double[],double[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: indexOf(double[] array, double[] target)
  nameWithType: Doubles.indexOf(double[] array, double[] target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf(double[] array, double[] target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the start position of the first occurrence of the specified `target` within `array`, or `-1` if there is no such occurrence.


    More formally, returns the lowest index `i` such that `Arrays.copyOfRange(array, i, i + target.length)` contains exactly the same elements as `target`.


    Note that this always returns `-1` when `target` contains `NaN`.
  syntax:
    content: public static int indexOf(double[] array, double[] target)
    parameters:
    - id: array
      type: double[]
      description: the array to search for the sequence <code>target</code>
    - id: target
      type: double[]
      description: the array to search for as a sub-sequence of <code>array</code>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.isFinite(double)
  id: isFinite(double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: isFinite(double value)
  nameWithType: Doubles.isFinite(double value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.isFinite(double value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.isFinite*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns `true` if `value` represents a real number. This is equivalent to, but not necessarily implemented as, `!(Double.isInfinite(value) || Double.isNaN(value))`.


    **Java 8 users:** use <xref uid="java.lang.Double.isFinite*" data-throw-if-not-resolved="false">Double#isFinite(double)</xref> instead.
  syntax:
    content: public static boolean isFinite(double value)
    parameters:
    - id: value
      type: double
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.join(java.lang.String,double...)
  id: join(java.lang.String,double...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: join(String separator, double[] array)
  nameWithType: Doubles.join(String separator, double[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.join(String separator, double[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a string containing the supplied `double` values, converted to strings as specified by <xref uid="java.lang.Double.toString*" data-throw-if-not-resolved="false">Double#toString(double)</xref>, and separated by `separator`. For example, `join("-", 1.0, 2.0, 3.0)` returns the string `"1.0-2.0-3.0"`.


    Note that <xref uid="java.lang.Double.toString*" data-throw-if-not-resolved="false">Double#toString(double)</xref> formats `double` differently in GWT sometimes. In the previous example, it returns the string `"1-2-3"`.
  syntax:
    content: public static String join(String separator, double[] array)
    parameters:
    - id: separator
      type: java.lang.String
      description: >-
        the text that should appear between consecutive values in the resulting string
             (but not at the start or end)
    - id: array
      type: double[]
      description: an array of <code>double</code> values, possibly empty
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.lastIndexOf(double[],double)
  id: lastIndexOf(double[],double)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: lastIndexOf(double[] array, double target)
  nameWithType: Doubles.lastIndexOf(double[] array, double target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.lastIndexOf(double[] array, double target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.lastIndexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the last appearance of the value `target` in `array`. Note that this always returns `-1` when `target` is `NaN`.
  syntax:
    content: public static int lastIndexOf(double[] array, double target)
    parameters:
    - id: array
      type: double[]
      description: an array of <code>double</code> values, possibly empty
    - id: target
      type: double
      description: a primitive <code>double</code> value
    return:
      type: int
      description: >-
        the greatest index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator()
  id: lexicographicalComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: lexicographicalComparator()
  nameWithType: Doubles.lexicographicalComparator()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator()
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a comparator that compares two `double` arrays [lexicographically][]. That is, it compares, using <xref uid="com.azure.cosmos.implementation.guava25.primitives.Doubles.compare(double,double)" data-throw-if-not-resolved="false">#compare(double, double)</xref>), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, `[] < [1.0] < [1.0, 2.0] < [2.0]`.


    The returned comparator is inconsistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref> (since arrays support only identity equality), but it is consistent with <xref uid="Arrays#equals(double[],
     double[])" data-throw-if-not-resolved="false">Arrays#equals(double[],
     double[])</xref>.


    [lexicographically]: http://en.wikipedia.org/wiki/Lexicographical_order
  syntax:
    content: public static Comparator<double[]> lexicographicalComparator()
    return:
      type: java.util.Comparator<double[]>
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.max(double...)
  id: max(double...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: max(double[] array)
  nameWithType: Doubles.max(double[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.max(double[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.max*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the greatest value present in `array`, using the same rules of comparison as <xref uid="" data-throw-if-not-resolved="false">Math#max(double, double)</xref>.
  syntax:
    content: public static double max(double[] array)
    parameters:
    - id: array
      type: double[]
      description: a <i>nonempty</i> array of <code>double</code> values
    return:
      type: double
      description: >-
        the value present in <code>array</code> that is greater than or equal to every other value
             in the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.min(double...)
  id: min(double...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: min(double[] array)
  nameWithType: Doubles.min(double[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.min(double[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.min*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the least value present in `array`, using the same rules of comparison as <xref uid="" data-throw-if-not-resolved="false">Math#min(double, double)</xref>.
  syntax:
    content: public static double min(double[] array)
    parameters:
    - id: array
      type: double[]
      description: a <i>nonempty</i> array of <code>double</code> values
    return:
      type: double
      description: >-
        the value present in <code>array</code> that is less than or equal to every other value in
             the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[])
  id: reverse(double[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: reverse(double[] array)
  nameWithType: Doubles.reverse(double[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array`. This is equivalent to `Collections.reverse(Doubles.asList(array))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(double[] array)
    parameters:
    - id: array
      type: double[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[],int,int)
  id: reverse(double[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: reverse(double[] array, int fromIndex, int toIndex)
  nameWithType: Doubles.reverse(double[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse(double[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive. This is equivalent to `Collections.reverse(Doubles.asList(array).subList(fromIndex, toIndex))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(double[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: double[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending(double[])
  id: sortDescending(double[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: sortDescending(double[] array)
  nameWithType: Doubles.sortDescending(double[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending(double[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Sorts the elements of `array` in descending order.


    Note that this method uses the total order imposed by <xref uid="java.lang.Double.compare" data-throw-if-not-resolved="false">Double#compare</xref>, which treats all NaN values as equal and 0.0 as greater than -0.0.
  syntax:
    content: public static void sortDescending(double[] array)
    parameters:
    - id: array
      type: double[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending(double[],int,int)
  id: sortDescending(double[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: sortDescending(double[] array, int fromIndex, int toIndex)
  nameWithType: Doubles.sortDescending(double[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending(double[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Sorts the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive in descending order.


    Note that this method uses the total order imposed by <xref uid="java.lang.Double.compare" data-throw-if-not-resolved="false">Double#compare</xref>, which treats all NaN values as equal and 0.0 as greater than -0.0.
  syntax:
    content: public static void sortDescending(double[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: double[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter()
  id: stringConverter()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: stringConverter()
  nameWithType: Doubles.stringConverter()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter()
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns a serializable converter object that converts between strings and doubles using <xref uid="java.lang.Double.valueOf" data-throw-if-not-resolved="false">Double#valueOf</xref> and <xref uid="java.lang.Double.toString*" data-throw-if-not-resolved="false">Double#toString()</xref>.
  syntax:
    content: public static Converter<String,Double> stringConverter()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,java.lang.Double>
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.toArray(java.util.Collection<? extends java.lang.Number>)
  id: toArray(java.util.Collection<? extends java.lang.Number>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: toArray(Collection<? extends Number> collection)
  nameWithType: Doubles.toArray(Collection<? extends Number> collection)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.toArray(Collection<? extends Number> collection)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns an array containing each value of `collection`, converted to a `double` value in the manner of <xref uid="? extends java.lang.Number.doubleValue" data-throw-if-not-resolved="false">Number#doubleValue</xref>.


    Elements are copied from the argument collection as if by `collection.toArray()`. Calling this method is as thread-safe as calling that method.
  syntax:
    content: public static double[] toArray(Collection<? extends Number> collection)
    parameters:
    - id: collection
      type: java.util.Collection<? extends java.lang.Number>
      description: a collection of <code>Number</code> instances
    return:
      type: double[]
      description: >-
        an array containing the same values as <code>collection</code>, in the same order, converted
             to primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse(java.lang.String)
  id: tryParse(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Doubles
  langs:
  - java
  name: tryParse(String string)
  nameWithType: Doubles.tryParse(String string)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse(String string)
  overload: com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Parses the specified string as a double-precision floating point value. The ASCII character `'-'` (`'\u002D'`) is recognized as the minus sign.


    Unlike <xref uid="java.lang.Double.parseDouble*" data-throw-if-not-resolved="false">Double#parseDouble(String)</xref>, this method returns `null` instead of throwing an exception if parsing fails. Valid inputs are exactly those accepted by <xref uid="java.lang.Double.valueOf*" data-throw-if-not-resolved="false">Double#valueOf(String)</xref>, except that leading and trailing whitespace is not permitted.


    This implementation is likely to be faster than `Double.parseDouble` if many failures are expected.
  syntax:
    content: public static Double tryParse(String string)
    parameters:
    - id: string
      type: java.lang.String
      description: the string representation of a <code>double</code> value
    return:
      type: java.lang.Double
      description: >-
        the floating point value represented by <code>string</code>, or <code>null</code> if <code>
             string</code> has a length of zero or cannot be parsed as a <code>double</code> value
references:
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.Doubles*
  name: Doubles
  nameWithType: Doubles.Doubles
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.Doubles
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.hashCode*
  name: hashCode
  nameWithType: Doubles.hashCode
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.hashCode
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.compare*
  name: compare
  nameWithType: Doubles.compare
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.compare
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.isFinite*
  name: isFinite
  nameWithType: Doubles.isFinite
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.isFinite
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: double[]
  spec.java:
  - uid: double
    name: double
    fullName: double
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.contains*
  name: contains
  nameWithType: Doubles.contains
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.contains
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf*
  name: indexOf
  nameWithType: Doubles.indexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.indexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.lastIndexOf*
  name: lastIndexOf
  nameWithType: Doubles.lastIndexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.lastIndexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.min*
  name: min
  nameWithType: Doubles.min
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.min
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.max*
  name: max
  nameWithType: Doubles.max
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.max
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.constrainToRange*
  name: constrainToRange
  nameWithType: Doubles.constrainToRange
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.constrainToRange
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: double[][]
  spec.java:
  - uid: double
    name: double
    fullName: double
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.concat*
  name: concat
  nameWithType: Doubles.concat
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.concat
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.base.Converter<java.lang.String,java.lang.Double>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Converter
    name: Converter
    fullName: com.azure.cosmos.implementation.guava25.base.Converter
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Double
    name: Double
    fullName: java.lang.Double
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter*
  name: stringConverter
  nameWithType: Doubles.stringConverter
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.ensureCapacity*
  name: ensureCapacity
  nameWithType: Doubles.ensureCapacity
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.ensureCapacity
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.join*
  name: join
  nameWithType: Doubles.join
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.join
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Comparator<double[]>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: double
    name: double
    fullName: double
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator*
  name: lexicographicalComparator
  nameWithType: Doubles.lexicographicalComparator
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending*
  name: sortDescending
  nameWithType: Doubles.sortDescending
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.sortDescending
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse*
  name: reverse
  nameWithType: Doubles.reverse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.reverse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Collection<? extends java.lang.Number>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends java.lang.Number'
    name: Number
    fullName: '? extends java.lang.Number'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.toArray*
  name: toArray
  nameWithType: Doubles.toArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.toArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.List<java.lang.Double>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Double
    name: Double
    fullName: java.lang.Double
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.asList*
  name: asList
  nameWithType: Doubles.asList
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.asList
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Double
  spec.java:
  - uid: java.lang.Double
    name: Double
    fullName: java.lang.Double
- uid: com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse*
  name: tryParse
  nameWithType: Doubles.tryParse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.String,java.lang.Double
  name: String,Double
  nameWithType: String,Double
  fullName: java.lang.String,java.lang.Double
- uid: com.azure.cosmos.implementation.guava25.base.Converter
  name: Converter
  nameWithType: Converter
  fullName: com.azure.cosmos.implementation.guava25.base.Converter
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '? extends java.lang.Number'
  name: '? extends Number'
  nameWithType: '? extends Number'
  fullName: '? extends java.lang.Number'
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
