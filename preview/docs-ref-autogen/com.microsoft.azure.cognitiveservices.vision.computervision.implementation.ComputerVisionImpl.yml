### YamlMime:JavaType
uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl"
fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl"
name: "ComputerVisionImpl"
nameWithType: "ComputerVisionImpl"
summary: "An instance of this class provides access to all the operations defined in Computer<wbr>Vision."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ComputerVisionImpl implements ComputerVision"
constructors:
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionImpl(retrofit2.Retrofit,com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionClientImpl)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionImpl(Retrofit retrofit, ComputerVisionClientImpl client)"
  name: "ComputerVisionImpl(Retrofit retrofit, ComputerVisionClientImpl client)"
  nameWithType: "ComputerVisionImpl.ComputerVisionImpl(Retrofit retrofit, ComputerVisionClientImpl client)"
  summary: "Initializes an instance of Computer<wbr>Vision<wbr>Impl."
  parameters:
  - description: "the Retrofit instance built from a Retrofit Builder."
    name: "retrofit"
    type: "<xref href=\"retrofit2.Retrofit?alt=retrofit2.Retrofit&text=Retrofit\" data-throw-if-not-resolved=\"False\" />"
  - description: "the instance of the service client containing this operation class."
    name: "client"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionClientImpl?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionClientImpl&text=ComputerVisionClientImpl\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ComputerVisionImpl(Retrofit retrofit, ComputerVisionClientImpl client)"
  desc: "Initializes an instance of ComputerVisionImpl."
methods:
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImage()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImage()"
  name: "analyzeImage()"
  nameWithType: "ComputerVisionImpl.analyzeImage()"
  summary: "This operation extracts a rich set of visual features based on the image content."
  syntax: "public ComputerVisionImpl.ComputerVisionAnalyzeImageParameters analyzeImage()"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageParameters&text=ComputerVisionAnalyzeImageParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImage(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  name: "analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter&text=AnalyzeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageAnalysis analyzeImage(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the ImageAnalysis object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  name: "analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter&text=AnalyzeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ImageAnalysis> analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageAnalysis object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  name: "analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  nameWithType: "ComputerVisionImpl.analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter&text=AnalyzeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<ImageAnalysis> analyzeImageAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomain()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomain()"
  name: "analyzeImageByDomain()"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomain()"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  syntax: "public ComputerVisionImpl.ComputerVisionAnalyzeImageByDomainParameters analyzeImageByDomain()"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageByDomainParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageByDomainParameters&text=ComputerVisionAnalyzeImageByDomainParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomain(java.lang.String,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  name: "analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter&text=AnalyzeImageByDomainOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DomainModelResults analyzeImageByDomain(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the DomainModelResults object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainAsync(java.lang.String,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  name: "analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter&text=AnalyzeImageByDomainOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DomainModelResults> analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DomainModelResults object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainAsync(java.lang.String,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  name: "analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter&text=AnalyzeImageByDomainOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<DomainModelResults> analyzeImageByDomainAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStream()"
  name: "analyzeImageByDomainInStream()"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainInStream()"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  syntax: "public ComputerVisionImpl.ComputerVisionAnalyzeImageByDomainInStreamParameters analyzeImageByDomainInStream()"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageByDomainInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageByDomainInStreamParameters&text=ComputerVisionAnalyzeImageByDomainInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStream(java.lang.String,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  name: "analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter&text=AnalyzeImageByDomainInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DomainModelResults analyzeImageByDomainInStream(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the DomainModelResults object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamAsync(java.lang.String,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  name: "analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter&text=AnalyzeImageByDomainInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DomainModelResults object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamAsync(java.lang.String,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  name: "analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter&text=AnalyzeImageByDomainInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter, ServiceCallback<DomainModelResults> serviceCallback)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamWithServiceResponseAsync(java.lang.String,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  name: "analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainInStreamOptionalParameter&text=AnalyzeImageByDomainInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DomainModelResults>> analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, AnalyzeImageByDomainInStreamOptionalParameter analyzeImageByDomainInStreamOptionalParameter)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DomainModelResults object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamWithServiceResponseAsync(java.lang.String,byte[],java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, String language, String modelVersion)"
  name: "analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, String language, String modelVersion)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, String language, String modelVersion)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DomainModelResults>> analyzeImageByDomainInStreamWithServiceResponseAsync(String model, byte[] image, String language, String modelVersion)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DomainModelResults object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainWithServiceResponseAsync(java.lang.String,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainWithServiceResponseAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  name: "analyzeImageByDomainWithServiceResponseAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainWithServiceResponseAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageByDomainOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageByDomainOptionalParameter&text=AnalyzeImageByDomainOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DomainModelResults>> analyzeImageByDomainWithServiceResponseAsync(String model, String url, AnalyzeImageByDomainOptionalParameter analyzeImageByDomainOptionalParameter)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DomainModelResults object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageByDomainWithServiceResponseAsync(String model, String url, String language, String modelVersion)"
  name: "analyzeImageByDomainWithServiceResponseAsync(String model, String url, String language, String modelVersion)"
  nameWithType: "ComputerVisionImpl.analyzeImageByDomainWithServiceResponseAsync(String model, String url, String language, String modelVersion)"
  summary: "This operation recognizes content within an image by applying a domain-specific model."
  parameters:
  - description: "The domain-specific content to recognize."
    name: "model"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DomainModelResults>> analyzeImageByDomainWithServiceResponseAsync(String model, String url, String language, String modelVersion)"
  desc: "This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DomainModelResults object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults&text=DomainModelResults\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStream()"
  name: "analyzeImageInStream()"
  nameWithType: "ComputerVisionImpl.analyzeImageInStream()"
  summary: "This operation extracts a rich set of visual features based on the image content."
  syntax: "public ComputerVisionImpl.ComputerVisionAnalyzeImageInStreamParameters analyzeImageInStream()"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionAnalyzeImageInStreamParameters&text=ComputerVisionAnalyzeImageInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStream(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  name: "analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter&text=AnalyzeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageAnalysis analyzeImageInStream(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the ImageAnalysis object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  name: "analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter&text=AnalyzeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ImageAnalysis> analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageAnalysis object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  name: "analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  nameWithType: "ComputerVisionImpl.analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter&text=AnalyzeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<ImageAnalysis> analyzeImageInStreamAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter, ServiceCallback<ImageAnalysis> serviceCallback)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamWithServiceResponseAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  name: "analyzeImageInStreamWithServiceResponseAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageInStreamWithServiceResponseAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageInStreamOptionalParameter&text=AnalyzeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageAnalysis>> analyzeImageInStreamWithServiceResponseAsync(byte[] image, AnalyzeImageInStreamOptionalParameter analyzeImageInStreamOptionalParameter)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageAnalysis object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamWithServiceResponseAsync(byte[],java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes>,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.Details>,java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude>,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageInStreamWithServiceResponseAsync(byte[] image, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  name: "analyzeImageInStreamWithServiceResponseAsync(byte[] image, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  nameWithType: "ComputerVisionImpl.analyzeImageInStreamWithServiceResponseAsync(byte[] image, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&amp;white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English."
    name: "visualFeatures"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes&text=VisualFeatureTypes\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image."
    name: "details"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.Details?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.Details&text=Details\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Turn off specified domain models when generating the description."
    name: "descriptionExclude"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude&text=DescriptionExclude\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageAnalysis>> analyzeImageInStreamWithServiceResponseAsync(byte[] image, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageAnalysis object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageWithServiceResponseAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  name: "analyzeImageWithServiceResponseAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.analyzeImageWithServiceResponseAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "analyzeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AnalyzeImageOptionalParameter&text=AnalyzeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageAnalysis>> analyzeImageWithServiceResponseAsync(String url, AnalyzeImageOptionalParameter analyzeImageOptionalParameter)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageAnalysis object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageWithServiceResponseAsync(java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes>,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.Details>,java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude>,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.analyzeImageWithServiceResponseAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  name: "analyzeImageWithServiceResponseAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  nameWithType: "ComputerVisionImpl.analyzeImageWithServiceResponseAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  summary: "This operation extracts a rich set of visual features based on the image content."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A string indicating what visual feature types to return. Multiple values should be comma-separated. Valid visual feature types include: Categories - categorizes image content according to a taxonomy defined in documentation. Tags - tags the image with a detailed list of words related to the image content. Description - describes the image content with a complete English sentence. Faces - detects if faces are present. If present, generate coordinates, gender and age. ImageType - detects if image is clipart or a line drawing. Color - determines the accent color, dominant color, and whether an image is black&amp;white. Adult - detects if the image is pornographic in nature (depicts nudity or a sex act), or is gory (depicts extreme violence or blood). Sexually suggestive content (aka racy content) is also detected. Objects - detects various objects within an image, including the approximate location. The Objects argument is only available in English. Brands - detects various brands within an image, including the approximate location. The Brands argument is only available in English."
    name: "visualFeatures"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes&text=VisualFeatureTypes\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A string indicating which domain-specific details to return. Multiple values should be comma-separated. Valid visual feature types include: Celebrities - identifies celebrities if detected in the image, Landmarks - identifies notable landmarks in the image."
    name: "details"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.Details?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.Details&text=Details\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Turn off specified domain models when generating the description."
    name: "descriptionExclude"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude&text=DescriptionExclude\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageAnalysis>> analyzeImageWithServiceResponseAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  desc: "This operation extracts a rich set of visual features based on the image content. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageAnalysis object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis&text=ImageAnalysis\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImage()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImage()"
  name: "describeImage()"
  nameWithType: "ComputerVisionImpl.describeImage()"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  syntax: "public ComputerVisionImpl.ComputerVisionDescribeImageParameters describeImage()"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDescribeImageParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDescribeImageParameters&text=ComputerVisionDescribeImageParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImage(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  name: "describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter&text=DescribeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDescription describeImage(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the ImageDescription object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  name: "describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter&text=DescribeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ImageDescription> describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageDescription object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  name: "describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  nameWithType: "ComputerVisionImpl.describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter&text=DescribeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<ImageDescription> describeImageAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStream()"
  name: "describeImageInStream()"
  nameWithType: "ComputerVisionImpl.describeImageInStream()"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  syntax: "public ComputerVisionImpl.ComputerVisionDescribeImageInStreamParameters describeImageInStream()"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDescribeImageInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDescribeImageInStreamParameters&text=ComputerVisionDescribeImageInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStream(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  name: "describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter&text=DescribeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ImageDescription describeImageInStream(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the ImageDescription object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  name: "describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter&text=DescribeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ImageDescription> describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageDescription object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  name: "describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  nameWithType: "ComputerVisionImpl.describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter&text=DescribeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<ImageDescription> describeImageInStreamAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter, ServiceCallback<ImageDescription> serviceCallback)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamWithServiceResponseAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  name: "describeImageInStreamWithServiceResponseAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.describeImageInStreamWithServiceResponseAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageInStreamOptionalParameter&text=DescribeImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageDescription>> describeImageInStreamWithServiceResponseAsync(byte[] image, DescribeImageInStreamOptionalParameter describeImageInStreamOptionalParameter)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageDescription object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamWithServiceResponseAsync(byte[],java.lang.Integer,java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude>,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageInStreamWithServiceResponseAsync(byte[] image, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  name: "describeImageInStreamWithServiceResponseAsync(byte[] image, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  nameWithType: "ComputerVisionImpl.describeImageInStreamWithServiceResponseAsync(byte[] image, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Maximum number of candidate descriptions to be returned.  The default is 1."
    name: "maxCandidates"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Turn off specified domain models when generating the description."
    name: "descriptionExclude"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude&text=DescriptionExclude\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageDescription>> describeImageInStreamWithServiceResponseAsync(byte[] image, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageDescription object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageWithServiceResponseAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  name: "describeImageWithServiceResponseAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.describeImageWithServiceResponseAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "describeImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescribeImageOptionalParameter&text=DescribeImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageDescription>> describeImageWithServiceResponseAsync(String url, DescribeImageOptionalParameter describeImageOptionalParameter)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageDescription object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageWithServiceResponseAsync(java.lang.String,java.lang.Integer,java.lang.String,java.util.List<com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude>,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.describeImageWithServiceResponseAsync(String url, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  name: "describeImageWithServiceResponseAsync(String url, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  nameWithType: "ComputerVisionImpl.describeImageWithServiceResponseAsync(String url, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  summary: "This operation generates a description of an image in human readable language with complete sentences."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of candidate descriptions to be returned.  The default is 1."
    name: "maxCandidates"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Turn off specified domain models when generating the description."
    name: "descriptionExclude"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude&text=DescriptionExclude\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ImageDescription>> describeImageWithServiceResponseAsync(String url, Integer maxCandidates, String language, List<DescriptionExclude> descriptionExclude, String modelVersion)"
  desc: "This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ImageDescription object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription&text=ImageDescription\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjects()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjects()"
  name: "detectObjects()"
  nameWithType: "ComputerVisionImpl.detectObjects()"
  summary: "Performs object detection on the specified image."
  syntax: "public ComputerVisionImpl.ComputerVisionDetectObjectsParameters detectObjects()"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDetectObjectsParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDetectObjectsParameters&text=ComputerVisionDetectObjectsParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjects(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  name: "detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DetectResult detectObjects(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the DetectResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  name: "detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DetectResult> detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  name: "detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<DetectResult> detectObjectsAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStream()"
  name: "detectObjectsInStream()"
  nameWithType: "ComputerVisionImpl.detectObjectsInStream()"
  summary: "Performs object detection on the specified image."
  syntax: "public ComputerVisionImpl.ComputerVisionDetectObjectsInStreamParameters detectObjectsInStream()"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDetectObjectsInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionDetectObjectsInStreamParameters&text=ComputerVisionDetectObjectsInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStream(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  name: "detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter&text=DetectObjectsInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DetectResult detectObjectsInStream(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the DetectResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  name: "detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter&text=DetectObjectsInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DetectResult> detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  name: "detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter&text=DetectObjectsInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<DetectResult> detectObjectsInStreamAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter, ServiceCallback<DetectResult> serviceCallback)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamWithServiceResponseAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  name: "detectObjectsInStreamWithServiceResponseAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjectsInStreamWithServiceResponseAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsInStreamOptionalParameter&text=DetectObjectsInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DetectResult>> detectObjectsInStreamWithServiceResponseAsync(byte[] image, DetectObjectsInStreamOptionalParameter detectObjectsInStreamOptionalParameter)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamWithServiceResponseAsync(byte[],java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  name: "detectObjectsInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  nameWithType: "ComputerVisionImpl.detectObjectsInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DetectResult>> detectObjectsInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsWithServiceResponseAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  name: "detectObjectsWithServiceResponseAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  nameWithType: "ComputerVisionImpl.detectObjectsWithServiceResponseAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectObjectsOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectObjectsOptionalParameter&text=DetectObjectsOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DetectResult>> detectObjectsWithServiceResponseAsync(String url, DetectObjectsOptionalParameter detectObjectsOptionalParameter)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.detectObjectsWithServiceResponseAsync(String url, String modelVersion)"
  name: "detectObjectsWithServiceResponseAsync(String url, String modelVersion)"
  nameWithType: "ComputerVisionImpl.detectObjectsWithServiceResponseAsync(String url, String modelVersion)"
  summary: "Performs object detection on the specified image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<DetectResult>> detectObjectsWithServiceResponseAsync(String url, String modelVersion)"
  desc: "Performs object detection on the specified image. Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the DetectResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnail()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnail()"
  name: "generateThumbnail()"
  nameWithType: "ComputerVisionImpl.generateThumbnail()"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  syntax: "public ComputerVisionImpl.ComputerVisionGenerateThumbnailParameters generateThumbnail()"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGenerateThumbnailParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGenerateThumbnailParameters&text=ComputerVisionGenerateThumbnailParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnail(int,int,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  name: "generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  nameWithType: "ComputerVisionImpl.generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter&text=GenerateThumbnailOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public InputStream generateThumbnail(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailAsync(int,int,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  name: "generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  nameWithType: "ComputerVisionImpl.generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter&text=GenerateThumbnailOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<InputStream> generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailAsync(int,int,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  name: "generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "ComputerVisionImpl.generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter&text=GenerateThumbnailOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<InputStream> generateThumbnailAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStream()"
  name: "generateThumbnailInStream()"
  nameWithType: "ComputerVisionImpl.generateThumbnailInStream()"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  syntax: "public ComputerVisionImpl.ComputerVisionGenerateThumbnailInStreamParameters generateThumbnailInStream()"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGenerateThumbnailInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGenerateThumbnailInStreamParameters&text=ComputerVisionGenerateThumbnailInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStream(int,int,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  name: "generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter&text=GenerateThumbnailInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public InputStream generateThumbnailInStream(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the InputStream object if successful."
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamAsync(int,int,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  name: "generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter&text=GenerateThumbnailInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<InputStream> generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamAsync(int,int,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<java.io.InputStream>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  name: "generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  nameWithType: "ComputerVisionImpl.generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter&text=GenerateThumbnailInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<InputStream> generateThumbnailInStreamAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter, ServiceCallback<InputStream> serviceCallback)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamWithServiceResponseAsync(int,int,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  name: "generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailInStreamOptionalParameter&text=GenerateThumbnailInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<InputStream>> generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, GenerateThumbnailInStreamOptionalParameter generateThumbnailInStreamOptionalParameter)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamWithServiceResponseAsync(int,int,byte[],java.lang.Boolean,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, Boolean smartCropping, String modelVersion)"
  name: "generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, Boolean smartCropping, String modelVersion)"
  nameWithType: "ComputerVisionImpl.generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, Boolean smartCropping, String modelVersion)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Boolean flag for enabling smart cropping."
    name: "smartCropping"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<InputStream>> generateThumbnailInStreamWithServiceResponseAsync(int width, int height, byte[] image, Boolean smartCropping, String modelVersion)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailWithServiceResponseAsync(int,int,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailWithServiceResponseAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  name: "generateThumbnailWithServiceResponseAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  nameWithType: "ComputerVisionImpl.generateThumbnailWithServiceResponseAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "generateThumbnailOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GenerateThumbnailOptionalParameter&text=GenerateThumbnailOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<InputStream>> generateThumbnailWithServiceResponseAsync(int width, int height, String url, GenerateThumbnailOptionalParameter generateThumbnailOptionalParameter)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailWithServiceResponseAsync(int,int,java.lang.String,java.lang.Boolean,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.generateThumbnailWithServiceResponseAsync(int width, int height, String url, Boolean smartCropping, String modelVersion)"
  name: "generateThumbnailWithServiceResponseAsync(int width, int height, String url, Boolean smartCropping, String modelVersion)"
  nameWithType: "ComputerVisionImpl.generateThumbnailWithServiceResponseAsync(int width, int height, String url, Boolean smartCropping, String modelVersion)"
  summary: "This operation generates a thumbnail image with the user-specified width and height."
  parameters:
  - description: "Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "width"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50."
    name: "height"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Boolean flag for enabling smart cropping."
    name: "smartCropping"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<InputStream>> generateThumbnailWithServiceResponseAsync(int width, int height, String url, Boolean smartCropping, String modelVersion)"
  desc: "This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image. A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the InputStream object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterest()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterest()"
  name: "getAreaOfInterest()"
  nameWithType: "ComputerVisionImpl.getAreaOfInterest()"
  summary: "This operation returns a bounding box around the most important area of the image."
  syntax: "public ComputerVisionImpl.ComputerVisionGetAreaOfInterestParameters getAreaOfInterest()"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGetAreaOfInterestParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGetAreaOfInterestParameters&text=ComputerVisionGetAreaOfInterestParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterest(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  name: "getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter&text=GetAreaOfInterestOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AreaOfInterestResult getAreaOfInterest(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the AreaOfInterestResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  name: "getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter&text=GetAreaOfInterestOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<AreaOfInterestResult> getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the AreaOfInterestResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  name: "getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter&text=GetAreaOfInterestOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<AreaOfInterestResult> getAreaOfInterestAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStream()"
  name: "getAreaOfInterestInStream()"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestInStream()"
  summary: "This operation returns a bounding box around the most important area of the image."
  syntax: "public ComputerVisionImpl.ComputerVisionGetAreaOfInterestInStreamParameters getAreaOfInterestInStream()"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGetAreaOfInterestInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionGetAreaOfInterestInStreamParameters&text=ComputerVisionGetAreaOfInterestInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStream(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  name: "getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter&text=GetAreaOfInterestInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AreaOfInterestResult getAreaOfInterestInStream(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the AreaOfInterestResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  name: "getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter&text=GetAreaOfInterestInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<AreaOfInterestResult> getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the AreaOfInterestResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  name: "getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter&text=GetAreaOfInterestInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<AreaOfInterestResult> getAreaOfInterestInStreamAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter, ServiceCallback<AreaOfInterestResult> serviceCallback)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  name: "getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestInStreamOptionalParameter&text=GetAreaOfInterestInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<AreaOfInterestResult>> getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, GetAreaOfInterestInStreamOptionalParameter getAreaOfInterestInStreamOptionalParameter)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the AreaOfInterestResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamWithServiceResponseAsync(byte[],java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  name: "getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<AreaOfInterestResult>> getAreaOfInterestInStreamWithServiceResponseAsync(byte[] image, String modelVersion)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the AreaOfInterestResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestWithServiceResponseAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  name: "getAreaOfInterestWithServiceResponseAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestWithServiceResponseAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "getAreaOfInterestOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.GetAreaOfInterestOptionalParameter&text=GetAreaOfInterestOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<AreaOfInterestResult>> getAreaOfInterestWithServiceResponseAsync(String url, GetAreaOfInterestOptionalParameter getAreaOfInterestOptionalParameter)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the AreaOfInterestResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestWithServiceResponseAsync(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getAreaOfInterestWithServiceResponseAsync(String url, String modelVersion)"
  name: "getAreaOfInterestWithServiceResponseAsync(String url, String modelVersion)"
  nameWithType: "ComputerVisionImpl.getAreaOfInterestWithServiceResponseAsync(String url, String modelVersion)"
  summary: "This operation returns a bounding box around the most important area of the image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<AreaOfInterestResult>> getAreaOfInterestWithServiceResponseAsync(String url, String modelVersion)"
  desc: "This operation returns a bounding box around the most important area of the image. A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong. Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError."
  returns:
    description: "the observable to the AreaOfInterestResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult&text=AreaOfInterestResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResult(java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResult(UUID operationId)"
  name: "getReadResult(UUID operationId)"
  nameWithType: "ComputerVisionImpl.getReadResult(UUID operationId)"
  summary: "This interface is used for getting OCR results of Read operation."
  parameters:
  - description: "Id of read operation returned in the response of the 'Read' interface."
    name: "operationId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ReadOperationResult getReadResult(UUID operationId)"
  desc: "This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Read interface."
  returns:
    description: "the ReadOperationResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResultAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResultAsync(UUID operationId)"
  name: "getReadResultAsync(UUID operationId)"
  nameWithType: "ComputerVisionImpl.getReadResultAsync(UUID operationId)"
  summary: "This interface is used for getting OCR results of Read operation."
  parameters:
  - description: "Id of read operation returned in the response of the 'Read' interface."
    name: "operationId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ReadOperationResult> getReadResultAsync(UUID operationId)"
  desc: "This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Read interface."
  returns:
    description: "the observable to the ReadOperationResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResultAsync(java.util.UUID,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResultAsync(UUID operationId, ServiceCallback<ReadOperationResult> serviceCallback)"
  name: "getReadResultAsync(UUID operationId, ServiceCallback<ReadOperationResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.getReadResultAsync(UUID operationId, ServiceCallback<ReadOperationResult> serviceCallback)"
  summary: "This interface is used for getting OCR results of Read operation."
  parameters:
  - description: "Id of read operation returned in the response of the 'Read' interface."
    name: "operationId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<ReadOperationResult> getReadResultAsync(UUID operationId, ServiceCallback<ReadOperationResult> serviceCallback)"
  desc: "This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Read interface."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResultWithServiceResponseAsync(java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.getReadResultWithServiceResponseAsync(UUID operationId)"
  name: "getReadResultWithServiceResponseAsync(UUID operationId)"
  nameWithType: "ComputerVisionImpl.getReadResultWithServiceResponseAsync(UUID operationId)"
  summary: "This interface is used for getting OCR results of Read operation."
  parameters:
  - description: "Id of read operation returned in the response of the 'Read' interface."
    name: "operationId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<ReadOperationResult>> getReadResultWithServiceResponseAsync(UUID operationId)"
  desc: "This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Read interface."
  returns:
    description: "the observable to the ReadOperationResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult&text=ReadOperationResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModels()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModels()"
  name: "listModels()"
  nameWithType: "ComputerVisionImpl.listModels()"
  summary: "This operation returns the list of domain-specific models that are supported by the Computer Vision API."
  syntax: "public ListModelsResult listModels()"
  desc: "This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the ListModelsResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModelsAsync()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModelsAsync()"
  name: "listModelsAsync()"
  nameWithType: "ComputerVisionImpl.listModelsAsync()"
  summary: "This operation returns the list of domain-specific models that are supported by the Computer Vision API."
  syntax: "public Observable<ListModelsResult> listModelsAsync()"
  desc: "This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ListModelsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModelsAsync(com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModelsAsync(ServiceCallback<ListModelsResult> serviceCallback)"
  name: "listModelsAsync(ServiceCallback<ListModelsResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.listModelsAsync(ServiceCallback<ListModelsResult> serviceCallback)"
  summary: "This operation returns the list of domain-specific models that are supported by the Computer Vision API."
  parameters:
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<ListModelsResult> listModelsAsync(ServiceCallback<ListModelsResult> serviceCallback)"
  desc: "This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModelsWithServiceResponseAsync()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.listModelsWithServiceResponseAsync()"
  name: "listModelsWithServiceResponseAsync()"
  nameWithType: "ComputerVisionImpl.listModelsWithServiceResponseAsync()"
  summary: "This operation returns the list of domain-specific models that are supported by the Computer Vision API."
  syntax: "public Observable<ServiceResponse<ListModelsResult>> listModelsWithServiceResponseAsync()"
  desc: "This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the ListModelsResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult&text=ListModelsResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.read()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.read()"
  name: "read()"
  nameWithType: "ComputerVisionImpl.read()"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  syntax: "public ComputerVisionImpl.ComputerVisionReadParameters read()"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionReadParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionReadParameters&text=ComputerVisionReadParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.read(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.read(String url, ReadOptionalParameter readOptionalParameter)"
  name: "read(String url, ReadOptionalParameter readOptionalParameter)"
  nameWithType: "ComputerVisionImpl.read(String url, ReadOptionalParameter readOptionalParameter)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter&text=ReadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void read(String url, ReadOptionalParameter readOptionalParameter)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readAsync(String url, ReadOptionalParameter readOptionalParameter)"
  name: "readAsync(String url, ReadOptionalParameter readOptionalParameter)"
  nameWithType: "ComputerVisionImpl.readAsync(String url, ReadOptionalParameter readOptionalParameter)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter&text=ReadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<Void> readAsync(String url, ReadOptionalParameter readOptionalParameter)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readAsync(String url, ReadOptionalParameter readOptionalParameter, ServiceCallback<Void> serviceCallback)"
  name: "readAsync(String url, ReadOptionalParameter readOptionalParameter, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputerVisionImpl.readAsync(String url, ReadOptionalParameter readOptionalParameter, ServiceCallback<Void> serviceCallback)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter&text=ReadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<Void> readAsync(String url, ReadOptionalParameter readOptionalParameter, ServiceCallback<Void> serviceCallback)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStream()"
  name: "readInStream()"
  nameWithType: "ComputerVisionImpl.readInStream()"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  syntax: "public ComputerVisionImpl.ComputerVisionReadInStreamParameters readInStream()"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionReadInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionReadInStreamParameters&text=ComputerVisionReadInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStream(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  name: "readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter&text=ReadInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void readInStream(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  name: "readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter&text=ReadInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<Void> readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<java.lang.Void>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter, ServiceCallback<Void> serviceCallback)"
  name: "readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter, ServiceCallback<Void> serviceCallback)"
  nameWithType: "ComputerVisionImpl.readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter, ServiceCallback<Void> serviceCallback)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter&text=ReadInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<Void> readInStreamAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter, ServiceCallback<Void> serviceCallback)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrDetectionLanguage,java.util.List<java.lang.String>,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamWithServiceResponseAsync(byte[] image, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  name: "readInStreamWithServiceResponseAsync(byte[] image, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  nameWithType: "ComputerVisionImpl.readInStreamWithServiceResponseAsync(byte[] image, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The BCP-47 language code of the text in the document. Read supports auto language identification and multi-language documents, so only provide a language code if you would like to force the document to be processed in that specific language. See https://aka.ms/ocr-languages for list of supported languages. Possible values include: 'af', 'ast', 'bi', 'br', 'ca', 'ceb', 'ch', 'co', 'crh', 'cs', 'csb', 'da', 'de', 'en', 'es', 'et', 'eu', 'fi', 'fil', 'fj', 'fr', 'fur', 'fy', 'ga', 'gd', 'gil', 'gl', 'gv', 'hni', 'hsb', 'ht', 'hu', 'ia', 'id', 'it', 'iu', 'ja', 'jv', 'kaa', 'kac', 'kea', 'kha', 'kl', 'ko', 'ku', 'kw', 'lb', 'ms', 'mww', 'nap', 'nl', 'no', 'oc', 'pl', 'pt', 'quc', 'rm', 'sco', 'sl', 'sq', 'sv', 'sw', 'tet', 'tr', 'tt', 'uz', 'vo', 'wae', 'yua', 'za', 'zh-Hans', 'zh-Hant', 'zu'"
    name: "language"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrDetectionLanguage?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrDetectionLanguage&text=OcrDetectionLanguage\" data-throw-if-not-resolved=\"False\" />"
  - description: "Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma."
    name: "pages"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameter to specify the version of the OCR model used for text extraction. Accepted values are: \"latest\", \"latest-preview\", \"2021-04-12\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify which reading order algorithm should be applied when ordering the extract text elements. Can be either 'basic' or 'natural'. Will default to 'basic' if not specified"
    name: "readingOrder"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<Void,ReadInStreamHeaders>> readInStreamWithServiceResponseAsync(byte[] image, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamHeaders?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamHeaders&text=ReadInStreamHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readInStreamWithServiceResponseAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  name: "readInStreamWithServiceResponseAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.readInStreamWithServiceResponseAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamOptionalParameter&text=ReadInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<Void,ReadInStreamHeaders>> readInStreamWithServiceResponseAsync(byte[] image, ReadInStreamOptionalParameter readInStreamOptionalParameter)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamHeaders?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadInStreamHeaders&text=ReadInStreamHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrDetectionLanguage,java.util.List<java.lang.String>,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readWithServiceResponseAsync(String url, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  name: "readWithServiceResponseAsync(String url, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  nameWithType: "ComputerVisionImpl.readWithServiceResponseAsync(String url, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The BCP-47 language code of the text in the document. Read supports auto language identification and multi-language documents, so only provide a language code if you would like to force the document to be processed in that specific language. See https://aka.ms/ocr-languages for list of supported languages. Possible values include: 'af', 'ast', 'bi', 'br', 'ca', 'ceb', 'ch', 'co', 'crh', 'cs', 'csb', 'da', 'de', 'en', 'es', 'et', 'eu', 'fi', 'fil', 'fj', 'fr', 'fur', 'fy', 'ga', 'gd', 'gil', 'gl', 'gv', 'hni', 'hsb', 'ht', 'hu', 'ia', 'id', 'it', 'iu', 'ja', 'jv', 'kaa', 'kac', 'kea', 'kha', 'kl', 'ko', 'ku', 'kw', 'lb', 'ms', 'mww', 'nap', 'nl', 'no', 'oc', 'pl', 'pt', 'quc', 'rm', 'sco', 'sl', 'sq', 'sv', 'sw', 'tet', 'tr', 'tt', 'uz', 'vo', 'wae', 'yua', 'za', 'zh-Hans', 'zh-Hant', 'zu'"
    name: "language"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrDetectionLanguage?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrDetectionLanguage&text=OcrDetectionLanguage\" data-throw-if-not-resolved=\"False\" />"
  - description: "Custom page numbers for multi-page documents(PDF/TIFF), input the number of the pages you want to get OCR result. For a range of pages, use a hyphen. Separate each page or range with a comma."
    name: "pages"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional parameter to specify the version of the OCR model used for text extraction. Accepted values are: \"latest\", \"latest-preview\", \"2021-04-12\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify which reading order algorithm should be applied when ordering the extract text elements. Can be either 'basic' or 'natural'. Will default to 'basic' if not specified"
    name: "readingOrder"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<Void,ReadHeaders>> readWithServiceResponseAsync(String url, OcrDetectionLanguage language, List<String> pages, String modelVersion, String readingOrder)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadHeaders?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadHeaders&text=ReadHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.readWithServiceResponseAsync(String url, ReadOptionalParameter readOptionalParameter)"
  name: "readWithServiceResponseAsync(String url, ReadOptionalParameter readOptionalParameter)"
  nameWithType: "ComputerVisionImpl.readWithServiceResponseAsync(String url, ReadOptionalParameter readOptionalParameter)"
  summary: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "readOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOptionalParameter&text=ReadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<Void,ReadHeaders>> readWithServiceResponseAsync(String url, ReadOptionalParameter readOptionalParameter)"
  desc: "Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadResult' operation to access OCR results.\\\\u200b."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> object if successful."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadHeaders?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadHeaders&text=ReadHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedText()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedText()"
  name: "recognizePrintedText()"
  nameWithType: "ComputerVisionImpl.recognizePrintedText()"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  syntax: "public ComputerVisionImpl.ComputerVisionRecognizePrintedTextParameters recognizePrintedText()"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionRecognizePrintedTextParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionRecognizePrintedTextParameters&text=ComputerVisionRecognizePrintedTextParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedText(boolean,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  name: "recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  nameWithType: "ComputerVisionImpl.recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter&text=RecognizePrintedTextOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public OcrResult recognizePrintedText(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the OcrResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextAsync(boolean,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  name: "recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter&text=RecognizePrintedTextOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the observable to the OcrResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextAsync(boolean,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  name: "recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter&text=RecognizePrintedTextOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStream()"
  name: "recognizePrintedTextInStream()"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextInStream()"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  syntax: "public ComputerVisionImpl.ComputerVisionRecognizePrintedTextInStreamParameters recognizePrintedTextInStream()"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionRecognizePrintedTextInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionRecognizePrintedTextInStreamParameters&text=ComputerVisionRecognizePrintedTextInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStream(boolean,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  name: "recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter&text=RecognizePrintedTextInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public OcrResult recognizePrintedTextInStream(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the OcrResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamAsync(boolean,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  name: "recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter&text=RecognizePrintedTextInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the observable to the OcrResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamAsync(boolean,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  name: "recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter&text=RecognizePrintedTextInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter, ServiceCallback<OcrResult> serviceCallback)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamWithServiceResponseAsync(boolean,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, OcrLanguages language, String modelVersion)"
  name: "recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, OcrLanguages language, String modelVersion)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, OcrLanguages language, String modelVersion)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The BCP-47 language code of the text to be detected in the image. The default value is 'unk'. Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'"
    name: "language"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages&text=OcrLanguages\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<OcrResult>> recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, OcrLanguages language, String modelVersion)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the observable to the OcrResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamWithServiceResponseAsync(boolean,byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  name: "recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextInStreamOptionalParameter&text=RecognizePrintedTextInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<OcrResult>> recognizePrintedTextInStreamWithServiceResponseAsync(boolean detectOrientation, byte[] image, RecognizePrintedTextInStreamOptionalParameter recognizePrintedTextInStreamOptionalParameter)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the observable to the OcrResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextWithServiceResponseAsync(boolean,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, OcrLanguages language, String modelVersion)"
  name: "recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, OcrLanguages language, String modelVersion)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, OcrLanguages language, String modelVersion)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The BCP-47 language code of the text to be detected in the image. The default value is 'unk'. Possible values include: 'unk', 'zh-Hans', 'zh-Hant', 'cs', 'da', 'nl', 'en', 'fi', 'fr', 'de', 'el', 'hu', 'it', 'ja', 'ko', 'nb', 'pl', 'pt', 'ru', 'es', 'sv', 'tr', 'ar', 'ro', 'sr-Cyrl', 'sr-Latn', 'sk'"
    name: "language"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages&text=OcrLanguages\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<OcrResult>> recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, OcrLanguages language, String modelVersion)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the observable to the OcrResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextWithServiceResponseAsync(boolean,java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  name: "recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  nameWithType: "ComputerVisionImpl.recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  summary: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream."
  parameters:
  - description: "Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down)."
    name: "detectOrientation"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "recognizePrintedTextOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizePrintedTextOptionalParameter&text=RecognizePrintedTextOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<OcrResult>> recognizePrintedTextWithServiceResponseAsync(boolean detectOrientation, String url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter)"
  desc: "Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream. Upon success, the OCR results will be returned. Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError."
  returns:
    description: "the observable to the OcrResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult&text=OcrResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImage()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImage()"
  name: "tagImage()"
  nameWithType: "ComputerVisionImpl.tagImage()"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  syntax: "public ComputerVisionImpl.ComputerVisionTagImageParameters tagImage()"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionTagImageParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionTagImageParameters&text=ComputerVisionTagImageParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImage(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  name: "tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter&text=TagImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TagResult tagImage(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the TagResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  name: "tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter&text=TagImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<TagResult> tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the TagResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  name: "tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter&text=TagImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<TagResult> tagImageAsync(String url, TagImageOptionalParameter tagImageOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStream()"
  name: "tagImageInStream()"
  nameWithType: "ComputerVisionImpl.tagImageInStream()"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  syntax: "public ComputerVisionImpl.ComputerVisionTagImageInStreamParameters tagImageInStream()"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionTagImageInStreamParameters?alt=com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.ComputerVisionTagImageInStreamParameters&text=ComputerVisionTagImageInStreamParameters\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStream(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  name: "tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter&text=TagImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TagResult tagImageInStream(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the TagResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  name: "tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter&text=TagImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<TagResult> tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the TagResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  name: "tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  nameWithType: "ComputerVisionImpl.tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter&text=TagImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<TagResult> tagImageInStreamAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter, ServiceCallback<TagResult> serviceCallback)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamWithServiceResponseAsync(byte[],com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamWithServiceResponseAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  name: "tagImageInStreamWithServiceResponseAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  nameWithType: "ComputerVisionImpl.tagImageInStreamWithServiceResponseAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageInStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageInStreamOptionalParameter&text=TagImageInStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<TagResult>> tagImageInStreamWithServiceResponseAsync(byte[] image, TagImageInStreamOptionalParameter tagImageInStreamOptionalParameter)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the TagResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamWithServiceResponseAsync(byte[],java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageInStreamWithServiceResponseAsync(byte[] image, String language, String modelVersion)"
  name: "tagImageInStreamWithServiceResponseAsync(byte[] image, String language, String modelVersion)"
  nameWithType: "ComputerVisionImpl.tagImageInStreamWithServiceResponseAsync(byte[] image, String language, String modelVersion)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<TagResult>> tagImageInStreamWithServiceResponseAsync(byte[] image, String language, String modelVersion)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the TagResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageWithServiceResponseAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageWithServiceResponseAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  name: "tagImageWithServiceResponseAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  nameWithType: "ComputerVisionImpl.tagImageWithServiceResponseAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "tagImageOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagImageOptionalParameter&text=TagImageOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<TagResult>> tagImageWithServiceResponseAsync(String url, TagImageOptionalParameter tagImageOptionalParameter)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the TagResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageWithServiceResponseAsync(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation.ComputerVisionImpl.tagImageWithServiceResponseAsync(String url, String language, String modelVersion)"
  name: "tagImageWithServiceResponseAsync(String url, String language, String modelVersion)"
  nameWithType: "ComputerVisionImpl.tagImageWithServiceResponseAsync(String url, String language, String modelVersion)"
  summary: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image."
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese. Possible values include: 'en', 'es', 'ja', 'pt', 'zh'"
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional parameter to specify the version of the AI model. Accepted values are: \"latest\", \"2021-04-01\". Defaults to \"latest\"."
    name: "modelVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponse<TagResult>> tagImageWithServiceResponseAsync(String url, String language, String modelVersion)"
  desc: "This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag \"ascomycete\" may be accompanied by the hint \"fungus\". Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong."
  returns:
    description: "the observable to the TagResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponse?alt=com.microsoft.rest.ServiceResponse&text=ServiceResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult&text=TagResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "An instance of this class provides access to all the operations defined in ComputerVision."
implements:
- "<xref href=\"com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision?alt=com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision&text=ComputerVision\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.azure.cognitiveservices.vision.computervision.implementation"
artifact: com.microsoft.azure.cognitiveservices:azure-cognitiveservices-computervision:1.0.9-beta
