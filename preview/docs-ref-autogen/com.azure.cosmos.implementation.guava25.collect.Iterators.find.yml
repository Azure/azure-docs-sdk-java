### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Iterators.find*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find"
name: "<T>find"
nameWithType: "Iterators.<T>find"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)"
  name: "<T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)"
  nameWithType: "Iterators.<T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)"
  summary: "Returns the first element in `iterator` that satisfies the given predicate. If no such element is found, `defaultValue` will be returned from this method and the iterator will be left exhausted: its `hasNext()` method will return `false`. Note that this can usually be handled more naturally using `tryFind(iterator, predicate).or(defaultValue)`."
  parameters:
  - name: "iterator"
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "defaultValue"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static T <T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(Iterator<T> iterator, Predicate<? super T> predicate)"
  name: "<T>find(Iterator<T> iterator, Predicate<? super T> predicate)"
  nameWithType: "Iterators.<T>find(Iterator<T> iterator, Predicate<? super T> predicate)"
  summary: "Returns the first element in `iterator` that satisfies the given predicate; use this method only when such an element is known to exist. If no such element is found, the iterator will be left exhausted: its `hasNext()` method will return `false`. If it is possible that *no* element will match, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterators.tryFind\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#tryFind\"></xref> or <xref uid=\"#find(Iterator,\n Predicate, Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#find(Iterator,\n Predicate, Object)\"></xref> instead."
  parameters:
  - name: "iterator"
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static T <T>find(Iterator<T> iterator, Predicate<? super T> predicate)"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
