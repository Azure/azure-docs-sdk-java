### YamlMime:JavaType
uid: "com.fasterxml.jackson.annotation.JsonPropertyOrder"
fullName: "com.fasterxml.jackson.annotation.JsonPropertyOrder"
name: "JsonPropertyOrder"
nameWithType: "JsonPropertyOrder"
summary: "Annotation that can be used to define ordering (possibly partial) to use when serializing object properties. Properties included in annotation declaration will be serialized first (in defined order), followed by any properties not included in the definition. Annotation definition will override any implicit orderings (such as guarantee that Creator-properties are serialized before non-creator properties)\n\nExamples:\n\n```java\n// ensure that \"id\" and \"name\" are output before other properties\n  @JsonPropertyOrder({ \"id\", \"name\" })\n  // order any properties that don't have explicit setting using alphabetic order\n  @JsonPropertyOrder(alphabetic=true)\n```\n\nThis annotation may or may not have effect on deserialization: for basic JSON handling there is no effect, but for other supported data types (or structural conventions) there may be.\n\nNOTE: annotation is allowed for properties, starting with 2.4, mostly to support alphabetic ordering of <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> entries."
syntax: "public interface JsonPropertyOrder implements Annotation"
methods:
- "com.fasterxml.jackson.annotation.JsonPropertyOrder.alphabetic()"
- "com.fasterxml.jackson.annotation.JsonPropertyOrder.value()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
