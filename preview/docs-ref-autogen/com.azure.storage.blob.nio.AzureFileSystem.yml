### YamlMime:JavaType
uid: "com.azure.storage.blob.nio.AzureFileSystem"
fullName: "com.azure.storage.blob.nio.AzureFileSystem"
name: "AzureFileSystem"
nameWithType: "AzureFileSystem"
summary: "Implement's Java's <xref uid=\"java.nio.file.FileSystem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileSystem\"></xref> interface for Azure Blob Storage."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.nio.file.FileSystem?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.nio.file.FileSystem.close()"
- "java.nio.file.FileSystem.getFileStores()"
- "java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)"
- "java.nio.file.FileSystem.getPathMatcher(java.lang.String)"
- "java.nio.file.FileSystem.getRootDirectories()"
- "java.nio.file.FileSystem.getSeparator()"
- "java.nio.file.FileSystem.getUserPrincipalLookupService()"
- "java.nio.file.FileSystem.isOpen()"
- "java.nio.file.FileSystem.isReadOnly()"
- "java.nio.file.FileSystem.newWatchService()"
- "java.nio.file.FileSystem.provider()"
- "java.nio.file.FileSystem.supportedFileAttributeViews()"
syntax: "public final class AzureFileSystem extends FileSystem"
fields:
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES"
  name: "AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES"
  summary: "Expected type: Integer"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageDownloadResumeRetries"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES"
  desc: "Expected type: Integer"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_FILE_STORES"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_FILE_STORES"
  name: "AZURE_STORAGE_FILE_STORES"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_FILE_STORES"
  summary: "Expected type: String"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageFileStores"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_FILE_STORES"
  desc: "Expected type: String"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL"
  name: "AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL"
  summary: "Expected type: com.<wbr>azure.<wbr>core.<wbr>http.<wbr>policy.<wbr>Http<wbr>Log<wbr>Level<wbr>Detail"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageHttpLogDetailLevel"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL"
  desc: "Expected type: com.azure.core.http.policy.HttpLogLevelDetail"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST"
  name: "AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST"
  summary: "Expected type: Integer"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageMaxConcurrencyPerRequest"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST"
  desc: "Expected type: Integer"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS"
  name: "AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS"
  summary: "Expected type: Long"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageMaxRetryDelayInMs"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS"
  desc: "Expected type: Long"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_TRIES"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_TRIES"
  name: "AZURE_STORAGE_MAX_TRIES"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_MAX_TRIES"
  summary: "Expected type: Integer"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageMaxTries"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_MAX_TRIES"
  desc: "Expected type: Integer"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD"
  name: "AZURE_STORAGE_PUT_BLOB_THRESHOLD"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD"
  summary: "Expected type: Long"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStoragePutBlobThreshold"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_PUT_BLOB_THRESHOLD"
  desc: "Expected type: Long"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS"
  name: "AZURE_STORAGE_RETRY_DELAY_IN_MS"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS"
  summary: "Expected type: Long"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageRetryDelayInMs"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_RETRY_DELAY_IN_MS"
  desc: "Expected type: Long"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE"
  name: "AZURE_STORAGE_RETRY_POLICY_TYPE"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE"
  summary: "Expected type: com.<wbr>azure.<wbr>storage.<wbr>common.<wbr>policy.<wbr>Retry<wbr>Policy<wbr>Type"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageRetryPolicyType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_RETRY_POLICY_TYPE"
  desc: "Expected type: com.azure.storage.common.policy.RetryPolicyType"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SAS_TOKEN_CREDENTIAL"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SAS_TOKEN_CREDENTIAL"
  name: "AZURE_STORAGE_SAS_TOKEN_CREDENTIAL"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_SAS_TOKEN_CREDENTIAL"
  summary: "Expected type: String"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageSasTokenCredential"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_SAS_TOKEN_CREDENTIAL"
  desc: "Expected type: String"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST"
  name: "AZURE_STORAGE_SECONDARY_HOST"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST"
  summary: "Expected type: String"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageSecondaryHost"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_SECONDARY_HOST"
  desc: "Expected type: String"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SHARED_KEY_CREDENTIAL"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SHARED_KEY_CREDENTIAL"
  name: "AZURE_STORAGE_SHARED_KEY_CREDENTIAL"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_SHARED_KEY_CREDENTIAL"
  summary: "Expected type: String"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageSharedKeyCredential"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_SHARED_KEY_CREDENTIAL"
  desc: "Expected type: String"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SKIP_INITIAL_CONTAINER_CHECK"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SKIP_INITIAL_CONTAINER_CHECK"
  name: "AZURE_STORAGE_SKIP_INITIAL_CONTAINER_CHECK"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_SKIP_INITIAL_CONTAINER_CHECK"
  summary: "Expected type: Boolean"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageSkipInitialContainerCheck"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_SKIP_INITIAL_CONTAINER_CHECK"
  desc: "Expected type: Boolean"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT"
  name: "AZURE_STORAGE_TRY_TIMEOUT"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT"
  summary: "Expected type: Integer"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageTryTimeout"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_TRY_TIMEOUT"
  desc: "Expected type: Integer"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE"
  name: "AZURE_STORAGE_UPLOAD_BLOCK_SIZE"
  nameWithType: "AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE"
  summary: "Expected type: Long"
  modifiers:
  - "static"
  - "final"
  field:
    value: "AzureStorageUploadBlockSize"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String AZURE_STORAGE_UPLOAD_BLOCK_SIZE"
  desc: "Expected type: Long"
methods:
- uid: "com.azure.storage.blob.nio.AzureFileSystem.close()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.close()"
  name: "close()"
  nameWithType: "AzureFileSystem.close()"
  summary: "Closes this file system."
  overridden: "java.nio.file.FileSystem.close()"
  syntax: "public void close()"
  exceptions:
  - description: "If an I/O error occurs."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Closes this file system.\n\nAfter a file system is closed then all subsequent access to the file system, either by methods defined by this class or on objects associated with this file system, throw ClosedFileSystemException. If the file system is already closed then invoking this method has no effect.\n\nClosing the file system will not block on outstanding operations. Any operations in progress will be allowed to terminate naturally after the file system is closed, though no further operations may be started after the parent file system is closed.\n\nOnce closed, a file system with the same identifier as the one closed may be re-opened."
- uid: "com.azure.storage.blob.nio.AzureFileSystem.equals(java.lang.Object)"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.equals(Object o)"
  name: "equals(Object o)"
  nameWithType: "AzureFileSystem.equals(Object o)"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "o"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object o)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.getFileStores()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.getFileStores()"
  name: "getFileStores()"
  nameWithType: "AzureFileSystem.getFileStores()"
  summary: "Returns an object to iterate over the underlying file stores"
  overridden: "java.nio.file.FileSystem.getFileStores()"
  syntax: "public Iterable<FileStore> getFileStores()"
  desc: "Returns an object to iterate over the underlying file stores\n\nThis list will respect the parameters provided during initialization.\n\nIf a finite list of containers was provided on start up, this list will not change during the lifetime of this object. If containers are added to the account after initialization, they will be ignored. If a container is deleted or otherwise becomes unavailable, its root directory will still be returned but operations to it will fail."
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.file.FileStore?alt=java.nio.file.FileStore&text=FileStore\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.getPath(java.lang.String,java.lang.String...)"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.getPath(String first, String[] more)"
  name: "getPath(String first, String[] more)"
  nameWithType: "AzureFileSystem.getPath(String first, String[] more)"
  summary: "Converts a path string, or a sequence of more that when joined form a path string, to a Path."
  overridden: "java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)"
  parameters:
  - description: "the path string or initial part of the path string"
    name: "first"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional strings to be joined to form the path string"
    name: "more"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Path getPath(String first, String[] more)"
  desc: "Converts a path string, or a sequence of more that when joined form a path string, to a Path.\n\nIf more does not specify any elements then the value of the first parameter is the path string to convert. If more specifies one or more elements than each non-empty string, including first, is considered to be a sequence of name elements (see Path) and is joined to form a path string. The more will be joined using the name separator.\n\nEach name element will be `String`\\-joined to the other elements by this file system's first path separator. Naming conventions and allowed characters are as [defined][] by the Azure Blob Storage service. The root component is interpreted as the container name and all name elements are interpreted as a part of the blob name. The character `':'` is only allowed in the root component and must be the last character of the root component.\n\n\n[defined]: https://docs.microsoft.com/en-us/rest/api/storageservices/Naming-and-Referencing-Containers--Blobs--and-Metadata"
  returns:
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher(java.lang.String)"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher(String s)"
  name: "getPathMatcher(String s)"
  nameWithType: "AzureFileSystem.getPathMatcher(String s)"
  summary: "Unsupported."
  overridden: "java.nio.file.FileSystem.getPathMatcher(java.lang.String)"
  parameters:
  - description: "the matcher"
    name: "s"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathMatcher getPathMatcher(String s)"
  exceptions:
  - description: "unsupported."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  - description: "unsupported."
    type: "<xref href=\"java.util.regex.PatternSyntaxException?alt=java.util.regex.PatternSyntaxException&text=PatternSyntaxException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Unsupported."
  returns:
    type: "<xref href=\"java.nio.file.PathMatcher?alt=java.nio.file.PathMatcher&text=PathMatcher\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories()"
  name: "getRootDirectories()"
  nameWithType: "AzureFileSystem.getRootDirectories()"
  summary: "Returns an object to iterate over the paths of the root directories."
  overridden: "java.nio.file.FileSystem.getRootDirectories()"
  syntax: "public Iterable<Path> getRootDirectories()"
  desc: "Returns an object to iterate over the paths of the root directories.\n\nThe list of root directories corresponds to the list of available file stores and therefore containers specified upon initialization. A root directory always takes the form `\":\"`. This list will respect the parameters provided during initialization.\n\nIf a finite list of containers was provided on start up, this list will not change during the lifetime of this object. If containers are added to the account after initialization, they will be ignored. If a container is deleted or otherwise becomes unavailable, its root directory will still be returned but operations to it will fail."
  returns:
    description: "an object to iterate over the paths of the root directories"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.getSeparator()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.getSeparator()"
  name: "getSeparator()"
  nameWithType: "AzureFileSystem.getSeparator()"
  summary: "Returns the name separator, represented as a string."
  overridden: "java.nio.file.FileSystem.getSeparator()"
  syntax: "public String getSeparator()"
  desc: "Returns the name separator, represented as a string.\n\nThe separator used in this file system is `\"/\"`."
  returns:
    description: "\"/\""
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService()"
  name: "getUserPrincipalLookupService()"
  nameWithType: "AzureFileSystem.getUserPrincipalLookupService()"
  summary: "Unsupported."
  overridden: "java.nio.file.FileSystem.getUserPrincipalLookupService()"
  syntax: "public UserPrincipalLookupService getUserPrincipalLookupService()"
  desc: "Unsupported."
  returns:
    type: "<xref href=\"java.nio.file.attribute.UserPrincipalLookupService?alt=java.nio.file.attribute.UserPrincipalLookupService&text=UserPrincipalLookupService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.hashCode()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.hashCode()"
  name: "hashCode()"
  nameWithType: "AzureFileSystem.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.isOpen()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.isOpen()"
  name: "isOpen()"
  nameWithType: "AzureFileSystem.isOpen()"
  summary: "Tells whether this file system is open."
  overridden: "java.nio.file.FileSystem.isOpen()"
  syntax: "public boolean isOpen()"
  desc: "Tells whether this file system is open."
  returns:
    description: "whether this file system is open."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.isReadOnly()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.isReadOnly()"
  name: "isReadOnly()"
  nameWithType: "AzureFileSystem.isReadOnly()"
  summary: "Tells whether this file system allows only read-only access to its file stores."
  overridden: "java.nio.file.FileSystem.isReadOnly()"
  syntax: "public boolean isReadOnly()"
  desc: "Tells whether this file system allows only read-only access to its file stores.\n\nAlways returns false. It may be the case that the authentication method provided to this file system only supports read operations and hence the file system is implicitly read only in this view, but that does not imply the underlying account/file system is inherently read only. Creating/specifying read only file systems is not supported."
  returns:
    description: "false"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.newWatchService()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.newWatchService()"
  name: "newWatchService()"
  nameWithType: "AzureFileSystem.newWatchService()"
  summary: "Unsupported."
  overridden: "java.nio.file.FileSystem.newWatchService()"
  syntax: "public WatchService newWatchService()"
  exceptions:
  - description: "unsupported."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Unsupported."
  returns:
    type: "<xref href=\"java.nio.file.WatchService?alt=java.nio.file.WatchService&text=WatchService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.provider()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.provider()"
  name: "provider()"
  nameWithType: "AzureFileSystem.provider()"
  summary: "Returns the provider that created this file system."
  overridden: "java.nio.file.FileSystem.provider()"
  syntax: "public FileSystemProvider provider()"
  desc: "Returns the provider that created this file system."
  returns:
    description: "the provider that created this file system."
    type: "<xref href=\"java.nio.file.spi.FileSystemProvider?alt=java.nio.file.spi.FileSystemProvider&text=FileSystemProvider\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews()"
  fullName: "com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews()"
  name: "supportedFileAttributeViews()"
  nameWithType: "AzureFileSystem.supportedFileAttributeViews()"
  summary: "Returns the set of the names of the file attribute views supported by this File<wbr>System."
  overridden: "java.nio.file.FileSystem.supportedFileAttributeViews()"
  syntax: "public Set<String> supportedFileAttributeViews()"
  desc: "Returns the set of the names of the file attribute views supported by this FileSystem.\n\nThis file system supports the following views:\n\n *  <xref uid=\"java.nio.file.attribute.BasicFileAttributeView\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.nio.file.attribute.BasicFileAttributeView\"></xref>\n *  <xref uid=\"com.azure.storage.blob.nio.AzureBasicFileAttributeView\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureBasicFileAttributeView\"></xref>\n *  <xref uid=\"com.azure.storage.blob.nio.AzureBlobFileAttributeView\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureBlobFileAttributeView\"></xref>"
  returns:
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Implement's Java's <xref uid=\"java.nio.file.FileSystem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileSystem\"></xref> interface for Azure Blob Storage.\n\nThe following behavior is specific to this FileSystem:\n\nIn the hierarchy of this file system, an `AzureFileSystem` corresponds to an Azure Blob Storage account. A file store is represented by a container in the storage account. Each container has one root directory.\n\nClosing the file system will not block on outstanding operations. Any operations in progress will be allowed to terminate naturally after the file system is closed, though no further operations may be started after the parent file system is closed.\n\nAll instance of `AzureFileSystem` are opened for read-write access.\n\nFor a more complete description of the uses for the constants described here, please see the instructions for opening and configuring a FileSystem in the docs of <xref uid=\"java.nio.file.spi.FileSystemProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileSystemProvider\"></xref>."
metadata: {}
package: "com.azure.storage.blob.nio"
artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.19
