### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.nio.AzureFileSystem
  id: AzureFileSystem
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio
  children:
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_ACCOUNT_KEY
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_FILE_STORES
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_TRIES
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SAS_TOKEN
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE
  - com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_USE_HTTPS
  - com.azure.storage.blob.nio.AzureFileSystem.close()
  - com.azure.storage.blob.nio.AzureFileSystem.equals(java.lang.Object)
  - com.azure.storage.blob.nio.AzureFileSystem.getFileStores()
  - com.azure.storage.blob.nio.AzureFileSystem.getPath(java.lang.String,java.lang.String...)
  - com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher(java.lang.String)
  - com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories()
  - com.azure.storage.blob.nio.AzureFileSystem.getSeparator()
  - com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService()
  - com.azure.storage.blob.nio.AzureFileSystem.hashCode()
  - com.azure.storage.blob.nio.AzureFileSystem.isOpen()
  - com.azure.storage.blob.nio.AzureFileSystem.isReadOnly()
  - com.azure.storage.blob.nio.AzureFileSystem.newWatchService()
  - com.azure.storage.blob.nio.AzureFileSystem.provider()
  - com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews()
  langs:
  - java
  name: AzureFileSystem
  nameWithType: AzureFileSystem
  fullName: com.azure.storage.blob.nio.AzureFileSystem
  type: Class
  package: com.azure.storage.blob.nio
  summary: >-
    Implement's Java's <xref uid="java.nio.file.FileSystem" data-throw-if-not-resolved="false">FileSystem</xref> interface for Azure Blob Storage.


    The following behavior is specific to this FileSystem:


    In the hierarchy of this file system, an `AzureFileSystem` corresponds to an Azure Blob Storage account. A file store is represented by a container in the storage account. Each container has one root directory.


    Closing the file system will not block on outstanding operations. Any operations in progress will be allowed to terminate naturally after the file system is closed, though no further operations may be started after the parent file system is closed.


    All instance of `AzureFileSystem` are opened for read-write access.


    For a more complete description of the uses for the constants described here, please see the instructions for opening and configuring a FileSystem in the docs of <xref uid="java.nio.file.spi.FileSystemProvider" data-throw-if-not-resolved="false">FileSystemProvider</xref>.
  syntax:
    content: public final class AzureFileSystem extends FileSystem
  inheritance:
  - java.lang.Object
  - java.nio.file.FileSystem
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.nio.file.FileSystem.close()
  - java.nio.file.FileSystem.getFileStores()
  - java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)
  - java.nio.file.FileSystem.getPathMatcher(java.lang.String)
  - java.nio.file.FileSystem.getRootDirectories()
  - java.nio.file.FileSystem.getSeparator()
  - java.nio.file.FileSystem.getUserPrincipalLookupService()
  - java.nio.file.FileSystem.isOpen()
  - java.nio.file.FileSystem.isReadOnly()
  - java.nio.file.FileSystem.newWatchService()
  - java.nio.file.FileSystem.provider()
  - java.nio.file.FileSystem.supportedFileAttributeViews()
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_ACCOUNT_KEY
  id: AZURE_STORAGE_ACCOUNT_KEY
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_ACCOUNT_KEY
  nameWithType: AzureFileSystem.AZURE_STORAGE_ACCOUNT_KEY
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_ACCOUNT_KEY
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: String'
  syntax:
    content: public static final String AZURE_STORAGE_ACCOUNT_KEY
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
  id: AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
  nameWithType: AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Integer'
  syntax:
    content: public static final String AZURE_STORAGE_DOWNLOAD_RESUME_RETRIES
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_FILE_STORES
  id: AZURE_STORAGE_FILE_STORES
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_FILE_STORES
  nameWithType: AzureFileSystem.AZURE_STORAGE_FILE_STORES
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_FILE_STORES
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: String'
  syntax:
    content: public static final String AZURE_STORAGE_FILE_STORES
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
  id: AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
  nameWithType: AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: com.azure.core.http.policy.HttpLogLevelDetail'
  syntax:
    content: public static final String AZURE_STORAGE_HTTP_LOG_DETAIL_LEVEL
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
  id: AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
  nameWithType: AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Integer'
  syntax:
    content: public static final String AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
  id: AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
  nameWithType: AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Long'
  syntax:
    content: public static final String AZURE_STORAGE_MAX_RETRY_DELAY_IN_MS
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_TRIES
  id: AZURE_STORAGE_MAX_TRIES
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_MAX_TRIES
  nameWithType: AzureFileSystem.AZURE_STORAGE_MAX_TRIES
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_TRIES
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Integer'
  syntax:
    content: public static final String AZURE_STORAGE_MAX_TRIES
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD
  id: AZURE_STORAGE_PUT_BLOB_THRESHOLD
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_PUT_BLOB_THRESHOLD
  nameWithType: AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Long'
  syntax:
    content: public static final String AZURE_STORAGE_PUT_BLOB_THRESHOLD
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS
  id: AZURE_STORAGE_RETRY_DELAY_IN_MS
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_RETRY_DELAY_IN_MS
  nameWithType: AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_DELAY_IN_MS
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Long'
  syntax:
    content: public static final String AZURE_STORAGE_RETRY_DELAY_IN_MS
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE
  id: AZURE_STORAGE_RETRY_POLICY_TYPE
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_RETRY_POLICY_TYPE
  nameWithType: AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_RETRY_POLICY_TYPE
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: com.azure.storage.common.policy.RetryPolicyType'
  syntax:
    content: public static final String AZURE_STORAGE_RETRY_POLICY_TYPE
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SAS_TOKEN
  id: AZURE_STORAGE_SAS_TOKEN
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_SAS_TOKEN
  nameWithType: AzureFileSystem.AZURE_STORAGE_SAS_TOKEN
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SAS_TOKEN
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: String'
  syntax:
    content: public static final String AZURE_STORAGE_SAS_TOKEN
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST
  id: AZURE_STORAGE_SECONDARY_HOST
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_SECONDARY_HOST
  nameWithType: AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_SECONDARY_HOST
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: String'
  syntax:
    content: public static final String AZURE_STORAGE_SECONDARY_HOST
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT
  id: AZURE_STORAGE_TRY_TIMEOUT
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_TRY_TIMEOUT
  nameWithType: AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_TRY_TIMEOUT
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Integer'
  syntax:
    content: public static final String AZURE_STORAGE_TRY_TIMEOUT
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE
  id: AZURE_STORAGE_UPLOAD_BLOCK_SIZE
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_UPLOAD_BLOCK_SIZE
  nameWithType: AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Long'
  syntax:
    content: public static final String AZURE_STORAGE_UPLOAD_BLOCK_SIZE
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_USE_HTTPS
  id: AZURE_STORAGE_USE_HTTPS
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AZURE_STORAGE_USE_HTTPS
  nameWithType: AzureFileSystem.AZURE_STORAGE_USE_HTTPS
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_USE_HTTPS
  type: Field
  package: com.azure.storage.blob.nio
  summary: 'Expected type: Boolean'
  syntax:
    content: public static final String AZURE_STORAGE_USE_HTTPS
    return:
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileSystem.AzureFileSystem(com.azure.storage.blob.nio.AzureFileSystemProvider,java.lang.String,java.util.Map<java.lang.String,?>)
  id: AzureFileSystem(com.azure.storage.blob.nio.AzureFileSystemProvider,java.lang.String,java.util.Map<java.lang.String,?>)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: AzureFileSystem(AzureFileSystemProvider parentFileSystemProvider, String accountName, Map<String,?> config)
  nameWithType: AzureFileSystem.AzureFileSystem(AzureFileSystemProvider parentFileSystemProvider, String accountName, Map<String,?> config)
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AzureFileSystem(AzureFileSystemProvider parentFileSystemProvider, String accountName, Map<String,?> config)
  overload: com.azure.storage.blob.nio.AzureFileSystem.AzureFileSystem*
  type: Constructor
  package: com.azure.storage.blob.nio
  syntax:
    content: " AzureFileSystem(AzureFileSystemProvider parentFileSystemProvider, String accountName, Map<String,?> config)"
    parameters:
    - id: parentFileSystemProvider
      type: com.azure.storage.blob.nio.AzureFileSystemProvider
    - id: accountName
      type: java.lang.String
    - id: config
      type: java.util.Map<java.lang.String,?>
- uid: com.azure.storage.blob.nio.AzureFileSystem.close()
  id: close()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: close()
  nameWithType: AzureFileSystem.close()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.close()
  overload: com.azure.storage.blob.nio.AzureFileSystem.close*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Closes this file system.


    After a file system is closed then all subsequent access to the file system, either by methods defined by this class or on objects associated with this file system, throw ClosedFileSystemException. If the file system is already closed then invoking this method has no effect.


    Closing the file system will not block on outstanding operations. Any operations in progress will be allowed to terminate naturally after the file system is closed, though no further operations may be started after the parent file system is closed.


    Once closed, a file system with the same identifier as the one closed may be re-opened.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
    description: If an I/O error occurs.
- uid: com.azure.storage.blob.nio.AzureFileSystem.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: equals(Object o)
  nameWithType: AzureFileSystem.equals(Object o)
  fullName: com.azure.storage.blob.nio.AzureFileSystem.equals(Object o)
  overload: com.azure.storage.blob.nio.AzureFileSystem.equals*
  type: Method
  package: com.azure.storage.blob.nio
  syntax:
    content: public boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.storage.blob.nio.AzureFileSystem.getFileStores()
  id: getFileStores()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: getFileStores()
  nameWithType: AzureFileSystem.getFileStores()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getFileStores()
  overload: com.azure.storage.blob.nio.AzureFileSystem.getFileStores*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns an object to iterate over the underlying file stores


    This list will respect the parameters provided during initialization.


    If a finite list of containers was provided on start up, this list will not change during the lifetime of this object. If containers are added to the account after initialization, they will be ignored. If a container is deleted or otherwise becomes unavailable, its root directory will still be returned but operations to it will fail.
  syntax:
    content: public Iterable<FileStore> getFileStores()
    return:
      type: java.lang.Iterable<java.nio.file.FileStore>
- uid: com.azure.storage.blob.nio.AzureFileSystem.getPath(java.lang.String,java.lang.String...)
  id: getPath(java.lang.String,java.lang.String...)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: getPath(String first, String[] more)
  nameWithType: AzureFileSystem.getPath(String first, String[] more)
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getPath(String first, String[] more)
  overload: com.azure.storage.blob.nio.AzureFileSystem.getPath*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Converts a path string, or a sequence of more that when joined form a path string, to a Path.


    If more does not specify any elements then the value of the first parameter is the path string to convert. If more specifies one or more elements then each non-empty string, including first, is considered to be a sequence of name elements (see Path) and is joined to form a path string. The more will be joined using the name separator.


    Each name element will be `String`\-joined to the other elements by this file system'first path separator. Naming conventions and allowed characters are as [defined][] by the Azure Blob Storage service. The root component is interpreted as the container name and all name elements are interpreted as a part of the blob name. The character `':'` is only allowed in the root component and must be the last character of the root component.



    [defined]: https://docs.microsoft.com/en-us/rest/api/storageservices/Naming-and-Referencing-Containers--Blobs--and-Metadata
  syntax:
    content: public Path getPath(String first, String[] more)
    parameters:
    - id: first
      type: java.lang.String
      description: the path string or initial part of the path string
    - id: more
      type: java.lang.String[]
      description: additional strings to be joined to form the path string
    return:
      type: java.nio.file.Path
- uid: com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher(java.lang.String)
  id: getPathMatcher(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: getPathMatcher(String s)
  nameWithType: AzureFileSystem.getPathMatcher(String s)
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher(String s)
  overload: com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public PathMatcher getPathMatcher(String s)
    parameters:
    - id: s
      type: java.lang.String
      description: the matcher
    return:
      type: java.nio.file.PathMatcher
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: unsupported.
  - type: java.util.regex.PatternSyntaxException
    description: unsupported.
- uid: com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories()
  id: getRootDirectories()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: getRootDirectories()
  nameWithType: AzureFileSystem.getRootDirectories()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories()
  overload: com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns an object to iterate over the paths of the root directories.


    The list of root directories corresponds to the list of available file stores and therefore containers specified upon initialization. A root directory always takes the form `":"`. This list will respect the parameters provided during initialization.


    If a finite list of containers was provided on start up, this list will not change during the lifetime of this object. If containers are added to the account after initialization, they will be ignored. If a container is deleted or otherwise becomes unavailable, its root directory will still be returned but operations to it will fail.
  syntax:
    content: public Iterable<Path> getRootDirectories()
    return:
      type: java.lang.Iterable<java.nio.file.Path>
      description: an object to iterate over the paths of the root directories
- uid: com.azure.storage.blob.nio.AzureFileSystem.getSeparator()
  id: getSeparator()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: getSeparator()
  nameWithType: AzureFileSystem.getSeparator()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getSeparator()
  overload: com.azure.storage.blob.nio.AzureFileSystem.getSeparator*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the name separator, represented as a string.


    The separator used in this file system is `"/"`.
  syntax:
    content: public String getSeparator()
    return:
      type: java.lang.String
      description: "\"/\""
- uid: com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService()
  id: getUserPrincipalLookupService()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: getUserPrincipalLookupService()
  nameWithType: AzureFileSystem.getUserPrincipalLookupService()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService()
  overload: com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public UserPrincipalLookupService getUserPrincipalLookupService()
    return:
      type: java.nio.file.attribute.UserPrincipalLookupService
- uid: com.azure.storage.blob.nio.AzureFileSystem.hashCode()
  id: hashCode()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: hashCode()
  nameWithType: AzureFileSystem.hashCode()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.hashCode()
  overload: com.azure.storage.blob.nio.AzureFileSystem.hashCode*
  type: Method
  package: com.azure.storage.blob.nio
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.storage.blob.nio.AzureFileSystem.isOpen()
  id: isOpen()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: isOpen()
  nameWithType: AzureFileSystem.isOpen()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.isOpen()
  overload: com.azure.storage.blob.nio.AzureFileSystem.isOpen*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Tells whether or not this file system is open.
  syntax:
    content: public boolean isOpen()
    return:
      type: boolean
      description: whether or not this file system is open.
- uid: com.azure.storage.blob.nio.AzureFileSystem.isReadOnly()
  id: isReadOnly()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: isReadOnly()
  nameWithType: AzureFileSystem.isReadOnly()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.isReadOnly()
  overload: com.azure.storage.blob.nio.AzureFileSystem.isReadOnly*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Tells whether or not this file system allows only read-only access to its file stores.


    Always returns false. It may be the case that the authentication method provided to this file system only supports read operations and hence the file system is implicitly read only in this view, but that does not imply the underlying account/file system is inherently read only. Creating/specifying read only file systems is not supported.
  syntax:
    content: public boolean isReadOnly()
    return:
      type: boolean
      description: "false"
- uid: com.azure.storage.blob.nio.AzureFileSystem.newWatchService()
  id: newWatchService()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: newWatchService()
  nameWithType: AzureFileSystem.newWatchService()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.newWatchService()
  overload: com.azure.storage.blob.nio.AzureFileSystem.newWatchService*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public WatchService newWatchService()
    return:
      type: java.nio.file.WatchService
  exceptions:
  - type: java.io.IOException
    description: unsupported.
- uid: com.azure.storage.blob.nio.AzureFileSystem.provider()
  id: provider()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: provider()
  nameWithType: AzureFileSystem.provider()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.provider()
  overload: com.azure.storage.blob.nio.AzureFileSystem.provider*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns the provider that created this file system.
  syntax:
    content: public FileSystemProvider provider()
    return:
      type: java.nio.file.spi.FileSystemProvider
      description: the provider that created this file system.
- uid: com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews()
  id: supportedFileAttributeViews()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileSystem
  langs:
  - java
  name: supportedFileAttributeViews()
  nameWithType: AzureFileSystem.supportedFileAttributeViews()
  fullName: com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews()
  overload: com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the set of the names of the file attribute views supported by this FileSystem.


    This file system supports the following views:

     *  <xref uid="java.nio.file.attribute.BasicFileAttributeView" data-throw-if-not-resolved="false">java.nio.file.attribute.BasicFileAttributeView</xref>
     *  <xref uid="com.azure.storage.blob.nio.AzureBasicFileAttributeView" data-throw-if-not-resolved="false">AzureBasicFileAttributeView</xref>
     *  <xref uid="com.azure.storage.blob.nio.AzureBlobFileAttributeView" data-throw-if-not-resolved="false">AzureBlobFileAttributeView</xref>
  syntax:
    content: public Set<String> supportedFileAttributeViews()
    return:
      type: java.util.Set<java.lang.String>
references:
- uid: com.azure.storage.blob.nio.AzureFileSystemProvider
  name: AzureFileSystemProvider
  nameWithType: AzureFileSystemProvider
  fullName: com.azure.storage.blob.nio.AzureFileSystemProvider
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.util.Map<java.lang.String,?>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureFileSystem.AzureFileSystem*
  name: AzureFileSystem
  nameWithType: AzureFileSystem.AzureFileSystem
  fullName: com.azure.storage.blob.nio.AzureFileSystem.AzureFileSystem
  package: com.azure.storage.blob.nio
- uid: java.nio.file.spi.FileSystemProvider
  spec.java:
  - uid: java.nio.file.spi.FileSystemProvider
    name: FileSystemProvider
    fullName: java.nio.file.spi.FileSystemProvider
- uid: com.azure.storage.blob.nio.AzureFileSystem.provider*
  name: provider
  nameWithType: AzureFileSystem.provider
  fullName: com.azure.storage.blob.nio.AzureFileSystem.provider
  package: com.azure.storage.blob.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.azure.storage.blob.nio.AzureFileSystem.close*
  name: close
  nameWithType: AzureFileSystem.close
  fullName: com.azure.storage.blob.nio.AzureFileSystem.close
  package: com.azure.storage.blob.nio
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.nio.AzureFileSystem.isOpen*
  name: isOpen
  nameWithType: AzureFileSystem.isOpen
  fullName: com.azure.storage.blob.nio.AzureFileSystem.isOpen
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzureFileSystem.isReadOnly*
  name: isReadOnly
  nameWithType: AzureFileSystem.isReadOnly
  fullName: com.azure.storage.blob.nio.AzureFileSystem.isReadOnly
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzureFileSystem.getSeparator*
  name: getSeparator
  nameWithType: AzureFileSystem.getSeparator
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getSeparator
  package: com.azure.storage.blob.nio
- uid: java.lang.Iterable<java.nio.file.Path>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.nio.file.Path
    name: Path
    fullName: java.nio.file.Path
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories*
  name: getRootDirectories
  nameWithType: AzureFileSystem.getRootDirectories
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getRootDirectories
  package: com.azure.storage.blob.nio
- uid: java.lang.Iterable<java.nio.file.FileStore>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.nio.file.FileStore
    name: FileStore
    fullName: java.nio.file.FileStore
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureFileSystem.getFileStores*
  name: getFileStores
  nameWithType: AzureFileSystem.getFileStores
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getFileStores
  package: com.azure.storage.blob.nio
- uid: java.util.Set<java.lang.String>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews*
  name: supportedFileAttributeViews
  nameWithType: AzureFileSystem.supportedFileAttributeViews
  fullName: com.azure.storage.blob.nio.AzureFileSystem.supportedFileAttributeViews
  package: com.azure.storage.blob.nio
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: java.nio.file.Path
  spec.java:
  - uid: java.nio.file.Path
    name: Path
    fullName: java.nio.file.Path
- uid: com.azure.storage.blob.nio.AzureFileSystem.getPath*
  name: getPath
  nameWithType: AzureFileSystem.getPath
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getPath
  package: com.azure.storage.blob.nio
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: java.util.regex.PatternSyntaxException
  spec.java:
  - uid: java.util.regex.PatternSyntaxException
    name: PatternSyntaxException
    fullName: java.util.regex.PatternSyntaxException
- uid: java.nio.file.PathMatcher
  spec.java:
  - uid: java.nio.file.PathMatcher
    name: PathMatcher
    fullName: java.nio.file.PathMatcher
- uid: com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher*
  name: getPathMatcher
  nameWithType: AzureFileSystem.getPathMatcher
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getPathMatcher
  package: com.azure.storage.blob.nio
- uid: java.nio.file.attribute.UserPrincipalLookupService
  spec.java:
  - uid: java.nio.file.attribute.UserPrincipalLookupService
    name: UserPrincipalLookupService
    fullName: java.nio.file.attribute.UserPrincipalLookupService
- uid: com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService*
  name: getUserPrincipalLookupService
  nameWithType: AzureFileSystem.getUserPrincipalLookupService
  fullName: com.azure.storage.blob.nio.AzureFileSystem.getUserPrincipalLookupService
  package: com.azure.storage.blob.nio
- uid: java.nio.file.WatchService
  spec.java:
  - uid: java.nio.file.WatchService
    name: WatchService
    fullName: java.nio.file.WatchService
- uid: com.azure.storage.blob.nio.AzureFileSystem.newWatchService*
  name: newWatchService
  nameWithType: AzureFileSystem.newWatchService
  fullName: com.azure.storage.blob.nio.AzureFileSystem.newWatchService
  package: com.azure.storage.blob.nio
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.storage.blob.nio.AzureFileSystem.equals*
  name: equals
  nameWithType: AzureFileSystem.equals
  fullName: com.azure.storage.blob.nio.AzureFileSystem.equals
  package: com.azure.storage.blob.nio
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.nio.AzureFileSystem.hashCode*
  name: hashCode
  nameWithType: AzureFileSystem.hashCode
  fullName: com.azure.storage.blob.nio.AzureFileSystem.hashCode
  package: com.azure.storage.blob.nio
- uid: java.nio.file.FileSystem
  name: FileSystem
  nameWithType: FileSystem
  fullName: java.nio.file.FileSystem
- uid: java.nio.file.FileSystem.getFileStores()
  name: FileSystem.getFileStores()
  nameWithType: FileSystem.getFileStores()
  fullName: java.nio.file.FileSystem.getFileStores()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.nio.file.FileSystem.getSeparator()
  name: FileSystem.getSeparator()
  nameWithType: FileSystem.getSeparator()
  fullName: java.nio.file.FileSystem.getSeparator()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.nio.file.FileSystem.isOpen()
  name: FileSystem.isOpen()
  nameWithType: FileSystem.isOpen()
  fullName: java.nio.file.FileSystem.isOpen()
- uid: java.nio.file.FileSystem.isReadOnly()
  name: FileSystem.isReadOnly()
  nameWithType: FileSystem.isReadOnly()
  fullName: java.nio.file.FileSystem.isReadOnly()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.nio.file.FileSystem.supportedFileAttributeViews()
  name: FileSystem.supportedFileAttributeViews()
  nameWithType: FileSystem.supportedFileAttributeViews()
  fullName: java.nio.file.FileSystem.supportedFileAttributeViews()
- uid: java.nio.file.FileSystem.getRootDirectories()
  name: FileSystem.getRootDirectories()
  nameWithType: FileSystem.getRootDirectories()
  fullName: java.nio.file.FileSystem.getRootDirectories()
- uid: java.nio.file.FileSystem.close()
  name: FileSystem.close()
  nameWithType: FileSystem.close()
  fullName: java.nio.file.FileSystem.close()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.nio.file.FileSystem.provider()
  name: FileSystem.provider()
  nameWithType: FileSystem.provider()
  fullName: java.nio.file.FileSystem.provider()
- uid: java.nio.file.FileSystem.getUserPrincipalLookupService()
  name: FileSystem.getUserPrincipalLookupService()
  nameWithType: FileSystem.getUserPrincipalLookupService()
  fullName: java.nio.file.FileSystem.getUserPrincipalLookupService()
- uid: java.nio.file.FileSystem.getPathMatcher(java.lang.String)
  name: FileSystem.getPathMatcher(String)
  nameWithType: FileSystem.getPathMatcher(String)
  fullName: java.nio.file.FileSystem.getPathMatcher(java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)
  name: FileSystem.getPath(String,String)
  nameWithType: FileSystem.getPath(String,String)
  fullName: java.nio.file.FileSystem.getPath(java.lang.String,java.lang.String...)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.nio.file.FileSystem.newWatchService()
  name: FileSystem.newWatchService()
  nameWithType: FileSystem.newWatchService()
  fullName: java.nio.file.FileSystem.newWatchService()
- uid: java.lang.String,?
  name: String,?
  nameWithType: String,?
  fullName: java.lang.String,?
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.nio.file.FileStore
  name: FileStore
  nameWithType: FileStore
  fullName: java.nio.file.FileStore
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
