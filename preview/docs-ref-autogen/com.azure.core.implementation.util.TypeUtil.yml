### YamlMime:ManagedReference
items:
- uid: com.azure.core.implementation.util.TypeUtil
  id: TypeUtil
  parent: com.azure.core.implementation.util
  children:
  - com.azure.core.implementation.util.TypeUtil.createParameterizedType(Class<?>,Type...)
  - com.azure.core.implementation.util.TypeUtil.getAllClasses(Class<?>)
  - com.azure.core.implementation.util.TypeUtil.getRawClass(Type)
  - com.azure.core.implementation.util.TypeUtil.getRestResponseBodyType(Type)
  - com.azure.core.implementation.util.TypeUtil.getSuperType(Type,Class<?>)
  - com.azure.core.implementation.util.TypeUtil.getSuperType(Type)
  - com.azure.core.implementation.util.TypeUtil.getTypeArgument(Type)
  - com.azure.core.implementation.util.TypeUtil.getTypeArguments(Type)
  - com.azure.core.implementation.util.TypeUtil.isTypeOrSubTypeOf(Type,Type)
  - com.azure.core.implementation.util.TypeUtil.restResponseTypeExpectsBody(ParameterizedType)
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: TypeUtil
  nameWithType: TypeUtil
  fullName: com.azure.core.implementation.util.TypeUtil
  type: Class
  source:
    remote: &o0
      path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 14
  package: com.azure.core.implementation.util
  summary: "<p>Utility type exposing methods to deal with <xref uid=\"\" data-throw-if-not-resolved=\"false\">Type</xref>. </p>"
  syntax:
    content: public class TypeUtil
  inheritance:
  - java.lang.Object
- uid: com.azure.core.implementation.util.TypeUtil.createParameterizedType(Class<?>,Type...)
  id: )
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: createParameterizedType(Class<?> rawClass, Type... genericTypes)
  nameWithType: TypeUtil.createParameterizedType(Class<?> rawClass, Type... genericTypes)
  fullName: com.azure.core.implementation.util.TypeUtil.createParameterizedType(Class<?> rawClass, Type... genericTypes)
  overload: com.azure.core.implementation.util.TypeUtil.createParameterizedType*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 153
  package: com.azure.core.implementation.util
  summary: "<p>Create a parameterized type from a raw class and its type arguments.</p>\r\n<p></p>"
  syntax:
    content: public static ParameterizedType createParameterizedType(Class<?> rawClass, Type... genericTypes)
    parameters:
    - id: rawClass
      type: a19781f8
      description: <p>the raw class to construct the parameterized type </p>
    - id: genericTypes
      type: 62a8a26f
      description: <p>the generic arguments </p>
    return:
      type: 4fcaf52c
      description: <p>the parameterized type </p>
- uid: com.azure.core.implementation.util.TypeUtil.getAllClasses(Class<?>)
  id: getAllClasses(Class<?>)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getAllClasses(Class<?> clazz)
  nameWithType: TypeUtil.getAllClasses(Class<?> clazz)
  fullName: com.azure.core.implementation.util.TypeUtil.getAllClasses(Class<?> clazz)
  overload: com.azure.core.implementation.util.TypeUtil.getAllClasses*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 21
  package: com.azure.core.implementation.util
  summary: "<p>Find all super classes including provided class.</p>\r\n<p></p>"
  syntax:
    content: public static List<Class<?>> getAllClasses(Class<?> clazz)
    parameters:
    - id: clazz
      type: a19781f8
      description: <p>the raw class to find super types for </p>
    return:
      type: 0e0b5418
      description: <p>the list of super classes </p>
- uid: com.azure.core.implementation.util.TypeUtil.getRawClass(Type)
  id: getRawClass(Type)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getRawClass(Type type)
  nameWithType: TypeUtil.getRawClass(Type type)
  fullName: com.azure.core.implementation.util.TypeUtil.getRawClass(Type type)
  overload: com.azure.core.implementation.util.TypeUtil.getRawClass*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 62
  package: com.azure.core.implementation.util
  summary: "<p>Get the raw class for a given type.</p>\r\n<p></p>"
  syntax:
    content: public static Class<?> getRawClass(Type type)
    parameters:
    - id: type
      type: 7727faa1
      description: <p>the input type </p>
    return:
      type: a19781f8
      description: <p>the raw class </p>
- uid: com.azure.core.implementation.util.TypeUtil.getRestResponseBodyType(Type)
  id: getRestResponseBodyType(Type)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getRestResponseBodyType(Type restResponseReturnType)
  nameWithType: TypeUtil.getRestResponseBodyType(Type restResponseReturnType)
  fullName: com.azure.core.implementation.util.TypeUtil.getRestResponseBodyType(Type restResponseReturnType)
  overload: com.azure.core.implementation.util.TypeUtil.getRestResponseBodyType*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 189
  package: com.azure.core.implementation.util
  summary: "<p>Returns the body type expected in the rest response.</p>\r\n<p></p>"
  syntax:
    content: public static Type getRestResponseBodyType(Type restResponseReturnType)
    parameters:
    - id: restResponseReturnType
      type: 7727faa1
      description: <p>The RestResponse subtype containing the type arguments we are inspecting. </p>
    return:
      type: 7727faa1
      description: <p>The type of the body. </p>
- uid: com.azure.core.implementation.util.TypeUtil.getSuperType(Type,Class<?>)
  id: getSuperType(Type,Class<?>)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getSuperType(Type subType, Class<?> rawSuperType)
  nameWithType: TypeUtil.getSuperType(Type subType, Class<?> rawSuperType)
  fullName: com.azure.core.implementation.util.TypeUtil.getSuperType(Type subType, Class<?> rawSuperType)
  overload: com.azure.core.implementation.util.TypeUtil.getSuperType*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 125
  package: com.azure.core.implementation.util
  summary: "<p>Get the super type for a type in its super type chain, which has a raw class that matches the specified class.</p>\r\n<p></p>"
  syntax:
    content: public static Type getSuperType(Type subType, Class<?> rawSuperType)
    parameters:
    - id: subType
      type: 7727faa1
      description: <p>the sub type to find super type for </p>
    - id: rawSuperType
      type: a19781f8
      description: <p>the raw class for the super type </p>
    return:
      type: 7727faa1
      description: <p>the super type that matches the requirement </p>
- uid: com.azure.core.implementation.util.TypeUtil.getSuperType(Type)
  id: getSuperType(Type)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getSuperType(Type type)
  nameWithType: TypeUtil.getSuperType(Type type)
  fullName: com.azure.core.implementation.util.TypeUtil.getSuperType(Type type)
  overload: com.azure.core.implementation.util.TypeUtil.getSuperType*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 76
  package: com.azure.core.implementation.util
  summary: "<p>Get the super type for a given type.</p>\r\n<p></p>"
  syntax:
    content: public static Type getSuperType(Type type)
    parameters:
    - id: type
      type: 7727faa1
      description: <p>the input type </p>
    return:
      type: 7727faa1
      description: <p>the direct super type </p>
- uid: com.azure.core.implementation.util.TypeUtil.getTypeArgument(Type)
  id: getTypeArgument(Type)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getTypeArgument(Type type)
  nameWithType: TypeUtil.getTypeArgument(Type type)
  fullName: com.azure.core.implementation.util.TypeUtil.getTypeArgument(Type type)
  overload: com.azure.core.implementation.util.TypeUtil.getTypeArgument*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 49
  package: com.azure.core.implementation.util
  summary: "<p>Get the generic argument, or the first if the type has more than one.</p>\r\n<p></p>"
  syntax:
    content: public static Type getTypeArgument(Type type)
    parameters:
    - id: type
      type: 7727faa1
      description: <p>the type to get arguments </p>
    return:
      type: 7727faa1
      description: <p>the generic argument, null if type is not parameterized </p>
- uid: com.azure.core.implementation.util.TypeUtil.getTypeArguments(Type)
  id: getTypeArguments(Type)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: getTypeArguments(Type type)
  nameWithType: TypeUtil.getTypeArguments(Type type)
  fullName: com.azure.core.implementation.util.TypeUtil.getTypeArguments(Type type)
  overload: com.azure.core.implementation.util.TypeUtil.getTypeArguments*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 36
  package: com.azure.core.implementation.util
  summary: "<p>Get the generic arguments for a type.</p>\r\n<p></p>"
  syntax:
    content: public static Type [] getTypeArguments(Type type)
    parameters:
    - id: type
      type: 7727faa1
      description: <p>the type to get arguments </p>
    return:
      type: d9aceb80
      description: <p>the generic arguments, empty if type is not parameterized </p>
- uid: com.azure.core.implementation.util.TypeUtil.isTypeOrSubTypeOf(Type,Type)
  id: isTypeOrSubTypeOf(Type,Type)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: isTypeOrSubTypeOf(Type subType, Type superType)
  nameWithType: TypeUtil.isTypeOrSubTypeOf(Type subType, Type superType)
  fullName: com.azure.core.implementation.util.TypeUtil.isTypeOrSubTypeOf(Type subType, Type superType)
  overload: com.azure.core.implementation.util.TypeUtil.isTypeOrSubTypeOf*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 139
  package: com.azure.core.implementation.util
  summary: "<p>Determines if a type is the same or a subtype for another type.</p>\r\n<p></p>"
  syntax:
    content: public static boolean isTypeOrSubTypeOf(Type subType, Type superType)
    parameters:
    - id: subType
      type: 7727faa1
      description: <p>the supposed sub type </p>
    - id: superType
      type: 7727faa1
      description: <p>the supposed super type </p>
    return:
      type: 4fc6e284
      description: <p>true if the first type is the same or a subtype for the second type </p>
- uid: com.azure.core.implementation.util.TypeUtil.restResponseTypeExpectsBody(ParameterizedType)
  id: restResponseTypeExpectsBody(ParameterizedType)
  parent: com.azure.core.implementation.util.TypeUtil
  href: com.azure.core.implementation.util.TypeUtil.yml
  langs:
  - java
  name: restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)
  nameWithType: TypeUtil.restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)
  fullName: com.azure.core.implementation.util.TypeUtil.restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)
  overload: com.azure.core.implementation.util.TypeUtil.restResponseTypeExpectsBody*
  type: Method
  source:
    remote: *o0
    path: sdk/core/azure-core/src/main/java/com/azure/core/implementation/util/TypeUtil.java
    startLine: 179
  package: com.azure.core.implementation.util
  summary: "<p>Returns whether the rest response expects to have any body (by checking if the body parameter type is set to Void, in which case no body is expected).</p>\r\n<p></p>"
  syntax:
    content: public static boolean restResponseTypeExpectsBody(ParameterizedType restResponseReturnType)
    parameters:
    - id: restResponseReturnType
      type: 4fcaf52c
      description: <p>The RestResponse subtype containing the type arguments we are inspecting. </p>
    return:
      type: 4fc6e284
      description: <p>True if a body is expected, false if a Void body is expected. </p>
references:
- uid: a19781f8
  spec.java:
  - name: Class<?>
    fullName: Class<?>
- uid: 0e0b5418
  spec.java:
  - name: List<Class<?>>
    fullName: List<Class<?>>
- uid: com.azure.core.implementation.util.TypeUtil.getAllClasses*
  name: getAllClasses
  nameWithType: TypeUtil.getAllClasses
  fullName: com.azure.core.implementation.util.TypeUtil.getAllClasses
  package: com.azure.core.implementation.util
- uid: 7727faa1
  spec.java:
  - name: Type
    fullName: Type
- uid: d9aceb80
  spec.java:
  - name: Type []
    fullName: Type []
- uid: com.azure.core.implementation.util.TypeUtil.getTypeArguments*
  name: getTypeArguments
  nameWithType: TypeUtil.getTypeArguments
  fullName: com.azure.core.implementation.util.TypeUtil.getTypeArguments
  package: com.azure.core.implementation.util
- uid: com.azure.core.implementation.util.TypeUtil.getTypeArgument*
  name: getTypeArgument
  nameWithType: TypeUtil.getTypeArgument
  fullName: com.azure.core.implementation.util.TypeUtil.getTypeArgument
  package: com.azure.core.implementation.util
- uid: com.azure.core.implementation.util.TypeUtil.getRawClass*
  name: getRawClass
  nameWithType: TypeUtil.getRawClass
  fullName: com.azure.core.implementation.util.TypeUtil.getRawClass
  package: com.azure.core.implementation.util
- uid: com.azure.core.implementation.util.TypeUtil.getSuperType*
  name: getSuperType
  nameWithType: TypeUtil.getSuperType
  fullName: com.azure.core.implementation.util.TypeUtil.getSuperType
  package: com.azure.core.implementation.util
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.azure.core.implementation.util.TypeUtil.isTypeOrSubTypeOf*
  name: isTypeOrSubTypeOf
  nameWithType: TypeUtil.isTypeOrSubTypeOf
  fullName: com.azure.core.implementation.util.TypeUtil.isTypeOrSubTypeOf
  package: com.azure.core.implementation.util
- uid: 62a8a26f
  spec.java:
  - name: Type...
    fullName: Type...
- uid: 4fcaf52c
  spec.java:
  - name: ParameterizedType
    fullName: ParameterizedType
- uid: com.azure.core.implementation.util.TypeUtil.createParameterizedType*
  name: createParameterizedType
  nameWithType: TypeUtil.createParameterizedType
  fullName: com.azure.core.implementation.util.TypeUtil.createParameterizedType
  package: com.azure.core.implementation.util
- uid: com.azure.core.implementation.util.TypeUtil.restResponseTypeExpectsBody*
  name: restResponseTypeExpectsBody
  nameWithType: TypeUtil.restResponseTypeExpectsBody
  fullName: com.azure.core.implementation.util.TypeUtil.restResponseTypeExpectsBody
  package: com.azure.core.implementation.util
- uid: com.azure.core.implementation.util.TypeUtil.getRestResponseBodyType*
  name: getRestResponseBodyType
  nameWithType: TypeUtil.getRestResponseBodyType
  fullName: com.azure.core.implementation.util.TypeUtil.getRestResponseBodyType
  package: com.azure.core.implementation.util
