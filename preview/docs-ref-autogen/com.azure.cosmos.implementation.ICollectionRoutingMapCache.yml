### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.ICollectionRoutingMapCache
  id: ICollectionRoutingMapCache
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation
  children:
  - com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,boolean,java.util.Map<java.lang.String,java.lang.Object>)
  - com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,java.util.Map<java.lang.String,java.lang.Object>)
  langs:
  - java
  name: ICollectionRoutingMapCache
  nameWithType: ICollectionRoutingMapCache
  fullName: com.azure.cosmos.implementation.ICollectionRoutingMapCache
  type: Interface
  package: com.azure.cosmos.implementation
  summary: While this class is public, but it is not part of our published public APIs. This is meant to be internally used only by our sdk.
  syntax:
    content: public interface ICollectionRoutingMapCache
- uid: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,boolean,java.util.Map<java.lang.String,java.lang.Object>)
  id: tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,boolean,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.ICollectionRoutingMapCache
  langs:
  - java
  name: tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, boolean forceRefreshCollectionRoutingMap, Map<String,Object> properties)
  nameWithType: ICollectionRoutingMapCache.tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, boolean forceRefreshCollectionRoutingMap, Map<String,Object> properties)
  fullName: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, boolean forceRefreshCollectionRoutingMap, Map<String,Object> properties)
  overload: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync*
  type: Method
  package: com.azure.cosmos.implementation
  syntax:
    content: public abstract Mono<Utils.ValueHolder<CollectionRoutingMap>> tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, boolean forceRefreshCollectionRoutingMap, Map<String,Object> properties)
    parameters:
    - id: metaDataDiagnosticsContext
      type: com.azure.cosmos.implementation.MetadataDiagnosticsContext
    - id: collectionRid
      type: java.lang.String
    - id: previousValue
      type: com.azure.cosmos.implementation.routing.CollectionRoutingMap
    - id: forceRefreshCollectionRoutingMap
      type: boolean
    - id: properties
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.Utils.ValueHolder<com.azure.cosmos.implementation.routing.CollectionRoutingMap>>
- uid: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,java.util.Map<java.lang.String,java.lang.Object>)
  id: tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,java.util.Map<java.lang.String,java.lang.Object>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.ICollectionRoutingMapCache
  langs:
  - java
  name: tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, Map<String,Object> properties)
  nameWithType: ICollectionRoutingMapCache.tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, Map<String,Object> properties)
  fullName: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, Map<String,Object> properties)
  overload: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync*
  type: Method
  package: com.azure.cosmos.implementation
  syntax:
    content: public default Mono<Utils.ValueHolder<CollectionRoutingMap>> tryLookupAsync(MetadataDiagnosticsContext metaDataDiagnosticsContext, String collectionRid, CollectionRoutingMap previousValue, Map<String,Object> properties)
    parameters:
    - id: metaDataDiagnosticsContext
      type: com.azure.cosmos.implementation.MetadataDiagnosticsContext
    - id: collectionRid
      type: java.lang.String
    - id: previousValue
      type: com.azure.cosmos.implementation.routing.CollectionRoutingMap
    - id: properties
      type: java.util.Map<java.lang.String,java.lang.Object>
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.Utils.ValueHolder<com.azure.cosmos.implementation.routing.CollectionRoutingMap>>
references:
- uid: com.azure.cosmos.implementation.MetadataDiagnosticsContext
  name: MetadataDiagnosticsContext
  nameWithType: MetadataDiagnosticsContext
  fullName: com.azure.cosmos.implementation.MetadataDiagnosticsContext
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.routing.CollectionRoutingMap
  name: CollectionRoutingMap
  nameWithType: CollectionRoutingMap
  fullName: com.azure.cosmos.implementation.routing.CollectionRoutingMap
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.Utils.ValueHolder<com.azure.cosmos.implementation.routing.CollectionRoutingMap>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.Utils.ValueHolder
    name: ValueHolder
    fullName: com.azure.cosmos.implementation.Utils.ValueHolder
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.routing.CollectionRoutingMap
    name: CollectionRoutingMap
    fullName: com.azure.cosmos.implementation.routing.CollectionRoutingMap
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync*
  name: tryLookupAsync
  nameWithType: ICollectionRoutingMapCache.tryLookupAsync
  fullName: com.azure.cosmos.implementation.ICollectionRoutingMapCache.tryLookupAsync
  package: com.azure.cosmos.implementation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: com.azure.cosmos.implementation.Utils.ValueHolder
  name: Utils.ValueHolder
  nameWithType: Utils.ValueHolder
  fullName: com.azure.cosmos.implementation.Utils.ValueHolder
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
