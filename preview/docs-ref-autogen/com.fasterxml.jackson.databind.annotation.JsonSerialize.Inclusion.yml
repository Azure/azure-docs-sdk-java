### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion"
fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion"
name: "JsonSerialize.Inclusion"
nameWithType: "JsonSerialize.Inclusion"
summary: "Enumeration used with <xref uid=\"com.fasterxml.jackson.databind.annotation.JsonSerialize.include*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerialize#include\"></xref> property to define which properties of Java Beans are to be included in serialization"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonSerialize.Inclusion extends Enum<JsonSerialize.Inclusion>"
fields:
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.ALWAYS"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.ALWAYS"
  name: "ALWAYS"
  nameWithType: "JsonSerialize.Inclusion.ALWAYS"
  summary: "Value that indicates that properties are to be always included, independent of value"
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.DEFAULT_INCLUSION"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.DEFAULT_INCLUSION"
  name: "DEFAULT_INCLUSION"
  nameWithType: "JsonSerialize.Inclusion.DEFAULT_INCLUSION"
  summary: "Pseudo-value that is used to indicate \"use whatever is default used at higher level\"."
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_DEFAULT"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_DEFAULT"
  name: "NON_DEFAULT"
  nameWithType: "JsonSerialize.Inclusion.NON_DEFAULT"
  summary: "Value that indicates that only properties that have values that differ from default settings (meaning values they have when Bean is constructed with its no-arguments constructor) are to be included. Value is generally not useful with <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>s, since they have no default values; and if used, works same as <xref uid=\"com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.ALWAYS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ALWAYS\"></xref>."
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_EMPTY"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_EMPTY"
  name: "NON_EMPTY"
  nameWithType: "JsonSerialize.Inclusion.NON_EMPTY"
  summary: "Value that indicates that only properties that have values that values that are null or what is considered empty are not to be included. Emptiness is defined for following type:\n\n *  For <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s and <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>s, method `isEmpty()` is called;\n *  For Java arrays, empty arrays are ones with length of 0\n *  For Java <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>s, `length()` is called, and return value of 0 indicates empty String\n\nFor other types, non-null values are to be included."
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_NULL"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.NON_NULL"
  name: "NON_NULL"
  nameWithType: "JsonSerialize.Inclusion.NON_NULL"
  summary: "Value that indicates that only properties with non-null values are to be included."
methods:
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonSerialize.Inclusion.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonSerialize.Inclusion valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion?alt=com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion&text=Inclusion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.values()"
  fullName: "com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion.values()"
  name: "values()"
  nameWithType: "JsonSerialize.Inclusion.values()"
  syntax: "public static JsonSerialize.Inclusion[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion?alt=com.fasterxml.jackson.databind.annotation.JsonSerialize.Inclusion&text=Inclusion\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.databind.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
