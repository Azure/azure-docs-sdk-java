### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.logging.LogLevel"
  id: "LogLevel"
  parent: "com.azure.core.util.logging"
  children:
  - "com.azure.core.util.logging.LogLevel.ERROR"
  - "com.azure.core.util.logging.LogLevel.INFORMATIONAL"
  - "com.azure.core.util.logging.LogLevel.NOT_SET"
  - "com.azure.core.util.logging.LogLevel.VERBOSE"
  - "com.azure.core.util.logging.LogLevel.WARNING"
  - "com.azure.core.util.logging.LogLevel.fromString(java.lang.String)"
  - "com.azure.core.util.logging.LogLevel.getLogLevel()"
  - "com.azure.core.util.logging.LogLevel.valueOf(java.lang.String)"
  - "com.azure.core.util.logging.LogLevel.values()"
  langs:
  - "java"
  name: "LogLevel"
  nameWithType: "LogLevel"
  fullName: "com.azure.core.util.logging.LogLevel"
  type: "Enum"
  package: "com.azure.core.util.logging"
  summary: "Enum which represent logging levels used in Azure SDKs."
  syntax:
    content: "public enum LogLevel extends Enum<LogLevel>"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Enum"
  inheritedMembers:
  - "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  - "java.lang.Enum.clone()"
  - "java.lang.Enum.compareTo(E)"
  - "java.lang.Enum.equals(java.lang.Object)"
  - "java.lang.Enum.finalize()"
  - "java.lang.Enum.getDeclaringClass()"
  - "java.lang.Enum.hashCode()"
  - "java.lang.Enum.name()"
  - "java.lang.Enum.ordinal()"
  - "java.lang.Enum.toString()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.logging.LogLevel.ERROR"
  id: "ERROR"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "ERROR"
  nameWithType: "LogLevel.ERROR"
  fullName: "com.azure.core.util.logging.LogLevel.ERROR"
  type: "Field"
  package: "com.azure.core.util.logging"
  summary: "Indicates that log level is at error level."
  syntax:
    content: "public static final LogLevel ERROR"
    return:
      type: "com.azure.core.util.logging.LogLevel"
- uid: "com.azure.core.util.logging.LogLevel.INFORMATIONAL"
  id: "INFORMATIONAL"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "INFORMATIONAL"
  nameWithType: "LogLevel.INFORMATIONAL"
  fullName: "com.azure.core.util.logging.LogLevel.INFORMATIONAL"
  type: "Field"
  package: "com.azure.core.util.logging"
  summary: "Indicates that log level is at information level."
  syntax:
    content: "public static final LogLevel INFORMATIONAL"
    return:
      type: "com.azure.core.util.logging.LogLevel"
- uid: "com.azure.core.util.logging.LogLevel.LogLevel(int,java.lang.String...)"
  id: "LogLevel(int,java.lang.String...)"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "LogLevel(int numericValue, String[] allowedLogLevelVariables)"
  nameWithType: "LogLevel.LogLevel(int numericValue, String[] allowedLogLevelVariables)"
  fullName: "com.azure.core.util.logging.LogLevel.LogLevel(int numericValue, String[] allowedLogLevelVariables)"
  overload: "com.azure.core.util.logging.LogLevel.LogLevel*"
  type: "Constructor"
  package: "com.azure.core.util.logging"
  syntax:
    content: "private LogLevel(int numericValue, String[] allowedLogLevelVariables)"
    parameters:
    - id: "numericValue"
      type: "int"
    - id: "allowedLogLevelVariables"
      type: "java.lang.String[]"
- uid: "com.azure.core.util.logging.LogLevel.NOT_SET"
  id: "NOT_SET"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "NOT_SET"
  nameWithType: "LogLevel.NOT_SET"
  fullName: "com.azure.core.util.logging.LogLevel.NOT_SET"
  type: "Field"
  package: "com.azure.core.util.logging"
  summary: "Indicates that no log level is set."
  syntax:
    content: "public static final LogLevel NOT_SET"
    return:
      type: "com.azure.core.util.logging.LogLevel"
- uid: "com.azure.core.util.logging.LogLevel.VERBOSE"
  id: "VERBOSE"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "VERBOSE"
  nameWithType: "LogLevel.VERBOSE"
  fullName: "com.azure.core.util.logging.LogLevel.VERBOSE"
  type: "Field"
  package: "com.azure.core.util.logging"
  summary: "Indicates that log level is at verbose level."
  syntax:
    content: "public static final LogLevel VERBOSE"
    return:
      type: "com.azure.core.util.logging.LogLevel"
- uid: "com.azure.core.util.logging.LogLevel.WARNING"
  id: "WARNING"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "WARNING"
  nameWithType: "LogLevel.WARNING"
  fullName: "com.azure.core.util.logging.LogLevel.WARNING"
  type: "Field"
  package: "com.azure.core.util.logging"
  summary: "Indicates that log level is at warning level."
  syntax:
    content: "public static final LogLevel WARNING"
    return:
      type: "com.azure.core.util.logging.LogLevel"
- uid: "com.azure.core.util.logging.LogLevel.fromString(java.lang.String)"
  id: "fromString(java.lang.String)"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "fromString(String logLevelVal)"
  nameWithType: "LogLevel.fromString(String logLevelVal)"
  fullName: "com.azure.core.util.logging.LogLevel.fromString(String logLevelVal)"
  overload: "com.azure.core.util.logging.LogLevel.fromString*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Converts the passed log level string to the corresponding <xref uid=\"com.azure.core.util.logging.LogLevel\" data-throw-if-not-resolved=\"false\">LogLevel</xref>."
  syntax:
    content: "public static LogLevel fromString(String logLevelVal)"
    parameters:
    - id: "logLevelVal"
      type: "java.lang.String"
      description: "The log level value which needs to convert"
    return:
      type: "com.azure.core.util.logging.LogLevel"
      description: "The LogLevel Enum if pass in the valid string. \n The valid strings for <xref uid=\"com.azure.core.util.logging.LogLevel\" data-throw-if-not-resolved=\"false\">LogLevel</xref> are:\n <ul>\n <li>VERBOSE: \"verbose\", \"debug\"</li>\n <li>INFO: \"info\", \"information\", \"informational\"</li>\n <li>WARNING: \"warn\", \"warning\"</li>\n <li>ERROR: \"err\", \"error\"</li>\n </ul>\n Returns NOT_SET if null is passed in."
- uid: "com.azure.core.util.logging.LogLevel.getLogLevel()"
  id: "getLogLevel()"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "getLogLevel()"
  nameWithType: "LogLevel.getLogLevel()"
  fullName: "com.azure.core.util.logging.LogLevel.getLogLevel()"
  overload: "com.azure.core.util.logging.LogLevel.getLogLevel*"
  type: "Method"
  package: "com.azure.core.util.logging"
  summary: "Converts the log level into a numeric representation used for comparisons."
  syntax:
    content: "public int getLogLevel()"
    return:
      type: "int"
      description: "The numeric representation of the log level."
- uid: "com.azure.core.util.logging.LogLevel.valueOf(java.lang.String)"
  id: "valueOf(java.lang.String)"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "valueOf(String name)"
  nameWithType: "LogLevel.valueOf(String name)"
  fullName: "com.azure.core.util.logging.LogLevel.valueOf(String name)"
  overload: "com.azure.core.util.logging.LogLevel.valueOf*"
  type: "Method"
  package: "com.azure.core.util.logging"
  syntax:
    content: "public static LogLevel valueOf(String name)"
    parameters:
    - id: "name"
      type: "java.lang.String"
    return:
      type: "com.azure.core.util.logging.LogLevel"
- uid: "com.azure.core.util.logging.LogLevel.values()"
  id: "values()"
  parent: "com.azure.core.util.logging.LogLevel"
  langs:
  - "java"
  name: "values()"
  nameWithType: "LogLevel.values()"
  fullName: "com.azure.core.util.logging.LogLevel.values()"
  overload: "com.azure.core.util.logging.LogLevel.values*"
  type: "Method"
  package: "com.azure.core.util.logging"
  syntax:
    content: "public static LogLevel[] values()"
    return:
      type: "com.azure.core.util.logging.LogLevel[]"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.util.logging.LogLevel.LogLevel*"
  name: "LogLevel"
  nameWithType: "LogLevel.LogLevel"
  fullName: "com.azure.core.util.logging.LogLevel.LogLevel"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.LogLevel[]"
  spec.java:
  - uid: "com.azure.core.util.logging.LogLevel"
    name: "LogLevel"
    fullName: "com.azure.core.util.logging.LogLevel"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.util.logging.LogLevel.values*"
  name: "values"
  nameWithType: "LogLevel.values"
  fullName: "com.azure.core.util.logging.LogLevel.values"
  package: "com.azure.core.util.logging"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.logging.LogLevel.valueOf*"
  name: "valueOf"
  nameWithType: "LogLevel.valueOf"
  fullName: "com.azure.core.util.logging.LogLevel.valueOf"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.LogLevel.getLogLevel*"
  name: "getLogLevel"
  nameWithType: "LogLevel.getLogLevel"
  fullName: "com.azure.core.util.logging.LogLevel.getLogLevel"
  package: "com.azure.core.util.logging"
- uid: "com.azure.core.util.logging.LogLevel.fromString*"
  name: "fromString"
  nameWithType: "LogLevel.fromString"
  fullName: "com.azure.core.util.logging.LogLevel.fromString"
  package: "com.azure.core.util.logging"
- uid: "java.lang.Enum<com.azure.core.util.logging.LogLevel>"
  name: "Enum<LogLevel>"
  nameWithType: "Enum<LogLevel>"
  fullName: "java.lang.Enum<com.azure.core.util.logging.LogLevel>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Enum.toString()"
  name: "Enum.toString()"
  nameWithType: "Enum.toString()"
  fullName: "java.lang.Enum.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Enum.clone()"
  name: "Enum.clone()"
  nameWithType: "Enum.clone()"
  fullName: "java.lang.Enum.clone()"
- uid: "java.lang.Enum.finalize()"
  name: "Enum.finalize()"
  nameWithType: "Enum.finalize()"
  fullName: "java.lang.Enum.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Enum.compareTo(E)"
  name: "Enum.compareTo(E)"
  nameWithType: "Enum.compareTo(E)"
  fullName: "java.lang.Enum.compareTo(E)"
- uid: "java.lang.Enum.name()"
  name: "Enum.name()"
  nameWithType: "Enum.name()"
  fullName: "java.lang.Enum.name()"
- uid: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
  name: "Enum.<T>valueOf(Class<T>,String)"
  nameWithType: "Enum.<T>valueOf(Class<T>,String)"
  fullName: "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Enum.getDeclaringClass()"
  name: "Enum.getDeclaringClass()"
  nameWithType: "Enum.getDeclaringClass()"
  fullName: "java.lang.Enum.getDeclaringClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Enum.ordinal()"
  name: "Enum.ordinal()"
  nameWithType: "Enum.ordinal()"
  fullName: "java.lang.Enum.ordinal()"
- uid: "java.lang.Enum.hashCode()"
  name: "Enum.hashCode()"
  nameWithType: "Enum.hashCode()"
  fullName: "java.lang.Enum.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Enum.equals(java.lang.Object)"
  name: "Enum.equals(Object)"
  nameWithType: "Enum.equals(Object)"
  fullName: "java.lang.Enum.equals(java.lang.Object)"
- uid: "java.lang.Enum"
  name: "Enum"
  nameWithType: "Enum"
  fullName: "java.lang.Enum"
- uid: "java.lang.Enum."
  name: "Enum."
  nameWithType: "Enum."
  fullName: "java.lang.Enum."
- uid: "T>,java.lang.String)"
  name: "T>,String)"
  nameWithType: "T>,String)"
  fullName: "T>,java.lang.String)"
- uid: "T>valueOf(java.lang.Class"
  name: "T>valueOf(Class"
  nameWithType: "T>valueOf(Class"
  fullName: "T>valueOf(java.lang.Class"
