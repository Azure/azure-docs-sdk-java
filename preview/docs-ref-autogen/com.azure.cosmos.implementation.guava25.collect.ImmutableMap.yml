### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableMap"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>"
name: "ImmutableMap<K,V>"
nameWithType: "ImmutableMap<K,V>"
summary: "A <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref> whose contents will never change, with many other important properties detailed at <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableCollection\"></xref>.\n\nSee the Guava User Guide article on [ immutable collections][immutable collections].\n\n\n[immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ImmutableMap<K,V> implements Map<K,V>, Serializable"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
