### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  id: ImmutableMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
  langs:
  - java
  name: ImmutableMap<K,V>
  nameWithType: ImmutableMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="java.util.Map" data-throw-if-not-resolved="false">Map</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableMap<K,V> implements Map<K,V>, Serializable
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  implements:
  - java.util.Map<K,V>
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()
  id: <K,V>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>builder()
  nameWithType: ImmutableMap<K,V>.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableMap.Builder<K,V> <K,V>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)
  id: <K,V>builderWithExpectedSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>builderWithExpectedSize(int expectedSize)
  nameWithType: ImmutableMap<K,V>.<K,V>builderWithExpectedSize(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>builderWithExpectedSize(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.builderWithExpectedSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new builder, expecting the specified number of entries to be added.


    If `expectedSize` is exactly the number of entries added to the builder before <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.build" data-throw-if-not-resolved="false">Builder#build</xref> is called, the builder is likely to perform better than an unsized <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMap.&lt;K,V&gt;builder()" data-throw-if-not-resolved="false">#builder()</xref> would have.


    It is not specified if any performance benefits apply if `expectedSize` is close to, but not exactly, the number of entries added to the builder.
  syntax:
    content: public static ImmutableMap.Builder<K,V> <K,V>builderWithExpectedSize(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  id: <K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  nameWithType: ImmutableMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the specified entries. The returned map iterates over entries in the same order as the original iterable.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  id: <K,V>copyOf(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>copyOf(Map<? extends K,? extends V> map)
  nameWithType: ImmutableMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable map containing the same entries as `map`. The returned map iterates over entries in the same order as the `entrySet` of the original map. If `map` somehow contains entries with duplicate keys (for example, if it is a `SortedMap` whose comparator is not *consistent with equals*), the results of this method are undefined.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>copyOf(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
  id: <K,V>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>of()
  nameWithType: ImmutableMap<K,V>.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty map. This map behaves and performs comparably to <xref uid="" data-throw-if-not-resolved="false">Collections#emptyMap</xref>, and is preferable mainly for consistency and maintainability of your code.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)
  id: <K,V>of(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>of(K k1, V v1)
  nameWithType: ImmutableMap<K,V>.<K,V>of(K k1, V v1)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of(K k1, V v1)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing a single entry. This map behaves and performs comparably to <xref uid="" data-throw-if-not-resolved="false">Collections#singletonMap</xref> but will not accept a null key or value. It is preferable mainly for consistency and maintainability of your code.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>of(K k1, V v1)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)
  id: <K,V>of(K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2)
  nameWithType: ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>of(K k1, V v1, K k2, V v2)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  nameWithType: ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  nameWithType: ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  nameWithType: ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    - id: k5
      type: K
    - id: v5
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  id: <T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  nameWithType: ImmutableMap<K,V>.<T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toImmutableMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Collector" data-throw-if-not-resolved="false">Collector</xref> that accumulates elements into an `ImmutableMap` whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result `ImmutableMap` in encounter order.


    If the mapped keys contain duplicates (according to <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>, an `IllegalArgumentException` is thrown when the collection operation is performed. (This differs from the `Collector` returned by <xref uid="" data-throw-if-not-resolved="false">Collectors#toMap(Function, Function)</xref>, which throws an `IllegalStateException`.)
  syntax:
    content: public static Collector<T,?,ImmutableMap<K,V>> <T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
    parameters:
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valueFunction
      type: java.util.function.Function<? super T,? extends V>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  id: <T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: <T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
  nameWithType: ImmutableMap<K,V>.<T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toImmutableMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Collector" data-throw-if-not-resolved="false">Collector</xref> that accumulates elements into an `ImmutableMap` whose keys and values are the result of applying the provided mapping functions to the input elements.


    If the mapped keys contain duplicates (according to <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>), the values are merged using the specified merging function. Entries will appear in the encounter order of the first occurrence of the key.
  syntax:
    content: public static Collector<T,?,ImmutableMap<K,V>> <T,K,V>toImmutableMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, BinaryOperator<V> mergeFunction)
    parameters:
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valueFunction
      type: java.util.function.Function<? super T,? extends V>
    - id: mergeFunction
      type: java.util.function.BinaryOperator<V>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.ImmutableMap()
  id: ImmutableMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: ImmutableMap()
  nameWithType: ImmutableMap<K,V>.ImmutableMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.ImmutableMap()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.ImmutableMap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableMap()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
  id: asMultimap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: asMultimap()
  nameWithType: ImmutableMap<K,V>.asMultimap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.asMultimap()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a multimap view of the map.
  syntax:
    content: public ImmutableSetMultimap<K,V> asMultimap()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: clear()
  nameWithType: ImmutableMap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  id: compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
  nameWithType: ImmutableMap<K,V>.compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
    parameters:
    - id: key
      type: K
    - id: remappingFunction
      type: java.util.function.BiFunction<? super K,? super V,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  id: computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
  nameWithType: ImmutableMap<K,V>.computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)
    parameters:
    - id: key
      type: K
    - id: mappingFunction
      type: java.util.function.Function<? super K,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  id: computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
  nameWithType: ImmutableMap<K,V>.computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)
    parameters:
    - id: key
      type: K
    - id: remappingFunction
      type: java.util.function.BiFunction<? super K,? super V,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: ImmutableMap<K,V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: ImmutableMap<K,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
  id: entrySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: entrySet()
  nameWithType: ImmutableMap<K,V>.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.entrySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set of the mappings in this map. The iteration order is specified by the method used to create this map. Typically, this is insertion order.
  syntax:
    content: public ImmutableSet<Map.Entry<K,V>> entrySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: equals(Object object)
  nameWithType: ImmutableMap<K,V>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
  id: get(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: get(Object key)
  nameWithType: ImmutableMap<K,V>.get(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.get(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public abstract V get(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
  id: getOrDefault(java.lang.Object,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: getOrDefault(Object key, V defaultValue)
  nameWithType: ImmutableMap<K,V>.getOrDefault(Object key, V defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.getOrDefault(Object key, V defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public final V getOrDefault(Object key, V defaultValue)
    parameters:
    - id: key
      type: java.lang.Object
    - id: defaultValue
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: hashCode()
  nameWithType: ImmutableMap<K,V>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: isEmpty()
  nameWithType: ImmutableMap<K,V>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: keySet()
  nameWithType: ImmutableMap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set of the keys in this map, in the same order that they appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet" data-throw-if-not-resolved="false">#entrySet</xref>.
  syntax:
    content: public ImmutableSet<K> keySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  id: merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
  nameWithType: ImmutableMap<K,V>.merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    - id: remappingFunction
      type: java.util.function.BiFunction<? super V,? super V,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: put(K k, V v)
  nameWithType: ImmutableMap<K,V>.put(K k, V v)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.put(K k, V v)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V put(K k, V v)
    parameters:
    - id: k
      type: K
    - id: v
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
  id: putAll(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: putAll(Map<? extends K,? extends V> map)
  nameWithType: ImmutableMap<K,V>.putAll(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.putAll(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final void putAll(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
  id: putIfAbsent(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: putIfAbsent(K key, V value)
  nameWithType: ImmutableMap<K,V>.putIfAbsent(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.putIfAbsent(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V putIfAbsent(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: remove(Object o)
  nameWithType: ImmutableMap<K,V>.remove(Object o)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.remove(Object o)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V remove(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
  id: remove(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: remove(Object key, Object value)
  nameWithType: ImmutableMap<K,V>.remove(Object key, Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.remove(Object key, Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final boolean remove(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
  id: replace(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: replace(K key, V value)
  nameWithType: ImmutableMap<K,V>.replace(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.replace(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final V replace(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
  id: replace(K,V,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: replace(K key, V oldValue, V newValue)
  nameWithType: ImmutableMap<K,V>.replace(K key, V oldValue, V newValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.replace(K key, V oldValue, V newValue)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final boolean replace(K key, V oldValue, V newValue)
    parameters:
    - id: key
      type: K
    - id: oldValue
      type: V
    - id: newValue
      type: V
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  id: replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: replaceAll(BiFunction<? super K,? super V,? extends V> function)
  nameWithType: ImmutableMap<K,V>.replaceAll(BiFunction<? super K,? super V,? extends V> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.replaceAll(BiFunction<? super K,? super V,? extends V> function)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the map unmodified.
  syntax:
    content: public final void replaceAll(BiFunction<? super K,? super V,? extends V> function)
    parameters:
    - id: function
      type: java.util.function.BiFunction<? super K,? super V,? extends V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: toString()
  nameWithType: ImmutableMap<K,V>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  langs:
  - java
  name: values()
  nameWithType: ImmutableMap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable collection of the values in this map, in the same order that they appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet" data-throw-if-not-resolved="false">#entrySet</xref>.
  syntax:
    content: public ImmutableCollection<V> values()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.ImmutableMap*
  name: ImmutableMap
  nameWithType: ImmutableMap<K,V>.ImmutableMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.ImmutableMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,? extends K>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<? super T,? extends V>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toImmutableMap*
  name: <T,K,V>toImmutableMap
  nameWithType: ImmutableMap<K,V>.<T,K,V>toImmutableMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<T,K,V>toImmutableMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BinaryOperator<V>
  spec.java:
  - uid: java.util.function.BinaryOperator
    name: BinaryOperator
    fullName: java.util.function.BinaryOperator
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.of*
  name: <K,V>of
  nameWithType: ImmutableMap<K,V>.<K,V>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.builder*
  name: <K,V>builder
  nameWithType: ImmutableMap<K,V>.<K,V>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.builderWithExpectedSize*
  name: <K,V>builderWithExpectedSize
  nameWithType: ImmutableMap<K,V>.<K,V>builderWithExpectedSize
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>builderWithExpectedSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.copyOf*
  name: <K,V>copyOf
  nameWithType: ImmutableMap<K,V>.<K,V>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.<K,V>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Map.Entry'
    name: Entry
    fullName: '? extends java.util.Map.Entry'
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put*
  name: put
  nameWithType: ImmutableMap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent*
  name: putIfAbsent
  nameWithType: ImmutableMap<K,V>.putIfAbsent
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.putIfAbsent
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace*
  name: replace
  nameWithType: ImmutableMap<K,V>.replace
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.replace
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super K,? extends V>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent*
  name: computeIfAbsent
  nameWithType: ImmutableMap<K,V>.computeIfAbsent
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.computeIfAbsent
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiFunction<? super K,? super V,? extends V>
  spec.java:
  - uid: java.util.function.BiFunction
    name: BiFunction
    fullName: java.util.function.BiFunction
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent*
  name: computeIfPresent
  nameWithType: ImmutableMap<K,V>.computeIfPresent
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.computeIfPresent
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute*
  name: compute
  nameWithType: ImmutableMap<K,V>.compute
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.compute
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiFunction<? super V,? super V,? extends V>
  spec.java:
  - uid: java.util.function.BiFunction
    name: BiFunction
    fullName: java.util.function.BiFunction
  - name: <
    fullName: <
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge*
  name: merge
  nameWithType: ImmutableMap<K,V>.merge
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.merge
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll*
  name: putAll
  nameWithType: ImmutableMap<K,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll*
  name: replaceAll
  nameWithType: ImmutableMap<K,V>.replaceAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.replaceAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove*
  name: remove
  nameWithType: ImmutableMap<K,V>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear*
  name: clear
  nameWithType: ImmutableMap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty*
  name: isEmpty
  nameWithType: ImmutableMap<K,V>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey*
  name: containsKey
  nameWithType: ImmutableMap<K,V>.containsKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.containsKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue*
  name: containsValue
  nameWithType: ImmutableMap<K,V>.containsValue
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.containsValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get*
  name: get
  nameWithType: ImmutableMap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault*
  name: getOrDefault
  nameWithType: ImmutableMap<K,V>.getOrDefault
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.getOrDefault
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet*
  name: entrySet
  nameWithType: ImmutableMap<K,V>.entrySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.entrySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet*
  name: keySet
  nameWithType: ImmutableMap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
    name: ImmutableCollection
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values*
  name: values
  nameWithType: ImmutableMap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap
    name: ImmutableSetMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap*
  name: asMultimap
  nameWithType: ImmutableMap<K,V>.asMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.asMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals*
  name: equals
  nameWithType: ImmutableMap<K,V>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode*
  name: hashCode
  nameWithType: ImmutableMap<K,V>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString*
  name: toString
  nameWithType: ImmutableMap<K,V>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,V>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<K,V>
  name: Map<K,V>
  nameWithType: Map<K,V>
  fullName: java.util.Map<K,V>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
  name: ImmutableMap.Builder<K,V>
  nameWithType: ImmutableMap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder<K,V>
- uid: '? super T,? extends K'
  name: '? super T,? extends K'
  nameWithType: '? super T,? extends K'
  fullName: '? super T,? extends K'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T,? extends V'
  name: '? super T,? extends V'
  nameWithType: '? super T,? extends V'
  fullName: '? super T,? extends V'
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  name: T,?,ImmutableMap
  nameWithType: T,?,ImmutableMap
  fullName: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMap
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: java.util.function.BinaryOperator
  name: BinaryOperator
  nameWithType: BinaryOperator
  fullName: java.util.function.BinaryOperator
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: '? extends java.util.Map.Entry'
  name: '? extends Map.Entry'
  nameWithType: '? extends Map.Entry'
  fullName: '? extends java.util.Map.Entry'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? super K,? extends V'
  name: '? super K,? extends V'
  nameWithType: '? super K,? extends V'
  fullName: '? super K,? extends V'
- uid: java.util.function.BiFunction
  name: BiFunction
  nameWithType: BiFunction
  fullName: java.util.function.BiFunction
- uid: '? super K,? super V,? extends V'
  name: '? super K,? super V,? extends V'
  nameWithType: '? super K,? super V,? extends V'
  fullName: '? super K,? super V,? extends V'
- uid: '? super V,? super V,? extends V'
  name: '? super V,? super V,? extends V'
  nameWithType: '? super V,? super V,? extends V'
  fullName: '? super V,? super V,? extends V'
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: ImmutableCollection
  nameWithType: ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap
  name: ImmutableSetMultimap
  nameWithType: ImmutableSetMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap
