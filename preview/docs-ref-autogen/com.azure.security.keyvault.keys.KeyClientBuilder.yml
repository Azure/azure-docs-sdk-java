### YamlMime:JavaType
uid: "com.azure.security.keyvault.keys.KeyClientBuilder"
fullName: "com.azure.security.keyvault.keys.KeyClientBuilder"
name: "KeyClientBuilder"
nameWithType: "KeyClientBuilder"
summary: "This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid=\"com.azure.security.keyvault.keys.KeyAsyncClient\" data-throw-if-not-resolved=\"false\">secret async client</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClient\" data-throw-if-not-resolved=\"false\">secret sync client</xref>, by calling <xref uid=\"com.azure.security.keyvault.keys.KeyClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\">buildAsyncClient</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\">buildClient</xref> respectively. It constructs an instance of the desired client.\n\nThe minimal configuration options required by <xref uid=\"com.azure.security.keyvault.keys.KeyClientBuilder\" data-throw-if-not-resolved=\"false\">KeyClientBuilder</xref> to build <xref uid=\"com.azure.security.keyvault.keys.KeyAsyncClient\" data-throw-if-not-resolved=\"false\">KeyAsyncClient</xref> are <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">vaultUrl</xref> and <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\">credential</xref>.\n\n```java\nKeyAsyncClient keyAsyncClient = new KeyClientBuilder()\n     .vaultUrl(\"https://myvault.azure.net/\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildAsyncClient();\n```\n\nThe <xref uid=\"\" data-throw-if-not-resolved=\"false\">log detail level</xref>, multiple custom <xref uid=\"\" data-throw-if-not-resolved=\"false\">policies</xref> and custom <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\">http client</xref> can be optionally configured in the <xref uid=\"com.azure.security.keyvault.keys.KeyClientBuilder\" data-throw-if-not-resolved=\"false\">KeyClientBuilder</xref>.\n\n```java\nKeyAsyncClient keyAsyncClient = new KeyClientBuilder()\n     .vaultUrl(\"https://myvault.azure.net/\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n     .httpClient(HttpClient.createDefault())\n     .buildAsyncClient();\n```\n\nAlternatively, custom <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\">http pipeline</xref> with custom <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\">HttpPipelinePolicy</xref> policies and <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">vaultUrl</xref> can be specified. It provides finer control over the construction of <xref uid=\"com.azure.security.keyvault.keys.KeyAsyncClient\" data-throw-if-not-resolved=\"false\">KeyAsyncClient</xref> and <xref uid=\"com.azure.security.keyvault.keys.KeyClient\" data-throw-if-not-resolved=\"false\">KeyClient</xref>\n\n```java\nHttpPipeline pipeline = new HttpPipelineBuilder()\n     .policies(new KeyVaultCredentialPolicy(new DefaultAzureCredentialBuilder().build()), new RetryPolicy())\n     .build();\n KeyAsyncClient keyAsyncClient = new KeyClientBuilder()\n     .pipeline(pipeline)\n     .vaultUrl(\"https://myvault.azure.net/\")\n     .buildAsyncClient();\n```\n\nThe minimal configuration options required by <xref uid=\"com.azure.security.keyvault.keys.KeyClientBuilder\" data-throw-if-not-resolved=\"false\">secretClientBuilder</xref> to build <xref uid=\"com.azure.security.keyvault.keys.KeyClient\" data-throw-if-not-resolved=\"false\">KeyClient</xref> are <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\">vaultUrl</xref> and <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\">credential</xref>.\n\n```java\nKeyClient keyClient = new KeyClientBuilder()\n     .vaultUrl(\"https://myvault.azure.net/\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildClient();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class KeyClientBuilder"
constructors:
- "com.azure.security.keyvault.keys.KeyClientBuilder.KeyClientBuilder()"
methods:
- "com.azure.security.keyvault.keys.KeyClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.buildAsyncClient()"
- "com.azure.security.keyvault.keys.KeyClientBuilder.buildClient()"
- "com.azure.security.keyvault.keys.KeyClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.configuration(com.azure.core.util.Configuration)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.credential(com.azure.core.credential.TokenCredential)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.httpClient(com.azure.core.http.HttpClient)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.pipeline(com.azure.core.http.HttpPipeline)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.retryPolicy(com.azure.core.http.policy.RetryPolicy)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.serviceVersion(com.azure.security.keyvault.keys.KeyServiceVersion)"
- "com.azure.security.keyvault.keys.KeyClientBuilder.vaultUrl(java.lang.String)"
type: "class"
metadata: {}
package: "com.azure.security.keyvault.keys"
artifact: com.azure:azure-security-keyvault-keys:4.3.0-beta.2
