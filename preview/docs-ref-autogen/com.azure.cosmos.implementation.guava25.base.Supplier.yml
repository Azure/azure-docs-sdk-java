### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.Supplier"
fullName: "com.azure.cosmos.implementation.guava25.base.Supplier<T>"
name: "Supplier<T>"
nameWithType: "Supplier<T>"
summary: "Legacy version of <xref uid=\"java.util.function.Supplier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.function.Supplier\"></xref>. Semantically, this could be a factory, generator, builder, closure, or something else entirely. No guarantees are implied by this interface.\n\nThe <xref uid=\"com.azure.cosmos.implementation.guava25.base.Suppliers\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Suppliers\"></xref> class provides common suppliers and related utilities.\n\nAs this interface extends `java.util.function.Supplier`, an instance of this type can be used as a `java.util.function.Supplier` directly. To use a `java.util.function.Supplier` in a context where a `com.google.common.base.Supplier` is needed, use `supplier::get`.\n\nSee the Guava User Guide article on [the use of `Function`][the use of _Function].\n\n\n[the use of _Function]: https://github.com/google/guava/wiki/FunctionalExplained"
syntax: "public interface Supplier<T> extends Supplier<T>"
methods:
- "com.azure.cosmos.implementation.guava25.base.Supplier.get()"
type: "interface"
typeParameters:
- name: "T"
implements:
- "<xref href=\"java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
