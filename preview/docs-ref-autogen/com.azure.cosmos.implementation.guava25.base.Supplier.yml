### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Supplier
  id: Supplier
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Supplier.get()
  langs:
  - java
  name: Supplier<T>
  nameWithType: Supplier<T>
  fullName: com.azure.cosmos.implementation.guava25.base.Supplier<T>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Legacy version of <xref uid="java.util.function.Supplier" data-throw-if-not-resolved="false">java.util.function.Supplier</xref>. Semantically, this could be a factory, generator, builder, closure, or something else entirely. No guarantees are implied by this interface.


    The <xref uid="com.azure.cosmos.implementation.guava25.base.Suppliers" data-throw-if-not-resolved="false">Suppliers</xref> class provides common suppliers and related utilities.


    As this interface extends `java.util.function.Supplier`, an instance of this type can be used as a `java.util.function.Supplier` directly. To use a `java.util.function.Supplier` in a context where a `com.google.common.base.Supplier` is needed, use `supplier::get`.


    See the Guava User Guide article on [the use of `Function`][the use of _Function].



    [the use of _Function]: https://github.com/google/guava/wiki/FunctionalExplained
  syntax:
    content: public interface Supplier<T> extends Supplier<T>
    typeParameters:
    - id: T
  implements:
  - java.util.function.Supplier<T>
- uid: com.azure.cosmos.implementation.guava25.base.Supplier.get()
  id: get()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Supplier
  langs:
  - java
  name: get()
  nameWithType: Supplier<T>.get()
  fullName: com.azure.cosmos.implementation.guava25.base.Supplier<T>.get()
  overload: com.azure.cosmos.implementation.guava25.base.Supplier.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Retrieves an instance of the appropriate type. The returned object may or may not be a new instance, depending on the implementation.
  syntax:
    content: public abstract T get()
    return:
      type: T
      description: an instance of the appropriate type
references:
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.Supplier.get*
  name: get
  nameWithType: Supplier<T>.get
  fullName: com.azure.cosmos.implementation.guava25.base.Supplier<T>.get
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.function.Supplier<T>
  name: Supplier<T>
  nameWithType: Supplier<T>
  fullName: java.util.function.Supplier<T>
- uid: java.util.function.Supplier
  name: Supplier
  nameWithType: Supplier
  fullName: java.util.function.Supplier
