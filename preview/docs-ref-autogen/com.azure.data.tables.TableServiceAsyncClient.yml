### YamlMime:ManagedReference
items:
- uid: com.azure.data.tables.TableServiceAsyncClient
  id: TableServiceAsyncClient
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables
  children:
  - com.azure.data.tables.TableServiceAsyncClient.createTable(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExists(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExistsWithResponse(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.createTableWithResponse(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.deleteTable(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.deleteTableWithResponse(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.getAccountName()
  - com.azure.data.tables.TableServiceAsyncClient.getApiVersion()
  - com.azure.data.tables.TableServiceAsyncClient.getServiceUrl()
  - com.azure.data.tables.TableServiceAsyncClient.getTableClient(java.lang.String)
  - com.azure.data.tables.TableServiceAsyncClient.listTables()
  - com.azure.data.tables.TableServiceAsyncClient.listTables(com.azure.data.tables.models.ListTablesOptions)
  langs:
  - java
  name: TableServiceAsyncClient
  nameWithType: TableServiceAsyncClient
  fullName: com.azure.data.tables.TableServiceAsyncClient
  type: Class
  package: com.azure.data.tables
  summary: Provides an asynchronous service client for accessing the Azure Tables service. The client encapsulates the URL for the Tables service endpoint and the credentials for accessing the storage or CosmosDB table API account. It provides methods to create, delete, and list tables within the account. These methods invoke REST API operations to make the requests and obtain the results that are returned. Instances of this client are obtained by calling the <xref uid="com.azure.data.tables.TableServiceClientBuilder.buildAsyncClient()" data-throw-if-not-resolved="false">TableServiceClientBuilder#buildAsyncClient()</xref> method on a <xref uid="com.azure.data.tables.TableServiceClientBuilder" data-throw-if-not-resolved="false">TableServiceClientBuilder</xref> object.
  syntax:
    content: public class TableServiceAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.data.tables.TableServiceAsyncClient.TableServiceAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.data.tables.TablesServiceVersion,com.azure.core.util.serializer.SerializerAdapter)
  id: TableServiceAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.data.tables.TablesServiceVersion,com.azure.core.util.serializer.SerializerAdapter)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: TableServiceAsyncClient(HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  nameWithType: TableServiceAsyncClient.TableServiceAsyncClient(HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  fullName: com.azure.data.tables.TableServiceAsyncClient.TableServiceAsyncClient(HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  overload: com.azure.data.tables.TableServiceAsyncClient.TableServiceAsyncClient*
  type: Constructor
  package: com.azure.data.tables
  syntax:
    content: " TableServiceAsyncClient(HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
    - id: url
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.data.tables.TablesServiceVersion
    - id: serializerAdapter
      type: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableServiceAsyncClient.createTable(java.lang.String)
  id: createTable(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: createTable(String tableName)
  nameWithType: TableServiceAsyncClient.createTable(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTable(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.createTable*
  type: Method
  package: com.azure.data.tables
  summary: Creates a table within the Tables service.
  syntax:
    content: public Mono<Void> createTable(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table to create.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExists(java.lang.String)
  id: createTableIfNotExists(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: createTableIfNotExists(String tableName)
  nameWithType: TableServiceAsyncClient.createTableIfNotExists(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExists(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExists*
  type: Method
  package: com.azure.data.tables
  summary: Creates a table within the Tables service if the table does not already exist.
  syntax:
    content: public Mono<Void> createTableIfNotExists(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table to create.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExistsWithResponse(java.lang.String)
  id: createTableIfNotExistsWithResponse(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: createTableIfNotExistsWithResponse(String tableName)
  nameWithType: TableServiceAsyncClient.createTableIfNotExistsWithResponse(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExistsWithResponse(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExistsWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Creates a table within the Tables service if the table does not already exist.
  syntax:
    content: public Mono<Response<Void>> createTableIfNotExistsWithResponse(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
- uid: com.azure.data.tables.TableServiceAsyncClient.createTableWithResponse(java.lang.String)
  id: createTableWithResponse(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: createTableWithResponse(String tableName)
  nameWithType: TableServiceAsyncClient.createTableWithResponse(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTableWithResponse(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.createTableWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Creates a table within the Tables service.
  syntax:
    content: public Mono<Response<Void>> createTableWithResponse(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
- uid: com.azure.data.tables.TableServiceAsyncClient.deleteTable(java.lang.String)
  id: deleteTable(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: deleteTable(String tableName)
  nameWithType: TableServiceAsyncClient.deleteTable(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.deleteTable(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.deleteTable*
  type: Method
  package: com.azure.data.tables
  summary: Deletes a table within the Tables service.
  syntax:
    content: public Mono<Void> deleteTable(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableServiceAsyncClient.deleteTableWithResponse(java.lang.String)
  id: deleteTableWithResponse(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: deleteTableWithResponse(String tableName)
  nameWithType: TableServiceAsyncClient.deleteTableWithResponse(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.deleteTableWithResponse(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.deleteTableWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Deletes a table within the Tables service.
  syntax:
    content: public Mono<Response<Void>> deleteTableWithResponse(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
- uid: com.azure.data.tables.TableServiceAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: TableServiceAsyncClient.getAccountName()
  fullName: com.azure.data.tables.TableServiceAsyncClient.getAccountName()
  overload: com.azure.data.tables.TableServiceAsyncClient.getAccountName*
  type: Method
  package: com.azure.data.tables
  summary: Gets the name of the account containing the table.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: The name of the account containing the table.
- uid: com.azure.data.tables.TableServiceAsyncClient.getApiVersion()
  id: getApiVersion()
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: getApiVersion()
  nameWithType: TableServiceAsyncClient.getApiVersion()
  fullName: com.azure.data.tables.TableServiceAsyncClient.getApiVersion()
  overload: com.azure.data.tables.TableServiceAsyncClient.getApiVersion*
  type: Method
  package: com.azure.data.tables
  summary: Gets the REST API version used by this client.
  syntax:
    content: public TablesServiceVersion getApiVersion()
    return:
      type: com.azure.data.tables.TablesServiceVersion
      description: The REST API version used by this client.
- uid: com.azure.data.tables.TableServiceAsyncClient.getServiceUrl()
  id: getServiceUrl()
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: getServiceUrl()
  nameWithType: TableServiceAsyncClient.getServiceUrl()
  fullName: com.azure.data.tables.TableServiceAsyncClient.getServiceUrl()
  overload: com.azure.data.tables.TableServiceAsyncClient.getServiceUrl*
  type: Method
  package: com.azure.data.tables
  summary: Gets the absolute URL for the Tables service endpoint.
  syntax:
    content: public String getServiceUrl()
    return:
      type: java.lang.String
      description: The absolute URL for the Tables service endpoint.
- uid: com.azure.data.tables.TableServiceAsyncClient.getTableClient(java.lang.String)
  id: getTableClient(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: getTableClient(String tableName)
  nameWithType: TableServiceAsyncClient.getTableClient(String tableName)
  fullName: com.azure.data.tables.TableServiceAsyncClient.getTableClient(String tableName)
  overload: com.azure.data.tables.TableServiceAsyncClient.getTableClient*
  type: Method
  package: com.azure.data.tables
  summary: Gets a <xref uid="com.azure.data.tables.TableAsyncClient" data-throw-if-not-resolved="false">TableAsyncClient</xref> instance for the provided table in the account.
  syntax:
    content: public TableAsyncClient getTableClient(String tableName)
    parameters:
    - id: tableName
      type: java.lang.String
      description: The name of the table.
    return:
      type: com.azure.data.tables.TableAsyncClient
      description: A <xref uid="com.azure.data.tables.TableAsyncClient" data-throw-if-not-resolved="false">TableAsyncClient</xref> instance for the provided table in the account.
- uid: com.azure.data.tables.TableServiceAsyncClient.listTables()
  id: listTables()
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: listTables()
  nameWithType: TableServiceAsyncClient.listTables()
  fullName: com.azure.data.tables.TableServiceAsyncClient.listTables()
  overload: com.azure.data.tables.TableServiceAsyncClient.listTables*
  type: Method
  package: com.azure.data.tables
  summary: Lists all tables within the account.
  syntax:
    content: public PagedFlux<TableItem> listTables()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableItem>
      description: A paged reactive result containing all tables within the account.
- uid: com.azure.data.tables.TableServiceAsyncClient.listTables(com.azure.data.tables.models.ListTablesOptions)
  id: listTables(com.azure.data.tables.models.ListTablesOptions)
  artifact: com.azure:azure-data-tables:12.0.0-beta.2
  parent: com.azure.data.tables.TableServiceAsyncClient
  langs:
  - java
  name: listTables(ListTablesOptions options)
  nameWithType: TableServiceAsyncClient.listTables(ListTablesOptions options)
  fullName: com.azure.data.tables.TableServiceAsyncClient.listTables(ListTablesOptions options)
  overload: com.azure.data.tables.TableServiceAsyncClient.listTables*
  type: Method
  package: com.azure.data.tables
  summary: Lists tables using the parameters in the provided options. If the \`filter\` parameter in the options is set, only tables matching the filter will be returned. If the \`top\` parameter is set, the number of returned tables will be limited to that value.
  syntax:
    content: public PagedFlux<TableItem> listTables(ListTablesOptions options)
    parameters:
    - id: options
      type: com.azure.data.tables.models.ListTablesOptions
      description: The `filter` and `top` OData query options to apply to this operation.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableItem>
      description: A paged reactive result containing matching tables within the account.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.data.tables.TablesServiceVersion
  name: TablesServiceVersion
  nameWithType: TablesServiceVersion
  fullName: com.azure.data.tables.TablesServiceVersion
- uid: com.azure.core.util.serializer.SerializerAdapter
  spec.java:
  - uid: com.azure.core.util.serializer.SerializerAdapter
    name: SerializerAdapter
    fullName: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableServiceAsyncClient.TableServiceAsyncClient*
  name: TableServiceAsyncClient
  nameWithType: TableServiceAsyncClient.TableServiceAsyncClient
  fullName: com.azure.data.tables.TableServiceAsyncClient.TableServiceAsyncClient
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: TableServiceAsyncClient.getAccountName
  fullName: com.azure.data.tables.TableServiceAsyncClient.getAccountName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.getServiceUrl*
  name: getServiceUrl
  nameWithType: TableServiceAsyncClient.getServiceUrl
  fullName: com.azure.data.tables.TableServiceAsyncClient.getServiceUrl
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.getApiVersion*
  name: getApiVersion
  nameWithType: TableServiceAsyncClient.getApiVersion
  fullName: com.azure.data.tables.TableServiceAsyncClient.getApiVersion
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient
  name: TableAsyncClient
  nameWithType: TableAsyncClient
  fullName: com.azure.data.tables.TableAsyncClient
- uid: com.azure.data.tables.TableServiceAsyncClient.getTableClient*
  name: getTableClient
  nameWithType: TableServiceAsyncClient.getTableClient
  fullName: com.azure.data.tables.TableServiceAsyncClient.getTableClient
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableServiceAsyncClient.createTable*
  name: createTable
  nameWithType: TableServiceAsyncClient.createTable
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTable
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableServiceAsyncClient.createTableWithResponse*
  name: createTableWithResponse
  nameWithType: TableServiceAsyncClient.createTableWithResponse
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTableWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExists*
  name: createTableIfNotExists
  nameWithType: TableServiceAsyncClient.createTableIfNotExists
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExists
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExistsWithResponse*
  name: createTableIfNotExistsWithResponse
  nameWithType: TableServiceAsyncClient.createTableIfNotExistsWithResponse
  fullName: com.azure.data.tables.TableServiceAsyncClient.createTableIfNotExistsWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.deleteTable*
  name: deleteTable
  nameWithType: TableServiceAsyncClient.deleteTable
  fullName: com.azure.data.tables.TableServiceAsyncClient.deleteTable
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableServiceAsyncClient.deleteTableWithResponse*
  name: deleteTableWithResponse
  nameWithType: TableServiceAsyncClient.deleteTableWithResponse
  fullName: com.azure.data.tables.TableServiceAsyncClient.deleteTableWithResponse
  package: com.azure.data.tables
- uid: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableItem
    name: TableItem
    fullName: com.azure.data.tables.models.TableItem
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableServiceAsyncClient.listTables*
  name: listTables
  nameWithType: TableServiceAsyncClient.listTables
  fullName: com.azure.data.tables.TableServiceAsyncClient.listTables
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.ListTablesOptions
  name: ListTablesOptions
  nameWithType: ListTablesOptions
  fullName: com.azure.data.tables.models.ListTablesOptions
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.data.tables.models.TableItem
  name: TableItem
  nameWithType: TableItem
  fullName: com.azure.data.tables.models.TableItem
