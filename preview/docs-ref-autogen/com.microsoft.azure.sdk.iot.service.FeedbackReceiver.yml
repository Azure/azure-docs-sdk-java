### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  id: FeedbackReceiver
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service
  children:
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,java.lang.String)
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.close()
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.closeAsync()
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.open()
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.openAsync()
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive()
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive(long)
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync()
  - com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync(long)
  langs:
  - java
  name: FeedbackReceiver
  nameWithType: FeedbackReceiver
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  type: Class
  package: com.microsoft.azure.sdk.iot.service
  summary: FeedbackReceiver is a specialized receiver whose ReceiveAsync method returns a FeedbackBatch instead of a Message.
  syntax:
    content: public class FeedbackReceiver extends Receiver
  inheritance:
  - java.lang.Object
  - com.microsoft.azure.sdk.iot.service.Receiver
  inheritedMembers:
  - com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()
  - com.microsoft.azure.sdk.iot.service.Receiver.openAsync()
  - com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()
  - com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  id: FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  nameWithType: FeedbackReceiver.FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service
  summary: Constructor to verify initialization parameters Create instance of AmqpReceive
  syntax:
    content: public FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
    parameters:
    - id: hostName
      type: java.lang.String
      description: The iot hub host name
    - id: userName
      type: java.lang.String
      description: The iot hub user name
    - id: sasToken
      type: java.lang.String
      description: The iot hub SAS token for the given device
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: protocol to be used
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  id: FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  nameWithType: FeedbackReceiver.FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service
  summary: Constructor to verify initialization parameters Create instance of AmqpReceive
  syntax:
    content: public FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
    parameters:
    - id: hostName
      type: java.lang.String
      description: The iot hub host name
    - id: userName
      type: java.lang.String
      description: The iot hub user name
    - id: sasToken
      type: java.lang.String
      description: The iot hub SAS token for the given device
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: protocol to be used
    - id: proxyOptions
      type: com.microsoft.azure.sdk.iot.service.ProxyOptions
      description: the proxy options to tunnel through, if a proxy should be used.
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,java.lang.String)
  id: FeedbackReceiver(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, String deviceId)
  nameWithType: FeedbackReceiver.FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, String deviceId)
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, String deviceId)
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service
  summary: Constructor to verify initialization parameters Create instance of AmqpReceive
  syntax:
    content: public FeedbackReceiver(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, String deviceId)
    parameters:
    - id: hostName
      type: java.lang.String
      description: The iot hub host name
    - id: userName
      type: java.lang.String
      description: The iot hub user name
    - id: sasToken
      type: java.lang.String
      description: The iot hub SAS token for the given device
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: The iot hub protocol name
    - id: deviceId
      type: java.lang.String
      description: The device id
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.close()
  id: close()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: close()
  nameWithType: FeedbackReceiver.close()
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.close()
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.close*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Close AmqpReceive object
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the input AmqpReceive object is null
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.closeAsync()
  id: closeAsync()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: closeAsync()
  nameWithType: FeedbackReceiver.closeAsync()
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.closeAsync()
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.closeAsync*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Async wrapper for close() operation
  syntax:
    content: public CompletableFuture<Void> closeAsync()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: The future object for the requested operation
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.open()
  id: open()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: open()
  nameWithType: FeedbackReceiver.open()
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.open()
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.open*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Open AmqpReceive object
  syntax:
    content: public void open()
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the input AmqpReceive object is null
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.openAsync()
  id: openAsync()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: openAsync()
  nameWithType: FeedbackReceiver.openAsync()
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.openAsync()
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.openAsync*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Async wrapper for open() operation
  syntax:
    content: public CompletableFuture<Void> openAsync()
    return:
      type: java.util.concurrent.CompletableFuture<java.lang.Void>
      description: The future object for the requested operation
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive()
  id: receive()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: receive()
  nameWithType: FeedbackReceiver.receive()
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive()
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Receive FeedbackBatch with default timeout
  syntax:
    content: public FeedbackBatch receive()
    return:
      type: com.microsoft.azure.sdk.iot.service.FeedbackBatch
      description: The received FeedbackBatch object
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the input AmqpReceive object is null
  - type: java.lang.InterruptedException
    description: This exception is thrown if the input AmqpReceive object is null
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive(long)
  id: receive(long)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: receive(long timeoutMs)
  nameWithType: FeedbackReceiver.receive(long timeoutMs)
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive(long timeoutMs)
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Receive FeedbackBatch with specific timeout
  syntax:
    content: public FeedbackBatch receive(long timeoutMs)
    parameters:
    - id: timeoutMs
      type: long
      description: The timeout in milliseconds
    return:
      type: com.microsoft.azure.sdk.iot.service.FeedbackBatch
      description: The received FeedbackBatch object
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the input AmqpReceive object is null
  - type: java.lang.InterruptedException
    description: This exception is thrown if the input AmqpReceive object is null
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync()
  id: receiveAsync()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: receiveAsync()
  nameWithType: FeedbackReceiver.receiveAsync()
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync()
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Async wrapper for receive() operation with default timeout
  syntax:
    content: public CompletableFuture<FeedbackBatch> receiveAsync()
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.sdk.iot.service.FeedbackBatch>
      description: The future object for the requested operation
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync(long)
  id: receiveAsync(long)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.FeedbackReceiver
  langs:
  - java
  name: receiveAsync(long timeoutMs)
  nameWithType: FeedbackReceiver.receiveAsync(long timeoutMs)
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync(long timeoutMs)
  overload: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync*
  type: Method
  package: com.microsoft.azure.sdk.iot.service
  summary: Async wrapper for receive() operation with specific timeout
  syntax:
    content: public CompletableFuture<FeedbackBatch> receiveAsync(long timeoutMs)
    parameters:
    - id: timeoutMs
      type: long
    return:
      type: java.util.concurrent.CompletableFuture<com.microsoft.azure.sdk.iot.service.FeedbackBatch>
      description: The future object for the requested operation
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
  name: IotHubServiceClientProtocol
  nameWithType: IotHubServiceClientProtocol
  fullName: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver*
  name: FeedbackReceiver
  nameWithType: FeedbackReceiver.FeedbackReceiver
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.FeedbackReceiver
  package: com.microsoft.azure.sdk.iot.service
- uid: com.microsoft.azure.sdk.iot.service.ProxyOptions
  name: ProxyOptions
  nameWithType: ProxyOptions
  fullName: com.microsoft.azure.sdk.iot.service.ProxyOptions
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.open*
  name: open
  nameWithType: FeedbackReceiver.open
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.open
  package: com.microsoft.azure.sdk.iot.service
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.close*
  name: close
  nameWithType: FeedbackReceiver.close
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.close
  package: com.microsoft.azure.sdk.iot.service
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: com.microsoft.azure.sdk.iot.service.FeedbackBatch
  name: FeedbackBatch
  nameWithType: FeedbackBatch
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackBatch
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive*
  name: receive
  nameWithType: FeedbackReceiver.receive
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receive
  package: com.microsoft.azure.sdk.iot.service
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: java.util.concurrent.CompletableFuture<java.lang.Void>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.openAsync*
  name: openAsync
  nameWithType: FeedbackReceiver.openAsync
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.openAsync
  package: com.microsoft.azure.sdk.iot.service
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.closeAsync*
  name: closeAsync
  nameWithType: FeedbackReceiver.closeAsync
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.closeAsync
  package: com.microsoft.azure.sdk.iot.service
- uid: java.util.concurrent.CompletableFuture<com.microsoft.azure.sdk.iot.service.FeedbackBatch>
  spec.java:
  - uid: java.util.concurrent.CompletableFuture
    name: CompletableFuture
    fullName: java.util.concurrent.CompletableFuture
  - name: <
    fullName: <
  - uid: com.microsoft.azure.sdk.iot.service.FeedbackBatch
    name: FeedbackBatch
    fullName: com.microsoft.azure.sdk.iot.service.FeedbackBatch
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync*
  name: receiveAsync
  nameWithType: FeedbackReceiver.receiveAsync
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackReceiver.receiveAsync
  package: com.microsoft.azure.sdk.iot.service
- uid: com.microsoft.azure.sdk.iot.service.Receiver
  name: Receiver
  nameWithType: Receiver
  fullName: com.microsoft.azure.sdk.iot.service.Receiver
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.microsoft.azure.sdk.iot.service.Receiver.openAsync()
  name: Receiver.openAsync()
  nameWithType: Receiver.openAsync()
  fullName: com.microsoft.azure.sdk.iot.service.Receiver.openAsync()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()
  name: Receiver.receiveAsync()
  nameWithType: Receiver.receiveAsync()
  fullName: com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()
- uid: com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()
  name: Receiver.closeAsync()
  nameWithType: Receiver.closeAsync()
  fullName: com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long)
  name: Receiver.receiveAsync(long)
  nameWithType: Receiver.receiveAsync(long)
  fullName: com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long)
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.concurrent.CompletableFuture
  name: CompletableFuture
  nameWithType: CompletableFuture
  fullName: java.util.concurrent.CompletableFuture
