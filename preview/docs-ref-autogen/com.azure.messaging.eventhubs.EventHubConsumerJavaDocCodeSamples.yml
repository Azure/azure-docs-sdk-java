### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples
  id: EventHubConsumerJavaDocCodeSamples
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receive()
  - com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receiveBackpressure()
  href: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.yml
  langs:
  - java
  name: EventHubConsumerJavaDocCodeSamples
  nameWithType: EventHubConsumerJavaDocCodeSamples
  fullName: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/samples/java/com/azure/messaging/eventhubs/EventHubConsumerJavaDocCodeSamples.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/samples/java/com/azure/messaging/eventhubs/EventHubConsumerJavaDocCodeSamples.java
    startLine: 15
  package: com.azure.messaging.eventhubs
  summary: "<p>Code snippets demonstrating various <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> scenarios. </p>"
  syntax:
    content: public class EventHubConsumerJavaDocCodeSamples
  inheritance:
  - java.lang.Object
- uid: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receive()
  id: receive()
  parent: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples
  href: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.yml
  langs:
  - java
  name: receive()
  nameWithType: EventHubConsumerJavaDocCodeSamples.receive()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receive()
  overload: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receive*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/samples/java/com/azure/messaging/eventhubs/EventHubConsumerJavaDocCodeSamples.java
    startLine: 21
  package: com.azure.messaging.eventhubs
  summary: "<p>Receives event data </p>"
  syntax:
    content: public void receive()
- uid: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receiveBackpressure()
  id: receiveBackpressure()
  parent: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples
  href: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.yml
  langs:
  - java
  name: receiveBackpressure()
  nameWithType: EventHubConsumerJavaDocCodeSamples.receiveBackpressure()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receiveBackpressure()
  overload: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receiveBackpressure*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/samples/java/com/azure/messaging/eventhubs/EventHubConsumerJavaDocCodeSamples.java
    startLine: 42
  package: com.azure.messaging.eventhubs
  summary: "<p>Receives event data with back pressure. </p>"
  syntax:
    content: public void receiveBackpressure()
references:
- uid: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receive*
  name: receive
  nameWithType: EventHubConsumerJavaDocCodeSamples.receive
  fullName: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receive
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receiveBackpressure*
  name: receiveBackpressure
  nameWithType: EventHubConsumerJavaDocCodeSamples.receiveBackpressure
  fullName: com.azure.messaging.eventhubs.EventHubConsumerJavaDocCodeSamples.receiveBackpressure
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubAsyncClient
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubAsyncClient.yml
  name: EventHubAsyncClient
  nameWithType: EventHubAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubAsyncClient
  type: Class
  summary: "<p>The main point of interaction with Azure Event Hubs, the client offers a connection to a specific Event Hub within the Event Hubs namespace and offers operations for sending event data, receiving events, and inspecting the connected Event Hub.</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hubs namespace connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionString::string-string}</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hub instance connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionstring::string}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubAsyncClient
- uid: com.azure.messaging.eventhubs.EventHubClientBuilder
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubClientBuilder.yml
  name: EventHubClientBuilder
  nameWithType: EventHubClientBuilder
  fullName: com.azure.messaging.eventhubs.EventHubClientBuilder
  type: Class
  summary: "<p>This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref>. Calling <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.buildAsyncClient()\" data-throw-if-not-resolved=\"false\">buildAsyncClient()</xref> constructs an instant of the client.</p>\r\n<p>The client requires credentials or a connection string to perform operations against Azure Event Hubs. Setting credentials by using <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.connectionString(String)\" data-throw-if-not-resolved=\"false\">connectionString(String)</xref>, <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.connectionString(String,String)\" data-throw-if-not-resolved=\"false\">connectionString(String, String)</xref>, or <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.credential(String,String,TokenCredential)\" data-throw-if-not-resolved=\"false\">credential(String, String, TokenCredential)</xref>, is required in order to construct an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref>. </p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hubs namespace connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionString::string-string}</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hub instance connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionstring::string}</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hub with no <xref uid=\"\" data-throw-if-not-resolved=\"false\">Retry</xref>, different timeout and new Scheduler</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.retry-timeout-scheduler}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubClientBuilder
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumer
