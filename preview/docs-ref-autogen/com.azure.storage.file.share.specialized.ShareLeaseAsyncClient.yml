### YamlMime:JavaType
uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient"
fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient"
name: "ShareLeaseAsyncClient"
nameWithType: "ShareLeaseAsyncClient"
summary: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"files\"></xref>. This client acts as a supplement to that client and only handles leasing operations.\n\n**Instantiating a ShareLeaseAsyncClient**\n\n```java\nShareLeaseAsyncClient fileLeaseAsyncClient = new ShareLeaseClientBuilder()\n     .fileAsyncClient(shareFileAsyncClient)\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.specialized.ShareLeaseClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client.\n\nFor more information about leasing see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/lease-file"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ShareLeaseAsyncClient"
methods:
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.acquireLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.acquireLease()"
  name: "acquireLease()"
  nameWithType: "ShareLeaseAsyncClient.acquireLease()"
  summary: "Acquires an infinite lease for write and delete operations.\n\n**Code Samples**\n\n```java\nclient.acquireLease().subscribe(response -> System.out.printf(\"Lease ID is %s%n\", response));\n```"
  syntax: "public Mono<String> acquireLease()"
  returns:
    description: "A reactive response containing the lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.acquireLeaseWithResponse()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.acquireLeaseWithResponse()"
  name: "acquireLeaseWithResponse()"
  nameWithType: "ShareLeaseAsyncClient.acquireLeaseWithResponse()"
  summary: "Acquires an infinite lease for write and delete operations.\n\n**Code Samples**\n\n```java\nclient.acquireLeaseWithResponse().subscribe(response ->\n     System.out.printf(\"Lease ID is %s%n\", response.getValue()));\n```"
  syntax: "public Mono<Response<String>> acquireLeaseWithResponse()"
  returns:
    description: "A reactive response containing the lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.acquireLeaseWithResponse(com.azure.storage.file.share.options.ShareAcquireLeaseOptions)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.acquireLeaseWithResponse(ShareAcquireLeaseOptions options)"
  name: "acquireLeaseWithResponse(ShareAcquireLeaseOptions options)"
  nameWithType: "ShareLeaseAsyncClient.acquireLeaseWithResponse(ShareAcquireLeaseOptions options)"
  summary: "Acquires a lease for write and delete operations. Note: Share files only support infinite lease.\n\n**Code Samples**\n\n```java\nclient.acquireLeaseWithResponse(new ShareAcquireLeaseOptions().setDuration(10)).subscribe(response ->\n     System.out.printf(\"Lease ID is %s%n\", response.getValue()));\n```"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareAcquireLeaseOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAcquireLeaseOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareAcquireLeaseOptions?alt=com.azure.storage.file.share.options.ShareAcquireLeaseOptions&text=ShareAcquireLeaseOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> acquireLeaseWithResponse(ShareAcquireLeaseOptions options)"
  returns:
    description: "A reactive response containing the lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.breakLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.breakLease()"
  name: "breakLease()"
  nameWithType: "ShareLeaseAsyncClient.breakLease()"
  summary: "Breaks the previously acquired lease, if it exists. Leases will break immediately.\n\n**Code Samples**\n\n```java\nclient.breakLease().subscribe(response ->\n     System.out.println(\"The lease has been successfully broken\"));\n```"
  syntax: "public Mono<Void> breakLease()"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.breakLeaseWithResponse()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.breakLeaseWithResponse()"
  name: "breakLeaseWithResponse()"
  nameWithType: "ShareLeaseAsyncClient.breakLeaseWithResponse()"
  summary: "Breaks the previously acquired lease, if it exists.\n\nFor files, leases will break immediately.\n\nFor shares, leases will break after the specified duration.\n\n**Code Samples**\n\n```java\nclient.breakLeaseWithResponse().subscribe(response ->\n     System.out.println(\"The lease has been successfully broken\"));\n```"
  syntax: "public Mono<Response<Void>> breakLeaseWithResponse()"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.breakLeaseWithResponse(com.azure.storage.file.share.options.ShareBreakLeaseOptions)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.breakLeaseWithResponse(ShareBreakLeaseOptions options)"
  name: "breakLeaseWithResponse(ShareBreakLeaseOptions options)"
  nameWithType: "ShareLeaseAsyncClient.breakLeaseWithResponse(ShareBreakLeaseOptions options)"
  summary: "Breaks the previously acquired lease, if it exists.\n\nFor files, leases will break immediately.\n\nFor shares, leases will break after the specified duration.\n\n**Code Samples**\n\n```java\nclient.breakLeaseWithResponse(new ShareBreakLeaseOptions().setBreakPeriod(Duration.ofSeconds(25)))\n     .subscribe(response -> System.out.println(\"The lease has been successfully broken\"));\n```"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareBreakLeaseOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareBreakLeaseOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareBreakLeaseOptions?alt=com.azure.storage.file.share.options.ShareBreakLeaseOptions&text=ShareBreakLeaseOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> breakLeaseWithResponse(ShareBreakLeaseOptions options)"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.changeLease(java.lang.String)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.changeLease(String proposedId)"
  name: "changeLease(String proposedId)"
  nameWithType: "ShareLeaseAsyncClient.changeLease(String proposedId)"
  summary: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nclient.changeLease(\"proposedId\").subscribe(response -> System.out.printf(\"Changed lease ID is %s%n\", response));\n```"
  parameters:
  - description: "A new lease ID in a valid GUID format."
    name: "proposedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> changeLease(String proposedId)"
  returns:
    description: "A reactive response containing the new lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.changeLeaseWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.changeLeaseWithResponse(String proposedId)"
  name: "changeLeaseWithResponse(String proposedId)"
  nameWithType: "ShareLeaseAsyncClient.changeLeaseWithResponse(String proposedId)"
  summary: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nclient.changeLeaseWithResponse(\"proposedId\").subscribe(response ->\n     System.out.printf(\"Changed lease ID is %s%n\", response.getValue()));\n```"
  parameters:
  - description: "A new lease ID in a valid GUID format."
    name: "proposedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> changeLeaseWithResponse(String proposedId)"
  returns:
    description: "A reactive response containing the new lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "ShareLeaseAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getFileUrl()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getFileUrl()"
  name: "getFileUrl()"
  nameWithType: "ShareLeaseAsyncClient.getFileUrl()"
  summary: "\n\n**Deprecated.** Please use <xref uid=\"com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getResourceUrl()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getResourceUrl()\"></xref>"
  syntax: "@Deprecated\npublic String getFileUrl()"
  returns:
    description: "URL of the lease client."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getLeaseId()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getLeaseId()"
  name: "getLeaseId()"
  nameWithType: "ShareLeaseAsyncClient.getLeaseId()"
  summary: "Get the lease ID for this lease."
  syntax: "public String getLeaseId()"
  returns:
    description: "the lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getResourceUrl()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.getResourceUrl()"
  name: "getResourceUrl()"
  nameWithType: "ShareLeaseAsyncClient.getResourceUrl()"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> of the lease client.\n\nThe lease will either be a share or share file URL depending on which the lease client is associated."
  syntax: "public String getResourceUrl()"
  returns:
    description: "URL of the lease client."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.releaseLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.releaseLease()"
  name: "releaseLease()"
  nameWithType: "ShareLeaseAsyncClient.releaseLease()"
  summary: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nclient.releaseLease().subscribe(response -> System.out.println(\"Completed release lease\"));\n```"
  syntax: "public Mono<Void> releaseLease()"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.releaseLeaseWithResponse()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.releaseLeaseWithResponse()"
  name: "releaseLeaseWithResponse()"
  nameWithType: "ShareLeaseAsyncClient.releaseLeaseWithResponse()"
  summary: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nclient.releaseLeaseWithResponse().subscribe(response ->\n     System.out.printf(\"Release lease completed with status %d%n\", response.getStatusCode()));\n```"
  syntax: "public Mono<Response<Void>> releaseLeaseWithResponse()"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLease()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLease()"
  name: "renewLease()"
  nameWithType: "ShareLeaseAsyncClient.renewLease()"
  summary: "Renews the previously acquired lease on a share.\n\n**Code Samples**\n\n```java\nclient.renewLease().subscribe(response -> System.out.printf(\"Renewed lease ID is %s%n\", response));\n```"
  syntax: "public Mono<String> renewLease()"
  returns:
    description: "A reactive response containing the renewed lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLeaseWithResponse()"
  fullName: "com.azure.storage.file.share.specialized.ShareLeaseAsyncClient.renewLeaseWithResponse()"
  name: "renewLeaseWithResponse()"
  nameWithType: "ShareLeaseAsyncClient.renewLeaseWithResponse()"
  summary: "Renews the previously acquired lease on a share.\n\n**Code Samples**\n\n```java\nclient.renewLeaseWithResponse().subscribe(response ->\n     System.out.printf(\"Renewed lease ID is %s%n\", response.getValue()));\n```"
  syntax: "public Mono<Response<String>> renewLeaseWithResponse()"
  returns:
    description: "A reactive response containing the renewed lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
metadata: {}
package: "com.azure.storage.file.share.specialized"
artifact: com.azure:azure-storage-file-share:12.14.0-beta.1
