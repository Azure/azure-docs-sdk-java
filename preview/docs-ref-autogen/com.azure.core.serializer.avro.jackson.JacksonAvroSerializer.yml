### YamlMime:JavaType
uid: "com.azure.core.serializer.avro.jackson.JacksonAvroSerializer"
fullName: "com.azure.core.serializer.avro.jackson.JacksonAvroSerializer"
name: "JacksonAvroSerializer"
nameWithType: "JacksonAvroSerializer"
summary: "Jackson Avro based implementation of the <xref uid=\"com.azure.core.experimental.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> interface."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class JacksonAvroSerializer implements ObjectSerializer"
methods:
- uid: "com.azure.core.serializer.avro.jackson.JacksonAvroSerializer.<S>serialize(S,java.lang.Object)"
  fullName: "com.azure.core.serializer.avro.jackson.JacksonAvroSerializer.<S>serialize(S stream, Object value)"
  name: "<S>serialize(S stream, Object value)"
  nameWithType: "JacksonAvroSerializer.<S>serialize(S stream, Object value)"
  parameters:
  - name: "stream"
    type: "<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />"
  - name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<S> <S>serialize(S stream, Object value)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.serializer.avro.jackson.JacksonAvroSerializer.<T>deserialize(java.io.InputStream,java.lang.Class<T>)"
  fullName: "com.azure.core.serializer.avro.jackson.JacksonAvroSerializer.<T>deserialize(InputStream stream, Class<T> clazz)"
  name: "<T>deserialize(InputStream stream, Class<T> clazz)"
  nameWithType: "JacksonAvroSerializer.<T>deserialize(InputStream stream, Class<T> clazz)"
  parameters:
  - name: "stream"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>deserialize(InputStream stream, Class<T> clazz)"
  returns:
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Jackson Avro based implementation of the <xref uid=\"com.azure.core.experimental.serializer.ObjectSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectSerializer\"></xref> interface."
implements:
- "<xref href=\"com.azure.core.experimental.serializer.ObjectSerializer?alt=com.azure.core.experimental.serializer.ObjectSerializer&text=ObjectSerializer\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.core.serializer.avro.jackson"
artifact: com.azure:azure-core-serializer-avro-jackson:1.0.0-beta.1
