### YamlMime:JavaType
uid: "com.azure.core.annotation.QueryParam"
fullName: "com.azure.core.annotation.QueryParam"
name: "QueryParam"
nameWithType: "QueryParam"
summary: "Annotation for query parameters to be appended to a REST API Request URI."
syntax: "public interface QueryParam implements Annotation"
methods:
- uid: "com.azure.core.annotation.QueryParam.encoded()"
  fullName: "com.azure.core.annotation.QueryParam.encoded()"
  name: "encoded()"
  nameWithType: "QueryParam.encoded()"
  summary: "A value true for this argument indicates that value of <xref uid=\"com.azure.core.annotation.QueryParam.value()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryParam#value()\"></xref> is already encoded hence engine should not encode it, by default value will be encoded."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean encoded()"
  desc: "A value true for this argument indicates that value of <xref uid=\"com.azure.core.annotation.QueryParam.value()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryParam#value()\"></xref> is already encoded hence engine should not encode it, by default value will be encoded."
  returns:
    description: "Whether or not this query parameter is already encoded."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.annotation.QueryParam.multipleQueryParams()"
  fullName: "com.azure.core.annotation.QueryParam.multipleQueryParams()"
  name: "multipleQueryParams()"
  nameWithType: "QueryParam.multipleQueryParams()"
  summary: "A value true for this argument indicates that value of <xref uid=\"com.azure.core.annotation.QueryParam.value()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryParam#value()\"></xref> should not be converted to Json in case it is an array but instead sent as multiple values with same parameter name."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean multipleQueryParams()"
  desc: "A value true for this argument indicates that value of <xref uid=\"com.azure.core.annotation.QueryParam.value()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QueryParam#value()\"></xref> should not be converted to Json in case it is an array but instead sent as multiple values with same parameter name."
  returns:
    description: "Whether or not this query parameter list values should be sent as individual query\n params or as a single Json."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.annotation.QueryParam.value()"
  fullName: "com.azure.core.annotation.QueryParam.value()"
  name: "value()"
  nameWithType: "QueryParam.value()"
  summary: "The name of the variable in the endpoint uri template which will be replaced with the value of the parameter annotated with this annotation."
  modifiers:
  - "abstract"
  syntax: "public abstract String value()"
  desc: "The name of the variable in the endpoint uri template which will be replaced with the value of the parameter annotated with this annotation."
  returns:
    description: "The name of the variable in the endpoint uri template which will be replaced with the\n     value of the parameter annotated with this annotation."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Annotation for query parameters to be appended to a REST API Request URI.\n\n**Example 1:**\n\n```java\n@GET(\"subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/resources\")\n Single> listByResourceGroup(@PathParam(\"resourceGroupName\") String\n resourceGroupName, @PathParam(\"subscriptionId\") String subscriptionId, @QueryParam(\"$filter\") String\n filter, @QueryParam(\"$expand\") String expand, @QueryParam(\"$top\") Integer top, @QueryParam(\"api-version\") String\n apiVersion);\n```\n\nThe value of parameters filter, expand, top, apiVersion will be encoded and encoded value will be used to replace the corresponding path segment \\{$filter\\}, \\{$expand\\}, \\{$top\\}, \\{api-version\\} respectively.\n\n**Example 2:** (A use case where PathParam.encoded=true will be used)\n\nIt is possible that, a path segment variable can be used to represent sub path:\n\n```java\n@GET(\"http://wq.com/foo/{subpath}/values\")\n  String getValues(@PathParam(\"subpath\") String param, @QueryParam(\"connectionString\") String connectionString);\n```\n\nIn this case, if consumer pass \"a=b\" as the value for query then the resolved url looks like: \"`http://wq.com/foo/paramblah/values?connectionString=a%3Db`\"\n\nFor such cases the encoded attribute can be used:\n\n```java\n@GET(\"http://wq.com/foo/{subpath}/values\")\n  String getValues(@PathParam(\"subpath\") String param, @QueryParam(\"query\", encoded = true) String query);\n```\n\nIn this case, if consumer pass \"a=b\" as the value for param1 then the resolved url looks as expected: \"`http://wq.com/foo/paramblah/values?connectionString=a=b`\"\n\n**Example 3:**\n\n```java\n@GET(\"http://wq.com/foo/multiple/params\")\n  String multipleParams(@QueryParam(\"avoid\", multipleQueryParams = true) List<String> avoid);\n```\n\nThe value of parameter avoid would look like this: \"`http://wq.com/foo/multiple/params?avoid%3Dtest1&avoid%3Dtest2&avoid%3Dtest3`\""
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.core.annotation"
artifact: com.azure:azure-core:1.22.0-beta.1
