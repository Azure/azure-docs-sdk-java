### YamlMime:JavaType
uid: "com.azure.resourcemanager.nginx.NginxManager"
fullName: "com.azure.resourcemanager.nginx.NginxManager"
name: "NginxManager"
nameWithType: "NginxManager"
summary: "Entry point to Nginx<wbr>Manager."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class NginxManager"
methods:
- uid: "com.azure.resourcemanager.nginx.NginxManager.authenticate(com.azure.core.credential.TokenCredential,com.azure.core.management.profile.AzureProfile)"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.authenticate(TokenCredential credential, AzureProfile profile)"
  name: "authenticate(TokenCredential credential, AzureProfile profile)"
  nameWithType: "NginxManager.authenticate(TokenCredential credential, AzureProfile profile)"
  summary: "Creates an instance of Nginx service API entry point."
  modifiers:
  - "static"
  parameters:
  - description: "the credential to use."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
  - description: "the Azure profile for client."
    name: "profile"
    type: "<xref href=\"com.azure.core.management.profile.AzureProfile?alt=com.azure.core.management.profile.AzureProfile&text=AzureProfile\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static NginxManager authenticate(TokenCredential credential, AzureProfile profile)"
  desc: "Creates an instance of Nginx service API entry point."
  returns:
    description: "the Nginx service API instance."
    type: "<xref href=\"com.azure.resourcemanager.nginx.NginxManager?alt=com.azure.resourcemanager.nginx.NginxManager&text=NginxManager\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.authenticate(com.azure.core.http.HttpPipeline,com.azure.core.management.profile.AzureProfile)"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.authenticate(HttpPipeline httpPipeline, AzureProfile profile)"
  name: "authenticate(HttpPipeline httpPipeline, AzureProfile profile)"
  nameWithType: "NginxManager.authenticate(HttpPipeline httpPipeline, AzureProfile profile)"
  summary: "Creates an instance of Nginx service API entry point."
  modifiers:
  - "static"
  parameters:
  - description: "the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> configured with Azure authentication credential."
    name: "httpPipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "the Azure profile for client."
    name: "profile"
    type: "<xref href=\"com.azure.core.management.profile.AzureProfile?alt=com.azure.core.management.profile.AzureProfile&text=AzureProfile\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static NginxManager authenticate(HttpPipeline httpPipeline, AzureProfile profile)"
  desc: "Creates an instance of Nginx service API entry point."
  returns:
    description: "the Nginx service API instance."
    type: "<xref href=\"com.azure.resourcemanager.nginx.NginxManager?alt=com.azure.resourcemanager.nginx.NginxManager&text=NginxManager\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.certificates()"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.certificates()"
  name: "certificates()"
  nameWithType: "NginxManager.certificates()"
  summary: "Gets the resource collection API of Certificates."
  syntax: "public Certificates certificates()"
  desc: "Gets the resource collection API of Certificates. It manages NginxCertificate."
  returns:
    description: "Resource collection API of Certificates."
    type: "<xref href=\"com.azure.resourcemanager.nginx.models.Certificates?alt=com.azure.resourcemanager.nginx.models.Certificates&text=Certificates\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.configurations()"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.configurations()"
  name: "configurations()"
  nameWithType: "NginxManager.configurations()"
  summary: "Gets the resource collection API of Configurations."
  syntax: "public Configurations configurations()"
  desc: "Gets the resource collection API of Configurations. It manages NginxConfiguration."
  returns:
    description: "Resource collection API of Configurations."
    type: "<xref href=\"com.azure.resourcemanager.nginx.models.Configurations?alt=com.azure.resourcemanager.nginx.models.Configurations&text=Configurations\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.configure()"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.configure()"
  name: "configure()"
  nameWithType: "NginxManager.configure()"
  summary: "Gets a Configurable instance that can be used to create Nginx<wbr>Manager with optional configuration."
  modifiers:
  - "static"
  syntax: "public static NginxManager.Configurable configure()"
  desc: "Gets a Configurable instance that can be used to create NginxManager with optional configuration."
  returns:
    description: "the Configurable instance allowing configurations."
    type: "<xref href=\"com.azure.resourcemanager.nginx.NginxManager.Configurable?alt=com.azure.resourcemanager.nginx.NginxManager.Configurable&text=Configurable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.deployments()"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.deployments()"
  name: "deployments()"
  nameWithType: "NginxManager.deployments()"
  summary: "Gets the resource collection API of Deployments."
  syntax: "public Deployments deployments()"
  desc: "Gets the resource collection API of Deployments. It manages NginxDeployment."
  returns:
    description: "Resource collection API of Deployments."
    type: "<xref href=\"com.azure.resourcemanager.nginx.models.Deployments?alt=com.azure.resourcemanager.nginx.models.Deployments&text=Deployments\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.operations()"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.operations()"
  name: "operations()"
  nameWithType: "NginxManager.operations()"
  summary: "Gets the resource collection API of Operations."
  syntax: "public Operations operations()"
  desc: "Gets the resource collection API of Operations."
  returns:
    description: "Resource collection API of Operations."
    type: "<xref href=\"com.azure.resourcemanager.nginx.models.Operations?alt=com.azure.resourcemanager.nginx.models.Operations&text=Operations\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.nginx.NginxManager.serviceClient()"
  fullName: "com.azure.resourcemanager.nginx.NginxManager.serviceClient()"
  name: "serviceClient()"
  nameWithType: "NginxManager.serviceClient()"
  syntax: "public NginxManagementClient serviceClient()"
  returns:
    description: "Wrapped service client NginxManagementClient providing direct access to the underlying auto-generated API\n     implementation, based on Azure REST API."
    type: "<xref href=\"com.azure.resourcemanager.nginx.fluent.NginxManagementClient?alt=com.azure.resourcemanager.nginx.fluent.NginxManagementClient&text=NginxManagementClient\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Entry point to NginxManager."
metadata: {}
package: "com.azure.resourcemanager.nginx"
artifact: com.azure.resourcemanager:azure-resourcemanager-nginx:1.0.0-beta.1
