### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  id: ByteBufferBackedInputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util
  children:
  - com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.ByteBufferBackedInputStream(java.nio.ByteBuffer)
  - com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream._b
  - com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.available()
  - com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read()
  - com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read(byte[],int,int)
  langs:
  - java
  name: ByteBufferBackedInputStream
  nameWithType: ByteBufferBackedInputStream
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  type: Class
  package: com.fasterxml.jackson.databind.util
  summary: Simple <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> implementation that exposes currently available content of a <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">ByteBuffer</xref>.
  syntax:
    content: public class ByteBufferBackedInputStream extends InputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  inheritedMembers:
  - java.io.InputStream.available()
  - java.io.InputStream.close()
  - java.io.InputStream.mark(int)
  - java.io.InputStream.markSupported()
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.read()
  - java.io.InputStream.read(byte[])
  - java.io.InputStream.read(byte[],int,int)
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.reset()
  - java.io.InputStream.skip(long)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.ByteBufferBackedInputStream(java.nio.ByteBuffer)
  id: ByteBufferBackedInputStream(java.nio.ByteBuffer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  langs:
  - java
  name: ByteBufferBackedInputStream(ByteBuffer buf)
  nameWithType: ByteBufferBackedInputStream.ByteBufferBackedInputStream(ByteBuffer buf)
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.ByteBufferBackedInputStream(ByteBuffer buf)
  overload: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.ByteBufferBackedInputStream*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public ByteBufferBackedInputStream(ByteBuffer buf)
    parameters:
    - id: buf
      type: java.nio.ByteBuffer
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream._b
  id: _b
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  langs:
  - java
  name: _b
  nameWithType: ByteBufferBackedInputStream._b
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream._b
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final ByteBuffer _b
    return:
      type: java.nio.ByteBuffer
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.available()
  id: available()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  langs:
  - java
  name: available()
  nameWithType: ByteBufferBackedInputStream.available()
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.available()
  overload: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.available*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public int available()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read()
  id: read()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  langs:
  - java
  name: read()
  nameWithType: ByteBufferBackedInputStream.read()
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read()
  overload: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public int read()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream
  langs:
  - java
  name: read(byte[] bytes, int off, int len)
  nameWithType: ByteBufferBackedInputStream.read(byte[] bytes, int off, int len)
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read(byte[] bytes, int off, int len)
  overload: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public int read(byte[] bytes, int off, int len)
    parameters:
    - id: bytes
      type: byte[]
    - id: off
      type: int
    - id: len
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
references:
- uid: java.nio.ByteBuffer
  spec.java:
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.ByteBufferBackedInputStream*
  name: ByteBufferBackedInputStream
  nameWithType: ByteBufferBackedInputStream.ByteBufferBackedInputStream
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.ByteBufferBackedInputStream
  package: com.fasterxml.jackson.databind.util
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.available*
  name: available
  nameWithType: ByteBufferBackedInputStream.available
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.available
  package: com.fasterxml.jackson.databind.util
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read*
  name: read
  nameWithType: ByteBufferBackedInputStream.read
  fullName: com.fasterxml.jackson.databind.util.ByteBufferBackedInputStream.read
  package: com.fasterxml.jackson.databind.util
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.io.InputStream
  name: InputStream
  nameWithType: InputStream
  fullName: java.io.InputStream
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.InputStream.mark(int)
  name: InputStream.mark(int)
  nameWithType: InputStream.mark(int)
  fullName: java.io.InputStream.mark(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.InputStream.close()
  name: InputStream.close()
  nameWithType: InputStream.close()
  fullName: java.io.InputStream.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.io.InputStream.markSupported()
  name: InputStream.markSupported()
  nameWithType: InputStream.markSupported()
  fullName: java.io.InputStream.markSupported()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.io.InputStream.read(byte[])
  name: InputStream.read(byte[])
  nameWithType: InputStream.read(byte[])
  fullName: java.io.InputStream.read(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.available()
  name: InputStream.available()
  nameWithType: InputStream.available()
  fullName: java.io.InputStream.available()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.InputStream.skip(long)
  name: InputStream.skip(long)
  nameWithType: InputStream.skip(long)
  fullName: java.io.InputStream.skip(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.InputStream.read()
  name: InputStream.read()
  nameWithType: InputStream.read()
  fullName: java.io.InputStream.read()
- uid: java.io.InputStream.read(byte[],int,int)
  name: InputStream.read(byte[],int,int)
  nameWithType: InputStream.read(byte[],int,int)
  fullName: java.io.InputStream.read(byte[],int,int)
- uid: java.io.InputStream.reset()
  name: InputStream.reset()
  nameWithType: InputStream.reset()
  fullName: java.io.InputStream.reset()
