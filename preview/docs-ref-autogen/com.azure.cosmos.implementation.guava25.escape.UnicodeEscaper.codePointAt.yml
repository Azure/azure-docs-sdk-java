### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt*"
fullName: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt"
name: "codePointAt"
nameWithType: "UnicodeEscaper.codePointAt"
members:
- uid: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)"
  fullName: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(CharSequence seq, int index, int end)"
  name: "codePointAt(CharSequence seq, int index, int end)"
  nameWithType: "UnicodeEscaper.codePointAt(CharSequence seq, int index, int end)"
  summary: "Returns the Unicode code point of the character at the given index.\n\nUnlike <xref uid=\"java.lang.Character.codePointAt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Character#codePointAt(CharSequence, int)\"></xref> or <xref uid=\"java.lang.String.codePointAt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String#codePointAt(int)\"></xref> this method will never fail silently when encountering an invalid surrogate pair.\n\nThe behaviour of this method is as follows:\n\n1.  If `index >= end`, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndexOutOfBoundsException\"></xref> is thrown.\n2.  **If the character at the specified index is not a surrogate, it is returned.**\n3.  If the first character was a high surrogate value, then an attempt is made to read the next character.\n    \n    1.  **If the end of the sequence was reached, the negated value of the trailing high surrogate is returned.**\n    2.  **If the next character was a valid low surrogate, the code point value of the high/low surrogate pair is returned.**\n    3.  If the next character was not a low surrogate value, then <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> is thrown.\n4.  If the first character was a low surrogate value, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> is thrown."
  parameters:
  - description: "the sequence of characters from which to decode the code point"
    name: "seq"
    type: "<xref href=\"java.lang.CharSequence?alt=java.lang.CharSequence&text=CharSequence\" data-throw-if-not-resolved=\"False\" />"
  - description: "the index of the first character to decode"
    name: "index"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "the index beyond the last valid character to decode"
    name: "end"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected static int codePointAt(CharSequence seq, int index, int end)"
  returns:
    description: "the Unicode code point for the given index or the negated value of the trailing high\n     surrogate character at the end of the sequence"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.escape"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
