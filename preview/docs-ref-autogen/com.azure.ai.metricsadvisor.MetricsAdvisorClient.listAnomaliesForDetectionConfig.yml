### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listAnomaliesForDetectionConfig*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listAnomaliesForDetectionConfig"
name: "listAnomaliesForDetectionConfig"
nameWithType: "MetricsAdvisorClient.listAnomaliesForDetectionConfig"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listAnomaliesForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)"
  name: "listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)"
  nameWithType: "MetricsAdvisorClient.listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)"
  summary: "Fetch the anomalies identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListAnomaliesDetectedFilter filter = new ListAnomaliesDetectedFilter()\n     .setSeverityRange(AnomalySeverity.LOW, AnomalySeverity.MEDIUM);\n final ListAnomaliesDetectedOptions options = new ListAnomaliesDetectedOptions()\n     .setTop(10)\n     .setFilter(filter);\n PagedIterable<DataPointAnomaly> anomaliesIterable\n     = metricsAdvisorClient.listAnomaliesForDetectionConfig(detectionConfigurationId, startTime, endTime,\n     options, Context.NONE);\n \n for (DataPointAnomaly dataPointAnomaly : anomaliesIterable) {\n     System.out.printf(\"DataPointAnomaly AnomalySeverity: %s%n\", dataPointAnomaly.getSeverity());\n     System.out.printf(\"Series Key:\");\n     DimensionKey seriesKey = dataPointAnomaly.getSeriesKey();\n     for (Map.Entry<String, String> dimension : seriesKey.asMap().entrySet()) {\n         System.out.printf(\"DimensionName: %s DimensionValue:%s%n\",\n             dimension.getKey(), dimension.getValue());\n     }\n }\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The start time of the time range within which the anomalies were detected."
    name: "startTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The end time of the time range within which the anomalies were detected."
    name: "endTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DataPointAnomaly> listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime)"
  returns:
    description: "The anomalies."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.DataPointAnomaly?alt=com.azure.ai.metricsadvisor.models.DataPointAnomaly&text=DataPointAnomaly\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listAnomaliesForDetectionConfig(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime,com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context)"
  name: "listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context)"
  nameWithType: "MetricsAdvisorClient.listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context)"
  summary: "Fetch the anomalies identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListAnomaliesDetectedFilter filter = new ListAnomaliesDetectedFilter()\n     .setSeverityRange(AnomalySeverity.LOW, AnomalySeverity.MEDIUM);\n final ListAnomaliesDetectedOptions options = new ListAnomaliesDetectedOptions()\n     .setTop(10)\n     .setFilter(filter);\n PagedIterable<DataPointAnomaly> anomaliesIterable\n     = metricsAdvisorClient.listAnomaliesForDetectionConfig(detectionConfigurationId,\n         startTime, endTime, options,\n     Context.NONE);\n \n Stream<PagedResponse<DataPointAnomaly>> anomaliesPageStream = anomaliesIterable.streamByPage();\n int[] pageCount = new int[1];\n anomaliesPageStream.forEach(anomaliesPage -> {\n     System.out.printf(\"Page: %d%n\", pageCount[0]++);\n     IterableStream<DataPointAnomaly> anomaliesPageItems = anomaliesPage.getElements();\n     for (DataPointAnomaly dataPointAnomaly : anomaliesPageItems) {\n         System.out.printf(\"DataPoint Anomaly AnomalySeverity: %s%n\", dataPointAnomaly.getSeverity());\n         System.out.printf(\"Series Key:\");\n         DimensionKey seriesKey = dataPointAnomaly.getSeriesKey();\n         for (Map.Entry<String, String> dimension : seriesKey.asMap().entrySet()) {\n             System.out.printf(\"DimensionName: %s DimensionValue:%s%n\",\n                 dimension.getKey(), dimension.getValue());\n         }\n     }\n });\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The start time of the time range within which the anomalies were detected."
    name: "startTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The end time of the time range within which the anomalies were detected."
    name: "endTime"
    type: "<xref href=\"java.time.OffsetDateTime?alt=java.time.OffsetDateTime&text=OffsetDateTime\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions?alt=com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions&text=ListAnomaliesDetectedOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DataPointAnomaly> listAnomaliesForDetectionConfig(String detectionConfigurationId, OffsetDateTime startTime, OffsetDateTime endTime, ListAnomaliesDetectedOptions options, Context context)"
  returns:
    description: "The anomalies."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.DataPointAnomaly?alt=com.azure.ai.metricsadvisor.models.DataPointAnomaly&text=DataPointAnomaly\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
