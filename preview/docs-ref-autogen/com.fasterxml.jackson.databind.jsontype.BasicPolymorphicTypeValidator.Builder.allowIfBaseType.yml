### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType*"
fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType"
name: "allowIfBaseType"
nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfBaseType"
members:
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  name: "allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  summary: "Method for appending custom matcher called with base type: if matcher returns `true`, all possible subtypes will be accepted; if `false`, other matchers are applied."
  parameters:
  - description: "Custom matcher to apply to base type"
    name: "matcher"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher&text=TypeMatcher\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  returns:
    description: "This Builder to allow call chaining"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Class<?> baseOfBase)"
  name: "allowIfBaseType(Class<?> baseOfBase)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Class<?> baseOfBase)"
  summary: "Method for appending matcher that will allow all subtypes in cases where nominal base type is specified class, or one of its subtypes. For example, call to\n\n```java\nbuilder.allowIfBaseType(MyBaseType.class)\n```\n\nwould indicate that any polymorphic properties where declared base type is `MyBaseType` (or subclass thereof) would allow all legal (assignment-compatible) subtypes."
  parameters:
  - name: "baseOfBase"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfBaseType(Class<?> baseOfBase)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(String prefixForBase)"
  name: "allowIfBaseType(String prefixForBase)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfBaseType(String prefixForBase)"
  summary: "Method for appending matcher that will allow all subtypes in cases where nominal base type's class name starts with specific prefix. For example, call to\n\n```java\nbuilder.allowIfBaseType(\"com.mycompany.\")\n```\n\nwould indicate that any polymorphic properties where declared base type is in package `com.mycompany` would allow all legal (assignment-compatible) subtypes."
  parameters:
  - name: "prefixForBase"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfBaseType(String prefixForBase)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.util.regex.Pattern)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Pattern patternForBase)"
  name: "allowIfBaseType(Pattern patternForBase)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Pattern patternForBase)"
  summary: "Method for appending matcher that will allow all subtypes in cases where nominal base type's class name matches given <xref uid=\"java.util.regex.Pattern\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Pattern\"></xref> For example, call to\n\n```java\nbuilder.allowIfBaseType(Pattern.compile(\"com\\\\.mycompany\\\\..*\")\n```\n\nwould indicate that any polymorphic properties where declared base type is in package `com.mycompany` would allow all legal (assignment-compatible) subtypes.\n\nNOTE! <xref uid=\"java.util.regex.Pattern\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Pattern\"></xref> match is applied using `if (patternForBase.matcher(typeId).matches()) { }` that is, it must match the whole class name, not just part."
  parameters:
  - name: "patternForBase"
    type: "<xref href=\"java.util.regex.Pattern?alt=java.util.regex.Pattern&text=Pattern\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfBaseType(Pattern patternForBase)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
