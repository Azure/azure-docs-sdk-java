### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
  id: ShareDirectoryAsyncClient
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share
  children:
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.create()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile(java.lang.String,long)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.delete()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.exists()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles(boolean)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient(java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories()
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(java.lang.String,java.lang.Integer)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  - com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  langs:
  - java
  name: ShareDirectoryAsyncClient
  nameWithType: ShareDirectoryAsyncClient
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
  type: Class
  package: com.azure.storage.file.share
  summary: >-
    This class provides a client that contains all the operations for interacting with directory in Azure Storage File Service. Operations allowed by the client are creating, deleting and listing subdirectory and file, retrieving properties, setting metadata and list or force close handles of the directory or file.


    **Instantiating an Asynchronous Directory Client**


    ```java

    ShareDirectoryAsyncClient client = new ShareFileClientBuilder()
         .connectionString("${connectionString}")
         .endpoint("${endpoint}")
         .buildDirectoryAsyncClient();
    ```


    View <xref uid="com.azure.storage.file.share.ShareFileClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public class ShareDirectoryAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.ShareDirectoryAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  id: ShareDirectoryAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: ShareDirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  nameWithType: ShareDirectoryAsyncClient.ShareDirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.ShareDirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName, ShareServiceVersion serviceVersion)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.ShareDirectoryAsyncClient*
  type: Constructor
  package: com.azure.storage.file.share
  summary: Creates a ShareDirectoryAsyncClient that sends requests to the storage directory at <xref uid="com.azure.storage.file.share.implementation.AzureFileStorageImpl.getUrl*" data-throw-if-not-resolved="false">endpoint</xref>. Each service call goes through the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">pipeline</xref> in the `client`.
  syntax:
    content: " ShareDirectoryAsyncClient(AzureFileStorageImpl azureFileStorageClient, String shareName, String directoryPath, String snapshot, String accountName, ShareServiceVersion serviceVersion)"
    parameters:
    - id: azureFileStorageClient
      type: com.azure.storage.file.share.implementation.AzureFileStorageImpl
      description: Client that interacts with the service interfaces
    - id: shareName
      type: java.lang.String
      description: Name of the share
    - id: directoryPath
      type: java.lang.String
      description: Name of the directory
    - id: snapshot
      type: java.lang.String
      description: The snapshot of the share
    - id: accountName
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: create()
  nameWithType: ShareDirectoryAsyncClient.create()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.create()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.create*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates this directory in the file share and returns a response of <xref uid="com.azure.storage.file.share.models.ShareDirectoryInfo" data-throw-if-not-resolved="false">ShareDirectoryInfo</xref> to interact with it.


    **Code Samples**


    Create the directory


    ```java

    shareDirectoryAsyncClient.create().subscribe(
         response -> {
         },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Completed creating the directory!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Mono<ShareDirectoryInfo> create()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectoryInfo>
      description: The <xref uid="com.azure.storage.file.share.models.ShareDirectoryInfo" data-throw-if-not-resolved="false">directory info</xref>.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile(java.lang.String,long)
  id: createFile(java.lang.String,long)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: createFile(String fileName, long maxSize)
  nameWithType: ShareDirectoryAsyncClient.createFile(String fileName, long maxSize)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile(String fileName, long maxSize)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a file in this directory with specific name, max number of results and returns a response of ShareDirectoryInfo to interact with it.


    **Code Samples**


    Create 1k file with named "myFile"


    ```java

    shareDirectoryAsyncClient.createFile("myfile", 1024).subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed creating the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Mono<ShareFileAsyncClient> createFile(String fileName, long maxSize)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: maxSize
      type: long
      description: Size of the file
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareFileAsyncClient>
      description: The ShareFileAsyncClient.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  nameWithType: ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a file in this directory with specific name and returns a response of ShareDirectoryInfo to interact with it.


    **Code Samples**


    Create the file named "myFile"


    ```java

    ShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()
         .setContentType("text/html")
         .setContentEncoding("gzip")
         .setContentLanguage("en")
         .setCacheControl("no-transform")
         .setContentDisposition("attachment");
     FileSmbProperties smbProperties = new FileSmbProperties()
         .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))
         .setFileCreationTime(OffsetDateTime.now())
         .setFileLastWriteTime(OffsetDateTime.now())
         .setFilePermissionKey("filePermissionKey");
     String filePermission = "filePermission";
     // NOTE: filePermission and filePermissionKey should never be both set
     shareDirectoryAsyncClient.createFileWithResponse("myFile", 1024, httpHeaders, smbProperties, filePermission,
         Collections.singletonMap("directory", "metadata")).subscribe(
             response -> System.out.printf("Creating the file completed with status code %d", response.getStatusCode()),
             error -> System.err.println(error.toString()),
             () -> System.out.println("Completed creating the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file
  syntax:
    content: public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: maxSize
      type: long
      description: Max size of the file
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileAsyncClient>>
      description: A response containing the directory info and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  id: createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  nameWithType: ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Creates a file in this directory with specific name and returns a response of ShareDirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the file named \"myFile\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n \n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n \n shareDirectoryAsyncClient.createFileWithResponse(\"myFile\", 1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"), requestConditions).subscribe(\n         response -> System.out.printf(\"Creating the file completed with status code %d\", response.getStatusCode()),\n         error -> System.err.println(error.toString()),\n         () -> System.out.println(\"Completed creating the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-file"
  syntax:
    content: public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: maxSize
      type: long
      description: Max size of the file
    - id: httpHeaders
      type: com.azure.storage.file.share.models.ShareFileHttpHeaders
      description: The user settable file http headers.
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The user settable file smb properties.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the file.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional name-value pairs associated with the file as metadata.
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileAsyncClient>>
      description: A response containing the directory info and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory(java.lang.String)
  id: createSubdirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: createSubdirectory(String subdirectoryName)
  nameWithType: ShareDirectoryAsyncClient.createSubdirectory(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a subdirectory under current directory with specific name and returns a response of ShareDirectoryAsyncClient to interact with it.


    **Code Samples**


    Create the sub directory "subdir"


    ```java

    shareDirectoryAsyncClient.createSubdirectory("subdir")
         .doOnSuccess(response -> System.out.println("Completed creating the subdirectory."));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Mono<ShareDirectoryAsyncClient> createSubdirectory(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareDirectoryAsyncClient>
      description: A subdirectory client.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  id: createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  nameWithType: ShareDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a subdirectory under current directory with specific name , metadata and returns a response of ShareDirectoryAsyncClient to interact with it.


    **Code Samples**


    Create the subdirectory named "subdir", with metadata


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     Map<String, String> metadata = Collections.singletonMap("directory", "metadata");
     shareDirectoryAsyncClient.createSubdirectoryWithResponse("subdir", smbProperties, filePermission, metadata).subscribe(
         response ->
             System.out.println("Successfully creating the subdirectory with status code: "
                 + response.getStatusCode()),
         error -> System.err.println(error.toString())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Mono<Response<ShareDirectoryAsyncClient>> createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the subdirectory
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryAsyncClient>>
      description: A response containing the subdirectory client and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  id: createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  nameWithType: ShareDirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a directory in the file share and returns a response of ShareDirectoryInfo to interact with it.


    **Code Samples**


    Create the directory


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     Map<String, String> metadata = Collections.singletonMap("directory", "metadata");
     shareDirectoryAsyncClient.createWithResponse(smbProperties, filePermission, metadata).subscribe(
         response ->
             System.out.println("Completed creating the directory with status code:" + response.getStatusCode()),
         error -> System.err.print(error.toString())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-directory
  syntax:
    content: public Mono<Response<ShareDirectoryInfo>> createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)
    parameters:
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the directory
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryInfo>>
      description: A response containing the directory info and the status of creating the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: ShareDirectoryAsyncClient.delete()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.delete()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.delete*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the directory in the file share.


    **Code Samples**


    Delete the directory


    ```java

    shareDirectoryAsyncClient.delete().subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile(java.lang.String)
  id: deleteFile(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: deleteFile(String fileName)
  nameWithType: ShareDirectoryAsyncClient.deleteFile(String fileName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile(String fileName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file with specific name in this directory.


    **Code Samples**


    Delete the file "filetest"


    ```java

    shareDirectoryAsyncClient.deleteFile("myfile").subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Void> deleteFile(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(java.lang.String)
  id: deleteFileWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName)
  nameWithType: ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file with specific name in this directory.


    **Code Samples**


    Delete the file "filetest"


    ```java

    shareDirectoryAsyncClient.deleteFileWithResponse("myfile").subscribe(
         response -> System.out.printf("Delete file completed with status code %d", response.getStatusCode()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Response<Void>> deleteFileWithResponse(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  id: deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
  nameWithType: ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the file with specific name in this directory.


    **Code Samples**


    Delete the file "filetest"


    ```java

    ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);
     shareDirectoryAsyncClient.deleteFileWithResponse("myfile", requestConditions).subscribe(
         response -> System.out.printf("Delete file completed with status code %d", response.getStatusCode()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed deleting the file.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-file2
  syntax:
    content: public Mono<Response<Void>> deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    - id: requestConditions
      type: com.azure.storage.file.share.models.ShareRequestConditions
      description: <xref uid="com.azure.storage.file.share.models.ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory(java.lang.String)
  id: deleteSubdirectory(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: deleteSubdirectory(String subdirectoryName)
  nameWithType: ShareDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the subdirectory with specific name in this directory.


    **Code Samples**


    Delete the subdirectory named "subdir"


    ```java

    shareDirectoryAsyncClient.deleteSubdirectory("mysubdirectory").subscribe(
         response -> {
         },
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed deleting the subdirectory.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Mono<Void> deleteSubdirectory(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String)
  id: deleteSubdirectoryWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: deleteSubdirectoryWithResponse(String subdirectoryName)
  nameWithType: ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the subdirectory with specific name in this directory.


    **Code Samples**


    Delete the subdirectory named "subdir"


    ```java

    shareDirectoryAsyncClient.deleteSubdirectoryWithResponse("mysubdirectory").subscribe(
         response -> System.out.printf("Delete subdirectory completed with status code %d",
             response.getStatusCode()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed deleting the subdirectory.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Mono<Response<Void>> deleteSubdirectoryWithResponse(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the subdirectory
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse()
  id: deleteWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: deleteWithResponse()
  nameWithType: ShareDirectoryAsyncClient.deleteWithResponse()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the directory in the file share.


    **Code Samples**


    Delete the directory


    ```java

    shareDirectoryAsyncClient.deleteWithResponse().subscribe(
         response -> System.out.printf("Delete completed with status code %d", response.getStatusCode()),
         error -> System.err.println(error.toString())
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-directory
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: exists()
  nameWithType: ShareDirectoryAsyncClient.exists()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.exists()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.exists*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the directory this client represents exists in the cloud.


    **Code Samples**


    ```java

    client.exists().subscribe(response -> System.out.printf("Exists? %b%n", response));

    ```
  syntax:
    content: public Mono<Boolean> exists()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: Flag indicating existence of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse()
  id: existsWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: existsWithResponse()
  nameWithType: ShareDirectoryAsyncClient.existsWithResponse()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Determines if the directory this client represents exists in the cloud.


    **Code Samples**


    ```java

    client.existsWithResponse().subscribe(response -> System.out.printf("Exists? %b%n", response.getValue()));

    ```
  syntax:
    content: public Mono<Response<Boolean>> existsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: Flag indicating existence of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles(boolean)
  id: forceCloseAllHandles(boolean)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: forceCloseAllHandles(boolean recursive)
  nameWithType: ShareDirectoryAsyncClient.forceCloseAllHandles(boolean recursive)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles(boolean recursive)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes all handles opened on the directory at the service.


    **Code Samples**


    Force close all handles recursively.


    ```java

    shareDirectoryAsyncClient.forceCloseAllHandles(true).subscribe(closeHandlesInfo ->
         System.out.printf("Closed %d open handles on the directory%nFailed to close %d open handles on the "
             + "directory%n", closeHandlesInfo.getClosedHandles(), closeHandlesInfo.getFailedHandles()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Mono<CloseHandlesInfo> forceCloseAllHandles(boolean recursive)
    parameters:
    - id: recursive
      type: boolean
      description: >-
        Flag indicating if the operation should apply to all subdirectories and files contained in the
         directory.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>
      description: A response that contains information about the closed handles.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle(java.lang.String)
  id: forceCloseHandle(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: forceCloseHandle(String handleId)
  nameWithType: ShareDirectoryAsyncClient.forceCloseHandle(String handleId)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle(String handleId)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes a handle on the directory. This is intended to be used alongside <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)" data-throw-if-not-resolved="false">#listHandles(Integer, boolean)</xref>.


    **Code Samples**


    Force close handles returned by list handles.


    ```java

    shareDirectoryAsyncClient.listHandles(null, true).subscribe(handleItem ->
         shareDirectoryAsyncClient.forceCloseHandle(handleItem.getHandleId()).subscribe(ignored ->
             System.out.printf("Closed handle %s on resource %s%n",
                 handleItem.getHandleId(), handleItem.getPath())));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Mono<CloseHandlesInfo> forceCloseHandle(String handleId)
    parameters:
    - id: handleId
      type: java.lang.String
      description: Handle ID to be closed.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>
      description: A response that contains information about the closed handles.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse(java.lang.String)
  id: forceCloseHandleWithResponse(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: forceCloseHandleWithResponse(String handleId)
  nameWithType: ShareDirectoryAsyncClient.forceCloseHandleWithResponse(String handleId)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse(String handleId)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Closes a handle on the directory. This is intended to be used alongside <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)" data-throw-if-not-resolved="false">#listHandles(Integer, boolean)</xref>.


    **Code Samples**


    Force close handles returned by list handles.


    ```java

    shareDirectoryAsyncClient.listHandles(null, true).subscribe(handleItem ->
         shareDirectoryAsyncClient.forceCloseHandleWithResponse(handleItem.getHandleId()).subscribe(response ->
             System.out.printf("Closing handle %s on resource %s completed with status code %d%n",
                 handleItem.getHandleId(), handleItem.getPath(), response.getStatusCode())));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/force-close-handles
  syntax:
    content: public Mono<Response<CloseHandlesInfo>> forceCloseHandleWithResponse(String handleId)
    parameters:
    - id: handleId
      type: java.lang.String
      description: Handle ID to be closed.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>
      description: >-
        A response that contains information about the closed handles along with headers and response status
         code.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  nameWithType: ShareDirectoryAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas*
  type: Method
  package: com.azure.storage.file.share
  summary: "Generates a service SAS for the directory using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">ShareServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n \n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n shareDirectoryAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)
    parameters:
    - id: shareServiceSasSignatureValues
      type: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.share.sas.ShareServiceSasSignatureValues" data-throw-if-not-resolved="false">ShareServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: ShareDirectoryAsyncClient.getAccountName()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.share
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath()
  id: getDirectoryPath()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getDirectoryPath()
  nameWithType: ShareDirectoryAsyncClient.getDirectoryPath()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get directory path of the client.


    Get directory path.


    ```java

    String directoryPath = shareDirectoryAsyncClient.getDirectoryPath();
     System.out.println("The name of the directory is " + directoryPath);
    ```
  syntax:
    content: public String getDirectoryPath()
    return:
      type: java.lang.String
      description: The path of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl()
  id: getDirectoryUrl()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getDirectoryUrl()
  nameWithType: ShareDirectoryAsyncClient.getDirectoryUrl()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: Get the url of the storage directory client.
  syntax:
    content: public String getDirectoryUrl()
    return:
      type: java.lang.String
      description: the URL of the storage directory client
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient(java.lang.String)
  id: getFileClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getFileClient(String fileName)
  nameWithType: ShareDirectoryAsyncClient.getFileClient(String fileName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient(String fileName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a ShareFileAsyncClient that interacts with the specified file.


    If the file doesn't exist in this directory <xref uid="com.azure.storage.file.share.ShareFileAsyncClient.create(long)" data-throw-if-not-resolved="false">ShareFileAsyncClient#create(long)</xref> create\} in the client will need to be called before interaction with the file can happen.
  syntax:
    content: public ShareFileAsyncClient getFileClient(String fileName)
    parameters:
    - id: fileName
      type: java.lang.String
      description: Name of the file
    return:
      type: com.azure.storage.file.share.ShareFileAsyncClient
      description: a ShareFileAsyncClient that interacts with the specified share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: ShareDirectoryAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: ShareDirectoryAsyncClient.getProperties()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve directory properties


    ```java

    shareDirectoryAsyncClient.getProperties().subscribe(properties -> {
         System.out.printf("Directory latest modified date is %s.", properties.getLastModified());
     });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties
  syntax:
    content: public Mono<ShareDirectoryProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectoryProperties>
      description: Storage directory properties
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse()
  id: getPropertiesWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse()
  nameWithType: ShareDirectoryAsyncClient.getPropertiesWithResponse()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of this directory. The properties includes directory metadata, last modified date, is server encrypted, and eTag.


    **Code Samples**


    Retrieve directory properties


    ```java

    shareDirectoryAsyncClient.getPropertiesWithResponse().subscribe(properties -> {
         System.out.printf("Directory latest modified date is %s:", properties.getValue().getLastModified());
     });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-directory-properties
  syntax:
    content: public Mono<Response<ShareDirectoryProperties>> getPropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryProperties>>
      description: A response containing the storage directory properties with headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: ShareDirectoryAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the service version the client is using.
  syntax:
    content: public ShareServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.share.ShareServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName()
  id: getShareName()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getShareName()
  nameWithType: ShareDirectoryAsyncClient.getShareName()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Get the share name of directory client.


    Get the share name.


    ```java

    String shareName = shareDirectoryAsyncClient.getShareName();
     System.out.println("The share name of the directory is " + shareName);
    ```
  syntax:
    content: public String getShareName()
    return:
      type: java.lang.String
      description: The share name of the directory.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId()
  id: getShareSnapshotId()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getShareSnapshotId()
  nameWithType: ShareDirectoryAsyncClient.getShareSnapshotId()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId*
  type: Method
  package: com.azure.storage.file.share
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\">ShareDirectoryAsyncClient</xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareDirectoryAsyncClient shareDirectoryAsyncClient = new ShareFileClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .resourcePath(\"mydirectory\")\n     .snapshot(currentTime.toString())\n     .buildDirectoryAsyncClient();\n \n System.out.printf(\"Snapshot ID: %s%n\", shareDirectoryAsyncClient.getShareSnapshotId());\n```"
  syntax:
    content: public String getShareSnapshotId()
    return:
      type: java.lang.String
      description: >-
        The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base
         share.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient(java.lang.String)
  id: getSubdirectoryClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: getSubdirectoryClient(String subdirectoryName)
  nameWithType: ShareDirectoryAsyncClient.getSubdirectoryClient(String subdirectoryName)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient(String subdirectoryName)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a ShareDirectoryAsyncClient that interacts with the specified directory.


    If the file doesn't exist in this directory <xref uid="com.azure.storage.file.share.ShareDirectoryAsyncClient.create()" data-throw-if-not-resolved="false">ShareDirectoryAsyncClient#create()</xref> create\} in the client will need to be called before interaction with the directory can happen.
  syntax:
    content: public ShareDirectoryAsyncClient getSubdirectoryClient(String subdirectoryName)
    parameters:
    - id: subdirectoryName
      type: java.lang.String
      description: Name of the directory
    return:
      type: com.azure.storage.file.share.ShareDirectoryAsyncClient
      description: a ShareDirectoryAsyncClient that interacts with the specified directory
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories()
  id: listFilesAndDirectories()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: listFilesAndDirectories()
  nameWithType: ShareDirectoryAsyncClient.listFilesAndDirectories()
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories()
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Lists all sub-directories and files in this directory without their prefix or maxResults in single page.


    **Code Samples**


    List all sub-directories and files in the account


    ```java

    shareDirectoryAsyncClient.listFilesAndDirectories().subscribe(
         fileRef -> System.out.printf("Is the resource a directory? %b. The resource name is: %s.",
             fileRef.isDirectory(), fileRef.getName()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed listing the directories and files.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files
  syntax:
    content: public PagedFlux<ShareFileItem> listFilesAndDirectories()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileItem>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileItem" data-throw-if-not-resolved="false">File info</xref> in the storage directory
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(java.lang.String,java.lang.Integer)
  id: listFilesAndDirectories(java.lang.String,java.lang.Integer)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: listFilesAndDirectories(String prefix, Integer maxResultsPerPage)
  nameWithType: ShareDirectoryAsyncClient.listFilesAndDirectories(String prefix, Integer maxResultsPerPage)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(String prefix, Integer maxResultsPerPage)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Lists all sub-directories and files in this directory with their prefix or snapshots.


    **Code Samples**


    List all sub-directories with "subdir" prefix and return 10 results in the account


    ```java

    shareDirectoryAsyncClient.listFilesAndDirectories("subdir", 10).subscribe(
         fileRef -> System.out.printf("Is the resource a directory? %b. The resource name is: %s.",
             fileRef.isDirectory(), fileRef.getName()),
         error -> System.err.println(error.toString()),
         () -> System.out.println("Completed listing the directories and files.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-directories-and-files
  syntax:
    content: public PagedFlux<ShareFileItem> listFilesAndDirectories(String prefix, Integer maxResultsPerPage)
    parameters:
    - id: prefix
      type: java.lang.String
      description: >-
        Optional prefix which filters the results to return only files and directories whose name begins
         with.
    - id: maxResultsPerPage
      type: java.lang.Integer
      description: >-
        Optional maximum number of files and/or directories to return per page. If the request
         does not specify maxResultsPerPage or specifies a value greater than 5,000,
         the server will return up to 5,000 items.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileItem>
      description: <xref uid="com.azure.storage.file.share.models.ShareFileItem" data-throw-if-not-resolved="false">File info</xref> in this directory with prefix and max number of return results.
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)
  id: listHandles(java.lang.Integer,boolean)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: listHandles(Integer maxResultPerPage, boolean recursive)
  nameWithType: ShareDirectoryAsyncClient.listHandles(Integer maxResultPerPage, boolean recursive)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(Integer maxResultPerPage, boolean recursive)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    List of open handles on a directory or a file.


    **Code Samples**


    Get 10 handles with recursive call.


    ```java

    shareDirectoryAsyncClient.listHandles(10, true)
         .subscribe(handleItem -> System.out.printf("Get handles completed with handle id %s",
             handleItem.getHandleId()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-handles
  syntax:
    content: public PagedFlux<HandleItem> listHandles(Integer maxResultPerPage, boolean recursive)
    parameters:
    - id: maxResultPerPage
      type: java.lang.Integer
      description: Optional maximum number of results will return per page
    - id: recursive
      type: boolean
      description: >-
        Specifies operation should apply to the directory specified in the URI, its files, its
         subdirectories and their files.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>
      description: <xref uid="com.azure.storage.file.share.models.HandleItem" data-throw-if-not-resolved="false">handles</xref> in the directory that satisfy the requirements
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: ShareDirectoryAsyncClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the directory.


    If `null` is passed for the metadata it will clear the metadata associated to the directory.


    **Code Samples**


    Set the metadata to "directory:updatedMetadata"


    ```java

    shareDirectoryAsyncClient.setMetadata(Collections.singletonMap("directory", "updatedMetadata"))
         .subscribe(response -> System.out.println("Setting the directory metadata completed."));
    ```


    Clear the metadata of the directory


    ```java

    shareDirectoryAsyncClient.setMetadata(null)
         .doOnSuccess(response -> System.out.println("Clearing the directory metadata completed"));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata
  syntax:
    content: public Mono<ShareDirectorySetMetadataInfo> setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional metadata to set on the directory, if null is passed the metadata for the directory is
         cleared
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo>
      description: information about the directory
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata)
  nameWithType: ShareDirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the user-defined metadata to associate to the directory.


    If `null` is passed for the metadata it will clear the metadata associated to the directory.


    **Code Samples**


    Set the metadata to "directory:updatedMetadata"


    ```java

    shareDirectoryAsyncClient.setMetadataWithResponse(Collections.singletonMap("directory", "updatedMetadata"))
         .subscribe(response -> System.out.println("Setting the directory metadata completed with status code:"
             + response.getStatusCode()));
    ```


    Clear the metadata of the directory


    ```java

    shareDirectoryAsyncClient.setMetadataWithResponse(null).subscribe(
         response -> System.out.printf("Clearing the directory metadata completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-metadata
  syntax:
    content: public Mono<Response<ShareDirectorySetMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: >-
        Optional metadata to set on the directory, if null is passed the metadata for the directory is
         cleared
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo>>
      description: A response containing the information about the directory with headers and response status code
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  id: setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: setProperties(FileSmbProperties smbProperties, String filePermission)
  nameWithType: ShareDirectoryAsyncClient.setProperties(FileSmbProperties smbProperties, String filePermission)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties(FileSmbProperties smbProperties, String filePermission)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the properties of this directory. The properties include the file SMB properties and the file permission.


    **Code Samples**


    Set directory properties


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     shareDirectoryAsyncClient.setProperties(smbProperties, filePermission).subscribe(properties -> {
         System.out.printf("Directory latest modified date is %s:", properties.getLastModified());
     });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties
  syntax:
    content: public Mono<ShareDirectoryInfo> setProperties(FileSmbProperties smbProperties, String filePermission)
    parameters:
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectoryInfo>
      description: The storage directory SMB properties
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  id: setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareDirectoryAsyncClient
  langs:
  - java
  name: setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)
  nameWithType: ShareDirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)
  overload: com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Sets the properties of this directory. The properties include the file SMB properties and the file permission.


    **Code Samples**


    Set directory properties


    ```java

    FileSmbProperties smbProperties = new FileSmbProperties();
     String filePermission = "filePermission";
     shareDirectoryAsyncClient.setPropertiesWithResponse(smbProperties, filePermission).subscribe(properties -> {
         System.out.printf("Directory latest modified date is %s:", properties.getValue().getLastModified());
     });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-directory-properties
  syntax:
    content: public Mono<Response<ShareDirectoryInfo>> setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)
    parameters:
    - id: smbProperties
      type: com.azure.storage.file.share.FileSmbProperties
      description: The SMB properties of the directory.
    - id: filePermission
      type: java.lang.String
      description: The file permission of the directory.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryInfo>>
      description: A response containing the storage directory smb properties with headers and response status code
references:
- uid: com.azure.storage.file.share.implementation.AzureFileStorageImpl
  name: AzureFileStorageImpl
  nameWithType: AzureFileStorageImpl
  fullName: com.azure.storage.file.share.implementation.AzureFileStorageImpl
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.share.ShareServiceVersion
  name: ShareServiceVersion
  nameWithType: ShareServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.ShareDirectoryAsyncClient*
  name: ShareDirectoryAsyncClient
  nameWithType: ShareDirectoryAsyncClient.ShareDirectoryAsyncClient
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.ShareDirectoryAsyncClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl*
  name: getDirectoryUrl
  nameWithType: ShareDirectoryAsyncClient.getDirectoryUrl
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: ShareDirectoryAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareFileAsyncClient
  name: ShareFileAsyncClient
  nameWithType: ShareFileAsyncClient
  fullName: com.azure.storage.file.share.ShareFileAsyncClient
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient*
  name: getFileClient
  nameWithType: ShareDirectoryAsyncClient.getFileClient
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient*
  name: getSubdirectoryClient
  nameWithType: ShareDirectoryAsyncClient.getSubdirectoryClient
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.exists*
  name: exists
  nameWithType: ShareDirectoryAsyncClient.exists
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.exists
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: ShareDirectoryAsyncClient.existsWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectoryInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectoryInfo
    name: ShareDirectoryInfo
    fullName: com.azure.storage.file.share.models.ShareDirectoryInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.create*
  name: create
  nameWithType: ShareDirectoryAsyncClient.create
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.create
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.FileSmbProperties
  name: FileSmbProperties
  nameWithType: FileSmbProperties
  fullName: com.azure.storage.file.share.FileSmbProperties
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectoryInfo
    name: ShareDirectoryInfo
    fullName: com.azure.storage.file.share.models.ShareDirectoryInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: ShareDirectoryAsyncClient.createWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.delete*
  name: delete
  nameWithType: ShareDirectoryAsyncClient.delete
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.delete
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: ShareDirectoryAsyncClient.deleteWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectoryProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectoryProperties
    name: ShareDirectoryProperties
    fullName: com.azure.storage.file.share.models.ShareDirectoryProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties*
  name: getProperties
  nameWithType: ShareDirectoryAsyncClient.getProperties
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectoryProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectoryProperties
    name: ShareDirectoryProperties
    fullName: com.azure.storage.file.share.models.ShareDirectoryProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: ShareDirectoryAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties*
  name: setProperties
  nameWithType: ShareDirectoryAsyncClient.setProperties
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse*
  name: setPropertiesWithResponse
  nameWithType: ShareDirectoryAsyncClient.setPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
    name: ShareDirectorySetMetadataInfo
    fullName: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata*
  name: setMetadata
  nameWithType: ShareDirectoryAsyncClient.setMetadata
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
    name: ShareDirectorySetMetadataInfo
    fullName: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: ShareDirectoryAsyncClient.setMetadataWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareFileItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareFileItem
    name: ShareFileItem
    fullName: com.azure.storage.file.share.models.ShareFileItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories*
  name: listFilesAndDirectories
  nameWithType: ShareDirectoryAsyncClient.listFilesAndDirectories
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories
  package: com.azure.storage.file.share
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.HandleItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.HandleItem
    name: HandleItem
    fullName: com.azure.storage.file.share.models.HandleItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles*
  name: listHandles
  nameWithType: ShareDirectoryAsyncClient.listHandles
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.CloseHandlesInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.CloseHandlesInfo
    name: CloseHandlesInfo
    fullName: com.azure.storage.file.share.models.CloseHandlesInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle*
  name: forceCloseHandle
  nameWithType: ShareDirectoryAsyncClient.forceCloseHandle
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.CloseHandlesInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.CloseHandlesInfo
    name: CloseHandlesInfo
    fullName: com.azure.storage.file.share.models.CloseHandlesInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse*
  name: forceCloseHandleWithResponse
  nameWithType: ShareDirectoryAsyncClient.forceCloseHandleWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles*
  name: forceCloseAllHandles
  nameWithType: ShareDirectoryAsyncClient.forceCloseAllHandles
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareDirectoryAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
    name: ShareDirectoryAsyncClient
    fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory*
  name: createSubdirectory
  nameWithType: ShareDirectoryAsyncClient.createSubdirectory
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareDirectoryAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareDirectoryAsyncClient
    name: ShareDirectoryAsyncClient
    fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse*
  name: createSubdirectoryWithResponse
  nameWithType: ShareDirectoryAsyncClient.createSubdirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory*
  name: deleteSubdirectory
  nameWithType: ShareDirectoryAsyncClient.deleteSubdirectory
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse*
  name: deleteSubdirectoryWithResponse
  nameWithType: ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse
  package: com.azure.storage.file.share
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareFileAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareFileAsyncClient
    name: ShareFileAsyncClient
    fullName: com.azure.storage.file.share.ShareFileAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile*
  name: createFile
  nameWithType: ShareDirectoryAsyncClient.createFile
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareFileHttpHeaders
  name: ShareFileHttpHeaders
  nameWithType: ShareFileHttpHeaders
  fullName: com.azure.storage.file.share.models.ShareFileHttpHeaders
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareFileAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareFileAsyncClient
    name: ShareFileAsyncClient
    fullName: com.azure.storage.file.share.ShareFileAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse*
  name: createFileWithResponse
  nameWithType: ShareDirectoryAsyncClient.createFileWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareRequestConditions
  name: ShareRequestConditions
  nameWithType: ShareRequestConditions
  fullName: com.azure.storage.file.share.models.ShareRequestConditions
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile*
  name: deleteFile
  nameWithType: ShareDirectoryAsyncClient.deleteFile
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse*
  name: deleteFileWithResponse
  nameWithType: ShareDirectoryAsyncClient.deleteFileWithResponse
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId*
  name: getShareSnapshotId
  nameWithType: ShareDirectoryAsyncClient.getShareSnapshotId
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName*
  name: getShareName
  nameWithType: ShareDirectoryAsyncClient.getShareName
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath*
  name: getDirectoryPath
  nameWithType: ShareDirectoryAsyncClient.getDirectoryPath
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: ShareDirectoryAsyncClient.getAccountName
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName
  package: com.azure.storage.file.share
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: ShareDirectoryAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
  name: ShareServiceSasSignatureValues
  nameWithType: ShareServiceSasSignatureValues
  fullName: com.azure.storage.file.share.sas.ShareServiceSasSignatureValues
- uid: com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas*
  name: generateSas
  nameWithType: ShareDirectoryAsyncClient.generateSas
  fullName: com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas
  package: com.azure.storage.file.share
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.storage.file.share.models.ShareDirectoryInfo
  name: ShareDirectoryInfo
  nameWithType: ShareDirectoryInfo
  fullName: com.azure.storage.file.share.models.ShareDirectoryInfo
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.storage.file.share.models.ShareDirectoryProperties
  name: ShareDirectoryProperties
  nameWithType: ShareDirectoryProperties
  fullName: com.azure.storage.file.share.models.ShareDirectoryProperties
- uid: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
  name: ShareDirectorySetMetadataInfo
  nameWithType: ShareDirectorySetMetadataInfo
  fullName: com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.file.share.models.ShareFileItem
  name: ShareFileItem
  nameWithType: ShareFileItem
  fullName: com.azure.storage.file.share.models.ShareFileItem
- uid: com.azure.storage.file.share.models.HandleItem
  name: HandleItem
  nameWithType: HandleItem
  fullName: com.azure.storage.file.share.models.HandleItem
- uid: com.azure.storage.file.share.models.CloseHandlesInfo
  name: CloseHandlesInfo
  nameWithType: CloseHandlesInfo
  fullName: com.azure.storage.file.share.models.CloseHandlesInfo
