### YamlMime:JavaType
uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient"
fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient"
name: "ShareDirectoryAsyncClient"
nameWithType: "ShareDirectoryAsyncClient"
summary: "This class provides a client that contains all the operations for interacting with directory in Azure Storage File Service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ShareDirectoryAsyncClient"
methods:
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.create()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.create()"
  name: "create()"
  nameWithType: "ShareDirectoryAsyncClient.create()"
  summary: "Creates this directory in the file share and returns a response of <xref uid=\"com.azure.storage.file.share.models.ShareDirectoryInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryInfo\"></xref> to interact with it."
  syntax: "public Mono<ShareDirectoryInfo> create()"
  desc: "Creates this directory in the file share and returns a response of <xref uid=\"com.azure.storage.file.share.models.ShareDirectoryInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryInfo\"></xref> to interact with it.\n\n**Code Samples**\n\nCreate the directory\n\n```java\nshareDirectoryAsyncClient.create().subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Completed creating the directory!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareDirectoryInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"directory info\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryInfo?alt=com.azure.storage.file.share.models.ShareDirectoryInfo&text=ShareDirectoryInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile(java.lang.String,long)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createFile(String fileName, long maxSize)"
  name: "createFile(String fileName, long maxSize)"
  nameWithType: "ShareDirectoryAsyncClient.createFile(String fileName, long maxSize)"
  summary: "Creates a file in this directory with specific name, max number of results and returns a response of Share<wbr>Directory<wbr>Info to interact with it."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Size of the file"
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileAsyncClient> createFile(String fileName, long maxSize)"
  desc: "Creates a file in this directory with specific name, max number of results and returns a response of ShareDirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate 1k file with named \"myFile\"\n\n```java\nshareDirectoryAsyncClient.createFile(\"myfile\", 1024).subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed creating the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "The ShareFileAsyncClient."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  name: "createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  summary: "Creates a file in this directory with specific name and returns a response of Share<wbr>Directory<wbr>Info to interact with it."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Max size of the file"
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  desc: "Creates a file in this directory with specific name and returns a response of ShareDirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the file named \"myFile\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareDirectoryAsyncClient.createFileWithResponse(\"myFile\", 1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\")).subscribe(\n         response -> System.out.printf(\"Creating the file completed with status code %d\", response.getStatusCode()),\n         error -> System.err.println(error.toString()),\n         () -> System.out.println(\"Completed creating the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing the directory info and the status of creating the directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  name: "createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  nameWithType: "ShareDirectoryAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  summary: "Creates a file in this directory with specific name and returns a response of Share<wbr>Directory<wbr>Info to interact with it."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Max size of the file"
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  desc: "Creates a file in this directory with specific name and returns a response of ShareDirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the file named \"myFile\"\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n\n shareDirectoryAsyncClient.createFileWithResponse(\"myFile\", 1024, httpHeaders, smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"), requestConditions).subscribe(\n         response -> System.out.printf(\"Creating the file completed with status code %d\", response.getStatusCode()),\n         error -> System.err.println(error.toString()),\n         () -> System.out.println(\"Completed creating the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing the directory info and the status of creating the directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createIfNotExists()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "ShareDirectoryAsyncClient.createIfNotExists()"
  summary: "Creates this directory in the file share if it does not exist."
  syntax: "public Mono<ShareDirectoryInfo> createIfNotExists()"
  desc: "Creates this directory in the file share if it does not exist.\n\n**Code Samples**\n\nCreate the directory\n\n```java\nshareDirectoryAsyncClient.createIfNotExists().subscribe(response ->\n     System.out.printf(\"Created at %s%n\", response.getLastModified()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A reactive response signaling completion. <xref uid=\"com.azure.storage.file.share.models.ShareDirectoryInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryInfo\"></xref> contains information about the\n created directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryInfo?alt=com.azure.storage.file.share.models.ShareDirectoryInfo&text=ShareDirectoryInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createIfNotExistsWithResponse(com.azure.storage.file.share.options.ShareDirectoryCreateOptions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createIfNotExistsWithResponse(ShareDirectoryCreateOptions options)"
  name: "createIfNotExistsWithResponse(ShareDirectoryCreateOptions options)"
  nameWithType: "ShareDirectoryAsyncClient.createIfNotExistsWithResponse(ShareDirectoryCreateOptions options)"
  summary: "Creates a directory in the file share if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareDirectoryCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareDirectoryCreateOptions?alt=com.azure.storage.file.share.options.ShareDirectoryCreateOptions&text=ShareDirectoryCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareDirectoryInfo>> createIfNotExistsWithResponse(ShareDirectoryCreateOptions options)"
  desc: "Creates a directory in the file share if it does not exist.\n\n**Code Samples**\n\nCreate the directory\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n Map<String, String> metadata = Collections.singletonMap(\"directory\", \"metadata\");\n ShareDirectoryCreateOptions options = new ShareDirectoryCreateOptions().setSmbProperties(smbProperties)\n     .setFilePermission(filePermission).setMetadata(metadata);\n\n shareDirectoryAsyncClient.createIfNotExistsWithResponse(options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> signaling completion, whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref>\n contains a <xref uid=\"com.azure.storage.file.share.models.ShareDirectoryInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryInfo\"></xref> containing information about the directory. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status\n code is 201, a new directory was successfully created. If status code is 409, a directory already existed at this\n location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryInfo?alt=com.azure.storage.file.share.models.ShareDirectoryInfo&text=ShareDirectoryInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectory(String subdirectoryName)"
  name: "createSubdirectory(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.createSubdirectory(String subdirectoryName)"
  summary: "Creates a subdirectory under current directory with specific name and returns a response of Share<wbr>Directory<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareDirectoryAsyncClient> createSubdirectory(String subdirectoryName)"
  desc: "Creates a subdirectory under current directory with specific name and returns a response of ShareDirectoryAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the sub directory \"subdir\"\n\n```java\nshareDirectoryAsyncClient.createSubdirectory(\"subdir\")\n     .doOnSuccess(response -> System.out.println(\"Completed creating the subdirectory.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A subdirectory client."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryIfNotExists(String subdirectoryName)"
  name: "createSubdirectoryIfNotExists(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.createSubdirectoryIfNotExists(String subdirectoryName)"
  summary: "Creates a subdirectory under current directory with specific name if it does not exist and returns a response of Share<wbr>Directory<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareDirectoryAsyncClient> createSubdirectoryIfNotExists(String subdirectoryName)"
  desc: "Creates a subdirectory under current directory with specific name if it does not exist and returns a response of ShareDirectoryAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the sub directory \"subdir\"\n\n```java\nshareDirectoryAsyncClient.createSubdirectoryIfNotExists(\"subdir\")\n     .switchIfEmpty(Mono.<ShareDirectoryAsyncClient>empty()\n         .doOnSuccess(x -> System.out.println(\"Already exists.\")))\n     .subscribe(response -> System.out.println(\"Create completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> used to interact with the subdirectory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(java.lang.String,com.azure.storage.file.share.options.ShareDirectoryCreateOptions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, ShareDirectoryCreateOptions options)"
  name: "createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, ShareDirectoryCreateOptions options)"
  nameWithType: "ShareDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, ShareDirectoryCreateOptions options)"
  summary: "Creates a subdirectory under current directory with specific name and metadata if it does not exist, and returns a response of Share<wbr>Directory<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareDirectoryCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareDirectoryCreateOptions?alt=com.azure.storage.file.share.options.ShareDirectoryCreateOptions&text=ShareDirectoryCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareDirectoryAsyncClient>> createSubdirectoryIfNotExistsWithResponse(String subdirectoryName, ShareDirectoryCreateOptions options)"
  desc: "Creates a subdirectory under current directory with specific name and metadata if it does not exist, and returns a response of ShareDirectoryAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the subdirectory named \"subdir\", with metadata\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n Map<String, String> metadata = Collections.singletonMap(\"directory\", \"metadata\");\n ShareDirectoryCreateOptions options = new ShareDirectoryCreateOptions().setSmbProperties(smbProperties)\n     .setFilePermission(filePermission).setMetadata(metadata);\n\n shareDirectoryAsyncClient.createSubdirectoryIfNotExistsWithResponse(\"subdir\", options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A reactive response signaling completion. The presence of a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> item indicates a new\n subdirectory was created, and <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref>\n which can be used to interact with the newly created directory. An empty <code>Mono</code> indicates the specified\n subdirectory already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  name: "createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareDirectoryAsyncClient.createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  summary: "Creates a subdirectory under current directory with specific name , metadata and returns a response of Share<wbr>Directory<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The SMB properties of the directory."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the directory."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional metadata to associate with the subdirectory"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareDirectoryAsyncClient>> createSubdirectoryWithResponse(String subdirectoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  desc: "Creates a subdirectory under current directory with specific name , metadata and returns a response of ShareDirectoryAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the subdirectory named \"subdir\", with metadata\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n Map<String, String> metadata = Collections.singletonMap(\"directory\", \"metadata\");\n shareDirectoryAsyncClient.createSubdirectoryWithResponse(\"subdir\", smbProperties, filePermission, metadata).subscribe(\n     response ->\n         System.out.println(\"Successfully creating the subdirectory with status code: \"\n             + response.getStatusCode()),\n     error -> System.err.println(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A response containing the subdirectory client and the status of creating the directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  name: "createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareDirectoryAsyncClient.createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  summary: "Creates a directory in the file share and returns a response of Share<wbr>Directory<wbr>Info to interact with it."
  parameters:
  - description: "The SMB properties of the directory."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the directory."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional metadata to associate with the directory"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareDirectoryInfo>> createWithResponse(FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  desc: "Creates a directory in the file share and returns a response of ShareDirectoryInfo to interact with it.\n\n**Code Samples**\n\nCreate the directory\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n Map<String, String> metadata = Collections.singletonMap(\"directory\", \"metadata\");\n shareDirectoryAsyncClient.createWithResponse(smbProperties, filePermission, metadata).subscribe(\n     response ->\n         System.out.println(\"Completed creating the directory with status code:\" + response.getStatusCode()),\n     error -> System.err.print(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A response containing the directory info and the status of creating the directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryInfo?alt=com.azure.storage.file.share.models.ShareDirectoryInfo&text=ShareDirectoryInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.delete()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.delete()"
  name: "delete()"
  nameWithType: "ShareDirectoryAsyncClient.delete()"
  summary: "Deletes the directory in the file share."
  syntax: "public Mono<Void> delete()"
  desc: "Deletes the directory in the file share.\n\n**Code Samples**\n\nDelete the directory\n\n```java\nshareDirectoryAsyncClient.delete().subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFile(String fileName)"
  name: "deleteFile(String fileName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteFile(String fileName)"
  summary: "Deletes the file with specific name in this directory."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteFile(String fileName)"
  desc: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n```java\nshareDirectoryAsyncClient.deleteFile(\"myfile\").subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileIfExists(String fileName)"
  name: "deleteFileIfExists(String fileName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteFileIfExists(String fileName)"
  summary: "Deletes the file with specific name in this directory if it exists."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteFileIfExists(String fileName)"
  desc: "Deletes the file with specific name in this directory if it exists.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n```java\nshareDirectoryAsyncClient.deleteFileIfExists(\"myfile\").subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the file was successfully\n deleted, <code>false</code> indicates that the file did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileIfExistsWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileIfExistsWithResponse(String fileName)"
  name: "deleteFileIfExistsWithResponse(String fileName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteFileIfExistsWithResponse(String fileName)"
  summary: "Deletes the file with specific name in this directory if it exists."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteFileIfExistsWithResponse(String fileName)"
  desc: "Deletes the file with specific name in this directory if it exists.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n```java\nshareDirectoryAsyncClient.deleteFileIfExistsWithResponse(\"myfile\").subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileIfExistsWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  name: "deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  nameWithType: "ShareDirectoryAsyncClient.deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  summary: "Deletes the file with specific name in this directory if it exists."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  desc: "Deletes the file with specific name in this directory if it exists.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n\n shareDirectoryAsyncClient.deleteFileIfExistsWithResponse(\"myfile\", requestConditions).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName)"
  name: "deleteFileWithResponse(String fileName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName)"
  summary: "Deletes the file with specific name in this directory."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileWithResponse(String fileName)"
  desc: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n```java\nshareDirectoryAsyncClient.deleteFileWithResponse(\"myfile\").subscribe(\n     response -> System.out.printf(\"Delete file completed with status code %d\", response.getStatusCode()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  name: "deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  nameWithType: "ShareDirectoryAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  summary: "Deletes the file with specific name in this directory."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  desc: "Deletes the file with specific name in this directory.\n\n**Code Samples**\n\nDelete the file \"filetest\"\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareDirectoryAsyncClient.deleteFileWithResponse(\"myfile\", requestConditions).subscribe(\n     response -> System.out.printf(\"Delete file completed with status code %d\", response.getStatusCode()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "ShareDirectoryAsyncClient.deleteIfExists()"
  summary: "Deletes the directory in the file share if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Deletes the directory in the file share if it exists.\n\n**Code Samples**\n\nDelete the directory\n\n```java\nshareDirectoryAsyncClient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the directory was successfully\n deleted, <code>false</code> indicates that the directory did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteIfExistsWithResponse()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteIfExistsWithResponse()"
  name: "deleteIfExistsWithResponse()"
  nameWithType: "ShareDirectoryAsyncClient.deleteIfExistsWithResponse()"
  summary: "Deletes the directory in the file share if it exists."
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse()"
  desc: "Deletes the directory in the file share if it exists.\n\n**Code Samples**\n\nDelete the directory\n\n```java\nshareDirectoryAsyncClient.deleteIfExistsWithResponse().subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the directory was\n successfully deleted. If status code is 404, the directory does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)"
  name: "deleteSubdirectory(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteSubdirectory(String subdirectoryName)"
  summary: "Deletes the subdirectory with specific name in this directory."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteSubdirectory(String subdirectoryName)"
  desc: "Deletes the subdirectory with specific name in this directory.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n```java\nshareDirectoryAsyncClient.deleteSubdirectory(\"mysubdirectory\").subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed deleting the subdirectory.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "An empty response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryIfExists(String subdirectoryName)"
  name: "deleteSubdirectoryIfExists(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteSubdirectoryIfExists(String subdirectoryName)"
  summary: "Deletes the subdirectory with specific name in this directory if it exists."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteSubdirectoryIfExists(String subdirectoryName)"
  desc: "Deletes the subdirectory with specific name in this directory if it exists.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n```java\nshareDirectoryAsyncClient.deleteSubdirectoryIfExists(\"mysubdirectory\").subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the subdirectory was successfully\n deleted, <code>false</code> indicates that the subdirectory did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(String subdirectoryName)"
  name: "deleteSubdirectoryIfExistsWithResponse(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(String subdirectoryName)"
  summary: "Deletes the subdirectory with specific name in this directory if it exists."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteSubdirectoryIfExistsWithResponse(String subdirectoryName)"
  desc: "Deletes the subdirectory with specific name in this directory if it exists.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n```java\nshareDirectoryAsyncClient.deleteSubdirectoryIfExistsWithResponse(\"mysubdirectory\").subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the subdirectory was\n successfully deleted. If status code is 404, the subdirectory does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(String subdirectoryName)"
  name: "deleteSubdirectoryWithResponse(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.deleteSubdirectoryWithResponse(String subdirectoryName)"
  summary: "Deletes the subdirectory with specific name in this directory."
  parameters:
  - description: "Name of the subdirectory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteSubdirectoryWithResponse(String subdirectoryName)"
  desc: "Deletes the subdirectory with specific name in this directory.\n\n**Code Samples**\n\nDelete the subdirectory named \"subdir\"\n\n```java\nshareDirectoryAsyncClient.deleteSubdirectoryWithResponse(\"mysubdirectory\").subscribe(\n     response -> System.out.printf(\"Delete subdirectory completed with status code %d\",\n         response.getStatusCode()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed deleting the subdirectory.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.deleteWithResponse()"
  name: "deleteWithResponse()"
  nameWithType: "ShareDirectoryAsyncClient.deleteWithResponse()"
  summary: "Deletes the directory in the file share."
  syntax: "public Mono<Response<Void>> deleteWithResponse()"
  desc: "Deletes the directory in the file share.\n\n**Code Samples**\n\nDelete the directory\n\n```java\nshareDirectoryAsyncClient.deleteWithResponse().subscribe(\n     response -> System.out.printf(\"Delete completed with status code %d\", response.getStatusCode()),\n     error -> System.err.println(error.toString())\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.exists()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.exists()"
  name: "exists()"
  nameWithType: "ShareDirectoryAsyncClient.exists()"
  summary: "Determines if the directory this client represents exists in the cloud."
  syntax: "public Mono<Boolean> exists()"
  desc: "Determines if the directory this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  returns:
    description: "Flag indicating existence of the directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.existsWithResponse()"
  name: "existsWithResponse()"
  nameWithType: "ShareDirectoryAsyncClient.existsWithResponse()"
  summary: "Determines if the directory this client represents exists in the cloud."
  syntax: "public Mono<Response<Boolean>> existsWithResponse()"
  desc: "Determines if the directory this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  returns:
    description: "Flag indicating existence of the directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles(boolean)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseAllHandles(boolean recursive)"
  name: "forceCloseAllHandles(boolean recursive)"
  nameWithType: "ShareDirectoryAsyncClient.forceCloseAllHandles(boolean recursive)"
  summary: "Closes all handles opened on the directory at the service."
  parameters:
  - description: "Flag indicating if the operation should apply to all subdirectories and files contained in the\n directory."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CloseHandlesInfo> forceCloseAllHandles(boolean recursive)"
  desc: "Closes all handles opened on the directory at the service.\n\n**Code Samples**\n\nForce close all handles recursively.\n\n```java\nshareDirectoryAsyncClient.forceCloseAllHandles(true).subscribe(closeHandlesInfo ->\n     System.out.printf(\"Closed %d open handles on the directory%nFailed to close %d open handles on the \"\n         + \"directory%n\", closeHandlesInfo.getClosedHandles(), closeHandlesInfo.getFailedHandles()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/force-close-handles"
  returns:
    description: "A response that contains information about the closed handles."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.CloseHandlesInfo?alt=com.azure.storage.file.share.models.CloseHandlesInfo&text=CloseHandlesInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandle(String handleId)"
  name: "forceCloseHandle(String handleId)"
  nameWithType: "ShareDirectoryAsyncClient.forceCloseHandle(String handleId)"
  summary: "Closes a handle on the directory."
  parameters:
  - description: "Handle ID to be closed."
    name: "handleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CloseHandlesInfo> forceCloseHandle(String handleId)"
  desc: "Closes a handle on the directory. This is intended to be used alongside <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listHandles(Integer, boolean)\"></xref>.\n\n**Code Samples**\n\nForce close handles returned by list handles.\n\n```java\nshareDirectoryAsyncClient.listHandles(null, true).subscribe(handleItem ->\n     shareDirectoryAsyncClient.forceCloseHandle(handleItem.getHandleId()).subscribe(ignored ->\n         System.out.printf(\"Closed handle %s on resource %s%n\",\n             handleItem.getHandleId(), handleItem.getPath())));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/force-close-handles"
  returns:
    description: "A response that contains information about the closed handles."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.CloseHandlesInfo?alt=com.azure.storage.file.share.models.CloseHandlesInfo&text=CloseHandlesInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.forceCloseHandleWithResponse(String handleId)"
  name: "forceCloseHandleWithResponse(String handleId)"
  nameWithType: "ShareDirectoryAsyncClient.forceCloseHandleWithResponse(String handleId)"
  summary: "Closes a handle on the directory."
  parameters:
  - description: "Handle ID to be closed."
    name: "handleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CloseHandlesInfo>> forceCloseHandleWithResponse(String handleId)"
  desc: "Closes a handle on the directory. This is intended to be used alongside <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#listHandles(Integer, boolean)\"></xref>.\n\n**Code Samples**\n\nForce close handles returned by list handles.\n\n```java\nshareDirectoryAsyncClient.listHandles(null, true).subscribe(handleItem ->\n     shareDirectoryAsyncClient.forceCloseHandleWithResponse(handleItem.getHandleId()).subscribe(response ->\n         System.out.printf(\"Closing handle %s on resource %s completed with status code %d%n\",\n             handleItem.getHandleId(), handleItem.getPath(), response.getStatusCode())));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/force-close-handles"
  returns:
    description: "A response that contains information about the closed handles along with headers and response status\n code."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.CloseHandlesInfo?alt=com.azure.storage.file.share.models.CloseHandlesInfo&text=CloseHandlesInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  nameWithType: "ShareDirectoryAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  summary: "Generates a service SAS for the directory using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
    name: "shareServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues?alt=com.azure.storage.file.share.sas.ShareServiceSasSignatureValues&text=ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  desc: "Generates a service SAS for the directory using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n\n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n shareDirectoryAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  nameWithType: "ShareDirectoryAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the directory using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
    name: "shareServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues?alt=com.azure.storage.file.share.sas.ShareServiceSasSignatureValues&text=ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the directory using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareFileSasPermission permission = new ShareFileSasPermission().setReadPermission(true);\n\n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n shareDirectoryAsyncClient.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "ShareDirectoryAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryPath()"
  name: "getDirectoryPath()"
  nameWithType: "ShareDirectoryAsyncClient.getDirectoryPath()"
  summary: "Get directory path of the client."
  syntax: "public String getDirectoryPath()"
  desc: "Get directory path of the client.\n\nGet directory path.\n\n```java\nString directoryPath = shareDirectoryAsyncClient.getDirectoryPath();\n System.out.println(\"The name of the directory is \" + directoryPath);\n```"
  returns:
    description: "The path of the directory."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getDirectoryUrl()"
  name: "getDirectoryUrl()"
  nameWithType: "ShareDirectoryAsyncClient.getDirectoryUrl()"
  summary: "Get the url of the storage directory client."
  syntax: "public String getDirectoryUrl()"
  desc: "Get the url of the storage directory client."
  returns:
    description: "the URL of the storage directory client"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getFileClient(String fileName)"
  name: "getFileClient(String fileName)"
  nameWithType: "ShareDirectoryAsyncClient.getFileClient(String fileName)"
  summary: "Constructs a Share<wbr>File<wbr>Async<wbr>Client that interacts with the specified file."
  parameters:
  - description: "Name of the file"
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareFileAsyncClient getFileClient(String fileName)"
  desc: "Constructs a ShareFileAsyncClient that interacts with the specified file.\n\nIf the file doesn't exist in this directory <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.create(long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#create(long)\"></xref> create\\} in the client will need to be called before interaction with the file can happen."
  returns:
    description: "a ShareFileAsyncClient that interacts with the specified share"
    type: "<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "ShareDirectoryAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "ShareDirectoryAsyncClient.getProperties()"
  summary: "Retrieves the properties of this directory."
  syntax: "public Mono<ShareDirectoryProperties> getProperties()"
  desc: "Retrieves the properties of this directory. The properties include directory metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve directory properties\n\n```java\nshareDirectoryAsyncClient.getProperties().subscribe(properties -> {\n     System.out.printf(\"Directory latest modified date is %s.\", properties.getLastModified());\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-directory-properties"
  returns:
    description: "Storage directory properties"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryProperties?alt=com.azure.storage.file.share.models.ShareDirectoryProperties&text=ShareDirectoryProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "ShareDirectoryAsyncClient.getPropertiesWithResponse()"
  summary: "Retrieves the properties of this directory."
  syntax: "public Mono<Response<ShareDirectoryProperties>> getPropertiesWithResponse()"
  desc: "Retrieves the properties of this directory. The properties include directory metadata, last modified date, is server encrypted, and eTag.\n\n**Code Samples**\n\nRetrieve directory properties\n\n```java\nshareDirectoryAsyncClient.getPropertiesWithResponse().subscribe(properties -> {\n     System.out.printf(\"Directory latest modified date is %s:\", properties.getValue().getLastModified());\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-directory-properties"
  returns:
    description: "A response containing the storage directory properties with headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryProperties?alt=com.azure.storage.file.share.models.ShareDirectoryProperties&text=ShareDirectoryProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "ShareDirectoryAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public ShareServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.share.ShareServiceVersion?alt=com.azure.storage.file.share.ShareServiceVersion&text=ShareServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareName()"
  name: "getShareName()"
  nameWithType: "ShareDirectoryAsyncClient.getShareName()"
  summary: "Get the share name of directory client."
  syntax: "public String getShareName()"
  desc: "Get the share name of directory client.\n\nGet the share name.\n\n```java\nString shareName = shareDirectoryAsyncClient.getShareName();\n System.out.println(\"The share name of the directory is \" + shareName);\n```"
  returns:
    description: "The share name of the directory."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getShareSnapshotId()"
  name: "getShareSnapshotId()"
  nameWithType: "ShareDirectoryAsyncClient.getShareSnapshotId()"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref>."
  syntax: "public String getShareSnapshotId()"
  desc: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareDirectoryAsyncClient shareDirectoryAsyncClient = new ShareFileClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .resourcePath(\"mydirectory\")\n     .snapshot(currentTime.toString())\n     .buildDirectoryAsyncClient();\n\n System.out.printf(\"Snapshot ID: %s%n\", shareDirectoryAsyncClient.getShareSnapshotId());\n```"
  returns:
    description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.getSubdirectoryClient(String subdirectoryName)"
  name: "getSubdirectoryClient(String subdirectoryName)"
  nameWithType: "ShareDirectoryAsyncClient.getSubdirectoryClient(String subdirectoryName)"
  summary: "Constructs a Share<wbr>Directory<wbr>Async<wbr>Client that interacts with the specified directory."
  parameters:
  - description: "Name of the directory"
    name: "subdirectoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareDirectoryAsyncClient getSubdirectoryClient(String subdirectoryName)"
  desc: "Constructs a ShareDirectoryAsyncClient that interacts with the specified directory.\n\nIf the file doesn't exist in this directory <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient.create()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient#create()\"></xref> create\\} in the client will need to be called before interaction with the directory can happen."
  returns:
    description: "a ShareDirectoryAsyncClient that interacts with the specified directory"
    type: "<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories()"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories()"
  name: "listFilesAndDirectories()"
  nameWithType: "ShareDirectoryAsyncClient.listFilesAndDirectories()"
  summary: "Lists all sub-directories and files in this directory without their prefix or max<wbr>Results in single page."
  syntax: "public PagedFlux<ShareFileItem> listFilesAndDirectories()"
  desc: "Lists all sub-directories and files in this directory without their prefix or maxResults in single page.\n\n**Code Samples**\n\nList all sub-directories and files in the account\n\n```java\nshareDirectoryAsyncClient.listFilesAndDirectories().subscribe(\n     fileRef -> System.out.printf(\"Is the resource a directory? %b. The resource name is: %s.\",\n         fileRef.isDirectory(), fileRef.getName()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed listing the directories and files.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-directories-and-files"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File info\"></xref> in the storage directory"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileItem?alt=com.azure.storage.file.share.models.ShareFileItem&text=ShareFileItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(com.azure.storage.file.share.options.ShareListFilesAndDirectoriesOptions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(ShareListFilesAndDirectoriesOptions options)"
  name: "listFilesAndDirectories(ShareListFilesAndDirectoriesOptions options)"
  nameWithType: "ShareDirectoryAsyncClient.listFilesAndDirectories(ShareListFilesAndDirectoriesOptions options)"
  summary: "Lists all sub-directories and files in this directory with their prefix or snapshots."
  parameters:
  - description: "Optional parameters.\n the server will return up to 5,000 items."
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareListFilesAndDirectoriesOptions?alt=com.azure.storage.file.share.options.ShareListFilesAndDirectoriesOptions&text=ShareListFilesAndDirectoriesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareFileItem> listFilesAndDirectories(ShareListFilesAndDirectoriesOptions options)"
  desc: "Lists all sub-directories and files in this directory with their prefix or snapshots.\n\n**Code Samples**\n\nList all sub-directories with \"subdir\" prefix and return 10 results in the account\n\n```java\nshareDirectoryAsyncClient.listFilesAndDirectories(new ShareListFilesAndDirectoriesOptions()\n     .setPrefix(\"subdir\").setMaxResultsPerPage(10))\n     .subscribe(fileRef -> System.out.printf(\"Is the resource a directory? %b. The resource name is: %s.\",\n         fileRef.isDirectory(), fileRef.getName()),\n         error -> System.err.println(error.toString()),\n         () -> System.out.println(\"Completed listing the directories and files.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-directories-and-files"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File info\"></xref> in this directory with prefix and max number of return results."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileItem?alt=com.azure.storage.file.share.models.ShareFileItem&text=ShareFileItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(java.lang.String,java.lang.Integer)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listFilesAndDirectories(String prefix, Integer maxResultsPerPage)"
  name: "listFilesAndDirectories(String prefix, Integer maxResultsPerPage)"
  nameWithType: "ShareDirectoryAsyncClient.listFilesAndDirectories(String prefix, Integer maxResultsPerPage)"
  summary: "Lists all sub-directories and files in this directory with their prefix or snapshots."
  parameters:
  - description: "Optional prefix which filters the results to return only files and directories whose name begins\n with."
    name: "prefix"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional maximum number of files and/or directories to return per page. If the request\n does not specify maxResultsPerPage or specifies a value greater than 5,000,\n the server will return up to 5,000 items."
    name: "maxResultsPerPage"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareFileItem> listFilesAndDirectories(String prefix, Integer maxResultsPerPage)"
  desc: "Lists all sub-directories and files in this directory with their prefix or snapshots.\n\n**Code Samples**\n\nList all sub-directories with \"subdir\" prefix and return 10 results in the account\n\n```java\nshareDirectoryAsyncClient.listFilesAndDirectories(\"subdir\", 10).subscribe(\n     fileRef -> System.out.printf(\"Is the resource a directory? %b. The resource name is: %s.\",\n         fileRef.isDirectory(), fileRef.getName()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Completed listing the directories and files.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-directories-and-files"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareFileItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File info\"></xref> in this directory with prefix and max number of return results."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareFileItem?alt=com.azure.storage.file.share.models.ShareFileItem&text=ShareFileItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(java.lang.Integer,boolean)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.listHandles(Integer maxResultPerPage, boolean recursive)"
  name: "listHandles(Integer maxResultPerPage, boolean recursive)"
  nameWithType: "ShareDirectoryAsyncClient.listHandles(Integer maxResultPerPage, boolean recursive)"
  summary: "List of open handles on a directory or a file."
  parameters:
  - description: "Optional maximum number of results will return per page"
    name: "maxResultPerPage"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies operation should apply to the directory specified in the URI, its files, its\n subdirectories and their files."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<HandleItem> listHandles(Integer maxResultPerPage, boolean recursive)"
  desc: "List of open handles on a directory or a file.\n\n**Code Samples**\n\nGet 10 handles with recursive call.\n\n```java\nshareDirectoryAsyncClient.listHandles(10, true)\n     .subscribe(handleItem -> System.out.printf(\"Get handles completed with handle id %s\",\n         handleItem.getHandleId()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-handles"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.HandleItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"handles\"></xref> in the directory that satisfy the requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.HandleItem?alt=com.azure.storage.file.share.models.HandleItem&text=HandleItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.rename(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.rename(String destinationPath)"
  name: "rename(String destinationPath)"
  nameWithType: "ShareDirectoryAsyncClient.rename(String destinationPath)"
  summary: "Moves the directory to another location within the share."
  parameters:
  - description: "Relative path from the share to rename the directory to."
    name: "destinationPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareDirectoryAsyncClient> rename(String destinationPath)"
  desc: "Moves the directory to another location within the share. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nShareDirectoryAsyncClient renamedClient = client.rename(destinationPath).block();\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/rename-directory"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> used to interact with the new file created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.renameWithResponse(com.azure.storage.file.share.options.ShareFileRenameOptions)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.renameWithResponse(ShareFileRenameOptions options)"
  name: "renameWithResponse(ShareFileRenameOptions options)"
  nameWithType: "ShareDirectoryAsyncClient.renameWithResponse(ShareFileRenameOptions options)"
  summary: "Moves the directory to another location within the share."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareFileRenameOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileRenameOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareFileRenameOptions?alt=com.azure.storage.file.share.options.ShareFileRenameOptions&text=ShareFileRenameOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareDirectoryAsyncClient>> renameWithResponse(ShareFileRenameOptions options)"
  desc: "Moves the directory to another location within the share. For more information see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n ShareFileRenameOptions options = new ShareFileRenameOptions(destinationPath)\n     .setDestinationRequestConditions(new ShareRequestConditions().setLeaseId(leaseId))\n     .setSourceRequestConditions(new ShareRequestConditions().setLeaseId(leaseId))\n     .setIgnoreReadOnly(false)\n     .setReplaceIfExists(false)\n     .setFilePermission(\"filePermission\")\n     .setSmbProperties(smbProperties);\n\n ShareDirectoryAsyncClient newRenamedClient = client.renameWithResponse(options).block().getValue();\n System.out.println(\"Directory Client has been renamed\");\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/rename-directory"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> used to interact with the directory created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "ShareDirectoryAsyncClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the user-defined metadata to associate to the directory."
  parameters:
  - description: "Optional metadata to set on the directory, if null is passed the metadata for the directory is\n cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ShareDirectorySetMetadataInfo> setMetadata(Map<String,String> metadata)"
  desc: "Sets the user-defined metadata to associate to the directory.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the directory.\n\n**Code Samples**\n\nSet the metadata to \"directory:updatedMetadata\"\n\n```java\nshareDirectoryAsyncClient.setMetadata(Collections.singletonMap(\"directory\", \"updatedMetadata\"))\n     .subscribe(response -> System.out.println(\"Setting the directory metadata completed.\"));\n```\n\nClear the metadata of the directory\n\n```java\nshareDirectoryAsyncClient.setMetadata(null)\n     .doOnSuccess(response -> System.out.println(\"Clearing the directory metadata completed\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-directory-metadata"
  returns:
    description: "information about the directory"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo?alt=com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo&text=ShareDirectorySetMetadataInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "ShareDirectoryAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  summary: "Sets the user-defined metadata to associate to the directory."
  parameters:
  - description: "Optional metadata to set on the directory, if null is passed the metadata for the directory is\n cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareDirectorySetMetadataInfo>> setMetadataWithResponse(Map<String,String> metadata)"
  desc: "Sets the user-defined metadata to associate to the directory.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the directory.\n\n**Code Samples**\n\nSet the metadata to \"directory:updatedMetadata\"\n\n```java\nshareDirectoryAsyncClient.setMetadataWithResponse(Collections.singletonMap(\"directory\", \"updatedMetadata\"))\n     .subscribe(response -> System.out.println(\"Setting the directory metadata completed with status code:\"\n         + response.getStatusCode()));\n```\n\nClear the metadata of the directory\n\n```java\nshareDirectoryAsyncClient.setMetadataWithResponse(null).subscribe(\n     response -> System.out.printf(\"Clearing the directory metadata completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-directory-metadata"
  returns:
    description: "A response containing the information about the directory with headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo?alt=com.azure.storage.file.share.models.ShareDirectorySetMetadataInfo&text=ShareDirectorySetMetadataInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties(com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setProperties(FileSmbProperties smbProperties, String filePermission)"
  name: "setProperties(FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "ShareDirectoryAsyncClient.setProperties(FileSmbProperties smbProperties, String filePermission)"
  summary: "Sets the properties of this directory."
  parameters:
  - description: "The SMB properties of the directory."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the directory."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareDirectoryInfo> setProperties(FileSmbProperties smbProperties, String filePermission)"
  desc: "Sets the properties of this directory. The properties include the file SMB properties and the file permission.\n\n**Code Samples**\n\nSet directory properties\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n shareDirectoryAsyncClient.setProperties(smbProperties, filePermission).subscribe(properties -> {\n     System.out.printf(\"Directory latest modified date is %s:\", properties.getLastModified());\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-directory-properties"
  returns:
    description: "The storage directory SMB properties"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryInfo?alt=com.azure.storage.file.share.models.ShareDirectoryInfo&text=ShareDirectoryInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.FileSmbProperties,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareDirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  name: "setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  nameWithType: "ShareDirectoryAsyncClient.setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  summary: "Sets the properties of this directory."
  parameters:
  - description: "The SMB properties of the directory."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the directory."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareDirectoryInfo>> setPropertiesWithResponse(FileSmbProperties smbProperties, String filePermission)"
  desc: "Sets the properties of this directory. The properties include the file SMB properties and the file permission.\n\n**Code Samples**\n\nSet directory properties\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n shareDirectoryAsyncClient.setPropertiesWithResponse(smbProperties, filePermission).subscribe(properties -> {\n     System.out.printf(\"Directory latest modified date is %s:\", properties.getValue().getLastModified());\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-directory-properties"
  returns:
    description: "A response containing the storage directory smb properties with headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareDirectoryInfo?alt=com.azure.storage.file.share.models.ShareDirectoryInfo&text=ShareDirectoryInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all the operations for interacting with directory in Azure Storage File Service. Operations allowed by the client are creating, deleting and listing subdirectory and file, retrieving properties, setting metadata and list or force close handles of the directory or file.\n\n**Instantiating an Asynchronous Directory Client**\n\n```java\nShareDirectoryAsyncClient client = new ShareFileClientBuilder()\n     .connectionString(\"${connectionString}\")\n     .endpoint(\"${endpoint}\")\n     .buildDirectoryAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.ShareFileClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.storage.file.share"
artifact: com.azure:azure-storage-file-share:12.14.0-beta.1
