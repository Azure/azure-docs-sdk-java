### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient.beginComposeModel*"
fullName: "com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient.beginComposeModel"
name: "beginComposeModel"
nameWithType: "DocumentModelAdministrationClient.beginComposeModel"
members:
- uid: "com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient.beginComposeModel(java.util.List<java.lang.String>)"
  fullName: "com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient.beginComposeModel(List<String> componentModelIds)"
  name: "beginComposeModel(List<String> componentModelIds)"
  nameWithType: "DocumentModelAdministrationClient.beginComposeModel(List<String> componentModelIds)"
  summary: "Create a composed model from the provided list of existing models in the account."
  parameters:
  - description: "The list of models IDs to form the composed model."
    name: "componentModelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public SyncPoller<DocumentOperationResult,DocumentModelDetails> beginComposeModel(List<String> componentModelIds)"
  desc: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate IDs.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString modelId1 = \"{custom-model-id_1}\";\n String modelId2 = \"{custom-model-id_2}\";\n final DocumentModelDetails documentModelDetails\n     = documentModelAdministrationClient.beginComposeModel(Arrays.asList(modelId1, modelId2))\n     .getFinalResult();\n\n System.out.printf(\"Model ID: %s%n\", documentModelDetails.getModelId());\n System.out.printf(\"Model Description: %s%n\", documentModelDetails.getDescription());\n System.out.printf(\"Model Created on: %s%n\", documentModelDetails.getCreatedOn());\n documentModelDetails.getDocumentTypes().forEach((key, documentTypeDetails) -> {\n     documentTypeDetails.getFieldSchema().forEach((field, documentFieldSchema) -> {\n         System.out.printf(\"Field: %s\", field);\n         System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n         System.out.printf(\"Field confidence: %.2f\", documentTypeDetails.getFieldConfidence().get(field));\n     });\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.administration.models.DocumentModelDetails\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.documentanalysis.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.documentanalysis.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.documentanalysis.administration.models.DocumentModelDetails?alt=com.azure.ai.formrecognizer.documentanalysis.administration.models.DocumentModelDetails&text=DocumentModelDetails\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient.beginComposeModel(java.util.List<java.lang.String>,com.azure.ai.formrecognizer.documentanalysis.administration.models.ComposeModelOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.documentanalysis.administration.DocumentModelAdministrationClient.beginComposeModel(List<String> componentModelIds, ComposeModelOptions composeModelOptions, Context context)"
  name: "beginComposeModel(List<String> componentModelIds, ComposeModelOptions composeModelOptions, Context context)"
  nameWithType: "DocumentModelAdministrationClient.beginComposeModel(List<String> componentModelIds, ComposeModelOptions composeModelOptions, Context context)"
  summary: "Create a composed model from the provided list of existing models in the account."
  parameters:
  - description: "The list of models IDs to form the composed model."
    name: "componentModelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The configurable <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.administration.models.ComposeModelOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass when\n creating a composed model."
    name: "composeModelOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.documentanalysis.administration.models.ComposeModelOptions?alt=com.azure.ai.formrecognizer.documentanalysis.administration.models.ComposeModelOptions&text=ComposeModelOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<DocumentOperationResult,DocumentModelDetails> beginComposeModel(List<String> componentModelIds, ComposeModelOptions composeModelOptions, Context context)"
  desc: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate IDs.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString modelId1 = \"{custom-model-id_1}\";\n String modelId2 = \"{custom-model-id_2}\";\n String modelId = \"my-composed-model\";\n Map<String, String> attrs = new HashMap<String, String>();\n attrs.put(\"createdBy\", \"sample\");\n\n final DocumentModelDetails documentModelDetails =\n     documentModelAdministrationClient.beginComposeModel(Arrays.asList(modelId1, modelId2),\n             new ComposeModelOptions()\n                 .setModelId(modelId)\n                 .setDescription(\"my composed model desc\")\n                 .setTags(attrs),\n             Context.NONE)\n         .setPollInterval(Duration.ofSeconds(5))\n         .getFinalResult();\n\n System.out.printf(\"Model ID: %s%n\", documentModelDetails.getModelId());\n System.out.printf(\"Model Description: %s%n\", documentModelDetails.getDescription());\n System.out.printf(\"Model Created on: %s%n\", documentModelDetails.getCreatedOn());\n System.out.printf(\"Model assigned tags: %s%n\", documentModelDetails.getTags());\n documentModelDetails.getDocumentTypes().forEach((key, documentTypeDetails) -> {\n     documentTypeDetails.getFieldSchema().forEach((field, documentFieldSchema) -> {\n         System.out.printf(\"Field: %s\", field);\n         System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n         System.out.printf(\"Field confidence: %.2f\", documentTypeDetails.getFieldConfidence().get(field));\n     });\n });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the <xref uid=\"com.azure.ai.formrecognizer.documentanalysis.administration.models.DocumentModelDetails\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.documentanalysis.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.documentanalysis.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.documentanalysis.administration.models.DocumentModelDetails?alt=com.azure.ai.formrecognizer.documentanalysis.administration.models.DocumentModelDetails&text=DocumentModelDetails\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer.documentanalysis.administration"
artifact: com.azure:azure-ai-formrecognizer:4.0.0-beta.6
