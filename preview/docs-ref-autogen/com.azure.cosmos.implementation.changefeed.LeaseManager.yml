### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager
  id: LeaseManager
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed
  children:
  - com.azure.cosmos.implementation.changefeed.LeaseManager.acquire(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseManager.createLeaseIfNotExist(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.changefeed.LeaseManager.delete(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseManager.release(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseManager.renew(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseManager.updateProperties(com.azure.cosmos.implementation.changefeed.Lease)
  langs:
  - java
  name: LeaseManager
  nameWithType: LeaseManager
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager
  type: Interface
  package: com.azure.cosmos.implementation.changefeed
  summary: It defines a way to perform operations with <xref uid="com.azure.cosmos.implementation.changefeed.Lease" data-throw-if-not-resolved="false">Lease</xref>.
  syntax:
    content: public interface LeaseManager
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.acquire(com.azure.cosmos.implementation.changefeed.Lease)
  id: acquire(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseManager
  langs:
  - java
  name: acquire(Lease lease)
  nameWithType: LeaseManager.acquire(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.acquire(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseManager.acquire*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Acquires ownership of the lease. It can throw <xref uid="com.azure.cosmos.implementation.changefeed.exceptions.LeaseLostException" data-throw-if-not-resolved="false">LeaseLostException</xref> if other host acquired concurrently the lease.
  syntax:
    content: public abstract Mono<Lease> acquire(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the lease to acquire.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the updated lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.createLeaseIfNotExist(java.lang.String,java.lang.String)
  id: createLeaseIfNotExist(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseManager
  langs:
  - java
  name: createLeaseIfNotExist(String leaseToken, String continuationToken)
  nameWithType: LeaseManager.createLeaseIfNotExist(String leaseToken, String continuationToken)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.createLeaseIfNotExist(String leaseToken, String continuationToken)
  overload: com.azure.cosmos.implementation.changefeed.LeaseManager.createLeaseIfNotExist*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Checks whether the lease exists and creates it if it does not exist.
  syntax:
    content: public abstract Mono<Lease> createLeaseIfNotExist(String leaseToken, String continuationToken)
    parameters:
    - id: leaseToken
      type: java.lang.String
      description: the lease token to work with.
    - id: continuationToken
      type: java.lang.String
      description: the continuation token if it exists.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.delete(com.azure.cosmos.implementation.changefeed.Lease)
  id: delete(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseManager
  langs:
  - java
  name: delete(Lease lease)
  nameWithType: LeaseManager.delete(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.delete(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseManager.delete*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Deletes the lease.
  syntax:
    content: public abstract Mono<Void> delete(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the lease to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a deferred computation of this call.
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.release(com.azure.cosmos.implementation.changefeed.Lease)
  id: release(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseManager
  langs:
  - java
  name: release(Lease lease)
  nameWithType: LeaseManager.release(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.release(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseManager.release*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: It releases ownership of the lease. It can throw <xref uid="com.azure.cosmos.implementation.changefeed.exceptions.LeaseLostException" data-throw-if-not-resolved="false">LeaseLostException</xref> if other host acquired the lease.
  syntax:
    content: public abstract Mono<Void> release(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the lease to acquire.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a deferred computation of this call.
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.renew(com.azure.cosmos.implementation.changefeed.Lease)
  id: renew(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseManager
  langs:
  - java
  name: renew(Lease lease)
  nameWithType: LeaseManager.renew(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.renew(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseManager.renew*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Renew the lease; leases are periodically renewed to prevent expiration. It can throw <xref uid="com.azure.cosmos.implementation.changefeed.exceptions.LeaseLostException" data-throw-if-not-resolved="false">LeaseLostException</xref> if other host acquired the lease.
  syntax:
    content: public abstract Mono<Lease> renew(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the lease to renew.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the updated lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.updateProperties(com.azure.cosmos.implementation.changefeed.Lease)
  id: updateProperties(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseManager
  langs:
  - java
  name: updateProperties(Lease leaseToUpdatePropertiesFrom)
  nameWithType: LeaseManager.updateProperties(Lease leaseToUpdatePropertiesFrom)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.updateProperties(Lease leaseToUpdatePropertiesFrom)
  overload: com.azure.cosmos.implementation.changefeed.LeaseManager.updateProperties*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: REPLACE item from the specified lease. It can throw <xref uid="com.azure.cosmos.implementation.changefeed.exceptions.LeaseLostException" data-throw-if-not-resolved="false">LeaseLostException</xref> if other host acquired the lease.
  syntax:
    content: public abstract Mono<Lease> updateProperties(Lease leaseToUpdatePropertiesFrom)
    parameters:
    - id: leaseToUpdatePropertiesFrom
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the new item.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: updated lease.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.changefeed.Lease
    name: Lease
    fullName: com.azure.cosmos.implementation.changefeed.Lease
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.createLeaseIfNotExist*
  name: createLeaseIfNotExist
  nameWithType: LeaseManager.createLeaseIfNotExist
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.createLeaseIfNotExist
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.Lease
  name: Lease
  nameWithType: Lease
  fullName: com.azure.cosmos.implementation.changefeed.Lease
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.delete*
  name: delete
  nameWithType: LeaseManager.delete
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.delete
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.acquire*
  name: acquire
  nameWithType: LeaseManager.acquire
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.acquire
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.release*
  name: release
  nameWithType: LeaseManager.release
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.release
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.renew*
  name: renew
  nameWithType: LeaseManager.renew
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.renew
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager.updateProperties*
  name: updateProperties
  nameWithType: LeaseManager.updateProperties
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager.updateProperties
  package: com.azure.cosmos.implementation.changefeed
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
