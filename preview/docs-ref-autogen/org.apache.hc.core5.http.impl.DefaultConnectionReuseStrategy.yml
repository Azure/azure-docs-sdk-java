### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy
  id: DefaultConnectionReuseStrategy
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl
  children:
  - org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy()
  - org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.INSTANCE
  - org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.keepAlive(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.HttpResponse,org.apache.hc.core5.http.protocol.HttpContext)
  langs:
  - java
  name: DefaultConnectionReuseStrategy
  nameWithType: DefaultConnectionReuseStrategy
  fullName: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy
  type: Class
  package: org.apache.hc.core5.http.impl
  summary: >-
    Default implementation of a strategy deciding about connection re-use. The strategy determines whether a connection is persistent or not based on the message\\u2019s protocol version and `Connection` header field if present. Connections will not be re-used and will close if any of these conditions is met

     *  the `close` connection option is present in the request message
     *  the response message content body is incorrectly or ambiguously delineated
     *  the `close` connection option is present in the response message
     *  If the received protocol is `HTTP/1.0` (or earlier) and `keep-alive` connection option is not present

    In the absence of a `Connection` header field, the non-standard but commonly used `Proxy-Connection` header field will be used instead. If no connection options are explicitly given the default policy for the HTTP version is applied. `HTTP/1.1` (or later) connections are re-used by default. `HTTP/1.0` (or earlier) connections are not re-used by default.
  syntax:
    content: public class DefaultConnectionReuseStrategy implements ConnectionReuseStrategy
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.hc.core5.http.ConnectionReuseStrategy
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy()
  id: DefaultConnectionReuseStrategy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy
  langs:
  - java
  name: DefaultConnectionReuseStrategy()
  nameWithType: DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy()
  fullName: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy()
  overload: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy*
  type: Constructor
  package: org.apache.hc.core5.http.impl
  syntax:
    content: public DefaultConnectionReuseStrategy()
- uid: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.INSTANCE
  id: INSTANCE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy
  langs:
  - java
  name: INSTANCE
  nameWithType: DefaultConnectionReuseStrategy.INSTANCE
  fullName: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.INSTANCE
  type: Field
  package: org.apache.hc.core5.http.impl
  syntax:
    content: public static final DefaultConnectionReuseStrategy INSTANCE
    return:
      type: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy
- uid: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.keepAlive(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.HttpResponse,org.apache.hc.core5.http.protocol.HttpContext)
  id: keepAlive(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.HttpResponse,org.apache.hc.core5.http.protocol.HttpContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy
  langs:
  - java
  name: keepAlive(HttpRequest request, HttpResponse response, HttpContext context)
  nameWithType: DefaultConnectionReuseStrategy.keepAlive(HttpRequest request, HttpResponse response, HttpContext context)
  fullName: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.keepAlive(HttpRequest request, HttpResponse response, HttpContext context)
  overload: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.keepAlive*
  type: Method
  package: org.apache.hc.core5.http.impl
  summary: >-
    Decides whether a connection can be kept open after a request. If this method returns `false`, the caller MUST close the connection to correctly comply with the HTTP protocol. If it returns `true`, the caller SHOULD attempt to keep the connection open for reuse with another request.


    One can use the HTTP context to retrieve additional objects that may be relevant for the keep-alive strategy: the actual HTTP connection, the original HTTP request, target host if known, number of times the connection has been reused already and so on.


    If the connection is already closed, `false` is returned. The stale connection check MUST NOT be triggered by a connection reuse strategy.
  syntax:
    content: public boolean keepAlive(HttpRequest request, HttpResponse response, HttpContext context)
    parameters:
    - id: request
      type: org.apache.hc.core5.http.HttpRequest
    - id: response
      type: org.apache.hc.core5.http.HttpResponse
    - id: context
      type: org.apache.hc.core5.http.protocol.HttpContext
    return:
      type: boolean
references:
- uid: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy*
  name: DefaultConnectionReuseStrategy
  nameWithType: DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy
  fullName: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.DefaultConnectionReuseStrategy
  package: org.apache.hc.core5.http.impl
- uid: org.apache.hc.core5.http.HttpRequest
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: org.apache.hc.core5.http.HttpRequest
- uid: org.apache.hc.core5.http.HttpResponse
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: org.apache.hc.core5.http.HttpResponse
- uid: org.apache.hc.core5.http.protocol.HttpContext
  name: HttpContext
  nameWithType: HttpContext
  fullName: org.apache.hc.core5.http.protocol.HttpContext
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.keepAlive*
  name: keepAlive
  nameWithType: DefaultConnectionReuseStrategy.keepAlive
  fullName: org.apache.hc.core5.http.impl.DefaultConnectionReuseStrategy.keepAlive
  package: org.apache.hc.core5.http.impl
- uid: org.apache.hc.core5.http.ConnectionReuseStrategy
  name: ConnectionReuseStrategy
  nameWithType: ConnectionReuseStrategy
  fullName: org.apache.hc.core5.http.ConnectionReuseStrategy
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
