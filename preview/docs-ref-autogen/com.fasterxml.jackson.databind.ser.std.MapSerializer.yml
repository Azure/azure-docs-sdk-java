### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer
  id: MapSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std
  children:
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.MARKER_FOR_EMPTY
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.util.Set<java.lang.String>)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(java.util.Set<java.lang.String>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.UNSPECIFIED_TYPE
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._dynamicValueSerializers
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride()
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._filterId
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._hasNullKey(java.util.Map<?,?>)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._ignoredEntries
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._keySerializer
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._keyType
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._orderEntries(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._property
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._sortKeys
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressNulls
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressableValue
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._valueSerializer
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._valueType
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._valueTypeIsStatic
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._valueTypeSerializer
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer._writeNullKeyedEntry(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(java.lang.String[],com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(java.util.Set<java.lang.String>,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentSerializer()
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType()
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.getKeySerializer()
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.hasSingleElement(java.util.Map<?,?>)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map<?,?>)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFieldsUsing(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map<?,?>,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeOptionalFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeTypedFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithType(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion(java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.MapSerializer.withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.util.Set<java.lang.String>,boolean)
  langs:
  - java
  name: MapSerializer
  nameWithType: MapSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer
  type: Class
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Standard serializer implementation for serializing \{link java.util.Map\} types.


    Note: about the only configurable setting currently is ability to filter out entries with specified names.
  syntax:
    content: public class MapSerializer extends ContainerSerializer<Map<?,?>> implements ContextualSerializer
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializer
  - com.fasterxml.jackson.databind.ser.std.StdSerializer
  - com.fasterxml.jackson.databind.ser.ContainerSerializer
  implements:
  - com.fasterxml.jackson.databind.ser.ContextualSerializer
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentSerializer()
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentType()
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.hasSingleElement(T)
  - com.fasterxml.jackson.databind.ser.ContainerSerializer.withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MARKER_FOR_EMPTY
  id: MARKER_FOR_EMPTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: MARKER_FOR_EMPTY
  nameWithType: MapSerializer.MARKER_FOR_EMPTY
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MARKER_FOR_EMPTY
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public static final Object MARKER_FOR_EMPTY
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.util.Set<java.lang.String>)
  id: MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.util.Set<java.lang.String>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: MapSerializer(MapSerializer src, BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignoredEntries)
  nameWithType: MapSerializer.MapSerializer(MapSerializer src, BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignoredEntries)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(MapSerializer src, BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignoredEntries)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected MapSerializer(MapSerializer src, BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignoredEntries)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: ignoredEntries
      type: java.util.Set<java.lang.String>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object)
  id: MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue)
  nameWithType: MapSerializer.MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: suppressableValue
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,boolean)
  id: MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue, boolean suppressNulls)
  nameWithType: MapSerializer.MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected MapSerializer(MapSerializer src, TypeSerializer vts, Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,java.lang.Object,boolean)
  id: MapSerializer(com.fasterxml.jackson.databind.ser.std.MapSerializer,java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: MapSerializer(MapSerializer src, Object filterId, boolean sortKeys)
  nameWithType: MapSerializer.MapSerializer(MapSerializer src, Object filterId, boolean sortKeys)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(MapSerializer src, Object filterId, boolean sortKeys)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected MapSerializer(MapSerializer src, Object filterId, boolean sortKeys)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
    - id: filterId
      type: java.lang.Object
    - id: sortKeys
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(java.util.Set<java.lang.String>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: MapSerializer(java.util.Set<java.lang.String>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: MapSerializer(Set<String> ignoredEntries, JavaType keyType, JavaType valueType, boolean valueTypeIsStatic, TypeSerializer vts, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)
  nameWithType: MapSerializer.MapSerializer(Set<String> ignoredEntries, JavaType keyType, JavaType valueType, boolean valueTypeIsStatic, TypeSerializer vts, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer(Set<String> ignoredEntries, JavaType keyType, JavaType valueType, boolean valueTypeIsStatic, TypeSerializer vts, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected MapSerializer(Set<String> ignoredEntries, JavaType keyType, JavaType valueType, boolean valueTypeIsStatic, TypeSerializer vts, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer)
    parameters:
    - id: ignoredEntries
      type: java.util.Set<java.lang.String>
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueTypeIsStatic
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.UNSPECIFIED_TYPE
  id: UNSPECIFIED_TYPE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: UNSPECIFIED_TYPE
  nameWithType: MapSerializer.UNSPECIFIED_TYPE
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.UNSPECIFIED_TYPE
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected static final JavaType UNSPECIFIED_TYPE
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._dynamicValueSerializers
  id: _dynamicValueSerializers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _dynamicValueSerializers
  nameWithType: MapSerializer._dynamicValueSerializers
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._dynamicValueSerializers
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: If value type cannot be statically determined, mapping from runtime value types to serializers are stored in this object.
  syntax:
    content: protected PropertySerializerMap _dynamicValueSerializers
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride()
  id: _ensureOverride()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _ensureOverride()
  nameWithType: MapSerializer._ensureOverride()
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride()
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void _ensureOverride()
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride(java.lang.String)
  id: _ensureOverride(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _ensureOverride(String method)
  nameWithType: MapSerializer._ensureOverride(String method)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride(String method)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void _ensureOverride(String method)
    parameters:
    - id: method
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._filterId
  id: _filterId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _filterId
  nameWithType: MapSerializer._filterId
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._filterId
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Id of the property filter to use, if any; null if none.
  syntax:
    content: protected final Object _filterId
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  id: _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
  nameWithType: MapSerializer._findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider)
    parameters:
    - id: map
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  id: _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class<?>,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
  nameWithType: MapSerializer._findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider)
    parameters:
    - id: map
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
    - id: type
      type: java.lang.Class<?>
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._hasNullKey(java.util.Map<?,?>)
  id: _hasNullKey(java.util.Map<?,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _hasNullKey(Map<?,?> input)
  nameWithType: MapSerializer._hasNullKey(Map<?,?> input)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._hasNullKey(Map<?,?> input)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._hasNullKey*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected boolean _hasNullKey(Map<?,?> input)
    parameters:
    - id: input
      type: java.util.Map<?,?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._ignoredEntries
  id: _ignoredEntries
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _ignoredEntries
  nameWithType: MapSerializer._ignoredEntries
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._ignoredEntries
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Set of entries to omit during serialization, if any
  syntax:
    content: protected final Set<String> _ignoredEntries
    return:
      type: java.util.Set<java.lang.String>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._keySerializer
  id: _keySerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _keySerializer
  nameWithType: MapSerializer._keySerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._keySerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Key serializer to use, if it can be statically determined
  syntax:
    content: protected JsonSerializer<Object> _keySerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._keyType
  id: _keyType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _keyType
  nameWithType: MapSerializer._keyType
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._keyType
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Declared type of keys
  syntax:
    content: protected final JavaType _keyType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._orderEntries(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: _orderEntries(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _orderEntries(Map<?,?> input, JsonGenerator gen, SerializerProvider provider)
  nameWithType: MapSerializer._orderEntries(Map<?,?> input, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._orderEntries(Map<?,?> input, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._orderEntries*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected Map<?,?> _orderEntries(Map<?,?> input, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: input
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    return:
      type: java.util.Map<?,?>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._property
  id: _property
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _property
  nameWithType: MapSerializer._property
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._property
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Map-valued property being serialized with this instance
  syntax:
    content: protected final BeanProperty _property
    return:
      type: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._sortKeys
  id: _sortKeys
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _sortKeys
  nameWithType: MapSerializer._sortKeys
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._sortKeys
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Flag set if output is forced to be sorted by keys (usually due to annotation).
  syntax:
    content: protected final boolean _sortKeys
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressNulls
  id: _suppressNulls
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _suppressNulls
  nameWithType: MapSerializer._suppressNulls
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressNulls
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Flag that indicates what to do with \`null\` values, distinct from handling of <xref uid="com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressableValue" data-throw-if-not-resolved="false">#_suppressableValue</xref>
  syntax:
    content: protected final boolean _suppressNulls
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressableValue
  id: _suppressableValue
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _suppressableValue
  nameWithType: MapSerializer._suppressableValue
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._suppressableValue
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Value that indicates suppression mechanism to use for **values contained**; either "filter" (of which `equals()` is called), or marker value of <xref uid="com.fasterxml.jackson.databind.ser.std.MapSerializer.MARKER_FOR_EMPTY" data-throw-if-not-resolved="false">#MARKER_FOR_EMPTY</xref>, or null to indicate no filtering for non-null values. Note that inclusion value for Map instance itself is handled by caller (POJO property that refers to the Map value).
  syntax:
    content: protected final Object _suppressableValue
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueSerializer
  id: _valueSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _valueSerializer
  nameWithType: MapSerializer._valueSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Value serializer to use, if it can be statically determined
  syntax:
    content: protected JsonSerializer<Object> _valueSerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueType
  id: _valueType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _valueType
  nameWithType: MapSerializer._valueType
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueType
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Declared type of contained values
  syntax:
    content: protected final JavaType _valueType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueTypeIsStatic
  id: _valueTypeIsStatic
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _valueTypeIsStatic
  nameWithType: MapSerializer._valueTypeIsStatic
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueTypeIsStatic
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Whether static types should be used for serialization of values or not (if not, dynamic runtime type is used)
  syntax:
    content: protected final boolean _valueTypeIsStatic
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueTypeSerializer
  id: _valueTypeSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _valueTypeSerializer
  nameWithType: MapSerializer._valueTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._valueTypeSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Type identifier serializer used for values, if any.
  syntax:
    content: protected final TypeSerializer _valueTypeSerializer
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _withValueTypeSerializer(TypeSerializer vts)
  nameWithType: MapSerializer._withValueTypeSerializer(TypeSerializer vts)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._withValueTypeSerializer(TypeSerializer vts)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._withValueTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that needs to be implemented to allow construction of a new serializer object with given <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">TypeSerializer</xref>, used when addition type information is to be embedded.
  syntax:
    content: public MapSerializer _withValueTypeSerializer(TypeSerializer vts)
    parameters:
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._writeNullKeyedEntry(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  id: _writeNullKeyedEntry(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: _writeNullKeyedEntry(JsonGenerator gen, SerializerProvider provider, Object value)
  nameWithType: MapSerializer._writeNullKeyedEntry(JsonGenerator gen, SerializerProvider provider, Object value)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._writeNullKeyedEntry(JsonGenerator gen, SerializerProvider provider, Object value)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer._writeNullKeyedEntry*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void _writeNullKeyedEntry(JsonGenerator gen, SerializerProvider provider, Object value)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  nameWithType: MapSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation specifies no format. This behavior is usually overriden by custom serializers.
  syntax:
    content: public void acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(java.lang.String[],com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,java.lang.Object)
  id: construct(java.lang.String[],com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: construct(String[] ignoredList, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
  nameWithType: MapSerializer.construct(String[] ignoredList, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(String[] ignoredList, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public static MapSerializer construct(String[] ignoredList, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
    parameters:
    - id: ignoredList
      type: java.lang.String[]
    - id: mapType
      type: com.fasterxml.jackson.databind.JavaType
    - id: staticValueType
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(java.util.Set<java.lang.String>,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,java.lang.Object)
  id: construct(java.util.Set<java.lang.String>,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: construct(Set<String> ignoredEntries, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
  nameWithType: MapSerializer.construct(Set<String> ignoredEntries, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct(Set<String> ignoredEntries, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public static MapSerializer construct(Set<String> ignoredEntries, JavaType mapType, boolean staticValueType, TypeSerializer vts, JsonSerializer<Object> keySerializer, JsonSerializer<Object> valueSerializer, Object filterId)
    parameters:
    - id: ignoredEntries
      type: java.util.Set<java.lang.String>
    - id: mapType
      type: com.fasterxml.jackson.databind.JavaType
    - id: staticValueType
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: createContextual(SerializerProvider provider, BeanProperty property)
  nameWithType: MapSerializer.createContextual(SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual(SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property. Note that instance that this method is called on is typically shared one and as a result method should **NOT** modify this instance but rather construct and return a new instance. This instance should only be returned as-is, in case it is already suitable for use.
  syntax:
    content: public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentSerializer()
  id: getContentSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: getContentSerializer()
  nameWithType: MapSerializer.getContentSerializer()
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentSerializer()
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Accessor for serializer used for serializing contents (List and array elements, Map values etc) of the container for which this serializer is used, if it is known statically. Note that for dynamic types this may return null; if so, caller has to instead use <xref uid="com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType()" data-throw-if-not-resolved="false">#getContentType()</xref> and <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.SerializerProvider#findContentValueSerializer</xref>.
  syntax:
    content: public JsonSerializer<?> getContentSerializer()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType()
  id: getContentType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: getContentType()
  nameWithType: MapSerializer.getContentType()
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType()
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Accessor for finding declared (static) element type for type this serializer is used for.
  syntax:
    content: public JavaType getContentType()
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getKeySerializer()
  id: getKeySerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: getKeySerializer()
  nameWithType: MapSerializer.getKeySerializer()
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getKeySerializer()
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.getKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: 'Accessor for currently assigned key serializer. Note that this may return null during construction of `MapSerializer`: depedencies are resolved during <xref uid="com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual*" data-throw-if-not-resolved="false">#createContextual</xref> method (which can be overridden by custom implementations), but for some dynamic types, it is possible that serializer is only resolved during actual serialization.'
  syntax:
    content: public JsonSerializer<?> getKeySerializer()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  id: getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: getSchema(SerializerProvider provider, Type typeHint)
  nameWithType: MapSerializer.getSchema(SerializerProvider provider, Type typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getSchema(SerializerProvider provider, Type typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.getSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation simply claims type is "string"; usually overriden by custom serializers.
  syntax:
    content: public JsonNode getSchema(SerializerProvider provider, Type typeHint)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeHint
      type: java.lang.reflect.Type
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.hasSingleElement(java.util.Map<?,?>)
  id: hasSingleElement(java.util.Map<?,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: hasSingleElement(Map<?,?> value)
  nameWithType: MapSerializer.hasSingleElement(Map<?,?> value)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.hasSingleElement(Map<?,?> value)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.hasSingleElement*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method called to determine if the given value (of type handled by this serializer) contains exactly one element.


    Note: although it might seem sensible to instead define something like "getElementCount()" method, this would not work well for containers that do not keep track of size (like linked lists may not).


    Note, too, that as of now (2.9) this method is only called by serializer itself; and specifically is not used for non-array/collection types like `Map` or `Map.Entry` instances.
  syntax:
    content: public boolean hasSingleElement(Map<?,?> value)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map<?,?>)
  id: isEmpty(com.fasterxml.jackson.databind.SerializerProvider,java.util.Map<?,?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: isEmpty(SerializerProvider prov, Map<?,?> value)
  nameWithType: MapSerializer.isEmpty(SerializerProvider prov, Map<?,?> value)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty(SerializerProvider prov, Map<?,?> value)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method called to check whether given serializable value is considered "empty" value (for purposes of suppressing serialization of empty values).


    Default implementation will consider only null values to be empty.


    NOTE: replaces <xref uid="com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty*" data-throw-if-not-resolved="false">#isEmpty(Object)</xref>, which was deprecated in 2.5
  syntax:
    content: public boolean isEmpty(SerializerProvider prov, Map<?,?> value)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: value
      type: java.util.Map<?,?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serialize(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: MapSerializer.serialize(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public void serialize(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serializeFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: MapSerializer.serializeFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: General-purpose serialization for contents, where we do not necessarily know the value serialization, but we do know that no value suppression is needed (which simplifies processing a bit)
  syntax:
    content: public void serializeFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFieldsUsing(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: serializeFieldsUsing(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeFieldsUsing(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, JsonSerializer<Object> ser)
  nameWithType: MapSerializer.serializeFieldsUsing(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, JsonSerializer<Object> ser)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFieldsUsing(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, JsonSerializer<Object> ser)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFieldsUsing*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method called to serialize fields, when the value type is statically known, so that value serializer is passed and does not need to be fetched from provider.
  syntax:
    content: public void serializeFieldsUsing(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, JsonSerializer<Object> ser)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map<?,?>,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)
  id: serializeFilteredAnyProperties(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,java.util.Map<?,?>,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeFilteredAnyProperties(SerializerProvider provider, JsonGenerator gen, Object bean, Map<?,?> value, PropertyFilter filter, Object suppressableValue)
  nameWithType: MapSerializer.serializeFilteredAnyProperties(SerializerProvider provider, JsonGenerator gen, Object bean, Map<?,?> value, PropertyFilter filter, Object suppressableValue)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredAnyProperties(SerializerProvider provider, JsonGenerator gen, Object bean, Map<?,?> value, PropertyFilter filter, Object suppressableValue)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredAnyProperties*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method used when we have a JSON Filter to use AND contents are "any properties" of a POJO.
  syntax:
    content: public void serializeFilteredAnyProperties(SerializerProvider provider, JsonGenerator gen, Object bean, Map<?,?> value, PropertyFilter filter, Object suppressableValue)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: bean
      type: java.lang.Object
      description: Enclosing POJO that has any-getter used to obtain "any properties"
    - id: value
      type: java.util.Map<?,?>
    - id: filter
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
    - id: suppressableValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)
  id: serializeFilteredFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.PropertyFilter,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeFilteredFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter, Object suppressableValue)
  nameWithType: MapSerializer.serializeFilteredFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter, Object suppressableValue)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter, Object suppressableValue)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredFields*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method used when we have a JSON Filter to use for potentially filtering out Map entries.
  syntax:
    content: public void serializeFilteredFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter, Object suppressableValue)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: filter
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
    - id: suppressableValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeOptionalFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  id: serializeOptionalFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeOptionalFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
  nameWithType: MapSerializer.serializeOptionalFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeOptionalFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeOptionalFields*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Serialization method called when exclusion filtering needs to be applied.
  syntax:
    content: public void serializeOptionalFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: suppressableValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeTypedFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  id: serializeTypedFields(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeTypedFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
  nameWithType: MapSerializer.serializeTypedFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeTypedFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeTypedFields*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public void serializeTypedFields(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, Object suppressableValue)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: suppressableValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithType(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeWithType(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: MapSerializer.serializeWithType(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithType(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.


    Default implementation will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> to indicate that proper type handling needs to be implemented.


    For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:


    ```java

    // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
      typeSer.writeTypePrefixForScalar(value, gen);
      serialize(value, gen, provider);
      typeSer.writeTypeSuffixForScalar(value, gen);
    ```


    and implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents.
  syntax:
    content: public void serializeWithType(Map<?,?> value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serializeWithoutTypeInfo(java.util.Map<?,?>,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: serializeWithoutTypeInfo(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: MapSerializer.serializeWithoutTypeInfo(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    General-purpose serialization for contents without writing object type. Will suppress, filter and use custom serializers.


    Public since it also is called by `AnyGetterWriter`.
  syntax:
    content: public void serializeWithoutTypeInfo(Map<?,?> value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: java.util.Map<?,?>
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion(java.lang.Object)
  id: withContentInclusion(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: withContentInclusion(Object suppressableValue)
  nameWithType: MapSerializer.withContentInclusion(Object suppressableValue)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion(Object suppressableValue)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public MapSerializer withContentInclusion(Object suppressableValue)
    parameters:
    - id: suppressableValue
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion(java.lang.Object,boolean)
  id: withContentInclusion(java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: withContentInclusion(Object suppressableValue, boolean suppressNulls)
  nameWithType: MapSerializer.withContentInclusion(Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion(Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Mutant factory for constructing an instance with different inclusion strategy for content (Map values).
  syntax:
    content: public MapSerializer withContentInclusion(Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withFilterId(java.lang.Object)
  id: withFilterId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: withFilterId(Object filterId)
  nameWithType: MapSerializer.withFilterId(Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withFilterId(Object filterId)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.withFilterId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Mutant factory method that is called if contextual configuration indicates that a specific filter (as specified by `filterId`) is to be used for serialization.


    Default implementation simply returns `this`; sub-classes that do support filtering will need to create and return new instance if filter changes.
  syntax:
    content: public MapSerializer withFilterId(Object filterId)
    parameters:
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.util.Set<java.lang.String>,boolean)
  id: withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JsonSerializer<?>,java.util.Set<java.lang.String>,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.MapSerializer
  langs:
  - java
  name: withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignored, boolean sortKeys)
  nameWithType: MapSerializer.withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignored, boolean sortKeys)
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignored, boolean sortKeys)
  overload: com.fasterxml.jackson.databind.ser.std.MapSerializer.withResolved*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public MapSerializer withResolved(BeanProperty property, JsonSerializer<?> keySerializer, JsonSerializer<?> valueSerializer, Set<String> ignored, boolean sortKeys)
    parameters:
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: keySerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: valueSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: ignored
      type: java.util.Set<java.lang.String>
    - id: sortKeys
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ser.std.MapSerializer
references:
- uid: java.util.Set<java.lang.String>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer*
  name: MapSerializer
  nameWithType: MapSerializer.MapSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.MapSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._withValueTypeSerializer*
  name: _withValueTypeSerializer
  nameWithType: MapSerializer._withValueTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._withValueTypeSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withResolved*
  name: withResolved
  nameWithType: MapSerializer.withResolved
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withResolved
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withFilterId*
  name: withFilterId
  nameWithType: MapSerializer.withFilterId
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withFilterId
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion*
  name: withContentInclusion
  nameWithType: MapSerializer.withContentInclusion
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.withContentInclusion
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct*
  name: construct
  nameWithType: MapSerializer.construct
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.construct
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride*
  name: _ensureOverride
  nameWithType: MapSerializer._ensureOverride
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._ensureOverride
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual*
  name: createContextual
  nameWithType: MapSerializer.createContextual
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.createContextual
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType*
  name: getContentType
  nameWithType: MapSerializer.getContentType
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentType
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentSerializer*
  name: getContentSerializer
  nameWithType: MapSerializer.getContentSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getContentSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.util.Map<?,?>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty*
  name: isEmpty
  nameWithType: MapSerializer.isEmpty
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.isEmpty
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.hasSingleElement*
  name: hasSingleElement
  nameWithType: MapSerializer.hasSingleElement
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.hasSingleElement
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getKeySerializer*
  name: getKeySerializer
  nameWithType: MapSerializer.getKeySerializer
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getKeySerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize*
  name: serialize
  nameWithType: MapSerializer.serialize
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithType*
  name: serializeWithType
  nameWithType: MapSerializer.serializeWithType
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithType
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo*
  name: serializeWithoutTypeInfo
  nameWithType: MapSerializer.serializeWithoutTypeInfo
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeWithoutTypeInfo
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields*
  name: serializeFields
  nameWithType: MapSerializer.serializeFields
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeOptionalFields*
  name: serializeOptionalFields
  nameWithType: MapSerializer.serializeOptionalFields
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeOptionalFields
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFieldsUsing*
  name: serializeFieldsUsing
  nameWithType: MapSerializer.serializeFieldsUsing
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFieldsUsing
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.PropertyFilter
  name: PropertyFilter
  nameWithType: PropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredFields*
  name: serializeFilteredFields
  nameWithType: MapSerializer.serializeFilteredFields
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredFields
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeTypedFields*
  name: serializeTypedFields
  nameWithType: MapSerializer.serializeTypedFields
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeTypedFields
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredAnyProperties*
  name: serializeFilteredAnyProperties
  nameWithType: MapSerializer.serializeFilteredAnyProperties
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFilteredAnyProperties
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.getSchema*
  name: getSchema
  nameWithType: MapSerializer.getSchema
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.getSchema
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: MapSerializer.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  name: PropertySerializerMap
  nameWithType: PropertySerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic*
  name: _findAndAddDynamic
  nameWithType: MapSerializer._findAndAddDynamic
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._findAndAddDynamic
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._orderEntries*
  name: _orderEntries
  nameWithType: MapSerializer._orderEntries
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._orderEntries
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._hasNullKey*
  name: _hasNullKey
  nameWithType: MapSerializer._hasNullKey
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._hasNullKey
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.MapSerializer._writeNullKeyedEntry*
  name: _writeNullKeyedEntry
  nameWithType: MapSerializer._writeNullKeyedEntry
  fullName: com.fasterxml.jackson.databind.ser.std.MapSerializer._writeNullKeyedEntry
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map<?,?>>
  name: ContainerSerializer<Map<?,?>>
  nameWithType: ContainerSerializer<Map<?,?>>
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer<java.util.Map<?,?>>
- uid: com.fasterxml.jackson.databind.ser.ContextualSerializer
  name: ContextualSerializer
  nameWithType: ContextualSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContextualSerializer
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  name: JsonSerializer.isEmpty(SerializerProvider,T)
  nameWithType: JsonSerializer.isEmpty(SerializerProvider,T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  name: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  name: JsonSerializer.isUnwrappingSerializer()
  nameWithType: JsonSerializer.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  name: StdSerializer._nonEmpty(Collection<?>)
  nameWithType: StdSerializer._nonEmpty(Collection<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  name: StdSerializer.handledType()
  nameWithType: StdSerializer.handledType()
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  name: StdSerializer.createSchemaNode(String,boolean)
  nameWithType: StdSerializer.createSchemaNode(String,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasSingleElement(T)
  name: ContainerSerializer.hasSingleElement(T)
  nameWithType: ContainerSerializer.hasSingleElement(T)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasSingleElement(T)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  name: StdSerializer.getSchema(SerializerProvider,Type)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  name: JsonSerializer.withFilterId(Object)
  nameWithType: JsonSerializer.withFilterId(Object)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  nameWithType: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentType()
  name: ContainerSerializer.getContentType()
  nameWithType: ContainerSerializer.getContentType()
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentType()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  name: JsonSerializer.properties()
  nameWithType: JsonSerializer.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.properties()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  name: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  nameWithType: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  nameWithType: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: ContainerSerializer.hasContentTypeAnnotation(SerializerProvider,BeanProperty)
  nameWithType: ContainerSerializer.hasContentTypeAnnotation(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.hasContentTypeAnnotation(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  name: JsonSerializer.getDelegatee()
  nameWithType: JsonSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonSerializer.unwrappingSerializer(NameTransformer)
  nameWithType: JsonSerializer.unwrappingSerializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: ContainerSerializer._withValueTypeSerializer(TypeSerializer)
  nameWithType: ContainerSerializer._withValueTypeSerializer(TypeSerializer)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer._withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: ContainerSerializer.withValueTypeSerializer(TypeSerializer)
  nameWithType: ContainerSerializer.withValueTypeSerializer(TypeSerializer)
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  name: StdSerializer.createSchemaNode(String)
  nameWithType: StdSerializer.createSchemaNode(String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  name: JsonSerializer.isEmpty(T)
  nameWithType: JsonSerializer.isEmpty(T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  name: JsonSerializer.usesObjectId()
  nameWithType: JsonSerializer.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentSerializer()
  name: ContainerSerializer.getContentSerializer()
  nameWithType: ContainerSerializer.getContentSerializer()
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer.getContentSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  name: StdSerializer._neitherNull(Object,Object)
  nameWithType: StdSerializer._neitherNull(Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.ContainerSerializer
  name: ContainerSerializer
  nameWithType: ContainerSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContainerSerializer
- uid: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: ?>,JsonFormat.Feature)
  nameWithType: ?>,JsonFormat.Feature)
  fullName: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
  name: StdSerializer._nonEmpty(Collection
  nameWithType: StdSerializer._nonEmpty(Collection
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer.replaceDelegatee(JsonSerializer
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.isDefaultSerializer(JsonSerializer
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType)
  nameWithType: ?>,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType)
