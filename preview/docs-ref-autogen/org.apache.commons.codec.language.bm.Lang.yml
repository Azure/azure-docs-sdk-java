### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.language.bm.Lang
  id: Lang
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm
  children:
  - org.apache.commons.codec.language.bm.Lang.guessLanguage(java.lang.String)
  - org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)
  - org.apache.commons.codec.language.bm.Lang.instance(org.apache.commons.codec.language.bm.NameType)
  - org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)
  langs:
  - java
  name: Lang
  nameWithType: Lang
  fullName: org.apache.commons.codec.language.bm.Lang
  type: Class
  package: org.apache.commons.codec.language.bm
  summary: "Language guessing utility.\n\nThis class encapsulates rules used to guess the possible languages that a word originates from. This is done by reference to a whole series of rules distributed in resource files.\n\nInstances of this class are typically managed through the static factory method instance(). Unless you are developing your own language guessing rules, you will not need to interact with this class directly.\n\nThis class is intended to be immutable and thread-safe.\n\n**Lang resources**\n\nLanguage guessing rules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically named following the pattern:\n\n> org/apache/commons/codec/language/bm/lang.txt\n\nThe format of these resources is the following:\n\n *  **Rules:** whitespace separated strings. There should be 3 columns to each row, and these will be interpreted as:\n    \n    1.  pattern: a regular expression.\n    2.  languages: a '+'-separated list of languages.\n    3.  acceptOnMatch: 'true' or 'false' indicating if a match rules in or rules out the language.\n *  **End-of-line comments:** Any occurrence of '//' will cause all text following on that line to be discarded as a comment.\n *  **Multi-line comments:** Any line starting with '/\\*' will start multi-line commenting mode. This will skip all content until a line ending in '\\*' and '/' is found.\n *  **Blank lines:** All blank lines will be skipped.\n\nPort of lang.php"
  syntax:
    content: public class Lang
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.language.bm.Lang.Lang(java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>,org.apache.commons.codec.language.bm.Languages)
  id: Lang(java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>,org.apache.commons.codec.language.bm.Languages)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.Lang
  langs:
  - java
  name: Lang(List<Lang.LangRule> rules, Languages languages)
  nameWithType: Lang.Lang(List<Lang.LangRule> rules, Languages languages)
  fullName: org.apache.commons.codec.language.bm.Lang.Lang(List<Lang.LangRule> rules, Languages languages)
  overload: org.apache.commons.codec.language.bm.Lang.Lang*
  type: Constructor
  package: org.apache.commons.codec.language.bm
  syntax:
    content: private Lang(List<Lang.LangRule> rules, Languages languages)
    parameters:
    - id: rules
      type: java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>
    - id: languages
      type: org.apache.commons.codec.language.bm.Languages
- uid: org.apache.commons.codec.language.bm.Lang.guessLanguage(java.lang.String)
  id: guessLanguage(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.Lang
  langs:
  - java
  name: guessLanguage(String text)
  nameWithType: Lang.guessLanguage(String text)
  fullName: org.apache.commons.codec.language.bm.Lang.guessLanguage(String text)
  overload: org.apache.commons.codec.language.bm.Lang.guessLanguage*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Guesses the language of a word.
  syntax:
    content: public String guessLanguage(String text)
    parameters:
    - id: text
      type: java.lang.String
      description: the word
    return:
      type: java.lang.String
      description: the language that the word originates from or <xref uid="org.apache.commons.codec.language.bm.Languages.ANY" data-throw-if-not-resolved="false">Languages#ANY</xref> if there was no unique match
- uid: org.apache.commons.codec.language.bm.Lang.guessLanguages(java.lang.String)
  id: guessLanguages(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.Lang
  langs:
  - java
  name: guessLanguages(String input)
  nameWithType: Lang.guessLanguages(String input)
  fullName: org.apache.commons.codec.language.bm.Lang.guessLanguages(String input)
  overload: org.apache.commons.codec.language.bm.Lang.guessLanguages*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Guesses the languages of a word.
  syntax:
    content: public Languages.LanguageSet guessLanguages(String input)
    parameters:
    - id: input
      type: java.lang.String
      description: the word
    return:
      type: org.apache.commons.codec.language.bm.Languages.LanguageSet
      description: a Set of Strings of language names that are potential matches for the input word
- uid: org.apache.commons.codec.language.bm.Lang.instance(org.apache.commons.codec.language.bm.NameType)
  id: instance(org.apache.commons.codec.language.bm.NameType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.Lang
  langs:
  - java
  name: instance(NameType nameType)
  nameWithType: Lang.instance(NameType nameType)
  fullName: org.apache.commons.codec.language.bm.Lang.instance(NameType nameType)
  overload: org.apache.commons.codec.language.bm.Lang.instance*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets a Lang instance for one of the supported NameTypes.
  syntax:
    content: public static Lang instance(NameType nameType)
    parameters:
    - id: nameType
      type: org.apache.commons.codec.language.bm.NameType
      description: the NameType to look up
    return:
      type: org.apache.commons.codec.language.bm.Lang
      description: a Lang encapsulating the language guessing rules for that name type
- uid: org.apache.commons.codec.language.bm.Lang.loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)
  id: loadFromResource(java.lang.String,org.apache.commons.codec.language.bm.Languages)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.Lang
  langs:
  - java
  name: loadFromResource(String languageRulesResourceName, Languages languages)
  nameWithType: Lang.loadFromResource(String languageRulesResourceName, Languages languages)
  fullName: org.apache.commons.codec.language.bm.Lang.loadFromResource(String languageRulesResourceName, Languages languages)
  overload: org.apache.commons.codec.language.bm.Lang.loadFromResource*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: >-
    Loads language rules from a resource.


    In normal use, you will obtain instances of Lang through the <xref uid="org.apache.commons.codec.language.bm.Lang.instance(org.apache.commons.codec.language.bm.NameType)" data-throw-if-not-resolved="false">#instance(NameType)</xref> method. You will only need to call this yourself if you are developing custom language mapping rules.
  syntax:
    content: public static Lang loadFromResource(String languageRulesResourceName, Languages languages)
    parameters:
    - id: languageRulesResourceName
      type: java.lang.String
      description: the fully-qualified resource name to load
    - id: languages
      type: org.apache.commons.codec.language.bm.Languages
      description: the languages that these rules will support
    return:
      type: org.apache.commons.codec.language.bm.Lang
      description: a Lang encapsulating the loaded language-guessing rules.
references:
- uid: java.util.List<org.apache.commons.codec.language.bm.Lang.LangRule>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: org.apache.commons.codec.language.bm.Lang.LangRule
    name: LangRule
    fullName: org.apache.commons.codec.language.bm.Lang.LangRule
  - name: '>'
    fullName: '>'
- uid: org.apache.commons.codec.language.bm.Languages
  name: Languages
  nameWithType: Languages
  fullName: org.apache.commons.codec.language.bm.Languages
- uid: org.apache.commons.codec.language.bm.Lang.Lang*
  name: Lang
  nameWithType: Lang.Lang
  fullName: org.apache.commons.codec.language.bm.Lang.Lang
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.NameType
  name: NameType
  nameWithType: NameType
  fullName: org.apache.commons.codec.language.bm.NameType
- uid: org.apache.commons.codec.language.bm.Lang.instance*
  name: instance
  nameWithType: Lang.instance
  fullName: org.apache.commons.codec.language.bm.Lang.instance
  package: org.apache.commons.codec.language.bm
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.language.bm.Lang.loadFromResource*
  name: loadFromResource
  nameWithType: Lang.loadFromResource
  fullName: org.apache.commons.codec.language.bm.Lang.loadFromResource
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.Lang.guessLanguage*
  name: guessLanguage
  nameWithType: Lang.guessLanguage
  fullName: org.apache.commons.codec.language.bm.Lang.guessLanguage
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.Languages.LanguageSet
  name: Languages.LanguageSet
  nameWithType: Languages.LanguageSet
  fullName: org.apache.commons.codec.language.bm.Languages.LanguageSet
- uid: org.apache.commons.codec.language.bm.Lang.guessLanguages*
  name: guessLanguages
  nameWithType: Lang.guessLanguages
  fullName: org.apache.commons.codec.language.bm.Lang.guessLanguages
  package: org.apache.commons.codec.language.bm
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: org.apache.commons.codec.language.bm.Lang.LangRule
  name: Lang.LangRule
  nameWithType: Lang.LangRule
  fullName: org.apache.commons.codec.language.bm.Lang.LangRule
