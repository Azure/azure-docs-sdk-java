### YamlMime:JavaType
uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration"
fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration"
name: "CustomHttpsConfiguration"
nameWithType: "CustomHttpsConfiguration"
summary: "Https settings for a domain."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class CustomHttpsConfiguration"
constructors:
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.CustomHttpsConfiguration()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.CustomHttpsConfiguration()"
  name: "CustomHttpsConfiguration()"
  nameWithType: "CustomHttpsConfiguration.CustomHttpsConfiguration()"
  syntax: "public CustomHttpsConfiguration()"
methods:
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.certificateSource()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.certificateSource()"
  name: "certificateSource()"
  nameWithType: "CustomHttpsConfiguration.certificateSource()"
  summary: "Get the certificate<wbr>Source property: Defines the source of the SSL certificate."
  syntax: "public FrontDoorCertificateSource certificateSource()"
  desc: "Get the certificateSource property: Defines the source of the SSL certificate."
  returns:
    description: "the certificateSource value."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateSource?alt=com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateSource&text=FrontDoorCertificateSource\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.certificateType()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.certificateType()"
  name: "certificateType()"
  nameWithType: "CustomHttpsConfiguration.certificateType()"
  summary: "Get the certificate<wbr>Type property: Defines the type of the certificate used for secure connections to a frontend<wbr>Endpoint."
  syntax: "public FrontDoorCertificateType certificateType()"
  desc: "Get the certificateType property: Defines the type of the certificate used for secure connections to a frontendEndpoint."
  returns:
    description: "the certificateType value."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateType?alt=com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateType&text=FrontDoorCertificateType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.minimumTlsVersion()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.minimumTlsVersion()"
  name: "minimumTlsVersion()"
  nameWithType: "CustomHttpsConfiguration.minimumTlsVersion()"
  summary: "Get the minimum<wbr>Tls<wbr>Version property: The minimum TLS version required from the clients to establish an SSL handshake with Front Door."
  syntax: "public MinimumTlsVersion minimumTlsVersion()"
  desc: "Get the minimumTlsVersion property: The minimum TLS version required from the clients to establish an SSL handshake with Front Door."
  returns:
    description: "the minimumTlsVersion value."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.MinimumTlsVersion?alt=com.azure.resourcemanager.frontdoor.models.MinimumTlsVersion&text=MinimumTlsVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.protocolType()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.protocolType()"
  name: "protocolType()"
  nameWithType: "CustomHttpsConfiguration.protocolType()"
  summary: "Get the protocol<wbr>Type property: Defines the TLS extension protocol that is used for secure delivery."
  syntax: "public FrontDoorTlsProtocolType protocolType()"
  desc: "Get the protocolType property: Defines the TLS extension protocol that is used for secure delivery."
  returns:
    description: "the protocolType value."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.FrontDoorTlsProtocolType?alt=com.azure.resourcemanager.frontdoor.models.FrontDoorTlsProtocolType&text=FrontDoorTlsProtocolType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.secretName()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.secretName()"
  name: "secretName()"
  nameWithType: "CustomHttpsConfiguration.secretName()"
  summary: "Get the secret<wbr>Name property: The name of the Key Vault secret representing the full certificate PFX."
  syntax: "public String secretName()"
  desc: "Get the secretName property: The name of the Key Vault secret representing the full certificate PFX."
  returns:
    description: "the secretName value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.secretVersion()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.secretVersion()"
  name: "secretVersion()"
  nameWithType: "CustomHttpsConfiguration.secretVersion()"
  summary: "Get the secret<wbr>Version property: The version of the Key Vault secret representing the full certificate PFX."
  syntax: "public String secretVersion()"
  desc: "Get the secretVersion property: The version of the Key Vault secret representing the full certificate PFX."
  returns:
    description: "the secretVersion value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.validate()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.validate()"
  name: "validate()"
  nameWithType: "CustomHttpsConfiguration.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.vault()"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.vault()"
  name: "vault()"
  nameWithType: "CustomHttpsConfiguration.vault()"
  summary: "Get the vault property: The Key Vault containing the SSL certificate."
  syntax: "public KeyVaultCertificateSourceParametersVault vault()"
  desc: "Get the vault property: The Key Vault containing the SSL certificate."
  returns:
    description: "the vault value."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.KeyVaultCertificateSourceParametersVault?alt=com.azure.resourcemanager.frontdoor.models.KeyVaultCertificateSourceParametersVault&text=KeyVaultCertificateSourceParametersVault\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withCertificateSource(com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateSource)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withCertificateSource(FrontDoorCertificateSource certificateSource)"
  name: "withCertificateSource(FrontDoorCertificateSource certificateSource)"
  nameWithType: "CustomHttpsConfiguration.withCertificateSource(FrontDoorCertificateSource certificateSource)"
  summary: "Set the certificate<wbr>Source property: Defines the source of the SSL certificate."
  parameters:
  - description: "the certificateSource value to set."
    name: "certificateSource"
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateSource?alt=com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateSource&text=FrontDoorCertificateSource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withCertificateSource(FrontDoorCertificateSource certificateSource)"
  desc: "Set the certificateSource property: Defines the source of the SSL certificate."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withCertificateType(com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateType)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withCertificateType(FrontDoorCertificateType certificateType)"
  name: "withCertificateType(FrontDoorCertificateType certificateType)"
  nameWithType: "CustomHttpsConfiguration.withCertificateType(FrontDoorCertificateType certificateType)"
  summary: "Set the certificate<wbr>Type property: Defines the type of the certificate used for secure connections to a frontend<wbr>Endpoint."
  parameters:
  - description: "the certificateType value to set."
    name: "certificateType"
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateType?alt=com.azure.resourcemanager.frontdoor.models.FrontDoorCertificateType&text=FrontDoorCertificateType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withCertificateType(FrontDoorCertificateType certificateType)"
  desc: "Set the certificateType property: Defines the type of the certificate used for secure connections to a frontendEndpoint."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withMinimumTlsVersion(com.azure.resourcemanager.frontdoor.models.MinimumTlsVersion)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withMinimumTlsVersion(MinimumTlsVersion minimumTlsVersion)"
  name: "withMinimumTlsVersion(MinimumTlsVersion minimumTlsVersion)"
  nameWithType: "CustomHttpsConfiguration.withMinimumTlsVersion(MinimumTlsVersion minimumTlsVersion)"
  summary: "Set the minimum<wbr>Tls<wbr>Version property: The minimum TLS version required from the clients to establish an SSL handshake with Front Door."
  parameters:
  - description: "the minimumTlsVersion value to set."
    name: "minimumTlsVersion"
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.MinimumTlsVersion?alt=com.azure.resourcemanager.frontdoor.models.MinimumTlsVersion&text=MinimumTlsVersion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withMinimumTlsVersion(MinimumTlsVersion minimumTlsVersion)"
  desc: "Set the minimumTlsVersion property: The minimum TLS version required from the clients to establish an SSL handshake with Front Door."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withProtocolType(com.azure.resourcemanager.frontdoor.models.FrontDoorTlsProtocolType)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withProtocolType(FrontDoorTlsProtocolType protocolType)"
  name: "withProtocolType(FrontDoorTlsProtocolType protocolType)"
  nameWithType: "CustomHttpsConfiguration.withProtocolType(FrontDoorTlsProtocolType protocolType)"
  summary: "Set the protocol<wbr>Type property: Defines the TLS extension protocol that is used for secure delivery."
  parameters:
  - description: "the protocolType value to set."
    name: "protocolType"
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.FrontDoorTlsProtocolType?alt=com.azure.resourcemanager.frontdoor.models.FrontDoorTlsProtocolType&text=FrontDoorTlsProtocolType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withProtocolType(FrontDoorTlsProtocolType protocolType)"
  desc: "Set the protocolType property: Defines the TLS extension protocol that is used for secure delivery."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withSecretName(java.lang.String)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withSecretName(String secretName)"
  name: "withSecretName(String secretName)"
  nameWithType: "CustomHttpsConfiguration.withSecretName(String secretName)"
  summary: "Set the secret<wbr>Name property: The name of the Key Vault secret representing the full certificate PFX."
  parameters:
  - description: "the secretName value to set."
    name: "secretName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withSecretName(String secretName)"
  desc: "Set the secretName property: The name of the Key Vault secret representing the full certificate PFX."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withSecretVersion(java.lang.String)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withSecretVersion(String secretVersion)"
  name: "withSecretVersion(String secretVersion)"
  nameWithType: "CustomHttpsConfiguration.withSecretVersion(String secretVersion)"
  summary: "Set the secret<wbr>Version property: The version of the Key Vault secret representing the full certificate PFX."
  parameters:
  - description: "the secretVersion value to set."
    name: "secretVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withSecretVersion(String secretVersion)"
  desc: "Set the secretVersion property: The version of the Key Vault secret representing the full certificate PFX."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withVault(com.azure.resourcemanager.frontdoor.models.KeyVaultCertificateSourceParametersVault)"
  fullName: "com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration.withVault(KeyVaultCertificateSourceParametersVault vault)"
  name: "withVault(KeyVaultCertificateSourceParametersVault vault)"
  nameWithType: "CustomHttpsConfiguration.withVault(KeyVaultCertificateSourceParametersVault vault)"
  summary: "Set the vault property: The Key Vault containing the SSL certificate."
  parameters:
  - description: "the vault value to set."
    name: "vault"
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.KeyVaultCertificateSourceParametersVault?alt=com.azure.resourcemanager.frontdoor.models.KeyVaultCertificateSourceParametersVault&text=KeyVaultCertificateSourceParametersVault\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CustomHttpsConfiguration withVault(KeyVaultCertificateSourceParametersVault vault)"
  desc: "Set the vault property: The Key Vault containing the SSL certificate."
  returns:
    description: "the CustomHttpsConfiguration object itself."
    type: "<xref href=\"com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration?alt=com.azure.resourcemanager.frontdoor.models.CustomHttpsConfiguration&text=CustomHttpsConfiguration\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Https settings for a domain."
metadata: {}
package: "com.azure.resourcemanager.frontdoor.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-frontdoor:1.0.0-beta.1
