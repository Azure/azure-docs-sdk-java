### YamlMime:ManagedReference
items:
- uid: com.azure.digitaltwins.core.models.BasicRelationship
  id: BasicRelationship
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models
  children:
  - com.azure.digitaltwins.core.models.BasicRelationship.BasicRelationship()
  - com.azure.digitaltwins.core.models.BasicRelationship.addCustomProperty(java.lang.String,java.lang.Object)
  - com.azure.digitaltwins.core.models.BasicRelationship.getCustomProperties()
  - com.azure.digitaltwins.core.models.BasicRelationship.getId()
  - com.azure.digitaltwins.core.models.BasicRelationship.getName()
  - com.azure.digitaltwins.core.models.BasicRelationship.getSourceId()
  - com.azure.digitaltwins.core.models.BasicRelationship.getTargetId()
  - com.azure.digitaltwins.core.models.BasicRelationship.setId(java.lang.String)
  - com.azure.digitaltwins.core.models.BasicRelationship.setName(java.lang.String)
  - com.azure.digitaltwins.core.models.BasicRelationship.setSourceId(java.lang.String)
  - com.azure.digitaltwins.core.models.BasicRelationship.setTargetId(java.lang.String)
  langs:
  - java
  name: BasicRelationship
  nameWithType: BasicRelationship
  fullName: com.azure.digitaltwins.core.models.BasicRelationship
  type: Class
  package: com.azure.digitaltwins.core.models
  summary: Although relationships have a user-defined schema, these properties should exist on every instance. This is useful to use as a base class to ensure your custom relationships have the necessary properties.
  syntax:
    content: public final class BasicRelationship
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.digitaltwins.core.models.BasicRelationship.BasicRelationship()
  id: BasicRelationship()
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: BasicRelationship()
  nameWithType: BasicRelationship.BasicRelationship()
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.BasicRelationship()
  overload: com.azure.digitaltwins.core.models.BasicRelationship.BasicRelationship*
  type: Constructor
  package: com.azure.digitaltwins.core.models
  syntax:
    content: public BasicRelationship()
- uid: com.azure.digitaltwins.core.models.BasicRelationship.addCustomProperty(java.lang.String,java.lang.Object)
  id: addCustomProperty(java.lang.String,java.lang.Object)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: addCustomProperty(String key, Object value)
  nameWithType: BasicRelationship.addCustomProperty(String key, Object value)
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.addCustomProperty(String key, Object value)
  overload: com.azure.digitaltwins.core.models.BasicRelationship.addCustomProperty*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Adds an additional property to this model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class.
  syntax:
    content: public BasicRelationship addCustomProperty(String key, Object value)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the additional property to be added to the relationship.
    - id: value
      type: java.lang.Object
      description: The value of the additional property to be added to the relationship.
    return:
      type: com.azure.digitaltwins.core.models.BasicRelationship
      description: The BasicRelationship object itself.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getCustomProperties()
  id: getCustomProperties()
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: getCustomProperties()
  nameWithType: BasicRelationship.getCustomProperties()
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getCustomProperties()
  overload: com.azure.digitaltwins.core.models.BasicRelationship.getCustomProperties*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Gets the additional properties defined in the model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class.
  syntax:
    content: public Map<String,Object> getCustomProperties()
    return:
      type: java.util.Map<java.lang.String,java.lang.Object>
      description: The additional properties defined in the model. This field will contain any properties of the relationship that are not already defined by the other strong types of this class.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getId()
  id: getId()
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: getId()
  nameWithType: BasicRelationship.getId()
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getId()
  overload: com.azure.digitaltwins.core.models.BasicRelationship.getId*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Gets the unique Id of the relationship. This field is present on every relationship.
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: The unique Id of the relationship. This field is present on every relationship.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getName()
  id: getName()
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: getName()
  nameWithType: BasicRelationship.getName()
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getName()
  overload: com.azure.digitaltwins.core.models.BasicRelationship.getName*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Gets the name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.
  syntax:
    content: public String getName()
    return:
      type: java.lang.String
      description: The name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getSourceId()
  id: getSourceId()
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: getSourceId()
  nameWithType: BasicRelationship.getSourceId()
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getSourceId()
  overload: com.azure.digitaltwins.core.models.BasicRelationship.getSourceId*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Gets the unique Id of the source digital twin. This field is present on every relationship.
  syntax:
    content: public String getSourceId()
    return:
      type: java.lang.String
      description: The unique Id of the source digital twin. This field is present on every relationship.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getTargetId()
  id: getTargetId()
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: getTargetId()
  nameWithType: BasicRelationship.getTargetId()
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getTargetId()
  overload: com.azure.digitaltwins.core.models.BasicRelationship.getTargetId*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Gets the unique Id of the target digital twin. This field is present on every relationship.
  syntax:
    content: public String getTargetId()
    return:
      type: java.lang.String
      description: The unique Id of the target digital twin. This field is present on every relationship.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setId(java.lang.String)
  id: setId(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: setId(String id)
  nameWithType: BasicRelationship.setId(String id)
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setId(String id)
  overload: com.azure.digitaltwins.core.models.BasicRelationship.setId*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Sets the unique Id of the relationship. This field is present on every relationship.
  syntax:
    content: public BasicRelationship setId(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: The unique Id of the relationship. This field is present on every relationship.
    return:
      type: com.azure.digitaltwins.core.models.BasicRelationship
      description: The BasicRelationship object itself.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setName(java.lang.String)
  id: setName(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: setName(String name)
  nameWithType: BasicRelationship.setName(String name)
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setName(String name)
  overload: com.azure.digitaltwins.core.models.BasicRelationship.setName*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Sets the name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.
  syntax:
    content: public BasicRelationship setName(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the relationship, which defines the type of link (e.g. Contains). This field is present on every relationship.
    return:
      type: com.azure.digitaltwins.core.models.BasicRelationship
      description: The BasicRelationship object itself.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setSourceId(java.lang.String)
  id: setSourceId(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: setSourceId(String sourceId)
  nameWithType: BasicRelationship.setSourceId(String sourceId)
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setSourceId(String sourceId)
  overload: com.azure.digitaltwins.core.models.BasicRelationship.setSourceId*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Sets the unique Id of the source digital twin. This field is present on every relationship.
  syntax:
    content: public BasicRelationship setSourceId(String sourceId)
    parameters:
    - id: sourceId
      type: java.lang.String
      description: The unique Id of the source digital twin. This field is present on every relationship.
    return:
      type: com.azure.digitaltwins.core.models.BasicRelationship
      description: The BasicRelationship object itself.
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setTargetId(java.lang.String)
  id: setTargetId(java.lang.String)
  artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
  parent: com.azure.digitaltwins.core.models.BasicRelationship
  langs:
  - java
  name: setTargetId(String targetId)
  nameWithType: BasicRelationship.setTargetId(String targetId)
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setTargetId(String targetId)
  overload: com.azure.digitaltwins.core.models.BasicRelationship.setTargetId*
  type: Method
  package: com.azure.digitaltwins.core.models
  summary: Sets the unique Id of the target digital twin. This field is present on every relationship.
  syntax:
    content: public BasicRelationship setTargetId(String targetId)
    parameters:
    - id: targetId
      type: java.lang.String
      description: The unique Id of the target digital twin. This field is present on every relationship.
    return:
      type: com.azure.digitaltwins.core.models.BasicRelationship
      description: The BasicRelationship object itself.
references:
- uid: com.azure.digitaltwins.core.models.BasicRelationship.BasicRelationship*
  name: BasicRelationship
  nameWithType: BasicRelationship.BasicRelationship
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.BasicRelationship
  package: com.azure.digitaltwins.core.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getId*
  name: getId
  nameWithType: BasicRelationship.getId
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getId
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setId*
  name: setId
  nameWithType: BasicRelationship.setId
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setId
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getSourceId*
  name: getSourceId
  nameWithType: BasicRelationship.getSourceId
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getSourceId
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setSourceId*
  name: setSourceId
  nameWithType: BasicRelationship.setSourceId
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setSourceId
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getTargetId*
  name: getTargetId
  nameWithType: BasicRelationship.getTargetId
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getTargetId
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setTargetId*
  name: setTargetId
  nameWithType: BasicRelationship.setTargetId
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setTargetId
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getName*
  name: getName
  nameWithType: BasicRelationship.getName
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getName
  package: com.azure.digitaltwins.core.models
- uid: com.azure.digitaltwins.core.models.BasicRelationship.setName*
  name: setName
  nameWithType: BasicRelationship.setName
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.setName
  package: com.azure.digitaltwins.core.models
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.digitaltwins.core.models.BasicRelationship.getCustomProperties*
  name: getCustomProperties
  nameWithType: BasicRelationship.getCustomProperties
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.getCustomProperties
  package: com.azure.digitaltwins.core.models
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.digitaltwins.core.models.BasicRelationship.addCustomProperty*
  name: addCustomProperty
  nameWithType: BasicRelationship.addCustomProperty
  fullName: com.azure.digitaltwins.core.models.BasicRelationship.addCustomProperty
  package: com.azure.digitaltwins.core.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
