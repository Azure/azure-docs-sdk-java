### YamlMime:JavaType
uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService"
fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService"
name: "HBaseLinkedService"
nameWithType: "HBaseLinkedService"
summary: "HBase server linked service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.datafactory.models.LinkedService?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.resourcemanager.datafactory.models.LinkedService.additionalProperties()"
- "com.azure.resourcemanager.datafactory.models.LinkedService.annotations()"
- "com.azure.resourcemanager.datafactory.models.LinkedService.connectVia()"
- "com.azure.resourcemanager.datafactory.models.LinkedService.description()"
- "com.azure.resourcemanager.datafactory.models.LinkedService.parameters()"
- "com.azure.resourcemanager.datafactory.models.LinkedService.validate()"
- "com.azure.resourcemanager.datafactory.models.LinkedService.withAdditionalProperties(java.util.Map<java.lang.String,java.lang.Object>)"
- "com.azure.resourcemanager.datafactory.models.LinkedService.withAnnotations(java.util.List<java.lang.Object>)"
- "com.azure.resourcemanager.datafactory.models.LinkedService.withConnectVia(com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference)"
- "com.azure.resourcemanager.datafactory.models.LinkedService.withDescription(java.lang.String)"
- "com.azure.resourcemanager.datafactory.models.LinkedService.withParameters(java.util.Map<java.lang.String,com.azure.resourcemanager.datafactory.models.ParameterSpecification>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class HBaseLinkedService extends LinkedService"
constructors:
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.HBaseLinkedService()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.HBaseLinkedService()"
  name: "HBaseLinkedService()"
  nameWithType: "HBaseLinkedService.HBaseLinkedService()"
  syntax: "public HBaseLinkedService()"
methods:
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.allowHostnameCNMismatch()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.allowHostnameCNMismatch()"
  name: "allowHostnameCNMismatch()"
  nameWithType: "HBaseLinkedService.allowHostnameCNMismatch()"
  summary: "Get the allowHostnameCNMismatch property: Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false."
  syntax: "public Object allowHostnameCNMismatch()"
  returns:
    description: "the allowHostnameCNMismatch value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.allowSelfSignedServerCert()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.allowSelfSignedServerCert()"
  name: "allowSelfSignedServerCert()"
  nameWithType: "HBaseLinkedService.allowSelfSignedServerCert()"
  summary: "Get the allowSelfSignedServerCert property: Specifies whether to allow self-signed certificates from the server. The default value is false."
  syntax: "public Object allowSelfSignedServerCert()"
  returns:
    description: "the allowSelfSignedServerCert value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.authenticationType()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.authenticationType()"
  name: "authenticationType()"
  nameWithType: "HBaseLinkedService.authenticationType()"
  summary: "Get the authenticationType property: The authentication mechanism to use to connect to the HBase server."
  syntax: "public HBaseAuthenticationType authenticationType()"
  returns:
    description: "the authenticationType value."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseAuthenticationType?alt=com.azure.resourcemanager.datafactory.models.HBaseAuthenticationType&text=HBaseAuthenticationType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.enableSsl()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.enableSsl()"
  name: "enableSsl()"
  nameWithType: "HBaseLinkedService.enableSsl()"
  summary: "Get the enableSsl property: Specifies whether the connections to the server are encrypted using SSL. The default value is false."
  syntax: "public Object enableSsl()"
  returns:
    description: "the enableSsl value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.encryptedCredential()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.encryptedCredential()"
  name: "encryptedCredential()"
  nameWithType: "HBaseLinkedService.encryptedCredential()"
  summary: "Get the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string)."
  syntax: "public Object encryptedCredential()"
  returns:
    description: "the encryptedCredential value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.host()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.host()"
  name: "host()"
  nameWithType: "HBaseLinkedService.host()"
  summary: "Get the host property: The IP address or host name of the HBase server. (i.e. 192.168.222.160)."
  syntax: "public Object host()"
  returns:
    description: "the host value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.httpPath()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.httpPath()"
  name: "httpPath()"
  nameWithType: "HBaseLinkedService.httpPath()"
  summary: "Get the httpPath property: The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)."
  syntax: "public Object httpPath()"
  returns:
    description: "the httpPath value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.password()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.password()"
  name: "password()"
  nameWithType: "HBaseLinkedService.password()"
  summary: "Get the password property: The password corresponding to the user name."
  syntax: "public SecretBase password()"
  returns:
    description: "the password value."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.SecretBase?alt=com.azure.resourcemanager.datafactory.models.SecretBase&text=SecretBase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.port()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.port()"
  name: "port()"
  nameWithType: "HBaseLinkedService.port()"
  summary: "Get the port property: The TCP port that the HBase instance uses to listen for client connections. The default value is 9090."
  syntax: "public Object port()"
  returns:
    description: "the port value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.trustedCertPath()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.trustedCertPath()"
  name: "trustedCertPath()"
  nameWithType: "HBaseLinkedService.trustedCertPath()"
  summary: "Get the trustedCertPath property: The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR."
  syntax: "public Object trustedCertPath()"
  returns:
    description: "the trustedCertPath value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.username()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.username()"
  name: "username()"
  nameWithType: "HBaseLinkedService.username()"
  summary: "Get the username property: The user name used to connect to the HBase instance."
  syntax: "public Object username()"
  returns:
    description: "the username value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.validate()"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.validate()"
  name: "validate()"
  nameWithType: "HBaseLinkedService.validate()"
  summary: "Validates the instance."
  overridden: "com.azure.resourcemanager.datafactory.models.LinkedService.validate()"
  syntax: "public void validate()"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAllowHostnameCNMismatch(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAllowHostnameCNMismatch(Object allowHostnameCNMismatch)"
  name: "withAllowHostnameCNMismatch(Object allowHostnameCNMismatch)"
  nameWithType: "HBaseLinkedService.withAllowHostnameCNMismatch(Object allowHostnameCNMismatch)"
  summary: "Set the allowHostnameCNMismatch property: Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over SSL. The default value is false."
  parameters:
  - description: "the allowHostnameCNMismatch value to set."
    name: "allowHostnameCNMismatch"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withAllowHostnameCNMismatch(Object allowHostnameCNMismatch)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAllowSelfSignedServerCert(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAllowSelfSignedServerCert(Object allowSelfSignedServerCert)"
  name: "withAllowSelfSignedServerCert(Object allowSelfSignedServerCert)"
  nameWithType: "HBaseLinkedService.withAllowSelfSignedServerCert(Object allowSelfSignedServerCert)"
  summary: "Set the allowSelfSignedServerCert property: Specifies whether to allow self-signed certificates from the server. The default value is false."
  parameters:
  - description: "the allowSelfSignedServerCert value to set."
    name: "allowSelfSignedServerCert"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withAllowSelfSignedServerCert(Object allowSelfSignedServerCert)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAnnotations(java.util.List<java.lang.Object>)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAnnotations(List<Object> annotations)"
  name: "withAnnotations(List<Object> annotations)"
  nameWithType: "HBaseLinkedService.withAnnotations(List<Object> annotations)"
  summary: "Set the annotations property: List of tags that can be used for describing the linked service."
  overridden: "com.azure.resourcemanager.datafactory.models.LinkedService.withAnnotations(java.util.List<java.lang.Object>)"
  parameters:
  - name: "annotations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public HBaseLinkedService withAnnotations(List<Object> annotations)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAuthenticationType(com.azure.resourcemanager.datafactory.models.HBaseAuthenticationType)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withAuthenticationType(HBaseAuthenticationType authenticationType)"
  name: "withAuthenticationType(HBaseAuthenticationType authenticationType)"
  nameWithType: "HBaseLinkedService.withAuthenticationType(HBaseAuthenticationType authenticationType)"
  summary: "Set the authenticationType property: The authentication mechanism to use to connect to the HBase server."
  parameters:
  - description: "the authenticationType value to set."
    name: "authenticationType"
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseAuthenticationType?alt=com.azure.resourcemanager.datafactory.models.HBaseAuthenticationType&text=HBaseAuthenticationType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withAuthenticationType(HBaseAuthenticationType authenticationType)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withConnectVia(com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withConnectVia(IntegrationRuntimeReference connectVia)"
  name: "withConnectVia(IntegrationRuntimeReference connectVia)"
  nameWithType: "HBaseLinkedService.withConnectVia(IntegrationRuntimeReference connectVia)"
  summary: "Set the connectVia property: The integration runtime reference."
  overridden: "com.azure.resourcemanager.datafactory.models.LinkedService.withConnectVia(com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference)"
  parameters:
  - name: "connectVia"
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference?alt=com.azure.resourcemanager.datafactory.models.IntegrationRuntimeReference&text=IntegrationRuntimeReference\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withConnectVia(IntegrationRuntimeReference connectVia)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withDescription(java.lang.String)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withDescription(String description)"
  name: "withDescription(String description)"
  nameWithType: "HBaseLinkedService.withDescription(String description)"
  summary: "Set the description property: Linked service description."
  overridden: "com.azure.resourcemanager.datafactory.models.LinkedService.withDescription(java.lang.String)"
  parameters:
  - name: "description"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withDescription(String description)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withEnableSsl(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withEnableSsl(Object enableSsl)"
  name: "withEnableSsl(Object enableSsl)"
  nameWithType: "HBaseLinkedService.withEnableSsl(Object enableSsl)"
  summary: "Set the enableSsl property: Specifies whether the connections to the server are encrypted using SSL. The default value is false."
  parameters:
  - description: "the enableSsl value to set."
    name: "enableSsl"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withEnableSsl(Object enableSsl)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withEncryptedCredential(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withEncryptedCredential(Object encryptedCredential)"
  name: "withEncryptedCredential(Object encryptedCredential)"
  nameWithType: "HBaseLinkedService.withEncryptedCredential(Object encryptedCredential)"
  summary: "Set the encryptedCredential property: The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager. Type: string (or Expression with resultType string)."
  parameters:
  - description: "the encryptedCredential value to set."
    name: "encryptedCredential"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withEncryptedCredential(Object encryptedCredential)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withHost(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withHost(Object host)"
  name: "withHost(Object host)"
  nameWithType: "HBaseLinkedService.withHost(Object host)"
  summary: "Set the host property: The IP address or host name of the HBase server. (i.e. 192.168.222.160)."
  parameters:
  - description: "the host value to set."
    name: "host"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withHost(Object host)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withHttpPath(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withHttpPath(Object httpPath)"
  name: "withHttpPath(Object httpPath)"
  nameWithType: "HBaseLinkedService.withHttpPath(Object httpPath)"
  summary: "Set the httpPath property: The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)."
  parameters:
  - description: "the httpPath value to set."
    name: "httpPath"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withHttpPath(Object httpPath)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withParameters(java.util.Map<java.lang.String,com.azure.resourcemanager.datafactory.models.ParameterSpecification>)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withParameters(Map<String,ParameterSpecification> parameters)"
  name: "withParameters(Map<String,ParameterSpecification> parameters)"
  nameWithType: "HBaseLinkedService.withParameters(Map<String,ParameterSpecification> parameters)"
  summary: "Set the parameters property: Parameters for linked service."
  overridden: "com.azure.resourcemanager.datafactory.models.LinkedService.withParameters(java.util.Map<java.lang.String,com.azure.resourcemanager.datafactory.models.ParameterSpecification>)"
  parameters:
  - name: "parameters"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.resourcemanager.datafactory.models.ParameterSpecification?alt=com.azure.resourcemanager.datafactory.models.ParameterSpecification&text=ParameterSpecification\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public HBaseLinkedService withParameters(Map<String,ParameterSpecification> parameters)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withPassword(com.azure.resourcemanager.datafactory.models.SecretBase)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withPassword(SecretBase password)"
  name: "withPassword(SecretBase password)"
  nameWithType: "HBaseLinkedService.withPassword(SecretBase password)"
  summary: "Set the password property: The password corresponding to the user name."
  parameters:
  - description: "the password value to set."
    name: "password"
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.SecretBase?alt=com.azure.resourcemanager.datafactory.models.SecretBase&text=SecretBase\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withPassword(SecretBase password)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withPort(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withPort(Object port)"
  name: "withPort(Object port)"
  nameWithType: "HBaseLinkedService.withPort(Object port)"
  summary: "Set the port property: The TCP port that the HBase instance uses to listen for client connections. The default value is 9090."
  parameters:
  - description: "the port value to set."
    name: "port"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withPort(Object port)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withTrustedCertPath(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withTrustedCertPath(Object trustedCertPath)"
  name: "withTrustedCertPath(Object trustedCertPath)"
  nameWithType: "HBaseLinkedService.withTrustedCertPath(Object trustedCertPath)"
  summary: "Set the trustedCertPath property: The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This property can only be set when using SSL on self-hosted IR. The default value is the cacerts.pem file installed with the IR."
  parameters:
  - description: "the trustedCertPath value to set."
    name: "trustedCertPath"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withTrustedCertPath(Object trustedCertPath)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withUsername(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.HBaseLinkedService.withUsername(Object username)"
  name: "withUsername(Object username)"
  nameWithType: "HBaseLinkedService.withUsername(Object username)"
  summary: "Set the username property: The user name used to connect to the HBase instance."
  parameters:
  - description: "the username value to set."
    name: "username"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public HBaseLinkedService withUsername(Object username)"
  returns:
    description: "the HBaseLinkedService object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.HBaseLinkedService?alt=com.azure.resourcemanager.datafactory.models.HBaseLinkedService&text=HBaseLinkedService\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.datafactory.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-datafactory:1.0.0-beta.16
