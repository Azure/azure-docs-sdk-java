### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  id: ContentLengthInputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io
  children:
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.ContentLengthInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream,long)
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.available()
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.close()
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read()
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read(byte[])
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read(byte[],int,int)
  - org.apache.hc.core5.http.impl.io.ContentLengthInputStream.skip(long)
  langs:
  - java
  name: ContentLengthInputStream
  nameWithType: ContentLengthInputStream
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  type: Class
  package: org.apache.hc.core5.http.impl.io
  summary: >-
    Input stream that cuts off after a defined number of bytes. This class is used to receive content of HTTP messages where the end of the content entity is determined by the value of the `Content-Length header`. Entities transferred using this stream can be maximum <xref uid="java.lang.Long.MAX_VALUE" data-throw-if-not-resolved="false">Long#MAX_VALUE</xref> long.


    Note that this class NEVER closes the underlying stream, even when close gets called. Instead, it will read until the "end" of its limit on close, which allows for the seamless execution of subsequent HTTP 1.1 requests, while not requiring the client to remember to read the entire contents of the response.
  syntax:
    content: public class ContentLengthInputStream extends InputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  inheritedMembers:
  - java.io.InputStream.available()
  - java.io.InputStream.close()
  - java.io.InputStream.mark(int)
  - java.io.InputStream.markSupported()
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.read()
  - java.io.InputStream.read(byte[])
  - java.io.InputStream.read(byte[],int,int)
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.reset()
  - java.io.InputStream.skip(long)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.ContentLengthInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream,long)
  id: ContentLengthInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream,long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: ContentLengthInputStream(SessionInputBuffer buffer, InputStream inputStream, long contentLength)
  nameWithType: ContentLengthInputStream.ContentLengthInputStream(SessionInputBuffer buffer, InputStream inputStream, long contentLength)
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.ContentLengthInputStream(SessionInputBuffer buffer, InputStream inputStream, long contentLength)
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.ContentLengthInputStream*
  type: Constructor
  package: org.apache.hc.core5.http.impl.io
  summary: Default constructor.
  syntax:
    content: public ContentLengthInputStream(SessionInputBuffer buffer, InputStream inputStream, long contentLength)
    parameters:
    - id: buffer
      type: org.apache.hc.core5.http.io.SessionInputBuffer
      description: Session input buffer
    - id: inputStream
      type: java.io.InputStream
      description: Input stream
    - id: contentLength
      type: long
      description: >-
        The maximum number of bytes that can be read from
         the stream. Subsequent read operations will return -1.
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.available()
  id: available()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: available()
  nameWithType: ContentLengthInputStream.available()
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.available()
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.available*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  syntax:
    content: public int available()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: close()
  nameWithType: ContentLengthInputStream.close()
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.close()
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.close*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: >-
    Reads until the end of the known length of content.


    Does not close the underlying socket input, but instead leaves it primed to parse the next response.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
    description: If an IO problem occurs.
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read()
  id: read()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: read()
  nameWithType: ContentLengthInputStream.read()
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read()
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Read the next byte from the stream
  syntax:
    content: public int read()
    return:
      type: int
      description: The next byte or -1 if the end of stream has been reached.
  exceptions:
  - type: java.io.IOException
    description: If an IO problem occurs
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read(byte[])
  id: read(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: read(byte[] b)
  nameWithType: ContentLengthInputStream.read(byte[] b)
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read(byte[] b)
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Read more bytes from the stream.
  syntax:
    content: public int read(byte[] b)
    parameters:
    - id: b
      type: byte[]
      description: The byte array to put the new data in.
    return:
      type: int
      description: The number of bytes read into the buffer.
  exceptions:
  - type: java.io.IOException
    description: If an IO problem occurs
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: read(byte[] b, int off, int len)
  nameWithType: ContentLengthInputStream.read(byte[] b, int off, int len)
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read(byte[] b, int off, int len)
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Does standard <xref uid="java.io.InputStream.read*" data-throw-if-not-resolved="false">InputStream#read(byte[], int, int)</xref> behavior, but also notifies the watcher when the contents have been consumed.
  syntax:
    content: public int read(byte[] b, int off, int len)
    parameters:
    - id: b
      type: byte[]
      description: The byte array to fill.
    - id: off
      type: int
      description: Start filling at this position.
    - id: len
      type: int
      description: The number of bytes to attempt to read.
    return:
      type: int
      description: >-
        The number of bytes read, or -1 if the end of content has been
          reached.
  exceptions:
  - type: java.io.IOException
    description: Should an error occur on the wrapped stream.
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.skip(long)
  id: skip(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ContentLengthInputStream
  langs:
  - java
  name: skip(long n)
  nameWithType: ContentLengthInputStream.skip(long n)
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.skip(long n)
  overload: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.skip*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Skips and discards a number of bytes from the input stream.
  syntax:
    content: public long skip(long n)
    parameters:
    - id: n
      type: long
      description: The number of bytes to skip.
    return:
      type: long
      description: >-
        The actual number of bytes skipped. &le; 0 if no bytes
         are skipped.
  exceptions:
  - type: java.io.IOException
    description: If an error occurs while skipping bytes.
references:
- uid: org.apache.hc.core5.http.io.SessionInputBuffer
  name: SessionInputBuffer
  nameWithType: SessionInputBuffer
  fullName: org.apache.hc.core5.http.io.SessionInputBuffer
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.ContentLengthInputStream*
  name: ContentLengthInputStream
  nameWithType: ContentLengthInputStream.ContentLengthInputStream
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.ContentLengthInputStream
  package: org.apache.hc.core5.http.impl.io
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.close*
  name: close
  nameWithType: ContentLengthInputStream.close
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.close
  package: org.apache.hc.core5.http.impl.io
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.available*
  name: available
  nameWithType: ContentLengthInputStream.available
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.available
  package: org.apache.hc.core5.http.impl.io
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read*
  name: read
  nameWithType: ContentLengthInputStream.read
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.read
  package: org.apache.hc.core5.http.impl.io
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.skip*
  name: skip
  nameWithType: ContentLengthInputStream.skip
  fullName: org.apache.hc.core5.http.impl.io.ContentLengthInputStream.skip
  package: org.apache.hc.core5.http.impl.io
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.InputStream.mark(int)
  name: InputStream.mark(int)
  nameWithType: InputStream.mark(int)
  fullName: java.io.InputStream.mark(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.InputStream.close()
  name: InputStream.close()
  nameWithType: InputStream.close()
  fullName: java.io.InputStream.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.io.InputStream.markSupported()
  name: InputStream.markSupported()
  nameWithType: InputStream.markSupported()
  fullName: java.io.InputStream.markSupported()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.io.InputStream.read(byte[])
  name: InputStream.read(byte[])
  nameWithType: InputStream.read(byte[])
  fullName: java.io.InputStream.read(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.available()
  name: InputStream.available()
  nameWithType: InputStream.available()
  fullName: java.io.InputStream.available()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.InputStream.skip(long)
  name: InputStream.skip(long)
  nameWithType: InputStream.skip(long)
  fullName: java.io.InputStream.skip(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.InputStream.read()
  name: InputStream.read()
  nameWithType: InputStream.read()
  fullName: java.io.InputStream.read()
- uid: java.io.InputStream.read(byte[],int,int)
  name: InputStream.read(byte[],int,int)
  nameWithType: InputStream.read(byte[],int,int)
  fullName: java.io.InputStream.read(byte[],int,int)
- uid: java.io.InputStream.reset()
  name: InputStream.reset()
  nameWithType: InputStream.reset()
  fullName: java.io.InputStream.reset()
