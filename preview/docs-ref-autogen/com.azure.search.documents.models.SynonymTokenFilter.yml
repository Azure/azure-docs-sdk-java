### YamlMime:ManagedReference
items:
- uid: "com.azure.search.documents.models.SynonymTokenFilter"
  id: "SynonymTokenFilter"
  parent: "com.azure.search.documents.models"
  children:
  - "com.azure.search.documents.models.SynonymTokenFilter.SynonymTokenFilter()"
  - "com.azure.search.documents.models.SynonymTokenFilter.getSynonyms()"
  - "com.azure.search.documents.models.SynonymTokenFilter.isExpand()"
  - "com.azure.search.documents.models.SynonymTokenFilter.isIgnoreCase()"
  - "com.azure.search.documents.models.SynonymTokenFilter.setExpand(java.lang.Boolean)"
  - "com.azure.search.documents.models.SynonymTokenFilter.setIgnoreCase(java.lang.Boolean)"
  - "com.azure.search.documents.models.SynonymTokenFilter.setSynonyms(java.util.List<java.lang.String>)"
  langs:
  - "java"
  name: "SynonymTokenFilter"
  nameWithType: "SynonymTokenFilter"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter"
  type: "Class"
  package: "com.azure.search.documents.models"
  summary: "Matches single or multi-word synonyms in a token stream. This token filter is implemented using Apache Lucene."
  syntax:
    content: "public final class SynonymTokenFilter extends TokenFilter"
  inheritance:
  - "java.lang.Object"
  - "com.azure.search.documents.models.TokenFilter"
  inheritedMembers:
  - "com.azure.search.documents.models.TokenFilter.getName()"
  - "com.azure.search.documents.models.TokenFilter.setName(java.lang.String)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.SynonymTokenFilter()"
  id: "SynonymTokenFilter()"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "SynonymTokenFilter()"
  nameWithType: "SynonymTokenFilter.SynonymTokenFilter()"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.SynonymTokenFilter()"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.SynonymTokenFilter*"
  type: "Constructor"
  package: "com.azure.search.documents.models"
  syntax:
    content: "public SynonymTokenFilter()"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.getSynonyms()"
  id: "getSynonyms()"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "getSynonyms()"
  nameWithType: "SynonymTokenFilter.getSynonyms()"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.getSynonyms()"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.getSynonyms*"
  type: "Method"
  package: "com.azure.search.documents.models"
  summary: "Get the synonyms property: A list of synonyms in following one of two formats: 1. incredible, unbelievable, fabulous => amazing - all terms on the left side of => symbol will be replaced with all terms on its right side; 2. incredible, unbelievable, fabulous, amazing - comma separated list of equivalent words. Set the expand option to change how this list is interpreted."
  syntax:
    content: "public List<String> getSynonyms()"
    return:
      type: "java.util.List<java.lang.String>"
      description: "the synonyms value."
- uid: "com.azure.search.documents.models.SynonymTokenFilter.isExpand()"
  id: "isExpand()"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "isExpand()"
  nameWithType: "SynonymTokenFilter.isExpand()"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.isExpand()"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.isExpand*"
  type: "Method"
  package: "com.azure.search.documents.models"
  summary: "Get the expand property: A value indicating whether all words in the list of synonyms (if => notation is not used) will map to one another. If true, all words in the list of synonyms (if => notation is not used) will map to one another. The following list: incredible, unbelievable, fabulous, amazing is equivalent to: incredible, unbelievable, fabulous, amazing => incredible, unbelievable, fabulous, amazing. If false, the following list: incredible, unbelievable, fabulous, amazing will be equivalent to: incredible, unbelievable, fabulous, amazing => incredible. Default is true."
  syntax:
    content: "public Boolean isExpand()"
    return:
      type: "java.lang.Boolean"
      description: "the expand value."
- uid: "com.azure.search.documents.models.SynonymTokenFilter.isIgnoreCase()"
  id: "isIgnoreCase()"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "isIgnoreCase()"
  nameWithType: "SynonymTokenFilter.isIgnoreCase()"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.isIgnoreCase()"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.isIgnoreCase*"
  type: "Method"
  package: "com.azure.search.documents.models"
  summary: "Get the ignoreCase property: A value indicating whether to case-fold input for matching. Default is false."
  syntax:
    content: "public Boolean isIgnoreCase()"
    return:
      type: "java.lang.Boolean"
      description: "the ignoreCase value."
- uid: "com.azure.search.documents.models.SynonymTokenFilter.setExpand(java.lang.Boolean)"
  id: "setExpand(java.lang.Boolean)"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "setExpand(Boolean expand)"
  nameWithType: "SynonymTokenFilter.setExpand(Boolean expand)"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.setExpand(Boolean expand)"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.setExpand*"
  type: "Method"
  package: "com.azure.search.documents.models"
  summary: "Set the expand property: A value indicating whether all words in the list of synonyms (if => notation is not used) will map to one another. If true, all words in the list of synonyms (if => notation is not used) will map to one another. The following list: incredible, unbelievable, fabulous, amazing is equivalent to: incredible, unbelievable, fabulous, amazing => incredible, unbelievable, fabulous, amazing. If false, the following list: incredible, unbelievable, fabulous, amazing will be equivalent to: incredible, unbelievable, fabulous, amazing => incredible. Default is true."
  syntax:
    content: "public SynonymTokenFilter setExpand(Boolean expand)"
    parameters:
    - id: "expand"
      type: "java.lang.Boolean"
      description: "the expand value to set."
    return:
      type: "com.azure.search.documents.models.SynonymTokenFilter"
      description: "the SynonymTokenFilter object itself."
- uid: "com.azure.search.documents.models.SynonymTokenFilter.setIgnoreCase(java.lang.Boolean)"
  id: "setIgnoreCase(java.lang.Boolean)"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "setIgnoreCase(Boolean ignoreCase)"
  nameWithType: "SynonymTokenFilter.setIgnoreCase(Boolean ignoreCase)"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.setIgnoreCase(Boolean ignoreCase)"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.setIgnoreCase*"
  type: "Method"
  package: "com.azure.search.documents.models"
  summary: "Set the ignoreCase property: A value indicating whether to case-fold input for matching. Default is false."
  syntax:
    content: "public SynonymTokenFilter setIgnoreCase(Boolean ignoreCase)"
    parameters:
    - id: "ignoreCase"
      type: "java.lang.Boolean"
      description: "the ignoreCase value to set."
    return:
      type: "com.azure.search.documents.models.SynonymTokenFilter"
      description: "the SynonymTokenFilter object itself."
- uid: "com.azure.search.documents.models.SynonymTokenFilter.setSynonyms(java.util.List<java.lang.String>)"
  id: "setSynonyms(java.util.List<java.lang.String>)"
  parent: "com.azure.search.documents.models.SynonymTokenFilter"
  langs:
  - "java"
  name: "setSynonyms(List<String> synonyms)"
  nameWithType: "SynonymTokenFilter.setSynonyms(List<String> synonyms)"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.setSynonyms(List<String> synonyms)"
  overload: "com.azure.search.documents.models.SynonymTokenFilter.setSynonyms*"
  type: "Method"
  package: "com.azure.search.documents.models"
  summary: "Set the synonyms property: A list of synonyms in following one of two formats: 1. incredible, unbelievable, fabulous => amazing - all terms on the left side of => symbol will be replaced with all terms on its right side; 2. incredible, unbelievable, fabulous, amazing - comma separated list of equivalent words. Set the expand option to change how this list is interpreted."
  syntax:
    content: "public SynonymTokenFilter setSynonyms(List<String> synonyms)"
    parameters:
    - id: "synonyms"
      type: "java.util.List<java.lang.String>"
      description: "the synonyms value to set."
    return:
      type: "com.azure.search.documents.models.SynonymTokenFilter"
      description: "the SynonymTokenFilter object itself."
references:
- uid: "com.azure.search.documents.models.SynonymTokenFilter.SynonymTokenFilter*"
  name: "SynonymTokenFilter"
  nameWithType: "SynonymTokenFilter.SynonymTokenFilter"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.SynonymTokenFilter"
  package: "com.azure.search.documents.models"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.getSynonyms*"
  name: "getSynonyms"
  nameWithType: "SynonymTokenFilter.getSynonyms"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.getSynonyms"
  package: "com.azure.search.documents.models"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.setSynonyms*"
  name: "setSynonyms"
  nameWithType: "SynonymTokenFilter.setSynonyms"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.setSynonyms"
  package: "com.azure.search.documents.models"
- uid: "java.lang.Boolean"
  spec.java:
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.isIgnoreCase*"
  name: "isIgnoreCase"
  nameWithType: "SynonymTokenFilter.isIgnoreCase"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.isIgnoreCase"
  package: "com.azure.search.documents.models"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.setIgnoreCase*"
  name: "setIgnoreCase"
  nameWithType: "SynonymTokenFilter.setIgnoreCase"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.setIgnoreCase"
  package: "com.azure.search.documents.models"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.isExpand*"
  name: "isExpand"
  nameWithType: "SynonymTokenFilter.isExpand"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.isExpand"
  package: "com.azure.search.documents.models"
- uid: "com.azure.search.documents.models.SynonymTokenFilter.setExpand*"
  name: "setExpand"
  nameWithType: "SynonymTokenFilter.setExpand"
  fullName: "com.azure.search.documents.models.SynonymTokenFilter.setExpand"
  package: "com.azure.search.documents.models"
- uid: "com.azure.search.documents.models.TokenFilter"
  name: "TokenFilter"
  nameWithType: "TokenFilter"
  fullName: "com.azure.search.documents.models.TokenFilter"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.search.documents.models.TokenFilter.getName()"
  name: "TokenFilter.getName()"
  nameWithType: "TokenFilter.getName()"
  fullName: "com.azure.search.documents.models.TokenFilter.getName()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.search.documents.models.TokenFilter.setName(java.lang.String)"
  name: "TokenFilter.setName(String)"
  nameWithType: "TokenFilter.setName(String)"
  fullName: "com.azure.search.documents.models.TokenFilter.setName(java.lang.String)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "java.lang.String"
  name: "String"
  nameWithType: "String"
  fullName: "java.lang.String"
