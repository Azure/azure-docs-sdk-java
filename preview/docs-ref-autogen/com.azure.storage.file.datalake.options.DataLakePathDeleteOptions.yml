### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions"
fullName: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions"
name: "DataLakePathDeleteOptions"
nameWithType: "DataLakePathDeleteOptions"
summary: "Extended options that may be passed when deleting a datalake resource."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakePathDeleteOptions"
constructors:
- uid: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.DataLakePathDeleteOptions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.DataLakePathDeleteOptions()"
  name: "DataLakePathDeleteOptions()"
  nameWithType: "DataLakePathDeleteOptions.DataLakePathDeleteOptions()"
  summary: "Constructs a <xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>."
  syntax: "public DataLakePathDeleteOptions()"
  desc: "Constructs a <xref uid=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathDeleteOptions\"></xref>."
methods:
- uid: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.getIsRecursive()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.getIsRecursive()"
  name: "getIsRecursive()"
  nameWithType: "DataLakePathDeleteOptions.getIsRecursive()"
  syntax: "public boolean getIsRecursive()"
  returns:
    description: "whether everything under the resource should be deleted recursively"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.getRequestConditions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.getRequestConditions()"
  name: "getRequestConditions()"
  nameWithType: "DataLakePathDeleteOptions.getRequestConditions()"
  summary: "Gets the request conditions."
  syntax: "public DataLakeRequestConditions getRequestConditions()"
  desc: "Gets the request conditions."
  returns:
    description: "the request conditions."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.setIsRecursive(boolean)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.setIsRecursive(boolean recursive)"
  name: "setIsRecursive(boolean recursive)"
  nameWithType: "DataLakePathDeleteOptions.setIsRecursive(boolean recursive)"
  summary: "Sets the permissions."
  parameters:
  - description: "whether resource should be deleted recursively."
    name: "recursive"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathDeleteOptions setIsRecursive(boolean recursive)"
  desc: "Sets the permissions."
  returns:
    description: "the updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathDeleteOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  name: "setRequestConditions(DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathDeleteOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  summary: "Sets the request conditions."
  parameters:
  - description: "The request conditions."
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathDeleteOptions setRequestConditions(DataLakeRequestConditions requestConditions)"
  desc: "Sets the request conditions."
  returns:
    description: "the updated FileQueryOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathDeleteOptions?alt=com.azure.storage.file.datalake.options.DataLakePathDeleteOptions&text=DataLakePathDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Extended options that may be passed when deleting a datalake resource."
metadata: {}
package: "com.azure.storage.file.datalake.options"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
