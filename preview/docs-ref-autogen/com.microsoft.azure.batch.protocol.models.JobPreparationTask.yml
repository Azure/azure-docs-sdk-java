### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  id: JobPreparationTask
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.id()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess()
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine(java.lang.String)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints(com.microsoft.azure.batch.protocol.models.TaskConstraints)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId(java.lang.String)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess(java.lang.Boolean)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)
  - com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess(java.lang.Boolean)
  langs:
  - java
  name: JobPreparationTask
  nameWithType: JobPreparationTask
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  type: Class
  package: com.microsoft.azure.batch.protocol.models
  summary: 'A Job Preparation Task to run before any Tasks of the Job on any given Compute Node. You can use Job Preparation to prepare a Node to run Tasks for the Job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the Tasks in the Job. The Job Preparation Task can download these common resource files to the shared location on the Node. (AZ\_BATCH\_NODE\_ROOT\_DIR\\shared), or starting a local service on the Node so that all Tasks of that Job can communicate with it. If the Job Preparation Task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run Tasks of this Job on the Node. The Compute Node remains ineligible to run Tasks of this Job until it is reimaged. The Compute Node remains active and can be used for other Jobs. The Job Preparation Task can run multiple times on the same Node. Therefore, you should write the Job Preparation Task to handle re-execution. If the Node is rebooted, the Job Preparation Task is run again on the Compute Node before scheduling any other Task of the Job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation Task did not previously complete. If the Node is reimaged, the Job Preparation Task is run again before scheduling any Task of the Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing.'
  syntax:
    content: public class JobPreparationTask
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask()
  id: JobPreparationTask()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: JobPreparationTask()
  nameWithType: JobPreparationTask.JobPreparationTask()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask*
  type: Constructor
  package: com.microsoft.azure.batch.protocol.models
  syntax:
    content: public JobPreparationTask()
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine()
  id: commandLine()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: commandLine()
  nameWithType: JobPreparationTask.commandLine()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
  syntax:
    content: public String commandLine()
    return:
      type: java.lang.String
      description: the commandLine value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints()
  id: constraints()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: constraints()
  nameWithType: JobPreparationTask.constraints()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the constraints value.
  syntax:
    content: public TaskConstraints constraints()
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: the constraints value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings()
  id: containerSettings()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: containerSettings()
  nameWithType: JobPreparationTask.containerSettings()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get when this is specified, all directories recursively below the AZ\_BATCH\_NODE\_ROOT\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\_BATCH\_NODE\_ROOT\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
  syntax:
    content: public TaskContainerSettings containerSettings()
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
      description: the containerSettings value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings()
  id: environmentSettings()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: environmentSettings()
  nameWithType: JobPreparationTask.environmentSettings()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the environmentSettings value.
  syntax:
    content: public List<EnvironmentSetting> environmentSettings()
    return:
      type: java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>
      description: the environmentSettings value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id()
  id: id()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: id()
  nameWithType: JobPreparationTask.id()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
  syntax:
    content: public String id()
    return:
      type: java.lang.String
      description: the id value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess()
  id: rerunOnNodeRebootAfterSuccess()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: rerunOnNodeRebootAfterSuccess()
  nameWithType: JobPreparationTask.rerunOnNodeRebootAfterSuccess()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get the Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true.
  syntax:
    content: public Boolean rerunOnNodeRebootAfterSuccess()
    return:
      type: java.lang.Boolean
      description: the rerunOnNodeRebootAfterSuccess value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles()
  id: resourceFiles()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: resourceFiles()
  nameWithType: JobPreparationTask.resourceFiles()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
  syntax:
    content: public List<ResourceFile> resourceFiles()
    return:
      type: java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>
      description: the resourceFiles value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity()
  id: userIdentity()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: userIdentity()
  nameWithType: JobPreparationTask.userIdentity()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get if omitted, the Task runs as a non-administrative user unique to the Task on Windows Compute Nodes, or a non-administrative user unique to the Pool on Linux Compute Nodes.
  syntax:
    content: public UserIdentity userIdentity()
    return:
      type: com.microsoft.azure.batch.protocol.models.UserIdentity
      description: the userIdentity value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess()
  id: waitForSuccess()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: waitForSuccess()
  nameWithType: JobPreparationTask.waitForSuccess()
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess()
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get if true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.
  syntax:
    content: public Boolean waitForSuccess()
    return:
      type: java.lang.Boolean
      description: the waitForSuccess value
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine(java.lang.String)
  id: withCommandLine(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withCommandLine(String commandLine)
  nameWithType: JobPreparationTask.withCommandLine(String commandLine)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine(String commandLine)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
  syntax:
    content: public JobPreparationTask withCommandLine(String commandLine)
    parameters:
    - id: commandLine
      type: java.lang.String
      description: the commandLine value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints(com.microsoft.azure.batch.protocol.models.TaskConstraints)
  id: withConstraints(com.microsoft.azure.batch.protocol.models.TaskConstraints)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withConstraints(TaskConstraints constraints)
  nameWithType: JobPreparationTask.withConstraints(TaskConstraints constraints)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints(TaskConstraints constraints)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the constraints value.
  syntax:
    content: public JobPreparationTask withConstraints(TaskConstraints constraints)
    parameters:
    - id: constraints
      type: com.microsoft.azure.batch.protocol.models.TaskConstraints
      description: the constraints value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)
  id: withContainerSettings(com.microsoft.azure.batch.protocol.models.TaskContainerSettings)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: JobPreparationTask.withContainerSettings(TaskContainerSettings containerSettings)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings(TaskContainerSettings containerSettings)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set when this is specified, all directories recursively below the AZ\_BATCH\_NODE\_ROOT\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\_BATCH\_NODE\_ROOT\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files.
  syntax:
    content: public JobPreparationTask withContainerSettings(TaskContainerSettings containerSettings)
    parameters:
    - id: containerSettings
      type: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
      description: the containerSettings value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)
  id: withEnvironmentSettings(java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: JobPreparationTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the environmentSettings value.
  syntax:
    content: public JobPreparationTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
    parameters:
    - id: environmentSettings
      type: java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>
      description: the environmentSettings value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId(java.lang.String)
  id: withId(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withId(String id)
  nameWithType: JobPreparationTask.withId(String id)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId(String id)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other Task in the Job can have the same ID as the Job Preparation Task. If you try to submit a Task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).
  syntax:
    content: public JobPreparationTask withId(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess(java.lang.Boolean)
  id: withRerunOnNodeRebootAfterSuccess(java.lang.Boolean)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  nameWithType: JobPreparationTask.withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set the Job Preparation Task is always rerun if a Compute Node is reimaged, or if the Job Preparation Task did not complete (e.g. because the reboot occurred while the Task was running). Therefore, you should always write a Job Preparation Task to be idempotent and to behave correctly if run multiple times. The default value is true.
  syntax:
    content: public JobPreparationTask withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
    parameters:
    - id: rerunOnNodeRebootAfterSuccess
      type: java.lang.Boolean
      description: the rerunOnNodeRebootAfterSuccess value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)
  id: withResourceFiles(java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: JobPreparationTask.withResourceFiles(List<ResourceFile> resourceFiles)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles(List<ResourceFile> resourceFiles)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set files listed under this element are located in the Task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.
  syntax:
    content: public JobPreparationTask withResourceFiles(List<ResourceFile> resourceFiles)
    parameters:
    - id: resourceFiles
      type: java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>
      description: the resourceFiles value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)
  id: withUserIdentity(com.microsoft.azure.batch.protocol.models.UserIdentity)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: JobPreparationTask.withUserIdentity(UserIdentity userIdentity)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity(UserIdentity userIdentity)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set if omitted, the Task runs as a non-administrative user unique to the Task on Windows Compute Nodes, or a non-administrative user unique to the Pool on Linux Compute Nodes.
  syntax:
    content: public JobPreparationTask withUserIdentity(UserIdentity userIdentity)
    parameters:
    - id: userIdentity
      type: com.microsoft.azure.batch.protocol.models.UserIdentity
      description: the userIdentity value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess(java.lang.Boolean)
  id: withWaitForSuccess(java.lang.Boolean)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.JobPreparationTask
  langs:
  - java
  name: withWaitForSuccess(Boolean waitForSuccess)
  nameWithType: JobPreparationTask.withWaitForSuccess(Boolean waitForSuccess)
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess(Boolean waitForSuccess)
  overload: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set if true and the Job Preparation Task fails on a Node, the Batch service retries the Job Preparation Task up to its maximum retry count (as specified in the constraints element). If the Task has still not completed successfully after all retries, then the Batch service will not schedule Tasks of the Job to the Node. The Node remains active and eligible to run Tasks of other Jobs. If false, the Batch service will not wait for the Job Preparation Task to complete. In this case, other Tasks of the Job can start executing on the Compute Node while the Job Preparation Task is still running; and even if the Job Preparation Task fails, new Tasks will continue to be scheduled on the Compute Node. The default value is true.
  syntax:
    content: public JobPreparationTask withWaitForSuccess(Boolean waitForSuccess)
    parameters:
    - id: waitForSuccess
      type: java.lang.Boolean
      description: the waitForSuccess value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.JobPreparationTask
      description: the JobPreparationTask object itself.
references:
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask*
  name: JobPreparationTask
  nameWithType: JobPreparationTask.JobPreparationTask
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.JobPreparationTask
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id*
  name: id
  nameWithType: JobPreparationTask.id
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId*
  name: withId
  nameWithType: JobPreparationTask.withId
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine*
  name: commandLine
  nameWithType: JobPreparationTask.commandLine
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine*
  name: withCommandLine
  nameWithType: JobPreparationTask.withCommandLine
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
  name: TaskContainerSettings
  nameWithType: TaskContainerSettings
  fullName: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings*
  name: containerSettings
  nameWithType: JobPreparationTask.containerSettings
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings*
  name: withContainerSettings
  nameWithType: JobPreparationTask.withContainerSettings
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: java.util.List<com.microsoft.azure.batch.protocol.models.ResourceFile>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.ResourceFile
    name: ResourceFile
    fullName: com.microsoft.azure.batch.protocol.models.ResourceFile
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles*
  name: resourceFiles
  nameWithType: JobPreparationTask.resourceFiles
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles*
  name: withResourceFiles
  nameWithType: JobPreparationTask.withResourceFiles
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles
  package: com.microsoft.azure.batch.protocol.models
- uid: java.util.List<com.microsoft.azure.batch.protocol.models.EnvironmentSetting>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
    name: EnvironmentSetting
    fullName: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings*
  name: environmentSettings
  nameWithType: JobPreparationTask.environmentSettings
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings*
  name: withEnvironmentSettings
  nameWithType: JobPreparationTask.withEnvironmentSettings
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.TaskConstraints
  name: TaskConstraints
  nameWithType: TaskConstraints
  fullName: com.microsoft.azure.batch.protocol.models.TaskConstraints
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints*
  name: constraints
  nameWithType: JobPreparationTask.constraints
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints*
  name: withConstraints
  nameWithType: JobPreparationTask.withConstraints
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess*
  name: waitForSuccess
  nameWithType: JobPreparationTask.waitForSuccess
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess*
  name: withWaitForSuccess
  nameWithType: JobPreparationTask.withWaitForSuccess
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.UserIdentity
  name: UserIdentity
  nameWithType: UserIdentity
  fullName: com.microsoft.azure.batch.protocol.models.UserIdentity
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity*
  name: userIdentity
  nameWithType: JobPreparationTask.userIdentity
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity*
  name: withUserIdentity
  nameWithType: JobPreparationTask.withUserIdentity
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess*
  name: rerunOnNodeRebootAfterSuccess
  nameWithType: JobPreparationTask.rerunOnNodeRebootAfterSuccess
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess*
  name: withRerunOnNodeRebootAfterSuccess
  nameWithType: JobPreparationTask.withRerunOnNodeRebootAfterSuccess
  fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.microsoft.azure.batch.protocol.models.ResourceFile
  name: ResourceFile
  nameWithType: ResourceFile
  fullName: com.microsoft.azure.batch.protocol.models.ResourceFile
- uid: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
  name: EnvironmentSetting
  nameWithType: EnvironmentSetting
  fullName: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
