### YamlMime:ManagedReference
items:
- uid: org.slf4j.Marker
  id: Marker
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j
  children:
  - org.slf4j.Marker.ANY_MARKER
  - org.slf4j.Marker.ANY_NON_NULL_MARKER
  - org.slf4j.Marker.add(org.slf4j.Marker)
  - org.slf4j.Marker.contains(java.lang.String)
  - org.slf4j.Marker.contains(org.slf4j.Marker)
  - org.slf4j.Marker.equals(java.lang.Object)
  - org.slf4j.Marker.getName()
  - org.slf4j.Marker.hasChildren()
  - org.slf4j.Marker.hasReferences()
  - org.slf4j.Marker.hashCode()
  - org.slf4j.Marker.iterator()
  - org.slf4j.Marker.remove(org.slf4j.Marker)
  langs:
  - java
  name: Marker
  nameWithType: Marker
  fullName: org.slf4j.Marker
  type: Interface
  package: org.slf4j
  summary: >-
    Markers are named objects used to enrich log statements. Conforming logging system Implementations of SLF4J determine how information conveyed by markers are used, if at all. In particular, many conforming logging systems ignore marker data.


    Markers can contain references to other markers, which in turn may contain references of their own.
  syntax:
    content: public interface Marker extends Serializable
  implements:
  - java.io.Serializable
- uid: org.slf4j.Marker.ANY_MARKER
  id: ANY_MARKER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: ANY_MARKER
  nameWithType: Marker.ANY_MARKER
  fullName: org.slf4j.Marker.ANY_MARKER
  type: Field
  package: org.slf4j
  summary: This constant represents any marker, including a null marker.
  syntax:
    content: public static final String ANY_MARKER
    return:
      type: java.lang.String
- uid: org.slf4j.Marker.ANY_NON_NULL_MARKER
  id: ANY_NON_NULL_MARKER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: ANY_NON_NULL_MARKER
  nameWithType: Marker.ANY_NON_NULL_MARKER
  fullName: org.slf4j.Marker.ANY_NON_NULL_MARKER
  type: Field
  package: org.slf4j
  summary: This constant represents any non-null marker.
  syntax:
    content: public static final String ANY_NON_NULL_MARKER
    return:
      type: java.lang.String
- uid: org.slf4j.Marker.add(org.slf4j.Marker)
  id: add(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: add(Marker reference)
  nameWithType: Marker.add(Marker reference)
  fullName: org.slf4j.Marker.add(Marker reference)
  overload: org.slf4j.Marker.add*
  type: Method
  package: org.slf4j
  summary: Add a reference to another Marker.
  syntax:
    content: public abstract void add(Marker reference)
    parameters:
    - id: reference
      type: org.slf4j.Marker
      description: a reference to another marker
- uid: org.slf4j.Marker.contains(java.lang.String)
  id: contains(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: contains(String name)
  nameWithType: Marker.contains(String name)
  fullName: org.slf4j.Marker.contains(String name)
  overload: org.slf4j.Marker.contains*
  type: Method
  package: org.slf4j
  summary: Does this marker contain the marker named 'name'? If 'name' is null the returned value is always false.
  syntax:
    content: public abstract boolean contains(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The marker name to test for inclusion.
    return:
      type: boolean
      description: Whether this marker contains the other marker.
- uid: org.slf4j.Marker.contains(org.slf4j.Marker)
  id: contains(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: contains(Marker other)
  nameWithType: Marker.contains(Marker other)
  fullName: org.slf4j.Marker.contains(Marker other)
  overload: org.slf4j.Marker.contains*
  type: Method
  package: org.slf4j
  summary: Does this marker contain a reference to the 'other' marker? Marker A is defined to contain marker B, if A == B or if B is referenced by A, or if B is referenced by any one of A's references (recursively).
  syntax:
    content: public abstract boolean contains(Marker other)
    parameters:
    - id: other
      type: org.slf4j.Marker
      description: The marker to test for inclusion.
    return:
      type: boolean
      description: Whether this marker contains the other marker.
- uid: org.slf4j.Marker.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: equals(Object o)
  nameWithType: Marker.equals(Object o)
  fullName: org.slf4j.Marker.equals(Object o)
  overload: org.slf4j.Marker.equals*
  type: Method
  package: org.slf4j
  summary: Markers are considered equal if they have the same name.
  syntax:
    content: public abstract boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
      description: true, if this.name equals o.name
- uid: org.slf4j.Marker.getName()
  id: getName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: getName()
  nameWithType: Marker.getName()
  fullName: org.slf4j.Marker.getName()
  overload: org.slf4j.Marker.getName*
  type: Method
  package: org.slf4j
  summary: Get the name of this Marker.
  syntax:
    content: public abstract String getName()
    return:
      type: java.lang.String
      description: name of marker
- uid: org.slf4j.Marker.hasChildren()
  id: hasChildren()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: hasChildren()
  nameWithType: Marker.hasChildren()
  fullName: org.slf4j.Marker.hasChildren()
  overload: org.slf4j.Marker.hasChildren*
  type: Method
  package: org.slf4j
  syntax:
    content: public abstract boolean hasChildren()
    return:
      type: boolean
- uid: org.slf4j.Marker.hasReferences()
  id: hasReferences()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: hasReferences()
  nameWithType: Marker.hasReferences()
  fullName: org.slf4j.Marker.hasReferences()
  overload: org.slf4j.Marker.hasReferences*
  type: Method
  package: org.slf4j
  summary: Does this marker have any references?
  syntax:
    content: public abstract boolean hasReferences()
    return:
      type: boolean
      description: true if this marker has one or more references, false otherwise.
- uid: org.slf4j.Marker.hashCode()
  id: hashCode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: hashCode()
  nameWithType: Marker.hashCode()
  fullName: org.slf4j.Marker.hashCode()
  overload: org.slf4j.Marker.hashCode*
  type: Method
  package: org.slf4j
  summary: Compute the hash code based on the name of this marker. Note that markers are considered equal if they have the same name.
  syntax:
    content: public abstract int hashCode()
    return:
      type: int
      description: the computed hashCode
- uid: org.slf4j.Marker.iterator()
  id: iterator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: iterator()
  nameWithType: Marker.iterator()
  fullName: org.slf4j.Marker.iterator()
  overload: org.slf4j.Marker.iterator*
  type: Method
  package: org.slf4j
  summary: Returns an Iterator which can be used to iterate over the references of this marker. An empty iterator is returned when this marker has no references.
  syntax:
    content: public abstract Iterator<Marker> iterator()
    return:
      type: java.util.Iterator<org.slf4j.Marker>
      description: Iterator over the references of this marker
- uid: org.slf4j.Marker.remove(org.slf4j.Marker)
  id: remove(org.slf4j.Marker)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.Marker
  langs:
  - java
  name: remove(Marker reference)
  nameWithType: Marker.remove(Marker reference)
  fullName: org.slf4j.Marker.remove(Marker reference)
  overload: org.slf4j.Marker.remove*
  type: Method
  package: org.slf4j
  summary: Remove a marker reference.
  syntax:
    content: public abstract boolean remove(Marker reference)
    parameters:
    - id: reference
      type: org.slf4j.Marker
      description: the marker reference to remove
    return:
      type: boolean
      description: true if reference could be found and removed, false otherwise.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.Marker.getName*
  name: getName
  nameWithType: Marker.getName
  fullName: org.slf4j.Marker.getName
  package: org.slf4j
- uid: org.slf4j.Marker.add*
  name: add
  nameWithType: Marker.add
  fullName: org.slf4j.Marker.add
  package: org.slf4j
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.slf4j.Marker.remove*
  name: remove
  nameWithType: Marker.remove
  fullName: org.slf4j.Marker.remove
  package: org.slf4j
- uid: org.slf4j.Marker.hasChildren*
  name: hasChildren
  nameWithType: Marker.hasChildren
  fullName: org.slf4j.Marker.hasChildren
  package: org.slf4j
- uid: org.slf4j.Marker.hasReferences*
  name: hasReferences
  nameWithType: Marker.hasReferences
  fullName: org.slf4j.Marker.hasReferences
  package: org.slf4j
- uid: java.util.Iterator<org.slf4j.Marker>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: org.slf4j.Marker
    name: Marker
    fullName: org.slf4j.Marker
  - name: '>'
    fullName: '>'
- uid: org.slf4j.Marker.iterator*
  name: iterator
  nameWithType: Marker.iterator
  fullName: org.slf4j.Marker.iterator
  package: org.slf4j
- uid: org.slf4j.Marker.contains*
  name: contains
  nameWithType: Marker.contains
  fullName: org.slf4j.Marker.contains
  package: org.slf4j
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.slf4j.Marker.equals*
  name: equals
  nameWithType: Marker.equals
  fullName: org.slf4j.Marker.equals
  package: org.slf4j
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.slf4j.Marker.hashCode*
  name: hashCode
  nameWithType: Marker.hashCode
  fullName: org.slf4j.Marker.hashCode
  package: org.slf4j
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
