### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.digest.MurmurHash3
  id: MurmurHash3
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest
  children:
  - org.apache.commons.codec.digest.MurmurHash3.DEFAULT_SEED
  - org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32
  - org.apache.commons.codec.digest.MurmurHash3.NULL_HASHCODE
  - org.apache.commons.codec.digest.MurmurHash3.hash128(byte[])
  - org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash128(java.lang.String)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(byte[])
  - org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(java.lang.String)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(long)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(long,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(long,long)
  - org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash64(byte[])
  - org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int)
  - org.apache.commons.codec.digest.MurmurHash3.hash64(int)
  - org.apache.commons.codec.digest.MurmurHash3.hash64(long)
  - org.apache.commons.codec.digest.MurmurHash3.hash64(short)
  langs:
  - java
  name: MurmurHash3
  nameWithType: MurmurHash3
  fullName: org.apache.commons.codec.digest.MurmurHash3
  type: Class
  package: org.apache.commons.codec.digest
  summary: 'MurmurHash3 yields a 32-bit or 128-bit value. MurmurHash is a non-cryptographic hash function suitable for general hash-based lookup. The name comes from two basic operations, multiply (MU) and rotate (R), used in its inner loop. Unlike cryptographic hash functions, it is not specifically designed to be difficult to reverse by an adversary, making it unsuitable for cryptographic purposes. 32-bit Java port of https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\#94 128-bit Java port of https://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\#255 This is a public domain code with no copyrights. From homepage of MurmurHash (https://code.google.com/p/smhasher/), "All MurmurHash versions are public domain software, and the author disclaims all copyright to their code." Copied from Apache Hive: https://github.com/apache/hive/blob/master/storage-api/src/java/org/apache/hive/common/util/Murmur3.java'
  syntax:
    content: public final class MurmurHash3
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.digest.MurmurHash3.DEFAULT_SEED
  id: DEFAULT_SEED
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: DEFAULT_SEED
  nameWithType: MurmurHash3.DEFAULT_SEED
  fullName: org.apache.commons.codec.digest.MurmurHash3.DEFAULT_SEED
  type: Field
  package: org.apache.commons.codec.digest
  syntax:
    content: public static final int DEFAULT_SEED
    return:
      type: int
- uid: org.apache.commons.codec.digest.MurmurHash3.MurmurHash3()
  id: MurmurHash3()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: MurmurHash3()
  nameWithType: MurmurHash3.MurmurHash3()
  fullName: org.apache.commons.codec.digest.MurmurHash3.MurmurHash3()
  overload: org.apache.commons.codec.digest.MurmurHash3.MurmurHash3*
  type: Constructor
  package: org.apache.commons.codec.digest
  syntax:
    content: private MurmurHash3()
- uid: org.apache.commons.codec.digest.MurmurHash3.NULL_HASHCODE
  id: NULL_HASHCODE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: NULL_HASHCODE
  nameWithType: MurmurHash3.NULL_HASHCODE
  fullName: org.apache.commons.codec.digest.MurmurHash3.NULL_HASHCODE
  type: Field
  package: org.apache.commons.codec.digest
  syntax:
    content: public static final long NULL_HASHCODE
    return:
      type: long
- uid: org.apache.commons.codec.digest.MurmurHash3.hash128(byte[])
  id: hash128(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash128(byte[] data)
  nameWithType: MurmurHash3.hash128(byte[] data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash128(byte[] data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash128*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 128-bit variant.
  syntax:
    content: public static long[] hash128(byte[] data)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    return:
      type: long[]
      description: '- 128 bit hash (2 longs)'
- uid: org.apache.commons.codec.digest.MurmurHash3.hash128(byte[],int,int,int)
  id: hash128(byte[],int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash128(byte[] data, int offset, int length, int seed)
  nameWithType: MurmurHash3.hash128(byte[] data, int offset, int length, int seed)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash128(byte[] data, int offset, int length, int seed)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash128*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 128-bit variant.
  syntax:
    content: public static long[] hash128(byte[] data, int offset, int length, int seed)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    - id: offset
      type: int
      description: '- the first element of array'
    - id: length
      type: int
      description: '- length of array'
    - id: seed
      type: int
      description: '- seed. (default is 0)'
    return:
      type: long[]
      description: '- 128 bit hash (2 longs)'
- uid: org.apache.commons.codec.digest.MurmurHash3.hash128(java.lang.String)
  id: hash128(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash128(String data)
  nameWithType: MurmurHash3.hash128(String data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash128(String data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash128*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 128-bit variant.
  syntax:
    content: public static long[] hash128(String data)
    parameters:
    - id: data
      type: java.lang.String
      description: '- input String'
    return:
      type: long[]
      description: '- 128 bit hash (2 longs)'
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[])
  id: hash32(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(byte[] data)
  nameWithType: MurmurHash3.hash32(byte[] data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[] data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from byte array with the default seed.
  syntax:
    content: public static int hash32(byte[] data)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int)
  id: hash32(byte[],int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(byte[] data, int length)
  nameWithType: MurmurHash3.hash32(byte[] data, int length)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[] data, int length)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from byte array with the default seed.
  syntax:
    content: public static int hash32(byte[] data, int length)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    - id: length
      type: int
      description: '- length of array'
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int)
  id: hash32(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(byte[] data, int length, int seed)
  nameWithType: MurmurHash3.hash32(byte[] data, int length, int seed)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[] data, int length, int seed)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from byte array with the given length and seed.
  syntax:
    content: public static int hash32(byte[] data, int length, int seed)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    - id: length
      type: int
      description: '- length of array'
    - id: seed
      type: int
      description: '- seed. (default 0)'
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[],int,int,int)
  id: hash32(byte[],int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(byte[] data, int offset, int length, int seed)
  nameWithType: MurmurHash3.hash32(byte[] data, int offset, int length, int seed)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(byte[] data, int offset, int length, int seed)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from byte array with the given length, offset and seed.
  syntax:
    content: public static int hash32(byte[] data, int offset, int length, int seed)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    - id: offset
      type: int
      description: '- offset of data'
    - id: length
      type: int
      description: '- length of array'
    - id: seed
      type: int
      description: '- seed. (default 0)'
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(java.lang.String)
  id: hash32(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(String data)
  nameWithType: MurmurHash3.hash32(String data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(String data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from a string with the default seed.
  syntax:
    content: public static int hash32(String data)
    parameters:
    - id: data
      type: java.lang.String
      description: '- input string'
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(long)
  id: hash32(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(long l0)
  nameWithType: MurmurHash3.hash32(long l0)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(long l0)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from a long with default seed value.
  syntax:
    content: public static int hash32(long l0)
    parameters:
    - id: l0
      type: long
      description: long to hash
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(long,int)
  id: hash32(long,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(long l0, int seed)
  nameWithType: MurmurHash3.hash32(long l0, int seed)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(long l0, int seed)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from a long with the given seed.
  syntax:
    content: public static int hash32(long l0, int seed)
    parameters:
    - id: l0
      type: long
      description: long to hash
    - id: seed
      type: int
      description: initial seed value
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(long,long)
  id: hash32(long,long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(long l0, long l1)
  nameWithType: MurmurHash3.hash32(long l0, long l1)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(long l0, long l1)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from two longs with default seed value.
  syntax:
    content: public static int hash32(long l0, long l1)
    parameters:
    - id: l0
      type: long
      description: long to hash
    - id: l1
      type: long
      description: long to hash
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32(long,long,int)
  id: hash32(long,long,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash32(long l0, long l1, int seed)
  nameWithType: MurmurHash3.hash32(long l0, long l1, int seed)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32(long l0, long l1, int seed)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash32*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 32 bit hash from two longs with the given seed.
  syntax:
    content: public static int hash32(long l0, long l1, int seed)
    parameters:
    - id: l0
      type: long
      description: long to hash
    - id: l1
      type: long
      description: long to hash
    - id: seed
      type: int
      description: initial seed value
    return:
      type: int
      description: 32 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64(byte[])
  id: hash64(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash64(byte[] data)
  nameWithType: MurmurHash3.hash64(byte[] data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64(byte[] data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash64*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 64-bit variant. This is essentially MSB 8 bytes of Murmur3 128-bit variant.
  syntax:
    content: public static long hash64(byte[] data)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    return:
      type: long
      description: 64 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int)
  id: hash64(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash64(byte[] data, int offset, int length)
  nameWithType: MurmurHash3.hash64(byte[] data, int offset, int length)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64(byte[] data, int offset, int length)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash64*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 64 bit hash from byte array with the given length, offset and default seed.
  syntax:
    content: public static long hash64(byte[] data, int offset, int length)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    - id: offset
      type: int
      description: '- offset of data'
    - id: length
      type: int
      description: '- length of array'
    return:
      type: long
      description: 64 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64(byte[],int,int,int)
  id: hash64(byte[],int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash64(byte[] data, int offset, int length, int seed)
  nameWithType: MurmurHash3.hash64(byte[] data, int offset, int length, int seed)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64(byte[] data, int offset, int length, int seed)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash64*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Generates 64 bit hash from byte array with the given length, offset and seed.
  syntax:
    content: public static long hash64(byte[] data, int offset, int length, int seed)
    parameters:
    - id: data
      type: byte[]
      description: '- input byte array'
    - id: offset
      type: int
      description: '- offset of data'
    - id: length
      type: int
      description: '- length of array'
    - id: seed
      type: int
      description: '- seed. (default 0)'
    return:
      type: long
      description: 64 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64(int)
  id: hash64(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash64(int data)
  nameWithType: MurmurHash3.hash64(int data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64(int data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash64*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 64-bit variant. This is essentially MSB 8 bytes of Murmur3 128-bit variant.
  syntax:
    content: public static long hash64(int data)
    parameters:
    - id: data
      type: int
      description: '- input int'
    return:
      type: long
      description: 64 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64(long)
  id: hash64(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash64(long data)
  nameWithType: MurmurHash3.hash64(long data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64(long data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash64*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 64-bit variant. This is essentially MSB 8 bytes of Murmur3 128-bit variant.
  syntax:
    content: public static long hash64(long data)
    parameters:
    - id: data
      type: long
      description: '- input long'
    return:
      type: long
      description: 64 bit hash
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64(short)
  id: hash64(short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.MurmurHash3
  langs:
  - java
  name: hash64(short data)
  nameWithType: MurmurHash3.hash64(short data)
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64(short data)
  overload: org.apache.commons.codec.digest.MurmurHash3.hash64*
  type: Method
  package: org.apache.commons.codec.digest
  summary: Murmur3 64-bit variant. This is essentially MSB 8 bytes of Murmur3 128-bit variant.
  syntax:
    content: public static long hash64(short data)
    parameters:
    - id: data
      type: short
      description: '- input short'
    return:
      type: long
      description: 64 bit hash
references:
- uid: org.apache.commons.codec.digest.MurmurHash3.MurmurHash3*
  name: MurmurHash3
  nameWithType: MurmurHash3.MurmurHash3
  fullName: org.apache.commons.codec.digest.MurmurHash3.MurmurHash3
  package: org.apache.commons.codec.digest
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.commons.codec.digest.MurmurHash3.hash32*
  name: hash32
  nameWithType: MurmurHash3.hash32
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash32
  package: org.apache.commons.codec.digest
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.digest.MurmurHash3.hash64*
  name: hash64
  nameWithType: MurmurHash3.hash64
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash64
  package: org.apache.commons.codec.digest
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: long[]
  spec.java:
  - uid: long
    name: long
    fullName: long
  - name: '[]'
    fullName: '[]'
- uid: org.apache.commons.codec.digest.MurmurHash3.hash128*
  name: hash128
  nameWithType: MurmurHash3.hash128
  fullName: org.apache.commons.codec.digest.MurmurHash3.hash128
  package: org.apache.commons.codec.digest
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32
  name: MurmurHash3.IncrementalHash32
  nameWithType: MurmurHash3.IncrementalHash32
  fullName: org.apache.commons.codec.digest.MurmurHash3.IncrementalHash32
