### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue*"
fullName: "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue"
name: "readBinaryValue"
nameWithType: "UTF8DataInputJsonParser.readBinaryValue"
members:
- uid: "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)"
  fullName: "com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue(Base64Variant b64variant, OutputStream out)"
  name: "readBinaryValue(Base64Variant b64variant, OutputStream out)"
  nameWithType: "UTF8DataInputJsonParser.readBinaryValue(Base64Variant b64variant, OutputStream out)"
  summary: "Similar to <xref uid=\"com.fasterxml.jackson.core.json.UTF8DataInputJsonParser.readBinaryValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readBinaryValue(OutputStream)\"></xref> but allows explicitly specifying base64 variant to use."
  overridden: "com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)"
  parameters:
  - name: "b64variant"
    type: "<xref href=\"com.fasterxml.jackson.core.Base64Variant?alt=com.fasterxml.jackson.core.Base64Variant&text=Base64Variant\" data-throw-if-not-resolved=\"False\" />"
  - name: "out"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int readBinaryValue(Base64Variant b64variant, OutputStream out)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.json"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
