### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  id: SimpleCosmosRepository
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support
  children:
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.<S>save(S)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.<S>saveAll(java.lang.Iterable<S>)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.SimpleCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,ID>,com.azure.spring.data.cosmos.core.CosmosOperations)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.count()
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.delete(T)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll()
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll(java.lang.Iterable<? extends T>)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById(ID)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById(ID,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.existsById(ID)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll()
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll(org.springframework.data.domain.Pageable)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll(org.springframework.data.domain.Sort)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAllById(java.lang.Iterable<ID>)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById(ID)
  - com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById(ID,com.azure.cosmos.models.PartitionKey)
  langs:
  - java
  name: SimpleCosmosRepository<T,ID>
  nameWithType: SimpleCosmosRepository<T,ID>
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>
  type: Class
  package: com.azure.spring.data.cosmos.repository.support
  summary: Repository class for simple Cosmos operation
  syntax:
    content: public class SimpleCosmosRepository<T,ID> implements CosmosRepository<T,ID>
    typeParameters:
    - id: T
    - id: ID
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.spring.data.cosmos.repository.CosmosRepository<T,ID>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.<S>save(S)
  id: <S>save(S)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: <S>save(S entity)
  nameWithType: SimpleCosmosRepository<T,ID>.<S>save(S entity)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.<S>save(S entity)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.save*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: save entity without partition
  syntax:
    content: public S <S>save(S entity)
    parameters:
    - id: entity
      type: S
      description: to be saved
    return:
      type: S
      description: entity
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.<S>saveAll(java.lang.Iterable<S>)
  id: <S>saveAll(java.lang.Iterable<S>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: <S>saveAll(Iterable<S> entities)
  nameWithType: SimpleCosmosRepository<T,ID>.<S>saveAll(Iterable<S> entities)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.<S>saveAll(Iterable<S> entities)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.saveAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: batch save entities
  syntax:
    content: public Iterable<S> <S>saveAll(Iterable<S> entities)
    parameters:
    - id: entities
      type: java.lang.Iterable<S>
      description: Batch entities
    return:
      type: java.lang.Iterable<S>
      description: return the saved entities
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.SimpleCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,ID>,com.azure.spring.data.cosmos.core.CosmosOperations)
  id: SimpleCosmosRepository(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,ID>,com.azure.spring.data.cosmos.core.CosmosOperations)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: SimpleCosmosRepository(CosmosEntityInformation<T,ID> metadata, CosmosOperations dbOperations)
  nameWithType: SimpleCosmosRepository<T,ID>.SimpleCosmosRepository(CosmosEntityInformation<T,ID> metadata, CosmosOperations dbOperations)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.SimpleCosmosRepository(CosmosEntityInformation<T,ID> metadata, CosmosOperations dbOperations)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.SimpleCosmosRepository*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.support
  summary: Initialization
  syntax:
    content: public SimpleCosmosRepository(CosmosEntityInformation<T,ID> metadata, CosmosOperations dbOperations)
    parameters:
    - id: metadata
      type: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,ID>
      description: for cosmos entity information
    - id: dbOperations
      type: com.azure.spring.data.cosmos.core.CosmosOperations
      description: for cosmosDB operation
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.count()
  id: count()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: count()
  nameWithType: SimpleCosmosRepository<T,ID>.count()
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.count()
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.count*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: return count of documents in one container without partitions
  syntax:
    content: public long count()
    return:
      type: long
      description: count of documents in one container without partitions
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.delete(T)
  id: delete(T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: delete(T entity)
  nameWithType: SimpleCosmosRepository<T,ID>.delete(T entity)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.delete(T entity)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.delete*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: delete one document per entity
  syntax:
    content: public void delete(T entity)
    parameters:
    - id: entity
      type: T
      description: the entity used to specify a document
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll()
  id: deleteAll()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: deleteAll()
  nameWithType: SimpleCosmosRepository<T,ID>.deleteAll()
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.deleteAll()
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: delete all the domains of a container
  syntax:
    content: public void deleteAll()
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll(java.lang.Iterable<? extends T>)
  id: deleteAll(java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: deleteAll(Iterable<? extends T> entities)
  nameWithType: SimpleCosmosRepository<T,ID>.deleteAll(Iterable<? extends T> entities)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.deleteAll(Iterable<? extends T> entities)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: delete list of entities without partitions
  syntax:
    content: public void deleteAll(Iterable<? extends T> entities)
    parameters:
    - id: entities
      type: java.lang.Iterable<? extends T>
      description: list of entities to be deleted
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById(ID)
  id: deleteById(ID)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: deleteById(ID id)
  nameWithType: SimpleCosmosRepository<T,ID>.deleteById(ID id)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.deleteById(ID id)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: delete one document per id without configuring partition key value
  syntax:
    content: public void deleteById(ID id)
    parameters:
    - id: id
      type: ID
      description: an id used to specify the deleted document
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById(ID,com.azure.cosmos.models.PartitionKey)
  id: deleteById(ID,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: deleteById(ID id, PartitionKey partitionKey)
  nameWithType: SimpleCosmosRepository<T,ID>.deleteById(ID id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.deleteById(ID id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Deletes an entity by its id and partition key.
  syntax:
    content: public void deleteById(ID id, PartitionKey partitionKey)
    parameters:
    - id: id
      type: ID
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.existsById(ID)
  id: existsById(ID)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: existsById(ID primaryKey)
  nameWithType: SimpleCosmosRepository<T,ID>.existsById(ID primaryKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.existsById(ID primaryKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.existsById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: check if an entity exists per id without partition
  syntax:
    content: public boolean existsById(ID primaryKey)
    parameters:
    - id: primaryKey
      type: ID
      description: an id to specify an entity
    return:
      type: boolean
      description: if the entity exists
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll()
  id: findAll()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findAll()
  nameWithType: SimpleCosmosRepository<T,ID>.findAll()
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAll()
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: find all entities from one container without configuring partition key value
  syntax:
    content: public Iterable<T> findAll()
    return:
      type: java.lang.Iterable<T>
      description: return Iterable of the found entities List
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll(com.azure.cosmos.models.PartitionKey)
  id: findAll(com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findAll(PartitionKey partitionKey)
  nameWithType: SimpleCosmosRepository<T,ID>.findAll(PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAll(PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Returns list of items in a specific partition
  syntax:
    content: public Iterable<T> findAll(PartitionKey partitionKey)
    parameters:
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll(org.springframework.data.domain.Pageable)
  id: findAll(org.springframework.data.domain.Pageable)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findAll(Pageable pageable)
  nameWithType: SimpleCosmosRepository<T,ID>.findAll(Pageable pageable)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAll(Pageable pageable)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: FindQuerySpecGenerator Returns a Page of entities meeting the paging restriction provided in the Pageable object.
  syntax:
    content: public Page<T> findAll(Pageable pageable)
    parameters:
    - id: pageable
      type: org.springframework.data.domain.Pageable
      description: the Pageable object providing paging restriction
    return:
      type: org.springframework.data.domain.Page<T>
      description: a page of entities
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll(org.springframework.data.domain.Sort)
  id: findAll(org.springframework.data.domain.Sort)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findAll(Sort sort)
  nameWithType: SimpleCosmosRepository<T,ID>.findAll(Sort sort)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAll(Sort sort)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Returns all entities sorted by the given options.
  syntax:
    content: public Iterable<T> findAll(Sort sort)
    parameters:
    - id: sort
      type: org.springframework.data.domain.Sort
      description: the Sort option for queries.
    return:
      type: java.lang.Iterable<T>
      description: all entities sorted by the given options
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAllById(java.lang.Iterable<ID>)
  id: findAllById(java.lang.Iterable<ID>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findAllById(Iterable<ID> ids)
  nameWithType: SimpleCosmosRepository<T,ID>.findAllById(Iterable<ID> ids)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAllById(Iterable<ID> ids)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAllById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: find entities based on id list from one container without partitions
  syntax:
    content: public Iterable<T> findAllById(Iterable<ID> ids)
    parameters:
    - id: ids
      type: java.lang.Iterable<ID>
      description: id list used to find entities
    return:
      type: java.lang.Iterable<T>
      description: return a List of all found entities
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById(ID)
  id: findById(ID)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findById(ID id)
  nameWithType: SimpleCosmosRepository<T,ID>.findById(ID id)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findById(ID id)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: find one entity per id without partitions
  syntax:
    content: public Optional<T> findById(ID id)
    parameters:
    - id: id
      type: ID
      description: an id used to find entity
    return:
      type: java.util.Optional<T>
      description: return the searching result
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById(ID,com.azure.cosmos.models.PartitionKey)
  id: findById(ID,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository
  langs:
  - java
  name: findById(ID id, PartitionKey partitionKey)
  nameWithType: SimpleCosmosRepository<T,ID>.findById(ID id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findById(ID id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Retrieves an entity by its id.
  syntax:
    content: public Optional<T> findById(ID id, PartitionKey partitionKey)
    parameters:
    - id: id
      type: ID
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
    return:
      type: java.util.Optional<T>
references:
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<T,ID>
  spec.java:
  - uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
    name: CosmosEntityInformation
    fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: ID
    name: ID
    fullName: ID
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.CosmosOperations
  name: CosmosOperations
  nameWithType: CosmosOperations
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.SimpleCosmosRepository*
  name: SimpleCosmosRepository
  nameWithType: SimpleCosmosRepository<T,ID>.SimpleCosmosRepository
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.SimpleCosmosRepository
  package: com.azure.spring.data.cosmos.repository.support
- uid: S
  spec.java:
  - uid: S
    name: S
    fullName: S
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.save*
  name: <S>save
  nameWithType: SimpleCosmosRepository<T,ID>.<S>save
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.<S>save
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<S>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.saveAll*
  name: <S>saveAll
  nameWithType: SimpleCosmosRepository<T,ID>.<S>saveAll
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.<S>saveAll
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAll*
  name: findAll
  nameWithType: SimpleCosmosRepository<T,ID>.findAll
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAll
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<ID>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: ID
    name: ID
    fullName: ID
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findAllById*
  name: findAllById
  nameWithType: SimpleCosmosRepository<T,ID>.findAllById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findAllById
  package: com.azure.spring.data.cosmos.repository.support
- uid: ID
  spec.java:
  - uid: ID
    name: ID
    fullName: ID
- uid: java.util.Optional<T>
  spec.java:
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.findById*
  name: findById
  nameWithType: SimpleCosmosRepository<T,ID>.findById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.findById
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.cosmos.models.PartitionKey
  spec.java:
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.count*
  name: count
  nameWithType: SimpleCosmosRepository<T,ID>.count
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.count
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteById*
  name: deleteById
  nameWithType: SimpleCosmosRepository<T,ID>.deleteById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.deleteById
  package: com.azure.spring.data.cosmos.repository.support
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.delete*
  name: delete
  nameWithType: SimpleCosmosRepository<T,ID>.delete
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.delete
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.deleteAll*
  name: deleteAll
  nameWithType: SimpleCosmosRepository<T,ID>.deleteAll
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.deleteAll
  package: com.azure.spring.data.cosmos.repository.support
- uid: java.lang.Iterable<? extends T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository.existsById*
  name: existsById
  nameWithType: SimpleCosmosRepository<T,ID>.existsById
  fullName: com.azure.spring.data.cosmos.repository.support.SimpleCosmosRepository<T,ID>.existsById
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.domain.Sort
  spec.java:
  - uid: org.springframework.data.domain.Sort
    name: Sort
    fullName: org.springframework.data.domain.Sort
- uid: org.springframework.data.domain.Pageable
  spec.java:
  - uid: org.springframework.data.domain.Pageable
    name: Pageable
    fullName: org.springframework.data.domain.Pageable
- uid: org.springframework.data.domain.Page<T>
  spec.java:
  - uid: org.springframework.data.domain.Page
    name: Page
    fullName: org.springframework.data.domain.Page
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.CosmosRepository<T,ID>
  name: CosmosRepository<T,ID>
  nameWithType: CosmosRepository<T,ID>
  fullName: com.azure.spring.data.cosmos.repository.CosmosRepository<T,ID>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  name: CosmosEntityInformation
  nameWithType: CosmosEntityInformation
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
- uid: T,ID
  name: T,ID
  nameWithType: T,ID
  fullName: T,ID
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: org.springframework.data.domain.Page
  name: Page
  nameWithType: Page
  fullName: org.springframework.data.domain.Page
- uid: com.azure.spring.data.cosmos.repository.CosmosRepository
  name: CosmosRepository
  nameWithType: CosmosRepository
  fullName: com.azure.spring.data.cosmos.repository.CosmosRepository
