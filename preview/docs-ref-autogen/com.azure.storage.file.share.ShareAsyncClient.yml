### YamlMime:JavaType
uid: "com.azure.storage.file.share.ShareAsyncClient"
fullName: "com.azure.storage.file.share.ShareAsyncClient"
name: "ShareAsyncClient"
nameWithType: "ShareAsyncClient"
summary: "This class provides a azure<wbr>File<wbr>Storage<wbr>Client that contains all the operations for interacting with a share in Azure Storage Share."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ShareAsyncClient"
methods:
- uid: "com.azure.storage.file.share.ShareAsyncClient.create()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.create()"
  name: "create()"
  nameWithType: "ShareAsyncClient.create()"
  summary: "Creates the share in the storage account."
  syntax: "public Mono<ShareInfo> create()"
  desc: "Creates the share in the storage account.\n\n**Code Samples**\n\nCreate the share\n\n```java\nshareAsyncClient.create().subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the share!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "The information about the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createDirectory(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createDirectory(String directoryName)"
  name: "createDirectory(String directoryName)"
  nameWithType: "ShareAsyncClient.createDirectory(String directoryName)"
  summary: "Creates the directory in the share with the given name."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareDirectoryAsyncClient> createDirectory(String directoryName)"
  desc: "Creates the directory in the share with the given name.\n\n**Code Samples**\n\nCreate the directory \"mydirectory\"\n\n```java\nshareAsyncClient.createDirectory(\"mydirectory\").subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the directory!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> to interact with the created directory."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createDirectoryIfNotExists(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createDirectoryIfNotExists(String directoryName)"
  name: "createDirectoryIfNotExists(String directoryName)"
  nameWithType: "ShareAsyncClient.createDirectoryIfNotExists(String directoryName)"
  summary: "Creates the directory in the share with the given name if it does not exist."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareDirectoryAsyncClient> createDirectoryIfNotExists(String directoryName)"
  desc: "Creates the directory in the share with the given name if it does not exist.\n\n**Code Samples**\n\nCreate the directory \"mydirectory\"\n\n```java\nshareAsyncClient.createDirectoryIfNotExists(\"mydirectory\")\n     .switchIfEmpty(Mono.<ShareDirectoryAsyncClient>empty()\n         .doOnSuccess(x -> System.out.println(\"Already exists.\")))\n     .subscribe(response -> System.out.println(\"Create completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> used to interact with the directory\n created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createDirectoryIfNotExistsWithResponse(java.lang.String,com.azure.storage.file.share.options.ShareDirectoryCreateOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createDirectoryIfNotExistsWithResponse(String directoryName, ShareDirectoryCreateOptions options)"
  name: "createDirectoryIfNotExistsWithResponse(String directoryName, ShareDirectoryCreateOptions options)"
  nameWithType: "ShareAsyncClient.createDirectoryIfNotExistsWithResponse(String directoryName, ShareDirectoryCreateOptions options)"
  summary: "Creates the directory in the share with the given name and associates the passed metadata to it if it does not exist."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareDirectoryCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareDirectoryCreateOptions?alt=com.azure.storage.file.share.options.ShareDirectoryCreateOptions&text=ShareDirectoryCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareDirectoryAsyncClient>> createDirectoryIfNotExistsWithResponse(String directoryName, ShareDirectoryCreateOptions options)"
  desc: "Creates the directory in the share with the given name and associates the passed metadata to it if it does not exist.\n\n**Code Samples**\n\nCreate the directory \"documents\" with metadata \"directory:metadata\"\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n Map<String, String> metadata = Collections.singletonMap(\"directory\", \"metadata\");\n ShareDirectoryCreateOptions options = new ShareDirectoryCreateOptions().setSmbProperties(smbProperties)\n     .setFilePermission(filePermission).setMetadata(metadata);\n\n shareAsyncClient.createDirectoryIfNotExistsWithResponse(\"documents\", options).subscribe(response -> {\n     if (response.getStatusCode() == 409) {\n         System.out.println(\"Already exists.\");\n     } else {\n         System.out.println(\"successfully created.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a\n <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> used to interact with the directory created. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status\n code is 201, a new directory was successfully created. If status code is 409, a directory with the same name\n already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse(java.lang.String,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  name: "createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareAsyncClient.createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  summary: "Creates the directory in the share with the given name and associates the passed metadata to it."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The SMB properties of the directory."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the directory."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional metadata to associate with the directory"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareDirectoryAsyncClient>> createDirectoryWithResponse(String directoryName, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  desc: "Creates the directory in the share with the given name and associates the passed metadata to it.\n\n**Code Samples**\n\nCreate the directory \"documents\" with metadata \"directory:metadata\"\n\n```java\nFileSmbProperties smbProperties = new FileSmbProperties();\n String filePermission = \"filePermission\";\n shareAsyncClient.createDirectoryWithResponse(\"documents\", smbProperties, filePermission,\n     Collections.singletonMap(\"directory\", \"metadata\"))\n     .subscribe(response -> System.out.printf(\"Creating the directory completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-directory"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> to interact with the created directory and the\n status of its creation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createFile(java.lang.String,long)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createFile(String fileName, long maxSize)"
  name: "createFile(String fileName, long maxSize)"
  nameWithType: "ShareAsyncClient.createFile(String fileName, long maxSize)"
  summary: "Creates the file in the share with the given name and file max size."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The maximum size in bytes for the file."
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareFileAsyncClient> createFile(String fileName, long maxSize)"
  desc: "Creates the file in the share with the given name and file max size.\n\n**Code Samples**\n\nCreate the file \"myfile\" with size of 1024 bytes.\n\n```java\nshareAsyncClient.createFile(\"myfile\", 1024).subscribe(\n     response -> {\n     },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the directory!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> to interact with the created file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  name: "createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  nameWithType: "ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  summary: "Creates the file in the share with the given name, file max size and associates the passed properties to it."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The maximum size in bytes for the file."
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata)"
  desc: "Creates the file in the share with the given name, file max size and associates the passed properties to it.\n\n**Code Samples**\n\nCreate the file \"myfile\" with length of 1024 bytes, some headers, file smb properties and metadata\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n shareAsyncClient.createFileWithResponse(\"myfile\", 1024, httpHeaders, smbProperties,\n     filePermission, Collections.singletonMap(\"directory\", \"metadata\"))\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> to interact with the created file and the status of\n its creation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(java.lang.String,long,com.azure.storage.file.share.models.ShareFileHttpHeaders,com.azure.storage.file.share.FileSmbProperties,java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  name: "createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  nameWithType: "ShareAsyncClient.createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  summary: "Creates the file in the share with the given name, file max size and associates the passed properties to it."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The maximum size in bytes for the file."
    name: "maxSize"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file http headers."
    name: "httpHeaders"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareFileHttpHeaders?alt=com.azure.storage.file.share.models.ShareFileHttpHeaders&text=ShareFileHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "The user settable file smb properties."
    name: "smbProperties"
    type: "<xref href=\"com.azure.storage.file.share.FileSmbProperties?alt=com.azure.storage.file.share.FileSmbProperties&text=FileSmbProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "The file permission of the file."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional name-value pairs associated with the file as metadata."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareFileAsyncClient>> createFileWithResponse(String fileName, long maxSize, ShareFileHttpHeaders httpHeaders, FileSmbProperties smbProperties, String filePermission, Map<String,String> metadata, ShareRequestConditions requestConditions)"
  desc: "Creates the file in the share with the given name, file max size and associates the passed properties to it.\n\n**Code Samples**\n\nCreate the file \"myfile\" with length of 1024 bytes, some headers, file smb properties and metadata\n\n```java\nShareFileHttpHeaders httpHeaders = new ShareFileHttpHeaders()\n     .setContentType(\"text/html\")\n     .setContentEncoding(\"gzip\")\n     .setContentLanguage(\"en\")\n     .setCacheControl(\"no-transform\")\n     .setContentDisposition(\"attachment\");\n FileSmbProperties smbProperties = new FileSmbProperties()\n     .setNtfsFileAttributes(EnumSet.of(NtfsFileAttributes.READ_ONLY))\n     .setFileCreationTime(OffsetDateTime.now())\n     .setFileLastWriteTime(OffsetDateTime.now())\n     .setFilePermissionKey(\"filePermissionKey\");\n String filePermission = \"filePermission\";\n // NOTE: filePermission and filePermissionKey should never be both set\n\n ShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n\n shareAsyncClient.createFileWithResponse(\"myfile\", 1024, httpHeaders, smbProperties,\n     filePermission, Collections.singletonMap(\"directory\", \"metadata\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Creating the file completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-file"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> to interact with the created file and the status of\n its creation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createIfNotExists()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createIfNotExists()"
  name: "createIfNotExists()"
  nameWithType: "ShareAsyncClient.createIfNotExists()"
  summary: "Creates the share in the storage account if it does not exist."
  syntax: "public Mono<ShareInfo> createIfNotExists()"
  desc: "Creates the share in the storage account if it does not exist.\n\n**Code Samples**\n\nCreate the share\n\n```java\nshareAsyncClient.createIfNotExists().subscribe(response ->\n     System.out.printf(\"Created at %s%n\", response.getLastModified()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "A reactive response <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> signaling completion. <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareInfo\"></xref> contains information about the\n created share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createIfNotExistsWithResponse(com.azure.storage.file.share.options.ShareCreateOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createIfNotExistsWithResponse(ShareCreateOptions options)"
  name: "createIfNotExistsWithResponse(ShareCreateOptions options)"
  nameWithType: "ShareAsyncClient.createIfNotExistsWithResponse(ShareCreateOptions options)"
  summary: "Creates the share in the storage account with the specified options if it does not exist."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareCreateOptions?alt=com.azure.storage.file.share.options.ShareCreateOptions&text=ShareCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareInfo>> createIfNotExistsWithResponse(ShareCreateOptions options)"
  desc: "Creates the share in the storage account with the specified options if it does not exist.\n\n**Code Samples**\n\nCreate the share with optional parameters\n\n```java\nshareAsyncClient.createIfNotExistsWithResponse(new ShareCreateOptions()\n     .setMetadata(Collections.singletonMap(\"share\", \"metadata\")).setQuotaInGb(1)\n     .setAccessTier(ShareAccessTier.HOT)).subscribe(response -> {\n         if (response.getStatusCode() == 409) {\n             System.out.println(\"Already exists.\");\n         } else {\n             System.out.println(\"successfully created.\");\n         }\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> signaling completion, whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref>\n contains a <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareInfo\"></xref> containing information about the share. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is\n 201, a new share was successfully created. If status code is 409, a share already existed at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createPermission(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createPermission(String filePermission)"
  name: "createPermission(String filePermission)"
  nameWithType: "ShareAsyncClient.createPermission(String filePermission)"
  summary: "Creates a permission at the share level."
  parameters:
  - description: "The file permission to get/create."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> createPermission(String filePermission)"
  desc: "Creates a permission at the share level. If a permission already exists, it returns the key of it, else creates a new permission and returns the key.\n\n**Code Samples**\n\n```java\nshareAsyncClient.createPermission(\"filePermission\").subscribe(\n     response -> System.out.printf(\"The file permission key is %s\", response));\n```"
  returns:
    description: "The file permission key associated with the file permission."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createPermissionWithResponse(String filePermission)"
  name: "createPermissionWithResponse(String filePermission)"
  nameWithType: "ShareAsyncClient.createPermissionWithResponse(String filePermission)"
  summary: "Creates a permission at the share level."
  parameters:
  - description: "The file permission to get/create."
    name: "filePermission"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> createPermissionWithResponse(String filePermission)"
  desc: "Creates a permission at the share level. If a permission already exists, it returns the key of it, else creates a new permission and returns the key.\n\n**Code Samples**\n\n```java\nshareAsyncClient.createPermissionWithResponse(\"filePermission\").subscribe(\n     response -> System.out.printf(\"The file permission key is %s\", response.getValue()));\n```"
  returns:
    description: "A response that contains the file permission key associated with the file permission."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createSnapshot()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createSnapshot()"
  name: "createSnapshot()"
  nameWithType: "ShareAsyncClient.createSnapshot()"
  summary: "Creates a snapshot of the share with the same metadata associated to the share at the time of creation."
  syntax: "public Mono<ShareSnapshotInfo> createSnapshot()"
  desc: "Creates a snapshot of the share with the same metadata associated to the share at the time of creation.\n\n**Code Samples**\n\nCreate a snapshot\n\n```java\nshareAsyncClient.createSnapshot().subscribe(\n     response -> System.out.println(\"Successfully creating the share snapshot with snapshot id: \"\n         + response.getSnapshot()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete creating the share snapshot.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/snapshot-share"
  returns:
    description: "The information about the <xref uid=\"com.azure.storage.file.share.models.ShareSnapshotInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"snapshot of share\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareSnapshotInfo?alt=com.azure.storage.file.share.models.ShareSnapshotInfo&text=ShareSnapshotInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createSnapshotWithResponse(Map<String,String> metadata)"
  name: "createSnapshotWithResponse(Map<String,String> metadata)"
  nameWithType: "ShareAsyncClient.createSnapshotWithResponse(Map<String,String> metadata)"
  summary: "Creates a snapshot of the share with the metadata that was passed associated to the snapshot."
  parameters:
  - description: "Optional metadata to associate with the snapshot. If <code>null</code> the metadata of the share will\n be copied to the snapshot."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareSnapshotInfo>> createSnapshotWithResponse(Map<String,String> metadata)"
  desc: "Creates a snapshot of the share with the metadata that was passed associated to the snapshot.\n\n**Code Samples**\n\nCreate a snapshot with metadata \"snapshot:metadata\"\n\n```java\nshareAsyncClient.createSnapshotWithResponse(Collections.singletonMap(\"snapshot\", \"metadata\")).subscribe(\n     response -> System.out.println(\"Successfully creating the share snapshot with snapshot id: \"\n         + response.getValue().getSnapshot()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete creating the share snapshot.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/snapshot-share"
  returns:
    description: "A response containing information about the <xref uid=\"com.azure.storage.file.share.models.ShareSnapshotInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"snapshot of share\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareSnapshotInfo?alt=com.azure.storage.file.share.models.ShareSnapshotInfo&text=ShareSnapshotInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createWithResponse(com.azure.storage.file.share.options.ShareCreateOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createWithResponse(ShareCreateOptions options)"
  name: "createWithResponse(ShareCreateOptions options)"
  nameWithType: "ShareAsyncClient.createWithResponse(ShareCreateOptions options)"
  summary: "Creates the share in the storage account with the specified options."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareCreateOptions?alt=com.azure.storage.file.share.options.ShareCreateOptions&text=ShareCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareInfo>> createWithResponse(ShareCreateOptions options)"
  desc: "Creates the share in the storage account with the specified options.\n\n**Code Samples**\n\nCreate the share with optional parameters\n\n```java\nshareAsyncClient.createWithResponse(new ShareCreateOptions()\n     .setMetadata(Collections.singletonMap(\"share\", \"metadata\")).setQuotaInGb(1)\n     .setAccessTier(ShareAccessTier.HOT)).subscribe(\n         response -> System.out.printf(\"Creating the share completed with status code %d\",\n             response.getStatusCode()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete creating the share!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "A response containing information about the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"share\"></xref> and the status its creation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.createWithResponse(java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.createWithResponse(Map<String,String> metadata, Integer quotaInGB)"
  name: "createWithResponse(Map<String,String> metadata, Integer quotaInGB)"
  nameWithType: "ShareAsyncClient.createWithResponse(Map<String,String> metadata, Integer quotaInGB)"
  summary: "Creates the share in the storage account with the specified metadata and quota."
  parameters:
  - description: "Optional metadata to associate with the share"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional maximum size the share is allowed to grow to in GB. This must be greater than 0 and\n less than or equal to 5120. The default value is 5120."
    name: "quotaInGB"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareInfo>> createWithResponse(Map<String,String> metadata, Integer quotaInGB)"
  desc: "Creates the share in the storage account with the specified metadata and quota.\n\n**Code Samples**\n\nCreate the share with metadata \"share:metadata\"\n\n```java\nshareAsyncClient.createWithResponse(Collections.singletonMap(\"share\", \"metadata\"), null).subscribe(\n     response -> System.out.printf(\"Creating the share completed with status code %d\", response.getStatusCode()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the share!\")\n );\n```\n\nCreate the share with a quota of 10 GB\n\n```java\nshareAsyncClient.createWithResponse(null, 10).subscribe(\n     response -> System.out.printf(\"Creating the share completed with status code %d\", response.getStatusCode()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the share!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "A response containing information about the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"share\"></xref> and the status its creation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.delete()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.delete()"
  name: "delete()"
  nameWithType: "ShareAsyncClient.delete()"
  summary: "Deletes the share in the storage account"
  syntax: "public Mono<Void> delete()"
  desc: "Deletes the share in the storage account\n\n**Code Samples**\n\nDelete the share\n\n```java\nshareAsyncClient.delete().subscribe(\n     response -> System.out.println(\"Deleting the shareAsyncClient completed.\"),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the share.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectory(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectory(String directoryName)"
  name: "deleteDirectory(String directoryName)"
  nameWithType: "ShareAsyncClient.deleteDirectory(String directoryName)"
  summary: "Deletes the specified directory in the share."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDirectory(String directoryName)"
  desc: "Deletes the specified directory in the share.\n\n**Code Samples**\n\nDelete the directory \"mydirectory\"\n\n```java\nshareAsyncClient.deleteDirectory(\"mydirectory\").subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the directory.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryIfExists(String directoryName)"
  name: "deleteDirectoryIfExists(String directoryName)"
  nameWithType: "ShareAsyncClient.deleteDirectoryIfExists(String directoryName)"
  summary: "Deletes the specified directory in the share if exists."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteDirectoryIfExists(String directoryName)"
  desc: "Deletes the specified directory in the share if exists.\n\n**Code Samples**\n\nDelete the directory \"mydirectory\"\n\n```java\nshareAsyncClient.deleteDirectoryIfExists(\"mydirectory\").subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the directory was successfully\n deleted, <code>false</code> indicates that the directory did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryIfExistsWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryIfExistsWithResponse(String directoryName)"
  name: "deleteDirectoryIfExistsWithResponse(String directoryName)"
  nameWithType: "ShareAsyncClient.deleteDirectoryIfExistsWithResponse(String directoryName)"
  summary: "Deletes the specified directory in the share if it exists."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteDirectoryIfExistsWithResponse(String directoryName)"
  desc: "Deletes the specified directory in the share if it exists.\n\n**Code Samples**\n\nDelete the directory \"mydirectory\"\n\n```java\nshareAsyncClient.deleteDirectoryIfExistsWithResponse(\"mydirectory\").subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the directory was\n successfully deleted. If status code is 404, the directory does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteDirectoryWithResponse(String directoryName)"
  name: "deleteDirectoryWithResponse(String directoryName)"
  nameWithType: "ShareAsyncClient.deleteDirectoryWithResponse(String directoryName)"
  summary: "Deletes the specified directory in the share."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDirectoryWithResponse(String directoryName)"
  desc: "Deletes the specified directory in the share.\n\n**Code Samples**\n\nDelete the directory \"mydirectory\"\n\n```java\nshareAsyncClient.deleteDirectory(\"mydirectory\").subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the directory.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-directory"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteFile(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteFile(String fileName)"
  name: "deleteFile(String fileName)"
  nameWithType: "ShareAsyncClient.deleteFile(String fileName)"
  summary: "Deletes the specified file in the share."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteFile(String fileName)"
  desc: "Deletes the specified file in the share.\n\n**Code Samples**\n\nDelete the file \"myfile\"\n\n```java\nshareAsyncClient.deleteFile(\"myfile\").subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteFileIfExists(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteFileIfExists(String fileName)"
  name: "deleteFileIfExists(String fileName)"
  nameWithType: "ShareAsyncClient.deleteFileIfExists(String fileName)"
  summary: "Deletes the specified file in the share if it exists."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Boolean> deleteFileIfExists(String fileName)"
  desc: "Deletes the specified file in the share if it exists.\n\n**Code Samples**\n\nDelete the file \"myfile\"\n\n```java\nshareAsyncClient.deleteFileIfExists(\"myfile\").subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the file was successfully\n deleted, <code>false</code> indicates that the file did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteFileIfExistsWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  name: "deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  nameWithType: "ShareAsyncClient.deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  summary: "Deletes the specified file in the share if it exists."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteFileIfExistsWithResponse(String fileName, ShareRequestConditions requestConditions)"
  desc: "Deletes the specified file in the share if it exists.\n\n**Code Samples**\n\nDelete the file \"myfile\"\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n\n shareAsyncClient.deleteFileIfExistsWithResponse(\"myfile\", requestConditions).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the file was\n successfully deleted. If status code is 404, the file does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(String fileName)"
  name: "deleteFileWithResponse(String fileName)"
  nameWithType: "ShareAsyncClient.deleteFileWithResponse(String fileName)"
  summary: "Deletes the specified file in the share."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileWithResponse(String fileName)"
  desc: "Deletes the specified file in the share.\n\n**Code Samples**\n\nDelete the file \"myfile\"\n\n```java\nshareAsyncClient.deleteFile(\"myfile\").subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareRequestConditions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  name: "deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  nameWithType: "ShareAsyncClient.deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  summary: "Deletes the specified file in the share."
  parameters:
  - description: "Name of the file."
    name: "fileName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.models.ShareRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteFileWithResponse(String fileName, ShareRequestConditions requestConditions)"
  desc: "Deletes the specified file in the share.\n\n**Code Samples**\n\nDelete the file \"myfile\"\n\n```java\nShareRequestConditions requestConditions = new ShareRequestConditions().setLeaseId(leaseId);\n shareAsyncClient.deleteFileWithResponse(\"myfile\", requestConditions).subscribe(\n     response -> {\n     },\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the file.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-file2"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteIfExists()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "ShareAsyncClient.deleteIfExists()"
  summary: "Deletes the share in the storage account if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Deletes the share in the storage account if it exists.\n\n**Code Samples**\n\nDelete the share\n\n```java\nshareAsyncClient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "a reactive response signaling completion. <code>true</code> indicates that the share was successfully\n deleted, <code>false</code> indicates that the share did not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteIfExistsWithResponse(com.azure.storage.file.share.options.ShareDeleteOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteIfExistsWithResponse(ShareDeleteOptions options)"
  name: "deleteIfExistsWithResponse(ShareDeleteOptions options)"
  nameWithType: "ShareAsyncClient.deleteIfExistsWithResponse(ShareDeleteOptions options)"
  summary: "Deletes the share in the storage account if it exists"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareDeleteOptions?alt=com.azure.storage.file.share.options.ShareDeleteOptions&text=ShareDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse(ShareDeleteOptions options)"
  desc: "Deletes the share in the storage account if it exists\n\n**Code Samples**\n\nDelete the share\n\n```java\nshareAsyncClient.deleteIfExistsWithResponse(new ShareDeleteOptions()\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId))).subscribe(response -> {\n         if (response.getStatusCode() == 404) {\n             System.out.println(\"Does not exist.\");\n         } else {\n             System.out.println(\"successfully deleted.\");\n         }\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the share was\n successfully deleted. If status code is 404, the share does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse()"
  name: "deleteWithResponse()"
  nameWithType: "ShareAsyncClient.deleteWithResponse()"
  summary: "Deletes the share in the storage account"
  syntax: "public Mono<Response<Void>> deleteWithResponse()"
  desc: "Deletes the share in the storage account\n\n**Code Samples**\n\nDelete the share\n\n```java\nshareAsyncClient.deleteWithResponse().subscribe(\n     response -> System.out.println(\"Deleting the shareAsyncClient completed with status code: \"\n         + response.getStatusCode()),\n     error -> System.err.println(error.toString()),\n     () -> System.out.println(\"Complete deleting the share.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse(com.azure.storage.file.share.options.ShareDeleteOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.deleteWithResponse(ShareDeleteOptions options)"
  name: "deleteWithResponse(ShareDeleteOptions options)"
  nameWithType: "ShareAsyncClient.deleteWithResponse(ShareDeleteOptions options)"
  summary: "Deletes the share in the storage account"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareDeleteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDeleteOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareDeleteOptions?alt=com.azure.storage.file.share.options.ShareDeleteOptions&text=ShareDeleteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(ShareDeleteOptions options)"
  desc: "Deletes the share in the storage account\n\n**Code Samples**\n\nDelete the share\n\n```java\nshareAsyncClient.deleteWithResponse(new ShareDeleteOptions()\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId))).subscribe(\n         response -> System.out.println(\"Deleting the shareAsyncClient completed with status code: \"\n             + response.getStatusCode()), error -> System.err.println(error.toString()),\n         () -> System.out.println(\"Complete deleting the share.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.exists()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.exists()"
  name: "exists()"
  nameWithType: "ShareAsyncClient.exists()"
  summary: "Determines if the share this client represents exists in the cloud."
  syntax: "public Mono<Boolean> exists()"
  desc: "Determines if the share this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  returns:
    description: "Flag indicating existence of the share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.existsWithResponse()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.existsWithResponse()"
  name: "existsWithResponse()"
  nameWithType: "ShareAsyncClient.existsWithResponse()"
  summary: "Determines if the share this client represents exists in the cloud."
  syntax: "public Mono<Response<Boolean>> existsWithResponse()"
  desc: "Determines if the share this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  returns:
    description: "Flag indicating existence of the share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  nameWithType: "ShareAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
    name: "shareServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues?alt=com.azure.storage.file.share.sas.ShareServiceSasSignatureValues&text=ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues)"
  desc: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareSasPermission permission = new ShareSasPermission().setReadPermission(true);\n\n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n shareAsyncClient.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.generateSas(com.azure.storage.file.share.sas.ShareServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  name: "generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  nameWithType: "ShareAsyncClient.generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  summary: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>"
    name: "shareServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues?alt=com.azure.storage.file.share.sas.ShareServiceSasSignatureValues&text=ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(ShareServiceSasSignatureValues shareServiceSasSignatureValues, Context context)"
  desc: "Generates a service sas for the queue using the specified <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.file.share.sas.ShareServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n ShareSasPermission permission = new ShareSasPermission().setReadPermission(true);\n\n ShareServiceSasSignatureValues values = new ShareServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n shareAsyncClient.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy()"
  name: "getAccessPolicy()"
  nameWithType: "ShareAsyncClient.getAccessPolicy()"
  summary: "Retrieves stored access policies specified for the share."
  syntax: "public PagedFlux<ShareSignedIdentifier> getAccessPolicy()"
  desc: "Retrieves stored access policies specified for the share.\n\n**Code Samples**\n\nList the stored access policies\n\n```java\nshareAsyncClient.getAccessPolicy()\n     .subscribe(result -> System.out.printf(\"Access policy %s allows these permissions: %s\", result.getId(),\n         result.getAccessPolicy().getPermissions())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-acl"
  returns:
    description: "The stored access policies specified on the queue."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareSignedIdentifier?alt=com.azure.storage.file.share.models.ShareSignedIdentifier&text=ShareSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy(com.azure.storage.file.share.options.ShareGetAccessPolicyOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getAccessPolicy(ShareGetAccessPolicyOptions options)"
  name: "getAccessPolicy(ShareGetAccessPolicyOptions options)"
  nameWithType: "ShareAsyncClient.getAccessPolicy(ShareGetAccessPolicyOptions options)"
  summary: "Retrieves stored access policies specified for the share."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareGetAccessPolicyOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareGetAccessPolicyOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareGetAccessPolicyOptions?alt=com.azure.storage.file.share.options.ShareGetAccessPolicyOptions&text=ShareGetAccessPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareSignedIdentifier> getAccessPolicy(ShareGetAccessPolicyOptions options)"
  desc: "Retrieves stored access policies specified for the share.\n\n**Code Samples**\n\nList the stored access policies\n\n```java\nshareAsyncClient.getAccessPolicy(new ShareGetAccessPolicyOptions()\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId)))\n     .subscribe(result -> System.out.printf(\"Access policy %s allows these permissions: %s\", result.getId(),\n         result.getAccessPolicy().getPermissions())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-acl"
  returns:
    description: "The stored access policies specified on the queue."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareSignedIdentifier?alt=com.azure.storage.file.share.models.ShareSignedIdentifier&text=ShareSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "ShareAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getAccountUrl()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "ShareAsyncClient.getAccountUrl()"
  summary: "Get the url of the storage account."
  syntax: "public String getAccountUrl()"
  desc: "Get the url of the storage account."
  returns:
    description: "the URL of the storage account"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getDirectoryClient(String directoryName)"
  name: "getDirectoryClient(String directoryName)"
  nameWithType: "ShareAsyncClient.getDirectoryClient(String directoryName)"
  summary: "Constructs a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> that interacts with the specified directory."
  parameters:
  - description: "Name of the directory"
    name: "directoryName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareDirectoryAsyncClient getDirectoryClient(String directoryName)"
  desc: "Constructs a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> that interacts with the specified directory.\n\nIf the directory doesn't exist in the share <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient.create()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"create\"></xref> in the azureFileStorageClient will need to be called before interaction with the directory can happen."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> that interacts with the directory in the share"
    type: "<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getFileClient(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getFileClient(String filePath)"
  name: "getFileClient(String filePath)"
  nameWithType: "ShareAsyncClient.getFileClient(String filePath)"
  summary: "Constructs a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> that interacts with the specified file."
  parameters:
  - description: "Name of the file"
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareFileAsyncClient getFileClient(String filePath)"
  desc: "Constructs a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> that interacts with the specified file.\n\nIf the file doesn't exist in the share <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient.create(long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient#create(long)\"></xref> ) create\\} in the client will need to be called before interaction with the file can happen."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.share.ShareFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareFileAsyncClient\"></xref> that interacts with the file in the share"
    type: "<xref href=\"com.azure.storage.file.share.ShareFileAsyncClient?alt=com.azure.storage.file.share.ShareFileAsyncClient&text=ShareFileAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "ShareAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getPermission(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getPermission(String filePermissionKey)"
  name: "getPermission(String filePermissionKey)"
  nameWithType: "ShareAsyncClient.getPermission(String filePermissionKey)"
  summary: "Gets a permission for a given key."
  parameters:
  - description: "The file permission key."
    name: "filePermissionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> getPermission(String filePermissionKey)"
  desc: "Gets a permission for a given key.\n\n**Code Samples**\n\n```java\nshareAsyncClient.getPermission(\"filePermissionKey\").subscribe(\n     response -> System.out.printf(\"The file permission is %s\", response));\n```"
  returns:
    description: "The file permission associated with the file permission key."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getPermissionWithResponse(String filePermissionKey)"
  name: "getPermissionWithResponse(String filePermissionKey)"
  nameWithType: "ShareAsyncClient.getPermissionWithResponse(String filePermissionKey)"
  summary: "Gets a permission for a given key."
  parameters:
  - description: "The file permission key."
    name: "filePermissionKey"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> getPermissionWithResponse(String filePermissionKey)"
  desc: "Gets a permission for a given key.\n\n**Code Samples**\n\n```java\nshareAsyncClient.getPermissionWithResponse(\"filePermissionKey\").subscribe(\n     response -> System.out.printf(\"The file permission is %s\", response.getValue()));\n```"
  returns:
    description: "A response that contains th file permission associated with the file permission key."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "ShareAsyncClient.getProperties()"
  summary: "Retrieves the properties of the share, these include the metadata associated to it and the quota that the share is restricted to."
  syntax: "public Mono<ShareProperties> getProperties()"
  desc: "Retrieves the properties of the share, these include the metadata associated to it and the quota that the share is restricted to.\n\n**Code Samples**\n\nRetrieve the share properties\n\n```java\nshareAsyncClient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"Share quota: %d, Metadata: %s\", properties.getQuota(), properties.getMetadata());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-properties"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties of the share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareProperties?alt=com.azure.storage.file.share.models.ShareProperties&text=ShareProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "ShareAsyncClient.getPropertiesWithResponse()"
  summary: "Retrieves the properties of the share, these include the metadata associated with it and the quota that the share is restricted to."
  syntax: "public Mono<Response<ShareProperties>> getPropertiesWithResponse()"
  desc: "Retrieves the properties of the share, these include the metadata associated with it and the quota that the share is restricted to.\n\n**Code Samples**\n\nRetrieve the share properties\n\n```java\nshareAsyncClient.getPropertiesWithResponse()\n     .subscribe(properties -> {\n         System.out.printf(\"Share quota: %d, Metadata: %s\", properties.getValue().getQuota(),\n             properties.getValue().getMetadata());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-properties"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties of the share\"></xref> with headers and response\n status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareProperties?alt=com.azure.storage.file.share.models.ShareProperties&text=ShareProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse(com.azure.storage.file.share.options.ShareGetPropertiesOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getPropertiesWithResponse(ShareGetPropertiesOptions options)"
  name: "getPropertiesWithResponse(ShareGetPropertiesOptions options)"
  nameWithType: "ShareAsyncClient.getPropertiesWithResponse(ShareGetPropertiesOptions options)"
  summary: "Retrieves the properties of the share, these include the metadata associated with it and the quota that the share is restricted to."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareGetPropertiesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareGetPropertiesOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareGetPropertiesOptions?alt=com.azure.storage.file.share.options.ShareGetPropertiesOptions&text=ShareGetPropertiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareProperties>> getPropertiesWithResponse(ShareGetPropertiesOptions options)"
  desc: "Retrieves the properties of the share, these include the metadata associated with it and the quota that the share is restricted to.\n\n**Code Samples**\n\nRetrieve the share properties\n\n```java\nshareAsyncClient.getPropertiesWithResponse(new ShareGetPropertiesOptions()\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId)))\n     .subscribe(properties -> {\n         System.out.printf(\"Share quota: %d, Metadata: %s\", properties.getValue().getQuota(),\n             properties.getValue().getMetadata());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-properties"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"properties of the share\"></xref> with headers and response\n status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareProperties?alt=com.azure.storage.file.share.models.ShareProperties&text=ShareProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getRootDirectoryClient()"
  name: "getRootDirectoryClient()"
  nameWithType: "ShareAsyncClient.getRootDirectoryClient()"
  summary: "Constructs a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> that interacts with the root directory in the share."
  syntax: "public ShareDirectoryAsyncClient getRootDirectoryClient()"
  desc: "Constructs a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> that interacts with the root directory in the share.\n\nIf the directory doesn't exist in the share <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient.create()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient#create()\"></xref> in the azureFileStorageClient will need to be called before interaction with the directory can happen."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.share.ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareDirectoryAsyncClient\"></xref> that interacts with the root directory in the share"
    type: "<xref href=\"com.azure.storage.file.share.ShareDirectoryAsyncClient?alt=com.azure.storage.file.share.ShareDirectoryAsyncClient&text=ShareDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "ShareAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public ShareServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.share.ShareServiceVersion?alt=com.azure.storage.file.share.ShareServiceVersion&text=ShareServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getShareName()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getShareName()"
  name: "getShareName()"
  nameWithType: "ShareAsyncClient.getShareName()"
  summary: "Get share name from share client."
  syntax: "public String getShareName()"
  desc: "Get share name from share client.\n\n**Code Samples**\n\n```java\nString shareName = shareAsyncClient.getShareName();\n System.out.println(\"The name of the share is \" + shareName);\n```"
  returns:
    description: "The name of the share."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getShareUrl()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getShareUrl()"
  name: "getShareUrl()"
  nameWithType: "ShareAsyncClient.getShareUrl()"
  summary: "Get the url of the storage share client."
  syntax: "public String getShareUrl()"
  desc: "Get the url of the storage share client."
  returns:
    description: "the url of the Storage Share."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getSnapshotClient(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getSnapshotClient(String snapshot)"
  name: "getSnapshotClient(String snapshot)"
  nameWithType: "ShareAsyncClient.getSnapshotClient(String snapshot)"
  summary: "Creates a new <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> linked to the `snapshot` of this share resource."
  parameters:
  - description: "the identifier for a specific snapshot of this share"
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareAsyncClient getSnapshotClient(String snapshot)"
  desc: "Creates a new <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> linked to the `snapshot` of this share resource."
  returns:
    description: "a <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> used to interact with the specific snapshot."
    type: "<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getSnapshotId()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getSnapshotId()"
  name: "getSnapshotId()"
  nameWithType: "ShareAsyncClient.getSnapshotId()"
  summary: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref>."
  syntax: "public String getSnapshotId()"
  desc: "Get snapshot id which attached to <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref>. Return `null` if no snapshot id attached.\n\n**Code Samples**\n\nGet the share snapshot id.\n\n```java\nOffsetDateTime currentTime = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n ShareAsyncClient shareAsyncClient = new ShareClientBuilder()\n     .endpoint(\"https://${accountName}.file.core.windows.net\")\n     .sasToken(\"${SASToken}\")\n     .shareName(\"myshare\")\n     .snapshot(currentTime.toString())\n     .buildAsyncClient();\n\n System.out.printf(\"Snapshot ID: %s%n\", shareAsyncClient.getSnapshotId());\n```"
  returns:
    description: "The snapshot id which is a unique <code>DateTime</code> value that identifies the share snapshot to its base\n share."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getStatistics()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getStatistics()"
  name: "getStatistics()"
  nameWithType: "ShareAsyncClient.getStatistics()"
  summary: "Retrieves storage statistics about the share."
  syntax: "public Mono<ShareStatistics> getStatistics()"
  desc: "Retrieves storage statistics about the share.\n\n**Code Samples**\n\nRetrieve the storage statistics\n\n```java\nshareAsyncClient.getStatistics().doOnSuccess(response -> System.out.printf(\"The share is using %d GB\",\n     response.getShareUsageInGB()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-stats"
  returns:
    description: "The storage <xref uid=\"com.azure.storage.file.share.models.ShareStatistics\" data-throw-if-not-resolved=\"false\" data-raw-source=\"statistics of the share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareStatistics?alt=com.azure.storage.file.share.models.ShareStatistics&text=ShareStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse()"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse()"
  name: "getStatisticsWithResponse()"
  nameWithType: "ShareAsyncClient.getStatisticsWithResponse()"
  summary: "Retrieves storage statistics about the share."
  syntax: "public Mono<Response<ShareStatistics>> getStatisticsWithResponse()"
  desc: "Retrieves storage statistics about the share.\n\n**Code Samples**\n\nRetrieve the storage statistics\n\n```java\nshareAsyncClient.getStatisticsWithResponse().subscribe(response -> System.out.printf(\"The share is using %d GB\",\n     response.getValue().getShareUsageInGB()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-stats"
  returns:
    description: "A response containing the storage <xref uid=\"com.azure.storage.file.share.models.ShareStatistics\" data-throw-if-not-resolved=\"false\" data-raw-source=\"statistics of the share\"></xref> with headers and\n response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareStatistics?alt=com.azure.storage.file.share.models.ShareStatistics&text=ShareStatistics\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse(com.azure.storage.file.share.options.ShareGetStatisticsOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.getStatisticsWithResponse(ShareGetStatisticsOptions options)"
  name: "getStatisticsWithResponse(ShareGetStatisticsOptions options)"
  nameWithType: "ShareAsyncClient.getStatisticsWithResponse(ShareGetStatisticsOptions options)"
  summary: "Retrieves storage statistics about the share."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareGetStatisticsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareGetStatisticsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareGetStatisticsOptions?alt=com.azure.storage.file.share.options.ShareGetStatisticsOptions&text=ShareGetStatisticsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareStatistics>> getStatisticsWithResponse(ShareGetStatisticsOptions options)"
  desc: "Retrieves storage statistics about the share.\n\n**Code Samples**\n\nRetrieve the storage statistics\n\n```java\nshareAsyncClient.getStatisticsWithResponse(new ShareGetStatisticsOptions()\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId)))\n     .subscribe(response -> System.out.printf(\"The share is using %d GB\",\n     response.getValue().getShareUsageInGB()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-stats"
  returns:
    description: "A response containing the storage <xref uid=\"com.azure.storage.file.share.models.ShareStatistics\" data-throw-if-not-resolved=\"false\" data-raw-source=\"statistics of the share\"></xref> with headers and\n response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareStatistics?alt=com.azure.storage.file.share.models.ShareStatistics&text=ShareStatistics\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setAccessPolicy(List<ShareSignedIdentifier> permissions)"
  name: "setAccessPolicy(List<ShareSignedIdentifier> permissions)"
  nameWithType: "ShareAsyncClient.setAccessPolicy(List<ShareSignedIdentifier> permissions)"
  summary: "Sets stored access policies for the share."
  parameters:
  - description: "Access policies to set on the queue"
    name: "permissions"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareSignedIdentifier?alt=com.azure.storage.file.share.models.ShareSignedIdentifier&text=ShareSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ShareInfo> setAccessPolicy(List<ShareSignedIdentifier> permissions)"
  desc: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n\n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n shareAsyncClient.setAccessPolicy(Collections.singletonList(permission)).doOnSuccess(\n     response -> System.out.println(\"Setting access policies completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-acl"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(com.azure.storage.file.share.options.ShareSetAccessPolicyOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(ShareSetAccessPolicyOptions options)"
  name: "setAccessPolicyWithResponse(ShareSetAccessPolicyOptions options)"
  nameWithType: "ShareAsyncClient.setAccessPolicyWithResponse(ShareSetAccessPolicyOptions options)"
  summary: "Sets stored access policies for the share."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareSetAccessPolicyOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareSetAccessPolicyOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareSetAccessPolicyOptions?alt=com.azure.storage.file.share.options.ShareSetAccessPolicyOptions&text=ShareSetAccessPolicyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareInfo>> setAccessPolicyWithResponse(ShareSetAccessPolicyOptions options)"
  desc: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n\n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n shareAsyncClient.setAccessPolicyWithResponse(new ShareSetAccessPolicyOptions()\n     .setPermissions(Collections.singletonList(permission))\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId)))\n     .subscribe(response -> System.out.printf(\"Setting access policies completed completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-acl"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref> with headers and response status\n code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(java.util.List<com.azure.storage.file.share.models.ShareSignedIdentifier>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)"
  name: "setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)"
  nameWithType: "ShareAsyncClient.setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)"
  summary: "Sets stored access policies for the share."
  parameters:
  - description: "Access policies to set on the queue"
    name: "permissions"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareSignedIdentifier?alt=com.azure.storage.file.share.models.ShareSignedIdentifier&text=ShareSignedIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareInfo>> setAccessPolicyWithResponse(List<ShareSignedIdentifier> permissions)"
  desc: "Sets stored access policies for the share.\n\n**Code Samples**\n\nSet a read only stored access policy\n\n```java\nShareAccessPolicy accessPolicy = new ShareAccessPolicy().setPermissions(\"r\")\n     .setStartsOn(OffsetDateTime.now(ZoneOffset.UTC))\n     .setExpiresOn(OffsetDateTime.now(ZoneOffset.UTC).plusDays(10));\n\n ShareSignedIdentifier permission = new ShareSignedIdentifier().setId(\"mypolicy\").setAccessPolicy(accessPolicy);\n shareAsyncClient.setAccessPolicyWithResponse(Collections.singletonList(permission))\n     .subscribe(response -> System.out.printf(\"Setting access policies completed completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-acl"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref> with headers and response status\n code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "ShareAsyncClient.setMetadata(Map<String,String> metadata)"
  summary: "Sets the user-defined metadata to associate to the share."
  parameters:
  - description: "Metadata to set on the share, if null is passed the metadata for the share is cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ShareInfo> setMetadata(Map<String,String> metadata)"
  desc: "Sets the user-defined metadata to associate to the share.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the share.\n\n**Code Samples**\n\nSet the metadata to \"share:updatedMetadata\"\n\n```java\nshareAsyncClient.setMetadata(Collections.singletonMap(\"share\", \"updatedMetadata\")).doOnSuccess(response ->\n     System.out.println(\"Setting the share metadata completed.\")\n );\n```\n\nClear the metadata of the share\n\n```java\nshareAsyncClient.setMetadata(null).doOnSuccess(response ->\n     System.out.println(\"Setting the share metadata completed.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-metadata"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(com.azure.storage.file.share.options.ShareSetMetadataOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(ShareSetMetadataOptions options)"
  name: "setMetadataWithResponse(ShareSetMetadataOptions options)"
  nameWithType: "ShareAsyncClient.setMetadataWithResponse(ShareSetMetadataOptions options)"
  summary: "Sets the user-defined metadata to associate to the share."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareSetMetadataOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareSetMetadataOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareSetMetadataOptions?alt=com.azure.storage.file.share.options.ShareSetMetadataOptions&text=ShareSetMetadataOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareInfo>> setMetadataWithResponse(ShareSetMetadataOptions options)"
  desc: "Sets the user-defined metadata to associate to the share.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the share.\n\n**Code Samples**\n\n```java\nshareAsyncClient.setMetadataWithResponse(new ShareSetMetadataOptions()\n     .setMetadata(Collections.singletonMap(\"share\", \"updatedMetadata\"))\n     .setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId)))\n     .subscribe(response ->\n         System.out.printf(\"Setting the share metadata completed with status code %d\", response.getStatusCode())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-metadata"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref> with headers and response status\n code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  name: "setMetadataWithResponse(Map<String,String> metadata)"
  nameWithType: "ShareAsyncClient.setMetadataWithResponse(Map<String,String> metadata)"
  summary: "Sets the user-defined metadata to associate to the share."
  parameters:
  - description: "Metadata to set on the share, if null is passed the metadata for the share is cleared"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ShareInfo>> setMetadataWithResponse(Map<String,String> metadata)"
  desc: "Sets the user-defined metadata to associate to the share.\n\nIf `null` is passed for the metadata it will clear the metadata associated to the share.\n\n**Code Samples**\n\nSet the metadata to \"share:updatedMetadata\"\n\n```java\nshareAsyncClient.setMetadata(Collections.singletonMap(\"share\", \"updatedMetadata\")).doOnSuccess(response ->\n     System.out.println(\"Setting the share metadata completed.\")\n );\n```\n\nClear the metadata of the share\n\n```java\nshareAsyncClient.setMetadata(null).doOnSuccess(response ->\n     System.out.println(\"Setting the share metadata completed.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-metadata"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref> with headers and response status\n code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setProperties(com.azure.storage.file.share.options.ShareSetPropertiesOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setProperties(ShareSetPropertiesOptions options)"
  name: "setProperties(ShareSetPropertiesOptions options)"
  nameWithType: "ShareAsyncClient.setProperties(ShareSetPropertiesOptions options)"
  summary: "Sets the share's properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareSetPropertiesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareSetPropertiesOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareSetPropertiesOptions?alt=com.azure.storage.file.share.options.ShareSetPropertiesOptions&text=ShareSetPropertiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareInfo> setProperties(ShareSetPropertiesOptions options)"
  desc: "Sets the share's properties.\n\n**Code Samples**\n\n```java\nshareAsyncClient.setProperties(new ShareSetPropertiesOptions().setAccessTier(ShareAccessTier.HOT)\n     .setQuotaInGb(2014))\n     .doOnSuccess(response -> System.out.println(\"Setting the share access tier completed.\"));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-properties"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.options.ShareSetPropertiesOptions)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setPropertiesWithResponse(ShareSetPropertiesOptions options)"
  name: "setPropertiesWithResponse(ShareSetPropertiesOptions options)"
  nameWithType: "ShareAsyncClient.setPropertiesWithResponse(ShareSetPropertiesOptions options)"
  summary: "Sets the share's properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareSetPropertiesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareSetPropertiesOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareSetPropertiesOptions?alt=com.azure.storage.file.share.options.ShareSetPropertiesOptions&text=ShareSetPropertiesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareInfo>> setPropertiesWithResponse(ShareSetPropertiesOptions options)"
  desc: "Sets the share's properties.\n\n**Code Samples**\n\n```java\nshareAsyncClient.setPropertiesWithResponse(new ShareSetPropertiesOptions().setAccessTier(ShareAccessTier.HOT)\n     .setQuotaInGb(1024).setRequestConditions(new ShareRequestConditions().setLeaseId(leaseId)))\n     .subscribe(response ->\n         System.out.printf(\"Setting the share quota completed with status code %d\", response.getStatusCode())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-share-properties"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref> with headers and response status\n code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setQuota(int)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setQuota(int quotaInGB)"
  name: "setQuota(int quotaInGB)"
  nameWithType: "ShareAsyncClient.setQuota(int quotaInGB)"
  summary: "Sets the maximum size in GB that the share is allowed to grow."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.file.share.ShareAsyncClient.setProperties(com.azure.storage.file.share.options.ShareSetPropertiesOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient#setProperties(ShareSetPropertiesOptions)\"></xref>"
  parameters:
  - description: "Size in GB to limit the share's growth. The quota in GB must be between 1 and 5120."
    name: "quotaInGB"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<ShareInfo> setQuota(int quotaInGB)"
  desc: "Sets the maximum size in GB that the share is allowed to grow.\n\n**Code Samples**\n\nSet the quota to 1024 GB\n\n```java\nshareAsyncClient.setQuota(1024).doOnSuccess(response ->\n     System.out.println(\"Setting the share quota completed.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-properties"
  hasDeprecatedTag: true
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse(int)"
  fullName: "com.azure.storage.file.share.ShareAsyncClient.setQuotaWithResponse(int quotaInGB)"
  name: "setQuotaWithResponse(int quotaInGB)"
  nameWithType: "ShareAsyncClient.setQuotaWithResponse(int quotaInGB)"
  summary: "Sets the maximum size in GB that the share is allowed to grow."
  deprecatedTag: "Use <xref uid=\"com.azure.storage.file.share.ShareAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.options.ShareSetPropertiesOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient#setPropertiesWithResponse(ShareSetPropertiesOptions)\"></xref>"
  parameters:
  - description: "Size in GB to limit the share's growth. The quota in GB must be between 1 and 5120."
    name: "quotaInGB"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<Response<ShareInfo>> setQuotaWithResponse(int quotaInGB)"
  desc: "Sets the maximum size in GB that the share is allowed to grow.\n\n**Code Samples**\n\nSet the quota to 1024 GB\n\n```java\nshareAsyncClient.setQuotaWithResponse(1024)\n     .subscribe(response ->\n         System.out.printf(\"Setting the share quota completed with status code %d\", response.getStatusCode())\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-share-properties"
  hasDeprecatedTag: true
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.models.ShareInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"information about the share\"></xref> with headers and response status\n code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareInfo?alt=com.azure.storage.file.share.models.ShareInfo&text=ShareInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a azureFileStorageClient that contains all the operations for interacting with a share in Azure Storage Share. Operations allowed by the azureFileStorageClient are creating and deleting the share, creating snapshots for the share, creating and deleting directories in the share and retrieving and updating properties metadata and access policies of the share.\n\n**Instantiating an Asynchronous Share Client**\n\n```java\nShareAsyncClient client = new ShareClientBuilder()\n     .connectionString(\"${connectionString}\")\n     .endpoint(\"${endpoint}\")\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.ShareClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the azureFileStorageClient."
metadata: {}
package: "com.azure.storage.file.share"
artifact: com.azure:azure-storage-file-share:12.14.0-beta.1
