### YamlMime:JavaType
uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication"
fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication"
name: "JwtAuthentication"
nameWithType: "JwtAuthentication"
summary: "Properties for access validation based on JSON Web Tokens (JWT)."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.AuthenticationBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.resourcemanager.videoanalyzer.models.AuthenticationBase.validate()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class JwtAuthentication extends AuthenticationBase"
constructors:
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.JwtAuthentication()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.JwtAuthentication()"
  name: "JwtAuthentication()"
  nameWithType: "JwtAuthentication.JwtAuthentication()"
  syntax: "public JwtAuthentication()"
methods:
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.audiences()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.audiences()"
  name: "audiences()"
  nameWithType: "JwtAuthentication.audiences()"
  summary: "Get the audiences property: List of expected token audiences. Token audience is valid if it matches at least one of the given values."
  syntax: "public List<String> audiences()"
  returns:
    description: "the audiences value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.claims()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.claims()"
  name: "claims()"
  nameWithType: "JwtAuthentication.claims()"
  summary: "Get the claims property: List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid."
  syntax: "public List<TokenClaim> claims()"
  returns:
    description: "the claims value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.videoanalyzer.models.TokenClaim?alt=com.azure.resourcemanager.videoanalyzer.models.TokenClaim&text=TokenClaim\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.issuers()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.issuers()"
  name: "issuers()"
  nameWithType: "JwtAuthentication.issuers()"
  summary: "Get the issuers property: List of expected token issuers. Token issuer is valid if it matches at least one of the given values."
  syntax: "public List<String> issuers()"
  returns:
    description: "the issuers value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.keys()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.keys()"
  name: "keys()"
  nameWithType: "JwtAuthentication.keys()"
  summary: "Get the keys property: List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key."
  syntax: "public List<TokenKey> keys()"
  returns:
    description: "the keys value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.videoanalyzer.models.TokenKey?alt=com.azure.resourcemanager.videoanalyzer.models.TokenKey&text=TokenKey\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.validate()"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.validate()"
  name: "validate()"
  nameWithType: "JwtAuthentication.validate()"
  summary: "Validates the instance."
  overridden: "com.azure.resourcemanager.videoanalyzer.models.AuthenticationBase.validate()"
  syntax: "public void validate()"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withAudiences(java.util.List<java.lang.String>)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withAudiences(List<String> audiences)"
  name: "withAudiences(List<String> audiences)"
  nameWithType: "JwtAuthentication.withAudiences(List<String> audiences)"
  summary: "Set the audiences property: List of expected token audiences. Token audience is valid if it matches at least one of the given values."
  parameters:
  - description: "the audiences value to set."
    name: "audiences"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JwtAuthentication withAudiences(List<String> audiences)"
  returns:
    description: "the JwtAuthentication object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication?alt=com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication&text=JwtAuthentication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withClaims(java.util.List<com.azure.resourcemanager.videoanalyzer.models.TokenClaim>)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withClaims(List<TokenClaim> claims)"
  name: "withClaims(List<TokenClaim> claims)"
  nameWithType: "JwtAuthentication.withClaims(List<TokenClaim> claims)"
  summary: "Set the claims property: List of additional token claims to be validated. Token must contains all claims and respective values for it to be valid."
  parameters:
  - description: "the claims value to set."
    name: "claims"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.videoanalyzer.models.TokenClaim?alt=com.azure.resourcemanager.videoanalyzer.models.TokenClaim&text=TokenClaim\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JwtAuthentication withClaims(List<TokenClaim> claims)"
  returns:
    description: "the JwtAuthentication object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication?alt=com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication&text=JwtAuthentication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withIssuers(java.util.List<java.lang.String>)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withIssuers(List<String> issuers)"
  name: "withIssuers(List<String> issuers)"
  nameWithType: "JwtAuthentication.withIssuers(List<String> issuers)"
  summary: "Set the issuers property: List of expected token issuers. Token issuer is valid if it matches at least one of the given values."
  parameters:
  - description: "the issuers value to set."
    name: "issuers"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JwtAuthentication withIssuers(List<String> issuers)"
  returns:
    description: "the JwtAuthentication object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication?alt=com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication&text=JwtAuthentication\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withKeys(java.util.List<com.azure.resourcemanager.videoanalyzer.models.TokenKey>)"
  fullName: "com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication.withKeys(List<TokenKey> keys)"
  name: "withKeys(List<TokenKey> keys)"
  nameWithType: "JwtAuthentication.withKeys(List<TokenKey> keys)"
  summary: "Set the keys property: List of keys which can be used to validate access tokens. Having multiple keys allow for seamless key rotation of the token signing key. Token signature must match exactly one key."
  parameters:
  - description: "the keys value to set."
    name: "keys"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.videoanalyzer.models.TokenKey?alt=com.azure.resourcemanager.videoanalyzer.models.TokenKey&text=TokenKey\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public JwtAuthentication withKeys(List<TokenKey> keys)"
  returns:
    description: "the JwtAuthentication object itself."
    type: "<xref href=\"com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication?alt=com.azure.resourcemanager.videoanalyzer.models.JwtAuthentication&text=JwtAuthentication\" data-throw-if-not-resolved=\"False\" />"
type: "class"
metadata: {}
package: "com.azure.resourcemanager.videoanalyzer.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-videoanalyzer:1.0.0-beta.5
