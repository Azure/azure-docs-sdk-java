### YamlMime:JavaMember
uid: "com.azure.storage.blob.nio.AzureFileSystemProvider.newDirectoryStream*"
fullName: "com.azure.storage.blob.nio.AzureFileSystemProvider.newDirectoryStream"
name: "newDirectoryStream"
nameWithType: "AzureFileSystemProvider.newDirectoryStream"
members:
- uid: "com.azure.storage.blob.nio.AzureFileSystemProvider.newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)"
  fullName: "com.azure.storage.blob.nio.AzureFileSystemProvider.newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)"
  name: "newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)"
  nameWithType: "AzureFileSystemProvider.newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)"
  summary: "Returns an <xref uid=\"com.azure.storage.blob.nio.AzureDirectoryStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureDirectoryStream\"></xref> for iterating over the contents of a directory. The elements returned by the directory stream's iterator are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by resolving the name of the directory entry against dir. The entries returned by the iterator are filtered by the given filter.\n\nWhen not using the try-with-resources construct, then directory stream's close method should be invoked after iteration is completed so as to free any resources held for the open directory.\n\nWhere the filter terminates due to an uncaught error or runtime exception then it is propagated to the hasNext or next method. Where an IOException is thrown, it results in the hasNext or next method throwing a DirectoryIteratorException with the IOException as the cause."
  overridden: "java.nio.file.spi.FileSystemProvider.newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<? super java.nio.file.Path>)"
  parameters:
  - description: "the path to the directory"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  - description: "the directory stream filter"
    name: "filter"
    type: "<xref href=\"java.nio.file.DirectoryStream.Filter?alt=java.nio.file.DirectoryStream.Filter&text=Filter\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super java.nio.file.Path?alt=? super java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public DirectoryStream<Path> newDirectoryStream(Path path, DirectoryStream.Filter<? super Path> filter)"
  exceptions:
  - description: "If the path type is not an instance of <xref uid=\"AzurePath\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzurePath\"></xref>."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "a new and open <code>DirectoryStream</code> object"
    type: "<xref href=\"java.nio.file.DirectoryStream?alt=java.nio.file.DirectoryStream&text=DirectoryStream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.blob.nio"
artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
