### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.EventHubConsumerClient"
fullName: "com.azure.messaging.eventhubs.EventHubConsumerClient"
name: "EventHubConsumerClient"
nameWithType: "EventHubConsumerClient"
summary: "A **synchronous** consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventData\"></xref> from an Event Hub partition in the context of a specific consumer group.\n\n**Creating a synchronous consumer**\n\n```java\n// The required parameters are `consumerGroup`, and a way to authenticate with Event Hubs using credentials.\n EventHubConsumerClient consumer = new EventHubClientBuilder()\n     .connectionString(\n         \"Endpoint={eh-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key};Entity-Path={hub-name}\")\n     .consumerGroup(\"$DEFAULT\")\n     .buildConsumerClient();\n```\n\n**Consuming events from a single partition**\n\nEvents from a single partition can be consumed using <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#receiveFromPartition(String, int, EventPosition)\"></xref> or <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#receiveFromPartition(String, int, EventPosition, Duration)\"></xref>. The call to \\`receive\\` completes and returns an <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IterableStream\"></xref> when either the maximum number of events is received, or the timeout has elapsed.\n\n```java\nInstant twelveHoursAgo = Instant.now().minus(Duration.ofHours(12));\n EventPosition startingPosition = EventPosition.fromEnqueuedTime(twelveHoursAgo);\n String partitionId = \"0\";\n \n // Reads events from partition '0' and returns the first 100 received or until the 30 seconds has elapsed.\n IterableStream<PartitionEvent> events = consumer.receiveFromPartition(partitionId, 100,\n     startingPosition, Duration.ofSeconds(30));\n \n Long lastSequenceNumber = -1L;\n for (PartitionEvent partitionEvent : events) {\n     // For each event, perform some sort of processing.\n     System.out.print(\"Event received: \" + partitionEvent.getData().getSequenceNumber());\n     lastSequenceNumber = partitionEvent.getData().getSequenceNumber();\n }\n \n // Figure out what the next EventPosition to receive from is based on last event we processed in the stream.\n // If lastSequenceNumber is -1L, then we didn't see any events the first time we fetched events from the\n // partition.\n if (lastSequenceNumber != -1L) {\n     EventPosition nextPosition = EventPosition.fromSequenceNumber(lastSequenceNumber, false);\n \n     // Gets the next set of events from partition '0' to consume and process.\n     IterableStream<PartitionEvent> nextEvents = consumer.receiveFromPartition(partitionId, 100,\n         nextPosition, Duration.ofSeconds(30));\n }\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EventHubConsumerClient implements Closeable"
methods:
- "com.azure.messaging.eventhubs.EventHubConsumerClient.close()"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup()"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName()"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties()"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace()"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds()"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties(java.lang.String)"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition)"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration)"
- "com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration,com.azure.messaging.eventhubs.models.ReceiveOptions)"
type: "class"
implements:
- "<xref href=\"java.io.Closeable?alt=java.io.Closeable&text=Closeable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.4.0-beta.1
