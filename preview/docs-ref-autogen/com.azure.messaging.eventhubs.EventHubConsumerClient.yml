### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient
  id: EventHubConsumerClient
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventHubConsumerClient.close()
  - com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup()
  - com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName()
  - com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties()
  - com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace()
  - com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds()
  - com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties(java.lang.String)
  - com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition)
  - com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration)
  - com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration,com.azure.messaging.eventhubs.models.ReceiveOptions)
  langs:
  - java
  name: EventHubConsumerClient
  nameWithType: EventHubConsumerClient
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient
  type: Class
  package: com.azure.messaging.eventhubs
  summary: "A **synchronous** consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from an Event Hub partition in the context of a specific consumer group.\n\n**Creating a synchronous consumer**\n\n```java\n// The required parameters are `consumerGroup`, and a way to authenticate with Event Hubs using credentials.\n EventHubConsumerClient consumer = new EventHubClientBuilder()\n     .connectionString(\n         \"Endpoint={eh-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key};Entity-Path={hub-name}\")\n     .consumerGroup(\"$DEFAULT\")\n     .buildConsumerClient();\n```\n\n**Consuming events from a single partition**\n\nEvents from a single partition can be consumed using <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition)\" data-throw-if-not-resolved=\"false\">#receiveFromPartition(String, int, EventPosition)</xref> or <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration)\" data-throw-if-not-resolved=\"false\">#receiveFromPartition(String, int, EventPosition, Duration)</xref>. The call to \\`receive\\` completes and returns an <xref uid=\"com.azure.core.util.IterableStream\" data-throw-if-not-resolved=\"false\">IterableStream</xref> when either the maximum number of events is received, or the timeout has elapsed.\n\n```java\nInstant twelveHoursAgo = Instant.now().minus(Duration.ofHours(12));\n EventPosition startingPosition = EventPosition.fromEnqueuedTime(twelveHoursAgo);\n String partitionId = \"0\";\n \n // Reads events from partition '0' and returns the first 100 received or until the 30 seconds has elapsed.\n IterableStream<PartitionEvent> events = consumer.receiveFromPartition(partitionId, 100,\n     startingPosition, Duration.ofSeconds(30));\n \n Long lastSequenceNumber = -1L;\n for (PartitionEvent partitionEvent : events) {\n     // For each event, perform some sort of processing.\n     System.out.print(\"Event received: \" + partitionEvent.getData().getSequenceNumber());\n     lastSequenceNumber = partitionEvent.getData().getSequenceNumber();\n }\n \n // Figure out what the next EventPosition to receive from is based on last event we processed in the stream.\n // If lastSequenceNumber is -1L, then we didn't see any events the first time we fetched events from the\n // partition.\n if (lastSequenceNumber != -1L) {\n     EventPosition nextPosition = EventPosition.fromSequenceNumber(lastSequenceNumber, false);\n \n     // Gets the next set of events from partition '0' to consume and process.\n     IterableStream<PartitionEvent> nextEvents = consumer.receiveFromPartition(partitionId, 100,\n         nextPosition, Duration.ofSeconds(30));\n }\n```"
  syntax:
    content: public class EventHubConsumerClient implements Closeable
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Closeable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.EventHubConsumerClient(com.azure.messaging.eventhubs.EventHubConsumerAsyncClient,java.time.Duration)
  id: EventHubConsumerClient(com.azure.messaging.eventhubs.EventHubConsumerAsyncClient,java.time.Duration)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: EventHubConsumerClient(EventHubConsumerAsyncClient consumer, Duration tryTimeout)
  nameWithType: EventHubConsumerClient.EventHubConsumerClient(EventHubConsumerAsyncClient consumer, Duration tryTimeout)
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.EventHubConsumerClient(EventHubConsumerAsyncClient consumer, Duration tryTimeout)
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.EventHubConsumerClient*
  type: Constructor
  package: com.azure.messaging.eventhubs
  syntax:
    content: " EventHubConsumerClient(EventHubConsumerAsyncClient consumer, Duration tryTimeout)"
    parameters:
    - id: consumer
      type: com.azure.messaging.eventhubs.EventHubConsumerAsyncClient
    - id: tryTimeout
      type: java.time.Duration
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.close()
  id: close()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: close()
  nameWithType: EventHubConsumerClient.close()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.close()
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.close*
  type: Method
  package: com.azure.messaging.eventhubs
  syntax:
    content: public void close()
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup()
  id: getConsumerGroup()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: getConsumerGroup()
  nameWithType: EventHubConsumerClient.getConsumerGroup()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup()
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Gets the consumer group this consumer is reading events as a part of.
  syntax:
    content: public String getConsumerGroup()
    return:
      type: java.lang.String
      description: The consumer group this consumer is reading events as a part of.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName()
  id: getEventHubName()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: getEventHubName()
  nameWithType: EventHubConsumerClient.getEventHubName()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName()
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Gets the Event Hub name this client interacts with.
  syntax:
    content: public String getEventHubName()
    return:
      type: java.lang.String
      description: The Event Hub name this client interacts with.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties()
  id: getEventHubProperties()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: getEventHubProperties()
  nameWithType: EventHubConsumerClient.getEventHubProperties()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties()
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Retrieves information about an Event Hub, including the number of partitions present and their identifiers.
  syntax:
    content: public EventHubProperties getEventHubProperties()
    return:
      type: com.azure.messaging.eventhubs.EventHubProperties
      description: The set of information for the Event Hub that this client is associated with.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace()
  id: getFullyQualifiedNamespace()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: getFullyQualifiedNamespace()
  nameWithType: EventHubConsumerClient.getFullyQualifiedNamespace()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace()
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Gets the fully qualified Event Hubs namespace that the connection is associated with. This is likely similar to `{yournamespace}.servicebus.windows.net`.
  syntax:
    content: public String getFullyQualifiedNamespace()
    return:
      type: java.lang.String
      description: The fully qualified Event Hubs namespace that the connection is associated with.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds()
  id: getPartitionIds()
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: getPartitionIds()
  nameWithType: EventHubConsumerClient.getPartitionIds()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds()
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Retrieves the identifiers for the partitions of an Event Hub.
  syntax:
    content: public IterableStream<String> getPartitionIds()
    return:
      type: com.azure.core.util.IterableStream<java.lang.String>
      description: The set of identifiers for the partitions of an Event Hub.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties(java.lang.String)
  id: getPartitionProperties(java.lang.String)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: getPartitionProperties(String partitionId)
  nameWithType: EventHubConsumerClient.getPartitionProperties(String partitionId)
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties(String partitionId)
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Retrieves information about a specific partition for an Event Hub, including elements that describe the available events in the partition event stream.
  syntax:
    content: public PartitionProperties getPartitionProperties(String partitionId)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: The unique identifier of a partition associated with the Event Hub.
    return:
      type: com.azure.messaging.eventhubs.PartitionProperties
      description: The set of information for the requested partition under the Event Hub this client is associated with.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition)
  id: receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition)
  nameWithType: EventHubConsumerClient.receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition)
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition)
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Receives a batch of <xref uid="com.azure.messaging.eventhubs.models.PartitionEvent" data-throw-if-not-resolved="false">events</xref> from the Event Hub partition.
  syntax:
    content: public IterableStream<PartitionEvent> receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: Identifier of the partition to read events from.
    - id: maximumMessageCount
      type: int
      description: The maximum number of messages to receive in this batch.
    - id: startingPosition
      type: com.azure.messaging.eventhubs.models.EventPosition
      description: Position within the Event Hub partition to begin consuming events.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.models.PartitionEvent>
      description: >-
        A set of <xref uid="com.azure.messaging.eventhubs.models.PartitionEvent" data-throw-if-not-resolved="false">PartitionEvent</xref> that was received. The iterable contains up to
             <code>maximumMessageCount</code> events. If a stream for the events was opened before, the same position within
             that partition is returned. Otherwise, events are read starting from <code>startingPosition</code>.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration)
  id: receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime)
  nameWithType: EventHubConsumerClient.receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime)
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime)
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Receives a batch of <xref uid="com.azure.messaging.eventhubs.models.PartitionEvent" data-throw-if-not-resolved="false">events</xref> from the Event Hub partition.
  syntax:
    content: public IterableStream<PartitionEvent> receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: Identifier of the partition to read events from.
    - id: maximumMessageCount
      type: int
      description: The maximum number of messages to receive in this batch.
    - id: startingPosition
      type: com.azure.messaging.eventhubs.models.EventPosition
      description: Position within the Event Hub partition to begin consuming events.
    - id: maximumWaitTime
      type: java.time.Duration
      description: >-
        The maximum amount of time to wait to build up the requested message count for the
             batch; if not specified, the default wait time specified when the consumer was created will be used.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.models.PartitionEvent>
      description: >-
        A set of <xref uid="com.azure.messaging.eventhubs.models.PartitionEvent" data-throw-if-not-resolved="false">PartitionEvent</xref> that was received. The iterable contains up to
             <code>maximumMessageCount</code> events.
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration,com.azure.messaging.eventhubs.models.ReceiveOptions)
  id: receiveFromPartition(java.lang.String,int,com.azure.messaging.eventhubs.models.EventPosition,java.time.Duration,com.azure.messaging.eventhubs.models.ReceiveOptions)
  artifact: com.azure:azure-messaging-eventhubs:5.1.0-beta.1
  parent: com.azure.messaging.eventhubs.EventHubConsumerClient
  langs:
  - java
  name: receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime, ReceiveOptions receiveOptions)
  nameWithType: EventHubConsumerClient.receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime, ReceiveOptions receiveOptions)
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime, ReceiveOptions receiveOptions)
  overload: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition*
  type: Method
  package: com.azure.messaging.eventhubs
  summary: Receives a batch of <xref uid="com.azure.messaging.eventhubs.models.PartitionEvent" data-throw-if-not-resolved="false">events</xref> from the Event Hub partition.
  syntax:
    content: public IterableStream<PartitionEvent> receiveFromPartition(String partitionId, int maximumMessageCount, EventPosition startingPosition, Duration maximumWaitTime, ReceiveOptions receiveOptions)
    parameters:
    - id: partitionId
      type: java.lang.String
      description: Identifier of the partition to read events from.
    - id: maximumMessageCount
      type: int
      description: The maximum number of messages to receive in this batch.
    - id: startingPosition
      type: com.azure.messaging.eventhubs.models.EventPosition
      description: Position within the Event Hub partition to begin consuming events.
    - id: maximumWaitTime
      type: java.time.Duration
      description: >-
        The maximum amount of time to wait to build up the requested message count for the
             batch; if not specified, the default wait time specified when the consumer was created will be used.
    - id: receiveOptions
      type: com.azure.messaging.eventhubs.models.ReceiveOptions
      description: Options when receiving events from the partition.
    return:
      type: com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.models.PartitionEvent>
      description: >-
        A set of <xref uid="com.azure.messaging.eventhubs.models.PartitionEvent" data-throw-if-not-resolved="false">PartitionEvent</xref> that was received. The iterable contains up to
             <code>maximumMessageCount</code> events.
references:
- uid: com.azure.messaging.eventhubs.EventHubConsumerAsyncClient
  name: EventHubConsumerAsyncClient
  nameWithType: EventHubConsumerAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubConsumerAsyncClient
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.EventHubConsumerClient*
  name: EventHubConsumerClient
  nameWithType: EventHubConsumerClient.EventHubConsumerClient
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.EventHubConsumerClient
  package: com.azure.messaging.eventhubs
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace*
  name: getFullyQualifiedNamespace
  nameWithType: EventHubConsumerClient.getFullyQualifiedNamespace
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getFullyQualifiedNamespace
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName*
  name: getEventHubName
  nameWithType: EventHubConsumerClient.getEventHubName
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubName
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup*
  name: getConsumerGroup
  nameWithType: EventHubConsumerClient.getConsumerGroup
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getConsumerGroup
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubProperties
  name: EventHubProperties
  nameWithType: EventHubProperties
  fullName: com.azure.messaging.eventhubs.EventHubProperties
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties*
  name: getEventHubProperties
  nameWithType: EventHubConsumerClient.getEventHubProperties
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getEventHubProperties
  package: com.azure.messaging.eventhubs
- uid: com.azure.core.util.IterableStream<java.lang.String>
  spec.java:
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds*
  name: getPartitionIds
  nameWithType: EventHubConsumerClient.getPartitionIds
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionIds
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.PartitionProperties
  name: PartitionProperties
  nameWithType: PartitionProperties
  fullName: com.azure.messaging.eventhubs.PartitionProperties
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties*
  name: getPartitionProperties
  nameWithType: EventHubConsumerClient.getPartitionProperties
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.getPartitionProperties
  package: com.azure.messaging.eventhubs
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.messaging.eventhubs.models.EventPosition
  name: EventPosition
  nameWithType: EventPosition
  fullName: com.azure.messaging.eventhubs.models.EventPosition
- uid: com.azure.core.util.IterableStream<com.azure.messaging.eventhubs.models.PartitionEvent>
  spec.java:
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.messaging.eventhubs.models.PartitionEvent
    name: PartitionEvent
    fullName: com.azure.messaging.eventhubs.models.PartitionEvent
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition*
  name: receiveFromPartition
  nameWithType: EventHubConsumerClient.receiveFromPartition
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.receiveFromPartition
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions
  name: ReceiveOptions
  nameWithType: ReceiveOptions
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions
- uid: com.azure.messaging.eventhubs.EventHubConsumerClient.close*
  name: close
  nameWithType: EventHubConsumerClient.close
  fullName: com.azure.messaging.eventhubs.EventHubConsumerClient.close
  package: com.azure.messaging.eventhubs
- uid: java.io.Closeable
  name: Closeable
  nameWithType: Closeable
  fullName: java.io.Closeable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.util.IterableStream
  name: IterableStream
  nameWithType: IterableStream
  fullName: com.azure.core.util.IterableStream
- uid: com.azure.messaging.eventhubs.models.PartitionEvent
  name: PartitionEvent
  nameWithType: PartitionEvent
  fullName: com.azure.messaging.eventhubs.models.PartitionEvent
