### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary*"
fullName: "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary"
name: "writeBinary"
nameWithType: "WriterBasedJsonGenerator.writeBinary"
members:
- uid: "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)"
  fullName: "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
  name: "writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
  nameWithType: "WriterBasedJsonGenerator.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
  summary: "Method that will output given chunk of binary data as base64 encoded, as a complete String value (surrounded by double quotes). This method defaults\n\nNote: because JSON Strings can not contain unescaped linefeeds, if linefeeds are included (as per last argument), they must be escaped. This adds overhead for decoding without improving readability. Alternatively if linefeeds are not included, resulting String value may violate the requirement of base64 RFC which mandates line-length of 76 characters and use of linefeeds. However, all <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> implementations are required to accept such \"long line base64\"; as do typical production-level base64 decoders."
  overridden: "com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)"
  parameters:
  - name: "b64variant"
    type: "<xref href=\"com.fasterxml.jackson.core.Base64Variant?alt=com.fasterxml.jackson.core.Base64Variant&text=Base64Variant\" data-throw-if-not-resolved=\"False\" />"
  - name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerationException?alt=com.fasterxml.jackson.core.JsonGenerationException&text=JsonGenerationException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)"
  fullName: "com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)"
  name: "writeBinary(Base64Variant b64variant, InputStream data, int dataLength)"
  nameWithType: "WriterBasedJsonGenerator.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.core.json.WriterBasedJsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#writeBinary(Base64Variant,byte[],int,int)\"></xref>, but where input is provided through a stream, allowing for incremental writes without holding the whole input in memory."
  overridden: "com.fasterxml.jackson.core.base.GeneratorBase.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)"
  parameters:
  - name: "b64variant"
    type: "<xref href=\"com.fasterxml.jackson.core.Base64Variant?alt=com.fasterxml.jackson.core.Base64Variant&text=Base64Variant\" data-throw-if-not-resolved=\"False\" />"
  - name: "data"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "dataLength"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerationException?alt=com.fasterxml.jackson.core.JsonGenerationException&text=JsonGenerationException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.json"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
