### YamlMime:ManagedReference
items:
- uid: org.apache.hc.client5.http.RouteInfo
  id: RouteInfo
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http
  children:
  - org.apache.hc.client5.http.RouteInfo.LayerType
  - org.apache.hc.client5.http.RouteInfo.TunnelType
  - org.apache.hc.client5.http.RouteInfo.getHopCount()
  - org.apache.hc.client5.http.RouteInfo.getHopTarget(int)
  - org.apache.hc.client5.http.RouteInfo.getLayerType()
  - org.apache.hc.client5.http.RouteInfo.getLocalAddress()
  - org.apache.hc.client5.http.RouteInfo.getProxyHost()
  - org.apache.hc.client5.http.RouteInfo.getTargetHost()
  - org.apache.hc.client5.http.RouteInfo.getTunnelType()
  - org.apache.hc.client5.http.RouteInfo.isLayered()
  - org.apache.hc.client5.http.RouteInfo.isSecure()
  - org.apache.hc.client5.http.RouteInfo.isTunnelled()
  langs:
  - java
  name: RouteInfo
  nameWithType: RouteInfo
  fullName: org.apache.hc.client5.http.RouteInfo
  type: Interface
  package: org.apache.hc.client5.http
  summary: Connection route information.
  syntax:
    content: public interface RouteInfo
- uid: org.apache.hc.client5.http.RouteInfo.getHopCount()
  id: getHopCount()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getHopCount()
  nameWithType: RouteInfo.getHopCount()
  fullName: org.apache.hc.client5.http.RouteInfo.getHopCount()
  overload: org.apache.hc.client5.http.RouteInfo.getHopCount*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the number of hops in this route. A direct route has one hop. A route through a proxy has two hops. A route through a chain of *n* proxies has *n+1* hops.
  syntax:
    content: public abstract int getHopCount()
    return:
      type: int
      description: the number of hops in this route
- uid: org.apache.hc.client5.http.RouteInfo.getHopTarget(int)
  id: getHopTarget(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getHopTarget(int hop)
  nameWithType: RouteInfo.getHopTarget(int hop)
  fullName: org.apache.hc.client5.http.RouteInfo.getHopTarget(int hop)
  overload: org.apache.hc.client5.http.RouteInfo.getHopTarget*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the target of a hop in this route. The target of the last hop is the <xref uid="org.apache.hc.client5.http.RouteInfo.getTargetHost*" data-throw-if-not-resolved="false">target host</xref>, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host.
  syntax:
    content: public abstract HttpHost getHopTarget(int hop)
    parameters:
    - id: hop
      type: int
      description: >-
        index of the hop for which to get the target,
                          0 for first
    return:
      type: org.apache.hc.core5.http.HttpHost
      description: the target of the given hop
- uid: org.apache.hc.client5.http.RouteInfo.getLayerType()
  id: getLayerType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getLayerType()
  nameWithType: RouteInfo.getLayerType()
  fullName: org.apache.hc.client5.http.RouteInfo.getLayerType()
  overload: org.apache.hc.client5.http.RouteInfo.getLayerType*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the layering type of this route. In the presence of proxies, only layering over an end-to-end tunnel is considered.
  syntax:
    content: public abstract RouteInfo.LayerType getLayerType()
    return:
      type: org.apache.hc.client5.http.RouteInfo.LayerType
      description: the layering type
- uid: org.apache.hc.client5.http.RouteInfo.getLocalAddress()
  id: getLocalAddress()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getLocalAddress()
  nameWithType: RouteInfo.getLocalAddress()
  fullName: org.apache.hc.client5.http.RouteInfo.getLocalAddress()
  overload: org.apache.hc.client5.http.RouteInfo.getLocalAddress*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the local address to connect from.
  syntax:
    content: public abstract InetAddress getLocalAddress()
    return:
      type: java.net.InetAddress
      description: >-
        the local address,
                  or <code>null</code>
- uid: org.apache.hc.client5.http.RouteInfo.getProxyHost()
  id: getProxyHost()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getProxyHost()
  nameWithType: RouteInfo.getProxyHost()
  fullName: org.apache.hc.client5.http.RouteInfo.getProxyHost()
  overload: org.apache.hc.client5.http.RouteInfo.getProxyHost*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the first proxy host.
  syntax:
    content: public abstract HttpHost getProxyHost()
    return:
      type: org.apache.hc.core5.http.HttpHost
      description: >-
        the first proxy in the proxy chain, or
                 <code>null</code> if this route is direct
- uid: org.apache.hc.client5.http.RouteInfo.getTargetHost()
  id: getTargetHost()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getTargetHost()
  nameWithType: RouteInfo.getTargetHost()
  fullName: org.apache.hc.client5.http.RouteInfo.getTargetHost()
  overload: org.apache.hc.client5.http.RouteInfo.getTargetHost*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the target host.
  syntax:
    content: public abstract HttpHost getTargetHost()
    return:
      type: org.apache.hc.core5.http.HttpHost
      description: the target host
- uid: org.apache.hc.client5.http.RouteInfo.getTunnelType()
  id: getTunnelType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: getTunnelType()
  nameWithType: RouteInfo.getTunnelType()
  fullName: org.apache.hc.client5.http.RouteInfo.getTunnelType()
  overload: org.apache.hc.client5.http.RouteInfo.getTunnelType*
  type: Method
  package: org.apache.hc.client5.http
  summary: Obtains the tunnel type of this route. If there is a proxy chain, only end-to-end tunnels are considered.
  syntax:
    content: public abstract RouteInfo.TunnelType getTunnelType()
    return:
      type: org.apache.hc.client5.http.RouteInfo.TunnelType
      description: the tunnelling type
- uid: org.apache.hc.client5.http.RouteInfo.isLayered()
  id: isLayered()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: isLayered()
  nameWithType: RouteInfo.isLayered()
  fullName: org.apache.hc.client5.http.RouteInfo.isLayered()
  overload: org.apache.hc.client5.http.RouteInfo.isLayered*
  type: Method
  package: org.apache.hc.client5.http
  summary: Checks whether this route includes a layered protocol. In the presence of proxies, only layering over an end-to-end tunnel is considered.
  syntax:
    content: public abstract boolean isLayered()
    return:
      type: boolean
      description: >-
        <code>true</code> if layered,
                  <code>false</code> otherwise
- uid: org.apache.hc.client5.http.RouteInfo.isSecure()
  id: isSecure()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: isSecure()
  nameWithType: RouteInfo.isSecure()
  fullName: org.apache.hc.client5.http.RouteInfo.isSecure()
  overload: org.apache.hc.client5.http.RouteInfo.isSecure*
  type: Method
  package: org.apache.hc.client5.http
  summary: Checks whether this route is secure.
  syntax:
    content: public abstract boolean isSecure()
    return:
      type: boolean
      description: >-
        <code>true</code> if secure,
                  <code>false</code> otherwise
- uid: org.apache.hc.client5.http.RouteInfo.isTunnelled()
  id: isTunnelled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.client5.http.RouteInfo
  langs:
  - java
  name: isTunnelled()
  nameWithType: RouteInfo.isTunnelled()
  fullName: org.apache.hc.client5.http.RouteInfo.isTunnelled()
  overload: org.apache.hc.client5.http.RouteInfo.isTunnelled*
  type: Method
  package: org.apache.hc.client5.http
  summary: Checks whether this route is tunnelled through a proxy. If there is a proxy chain, only end-to-end tunnels are considered.
  syntax:
    content: public abstract boolean isTunnelled()
    return:
      type: boolean
      description: >-
        <code>true</code> if tunnelled end-to-end through at least
                  one proxy,
                  <code>false</code> otherwise
references:
- uid: org.apache.hc.core5.http.HttpHost
  name: HttpHost
  nameWithType: HttpHost
  fullName: org.apache.hc.core5.http.HttpHost
- uid: org.apache.hc.client5.http.RouteInfo.getTargetHost*
  name: getTargetHost
  nameWithType: RouteInfo.getTargetHost
  fullName: org.apache.hc.client5.http.RouteInfo.getTargetHost
  package: org.apache.hc.client5.http
- uid: java.net.InetAddress
  spec.java:
  - uid: java.net.InetAddress
    name: InetAddress
    fullName: java.net.InetAddress
- uid: org.apache.hc.client5.http.RouteInfo.getLocalAddress*
  name: getLocalAddress
  nameWithType: RouteInfo.getLocalAddress
  fullName: org.apache.hc.client5.http.RouteInfo.getLocalAddress
  package: org.apache.hc.client5.http
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.hc.client5.http.RouteInfo.getHopCount*
  name: getHopCount
  nameWithType: RouteInfo.getHopCount
  fullName: org.apache.hc.client5.http.RouteInfo.getHopCount
  package: org.apache.hc.client5.http
- uid: org.apache.hc.client5.http.RouteInfo.getHopTarget*
  name: getHopTarget
  nameWithType: RouteInfo.getHopTarget
  fullName: org.apache.hc.client5.http.RouteInfo.getHopTarget
  package: org.apache.hc.client5.http
- uid: org.apache.hc.client5.http.RouteInfo.getProxyHost*
  name: getProxyHost
  nameWithType: RouteInfo.getProxyHost
  fullName: org.apache.hc.client5.http.RouteInfo.getProxyHost
  package: org.apache.hc.client5.http
- uid: org.apache.hc.client5.http.RouteInfo.TunnelType
  name: RouteInfo.TunnelType
  nameWithType: RouteInfo.TunnelType
  fullName: org.apache.hc.client5.http.RouteInfo.TunnelType
- uid: org.apache.hc.client5.http.RouteInfo.getTunnelType*
  name: getTunnelType
  nameWithType: RouteInfo.getTunnelType
  fullName: org.apache.hc.client5.http.RouteInfo.getTunnelType
  package: org.apache.hc.client5.http
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.hc.client5.http.RouteInfo.isTunnelled*
  name: isTunnelled
  nameWithType: RouteInfo.isTunnelled
  fullName: org.apache.hc.client5.http.RouteInfo.isTunnelled
  package: org.apache.hc.client5.http
- uid: org.apache.hc.client5.http.RouteInfo.LayerType
  name: RouteInfo.LayerType
  nameWithType: RouteInfo.LayerType
  fullName: org.apache.hc.client5.http.RouteInfo.LayerType
- uid: org.apache.hc.client5.http.RouteInfo.getLayerType*
  name: getLayerType
  nameWithType: RouteInfo.getLayerType
  fullName: org.apache.hc.client5.http.RouteInfo.getLayerType
  package: org.apache.hc.client5.http
- uid: org.apache.hc.client5.http.RouteInfo.isLayered*
  name: isLayered
  nameWithType: RouteInfo.isLayered
  fullName: org.apache.hc.client5.http.RouteInfo.isLayered
  package: org.apache.hc.client5.http
- uid: org.apache.hc.client5.http.RouteInfo.isSecure*
  name: isSecure
  nameWithType: RouteInfo.isSecure
  fullName: org.apache.hc.client5.http.RouteInfo.isSecure
  package: org.apache.hc.client5.http
