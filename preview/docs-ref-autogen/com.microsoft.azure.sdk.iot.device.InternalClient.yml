### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.device.InternalClient"
fullName: "com.microsoft.azure.sdk.iot.device.InternalClient"
name: "InternalClient"
nameWithType: "InternalClient"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class InternalClient"
methods:
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.close()"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.close()"
  name: "close()"
  nameWithType: "InternalClient.close()"
  syntax: "public void close()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.closeNow()"
  name: "closeNow()"
  nameWithType: "InternalClient.closeNow()"
  syntax: "public void closeNow()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()"
  name: "getConfig()"
  nameWithType: "InternalClient.getConfig()"
  summary: "Getter for the device client config."
  syntax: "public DeviceClientConfig getConfig()"
  desc: "Getter for the device client config."
  returns:
    description: "the value of the config."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceClientConfig?alt=com.microsoft.azure.sdk.iot.device.DeviceClientConfig&text=DeviceClientConfig\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()"
  name: "getProductInfo()"
  nameWithType: "InternalClient.getProductInfo()"
  syntax: "public ProductInfo getProductInfo()"
  returns:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ProductInfo?alt=com.microsoft.azure.sdk.iot.device.ProductInfo&text=ProductInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.open()"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.open()"
  name: "open()"
  nameWithType: "InternalClient.open()"
  syntax: "public void open()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)"
  name: "registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)"
  nameWithType: "InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)"
  summary: "Registers a callback to be executed when the connection status of the device changes."
  parameters:
  - description: "The callback to be fired when the connection status of the device changes. Can be null to\n                 unset this listener as long as the provided callbackContext is also null."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "a context to be passed to the callback. Can be <code>null</code>."
    name: "callbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)"
  exceptions:
  - description: "if provided callback is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Registers a callback to be executed when the connection status of the device changes. The callback will be fired with a status and a reason why the device's status changed. When the callback is fired, the provided context will be provided alongside the status and reason.\n\nNote that the thread used to deliver this callback should not be used to call open()/closeNow() on the client that this callback belongs to. All open()/closeNow() operations should be done on a separate thread"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(com.microsoft.azure.sdk.iot.device.Message,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  name: "sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  nameWithType: "InternalClient.sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  summary: "Asynchronously sends an event message to the IoT Hub."
  parameters:
  - description: "the message to be sent."
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  - description: "the callback to be invoked when a response is received.\n Can be <code>null</code>."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "a context to be passed to the callback. Can be\n <code>null</code> if no callback is provided."
    name: "callbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendEventAsync(Message message, IotHubEventCallback callback, Object callbackContext)"
  desc: "Asynchronously sends an event message to the IoT Hub."
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(java.util.List<com.microsoft.azure.sdk.iot.device.Message>,com.microsoft.azure.sdk.iot.device.IotHubEventCallback,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)"
  name: "sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)"
  nameWithType: "InternalClient.sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)"
  summary: "Asynchronously sends a batch of messages to the IoT Hub HTTPS messages will be sent in a single batch and MQTT and AMQP messages will be sent individually."
  parameters:
  - description: "the list of message to be sent."
    name: "messages"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the callback to be invoked when a response is received.\n Can be <code>null</code>."
    name: "callback"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.IotHubEventCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubEventCallback&text=IotHubEventCallback\" data-throw-if-not-resolved=\"False\" />"
  - description: "a context to be passed to the callback. Can be\n <code>null</code> if no callback is provided."
    name: "callbackContext"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendEventBatchAsync(List<Message> messages, IotHubEventCallback callback, Object callbackContext)"
  desc: "Asynchronously sends a batch of messages to the IoT Hub HTTPS messages will be sent in a single batch and MQTT and AMQP messages will be sent individually. In case of HTTPS, This API call is an all-or-nothing single HTTPS message and the callback will be triggered only once. Maximum payload size for HTTPS is 255KB"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<DeviceTwin.Property> reportedProperties)"
  name: "sendReportedProperties(Set<DeviceTwin.Property> reportedProperties)"
  nameWithType: "InternalClient.sendReportedProperties(Set<DeviceTwin.Property> reportedProperties)"
  summary: "Sends reported properties"
  parameters:
  - description: "the Set for desired properties and their corresponding callback and context. Cannot be <code>null</code>."
    name: "reportedProperties"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Property?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Property&text=Property\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void sendReportedProperties(Set<DeviceTwin.Property> reportedProperties)"
  exceptions:
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends reported properties"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(java.util.Set<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property>,int)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<DeviceTwin.Property> reportedProperties, int version)"
  name: "sendReportedProperties(Set<DeviceTwin.Property> reportedProperties, int version)"
  nameWithType: "InternalClient.sendReportedProperties(Set<DeviceTwin.Property> reportedProperties, int version)"
  summary: "Sends reported properties"
  parameters:
  - description: "the Set for desired properties and their corresponding callback and context. Cannot be <code>null</code>."
    name: "reportedProperties"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Property?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Property&text=Property\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the Reported property version. Cannot be negative."
    name: "version"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void sendReportedProperties(Set<DeviceTwin.Property> reportedProperties, int version)"
  exceptions:
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Sends reported properties"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long timeout)"
  name: "setOperationTimeout(long timeout)"
  nameWithType: "InternalClient.setOperationTimeout(long timeout)"
  summary: "Set the length of time, in milliseconds, that any given operation will expire in."
  parameters:
  - description: "the length in time, in milliseconds, until a given operation shall expire"
    name: "timeout"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setOperationTimeout(long timeout)"
  exceptions:
  - description: "if the provided timeout is 0 or negative"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Set the length of time, in milliseconds, that any given operation will expire in. These operations include reconnecting upon a connection drop and sending a message."
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.setOption(java.lang.String,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.setOption(String optionName, Object value)"
  name: "setOption(String optionName, Object value)"
  nameWithType: "InternalClient.setOption(String optionName, Object value)"
  summary: "Sets a runtime option identified by parameter `optionName` to `value`."
  parameters:
  - description: "the option name to modify"
    name: "optionName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "an object of the appropriate type for the option's value"
    name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setOption(String optionName, Object value)"
  desc: "Sets a runtime option identified by parameter `optionName` to `value`. The options that can be set via this API are: - **SetMinimumPollingInterval** \\- this option is applicable only when the transport configured with this client is HTTP. This option specifies the interval in milliseconds between calls to the service checking for availability of new messages. The value is expected to be of type `long`. - **SetSendInterval** \\- this option is applicable to all protocols. This value sets the period (in milliseconds) that this SDK spawns threads to send queued messages. Even if no message is queued, this thread will be spawned. - **SetReceiveInterval** \\- this option is applicable to all protocols in case of HTTPS protocol, this option acts the same as `SetMinimumPollingInterval` in case of MQTT and AMQP protocols, this option specifies the interval in millisecods between spawning a thread that dequeues a message from the SDK's queue of received messages. - **SetCertificatePath** \\- this option is applicable only when the transport configured with this client is AMQP. This option specifies the path to the certificate used to verify peer. The value is expected to be of type `String`. - **SetSASTokenExpiryTime** \\- this option is applicable for HTTP/ AMQP/MQTT. This option specifies the interval in seconds after which SASToken expires. If the transport is already open then setting this option will restart the transport with the updated expiry time, and will use that expiry time length for all subsequently generated sas tokens. The value is expected to be of type `long`. - **SetHttpsReadTimeout** \\- this option is applicable for HTTPS. This option specifies the read timeout in milliseconds per https request made by this client. By default, this value is 4 minutes. The value is expected to be of type `int`. - **SetHttpsConnectTimeout** \\- this option is applicable for HTTPS. This option specifies the connect timeout in milliseconds per https request made by this client. By default, this value is 0 (no connect timeout). The value is expected to be of type `int`."
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(com.microsoft.azure.sdk.iot.device.ProxySettings)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings proxySettings)"
  name: "setProxySettings(ProxySettings proxySettings)"
  nameWithType: "InternalClient.setProxySettings(ProxySettings proxySettings)"
  summary: "Set the proxy settings for this client to connect through."
  parameters:
  - description: "the settings to be used when connecting to iothub through a proxy. If null, any previously saved\n                      settings will be erased, and no proxy will be used"
    name: "proxySettings"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.ProxySettings?alt=com.microsoft.azure.sdk.iot.device.ProxySettings&text=ProxySettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setProxySettings(ProxySettings proxySettings)"
  desc: "Set the proxy settings for this client to connect through. If null then any previous settings will be erased"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(com.microsoft.azure.sdk.iot.device.transport.RetryPolicy)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy retryPolicy)"
  name: "setRetryPolicy(RetryPolicy retryPolicy)"
  nameWithType: "InternalClient.setRetryPolicy(RetryPolicy retryPolicy)"
  summary: "Sets the given retry policy on the underlying transport [ See more details about the default retry policy and about using custom retry policies here][See more details about the default retry policy and about using custom retry policies here]\n\n\n[See more details about the default retry policy and about using custom retry policies here]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md"
  parameters:
  - description: "the new interval in milliseconds"
    name: "retryPolicy"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setRetryPolicy(RetryPolicy retryPolicy)"
  desc: "Sets the given retry policy on the underlying transport [ See more details about the default retry policy and about using custom retry policies here][See more details about the default retry policy and about using custom retry policies here]\n\n\n[See more details about the default retry policy and about using custom retry policies here]: https://github.com/Azure/azure-iot-sdk-java/blob/master/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack<java.lang.String,java.lang.Object>,java.lang.Object>>)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  name: "subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  nameWithType: "InternalClient.subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  summary: "Subscribes to desired properties."
  parameters:
  - description: "the Map for desired properties and their corresponding callback and context. Can be <code>null</code>."
    name: "onDesiredPropertyChange"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Property?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Property&text=Property\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.PropertyCallBack&text=PropertyCallBack\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public void subscribeToDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.PropertyCallBack<String,Object>,Object>> onDesiredPropertyChange)"
  exceptions:
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Subscribes to desired properties. This client will receive a callback each time a desired property is updated. That callback will either contain the full desired properties set, or only the updated desired property depending on how the desired property was changed. IoT Hub supports a PUT and a PATCH on the twin. The PUT will cause this device client to receive the full desired properties set, and the PATCH will cause this device client to only receive the updated desired properties. Similarly, the version of each desired property will be incremented from a PUT call, and only the actually updated desired property will have its version incremented from a PATCH call. The java service client library uses the PATCH call when updated desired properties, but it builds the patch such that all properties are included in the patch. As a result, the device side will receive full twin updates, not partial updates. See [PUT][] and [PATCH][]\n\n\n[PUT]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/replacedevicetwin\n[PATCH]: https://docs.microsoft.com/en-us/rest/api/iothub/service/twin/updatedevicetwin"
- uid: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(java.util.Map<com.microsoft.azure.sdk.iot.device.DeviceTwin.Property,com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair<com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack,java.lang.Object>>)"
  fullName: "com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.TwinPropertyCallBack,Object>> onDesiredPropertyChange)"
  name: "subscribeToTwinDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.TwinPropertyCallBack,Object>> onDesiredPropertyChange)"
  nameWithType: "InternalClient.subscribeToTwinDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.TwinPropertyCallBack,Object>> onDesiredPropertyChange)"
  summary: "Subscribes to desired properties"
  parameters:
  - description: "the Map for desired properties and their corresponding callback and context. Can be <code>null</code>."
    name: "onDesiredPropertyChange"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Property?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Property&text=Property\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.Pair&text=Pair\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack?alt=com.microsoft.azure.sdk.iot.device.DeviceTwin.TwinPropertyCallBack&text=TwinPropertyCallBack\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public void subscribeToTwinDesiredProperties(Map<DeviceTwin.Property,DeviceTwin.Pair<DeviceTwin.TwinPropertyCallBack,Object>> onDesiredPropertyChange)"
  exceptions:
  - description: "if called when client is not opened or called before starting twin."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Subscribes to desired properties"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.device"
artifact: com.microsoft.azure.sdk.iot:iot-device-client-preview:1.2.0
