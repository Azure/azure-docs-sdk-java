### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.transformValues*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues"
name: "<K,V1,V2>transformValues"
nameWithType: "Maps.<K,V1,V2>transformValues"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(java.util.Map<K,V1>,com.azure.cosmos.implementation.guava25.base.Function<? super V1,V2>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(Map<K,V1> fromMap, Function<? super V1,V2> function)"
  name: "<K,V1,V2>transformValues(Map<K,V1> fromMap, Function<? super V1,V2> function)"
  nameWithType: "Maps.<K,V1,V2>transformValues(Map<K,V1> fromMap, Function<? super V1,V2> function)"
  summary: "Returns a view of a map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code:\n\n```java\nMap map = ImmutableMap.of(\"a\", 4, \"b\", 9);\n Function sqrt =\n     new Function() {\n       public Double apply(Integer in) {\n         return Math.sqrt((int) in);\n       }\n     };\n Map transformed = Maps.transformValues(map, sqrt);\n System.out.println(transformed);\n```\n\n... prints `{a=2.0, b=3.0}`.\n\nChanges in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map.\n\nIt's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result.\n\nThe returned map is not thread-safe or serializable, even if the underlying map is.\n\nThe function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like <xref uid=\"java.util.Map.containsValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map#containsValue\"></xref> and `Map.toString()`. For this to perform well, `function` should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing."
  parameters:
  - name: "fromMap"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V1?alt=V1&text=V1\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super V1?alt=? super V1&text=? super V1\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Map<K,V2> <K,V1,V2>transformValues(Map<K,V1> fromMap, Function<? super V1,V2> function)"
  returns:
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(java.util.NavigableMap<K,V1>,com.azure.cosmos.implementation.guava25.base.Function<? super V1,V2>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(NavigableMap<K,V1> fromMap, Function<? super V1,V2> function)"
  name: "<K,V1,V2>transformValues(NavigableMap<K,V1> fromMap, Function<? super V1,V2> function)"
  nameWithType: "Maps.<K,V1,V2>transformValues(NavigableMap<K,V1> fromMap, Function<? super V1,V2> function)"
  summary: "Returns a view of a navigable map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code:\n\n```java\nNavigableMap map = Maps.newTreeMap();\n map.put(\"a\", 4);\n map.put(\"b\", 9);\n Function sqrt =\n     new Function() {\n       public Double apply(Integer in) {\n         return Math.sqrt((int) in);\n       }\n     };\n NavigableMap transformed =\n      Maps.transformNavigableValues(map, sqrt);\n System.out.println(transformed);\n```\n\n... prints `{a=2.0, b=3.0}`.\n\nChanges in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map.\n\nIt's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result.\n\nThe returned map is not thread-safe or serializable, even if the underlying map is.\n\nThe function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like <xref uid=\"java.util.Map.containsValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map#containsValue\"></xref> and `Map.toString()`. For this to perform well, `function` should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing."
  parameters:
  - name: "fromMap"
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V1?alt=V1&text=V1\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super V1?alt=? super V1&text=? super V1\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static NavigableMap<K,V2> <K,V1,V2>transformValues(NavigableMap<K,V1> fromMap, Function<? super V1,V2> function)"
  returns:
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(java.util.SortedMap<K,V1>,com.azure.cosmos.implementation.guava25.base.Function<? super V1,V2>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(SortedMap<K,V1> fromMap, Function<? super V1,V2> function)"
  name: "<K,V1,V2>transformValues(SortedMap<K,V1> fromMap, Function<? super V1,V2> function)"
  nameWithType: "Maps.<K,V1,V2>transformValues(SortedMap<K,V1> fromMap, Function<? super V1,V2> function)"
  summary: "Returns a view of a sorted map where each value is transformed by a function. All other properties of the map, such as iteration order, are left intact. For example, the code:\n\n```java\nSortedMap map = ImmutableSortedMap.of(\"a\", 4, \"b\", 9);\n Function sqrt =\n     new Function() {\n       public Double apply(Integer in) {\n         return Math.sqrt((int) in);\n       }\n     };\n SortedMap transformed =\n      Maps.transformValues(map, sqrt);\n System.out.println(transformed);\n```\n\n... prints `{a=2.0, b=3.0}`.\n\nChanges in the underlying map are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying map.\n\nIt's acceptable for the underlying map to contain null keys, and even null values provided that the function is capable of accepting null input. The transformed map might contain null values, if the function sometimes gives a null result.\n\nThe returned map is not thread-safe or serializable, even if the underlying map is.\n\nThe function is applied lazily, invoked when needed. This is necessary for the returned map to be a view, but it means that the function will be applied many times for bulk operations like <xref uid=\"java.util.Map.containsValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map#containsValue\"></xref> and `Map.toString()`. For this to perform well, `function` should be fast. To avoid lazy evaluation when the returned map doesn't need to be a view, copy the returned map into a new map of your choosing."
  parameters:
  - name: "fromMap"
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V1?alt=V1&text=V1\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "function"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super V1?alt=? super V1&text=? super V1\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static SortedMap<K,V2> <K,V1,V2>transformValues(SortedMap<K,V1> fromMap, Function<? super V1,V2> function)"
  returns:
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
