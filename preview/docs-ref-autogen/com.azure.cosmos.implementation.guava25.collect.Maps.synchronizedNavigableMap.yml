### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.synchronizedNavigableMap*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap"
name: "<K,V>synchronizedNavigableMap"
nameWithType: "Maps.<K,V>synchronizedNavigableMap"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap(java.util.NavigableMap<K,V>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  name: "<K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  nameWithType: "Maps.<K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  summary: "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that **all** access to the backing navigable map is accomplished through the returned navigable map (or its views).\n\nIt is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its `descendingMap`, `subMap`, `headMap` or `tailMap` views.\n\n```java\nNavigableMap map = synchronizedNavigableMap(new TreeMap());\n\n // Needn't be in synchronized block\n NavigableSet set = map.navigableKeySet();\n\n synchronized (map) { // Synchronizing on map, not set!\n   Iterator it = set.iterator(); // Must be in synchronized block\n   while (it.hasNext()) {\n     foo(it.next());\n   }\n }\n```\n\nor:\n\n```java\nNavigableMap map = synchronizedNavigableMap(new TreeMap());\n NavigableMap map2 = map.subMap(foo, false, bar, true);\n\n // Needn't be in synchronized block\n NavigableSet set2 = map2.descendingKeySet();\n\n synchronized (map) { // Synchronizing on map, not map2 or set2!\n   Iterator it = set2.iterator(); // Must be in synchronized block\n   while (it.hasNext()) {\n     foo(it.next());\n   }\n }\n```\n\nFailure to follow this advice may result in non-deterministic behavior.\n\nThe returned navigable map will be serializable if the specified navigable map is serializable."
  parameters:
  - description: "the navigable map to be \"wrapped\" in a synchronized navigable map."
    name: "navigableMap"
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static NavigableMap<K,V> <K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  returns:
    description: "a synchronized view of the specified navigable map."
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
