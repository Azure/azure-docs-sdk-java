### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Streams
  id: Streams
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiFunction<? super A,? super B,R>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiConsumer<? super A,? super B>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(java.util.stream.DoubleStream,com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex<R>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(java.util.stream.IntStream,com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex<R>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(java.util.stream.LongStream,com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex<R>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T,R>mapWithIndex(java.util.stream.Stream<T>,com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex<? super T,? extends R>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat(java.util.stream.Stream<? extends T>...)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>findLast(java.util.stream.Stream<T>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(com.azure.cosmos.implementation.guava25.base.Optional<T>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.lang.Iterable<T>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.util.Collection<T>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.util.Iterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.util.Optional<T>)
  - com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex
  - com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex
  - com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex
  - com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex
  - com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.DoubleStream...)
  - com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.IntStream...)
  - com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.LongStream...)
  - com.azure.cosmos.implementation.guava25.collect.Streams.findLast(java.util.stream.DoubleStream)
  - com.azure.cosmos.implementation.guava25.collect.Streams.findLast(java.util.stream.IntStream)
  - com.azure.cosmos.implementation.guava25.collect.Streams.findLast(java.util.stream.LongStream)
  - com.azure.cosmos.implementation.guava25.collect.Streams.stream(java.util.OptionalDouble)
  - com.azure.cosmos.implementation.guava25.collect.Streams.stream(java.util.OptionalInt)
  - com.azure.cosmos.implementation.guava25.collect.Streams.stream(java.util.OptionalLong)
  langs:
  - java
  name: Streams
  nameWithType: Streams
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Static utility methods related to `Stream` instances.
  syntax:
    content: public final class Streams
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiFunction<? super A,? super B,R>)
  id: <A,B,R>zip(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiFunction<? super A,? super B,R>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  nameWithType: Streams.<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.zip*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a stream in which each element is the result of passing the corresponding elementY of each of `streamA` and `streamB` to `function`.


    For example:


    ```java

    Streams.zip(
       Stream.of("foo1", "foo2", "foo3"),
       Stream.of("bar1", "bar2"),
       (arg1, arg2) -> arg1 + ":" + arg2)
    ```


    will return `Stream.of("foo1:bar1", "foo2:bar2")`.


    The resulting stream will only be as long as the shorter of the two input streams; if one stream is longer, its extra elements will be ignored.


    Note that if you are calling <xref uid="java.util.stream.Stream.forEach" data-throw-if-not-resolved="false">Stream#forEach</xref> on the resulting stream, you might want to consider using <xref uid="com.azure.cosmos.implementation.guava25.collect.Streams.forEachPair" data-throw-if-not-resolved="false">#forEachPair</xref> instead of this method.


    **Performance note:** The resulting stream is not [efficiently splittable][]. This may harm parallel performance.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static Stream<R> <A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
    parameters:
    - id: streamA
      type: java.util.stream.Stream<A>
    - id: streamB
      type: java.util.stream.Stream<B>
    - id: function
      type: java.util.function.BiFunction<? super A,? super B,R>
    return:
      type: java.util.stream.Stream<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiConsumer<? super A,? super B>)
  id: <A,B>forEachPair(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiConsumer<? super A,? super B>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)
  nameWithType: Streams.<A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.forEachPair*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Invokes `consumer` once for each pair of *corresponding* elements in `streamA` and `streamB`. If one stream is longer than the other, the extra elements are silently ignored. Elements passed to the consumer are guaranteed to come from the same position in their respective source streams. For example:


    ```java

    Streams.forEachPair(
       Stream.of("foo1", "foo2", "foo3"),
       Stream.of("bar1", "bar2"),
       (arg1, arg2) -> System.out.println(arg1 + ":" + arg2)
    ```


    will print:


    ```java

    foo1:bar1
     foo2:bar2
    ```


    **Warning:** If either supplied stream is a parallel stream, the same correspondence between elements will be made, but the order in which those pairs of elements are passed to the consumer is *not* defined.


    Note that many usages of this method can be replaced with simpler calls to <xref uid="com.azure.cosmos.implementation.guava25.collect.Streams.zip" data-throw-if-not-resolved="false">#zip</xref>. This method behaves equivalently to <xref uid="com.azure.cosmos.implementation.guava25.collect.Streams.zip" data-throw-if-not-resolved="false">zipping</xref> the stream elements into temporary pair objects and then using <xref uid="java.util.stream.Stream.forEach" data-throw-if-not-resolved="false">Stream#forEach</xref> on that stream.
  syntax:
    content: public static void <A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)
    parameters:
    - id: streamA
      type: java.util.stream.Stream<A>
    - id: streamB
      type: java.util.stream.Stream<B>
    - id: consumer
      type: java.util.function.BiConsumer<? super A,? super B>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(java.util.stream.DoubleStream,com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex<R>)
  id: <R>mapWithIndex(java.util.stream.DoubleStream,com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex<R>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <R>mapWithIndex(DoubleStream stream, Streams.DoubleFunctionWithIndex<R> function)
  nameWithType: Streams.<R>mapWithIndex(DoubleStream stream, Streams.DoubleFunctionWithIndex<R> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(DoubleStream stream, Streams.DoubleFunctionWithIndex<R> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.mapWithIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a stream consisting of the results of applying the given function to the elements of `stream` and their indexes in the stream. For example,


    ```java

    mapWithIndex(
         DoubleStream.of(0, 1, 2),
         (x, index) -> x + ":" + index)
    ```


    ...would return `Stream.of("0.0:0", "1.0:1", "2.0:2")`.


    The resulting stream is [efficiently splittable][] if and only if `stream` was efficiently splittable and its underlying spliterator reported <xref uid="java.util.Spliterator.SUBSIZED" data-throw-if-not-resolved="false">Spliterator#SUBSIZED</xref>. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list.


    The order of the resulting stream is defined if and only if the order of the original stream was defined.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static Stream<R> <R>mapWithIndex(DoubleStream stream, Streams.DoubleFunctionWithIndex<R> function)
    parameters:
    - id: stream
      type: java.util.stream.DoubleStream
    - id: function
      type: com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex<R>
    return:
      type: java.util.stream.Stream<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(java.util.stream.IntStream,com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex<R>)
  id: <R>mapWithIndex(java.util.stream.IntStream,com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex<R>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <R>mapWithIndex(IntStream stream, Streams.IntFunctionWithIndex<R> function)
  nameWithType: Streams.<R>mapWithIndex(IntStream stream, Streams.IntFunctionWithIndex<R> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(IntStream stream, Streams.IntFunctionWithIndex<R> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.mapWithIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a stream consisting of the results of applying the given function to the elements of `stream` and their indexes in the stream. For example,


    ```java

    mapWithIndex(
         IntStream.of(0, 1, 2),
         (i, index) -> i + ":" + index)
    ```


    ...would return `Stream.of("0:0", "1:1", "2:2")`.


    The resulting stream is [efficiently splittable][] if and only if `stream` was efficiently splittable and its underlying spliterator reported <xref uid="java.util.Spliterator.SUBSIZED" data-throw-if-not-resolved="false">Spliterator#SUBSIZED</xref>. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list.


    The order of the resulting stream is defined if and only if the order of the original stream was defined.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static Stream<R> <R>mapWithIndex(IntStream stream, Streams.IntFunctionWithIndex<R> function)
    parameters:
    - id: stream
      type: java.util.stream.IntStream
    - id: function
      type: com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex<R>
    return:
      type: java.util.stream.Stream<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(java.util.stream.LongStream,com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex<R>)
  id: <R>mapWithIndex(java.util.stream.LongStream,com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex<R>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <R>mapWithIndex(LongStream stream, Streams.LongFunctionWithIndex<R> function)
  nameWithType: Streams.<R>mapWithIndex(LongStream stream, Streams.LongFunctionWithIndex<R> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<R>mapWithIndex(LongStream stream, Streams.LongFunctionWithIndex<R> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.mapWithIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a stream consisting of the results of applying the given function to the elements of `stream` and their indexes in the stream. For example,


    ```java

    mapWithIndex(
         LongStream.of(0, 1, 2),
         (i, index) -> i + ":" + index)
    ```


    ...would return `Stream.of("0:0", "1:1", "2:2")`.


    The resulting stream is [efficiently splittable][] if and only if `stream` was efficiently splittable and its underlying spliterator reported <xref uid="java.util.Spliterator.SUBSIZED" data-throw-if-not-resolved="false">Spliterator#SUBSIZED</xref>. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list.


    The order of the resulting stream is defined if and only if the order of the original stream was defined.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static Stream<R> <R>mapWithIndex(LongStream stream, Streams.LongFunctionWithIndex<R> function)
    parameters:
    - id: stream
      type: java.util.stream.LongStream
    - id: function
      type: com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex<R>
    return:
      type: java.util.stream.Stream<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T,R>mapWithIndex(java.util.stream.Stream<T>,com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex<? super T,? extends R>)
  id: <T,R>mapWithIndex(java.util.stream.Stream<T>,com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex<? super T,? extends R>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T,R>mapWithIndex(Stream<T> stream, Streams.FunctionWithIndex<? super T,? extends R> function)
  nameWithType: Streams.<T,R>mapWithIndex(Stream<T> stream, Streams.FunctionWithIndex<? super T,? extends R> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T,R>mapWithIndex(Stream<T> stream, Streams.FunctionWithIndex<? super T,? extends R> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.mapWithIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a stream consisting of the results of applying the given function to the elements of `stream` and their indices in the stream. For example,


    ```java

    mapWithIndex(
         Stream.of("a", "b", "c"),
         (str, index) -> str + ":" + index)
    ```


    would return `Stream.of("a:0", "b:1", "c:2")`.


    The resulting stream is [efficiently splittable][] if and only if `stream` was efficiently splittable and its underlying spliterator reported <xref uid="java.util.Spliterator.SUBSIZED" data-throw-if-not-resolved="false">Spliterator#SUBSIZED</xref>. This is generally the case if the underlying stream comes from a data structure supporting efficient indexed random access, typically an array or list.


    The order of the resulting stream is defined if and only if the order of the original stream was defined.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static Stream<R> <T,R>mapWithIndex(Stream<T> stream, Streams.FunctionWithIndex<? super T,? extends R> function)
    parameters:
    - id: stream
      type: java.util.stream.Stream<T>
    - id: function
      type: com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex<? super T,? extends R>
    return:
      type: java.util.stream.Stream<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat(java.util.stream.Stream<? extends T>...)
  id: <T>concat(java.util.stream.Stream<? extends T>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>concat(Stream<? extends T>[] streams)
  nameWithType: Streams.<T>concat(Stream<? extends T>[] streams)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat(Stream<? extends T>[] streams)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.


    This is equivalent to `Stream.of(streams).flatMap(stream -> stream)`, but the returned stream may perform better.
  syntax:
    content: public static Stream<T> <T>concat(Stream<? extends T>[] streams)
    parameters:
    - id: streams
      type: java.util.stream.Stream<? extends T>[]
    return:
      type: java.util.stream.Stream<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>findLast(java.util.stream.Stream<T>)
  id: <T>findLast(java.util.stream.Stream<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>findLast(Stream<T> stream)
  nameWithType: Streams.<T>findLast(Stream<T> stream)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>findLast(Stream<T> stream)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.findLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the last element of the specified stream, or <xref uid="java.util.Optional.empty" data-throw-if-not-resolved="false">java.util.Optional#empty</xref> if the stream is empty.


    Equivalent to `stream.reduce((a, b) -> b)`, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on [efficiently splittable][] streams.


    If the stream has nondeterministic order, this has equivalent semantics to <xref uid="java.util.stream.Stream.findAny" data-throw-if-not-resolved="false">Stream#findAny</xref> (which you might as well use).



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static Optional<T> <T>findLast(Stream<T> stream)
    parameters:
    - id: stream
      type: java.util.stream.Stream<T>
    return:
      type: java.util.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(com.azure.cosmos.implementation.guava25.base.Optional<T>)
  id: <T>stream(com.azure.cosmos.implementation.guava25.base.Optional<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>stream(Optional<T> optional)
  nameWithType: Streams.<T>stream(Optional<T> optional)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(Optional<T> optional)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: If a value is present in `optional`, returns a stream containing only that element, otherwise returns an empty stream.
  syntax:
    content: public static Stream<T> <T>stream(Optional<T> optional)
    parameters:
    - id: optional
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
    return:
      type: java.util.stream.Stream<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.lang.Iterable<T>)
  id: <T>stream(java.lang.Iterable<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>stream(Iterable<T> iterable)
  nameWithType: Streams.<T>stream(Iterable<T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(Iterable<T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a sequential <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of the contents of `iterable`, delegating to <xref uid="java.util.Collection.stream" data-throw-if-not-resolved="false">Collection#stream</xref> if possible.
  syntax:
    content: public static Stream<T> <T>stream(Iterable<T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    return:
      type: java.util.stream.Stream<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.util.Collection<T>)
  id: <T>stream(java.util.Collection<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>stream(Collection<T> collection)
  nameWithType: Streams.<T>stream(Collection<T> collection)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(Collection<T> collection)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns <xref uid="java.util.Collection.stream" data-throw-if-not-resolved="false">Collection#stream</xref>.
  syntax:
    content: public static Stream<T> <T>stream(Collection<T> collection)
    parameters:
    - id: collection
      type: java.util.Collection<T>
    return:
      type: java.util.stream.Stream<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.util.Iterator<T>)
  id: <T>stream(java.util.Iterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>stream(Iterator<T> iterator)
  nameWithType: Streams.<T>stream(Iterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(Iterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a sequential <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> of the remaining contents of `iterator`. Do not use `iterator` directly after passing it to this method.
  syntax:
    content: public static Stream<T> <T>stream(Iterator<T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    return:
      type: java.util.stream.Stream<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(java.util.Optional<T>)
  id: <T>stream(java.util.Optional<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: <T>stream(Optional<T> optional)
  nameWithType: Streams.<T>stream(Optional<T> optional)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream(Optional<T> optional)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    If a value is present in `optional`, returns a stream containing only that element, otherwise returns an empty stream.


    **Java 9 users:** use `optional.stream()` instead.
  syntax:
    content: public static Stream<T> <T>stream(Optional<T> optional)
    parameters:
    - id: optional
      type: java.util.Optional<T>
    return:
      type: java.util.stream.Stream<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.Streams()
  id: Streams()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: Streams()
  nameWithType: Streams.Streams()
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.Streams()
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.Streams*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Streams()
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.DoubleStream...)
  id: concat(java.util.stream.DoubleStream...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: concat(DoubleStream[] streams)
  nameWithType: Streams.concat(DoubleStream[] streams)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.concat(DoubleStream[] streams)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.DoubleStream" data-throw-if-not-resolved="false">DoubleStream</xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.


    This is equivalent to `Stream.of(streams).flatMapToDouble(stream -> stream)`, but the returned stream may perform better.
  syntax:
    content: public static DoubleStream concat(DoubleStream[] streams)
    parameters:
    - id: streams
      type: java.util.stream.DoubleStream[]
    return:
      type: java.util.stream.DoubleStream
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.IntStream...)
  id: concat(java.util.stream.IntStream...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: concat(IntStream[] streams)
  nameWithType: Streams.concat(IntStream[] streams)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.concat(IntStream[] streams)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="java.util.stream.IntStream" data-throw-if-not-resolved="false">IntStream</xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.


    This is equivalent to `Stream.of(streams).flatMapToInt(stream -> stream)`, but the returned stream may perform better.
  syntax:
    content: public static IntStream concat(IntStream[] streams)
    parameters:
    - id: streams
      type: java.util.stream.IntStream[]
    return:
      type: java.util.stream.IntStream
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.LongStream...)
  id: concat(java.util.stream.LongStream...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: concat(LongStream[] streams)
  nameWithType: Streams.concat(LongStream[] streams)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.concat(LongStream[] streams)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.LongStream" data-throw-if-not-resolved="false">LongStream</xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.


    This is equivalent to `Stream.of(streams).flatMapToLong(stream -> stream)`, but the returned stream may perform better.
  syntax:
    content: public static LongStream concat(LongStream[] streams)
    parameters:
    - id: streams
      type: java.util.stream.LongStream[]
    return:
      type: java.util.stream.LongStream
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.findLast(java.util.stream.DoubleStream)
  id: findLast(java.util.stream.DoubleStream)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: findLast(DoubleStream stream)
  nameWithType: Streams.findLast(DoubleStream stream)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.findLast(DoubleStream stream)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.findLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the last element of the specified stream, or <xref uid="java.util.OptionalDouble.empty" data-throw-if-not-resolved="false">OptionalDouble#empty</xref> if the stream is empty.


    Equivalent to `stream.reduce((a, b) -> b)`, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on [efficiently splittable][] streams.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static OptionalDouble findLast(DoubleStream stream)
    parameters:
    - id: stream
      type: java.util.stream.DoubleStream
    return:
      type: java.util.OptionalDouble
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.findLast(java.util.stream.IntStream)
  id: findLast(java.util.stream.IntStream)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: findLast(IntStream stream)
  nameWithType: Streams.findLast(IntStream stream)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.findLast(IntStream stream)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.findLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the last element of the specified stream, or <xref uid="java.util.OptionalInt.empty" data-throw-if-not-resolved="false">OptionalInt#empty</xref> if the stream is empty.


    Equivalent to `stream.reduce((a, b) -> b)`, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on [efficiently splittable][] streams.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static OptionalInt findLast(IntStream stream)
    parameters:
    - id: stream
      type: java.util.stream.IntStream
    return:
      type: java.util.OptionalInt
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.findLast(java.util.stream.LongStream)
  id: findLast(java.util.stream.LongStream)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: findLast(LongStream stream)
  nameWithType: Streams.findLast(LongStream stream)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.findLast(LongStream stream)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.findLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the last element of the specified stream, or <xref uid="java.util.OptionalLong.empty" data-throw-if-not-resolved="false">OptionalLong#empty</xref> if the stream is empty.


    Equivalent to `stream.reduce((a, b) -> b)`, but may perform significantly better. This method's runtime will be between O(log n) and O(n), performing better on [efficiently splittable][] streams.



    [efficiently splittable]: http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html
  syntax:
    content: public static OptionalLong findLast(LongStream stream)
    parameters:
    - id: stream
      type: java.util.stream.LongStream
    return:
      type: java.util.OptionalLong
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.stream(java.util.OptionalDouble)
  id: stream(java.util.OptionalDouble)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: stream(OptionalDouble optional)
  nameWithType: Streams.stream(OptionalDouble optional)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.stream(OptionalDouble optional)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    If a value is present in `optional`, returns a stream containing only that element, otherwise returns an empty stream.


    **Java 9 users:** use `optional.stream()` instead.
  syntax:
    content: public static DoubleStream stream(OptionalDouble optional)
    parameters:
    - id: optional
      type: java.util.OptionalDouble
    return:
      type: java.util.stream.DoubleStream
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.stream(java.util.OptionalInt)
  id: stream(java.util.OptionalInt)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: stream(OptionalInt optional)
  nameWithType: Streams.stream(OptionalInt optional)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.stream(OptionalInt optional)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    If a value is present in `optional`, returns a stream containing only that element, otherwise returns an empty stream.


    **Java 9 users:** use `optional.stream()` instead.
  syntax:
    content: public static IntStream stream(OptionalInt optional)
    parameters:
    - id: optional
      type: java.util.OptionalInt
    return:
      type: java.util.stream.IntStream
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.stream(java.util.OptionalLong)
  id: stream(java.util.OptionalLong)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Streams
  langs:
  - java
  name: stream(OptionalLong optional)
  nameWithType: Streams.stream(OptionalLong optional)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.stream(OptionalLong optional)
  overload: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    If a value is present in `optional`, returns a stream containing only that element, otherwise returns an empty stream.


    **Java 9 users:** use `optional.stream()` instead.
  syntax:
    content: public static LongStream stream(OptionalLong optional)
    parameters:
    - id: optional
      type: java.util.OptionalLong
    return:
      type: java.util.stream.LongStream
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.Streams*
  name: Streams
  nameWithType: Streams.Streams
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.Streams
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Stream<T>
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.stream*
  name: <T>stream
  nameWithType: Streams.<T>stream
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>stream
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<T>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<T>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.Optional<T>
  spec.java:
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.OptionalInt
  spec.java:
  - uid: java.util.OptionalInt
    name: OptionalInt
    fullName: java.util.OptionalInt
- uid: java.util.stream.IntStream
  spec.java:
  - uid: java.util.stream.IntStream
    name: IntStream
    fullName: java.util.stream.IntStream
- uid: java.util.OptionalLong
  spec.java:
  - uid: java.util.OptionalLong
    name: OptionalLong
    fullName: java.util.OptionalLong
- uid: java.util.stream.LongStream
  spec.java:
  - uid: java.util.stream.LongStream
    name: LongStream
    fullName: java.util.stream.LongStream
- uid: java.util.OptionalDouble
  spec.java:
  - uid: java.util.OptionalDouble
    name: OptionalDouble
    fullName: java.util.OptionalDouble
- uid: java.util.stream.DoubleStream
  spec.java:
  - uid: java.util.stream.DoubleStream
    name: DoubleStream
    fullName: java.util.stream.DoubleStream
- uid: java.util.stream.Stream<? extends T>[]
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.concat*
  name: <T>concat
  nameWithType: Streams.<T>concat
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.stream.IntStream[]
  spec.java:
  - uid: java.util.stream.IntStream
    name: IntStream
    fullName: java.util.stream.IntStream
  - name: '[]'
    fullName: '[]'
- uid: java.util.stream.LongStream[]
  spec.java:
  - uid: java.util.stream.LongStream
    name: LongStream
    fullName: java.util.stream.LongStream
  - name: '[]'
    fullName: '[]'
- uid: java.util.stream.DoubleStream[]
  spec.java:
  - uid: java.util.stream.DoubleStream
    name: DoubleStream
    fullName: java.util.stream.DoubleStream
  - name: '[]'
    fullName: '[]'
- uid: java.util.stream.Stream<A>
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: A
    name: A
    fullName: A
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Stream<B>
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
- uid: java.util.function.BiFunction<? super A,? super B,R>
  spec.java:
  - uid: java.util.function.BiFunction
    name: BiFunction
    fullName: java.util.function.BiFunction
  - name: <
    fullName: <
  - uid: '? super A'
    name: '? super A'
    fullName: '? super A'
  - name: ','
    fullName: ','
  - uid: '? super B'
    name: '? super B'
    fullName: '? super B'
  - name: ','
    fullName: ','
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Stream<R>
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.zip*
  name: <A,B,R>zip
  nameWithType: Streams.<A,B,R>zip
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiConsumer<? super A,? super B>
  spec.java:
  - uid: java.util.function.BiConsumer
    name: BiConsumer
    fullName: java.util.function.BiConsumer
  - name: <
    fullName: <
  - uid: '? super A'
    name: '? super A'
    fullName: '? super A'
  - name: ','
    fullName: ','
  - uid: '? super B'
    name: '? super B'
    fullName: '? super B'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.forEachPair*
  name: <A,B>forEachPair
  nameWithType: Streams.<A,B>forEachPair
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex<? super T,? extends R>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex
    name: FunctionWithIndex
    fullName: com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends R'
    name: '? extends R'
    fullName: '? extends R'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.mapWithIndex*
  name: <T,R>mapWithIndex
  nameWithType: Streams.<T,R>mapWithIndex
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T,R>mapWithIndex
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex<R>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex
    name: IntFunctionWithIndex
    fullName: com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex<R>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex
    name: LongFunctionWithIndex
    fullName: com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex<R>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex
    name: DoubleFunctionWithIndex
    fullName: com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.findLast*
  name: <T>findLast
  nameWithType: Streams.<T>findLast
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<T>findLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex
  name: Streams.DoubleFunctionWithIndex<R>
  nameWithType: Streams.DoubleFunctionWithIndex<R>
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.DoubleFunctionWithIndex<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex
  name: Streams.FunctionWithIndex<T,R>
  nameWithType: Streams.FunctionWithIndex<T,R>
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.FunctionWithIndex<T,R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex
  name: Streams.IntFunctionWithIndex<R>
  nameWithType: Streams.IntFunctionWithIndex<R>
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.IntFunctionWithIndex<R>
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex
  name: Streams.LongFunctionWithIndex<R>
  nameWithType: Streams.LongFunctionWithIndex<R>
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.LongFunctionWithIndex<R>
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.stream.Stream
  name: Stream
  nameWithType: Stream
  fullName: java.util.stream.Stream
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.base.Optional
  name: Optional
  nameWithType: Optional
  fullName: com.azure.cosmos.implementation.guava25.base.Optional
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
- uid: '? extends T>[]'
  name: '? extends T>[]'
  nameWithType: '? extends T>[]'
  fullName: '? extends T>[]'
- uid: A
  name: A
  nameWithType: A
  fullName: A
- uid: B
  name: B
  nameWithType: B
  fullName: B
- uid: '? super A,? super B,R'
  name: '? super A,? super B,R'
  nameWithType: '? super A,? super B,R'
  fullName: '? super A,? super B,R'
- uid: java.util.function.BiFunction
  name: BiFunction
  nameWithType: BiFunction
  fullName: java.util.function.BiFunction
- uid: R
  name: R
  nameWithType: R
  fullName: R
- uid: '? super A,? super B'
  name: '? super A,? super B'
  nameWithType: '? super A,? super B'
  fullName: '? super A,? super B'
- uid: java.util.function.BiConsumer
  name: BiConsumer
  nameWithType: BiConsumer
  fullName: java.util.function.BiConsumer
- uid: '? super T,? extends R'
  name: '? super T,? extends R'
  nameWithType: '? super T,? extends R'
  fullName: '? super T,? extends R'
