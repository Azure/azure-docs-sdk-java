### YamlMime:JavaType
uid: "com.azure.cosmos.models.CosmosContainerProperties"
fullName: "com.azure.cosmos.models.CosmosContainerProperties"
name: "CosmosContainerProperties"
nameWithType: "CosmosContainerProperties"
summary: "Represents a container in the Azure Cosmos DB database service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CosmosContainerProperties"
constructors:
- uid: "com.azure.cosmos.models.CosmosContainerProperties.CosmosContainerProperties(java.lang.String,com.azure.cosmos.models.PartitionKeyDefinition)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  name: "CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  summary: "Constructor"
  parameters:
  - description: "id of the container"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <xref uid=\"com.azure.cosmos.models.PartitionKeyDefinition\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionKeyDefinition\"></xref>"
    name: "partitionKeyDefinition"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKeyDefinition?alt=com.azure.cosmos.models.PartitionKeyDefinition&text=PartitionKeyDefinition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties(String id, PartitionKeyDefinition partitionKeyDefinition)"
  desc: "Constructor"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.CosmosContainerProperties(java.lang.String,java.lang.String)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.CosmosContainerProperties(String id, String partitionKeyPath)"
  name: "CosmosContainerProperties(String id, String partitionKeyPath)"
  nameWithType: "CosmosContainerProperties.CosmosContainerProperties(String id, String partitionKeyPath)"
  summary: "Constructor"
  parameters:
  - description: "id of the Container"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "partition key path"
    name: "partitionKeyPath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties(String id, String partitionKeyPath)"
  desc: "Constructor"
methods:
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getAnalyticalStoreTimeToLiveInSeconds()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getAnalyticalStoreTimeToLiveInSeconds()"
  name: "getAnalyticalStoreTimeToLiveInSeconds()"
  nameWithType: "CosmosContainerProperties.getAnalyticalStoreTimeToLiveInSeconds()"
  summary: "Gets the analytical store time to live in seconds for items in a container from the Azure Cosmos DB service."
  syntax: "public Integer getAnalyticalStoreTimeToLiveInSeconds()"
  desc: "Gets the analytical store time to live in seconds for items in a container from the Azure Cosmos DB service. It is an optional property. A valid value must be either a nonzero positive integer, '-1', or 0. By default, AnalyticalStoreTimeToLive is set to 0 meaning the analytical store is turned off for the container; -1 means items in analytical store never expire. The unit of measurement is seconds. The maximum allowed value is 2147483647."
  returns:
    description: "analytical ttl"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getChangeFeedPolicy()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getChangeFeedPolicy()"
  name: "getChangeFeedPolicy()"
  nameWithType: "CosmosContainerProperties.getChangeFeedPolicy()"
  summary: "Gets the change<wbr>Feed<wbr>Policy for this container in the Azure Cosmos DB service."
  syntax: "public ChangeFeedPolicy getChangeFeedPolicy()"
  desc: "Gets the changeFeedPolicy for this container in the Azure Cosmos DB service."
  returns:
    description: "ChangeFeedPolicy"
    type: "<xref href=\"com.azure.cosmos.models.ChangeFeedPolicy?alt=com.azure.cosmos.models.ChangeFeedPolicy&text=ChangeFeedPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getClientEncryptionPolicy()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getClientEncryptionPolicy()"
  name: "getClientEncryptionPolicy()"
  nameWithType: "CosmosContainerProperties.getClientEncryptionPolicy()"
  summary: "Gets the Client<wbr>Encryption<wbr>Policy that is used for encrypting item fields"
  syntax: "public ClientEncryptionPolicy getClientEncryptionPolicy()"
  desc: "Gets the ClientEncryptionPolicy that is used for encrypting item fields"
  returns:
    description: "ClientEncryptionPolicy"
    type: "<xref href=\"com.azure.cosmos.models.ClientEncryptionPolicy?alt=com.azure.cosmos.models.ClientEncryptionPolicy&text=ClientEncryptionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getConflictResolutionPolicy()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getConflictResolutionPolicy()"
  name: "getConflictResolutionPolicy()"
  nameWithType: "CosmosContainerProperties.getConflictResolutionPolicy()"
  summary: "Gets the conflict<wbr>Resolution<wbr>Policy that is used for resolving conflicting writes on items in different regions, in a container in the Azure Cosmos DB service."
  syntax: "public ConflictResolutionPolicy getConflictResolutionPolicy()"
  desc: "Gets the conflictResolutionPolicy that is used for resolving conflicting writes on items in different regions, in a container in the Azure Cosmos DB service."
  returns:
    description: "ConflictResolutionPolicy"
    type: "<xref href=\"com.azure.cosmos.models.ConflictResolutionPolicy?alt=com.azure.cosmos.models.ConflictResolutionPolicy&text=ConflictResolutionPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  name: "getDefaultTimeToLiveInSeconds()"
  nameWithType: "CosmosContainerProperties.getDefaultTimeToLiveInSeconds()"
  summary: "Gets the container's default time-to-live value."
  syntax: "public Integer getDefaultTimeToLiveInSeconds()"
  desc: "Gets the container's default time-to-live value."
  returns:
    description: "the default time-to-live value in seconds."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getETag()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getETag()"
  name: "getETag()"
  nameWithType: "CosmosContainerProperties.getETag()"
  summary: "Get the entity tag associated with the resource."
  syntax: "public String getETag()"
  desc: "Get the entity tag associated with the resource. This is only relevant when getting response from the server."
  returns:
    description: "the e tag."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getId()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getId()"
  name: "getId()"
  nameWithType: "CosmosContainerProperties.getId()"
  summary: "Gets the name of the resource."
  syntax: "public String getId()"
  desc: "Gets the name of the resource."
  returns:
    description: "the name of the resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getIndexingPolicy()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getIndexingPolicy()"
  name: "getIndexingPolicy()"
  nameWithType: "CosmosContainerProperties.getIndexingPolicy()"
  summary: "Gets the container's indexing policy."
  syntax: "public IndexingPolicy getIndexingPolicy()"
  desc: "Gets the container's indexing policy."
  returns:
    description: "the indexing policy."
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getPartitionKeyDefinition()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getPartitionKeyDefinition()"
  name: "getPartitionKeyDefinition()"
  nameWithType: "CosmosContainerProperties.getPartitionKeyDefinition()"
  summary: "Gets the containers's partition key definition."
  syntax: "public PartitionKeyDefinition getPartitionKeyDefinition()"
  desc: "Gets the containers's partition key definition."
  returns:
    description: "the partition key definition."
    type: "<xref href=\"com.azure.cosmos.models.PartitionKeyDefinition?alt=com.azure.cosmos.models.PartitionKeyDefinition&text=PartitionKeyDefinition\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getResourceId()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getResourceId()"
  name: "getResourceId()"
  nameWithType: "CosmosContainerProperties.getResourceId()"
  summary: "Gets the ID associated with the resource."
  syntax: "public String getResourceId()"
  desc: "Gets the ID associated with the resource."
  returns:
    description: "the ID associated with the resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getTimestamp()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getTimestamp()"
  name: "getTimestamp()"
  nameWithType: "CosmosContainerProperties.getTimestamp()"
  summary: "Get the last modified timestamp associated with the resource."
  syntax: "public Instant getTimestamp()"
  desc: "Get the last modified timestamp associated with the resource. This is only relevant when getting response from the server."
  returns:
    description: "the timestamp."
    type: "<xref href=\"java.time.Instant?alt=java.time.Instant&text=Instant\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.getUniqueKeyPolicy()"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.getUniqueKeyPolicy()"
  name: "getUniqueKeyPolicy()"
  nameWithType: "CosmosContainerProperties.getUniqueKeyPolicy()"
  summary: "Gets the containers unique key policy"
  syntax: "public UniqueKeyPolicy getUniqueKeyPolicy()"
  desc: "Gets the containers unique key policy"
  returns:
    description: "the unique key policy"
    type: "<xref href=\"com.azure.cosmos.models.UniqueKeyPolicy?alt=com.azure.cosmos.models.UniqueKeyPolicy&text=UniqueKeyPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setAnalyticalStoreTimeToLiveInSeconds(java.lang.Integer)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setAnalyticalStoreTimeToLiveInSeconds(Integer timeToLive)"
  name: "setAnalyticalStoreTimeToLiveInSeconds(Integer timeToLive)"
  nameWithType: "CosmosContainerProperties.setAnalyticalStoreTimeToLiveInSeconds(Integer timeToLive)"
  summary: "Sets the analytical store time to live in seconds for items in a container from the Azure Cosmos DB service."
  parameters:
  - description: "the analytical store time to live in seconds."
    name: "timeToLive"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setAnalyticalStoreTimeToLiveInSeconds(Integer timeToLive)"
  desc: "Sets the analytical store time to live in seconds for items in a container from the Azure Cosmos DB service. It is an optional property. A valid value must be either a nonzero positive integer, '-1', or 0. By default, AnalyticalStoreTimeToLive is set to 0 meaning the analytical store is turned off for the container; -1 means items in analytical store never expire. The unit of measurement is seconds. The maximum allowed value is 2147483647."
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setChangeFeedPolicy(com.azure.cosmos.models.ChangeFeedPolicy)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setChangeFeedPolicy(ChangeFeedPolicy value)"
  name: "setChangeFeedPolicy(ChangeFeedPolicy value)"
  nameWithType: "CosmosContainerProperties.setChangeFeedPolicy(ChangeFeedPolicy value)"
  summary: "Sets the change<wbr>Feed<wbr>Policy for this container in the Azure Cosmos DB service."
  parameters:
  - description: "ChangeFeedPolicy to be used."
    name: "value"
    type: "<xref href=\"com.azure.cosmos.models.ChangeFeedPolicy?alt=com.azure.cosmos.models.ChangeFeedPolicy&text=ChangeFeedPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setChangeFeedPolicy(ChangeFeedPolicy value)"
  desc: "Sets the changeFeedPolicy for this container in the Azure Cosmos DB service."
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setClientEncryptionPolicy(com.azure.cosmos.models.ClientEncryptionPolicy)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setClientEncryptionPolicy(ClientEncryptionPolicy value)"
  name: "setClientEncryptionPolicy(ClientEncryptionPolicy value)"
  nameWithType: "CosmosContainerProperties.setClientEncryptionPolicy(ClientEncryptionPolicy value)"
  summary: "Sets the Client<wbr>Encryption<wbr>Policy that is used for encrypting item fields"
  parameters:
  - description: "ClientEncryptionPolicy to be used."
    name: "value"
    type: "<xref href=\"com.azure.cosmos.models.ClientEncryptionPolicy?alt=com.azure.cosmos.models.ClientEncryptionPolicy&text=ClientEncryptionPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setClientEncryptionPolicy(ClientEncryptionPolicy value)"
  desc: "Sets the ClientEncryptionPolicy that is used for encrypting item fields"
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setConflictResolutionPolicy(com.azure.cosmos.models.ConflictResolutionPolicy)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  name: "setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  nameWithType: "CosmosContainerProperties.setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  summary: "Sets the conflict<wbr>Resolution<wbr>Policy that is used for resolving conflicting writes on items in different regions, in a container in the Azure Cosmos DB service."
  parameters:
  - description: "ConflictResolutionPolicy to be used."
    name: "value"
    type: "<xref href=\"com.azure.cosmos.models.ConflictResolutionPolicy?alt=com.azure.cosmos.models.ConflictResolutionPolicy&text=ConflictResolutionPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setConflictResolutionPolicy(ConflictResolutionPolicy value)"
  desc: "Sets the conflictResolutionPolicy that is used for resolving conflicting writes on items in different regions, in a container in the Azure Cosmos DB service."
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setDefaultTimeToLiveInSeconds(java.lang.Integer)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  name: "setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  nameWithType: "CosmosContainerProperties.setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  summary: "Sets the container's default time-to-live value."
  parameters:
  - description: "the default time-to-live value in seconds."
    name: "timeToLive"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setDefaultTimeToLiveInSeconds(Integer timeToLive)"
  desc: "Sets the container's default time-to-live value.\n\nThe default time-to-live value on a container is an optional property. If set, the items within the container expires after the specified number of seconds since their last write time. The value of this property should be one of the following:\n\nnull - indicates evaluation of time-to-live is disabled and items within the container will never expire, regardless whether individual items have their time-to-live set.\n\nnonzero positive integer - indicates the default time-to-live value for all items within the container. This value can be overridden by individual items time-to-live value.\n\n\\-1 - indicates by default all items within the container never expire. This value can be overridden by individual items time-to-live value."
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setId(java.lang.String)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setId(String id)"
  name: "setId(String id)"
  nameWithType: "CosmosContainerProperties.setId(String id)"
  summary: "Sets the name of the resource."
  parameters:
  - description: "the name of the resource."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setId(String id)"
  desc: "Sets the name of the resource."
  returns:
    description: "the current instance of <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CosmosContainerProperties\"></xref>."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setIndexingPolicy(com.azure.cosmos.models.IndexingPolicy)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setIndexingPolicy(IndexingPolicy indexingPolicy)"
  name: "setIndexingPolicy(IndexingPolicy indexingPolicy)"
  nameWithType: "CosmosContainerProperties.setIndexingPolicy(IndexingPolicy indexingPolicy)"
  summary: "Sets the container's indexing policy"
  parameters:
  - description: "<xref uid=\"com.azure.cosmos.models.IndexingPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IndexingPolicy\"></xref> the indexing policy"
    name: "indexingPolicy"
    type: "<xref href=\"com.azure.cosmos.models.IndexingPolicy?alt=com.azure.cosmos.models.IndexingPolicy&text=IndexingPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setIndexingPolicy(IndexingPolicy indexingPolicy)"
  desc: "Sets the container's indexing policy"
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setPartitionKeyDefinition(com.azure.cosmos.models.PartitionKeyDefinition)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  name: "setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  nameWithType: "CosmosContainerProperties.setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  summary: "Sets the containers's partition key definition."
  parameters:
  - description: "the partition key definition."
    name: "partitionKeyDefinition"
    type: "<xref href=\"com.azure.cosmos.models.PartitionKeyDefinition?alt=com.azure.cosmos.models.PartitionKeyDefinition&text=PartitionKeyDefinition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setPartitionKeyDefinition(PartitionKeyDefinition partitionKeyDefinition)"
  desc: "Sets the containers's partition key definition."
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.models.CosmosContainerProperties.setUniqueKeyPolicy(com.azure.cosmos.models.UniqueKeyPolicy)"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties.setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  name: "setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  nameWithType: "CosmosContainerProperties.setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  summary: "Sets the Containers unique key policy"
  parameters:
  - description: "the unique key policy"
    name: "uniqueKeyPolicy"
    type: "<xref href=\"com.azure.cosmos.models.UniqueKeyPolicy?alt=com.azure.cosmos.models.UniqueKeyPolicy&text=UniqueKeyPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CosmosContainerProperties setUniqueKeyPolicy(UniqueKeyPolicy uniqueKeyPolicy)"
  desc: "Sets the Containers unique key policy"
  returns:
    description: "the CosmosContainerProperties."
    type: "<xref href=\"com.azure.cosmos.models.CosmosContainerProperties?alt=com.azure.cosmos.models.CosmosContainerProperties&text=CosmosContainerProperties\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents a container in the Azure Cosmos DB database service. A cosmos container is a named logical container for cosmos items.\n\nA database may contain zero or more named containers and each container consists of zero or more JSON items. Being schema-free, the items in a container do not need to share the same structure or fields. Since containers are application resources, they can be authorized using either the master key or resource keys."
metadata: {}
package: "com.azure.cosmos.models"
artifact: com.azure:azure-cosmos:4.26.0-beta.1
