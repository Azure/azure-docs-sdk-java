### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.node.DecimalNode
  id: DecimalNode
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node
  children:
  - com.fasterxml.jackson.databind.node.DecimalNode.DecimalNode(java.math.BigDecimal)
  - com.fasterxml.jackson.databind.node.DecimalNode.ZERO
  - com.fasterxml.jackson.databind.node.DecimalNode._value
  - com.fasterxml.jackson.databind.node.DecimalNode.asText()
  - com.fasterxml.jackson.databind.node.DecimalNode.asToken()
  - com.fasterxml.jackson.databind.node.DecimalNode.bigIntegerValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.canConvertToInt()
  - com.fasterxml.jackson.databind.node.DecimalNode.canConvertToLong()
  - com.fasterxml.jackson.databind.node.DecimalNode.decimalValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.doubleValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.equals(java.lang.Object)
  - com.fasterxml.jackson.databind.node.DecimalNode.floatValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.hashCode()
  - com.fasterxml.jackson.databind.node.DecimalNode.intValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.isBigDecimal()
  - com.fasterxml.jackson.databind.node.DecimalNode.isFloatingPointNumber()
  - com.fasterxml.jackson.databind.node.DecimalNode.longValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.numberType()
  - com.fasterxml.jackson.databind.node.DecimalNode.numberValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.node.DecimalNode.shortValue()
  - com.fasterxml.jackson.databind.node.DecimalNode.valueOf(java.math.BigDecimal)
  langs:
  - java
  name: DecimalNode
  nameWithType: DecimalNode
  fullName: com.fasterxml.jackson.databind.node.DecimalNode
  type: Class
  package: com.fasterxml.jackson.databind.node
  summary: Numeric node that contains values that do not fit in simple integer (int, long) or floating point (double) values.
  syntax:
    content: public class DecimalNode extends NumericNode
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializable.Base
  - com.fasterxml.jackson.databind.JsonNode
  - com.fasterxml.jackson.databind.node.BaseJsonNode
  - com.fasterxml.jackson.databind.node.ValueNode
  - com.fasterxml.jackson.databind.node.NumericNode
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.JsonNode.<T>_this()
  - com.fasterxml.jackson.databind.JsonNode.<T>require()
  - com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  - com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.asBoolean()
  - com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
  - com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.binaryValue()
  - com.fasterxml.jackson.databind.JsonNode.booleanValue()
  - com.fasterxml.jackson.databind.JsonNode.elements()
  - com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
  - com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  - com.fasterxml.jackson.databind.JsonNode.fieldNames()
  - com.fasterxml.jackson.databind.JsonNode.fields()
  - com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.floatValue()
  - com.fasterxml.jackson.databind.JsonNode.isArray()
  - com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  - com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  - com.fasterxml.jackson.databind.JsonNode.isBinary()
  - com.fasterxml.jackson.databind.JsonNode.isBoolean()
  - com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  - com.fasterxml.jackson.databind.JsonNode.isDouble()
  - com.fasterxml.jackson.databind.JsonNode.isFloat()
  - com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  - com.fasterxml.jackson.databind.JsonNode.isInt()
  - com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  - com.fasterxml.jackson.databind.JsonNode.isLong()
  - com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  - com.fasterxml.jackson.databind.JsonNode.isNull()
  - com.fasterxml.jackson.databind.JsonNode.isNumber()
  - com.fasterxml.jackson.databind.JsonNode.isObject()
  - com.fasterxml.jackson.databind.JsonNode.isPojo()
  - com.fasterxml.jackson.databind.JsonNode.isShort()
  - com.fasterxml.jackson.databind.JsonNode.isTextual()
  - com.fasterxml.jackson.databind.JsonNode.isValueNode()
  - com.fasterxml.jackson.databind.JsonNode.iterator()
  - com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.shortValue()
  - com.fasterxml.jackson.databind.JsonNode.size()
  - com.fasterxml.jackson.databind.JsonNode.textValue()
  - com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.findPath(java.lang.String)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.hashCode()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.required(int)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.required(java.lang.String)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.toString()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.traverse()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.traverse(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.databind.node.NumericNode.asDouble()
  - com.fasterxml.jackson.databind.node.NumericNode.asDouble(double)
  - com.fasterxml.jackson.databind.node.NumericNode.asInt()
  - com.fasterxml.jackson.databind.node.NumericNode.asInt(int)
  - com.fasterxml.jackson.databind.node.NumericNode.asLong()
  - com.fasterxml.jackson.databind.node.NumericNode.asLong(long)
  - com.fasterxml.jackson.databind.node.NumericNode.asText()
  - com.fasterxml.jackson.databind.node.NumericNode.bigIntegerValue()
  - com.fasterxml.jackson.databind.node.NumericNode.canConvertToInt()
  - com.fasterxml.jackson.databind.node.NumericNode.canConvertToLong()
  - com.fasterxml.jackson.databind.node.NumericNode.decimalValue()
  - com.fasterxml.jackson.databind.node.NumericNode.doubleValue()
  - com.fasterxml.jackson.databind.node.NumericNode.getNodeType()
  - com.fasterxml.jackson.databind.node.NumericNode.intValue()
  - com.fasterxml.jackson.databind.node.NumericNode.isNaN()
  - com.fasterxml.jackson.databind.node.NumericNode.longValue()
  - com.fasterxml.jackson.databind.node.NumericNode.numberType()
  - com.fasterxml.jackson.databind.node.NumericNode.numberValue()
  - com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy()
  - com.fasterxml.jackson.databind.node.ValueNode._at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.node.ValueNode.asToken()
  - com.fasterxml.jackson.databind.node.ValueNode.findParent(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.node.ValueNode.findValue(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  - com.fasterxml.jackson.databind.node.ValueNode.get(int)
  - com.fasterxml.jackson.databind.node.ValueNode.get(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.has(int)
  - com.fasterxml.jackson.databind.node.ValueNode.has(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(int)
  - com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.isEmpty()
  - com.fasterxml.jackson.databind.node.ValueNode.path(int)
  - com.fasterxml.jackson.databind.node.ValueNode.path(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.node.DecimalNode.DecimalNode(java.math.BigDecimal)
  id: DecimalNode(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: DecimalNode(BigDecimal v)
  nameWithType: DecimalNode.DecimalNode(BigDecimal v)
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.DecimalNode(BigDecimal v)
  overload: com.fasterxml.jackson.databind.node.DecimalNode.DecimalNode*
  type: Constructor
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public DecimalNode(BigDecimal v)
    parameters:
    - id: v
      type: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.node.DecimalNode.ZERO
  id: ZERO
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: ZERO
  nameWithType: DecimalNode.ZERO
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.ZERO
  type: Field
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public static final DecimalNode ZERO
    return:
      type: com.fasterxml.jackson.databind.node.DecimalNode
- uid: com.fasterxml.jackson.databind.node.DecimalNode._value
  id: _value
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: _value
  nameWithType: DecimalNode._value
  fullName: com.fasterxml.jackson.databind.node.DecimalNode._value
  type: Field
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected final BigDecimal _value
    return:
      type: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.node.DecimalNode.asText()
  id: asText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: asText()
  nameWithType: DecimalNode.asText()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.asText()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.asText*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that will return a valid String representation of the container value, if the node is a value node (method <xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isValueNode" data-throw-if-not-resolved="false">#isValueNode</xref> returns true), otherwise empty String.
  syntax:
    content: public String asText()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.node.DecimalNode.asToken()
  id: asToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: asToken()
  nameWithType: DecimalNode.asToken()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.asToken()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.asToken*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that can be used for efficient type detection when using stream abstraction for traversing nodes. Will return the first <xref uid="com.fasterxml.jackson.core.JsonToken" data-throw-if-not-resolved="false">JsonToken</xref> that equivalent stream event would produce (for most nodes there is just one token but for structured/container types multiple)
  syntax:
    content: public JsonToken asToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.node.DecimalNode.bigIntegerValue()
  id: bigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: bigIntegerValue()
  nameWithType: DecimalNode.bigIntegerValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.bigIntegerValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.bigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns integer value for this node (as <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref>), **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns `BigInteger.ZERO`.
  syntax:
    content: public BigInteger bigIntegerValue()
    return:
      type: java.math.BigInteger
- uid: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToInt()
  id: canConvertToInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: canConvertToInt()
  nameWithType: DecimalNode.canConvertToInt()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToInt()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToInt*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that can be used to check whether this node is a numeric node (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> would return true) AND its value fits within Java's 32-bit signed integer type, `int`. Note that floating-point numbers are convertible if the integral part fits without overflow (as per standard Java coercion rules)


    NOTE: this method does not consider possible value type conversion from JSON String into Number; so even if this method returns false, it is possible that <xref uid="com.fasterxml.jackson.databind.node.DecimalNode.asInt" data-throw-if-not-resolved="false">#asInt</xref> could still succeed if node is a JSON String representing integral number, or boolean.
  syntax:
    content: public boolean canConvertToInt()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToLong()
  id: canConvertToLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: canConvertToLong()
  nameWithType: DecimalNode.canConvertToLong()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToLong()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToLong*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that can be used to check whether this node is a numeric node (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> would return true) AND its value fits within Java's 64-bit signed integer type, `long`. Note that floating-point numbers are convertible if the integral part fits without overflow (as per standard Java coercion rules)


    NOTE: this method does not consider possible value type conversion from JSON String into Number; so even if this method returns false, it is possible that <xref uid="com.fasterxml.jackson.databind.node.DecimalNode.asLong" data-throw-if-not-resolved="false">#asLong</xref> could still succeed if node is a JSON String representing integral number, or boolean.
  syntax:
    content: public boolean canConvertToLong()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.DecimalNode.decimalValue()
  id: decimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: decimalValue()
  nameWithType: DecimalNode.decimalValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.decimalValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.decimalValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns floating point value for this node (as <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref>), **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns `BigDecimal.ZERO`.
  syntax:
    content: public BigDecimal decimalValue()
    return:
      type: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.node.DecimalNode.doubleValue()
  id: doubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: doubleValue()
  nameWithType: DecimalNode.doubleValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.doubleValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.doubleValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns 64-bit floating point (double) value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0.0. For integer values, conversion is done using coercion; this may result in overflows with <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> values.
  syntax:
    content: public double doubleValue()
    return:
      type: double
- uid: com.fasterxml.jackson.databind.node.DecimalNode.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: equals(Object o)
  nameWithType: DecimalNode.equals(Object o)
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.equals(Object o)
  overload: com.fasterxml.jackson.databind.node.DecimalNode.equals*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Equality for node objects is defined as full (deep) value equality. This means that it is possible to compare complete JSON trees for equality by comparing equality of root nodes.


    Note: marked as abstract to ensure all implementation classes define it properly and not rely on definition from <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref>.
  syntax:
    content: public boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.DecimalNode.floatValue()
  id: floatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: floatValue()
  nameWithType: DecimalNode.floatValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.floatValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.floatValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns 32-bit floating value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0.0. For integer values, conversion is done using coercion; this means that an overflow is possible for \`long\` values
  syntax:
    content: public float floatValue()
    return:
      type: float
- uid: com.fasterxml.jackson.databind.node.DecimalNode.hashCode()
  id: hashCode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: hashCode()
  nameWithType: DecimalNode.hashCode()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.hashCode()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.hashCode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.node.DecimalNode.intValue()
  id: intValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: intValue()
  nameWithType: DecimalNode.intValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.intValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.intValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns integer value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0. For floating-point numbers, value is truncated using default Java coercion, similar to how cast from double to int operates.
  syntax:
    content: public int intValue()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.node.DecimalNode.isBigDecimal()
  id: isBigDecimal()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: isBigDecimal()
  nameWithType: DecimalNode.isBigDecimal()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.isBigDecimal()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.isBigDecimal*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public boolean isBigDecimal()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.DecimalNode.isFloatingPointNumber()
  id: isFloatingPointNumber()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: isFloatingPointNumber()
  nameWithType: DecimalNode.isFloatingPointNumber()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.isFloatingPointNumber()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.isFloatingPointNumber*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public boolean isFloatingPointNumber()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.DecimalNode.longValue()
  id: longValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: longValue()
  nameWithType: DecimalNode.longValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.longValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.longValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns 64-bit long value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0. For floating-point numbers, value is truncated using default Java coercion, similar to how cast from double to long operates.
  syntax:
    content: public long longValue()
    return:
      type: long
- uid: com.fasterxml.jackson.databind.node.DecimalNode.numberType()
  id: numberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: numberType()
  nameWithType: DecimalNode.numberType()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.numberType()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.numberType*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns code that identifies type of underlying numeric value, if (and only if) node is a number node.
  syntax:
    content: public JsonParser.NumberType numberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.databind.node.DecimalNode.numberValue()
  id: numberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: numberValue()
  nameWithType: DecimalNode.numberValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.numberValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.numberValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns numeric value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true); otherwise returns null
  syntax:
    content: public Number numberValue()
    return:
      type: java.lang.Number
- uid: com.fasterxml.jackson.databind.node.DecimalNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: serialize(JsonGenerator jgen, SerializerProvider provider)
  nameWithType: DecimalNode.serialize(JsonGenerator jgen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.serialize(JsonGenerator jgen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.node.DecimalNode.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method called to serialize node instances using given generator.
  syntax:
    content: public final void serialize(JsonGenerator jgen, SerializerProvider provider)
    parameters:
    - id: jgen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.node.DecimalNode.shortValue()
  id: shortValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: shortValue()
  nameWithType: DecimalNode.shortValue()
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.shortValue()
  overload: com.fasterxml.jackson.databind.node.DecimalNode.shortValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Returns 16-bit short value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.node.DecimalNode.isNumber" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0. For floating-point numbers, value is truncated using default Java coercion, similar to how cast from double to short operates.
  syntax:
    content: public short shortValue()
    return:
      type: short
- uid: com.fasterxml.jackson.databind.node.DecimalNode.valueOf(java.math.BigDecimal)
  id: valueOf(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.DecimalNode
  langs:
  - java
  name: valueOf(BigDecimal d)
  nameWithType: DecimalNode.valueOf(BigDecimal d)
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.valueOf(BigDecimal d)
  overload: com.fasterxml.jackson.databind.node.DecimalNode.valueOf*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public static DecimalNode valueOf(BigDecimal d)
    parameters:
    - id: d
      type: java.math.BigDecimal
    return:
      type: com.fasterxml.jackson.databind.node.DecimalNode
references:
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.node.DecimalNode.DecimalNode*
  name: DecimalNode
  nameWithType: DecimalNode.DecimalNode
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.DecimalNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.DecimalNode.valueOf*
  name: valueOf
  nameWithType: DecimalNode.valueOf
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.valueOf
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.node.DecimalNode.asToken*
  name: asToken
  nameWithType: DecimalNode.asToken
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.asToken
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.databind.node.DecimalNode.numberType*
  name: numberType
  nameWithType: DecimalNode.numberType
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.numberType
  package: com.fasterxml.jackson.databind.node
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.node.DecimalNode.isFloatingPointNumber*
  name: isFloatingPointNumber
  nameWithType: DecimalNode.isFloatingPointNumber
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.isFloatingPointNumber
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.DecimalNode.isBigDecimal*
  name: isBigDecimal
  nameWithType: DecimalNode.isBigDecimal
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.isBigDecimal
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToInt*
  name: canConvertToInt
  nameWithType: DecimalNode.canConvertToInt
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToInt
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToLong*
  name: canConvertToLong
  nameWithType: DecimalNode.canConvertToLong
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.canConvertToLong
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.databind.node.DecimalNode.numberValue*
  name: numberValue
  nameWithType: DecimalNode.numberValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.numberValue
  package: com.fasterxml.jackson.databind.node
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.databind.node.DecimalNode.shortValue*
  name: shortValue
  nameWithType: DecimalNode.shortValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.shortValue
  package: com.fasterxml.jackson.databind.node
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.node.DecimalNode.intValue*
  name: intValue
  nameWithType: DecimalNode.intValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.intValue
  package: com.fasterxml.jackson.databind.node
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.databind.node.DecimalNode.longValue*
  name: longValue
  nameWithType: DecimalNode.longValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.longValue
  package: com.fasterxml.jackson.databind.node
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.databind.node.DecimalNode.bigIntegerValue*
  name: bigIntegerValue
  nameWithType: DecimalNode.bigIntegerValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.bigIntegerValue
  package: com.fasterxml.jackson.databind.node
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.databind.node.DecimalNode.floatValue*
  name: floatValue
  nameWithType: DecimalNode.floatValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.floatValue
  package: com.fasterxml.jackson.databind.node
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.databind.node.DecimalNode.doubleValue*
  name: doubleValue
  nameWithType: DecimalNode.doubleValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.doubleValue
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.DecimalNode.decimalValue*
  name: decimalValue
  nameWithType: DecimalNode.decimalValue
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.decimalValue
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.node.DecimalNode.asText*
  name: asText
  nameWithType: DecimalNode.asText
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.asText
  package: com.fasterxml.jackson.databind.node
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonProcessingException
  name: JsonProcessingException
  nameWithType: JsonProcessingException
  fullName: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.node.DecimalNode.serialize*
  name: serialize
  nameWithType: DecimalNode.serialize
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.serialize
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.node.DecimalNode.equals*
  name: equals
  nameWithType: DecimalNode.equals
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.equals
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.DecimalNode.hashCode*
  name: hashCode
  nameWithType: DecimalNode.hashCode
  fullName: com.fasterxml.jackson.databind.node.DecimalNode.hashCode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.NumericNode
  name: NumericNode
  nameWithType: NumericNode
  fullName: com.fasterxml.jackson.databind.node.NumericNode
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
  name: JsonNode.requiredAt(JsonPointer)
  nameWithType: JsonNode.requiredAt(JsonPointer)
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: BaseJsonNode.serialize(JsonGenerator,SerializerProvider)
  nameWithType: BaseJsonNode.serialize(JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.JsonNode.iterator()
  name: JsonNode.iterator()
  nameWithType: JsonNode.iterator()
  fullName: com.fasterxml.jackson.databind.JsonNode.iterator()
- uid: com.fasterxml.jackson.databind.node.NumericNode.canConvertToInt()
  name: NumericNode.canConvertToInt()
  nameWithType: NumericNode.canConvertToInt()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.canConvertToInt()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.required(int)
  name: BaseJsonNode.required(int)
  nameWithType: BaseJsonNode.required(int)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.required(int)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.node.ValueNode.asToken()
  name: ValueNode.asToken()
  nameWithType: ValueNode.asToken()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.asToken()
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
  name: JsonNode.findValuesAsText(String)
  nameWithType: JsonNode.findValuesAsText(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  name: JsonNode.isMissingNode()
  nameWithType: JsonNode.isMissingNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isMissingNode()
- uid: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
  name: JsonNode.findValues(String)
  nameWithType: JsonNode.findValues(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.findPath(java.lang.String)
  name: BaseJsonNode.findPath(String)
  nameWithType: BaseJsonNode.findPath(String)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.findPath(java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.node.NumericNode.longValue()
  name: NumericNode.longValue()
  nameWithType: NumericNode.longValue()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.longValue()
- uid: com.fasterxml.jackson.databind.node.ValueNode.get(int)
  name: ValueNode.get(int)
  nameWithType: ValueNode.get(int)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.get(int)
- uid: com.fasterxml.jackson.databind.JsonNode.<T>require()
  name: JsonNode.<T>require()
  nameWithType: JsonNode.<T>require()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>require()
- uid: com.fasterxml.jackson.databind.JsonNode.textValue()
  name: JsonNode.textValue()
  nameWithType: JsonNode.textValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.textValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  name: JsonNode.isContainerNode()
  nameWithType: JsonNode.isContainerNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isContainerNode()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>_this()
  name: JsonNode.<T>_this()
  nameWithType: JsonNode.<T>_this()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_this()
- uid: com.fasterxml.jackson.databind.JsonNode.isValueNode()
  name: JsonNode.isValueNode()
  nameWithType: JsonNode.isValueNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isValueNode()
- uid: com.fasterxml.jackson.databind.node.ValueNode.has(int)
  name: ValueNode.has(int)
  nameWithType: ValueNode.has(int)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.has(int)
- uid: com.fasterxml.jackson.databind.JsonNode.isTextual()
  name: JsonNode.isTextual()
  nameWithType: JsonNode.isTextual()
  fullName: com.fasterxml.jackson.databind.JsonNode.isTextual()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  name: JsonNode.<T>requireNonNull()
  nameWithType: JsonNode.<T>requireNonNull()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
- uid: com.fasterxml.jackson.databind.JsonNode.isObject()
  name: JsonNode.isObject()
  nameWithType: JsonNode.isObject()
  fullName: com.fasterxml.jackson.databind.JsonNode.isObject()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString()
  name: BaseJsonNode.toPrettyString()
  nameWithType: BaseJsonNode.toPrettyString()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString()
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean()
  name: JsonNode.asBoolean()
  nameWithType: JsonNode.asBoolean()
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean()
- uid: com.fasterxml.jackson.databind.JsonNode.isPojo()
  name: JsonNode.isPojo()
  nameWithType: JsonNode.isPojo()
  fullName: com.fasterxml.jackson.databind.JsonNode.isPojo()
- uid: com.fasterxml.jackson.databind.JsonNode.size()
  name: JsonNode.size()
  nameWithType: JsonNode.size()
  fullName: com.fasterxml.jackson.databind.JsonNode.size()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse()
  name: BaseJsonNode.traverse()
  nameWithType: BaseJsonNode.traverse()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.required(java.lang.String)
  name: BaseJsonNode.required(String)
  nameWithType: BaseJsonNode.required(String)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.required(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  name: ValueNode.findValues(String,List<JsonNode>)
  nameWithType: ValueNode.findValues(String,List<JsonNode>)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
- uid: com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
  name: JsonNode.asText(String)
  nameWithType: JsonNode.asText(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse(com.fasterxml.jackson.core.ObjectCodec)
  name: BaseJsonNode.traverse(ObjectCodec)
  nameWithType: BaseJsonNode.traverse(ObjectCodec)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.databind.node.NumericNode.bigIntegerValue()
  name: NumericNode.bigIntegerValue()
  nameWithType: NumericNode.bigIntegerValue()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.bigIntegerValue()
- uid: com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
  name: JsonSerializable.Base.isEmpty(SerializerProvider)
  nameWithType: JsonSerializable.Base.isEmpty(SerializerProvider)
  fullName: com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.node.NumericNode.asLong(long)
  name: NumericNode.asLong(long)
  nameWithType: NumericNode.asLong(long)
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asLong(long)
- uid: com.fasterxml.jackson.databind.node.NumericNode.isNaN()
  name: NumericNode.isNaN()
  nameWithType: NumericNode.isNaN()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.isNaN()
- uid: com.fasterxml.jackson.databind.JsonNode.isNull()
  name: JsonNode.isNull()
  nameWithType: JsonNode.isNull()
  fullName: com.fasterxml.jackson.databind.JsonNode.isNull()
- uid: com.fasterxml.jackson.databind.JsonNode.booleanValue()
  name: JsonNode.booleanValue()
  nameWithType: JsonNode.booleanValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.booleanValue()
- uid: com.fasterxml.jackson.databind.node.ValueNode.path(java.lang.String)
  name: ValueNode.path(String)
  nameWithType: ValueNode.path(String)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.path(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.NumericNode.asLong()
  name: NumericNode.asLong()
  nameWithType: NumericNode.asLong()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asLong()
- uid: com.fasterxml.jackson.databind.JsonNode.fields()
  name: JsonNode.fields()
  nameWithType: JsonNode.fields()
  fullName: com.fasterxml.jackson.databind.JsonNode.fields()
- uid: com.fasterxml.jackson.databind.node.NumericNode.decimalValue()
  name: NumericNode.decimalValue()
  nameWithType: NumericNode.decimalValue()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.decimalValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isShort()
  name: JsonNode.isShort()
  nameWithType: JsonNode.isShort()
  fullName: com.fasterxml.jackson.databind.JsonNode.isShort()
- uid: com.fasterxml.jackson.databind.JsonNode.isLong()
  name: JsonNode.isLong()
  nameWithType: JsonNode.isLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.isLong()
- uid: com.fasterxml.jackson.databind.JsonNode.isFloat()
  name: JsonNode.isFloat()
  nameWithType: JsonNode.isFloat()
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloat()
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  name: ValueNode.findParents(String,List<JsonNode>)
  nameWithType: ValueNode.findParents(String,List<JsonNode>)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
- uid: com.fasterxml.jackson.databind.node.NumericNode.asInt()
  name: NumericNode.asInt()
  nameWithType: NumericNode.asInt()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asInt()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.toString()
  name: BaseJsonNode.toString()
  nameWithType: BaseJsonNode.toString()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.toString()
- uid: com.fasterxml.jackson.databind.node.ValueNode.has(java.lang.String)
  name: ValueNode.has(String)
  nameWithType: ValueNode.has(String)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.has(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.elements()
  name: JsonNode.elements()
  nameWithType: JsonNode.elements()
  fullName: com.fasterxml.jackson.databind.JsonNode.elements()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
  name: JsonNode.equals(Object)
  nameWithType: JsonNode.equals(Object)
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.node.NumericNode.asDouble(double)
  name: NumericNode.asDouble(double)
  nameWithType: NumericNode.asDouble(double)
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asDouble(double)
- uid: com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  name: JsonNode.isBigInteger()
  nameWithType: JsonNode.isBigInteger()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigInteger()
- uid: com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
  name: JsonNode.at(JsonPointer)
  nameWithType: JsonNode.at(JsonPointer)
  fullName: com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
  name: JsonNode.requiredAt(String)
  nameWithType: JsonNode.requiredAt(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.isInt()
  name: JsonNode.isInt()
  nameWithType: JsonNode.isInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.isInt()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.node.NumericNode.numberType()
  name: NumericNode.numberType()
  nameWithType: NumericNode.numberType()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.numberType()
- uid: com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
  name: JsonNode.at(String)
  nameWithType: JsonNode.at(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.ValueNode.path(int)
  name: ValueNode.path(int)
  nameWithType: ValueNode.path(int)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.path(int)
- uid: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  name: JsonNode.isFloatingPointNumber()
  nameWithType: JsonNode.isFloatingPointNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
- uid: com.fasterxml.jackson.databind.node.NumericNode.asDouble()
  name: NumericNode.asDouble()
  nameWithType: NumericNode.asDouble()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asDouble()
- uid: com.fasterxml.jackson.databind.node.NumericNode.intValue()
  name: NumericNode.intValue()
  nameWithType: NumericNode.intValue()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.intValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isBoolean()
  name: JsonNode.isBoolean()
  nameWithType: JsonNode.isBoolean()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBoolean()
- uid: com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy()
  name: ValueNode.<T>deepCopy()
  nameWithType: ValueNode.<T>deepCopy()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy()
- uid: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(java.lang.String)
  name: ValueNode.hasNonNull(String)
  nameWithType: ValueNode.hasNonNull(String)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.ValueNode.isEmpty()
  name: ValueNode.isEmpty()
  nameWithType: ValueNode.isEmpty()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.isEmpty()
- uid: com.fasterxml.jackson.databind.JsonNode.binaryValue()
  name: JsonNode.binaryValue()
  nameWithType: JsonNode.binaryValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.binaryValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  name: JsonNode.isBigDecimal()
  nameWithType: JsonNode.isBigDecimal()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParent(java.lang.String)
  name: ValueNode.findParent(String)
  nameWithType: ValueNode.findParent(String)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParent(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.NumericNode.getNodeType()
  name: NumericNode.getNodeType()
  nameWithType: NumericNode.getNodeType()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.getNodeType()
- uid: com.fasterxml.jackson.databind.JsonNode.isDouble()
  name: JsonNode.isDouble()
  nameWithType: JsonNode.isDouble()
  fullName: com.fasterxml.jackson.databind.JsonNode.isDouble()
- uid: com.fasterxml.jackson.databind.node.NumericNode.asText()
  name: NumericNode.asText()
  nameWithType: NumericNode.asText()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asText()
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  name: JsonNode.equals(Comparator<JsonNode>,JsonNode)
  nameWithType: JsonNode.equals(Comparator<JsonNode>,JsonNode)
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
- uid: com.fasterxml.jackson.databind.JsonNode.floatValue()
  name: JsonNode.floatValue()
  nameWithType: JsonNode.floatValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.floatValue()
- uid: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(int)
  name: ValueNode.hasNonNull(int)
  nameWithType: ValueNode.hasNonNull(int)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(int)
- uid: com.fasterxml.jackson.databind.node.NumericNode.numberValue()
  name: NumericNode.numberValue()
  nameWithType: NumericNode.numberValue()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.numberValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isArray()
  name: JsonNode.isArray()
  nameWithType: JsonNode.isArray()
  fullName: com.fasterxml.jackson.databind.JsonNode.isArray()
- uid: com.fasterxml.jackson.databind.JsonNode.fieldNames()
  name: JsonNode.fieldNames()
  nameWithType: JsonNode.fieldNames()
  fullName: com.fasterxml.jackson.databind.JsonNode.fieldNames()
- uid: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  name: JsonNode.isIntegralNumber()
  nameWithType: JsonNode.isIntegralNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
- uid: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: ValueNode.serializeWithType(JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: ValueNode.serializeWithType(JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
  name: JsonNode.<T>with(String)
  nameWithType: JsonNode.<T>with(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.hashCode()
  name: BaseJsonNode.hashCode()
  nameWithType: BaseJsonNode.hashCode()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.hashCode()
- uid: com.fasterxml.jackson.databind.JsonNode.shortValue()
  name: JsonNode.shortValue()
  nameWithType: JsonNode.shortValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.shortValue()
- uid: com.fasterxml.jackson.databind.node.NumericNode.canConvertToLong()
  name: NumericNode.canConvertToLong()
  nameWithType: NumericNode.canConvertToLong()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.canConvertToLong()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  name: JsonNode.<T>_reportRequiredViolation(String,Object)
  nameWithType: JsonNode.<T>_reportRequiredViolation(String,Object)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.node.NumericNode.asInt(int)
  name: NumericNode.asInt(int)
  nameWithType: NumericNode.asInt(int)
  fullName: com.fasterxml.jackson.databind.node.NumericNode.asInt(int)
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValue(java.lang.String)
  name: ValueNode.findValue(String)
  nameWithType: ValueNode.findValue(String)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValue(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
  name: JsonNode.<T>withArray(String)
  nameWithType: JsonNode.<T>withArray(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  name: ValueNode.findValuesAsText(String,List<String>)
  nameWithType: ValueNode.findValuesAsText(String,List<String>)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
- uid: com.fasterxml.jackson.databind.node.ValueNode.get(java.lang.String)
  name: ValueNode.get(String)
  nameWithType: ValueNode.get(String)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.get(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.isBinary()
  name: JsonNode.isBinary()
  nameWithType: JsonNode.isBinary()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBinary()
- uid: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
  name: JsonNode.findParents(String)
  nameWithType: JsonNode.findParents(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.isNumber()
  name: JsonNode.isNumber()
  nameWithType: JsonNode.isNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isNumber()
- uid: com.fasterxml.jackson.databind.node.ValueNode._at(com.fasterxml.jackson.core.JsonPointer)
  name: ValueNode._at(JsonPointer)
  nameWithType: ValueNode._at(JsonPointer)
  fullName: com.fasterxml.jackson.databind.node.ValueNode._at(com.fasterxml.jackson.core.JsonPointer)
- uid: com.fasterxml.jackson.databind.node.NumericNode.doubleValue()
  name: NumericNode.doubleValue()
  nameWithType: NumericNode.doubleValue()
  fullName: com.fasterxml.jackson.databind.node.NumericNode.doubleValue()
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
  name: JsonNode.asBoolean(boolean)
  nameWithType: JsonNode.asBoolean(boolean)
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
- uid: T>require()
  name: T>require()
  nameWithType: T>require()
  fullName: T>require()
- uid: com.fasterxml.jackson.databind.JsonNode.
  name: JsonNode.
  nameWithType: JsonNode.
  fullName: com.fasterxml.jackson.databind.JsonNode.
- uid: T>_this()
  name: T>_this()
  nameWithType: T>_this()
  fullName: T>_this()
- uid: T>requireNonNull()
  name: T>requireNonNull()
  nameWithType: T>requireNonNull()
  fullName: T>requireNonNull()
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List
  name: ValueNode.findValues(String,List
  nameWithType: ValueNode.findValues(String,List
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List
- uid: com.fasterxml.jackson.databind.JsonNode>)
  name: JsonNode>)
  nameWithType: JsonNode>)
  fullName: com.fasterxml.jackson.databind.JsonNode>)
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List
  name: ValueNode.findParents(String,List
  nameWithType: ValueNode.findParents(String,List
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List
- uid: com.fasterxml.jackson.databind.node.ValueNode.
  name: ValueNode.
  nameWithType: ValueNode.
  fullName: com.fasterxml.jackson.databind.node.ValueNode.
- uid: T>deepCopy()
  name: T>deepCopy()
  nameWithType: T>deepCopy()
  fullName: T>deepCopy()
- uid: com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  name: JsonNode>,JsonNode)
  nameWithType: JsonNode>,JsonNode)
  fullName: com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator
  name: JsonNode.equals(Comparator
  nameWithType: JsonNode.equals(Comparator
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator
- uid: T>with(java.lang.String)
  name: T>with(String)
  nameWithType: T>with(String)
  fullName: T>with(java.lang.String)
- uid: T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  name: T>_reportRequiredViolation(String,Object)
  nameWithType: T>_reportRequiredViolation(String,Object)
  fullName: T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
- uid: T>withArray(java.lang.String)
  name: T>withArray(String)
  nameWithType: T>withArray(String)
  fullName: T>withArray(java.lang.String)
- uid: java.lang.String>)
  name: String>)
  nameWithType: String>)
  fullName: java.lang.String>)
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List
  name: ValueNode.findValuesAsText(String,List
  nameWithType: ValueNode.findValuesAsText(String,List
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List
