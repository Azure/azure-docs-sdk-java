### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  id: ServiceBusManagementNode
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation
  children:
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage(long,java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close()
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.getSessionState(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long,java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long,java.lang.String,java.lang.String,int)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessages(com.azure.messaging.servicebus.models.ReceiveMode,java.lang.String,java.lang.String,java.lang.Iterable<java.lang.Long>)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewSessionLock(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant,int,java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.setSessionState(java.lang.String,byte[],java.lang.String)
  - com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition(java.lang.String,com.azure.messaging.servicebus.implementation.DispositionStatus,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)
  langs:
  - java
  name: ServiceBusManagementNode
  nameWithType: ServiceBusManagementNode
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  type: Interface
  package: com.azure.messaging.servicebus.implementation
  summary: The management node for performing Service Bus metadata operations, scheduling, and inspecting messages.
  syntax:
    content: public interface ServiceBusManagementNode extends AutoCloseable
  implements:
  - java.lang.AutoCloseable
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage(long,java.lang.String)
  id: cancelScheduledMessage(long,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: cancelScheduledMessage(long sequenceNumber, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.cancelScheduledMessage(long sequenceNumber, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage(long sequenceNumber, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued.
  syntax:
    content: public abstract Mono<Void> cancelScheduledMessage(long sequenceNumber, String associatedLinkName)
    parameters:
    - id: sequenceNumber
      type: long
      description: The sequence number of the scheduled message.
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: <xref uid="java.lang.Void" data-throw-if-not-resolved="false">Void</xref> The successful completion represents the pending cancellation.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close()
  id: close()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: close()
  nameWithType: ServiceBusManagementNode.close()
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close()
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  syntax:
    content: public abstract void close()
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.getSessionState(java.lang.String,java.lang.String)
  id: getSessionState(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: getSessionState(String sessionId, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.getSessionState(String sessionId, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.getSessionState(String sessionId, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.getSessionState*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Gets the session state.
  syntax:
    content: public abstract Mono<byte[]> getSessionState(String sessionId, String associatedLinkName)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Id of the session.
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: The state of the session.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long,java.lang.String,java.lang.String)
  id: peek(long,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: peek(long fromSequenceNumber, String sessionId, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.peek(long fromSequenceNumber, String sessionId, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long fromSequenceNumber, String sessionId, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  syntax:
    content: public abstract Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber, String sessionId, String associatedLinkName)
    parameters:
    - id: fromSequenceNumber
      type: long
      description: to peek message from.
    - id: sessionId
      type: java.lang.String
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long,java.lang.String,java.lang.String,int)
  id: peek(long,java.lang.String,java.lang.String,int)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: peek(long fromSequenceNumber, String sessionId, String associatedLinkName, int maxMessages)
  nameWithType: ServiceBusManagementNode.peek(long fromSequenceNumber, String sessionId, String associatedLinkName, int maxMessages)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long fromSequenceNumber, String sessionId, String associatedLinkName, int maxMessages)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Reads the next batch of active messages without changing the state of the receiver or the message source.
  syntax:
    content: public abstract Flux<ServiceBusReceivedMessage> peek(long fromSequenceNumber, String sessionId, String associatedLinkName, int maxMessages)
    parameters:
    - id: fromSequenceNumber
      type: long
      description: The sequence number from where to read the message.
    - id: sessionId
      type: java.lang.String
    - id: associatedLinkName
      type: java.lang.String
    - id: maxMessages
      type: int
      description: The number of messages.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> of <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> peeked.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessages(com.azure.messaging.servicebus.models.ReceiveMode,java.lang.String,java.lang.String,java.lang.Iterable<java.lang.Long>)
  id: receiveDeferredMessages(com.azure.messaging.servicebus.models.ReceiveMode,java.lang.String,java.lang.String,java.lang.Iterable<java.lang.Long>)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: receiveDeferredMessages(ReceiveMode receiveMode, String sessionId, String associatedLinkName, Iterable<Long> sequenceNumbers)
  nameWithType: ServiceBusManagementNode.receiveDeferredMessages(ReceiveMode receiveMode, String sessionId, String associatedLinkName, Iterable<Long> sequenceNumbers)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessages(ReceiveMode receiveMode, String sessionId, String associatedLinkName, Iterable<Long> sequenceNumbers)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessages*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Receives a deferred <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref>. Deferred messages can only be received by using sequence number.
  syntax:
    content: public abstract Flux<ServiceBusReceivedMessage> receiveDeferredMessages(ReceiveMode receiveMode, String sessionId, String associatedLinkName, Iterable<Long> sequenceNumbers)
    parameters:
    - id: receiveMode
      type: com.azure.messaging.servicebus.models.ReceiveMode
      description: Mode to receive messages.
    - id: sessionId
      type: java.lang.String
      description: Identifier for the session.
    - id: associatedLinkName
      type: java.lang.String
    - id: sequenceNumbers
      type: java.lang.Iterable<java.lang.Long>
      description: The sequence numbers from the <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()" data-throw-if-not-resolved="false">ServiceBusReceivedMessage#getSequenceNumber()</xref>.
    return:
      type: reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
      description: The received <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> message for given sequence number.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock(java.lang.String,java.lang.String)
  id: renewMessageLock(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: renewMessageLock(String messageLock, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.renewMessageLock(String messageLock, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock(String messageLock, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Asynchronously renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid="com.azure.messaging.servicebus.models.ReceiveMode.PEEK_LOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEK_LOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value.
  syntax:
    content: public abstract Mono<Instant> renewMessageLock(String messageLock, String associatedLinkName)
    parameters:
    - id: messageLock
      type: java.lang.String
      description: The lock token of the message <xref uid="com.azure.messaging.servicebus.ServiceBusReceivedMessage" data-throw-if-not-resolved="false">ServiceBusReceivedMessage</xref> to be renewed.
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.time.Instant>
      description: <xref uid="java.time.Instant" data-throw-if-not-resolved="false">Instant</xref> representing the pending renew.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewSessionLock(java.lang.String,java.lang.String)
  id: renewSessionLock(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: renewSessionLock(String sessionId, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.renewSessionLock(String sessionId, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewSessionLock(String sessionId, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewSessionLock*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Renews the lock on the session.
  syntax:
    content: public abstract Mono<Instant> renewSessionLock(String sessionId, String associatedLinkName)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Identifier for the session.
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.time.Instant>
      description: The next expiration time for the session.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant,int,java.lang.String)
  id: schedule(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant,int,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.
  syntax:
    content: public abstract Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize, String associatedLinkName)
    parameters:
    - id: message
      type: com.azure.messaging.servicebus.ServiceBusMessage
      description: The message to be sent to the entity.
    - id: scheduledEnqueueTime
      type: java.time.Instant
      description: The <xref uid="java.time.Instant" data-throw-if-not-resolved="false">Instant</xref> at which the message should be enqueued in the entity.
    - id: maxSendLinkSize
      type: int
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Long>
      description: >-
        The sequence number representing the pending send, which returns the sequence number of the scheduled
             message. This sequence number can be used to cancel the scheduling of the message.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.setSessionState(java.lang.String,byte[],java.lang.String)
  id: setSessionState(java.lang.String,byte[],java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: setSessionState(String sessionId, byte[] state, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.setSessionState(String sessionId, byte[] state, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.setSessionState(String sessionId, byte[] state, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.setSessionState*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Updates the session state.
  syntax:
    content: public abstract Mono<Void> setSessionState(String sessionId, byte[] state, String associatedLinkName)
    parameters:
    - id: sessionId
      type: java.lang.String
      description: Identifier for the session.
    - id: state
      type: byte[]
      description: State to update session.
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the state is updated.
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition(java.lang.String,com.azure.messaging.servicebus.implementation.DispositionStatus,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)
  id: updateDisposition(java.lang.String,com.azure.messaging.servicebus.implementation.DispositionStatus,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.2
  parent: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode
  langs:
  - java
  name: updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, String sessionId, String associatedLinkName)
  nameWithType: ServiceBusManagementNode.updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, String sessionId, String associatedLinkName)
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, String sessionId, String associatedLinkName)
  overload: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition*
  type: Method
  package: com.azure.messaging.servicebus.implementation
  summary: Updates the disposition status of a message given its lock token.
  syntax:
    content: public abstract Mono<Void> updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify, String sessionId, String associatedLinkName)
    parameters:
    - id: lockToken
      type: java.lang.String
    - id: dispositionStatus
      type: com.azure.messaging.servicebus.implementation.DispositionStatus
    - id: deadLetterReason
      type: java.lang.String
    - id: deadLetterErrorDescription
      type: java.lang.String
    - id: propertiesToModify
      type: java.util.Map<java.lang.String,java.lang.Object>
    - id: sessionId
      type: java.lang.String
    - id: associatedLinkName
      type: java.lang.String
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: Mono that completes successfully when the message is completed. Otherwise, returns an error.
references:
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage*
  name: cancelScheduledMessage
  nameWithType: ServiceBusManagementNode.cancelScheduledMessage
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage
  package: com.azure.messaging.servicebus.implementation
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.getSessionState*
  name: getSessionState
  nameWithType: ServiceBusManagementNode.getSessionState
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.getSessionState
  package: com.azure.messaging.servicebus.implementation
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
    name: ServiceBusReceivedMessage
    fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek*
  name: peek
  nameWithType: ServiceBusManagementNode.peek
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek
  package: com.azure.messaging.servicebus.implementation
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
    name: ServiceBusReceivedMessage
    fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.models.ReceiveMode
  name: ReceiveMode
  nameWithType: ReceiveMode
  fullName: com.azure.messaging.servicebus.models.ReceiveMode
- uid: java.lang.Iterable<java.lang.Long>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessages*
  name: receiveDeferredMessages
  nameWithType: ServiceBusManagementNode.receiveDeferredMessages
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessages
  package: com.azure.messaging.servicebus.implementation
- uid: reactor.core.publisher.Mono<java.time.Instant>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock*
  name: renewMessageLock
  nameWithType: ServiceBusManagementNode.renewMessageLock
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock
  package: com.azure.messaging.servicebus.implementation
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewSessionLock*
  name: renewSessionLock
  nameWithType: ServiceBusManagementNode.renewSessionLock
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewSessionLock
  package: com.azure.messaging.servicebus.implementation
- uid: com.azure.messaging.servicebus.ServiceBusMessage
  name: ServiceBusMessage
  nameWithType: ServiceBusMessage
  fullName: com.azure.messaging.servicebus.ServiceBusMessage
- uid: java.time.Instant
  spec.java:
  - uid: java.time.Instant
    name: Instant
    fullName: java.time.Instant
- uid: reactor.core.publisher.Mono<java.lang.Long>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule*
  name: schedule
  nameWithType: ServiceBusManagementNode.schedule
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule
  package: com.azure.messaging.servicebus.implementation
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.setSessionState*
  name: setSessionState
  nameWithType: ServiceBusManagementNode.setSessionState
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.setSessionState
  package: com.azure.messaging.servicebus.implementation
- uid: com.azure.messaging.servicebus.implementation.DispositionStatus
  name: DispositionStatus
  nameWithType: DispositionStatus
  fullName: com.azure.messaging.servicebus.implementation.DispositionStatus
- uid: java.util.Map<java.lang.String,java.lang.Object>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition*
  name: updateDisposition
  nameWithType: ServiceBusManagementNode.updateDisposition
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition
  package: com.azure.messaging.servicebus.implementation
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close*
  name: close
  nameWithType: ServiceBusManagementNode.close
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close
  package: com.azure.messaging.servicebus.implementation
- uid: java.lang.AutoCloseable
  name: AutoCloseable
  nameWithType: AutoCloseable
  fullName: java.lang.AutoCloseable
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.messaging.servicebus.ServiceBusReceivedMessage
  name: ServiceBusReceivedMessage
  nameWithType: ServiceBusReceivedMessage
  fullName: com.azure.messaging.servicebus.ServiceBusReceivedMessage
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.lang.String,java.lang.Object
  name: String,Object
  nameWithType: String,Object
  fullName: java.lang.String,java.lang.Object
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
