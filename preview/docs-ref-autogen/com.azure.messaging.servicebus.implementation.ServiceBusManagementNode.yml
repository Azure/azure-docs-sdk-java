### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  id: "ServiceBusManagementNode"
  parent: "com.azure.messaging.servicebus.implementation"
  children:
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage(long)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close()"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek()"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch(int)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch(int,long)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessage(com.azure.messaging.servicebus.models.ReceiveMode,long)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessageBatch(com.azure.messaging.servicebus.models.ReceiveMode,long...)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock(java.util.UUID)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant,int)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition(java.lang.String,com.azure.messaging.servicebus.implementation.DispositionStatus,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  langs:
  - "java"
  name: "ServiceBusManagementNode"
  nameWithType: "ServiceBusManagementNode"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  type: "Interface"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "The management node for fetching metadata about the Service Bus and peek operation."
  syntax:
    content: "public interface ServiceBusManagementNode extends AutoCloseable"
  implements:
  - "java.lang.AutoCloseable"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage(long)"
  id: "cancelScheduledMessage(long)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "cancelScheduledMessage(long sequenceNumber)"
  nameWithType: "ServiceBusManagementNode.cancelScheduledMessage(long sequenceNumber)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage(long sequenceNumber)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued."
  syntax:
    content: "public abstract Mono<Void> cancelScheduledMessage(long sequenceNumber)"
    parameters:
    - id: "sequenceNumber"
      type: "long"
      description: "The sequence number of the scheduled message."
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "<xref uid=\"java.lang.Void\" data-throw-if-not-resolved=\"false\">Void</xref> The successful completion represents the pending cancellation."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close()"
  id: "close()"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "close()"
  nameWithType: "ServiceBusManagementNode.close()"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close()"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  syntax:
    content: "public abstract void close()"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek()"
  id: "peek()"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "peek()"
  nameWithType: "ServiceBusManagementNode.peek()"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek()"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "This will return next available message to peek."
  syntax:
    content: "public abstract Mono<ServiceBusReceivedMessage> peek()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref>."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long)"
  id: "peek(long)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "peek(long fromSequenceNumber)"
  nameWithType: "ServiceBusManagementNode.peek(long fromSequenceNumber)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek(long fromSequenceNumber)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  syntax:
    content: "public abstract Mono<ServiceBusReceivedMessage> peek(long fromSequenceNumber)"
    parameters:
    - id: "fromSequenceNumber"
      type: "long"
      description: "to peek message from."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref>."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch(int)"
  id: "peekBatch(int)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "peekBatch(int maxMessages)"
  nameWithType: "ServiceBusManagementNode.peekBatch(int maxMessages)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch(int maxMessages)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Reads the next batch of active messages without changing the state of the receiver or the message source."
  syntax:
    content: "public abstract Flux<ServiceBusReceivedMessage> peekBatch(int maxMessages)"
    parameters:
    - id: "maxMessages"
      type: "int"
      description: "The number of messages."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> peeked."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch(int,long)"
  id: "peekBatch(int,long)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "peekBatch(int maxMessages, long fromSequenceNumber)"
  nameWithType: "ServiceBusManagementNode.peekBatch(int maxMessages, long fromSequenceNumber)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch(int maxMessages, long fromSequenceNumber)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Reads the next batch of active messages without changing the state of the receiver or the message source."
  syntax:
    content: "public abstract Flux<ServiceBusReceivedMessage> peekBatch(int maxMessages, long fromSequenceNumber)"
    parameters:
    - id: "maxMessages"
      type: "int"
      description: "The number of messages."
    - id: "fromSequenceNumber"
      type: "long"
      description: "The sequence number from where to read the message."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\">Flux</xref> of <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> peeked."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessage(com.azure.messaging.servicebus.models.ReceiveMode,long)"
  id: "receiveDeferredMessage(com.azure.messaging.servicebus.models.ReceiveMode,long)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "receiveDeferredMessage(ReceiveMode receiveMode, long sequenceNumber)"
  nameWithType: "ServiceBusManagementNode.receiveDeferredMessage(ReceiveMode receiveMode, long sequenceNumber)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessage(ReceiveMode receiveMode, long sequenceNumber)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessage*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Receives a deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref>. Deferred message can only be received by using sequence number."
  syntax:
    content: "public abstract Mono<ServiceBusReceivedMessage> receiveDeferredMessage(ReceiveMode receiveMode, long sequenceNumber)"
    parameters:
    - id: "receiveMode"
      type: "com.azure.messaging.servicebus.models.ReceiveMode"
    - id: "sequenceNumber"
      type: "long"
      description: "The <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage#getSequenceNumber()</xref>."
    return:
      type: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "The received <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> message for given sequence number."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessageBatch(com.azure.messaging.servicebus.models.ReceiveMode,long...)"
  id: "receiveDeferredMessageBatch(com.azure.messaging.servicebus.models.ReceiveMode,long...)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "receiveDeferredMessageBatch(ReceiveMode receiveMode, long[] sequenceNumbers)"
  nameWithType: "ServiceBusManagementNode.receiveDeferredMessageBatch(ReceiveMode receiveMode, long[] sequenceNumbers)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessageBatch(ReceiveMode receiveMode, long[] sequenceNumbers)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessageBatch*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Receives a deferred <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref>. Deferred messages can only be received by using sequence number."
  syntax:
    content: "public abstract Flux<ServiceBusReceivedMessage> receiveDeferredMessageBatch(ReceiveMode receiveMode, long[] sequenceNumbers)"
    parameters:
    - id: "receiveMode"
      type: "com.azure.messaging.servicebus.models.ReceiveMode"
    - id: "sequenceNumbers"
      type: "long[]"
      description: "The sequence numbers from the <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage.getSequenceNumber()\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage#getSequenceNumber()</xref>."
    return:
      type: "reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
      description: "The received <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> message for given sequence number."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock(java.util.UUID)"
  id: "renewMessageLock(java.util.UUID)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "renewMessageLock(UUID messageLock)"
  nameWithType: "ServiceBusManagementNode.renewMessageLock(UUID messageLock)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock(UUID messageLock)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Asynchronously renews the lock on the message specified by the lock token. The lock will be renewed based on the setting specified on the entity. When a message is received in <xref uid=\"com.azure.messaging.servicebus.models.ReceiveMode.PEEK_LOCK\" data-throw-if-not-resolved=\"false\">ReceiveMode#PEEK_LOCK</xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the lock is reset to the entity's LockDuration value."
  syntax:
    content: "public abstract Mono<Instant> renewMessageLock(UUID messageLock)"
    parameters:
    - id: "messageLock"
      type: "java.util.UUID"
      description: "The <xref uid=\"\" data-throw-if-not-resolved=\"false\">UUID</xref> of the message <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceivedMessage\" data-throw-if-not-resolved=\"false\">ServiceBusReceivedMessage</xref> to be renewed."
    return:
      type: "reactor.core.publisher.Mono<java.time.Instant>"
      description: "<xref uid=\"java.time.Instant\" data-throw-if-not-resolved=\"false\">Instant</xref> representing the pending renew."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant,int)"
  id: "schedule(com.azure.messaging.servicebus.ServiceBusMessage,java.time.Instant,int)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize)"
  nameWithType: "ServiceBusManagementNode.schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message."
  syntax:
    content: "public abstract Mono<Long> schedule(ServiceBusMessage message, Instant scheduledEnqueueTime, int maxSendLinkSize)"
    parameters:
    - id: "message"
      type: "com.azure.messaging.servicebus.ServiceBusMessage"
      description: "The message to be sent to the entity."
    - id: "scheduledEnqueueTime"
      type: "java.time.Instant"
      description: "The <xref uid=\"java.time.Instant\" data-throw-if-not-resolved=\"false\">Instant</xref> at which the message should be enqueued in the entity."
    - id: "maxSendLinkSize"
      type: "int"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Long>"
      description: "The sequence number representing the pending send, which returns the sequence number of\n the scheduled message. This sequence number can be used to cancel the scheduling of the message."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition(java.lang.String,com.azure.messaging.servicebus.implementation.DispositionStatus,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  id: "updateDisposition(java.lang.String,com.azure.messaging.servicebus.implementation.DispositionStatus,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode"
  langs:
  - "java"
  name: "updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  nameWithType: "ServiceBusManagementNode.updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Updates the disposition status of a message given its lock token."
  syntax:
    content: "public abstract Mono<Void> updateDisposition(String lockToken, DispositionStatus dispositionStatus, String deadLetterReason, String deadLetterErrorDescription, Map<String,Object> propertiesToModify)"
    parameters:
    - id: "lockToken"
      type: "java.lang.String"
    - id: "dispositionStatus"
      type: "com.azure.messaging.servicebus.implementation.DispositionStatus"
    - id: "deadLetterReason"
      type: "java.lang.String"
    - id: "deadLetterErrorDescription"
      type: "java.lang.String"
    - id: "propertiesToModify"
      type: "java.util.Map<java.lang.String,java.lang.Object>"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Void>"
      description: "Mono that completes successfully when the message is completed. Otherwise, returns an error."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.messaging.servicebus.implementation.DispositionStatus"
  name: "DispositionStatus"
  nameWithType: "DispositionStatus"
  fullName: "com.azure.messaging.servicebus.implementation.DispositionStatus"
- uid: "java.util.Map<java.lang.String,java.lang.Object>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ","
    fullName: ","
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<java.lang.Void>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Void"
    name: "Void"
    fullName: "java.lang.Void"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition*"
  name: "updateDisposition"
  nameWithType: "ServiceBusManagementNode.updateDisposition"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.updateDisposition"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "reactor.core.publisher.Mono<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
    name: "ServiceBusReceivedMessage"
    fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek*"
  name: "peek"
  nameWithType: "ServiceBusManagementNode.peek"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peek"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "com.azure.messaging.servicebus.ServiceBusMessage"
  name: "ServiceBusMessage"
  nameWithType: "ServiceBusMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusMessage"
- uid: "java.time.Instant"
  spec.java:
  - uid: "java.time.Instant"
    name: "Instant"
    fullName: "java.time.Instant"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "reactor.core.publisher.Mono<java.lang.Long>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule*"
  name: "schedule"
  nameWithType: "ServiceBusManagementNode.schedule"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.schedule"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage*"
  name: "cancelScheduledMessage"
  nameWithType: "ServiceBusManagementNode.cancelScheduledMessage"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.cancelScheduledMessage"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "reactor.core.publisher.Flux<com.azure.messaging.servicebus.ServiceBusReceivedMessage>"
  spec.java:
  - uid: "reactor.core.publisher.Flux"
    name: "Flux"
    fullName: "reactor.core.publisher.Flux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
    name: "ServiceBusReceivedMessage"
    fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch*"
  name: "peekBatch"
  nameWithType: "ServiceBusManagementNode.peekBatch"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.peekBatch"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "java.util.UUID"
  spec.java:
  - uid: "java.util.UUID"
    name: "UUID"
    fullName: "java.util.UUID"
- uid: "reactor.core.publisher.Mono<java.time.Instant>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.time.Instant"
    name: "Instant"
    fullName: "java.time.Instant"
  - name: ">"
    fullName: ">"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock*"
  name: "renewMessageLock"
  nameWithType: "ServiceBusManagementNode.renewMessageLock"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.renewMessageLock"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "com.azure.messaging.servicebus.models.ReceiveMode"
  name: "ReceiveMode"
  nameWithType: "ReceiveMode"
  fullName: "com.azure.messaging.servicebus.models.ReceiveMode"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessage*"
  name: "receiveDeferredMessage"
  nameWithType: "ServiceBusManagementNode.receiveDeferredMessage"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessage"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "long[]"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessageBatch*"
  name: "receiveDeferredMessageBatch"
  nameWithType: "ServiceBusManagementNode.receiveDeferredMessageBatch"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.receiveDeferredMessageBatch"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close*"
  name: "close"
  nameWithType: "ServiceBusManagementNode.close"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusManagementNode.close"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "java.lang.AutoCloseable"
  name: "AutoCloseable"
  nameWithType: "AutoCloseable"
  fullName: "java.lang.AutoCloseable"
- uid: "java.lang.String,java.lang.Object"
  name: "String,Object"
  nameWithType: "String,Object"
  fullName: "java.lang.String,java.lang.Object"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
- uid: "java.lang.Void"
  name: "Void"
  nameWithType: "Void"
  fullName: "java.lang.Void"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
  name: "ServiceBusReceivedMessage"
  nameWithType: "ServiceBusReceivedMessage"
  fullName: "com.azure.messaging.servicebus.ServiceBusReceivedMessage"
- uid: "java.lang.Long"
  name: "Long"
  nameWithType: "Long"
  fullName: "java.lang.Long"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
