### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  id: HashMultiset
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.HashMultiset.<E>create()
  - com.azure.cosmos.implementation.guava25.collect.HashMultiset.<E>create(int)
  - com.azure.cosmos.implementation.guava25.collect.HashMultiset.<E>create(java.lang.Iterable<? extends E>)
  langs:
  - java
  name: HashMultiset<E>
  nameWithType: HashMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Multiset implementation backed by a <xref uid="java.util.HashMap" data-throw-if-not-resolved="false">HashMap</xref>.
  syntax:
    content: public final class HashMultiset<E> extends AbstractMapBasedMultiset<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.count(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.iterator()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.size()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.<E>create()
  id: <E>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  langs:
  - java
  name: <E>create()
  nameWithType: HashMultiset<E>.<E>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.<E>create()
  overload: com.azure.cosmos.implementation.guava25.collect.HashMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new, empty `HashMultiset` using the default initial capacity.
  syntax:
    content: public static HashMultiset<E> <E>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.<E>create(int)
  id: <E>create(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  langs:
  - java
  name: <E>create(int distinctElements)
  nameWithType: HashMultiset<E>.<E>create(int distinctElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.<E>create(int distinctElements)
  overload: com.azure.cosmos.implementation.guava25.collect.HashMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new, empty `HashMultiset` with the specified expected number of distinct elements.
  syntax:
    content: public static HashMultiset<E> <E>create(int distinctElements)
    parameters:
    - id: distinctElements
      type: int
      description: the expected number of distinct elements
    return:
      type: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.<E>create(java.lang.Iterable<? extends E>)
  id: <E>create(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  langs:
  - java
  name: <E>create(Iterable<? extends E> elements)
  nameWithType: HashMultiset<E>.<E>create(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.<E>create(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.HashMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a new `HashMultiset` containing the specified elements.


    This implementation is highly efficient when `elements` is itself a <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset" data-throw-if-not-resolved="false">Multiset</xref>.
  syntax:
    content: public static HashMultiset<E> <E>create(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
      description: the elements that the multiset should contain
    return:
      type: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.HashMultiset()
  id: HashMultiset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  langs:
  - java
  name: HashMultiset()
  nameWithType: HashMultiset<E>.HashMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.HashMultiset()
  overload: com.azure.cosmos.implementation.guava25.collect.HashMultiset.HashMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private HashMultiset()
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.HashMultiset(int)
  id: HashMultiset(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  langs:
  - java
  name: HashMultiset(int distinctElements)
  nameWithType: HashMultiset<E>.HashMultiset(int distinctElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.HashMultiset(int distinctElements)
  overload: com.azure.cosmos.implementation.guava25.collect.HashMultiset.HashMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private HashMultiset(int distinctElements)
    parameters:
    - id: distinctElements
      type: int
references:
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.HashMultiset*
  name: HashMultiset
  nameWithType: HashMultiset<E>.HashMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.HashMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset
    name: HashMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.HashMultiset.create*
  name: <E>create
  nameWithType: HashMultiset<E>.<E>create
  fullName: com.azure.cosmos.implementation.guava25.collect.HashMultiset<E>.<E>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: E
  name: E
  nameWithType: E
  fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset<E>
  name: AbstractMapBasedMultiset<E>
  nameWithType: AbstractMapBasedMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset<E>
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.iterator()
  name: AbstractMapBasedMultiset.iterator()
  nameWithType: AbstractMapBasedMultiset.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.iterator()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.size()
  name: AbstractMapBasedMultiset.size()
  nameWithType: AbstractMapBasedMultiset.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.size()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
  name: AbstractMultiset.contains(Object)
  nameWithType: AbstractMultiset.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
  name: AbstractMultiset.retainAll(Collection<?>)
  nameWithType: AbstractMultiset.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
  name: AbstractMultiset.setCount(E,int,int)
  nameWithType: AbstractMultiset.setCount(E,int,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.add(E,int)
  name: AbstractMapBasedMultiset.add(E,int)
  nameWithType: AbstractMapBasedMultiset.add(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.add(E,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.setCount(E,int)
  name: AbstractMapBasedMultiset.setCount(E,int)
  nameWithType: AbstractMapBasedMultiset.setCount(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.setCount(E,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.remove(java.lang.Object,int)
  name: AbstractMapBasedMultiset.remove(Object,int)
  nameWithType: AbstractMapBasedMultiset.remove(Object,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.remove(java.lang.Object,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
  name: AbstractMultiset.removeAll(Collection<?>)
  nameWithType: AbstractMultiset.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
  name: AbstractMultiset.toString()
  nameWithType: AbstractMultiset.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
  name: AbstractMultiset.isEmpty()
  nameWithType: AbstractMultiset.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
  name: AbstractMultiset.hashCode()
  nameWithType: AbstractMultiset.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.count(java.lang.Object)
  name: AbstractMapBasedMultiset.count(Object)
  nameWithType: AbstractMapBasedMultiset.count(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.count(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
  name: AbstractMultiset.remove(Object)
  nameWithType: AbstractMultiset.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
  name: AbstractMultiset.addAll(Collection<? extends E>)
  nameWithType: AbstractMultiset.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
  name: AbstractMultiset.add(E)
  nameWithType: AbstractMultiset.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.entrySet()
  name: AbstractMapBasedMultiset.entrySet()
  nameWithType: AbstractMapBasedMultiset.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.entrySet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.clear()
  name: AbstractMapBasedMultiset.clear()
  nameWithType: AbstractMapBasedMultiset.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.elementSet()
  name: AbstractMultiset.elementSet()
  nameWithType: AbstractMultiset.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.elementSet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  name: AbstractMapBasedMultiset.forEachEntry(ObjIntConsumer<? super E>)
  nameWithType: AbstractMapBasedMultiset.forEachEntry(ObjIntConsumer<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
  name: AbstractMultiset.equals(Object)
  nameWithType: AbstractMultiset.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset
  name: AbstractMapBasedMultiset
  nameWithType: AbstractMapBasedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection
  name: AbstractMultiset.retainAll(Collection
  nameWithType: AbstractMultiset.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection
  name: AbstractMultiset.removeAll(Collection
  nameWithType: AbstractMultiset.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection
  name: AbstractMultiset.addAll(Collection
  nameWithType: AbstractMultiset.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.forEachEntry(java.util.function.ObjIntConsumer
  name: AbstractMapBasedMultiset.forEachEntry(ObjIntConsumer
  nameWithType: AbstractMapBasedMultiset.forEachEntry(ObjIntConsumer
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultiset.forEachEntry(java.util.function.ObjIntConsumer
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
