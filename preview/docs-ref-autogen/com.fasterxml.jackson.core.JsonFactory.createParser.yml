### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JsonFactory.createParser*"
fullName: "com.fasterxml.jackson.core.JsonFactory.createParser"
name: "createParser"
nameWithType: "JsonFactory.createParser"
members:
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(byte[])"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(byte[] data)"
  name: "createParser(byte[] data)"
  nameWithType: "JsonFactory.createParser(byte[] data)"
  summary: "Method for constructing parser for parsing the contents of given byte array."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[])"
  parameters:
  - name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonParser createParser(byte[] data)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(byte[] data, int offset, int len)"
  name: "createParser(byte[] data, int offset, int len)"
  nameWithType: "JsonFactory.createParser(byte[] data, int offset, int len)"
  summary: "Method for constructing parser for parsing the contents of given byte array."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)"
  parameters:
  - description: "Buffer that contains data to parse"
    name: "data"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Offset of the first data byte within buffer"
    name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Length of contents to parse within buffer"
    name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(byte[] data, int offset, int len)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(char[])"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(char[] content)"
  name: "createParser(char[] content)"
  nameWithType: "JsonFactory.createParser(char[] content)"
  summary: "Method for constructing parser for parsing contents of given char array."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[])"
  parameters:
  - name: "content"
    type: "<xref href=\"char?alt=char&text=char\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public JsonParser createParser(char[] content)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(char[] content, int offset, int len)"
  name: "createParser(char[] content, int offset, int len)"
  nameWithType: "JsonFactory.createParser(char[] content, int offset, int len)"
  summary: "Method for constructing parser for parsing contents of given char array."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)"
  parameters:
  - name: "content"
    type: "<xref href=\"char?alt=char&text=char\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(char[] content, int offset, int len)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.DataInput)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(DataInput in)"
  name: "createParser(DataInput in)"
  nameWithType: "JsonFactory.createParser(DataInput in)"
  summary: "Optional method for constructing parser for reading contents from specified <xref uid=\"java.io.DataInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataInput\"></xref> instance.\n\nIf this factory does not support <xref uid=\"java.io.DataInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataInput\"></xref> as source, will throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref>"
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.DataInput)"
  parameters:
  - name: "in"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(DataInput in)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.File)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(File f)"
  name: "createParser(File f)"
  nameWithType: "JsonFactory.createParser(File f)"
  summary: "Method for constructing JSON parser instance to parse contents of specified file.\n\nEncoding is auto-detected from contents according to JSON specification recommended mechanism. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createParser(java.io.Reader)\"></xref>.\n\nUnderlying input stream (needed for reading contents) will be **owned** (and managed, i.e. closed as need be) by the parser, since caller has no access to it."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.File)"
  parameters:
  - description: "File that contains JSON content to parse"
    name: "f"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(File f)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.InputStream)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(InputStream in)"
  name: "createParser(InputStream in)"
  nameWithType: "JsonFactory.createParser(InputStream in)"
  summary: "Method for constructing JSON parser instance to parse the contents accessed via specified input stream.\n\nThe input stream will **not be owned** by the parser, it will still be managed (i.e. closed if end-of-stream is reacher, or parser close method called) if (and only if) <xref uid=\"com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE\"></xref> is enabled.\n\nNote: no encoding argument is taken since it can always be auto-detected as suggested by JSON RFC. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createParser(java.io.Reader)\"></xref>."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.InputStream)"
  parameters:
  - description: "InputStream to use for reading JSON content to parse"
    name: "in"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(InputStream in)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(Reader r)"
  name: "createParser(Reader r)"
  nameWithType: "JsonFactory.createParser(Reader r)"
  summary: "Method for constructing parser for parsing the contents accessed via specified Reader.\n\nThe read stream will **not be owned** by the parser, it will still be managed (i.e. closed if end-of-stream is reacher, or parser close method called) if (and only if) <xref uid=\"com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE\"></xref> is enabled."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.Reader)"
  parameters:
  - description: "Reader to use for reading JSON content to parse"
    name: "r"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(Reader r)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(String content)"
  name: "createParser(String content)"
  nameWithType: "JsonFactory.createParser(String content)"
  summary: "Method for constructing parser for parsing contents of given String."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.lang.String)"
  parameters:
  - name: "content"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(String content)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)"
  fullName: "com.fasterxml.jackson.core.JsonFactory.createParser(URL url)"
  name: "createParser(URL url)"
  nameWithType: "JsonFactory.createParser(URL url)"
  summary: "Method for constructing JSON parser instance to parse contents of resource reference by given URL.\n\nEncoding is auto-detected from contents according to JSON specification recommended mechanism. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#createParser(java.io.Reader)\"></xref>.\n\nUnderlying input stream (needed for reading contents) will be **owned** (and managed, i.e. closed as need be) by the parser, since caller has no access to it."
  overridden: "com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.net.URL)"
  parameters:
  - description: "URL pointing to resource that contains JSON content to parse"
    name: "url"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonParser createParser(URL url)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
