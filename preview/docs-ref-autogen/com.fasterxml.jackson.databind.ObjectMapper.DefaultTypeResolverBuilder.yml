### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder"
name: "ObjectMapper.DefaultTypeResolverBuilder"
nameWithType: "ObjectMapper.DefaultTypeResolverBuilder"
summary: "Customized <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeResolverBuilder\"></xref> that provides type resolver builders used with so-called \"default typing\" (see <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.activateDefaultTyping(com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper#activateDefaultTyping(PolymorphicTypeValidator)\"></xref> for details).\n\nType resolver construction is based on configuration: implementation takes care of only providing builders in cases where type information should be applied. This is important since build calls may be sent for any and all types, and type information should NOT be applied to all of them."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.allowPrimitiveTypes(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.defaultImpl(java.lang.Class<?>)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.defineDefaultImpl(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.getDefaultImpl()"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.getTypeProperty()"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>,boolean,boolean)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.isTypeIdVisible()"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder()"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.reportInvalidBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig<?>)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.typeIdVisibility(boolean)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.typeProperty(java.lang.String)"
- "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.verifyBaseTypeValidity(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public static class ObjectMapper.DefaultTypeResolverBuilder extends StdTypeResolverBuilder implements Serializable"
constructors:
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.DefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.DefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)"
fields:
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder._appliesFor"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder._subtypeValidator"
methods:
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.construct(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.subTypeValidator(com.fasterxml.jackson.databind.cfg.MapperConfig<?>)"
- "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder.useForType(com.fasterxml.jackson.databind.JavaType)"
type: "class"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
