### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  id: JsonDeserialize
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation
  children:
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.as()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.builder()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentAs()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentConverter()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentUsing()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyAs()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyUsing()
  - com.fasterxml.jackson.databind.annotation.JsonDeserialize.using()
  langs:
  - java
  name: JsonDeserialize
  nameWithType: JsonDeserialize
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  type: Interface
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Annotation use for configuring deserialization aspects, by attaching to "setter" methods or fields, or to value classes. When annotating value classes, configuration is used for instances of the value class but can be overridden by more specific annotations (ones that attach to methods or fields).


    An example annotation would be:


    ```java

    @JsonDeserialize(using=MySerializer.class,
        as=MyHashMap.class,
        keyAs=MyHashKey.class,
        contentAs=MyHashValue.class
      )
    ```


    Something to note on usage:

     *  All other annotations regarding behavior during building should be on **Builder** class and NOT on target POJO class: for example @JsonIgnoreProperties should be on Builder to prevent "unknown property" errors.
     *  Similarly configuration overrides (see <xref uid="com.fasterxml.jackson.databind.ObjectMapper.configOverride" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ObjectMapper#configOverride</xref>) should be targeted at Builder class, not target POJO class.
  syntax:
    content: public interface JsonDeserialize implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.as()
  id: as()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: as()
  nameWithType: JsonDeserialize.as()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.as()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.as*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: >-
    Concrete type to deserialize values as, instead of type otherwise declared. Must be a subtype of declared type; otherwise an exception may be thrown by deserializer.


    Bogus type <xref uid="" data-throw-if-not-resolved="false">Void</xref> can be used to indicate that declared type is used as is (i.e. this annotation property has no setting); this since annotation properties are not allowed to have null value.


    Note: if <xref uid="com.fasterxml.jackson.databind.annotation.JsonDeserialize.using*" data-throw-if-not-resolved="false">#using</xref> is also used it has precedence (since it directly specified deserializer, whereas this would only be used to locate the deserializer) and value of this annotation property is ignored.
  syntax:
    content: public abstract Class<?> as()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.builder()
  id: builder()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: builder()
  nameWithType: JsonDeserialize.builder()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.builder()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.builder*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Annotation for specifying if an external Builder class is to be used for building up deserialized instances of annotated class. If so, an instance of referenced class is first constructed (possibly using a Creator method; or if none defined, using default constructor), and its "with-methods" are used for populating fields; and finally "build-method" is invoked to complete deserialization.
  syntax:
    content: public abstract Class<?> builder()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentAs()
  id: contentAs()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: contentAs()
  nameWithType: JsonDeserialize.contentAs()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentAs()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentAs*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Concrete type to deserialize content (elements of a Collection/array, values of Maps) values as, instead of type otherwise declared. Must be a subtype of declared type; otherwise an exception may be thrown by deserializer.
  syntax:
    content: public abstract Class<?> contentAs()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentConverter()
  id: contentConverter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: contentConverter()
  nameWithType: JsonDeserialize.contentConverter()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentConverter()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentConverter*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Similar to <xref uid="com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter*" data-throw-if-not-resolved="false">#converter</xref>, but used for values of structures types (List, arrays, Maps).
  syntax:
    content: public abstract Class<? extends Converter> contentConverter()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.util.Converter>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentUsing()
  id: contentUsing()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: contentUsing()
  nameWithType: JsonDeserialize.contentUsing()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentUsing()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentUsing*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Deserializer class to use for deserializing contents (elements of a Collection/array, values of Maps) of annotated property. Can only be used on instances (methods, fields, constructors), and not value classes themselves.
  syntax:
    content: public abstract Class<? extends JsonDeserializer> contentUsing()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter()
  id: converter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: converter()
  nameWithType: JsonDeserialize.converter()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Which helper object (if any) is to be used to convert from Jackson-bound intermediate type (source type of converter) into actual property type (which must be same as result type of converter). This is often used for two-step deserialization; Jackson binds data into suitable intermediate type (like Tree representation), and converter then builds actual property type.
  syntax:
    content: public abstract Class<? extends Converter> converter()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.util.Converter>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyAs()
  id: keyAs()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: keyAs()
  nameWithType: JsonDeserialize.keyAs()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyAs()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyAs*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Concrete type to deserialize keys of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> as, instead of type otherwise declared. Must be a subtype of declared type; otherwise an exception may be thrown by deserializer.
  syntax:
    content: public abstract Class<?> keyAs()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyUsing()
  id: keyUsing()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: keyUsing()
  nameWithType: JsonDeserialize.keyUsing()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyUsing()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyUsing*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Deserializer class to use for deserializing Map keys of annotated property. Can only be used on instances (methods, fields, constructors), and not value classes themselves.
  syntax:
    content: public abstract Class<? extends KeyDeserializer> keyUsing()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.KeyDeserializer>
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.using()
  id: using()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.annotation.JsonDeserialize
  langs:
  - java
  name: using()
  nameWithType: JsonDeserialize.using()
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.using()
  overload: com.fasterxml.jackson.databind.annotation.JsonDeserialize.using*
  type: Method
  package: com.fasterxml.jackson.databind.annotation
  summary: Deserializer class to use for deserializing associated value. Depending on what is annotated, value is either an instance of annotated class (used globablly anywhere where class deserializer is needed); or only used for deserializing property access via a setter method.
  syntax:
    content: public abstract Class<? extends JsonDeserializer> using()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer>
references:
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.JsonDeserializer>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.JsonDeserializer'
    name: JsonDeserializer
    fullName: '? extends com.fasterxml.jackson.databind.JsonDeserializer'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.using*
  name: using
  nameWithType: JsonDeserialize.using
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.using
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentUsing*
  name: contentUsing
  nameWithType: JsonDeserialize.contentUsing
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentUsing
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.KeyDeserializer>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.KeyDeserializer'
    name: KeyDeserializer
    fullName: '? extends com.fasterxml.jackson.databind.KeyDeserializer'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyUsing*
  name: keyUsing
  nameWithType: JsonDeserialize.keyUsing
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyUsing
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.builder*
  name: builder
  nameWithType: JsonDeserialize.builder
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.builder
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.Class<? extends com.fasterxml.jackson.databind.util.Converter>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.databind.util.Converter'
    name: Converter
    fullName: '? extends com.fasterxml.jackson.databind.util.Converter'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter*
  name: converter
  nameWithType: JsonDeserialize.converter
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.converter
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentConverter*
  name: contentConverter
  nameWithType: JsonDeserialize.contentConverter
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentConverter
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.as*
  name: as
  nameWithType: JsonDeserialize.as
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.as
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyAs*
  name: keyAs
  nameWithType: JsonDeserialize.keyAs
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.keyAs
  package: com.fasterxml.jackson.databind.annotation
- uid: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentAs*
  name: contentAs
  nameWithType: JsonDeserialize.contentAs
  fullName: com.fasterxml.jackson.databind.annotation.JsonDeserialize.contentAs
  package: com.fasterxml.jackson.databind.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: '? extends com.fasterxml.jackson.databind.JsonDeserializer'
  name: '? extends JsonDeserializer'
  nameWithType: '? extends JsonDeserializer'
  fullName: '? extends com.fasterxml.jackson.databind.JsonDeserializer'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '? extends com.fasterxml.jackson.databind.KeyDeserializer'
  name: '? extends KeyDeserializer'
  nameWithType: '? extends KeyDeserializer'
  fullName: '? extends com.fasterxml.jackson.databind.KeyDeserializer'
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? extends com.fasterxml.jackson.databind.util.Converter'
  name: '? extends Converter'
  nameWithType: '? extends Converter'
  fullName: '? extends com.fasterxml.jackson.databind.util.Converter'
