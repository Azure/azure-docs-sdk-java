### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.implementation.query.QueryInfo"
  id: "QueryInfo"
  parent: "com.azure.cosmos.implementation.query"
  children:
  - "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo()"
  - "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo(com.fasterxml.jackson.databind.node.ObjectNode)"
  - "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo(java.lang.String)"
  - "com.azure.cosmos.implementation.query.QueryInfo.getAggregates()"
  - "com.azure.cosmos.implementation.query.QueryInfo.getLimit()"
  - "com.azure.cosmos.implementation.query.QueryInfo.getOffset()"
  - "com.azure.cosmos.implementation.query.QueryInfo.getOrderBy()"
  - "com.azure.cosmos.implementation.query.QueryInfo.getOrderByExpressions()"
  - "com.azure.cosmos.implementation.query.QueryInfo.getRewrittenQuery()"
  - "com.azure.cosmos.implementation.query.QueryInfo.getTop()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasAggregates()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasLimit()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasOffset()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasOrderBy()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasRewrittenQuery()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasSelectValue()"
  - "com.azure.cosmos.implementation.query.QueryInfo.hasTop()"
  langs:
  - "java"
  name: "QueryInfo"
  nameWithType: "QueryInfo"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo"
  type: "Class"
  package: "com.azure.cosmos.implementation.query"
  summary: "Used internally to encapsulates a query's information in the Azure Cosmos DB database service."
  syntax:
    content: "public final class QueryInfo extends JsonSerializable"
  inheritance:
  - "java.lang.Object"
  - "com.azure.cosmos.models.JsonSerializable"
  inheritedMembers:
  - "com.azure.cosmos.models.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.models.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.models.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
  - "com.azure.cosmos.models.JsonSerializable.<T>set(java.lang.String,T)"
  - "com.azure.cosmos.models.JsonSerializable.<T>toObject(java.lang.Class<T>)"
  - "com.azure.cosmos.models.JsonSerializable.get(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getBoolean(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getCollection(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getDouble(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getInt(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getLogger()"
  - "com.azure.cosmos.models.JsonSerializable.getLong(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getMap()"
  - "com.azure.cosmos.models.JsonSerializable.getObject(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
  - "com.azure.cosmos.models.JsonSerializable.getPropertyBag()"
  - "com.azure.cosmos.models.JsonSerializable.getString(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
  - "com.azure.cosmos.models.JsonSerializable.has(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.populatePropertyBag()"
  - "com.azure.cosmos.models.JsonSerializable.remove(java.lang.String)"
  - "com.azure.cosmos.models.JsonSerializable.serializeJsonToByteBuffer()"
  - "com.azure.cosmos.models.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
  - "com.azure.cosmos.models.JsonSerializable.toJson()"
  - "com.azure.cosmos.models.JsonSerializable.toJson(com.azure.cosmos.models.SerializationFormattingPolicy)"
  - "com.azure.cosmos.models.JsonSerializable.toString()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo()"
  id: "QueryInfo()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "QueryInfo()"
  nameWithType: "QueryInfo.QueryInfo()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public QueryInfo()"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo(com.fasterxml.jackson.databind.node.ObjectNode)"
  id: "QueryInfo(com.fasterxml.jackson.databind.node.ObjectNode)"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "QueryInfo(ObjectNode objectNode)"
  nameWithType: "QueryInfo.QueryInfo(ObjectNode objectNode)"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo(ObjectNode objectNode)"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.query"
  summary: "Constructor."
  syntax:
    content: "public QueryInfo(ObjectNode objectNode)"
    parameters:
    - id: "objectNode"
      type: "com.fasterxml.jackson.databind.node.ObjectNode"
      description: "the <xref uid=\"\" data-throw-if-not-resolved=\"false\">ObjectNode</xref> that represent the\n <xref uid=\"com.azure.cosmos.models.JsonSerializable\" data-throw-if-not-resolved=\"false\">JsonSerializable</xref>"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo(java.lang.String)"
  id: "QueryInfo(java.lang.String)"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "QueryInfo(String jsonString)"
  nameWithType: "QueryInfo.QueryInfo(String jsonString)"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo(String jsonString)"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo*"
  type: "Constructor"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public QueryInfo(String jsonString)"
    parameters:
    - id: "jsonString"
      type: "java.lang.String"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getAggregates()"
  id: "getAggregates()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getAggregates()"
  nameWithType: "QueryInfo.getAggregates()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getAggregates()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getAggregates*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public Collection<AggregateOperator> getAggregates()"
    return:
      type: "java.util.Collection<com.azure.cosmos.implementation.query.aggregation.AggregateOperator>"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getLimit()"
  id: "getLimit()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getLimit()"
  nameWithType: "QueryInfo.getLimit()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getLimit()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getLimit*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public Integer getLimit()"
    return:
      type: "java.lang.Integer"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getOffset()"
  id: "getOffset()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getOffset()"
  nameWithType: "QueryInfo.getOffset()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getOffset()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getOffset*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public Integer getOffset()"
    return:
      type: "java.lang.Integer"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getOrderBy()"
  id: "getOrderBy()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getOrderBy()"
  nameWithType: "QueryInfo.getOrderBy()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getOrderBy()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getOrderBy*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public List<SortOrder> getOrderBy()"
    return:
      type: "java.util.List<com.azure.cosmos.implementation.query.SortOrder>"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getOrderByExpressions()"
  id: "getOrderByExpressions()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getOrderByExpressions()"
  nameWithType: "QueryInfo.getOrderByExpressions()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getOrderByExpressions()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getOrderByExpressions*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public Collection<String> getOrderByExpressions()"
    return:
      type: "java.util.Collection<java.lang.String>"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getRewrittenQuery()"
  id: "getRewrittenQuery()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getRewrittenQuery()"
  nameWithType: "QueryInfo.getRewrittenQuery()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getRewrittenQuery()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getRewrittenQuery*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public String getRewrittenQuery()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getTop()"
  id: "getTop()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "getTop()"
  nameWithType: "QueryInfo.getTop()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getTop()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.getTop*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public Integer getTop()"
    return:
      type: "java.lang.Integer"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasAggregates()"
  id: "hasAggregates()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasAggregates()"
  nameWithType: "QueryInfo.hasAggregates()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasAggregates()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasAggregates*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasAggregates()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasLimit()"
  id: "hasLimit()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasLimit()"
  nameWithType: "QueryInfo.hasLimit()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasLimit()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasLimit*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasLimit()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasOffset()"
  id: "hasOffset()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasOffset()"
  nameWithType: "QueryInfo.hasOffset()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasOffset()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasOffset*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasOffset()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasOrderBy()"
  id: "hasOrderBy()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasOrderBy()"
  nameWithType: "QueryInfo.hasOrderBy()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasOrderBy()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasOrderBy*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasOrderBy()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasRewrittenQuery()"
  id: "hasRewrittenQuery()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasRewrittenQuery()"
  nameWithType: "QueryInfo.hasRewrittenQuery()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasRewrittenQuery()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasRewrittenQuery*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasRewrittenQuery()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasSelectValue()"
  id: "hasSelectValue()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasSelectValue()"
  nameWithType: "QueryInfo.hasSelectValue()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasSelectValue()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasSelectValue*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasSelectValue()"
    return:
      type: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasTop()"
  id: "hasTop()"
  parent: "com.azure.cosmos.implementation.query.QueryInfo"
  langs:
  - "java"
  name: "hasTop()"
  nameWithType: "QueryInfo.hasTop()"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasTop()"
  overload: "com.azure.cosmos.implementation.query.QueryInfo.hasTop*"
  type: "Method"
  package: "com.azure.cosmos.implementation.query"
  syntax:
    content: "public boolean hasTop()"
    return:
      type: "boolean"
references:
- uid: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo*"
  name: "QueryInfo"
  nameWithType: "QueryInfo.QueryInfo"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.QueryInfo"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.fasterxml.jackson.databind.node.ObjectNode"
  spec.java:
  - uid: "com.fasterxml.jackson.databind.node.ObjectNode"
    name: "ObjectNode"
    fullName: "com.fasterxml.jackson.databind.node.ObjectNode"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getTop*"
  name: "getTop"
  nameWithType: "QueryInfo.getTop"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getTop"
  package: "com.azure.cosmos.implementation.query"
- uid: "java.util.List<com.azure.cosmos.implementation.query.SortOrder>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.implementation.query.SortOrder"
    name: "SortOrder"
    fullName: "com.azure.cosmos.implementation.query.SortOrder"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getOrderBy*"
  name: "getOrderBy"
  nameWithType: "QueryInfo.getOrderBy"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getOrderBy"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getRewrittenQuery*"
  name: "getRewrittenQuery"
  nameWithType: "QueryInfo.getRewrittenQuery"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getRewrittenQuery"
  package: "com.azure.cosmos.implementation.query"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasTop*"
  name: "hasTop"
  nameWithType: "QueryInfo.hasTop"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasTop"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasOrderBy*"
  name: "hasOrderBy"
  nameWithType: "QueryInfo.hasOrderBy"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasOrderBy"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasRewrittenQuery*"
  name: "hasRewrittenQuery"
  nameWithType: "QueryInfo.hasRewrittenQuery"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasRewrittenQuery"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasAggregates*"
  name: "hasAggregates"
  nameWithType: "QueryInfo.hasAggregates"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasAggregates"
  package: "com.azure.cosmos.implementation.query"
- uid: "java.util.Collection<com.azure.cosmos.implementation.query.aggregation.AggregateOperator>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.implementation.query.aggregation.AggregateOperator"
    name: "AggregateOperator"
    fullName: "com.azure.cosmos.implementation.query.aggregation.AggregateOperator"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getAggregates*"
  name: "getAggregates"
  nameWithType: "QueryInfo.getAggregates"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getAggregates"
  package: "com.azure.cosmos.implementation.query"
- uid: "java.util.Collection<java.lang.String>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getOrderByExpressions*"
  name: "getOrderByExpressions"
  nameWithType: "QueryInfo.getOrderByExpressions"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getOrderByExpressions"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasSelectValue*"
  name: "hasSelectValue"
  nameWithType: "QueryInfo.hasSelectValue"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasSelectValue"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasOffset*"
  name: "hasOffset"
  nameWithType: "QueryInfo.hasOffset"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasOffset"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.hasLimit*"
  name: "hasLimit"
  nameWithType: "QueryInfo.hasLimit"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.hasLimit"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getLimit*"
  name: "getLimit"
  nameWithType: "QueryInfo.getLimit"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getLimit"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.implementation.query.QueryInfo.getOffset*"
  name: "getOffset"
  nameWithType: "QueryInfo.getOffset"
  fullName: "com.azure.cosmos.implementation.query.QueryInfo.getOffset"
  package: "com.azure.cosmos.implementation.query"
- uid: "com.azure.cosmos.models.JsonSerializable"
  name: "JsonSerializable"
  nameWithType: "JsonSerializable"
  fullName: "com.azure.cosmos.models.JsonSerializable"
- uid: "com.azure.cosmos.models.JsonSerializable.<T>set(java.lang.String,T)"
  name: "JsonSerializable.<T>set(String,T)"
  nameWithType: "JsonSerializable.<T>set(String,T)"
  fullName: "com.azure.cosmos.models.JsonSerializable.<T>set(java.lang.String,T)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.cosmos.models.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
  name: "JsonSerializable.getObjectByPath(List<String>)"
  nameWithType: "JsonSerializable.getObjectByPath(List<String>)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getObjectByPath(java.util.List<java.lang.String>)"
- uid: "com.azure.cosmos.models.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getObject(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getObject(String,Class<T>,)"
  fullName: "com.azure.cosmos.models.JsonSerializable.<T>getObject(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "com.azure.cosmos.models.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getList(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getList(String,Class<T>,)"
  fullName: "com.azure.cosmos.models.JsonSerializable.<T>getList(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "com.azure.cosmos.models.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
  name: "JsonSerializable.getValue(JsonNode)"
  nameWithType: "JsonSerializable.getValue(JsonNode)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getValue(com.fasterxml.jackson.databind.JsonNode)"
- uid: "com.azure.cosmos.models.JsonSerializable.serializeJsonToByteBuffer()"
  name: "JsonSerializable.serializeJsonToByteBuffer()"
  nameWithType: "JsonSerializable.serializeJsonToByteBuffer()"
  fullName: "com.azure.cosmos.models.JsonSerializable.serializeJsonToByteBuffer()"
- uid: "com.azure.cosmos.models.JsonSerializable.get(java.lang.String)"
  name: "JsonSerializable.get(String)"
  nameWithType: "JsonSerializable.get(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.get(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.getPropertyBag()"
  name: "JsonSerializable.getPropertyBag()"
  nameWithType: "JsonSerializable.getPropertyBag()"
  fullName: "com.azure.cosmos.models.JsonSerializable.getPropertyBag()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "com.azure.cosmos.models.JsonSerializable.getInt(java.lang.String)"
  name: "JsonSerializable.getInt(String)"
  nameWithType: "JsonSerializable.getInt(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getInt(java.lang.String)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "com.azure.cosmos.models.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
  name: "JsonSerializable.setMapper(ObjectMapper)"
  nameWithType: "JsonSerializable.setMapper(ObjectMapper)"
  fullName: "com.azure.cosmos.models.JsonSerializable.setMapper(com.fasterxml.jackson.databind.ObjectMapper)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.models.JsonSerializable.<T>toObject(java.lang.Class<T>)"
  name: "JsonSerializable.<T>toObject(Class<T>)"
  nameWithType: "JsonSerializable.<T>toObject(Class<T>)"
  fullName: "com.azure.cosmos.models.JsonSerializable.<T>toObject(java.lang.Class<T>)"
- uid: "com.azure.cosmos.models.JsonSerializable.getMap()"
  name: "JsonSerializable.getMap()"
  nameWithType: "JsonSerializable.getMap()"
  fullName: "com.azure.cosmos.models.JsonSerializable.getMap()"
- uid: "com.azure.cosmos.models.JsonSerializable.toJson()"
  name: "JsonSerializable.toJson()"
  nameWithType: "JsonSerializable.toJson()"
  fullName: "com.azure.cosmos.models.JsonSerializable.toJson()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "com.azure.cosmos.models.JsonSerializable.getBoolean(java.lang.String)"
  name: "JsonSerializable.getBoolean(String)"
  nameWithType: "JsonSerializable.getBoolean(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getBoolean(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.getDouble(java.lang.String)"
  name: "JsonSerializable.getDouble(String)"
  nameWithType: "JsonSerializable.getDouble(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getDouble(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.remove(java.lang.String)"
  name: "JsonSerializable.remove(String)"
  nameWithType: "JsonSerializable.remove(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.remove(java.lang.String)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "com.azure.cosmos.models.JsonSerializable.toJson(com.azure.cosmos.models.SerializationFormattingPolicy)"
  name: "JsonSerializable.toJson(SerializationFormattingPolicy)"
  nameWithType: "JsonSerializable.toJson(SerializationFormattingPolicy)"
  fullName: "com.azure.cosmos.models.JsonSerializable.toJson(com.azure.cosmos.models.SerializationFormattingPolicy)"
- uid: "com.azure.cosmos.models.JsonSerializable.getLong(java.lang.String)"
  name: "JsonSerializable.getLong(String)"
  nameWithType: "JsonSerializable.getLong(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getLong(java.lang.String)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.cosmos.models.JsonSerializable.toString()"
  name: "JsonSerializable.toString()"
  nameWithType: "JsonSerializable.toString()"
  fullName: "com.azure.cosmos.models.JsonSerializable.toString()"
- uid: "com.azure.cosmos.models.JsonSerializable.populatePropertyBag()"
  name: "JsonSerializable.populatePropertyBag()"
  nameWithType: "JsonSerializable.populatePropertyBag()"
  fullName: "com.azure.cosmos.models.JsonSerializable.populatePropertyBag()"
- uid: "com.azure.cosmos.models.JsonSerializable.has(java.lang.String)"
  name: "JsonSerializable.has(String)"
  nameWithType: "JsonSerializable.has(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.has(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.getString(java.lang.String)"
  name: "JsonSerializable.getString(String)"
  nameWithType: "JsonSerializable.getString(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getString(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.getCollection(java.lang.String)"
  name: "JsonSerializable.getCollection(String)"
  nameWithType: "JsonSerializable.getCollection(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getCollection(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.getObject(java.lang.String)"
  name: "JsonSerializable.getObject(String)"
  nameWithType: "JsonSerializable.getObject(String)"
  fullName: "com.azure.cosmos.models.JsonSerializable.getObject(java.lang.String)"
- uid: "com.azure.cosmos.models.JsonSerializable.getLogger()"
  name: "JsonSerializable.getLogger()"
  nameWithType: "JsonSerializable.getLogger()"
  fullName: "com.azure.cosmos.models.JsonSerializable.getLogger()"
- uid: "com.azure.cosmos.models.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
  name: "JsonSerializable.<T>getCollection(String,Class<T>,)"
  nameWithType: "JsonSerializable.<T>getCollection(String,Class<T>,)"
  fullName: "com.azure.cosmos.models.JsonSerializable.<T>getCollection(java.lang.String,java.lang.Class<T>,boolean...)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.cosmos.implementation.query.SortOrder"
  name: "SortOrder"
  nameWithType: "SortOrder"
  fullName: "com.azure.cosmos.implementation.query.SortOrder"
- uid: "java.util.Collection"
  name: "Collection"
  nameWithType: "Collection"
  fullName: "java.util.Collection"
- uid: "com.azure.cosmos.implementation.query.aggregation.AggregateOperator"
  name: "AggregateOperator"
  nameWithType: "AggregateOperator"
  fullName: "com.azure.cosmos.implementation.query.aggregation.AggregateOperator"
- uid: "com.azure.cosmos.models.JsonSerializable."
  name: "JsonSerializable."
  nameWithType: "JsonSerializable."
  fullName: "com.azure.cosmos.models.JsonSerializable."
- uid: "T>set(java.lang.String,T)"
  name: "T>set(String,T)"
  nameWithType: "T>set(String,T)"
  fullName: "T>set(java.lang.String,T)"
- uid: "com.azure.cosmos.models.JsonSerializable.getObjectByPath(java.util.List"
  name: "JsonSerializable.getObjectByPath(List"
  nameWithType: "JsonSerializable.getObjectByPath(List"
  fullName: "com.azure.cosmos.models.JsonSerializable.getObjectByPath(java.util.List"
- uid: "java.lang.String>)"
  name: "String>)"
  nameWithType: "String>)"
  fullName: "java.lang.String>)"
- uid: "T>,boolean...)"
  name: "T>,)"
  nameWithType: "T>,)"
  fullName: "T>,boolean...)"
- uid: "T>getObject(java.lang.String,java.lang.Class"
  name: "T>getObject(String,Class"
  nameWithType: "T>getObject(String,Class"
  fullName: "T>getObject(java.lang.String,java.lang.Class"
- uid: "T>getList(java.lang.String,java.lang.Class"
  name: "T>getList(String,Class"
  nameWithType: "T>getList(String,Class"
  fullName: "T>getList(java.lang.String,java.lang.Class"
- uid: "T>toObject(java.lang.Class"
  name: "T>toObject(Class"
  nameWithType: "T>toObject(Class"
  fullName: "T>toObject(java.lang.Class"
- uid: "T>)"
  name: "T>)"
  nameWithType: "T>)"
  fullName: "T>)"
- uid: "T>getCollection(java.lang.String,java.lang.Class"
  name: "T>getCollection(String,Class"
  nameWithType: "T>getCollection(String,Class"
  fullName: "T>getCollection(java.lang.String,java.lang.Class"
