### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap"
fullName: "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>"
name: "CaseInsensitiveHashMap<V>"
nameWithType: "CaseInsensitiveHashMap<V>"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.AbstractMap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.HashMap\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.util.AbstractMap.equals(java.lang.Object)"
- "java.util.AbstractMap.hashCode()"
- "java.util.AbstractMap.toString()"
- "java.util.HashMap.clear()"
- "java.util.HashMap.clone()"
- "java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- "java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.HashMap.containsKey(java.lang.Object)"
- "java.util.HashMap.containsValue(java.lang.Object)"
- "java.util.HashMap.entrySet()"
- "java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "java.util.HashMap.get(java.lang.Object)"
- "java.util.HashMap.getOrDefault(java.lang.Object,V)"
- "java.util.HashMap.isEmpty()"
- "java.util.HashMap.keySet()"
- "java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "java.util.HashMap.put(K,V)"
- "java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)"
- "java.util.HashMap.putIfAbsent(K,V)"
- "java.util.HashMap.remove(java.lang.Object)"
- "java.util.HashMap.remove(java.lang.Object,java.lang.Object)"
- "java.util.HashMap.replace(K,V)"
- "java.util.HashMap.replace(K,V,V)"
- "java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.HashMap.size()"
- "java.util.HashMap.values()"
syntax: "public class CaseInsensitiveHashMap<V> extends HashMap<String,V>"
constructors:
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.CaseInsensitiveHashMap()"
methods:
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.compute(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfAbsent(java.lang.String,java.util.function.Function<? super java.lang.String,? extends V>)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfPresent(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.get(java.lang.Object)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.put(java.lang.String,V)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putAll(java.util.Map<? extends java.lang.String,? extends V>)"
- "com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putIfAbsent(java.lang.String,V)"
type: "class"
typeParameters:
- name: "V"
metadata: {}
package: "com.azure.cosmos.implementation.routing"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
