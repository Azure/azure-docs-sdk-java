### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  id: CaseInsensitiveHashMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing
  children:
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.CaseInsensitiveHashMap()
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.compute(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfAbsent(java.lang.String,java.util.function.Function<? super java.lang.String,? extends V>)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfPresent(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.put(java.lang.String,V)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putAll(java.util.Map<? extends java.lang.String,? extends V>)
  - com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putIfAbsent(java.lang.String,V)
  langs:
  - java
  name: CaseInsensitiveHashMap<V>
  nameWithType: CaseInsensitiveHashMap<V>
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>
  type: Class
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public class CaseInsensitiveHashMap<V> extends HashMap<String,V>
    typeParameters:
    - id: V
  inheritance:
  - java.lang.Object
  - java.util.AbstractMap
  - java.util.HashMap
  inheritedMembers:
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractMap.equals(java.lang.Object)
  - java.util.AbstractMap.hashCode()
  - java.util.AbstractMap.toString()
  - java.util.HashMap.clear()
  - java.util.HashMap.clone()
  - java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  - java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.HashMap.containsKey(java.lang.Object)
  - java.util.HashMap.containsValue(java.lang.Object)
  - java.util.HashMap.entrySet()
  - java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - java.util.HashMap.get(java.lang.Object)
  - java.util.HashMap.getOrDefault(java.lang.Object,V)
  - java.util.HashMap.isEmpty()
  - java.util.HashMap.keySet()
  - java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - java.util.HashMap.put(K,V)
  - java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)
  - java.util.HashMap.putIfAbsent(K,V)
  - java.util.HashMap.remove(java.lang.Object)
  - java.util.HashMap.remove(java.lang.Object,java.lang.Object)
  - java.util.HashMap.replace(K,V)
  - java.util.HashMap.replace(K,V,V)
  - java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.HashMap.size()
  - java.util.HashMap.values()
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.CaseInsensitiveHashMap()
  id: CaseInsensitiveHashMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: CaseInsensitiveHashMap()
  nameWithType: CaseInsensitiveHashMap<V>.CaseInsensitiveHashMap()
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.CaseInsensitiveHashMap()
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.CaseInsensitiveHashMap*
  type: Constructor
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public CaseInsensitiveHashMap()
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.compute(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)
  id: compute(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: compute(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
  nameWithType: CaseInsensitiveHashMap<V>.compute(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.compute(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.compute*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public V compute(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
    parameters:
    - id: key
      type: java.lang.String
    - id: remappingFunction
      type: java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfAbsent(java.lang.String,java.util.function.Function<? super java.lang.String,? extends V>)
  id: computeIfAbsent(java.lang.String,java.util.function.Function<? super java.lang.String,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: computeIfAbsent(String key, Function<? super String,? extends V> mappingFunction)
  nameWithType: CaseInsensitiveHashMap<V>.computeIfAbsent(String key, Function<? super String,? extends V> mappingFunction)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.computeIfAbsent(String key, Function<? super String,? extends V> mappingFunction)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfAbsent*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public V computeIfAbsent(String key, Function<? super String,? extends V> mappingFunction)
    parameters:
    - id: key
      type: java.lang.String
    - id: mappingFunction
      type: java.util.function.Function<? super java.lang.String,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfPresent(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)
  id: computeIfPresent(java.lang.String,java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: computeIfPresent(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
  nameWithType: CaseInsensitiveHashMap<V>.computeIfPresent(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.computeIfPresent(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfPresent*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public V computeIfPresent(String key, BiFunction<? super String,? super V,? extends V> remappingFunction)
    parameters:
    - id: key
      type: java.lang.String
    - id: remappingFunction
      type: java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>
    return:
      type: V
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: CaseInsensitiveHashMap<V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.get(java.lang.Object)
  id: get(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: get(Object key)
  nameWithType: CaseInsensitiveHashMap<V>.get(Object key)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.get(Object key)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.get*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public V get(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: V
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.put(java.lang.String,V)
  id: put(java.lang.String,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: put(String key, V value)
  nameWithType: CaseInsensitiveHashMap<V>.put(String key, V value)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.put(String key, V value)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.put*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public V put(String key, V value)
    parameters:
    - id: key
      type: java.lang.String
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putAll(java.util.Map<? extends java.lang.String,? extends V>)
  id: putAll(java.util.Map<? extends java.lang.String,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: putAll(Map<? extends String,? extends V> m)
  nameWithType: CaseInsensitiveHashMap<V>.putAll(Map<? extends String,? extends V> m)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.putAll(Map<? extends String,? extends V> m)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public void putAll(Map<? extends String,? extends V> m)
    parameters:
    - id: m
      type: java.util.Map<? extends java.lang.String,? extends V>
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putIfAbsent(java.lang.String,V)
  id: putIfAbsent(java.lang.String,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap
  langs:
  - java
  name: putIfAbsent(String key, V value)
  nameWithType: CaseInsensitiveHashMap<V>.putIfAbsent(String key, V value)
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.putIfAbsent(String key, V value)
  overload: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putIfAbsent*
  type: Method
  package: com.azure.cosmos.implementation.routing
  syntax:
    content: public V putIfAbsent(String key, V value)
    parameters:
    - id: key
      type: java.lang.String
    - id: value
      type: V
    return:
      type: V
references:
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.CaseInsensitiveHashMap*
  name: CaseInsensitiveHashMap
  nameWithType: CaseInsensitiveHashMap<V>.CaseInsensitiveHashMap
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.CaseInsensitiveHashMap
  package: com.azure.cosmos.implementation.routing
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.get*
  name: get
  nameWithType: CaseInsensitiveHashMap<V>.get
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.get
  package: com.azure.cosmos.implementation.routing
- uid: java.util.Map<? extends java.lang.String,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends java.lang.String'
    name: String
    fullName: '? extends java.lang.String'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putAll*
  name: putAll
  nameWithType: CaseInsensitiveHashMap<V>.putAll
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.putAll
  package: com.azure.cosmos.implementation.routing
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.put*
  name: put
  nameWithType: CaseInsensitiveHashMap<V>.put
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.put
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.putIfAbsent*
  name: putIfAbsent
  nameWithType: CaseInsensitiveHashMap<V>.putIfAbsent
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.putIfAbsent
  package: com.azure.cosmos.implementation.routing
- uid: java.util.function.BiFunction<? super java.lang.String,? super V,? extends V>
  spec.java:
  - uid: java.util.function.BiFunction
    name: BiFunction
    fullName: java.util.function.BiFunction
  - name: <
    fullName: <
  - uid: '? super java.lang.String'
    name: String
    fullName: '? super java.lang.String'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.compute*
  name: compute
  nameWithType: CaseInsensitiveHashMap<V>.compute
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.compute
  package: com.azure.cosmos.implementation.routing
- uid: java.util.function.Function<? super java.lang.String,? extends V>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super java.lang.String'
    name: String
    fullName: '? super java.lang.String'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfAbsent*
  name: computeIfAbsent
  nameWithType: CaseInsensitiveHashMap<V>.computeIfAbsent
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.computeIfAbsent
  package: com.azure.cosmos.implementation.routing
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.computeIfPresent*
  name: computeIfPresent
  nameWithType: CaseInsensitiveHashMap<V>.computeIfPresent
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.computeIfPresent
  package: com.azure.cosmos.implementation.routing
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap.containsKey*
  name: containsKey
  nameWithType: CaseInsensitiveHashMap<V>.containsKey
  fullName: com.azure.cosmos.implementation.routing.CaseInsensitiveHashMap<V>.containsKey
  package: com.azure.cosmos.implementation.routing
- uid: java.util.HashMap<java.lang.String,V>
  name: HashMap<String,V>
  nameWithType: HashMap<String,V>
  fullName: java.util.HashMap<java.lang.String,V>
- uid: java.util.HashMap.get(java.lang.Object)
  name: HashMap.get(Object)
  nameWithType: HashMap.get(Object)
  fullName: java.util.HashMap.get(java.lang.Object)
- uid: java.util.HashMap.remove(java.lang.Object,java.lang.Object)
  name: HashMap.remove(Object,Object)
  nameWithType: HashMap.remove(Object,Object)
  fullName: java.util.HashMap.remove(java.lang.Object,java.lang.Object)
- uid: java.util.HashMap.remove(java.lang.Object)
  name: HashMap.remove(Object)
  nameWithType: HashMap.remove(Object)
  fullName: java.util.HashMap.remove(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  name: HashMap.forEach(BiConsumer<? super K,? super V>)
  nameWithType: HashMap.forEach(BiConsumer<? super K,? super V>)
  fullName: java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
- uid: java.util.HashMap.putIfAbsent(K,V)
  name: HashMap.putIfAbsent(K,V)
  nameWithType: HashMap.putIfAbsent(K,V)
  fullName: java.util.HashMap.putIfAbsent(K,V)
- uid: java.util.AbstractMap.toString()
  name: AbstractMap.toString()
  nameWithType: AbstractMap.toString()
  fullName: java.util.AbstractMap.toString()
- uid: java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)
  name: HashMap.putAll(Map<? extends K,? extends V>)
  nameWithType: HashMap.putAll(Map<? extends K,? extends V>)
  fullName: java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)
- uid: java.util.HashMap.replace(K,V,V)
  name: HashMap.replace(K,V,V)
  nameWithType: HashMap.replace(K,V,V)
  fullName: java.util.HashMap.replace(K,V,V)
- uid: java.util.HashMap.containsValue(java.lang.Object)
  name: HashMap.containsValue(Object)
  nameWithType: HashMap.containsValue(Object)
  fullName: java.util.HashMap.containsValue(java.lang.Object)
- uid: java.util.HashMap.getOrDefault(java.lang.Object,V)
  name: HashMap.getOrDefault(Object,V)
  nameWithType: HashMap.getOrDefault(Object,V)
  fullName: java.util.HashMap.getOrDefault(java.lang.Object,V)
- uid: java.util.HashMap.clear()
  name: HashMap.clear()
  nameWithType: HashMap.clear()
  fullName: java.util.HashMap.clear()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: HashMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: HashMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.HashMap.size()
  name: HashMap.size()
  nameWithType: HashMap.size()
  fullName: java.util.HashMap.size()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.HashMap.put(K,V)
  name: HashMap.put(K,V)
  nameWithType: HashMap.put(K,V)
  fullName: java.util.HashMap.put(K,V)
- uid: java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: HashMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  nameWithType: HashMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.HashMap.entrySet()
  name: HashMap.entrySet()
  nameWithType: HashMap.entrySet()
  fullName: java.util.HashMap.entrySet()
- uid: java.util.HashMap.containsKey(java.lang.Object)
  name: HashMap.containsKey(Object)
  nameWithType: HashMap.containsKey(Object)
  fullName: java.util.HashMap.containsKey(java.lang.Object)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.HashMap.values()
  name: HashMap.values()
  nameWithType: HashMap.values()
  fullName: java.util.HashMap.values()
- uid: java.util.AbstractMap.hashCode()
  name: AbstractMap.hashCode()
  nameWithType: AbstractMap.hashCode()
  fullName: java.util.AbstractMap.hashCode()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: HashMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: HashMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  name: HashMap.computeIfAbsent(K,Function<? super K,? extends V>)
  nameWithType: HashMap.computeIfAbsent(K,Function<? super K,? extends V>)
  fullName: java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
- uid: java.util.HashMap.isEmpty()
  name: HashMap.isEmpty()
  nameWithType: HashMap.isEmpty()
  fullName: java.util.HashMap.isEmpty()
- uid: java.util.AbstractMap.equals(java.lang.Object)
  name: AbstractMap.equals(Object)
  nameWithType: AbstractMap.equals(Object)
  fullName: java.util.AbstractMap.equals(java.lang.Object)
- uid: java.util.HashMap.clone()
  name: HashMap.clone()
  nameWithType: HashMap.clone()
  fullName: java.util.HashMap.clone()
- uid: java.util.HashMap.replace(K,V)
  name: HashMap.replace(K,V)
  nameWithType: HashMap.replace(K,V)
  fullName: java.util.HashMap.replace(K,V)
- uid: java.util.HashMap.keySet()
  name: HashMap.keySet()
  nameWithType: HashMap.keySet()
  fullName: java.util.HashMap.keySet()
- uid: java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  name: HashMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  nameWithType: HashMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  fullName: java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends java.lang.String,? extends V'
  name: '? extends String,? extends V'
  nameWithType: '? extends String,? extends V'
  fullName: '? extends java.lang.String,? extends V'
- uid: '? super java.lang.String,? super V,? extends V'
  name: '? super String,? super V,? extends V'
  nameWithType: '? super String,? super V,? extends V'
  fullName: '? super java.lang.String,? super V,? extends V'
- uid: java.util.function.BiFunction
  name: BiFunction
  nameWithType: BiFunction
  fullName: java.util.function.BiFunction
- uid: '? super java.lang.String,? extends V'
  name: '? super String,? extends V'
  nameWithType: '? super String,? extends V'
  fullName: '? super java.lang.String,? extends V'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: java.lang.String,V
  name: String,V
  nameWithType: String,V
  fullName: java.lang.String,V
- uid: java.util.HashMap
  name: HashMap
  nameWithType: HashMap
  fullName: java.util.HashMap
- uid: '? super K,? super V>)'
  name: '? super K,? super V>)'
  nameWithType: '? super K,? super V>)'
  fullName: '? super K,? super V>)'
- uid: java.util.HashMap.forEach(java.util.function.BiConsumer
  name: HashMap.forEach(BiConsumer
  nameWithType: HashMap.forEach(BiConsumer
  fullName: java.util.HashMap.forEach(java.util.function.BiConsumer
- uid: java.util.HashMap.putAll(java.util.Map
  name: HashMap.putAll(Map
  nameWithType: HashMap.putAll(Map
  fullName: java.util.HashMap.putAll(java.util.Map
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: java.util.HashMap.compute(K,java.util.function.BiFunction
  name: HashMap.compute(K,BiFunction
  nameWithType: HashMap.compute(K,BiFunction
  fullName: java.util.HashMap.compute(K,java.util.function.BiFunction
- uid: '? super K,? super V,? extends V>)'
  name: '? super K,? super V,? extends V>)'
  nameWithType: '? super K,? super V,? extends V>)'
  fullName: '? super K,? super V,? extends V>)'
- uid: java.util.HashMap.replaceAll(java.util.function.BiFunction
  name: HashMap.replaceAll(BiFunction
  nameWithType: HashMap.replaceAll(BiFunction
  fullName: java.util.HashMap.replaceAll(java.util.function.BiFunction
- uid: java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction
  name: HashMap.computeIfPresent(K,BiFunction
  nameWithType: HashMap.computeIfPresent(K,BiFunction
  fullName: java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction
- uid: '? super K,? extends V>)'
  name: '? super K,? extends V>)'
  nameWithType: '? super K,? extends V>)'
  fullName: '? super K,? extends V>)'
- uid: java.util.HashMap.computeIfAbsent(K,java.util.function.Function
  name: HashMap.computeIfAbsent(K,Function
  nameWithType: HashMap.computeIfAbsent(K,Function
  fullName: java.util.HashMap.computeIfAbsent(K,java.util.function.Function
- uid: java.util.HashMap.merge(K,V,java.util.function.BiFunction
  name: HashMap.merge(K,V,BiFunction
  nameWithType: HashMap.merge(K,V,BiFunction
  fullName: java.util.HashMap.merge(K,V,java.util.function.BiFunction
- uid: '? super V,? super V,? extends V>)'
  name: '? super V,? super V,? extends V>)'
  nameWithType: '? super V,? super V,? extends V>)'
  fullName: '? super V,? super V,? extends V>)'
