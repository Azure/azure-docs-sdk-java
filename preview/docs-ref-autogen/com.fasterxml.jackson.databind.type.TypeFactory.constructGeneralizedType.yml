### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType"
name: "constructGeneralizedType"
nameWithType: "TypeFactory.constructGeneralizedType"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(JavaType baseType, Class<?> superClass)"
  name: "constructGeneralizedType(JavaType baseType, Class<?> superClass)"
  nameWithType: "TypeFactory.constructGeneralizedType(JavaType baseType, Class<?> superClass)"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#constructSpecializedType\"></xref>, but that creates a less-specific type of given type. Usually this is as simple as simply finding super-type with type erasure of `superClass`, but there may be need for some additional work-arounds."
  parameters:
  - name: "baseType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - name: "superClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
