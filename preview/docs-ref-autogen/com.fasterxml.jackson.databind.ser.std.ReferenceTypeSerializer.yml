### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  id: ReferenceTypeSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std
  children:
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.MARKER_FOR_EMPTY
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer(com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer(com.fasterxml.jackson.databind.type.ReferenceType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._dynamicSerializers
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferenced(T)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferencedIfPresent(T)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._isValuePresent(T)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._property
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._referredType
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._suppressNulls
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._suppressableValue
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._unwrapper
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._useStatic(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._valueSerializer
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._valueTypeSerializer
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.getReferredType()
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withContentInclusion(java.lang.Object,boolean)
  - com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.util.NameTransformer)
  langs:
  - java
  name: ReferenceTypeSerializer<T>
  nameWithType: ReferenceTypeSerializer<T>
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>
  type: Class
  package: com.fasterxml.jackson.databind.ser.std
  summary: Base implementation for values of <xref uid="com.fasterxml.jackson.databind.type.ReferenceType" data-throw-if-not-resolved="false">ReferenceType</xref>. Implements most of functionality, only leaving couple of abstract methods for sub-classes to implement.
  syntax:
    content: public abstract class ReferenceTypeSerializer<T> extends StdSerializer<T> implements ContextualSerializer
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializer
  - com.fasterxml.jackson.databind.ser.std.StdSerializer
  implements:
  - com.fasterxml.jackson.databind.ser.ContextualSerializer
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.MARKER_FOR_EMPTY
  id: MARKER_FOR_EMPTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: MARKER_FOR_EMPTY
  nameWithType: ReferenceTypeSerializer<T>.MARKER_FOR_EMPTY
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.MARKER_FOR_EMPTY
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public static final Object MARKER_FOR_EMPTY
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer(com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)
  id: ReferenceTypeSerializer(com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<?>,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.util.NameTransformer,java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: ReferenceTypeSerializer(ReferenceTypeSerializer<?> base, BeanProperty property, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper, Object suppressableValue, boolean suppressNulls)
  nameWithType: ReferenceTypeSerializer<T>.ReferenceTypeSerializer(ReferenceTypeSerializer<?> base, BeanProperty property, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper, Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.ReferenceTypeSerializer(ReferenceTypeSerializer<?> base, BeanProperty property, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper, Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected ReferenceTypeSerializer(ReferenceTypeSerializer<?> base, BeanProperty property, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper, Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: base
      type: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: valueSer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: unwrapper
      type: com.fasterxml.jackson.databind.util.NameTransformer
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer(com.fasterxml.jackson.databind.type.ReferenceType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: ReferenceTypeSerializer(com.fasterxml.jackson.databind.type.ReferenceType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: ReferenceTypeSerializer(ReferenceType fullType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> ser)
  nameWithType: ReferenceTypeSerializer<T>.ReferenceTypeSerializer(ReferenceType fullType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> ser)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.ReferenceTypeSerializer(ReferenceType fullType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> ser)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public ReferenceTypeSerializer(ReferenceType fullType, boolean staticTyping, TypeSerializer vts, JsonSerializer<Object> ser)
    parameters:
    - id: fullType
      type: com.fasterxml.jackson.databind.type.ReferenceType
    - id: staticTyping
      type: boolean
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._dynamicSerializers
  id: _dynamicSerializers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _dynamicSerializers
  nameWithType: ReferenceTypeSerializer<T>._dynamicSerializers
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._dynamicSerializers
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: If element type cannot be statically determined, mapping from runtime type to serializer is handled using this object
  syntax:
    content: protected transient PropertySerializerMap _dynamicSerializers
    return:
      type: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferenced(T)
  id: _getReferenced(T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _getReferenced(T value)
  nameWithType: ReferenceTypeSerializer<T>._getReferenced(T value)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._getReferenced(T value)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferenced*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected abstract Object _getReferenced(T value)
    parameters:
    - id: value
      type: T
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferencedIfPresent(T)
  id: _getReferencedIfPresent(T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _getReferencedIfPresent(T value)
  nameWithType: ReferenceTypeSerializer<T>._getReferencedIfPresent(T value)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._getReferencedIfPresent(T value)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferencedIfPresent*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected abstract Object _getReferencedIfPresent(T value)
    parameters:
    - id: value
      type: T
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._isValuePresent(T)
  id: _isValuePresent(T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _isValuePresent(T value)
  nameWithType: ReferenceTypeSerializer<T>._isValuePresent(T value)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._isValuePresent(T value)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._isValuePresent*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method called to see if there is a value present or not. Note that value itself may still be \`null\`, even if present, if referential type allows three states (absent, present-null, present-non-null); some only allow two (absent, present-non-null).
  syntax:
    content: protected abstract boolean _isValuePresent(T value)
    parameters:
    - id: value
      type: T
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._property
  id: _property
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _property
  nameWithType: ReferenceTypeSerializer<T>._property
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._property
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final BeanProperty _property
    return:
      type: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._referredType
  id: _referredType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _referredType
  nameWithType: ReferenceTypeSerializer<T>._referredType
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._referredType
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Value type
  syntax:
    content: protected final JavaType _referredType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._suppressNulls
  id: _suppressNulls
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _suppressNulls
  nameWithType: ReferenceTypeSerializer<T>._suppressNulls
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._suppressNulls
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Flag that indicates what to do with \`null\` values, distinct from handling of <xref uid="com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._suppressableValue" data-throw-if-not-resolved="false">#_suppressableValue</xref>
  syntax:
    content: protected final boolean _suppressNulls
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._suppressableValue
  id: _suppressableValue
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _suppressableValue
  nameWithType: ReferenceTypeSerializer<T>._suppressableValue
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._suppressableValue
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Value that indicates suppression mechanism to use for **values contained**; either "filter" (of which `equals()` is called), or marker value of <xref uid="com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.MARKER_FOR_EMPTY" data-throw-if-not-resolved="false">#MARKER_FOR_EMPTY</xref>, or null to indicate no filtering for non-null values. Note that inclusion value for Map instance itself is handled by caller (POJO property that refers to the Map value).
  syntax:
    content: protected final Object _suppressableValue
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._unwrapper
  id: _unwrapper
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _unwrapper
  nameWithType: ReferenceTypeSerializer<T>._unwrapper
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._unwrapper
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: In case of unwrapping, need name transformer.
  syntax:
    content: protected final NameTransformer _unwrapper
    return:
      type: com.fasterxml.jackson.databind.util.NameTransformer
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._useStatic(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  id: _useStatic(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _useStatic(SerializerProvider provider, BeanProperty property, JavaType referredType)
  nameWithType: ReferenceTypeSerializer<T>._useStatic(SerializerProvider provider, BeanProperty property, JavaType referredType)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._useStatic(SerializerProvider provider, BeanProperty property, JavaType referredType)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._useStatic*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected boolean _useStatic(SerializerProvider provider, BeanProperty property, JavaType referredType)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: referredType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._valueSerializer
  id: _valueSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _valueSerializer
  nameWithType: ReferenceTypeSerializer<T>._valueSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._valueSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Serializer for content values, if statically known.
  syntax:
    content: protected final JsonSerializer<Object> _valueSerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._valueTypeSerializer
  id: _valueTypeSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: _valueTypeSerializer
  nameWithType: ReferenceTypeSerializer<T>._valueTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._valueTypeSerializer
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Type serializer used for values, if any.
  syntax:
    content: protected final TypeSerializer _valueTypeSerializer
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  nameWithType: ReferenceTypeSerializer<T>.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation specifies no format. This behavior is usually overriden by custom serializers.
  syntax:
    content: public void acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: createContextual(SerializerProvider provider, BeanProperty property)
  nameWithType: ReferenceTypeSerializer<T>.createContextual(SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.createContextual(SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.createContextual*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property. Note that instance that this method is called on is typically shared one and as a result method should **NOT** modify this instance but rather construct and return a new instance. This instance should only be returned as-is, in case it is already suitable for use.
  syntax:
    content: public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.getReferredType()
  id: getReferredType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: getReferredType()
  nameWithType: ReferenceTypeSerializer<T>.getReferredType()
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.getReferredType()
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.getReferredType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public JavaType getReferredType()
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  id: isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: isEmpty(SerializerProvider provider, T value)
  nameWithType: ReferenceTypeSerializer<T>.isEmpty(SerializerProvider provider, T value)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.isEmpty(SerializerProvider provider, T value)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method called to check whether given serializable value is considered "empty" value (for purposes of suppressing serialization of empty values).


    Default implementation will consider only null values to be empty.


    NOTE: replaces <xref uid="com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isEmpty*" data-throw-if-not-resolved="false">#isEmpty(Object)</xref>, which was deprecated in 2.5
  syntax:
    content: public boolean isEmpty(SerializerProvider provider, T value)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: value
      type: T
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isUnwrappingSerializer()
  id: isUnwrappingSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: isUnwrappingSerializer()
  nameWithType: ReferenceTypeSerializer<T>.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.isUnwrappingSerializer()
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isUnwrappingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Accessor for checking whether this serializer is an "unwrapping" serializer; this is necessary to know since it may also require caller to suppress writing of the leading property name.
  syntax:
    content: public boolean isUnwrappingSerializer()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: serialize(T ref, JsonGenerator g, SerializerProvider provider)
  nameWithType: ReferenceTypeSerializer<T>.serialize(T ref, JsonGenerator g, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.serialize(T ref, JsonGenerator g, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public void serialize(T ref, JsonGenerator g, SerializerProvider provider)
    parameters:
    - id: ref
      type: T
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: serializeWithType(T ref, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: ReferenceTypeSerializer<T>.serializeWithType(T ref, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.serializeWithType(T ref, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.


    Default implementation will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> to indicate that proper type handling needs to be implemented.


    For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:


    ```java

    // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
      typeSer.writeTypePrefixForScalar(value, gen);
      serialize(value, gen, provider);
      typeSer.writeTypeSuffixForScalar(value, gen);
    ```


    and implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents.
  syntax:
    content: public void serializeWithType(T ref, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: ref
      type: T
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  id: unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: unwrappingSerializer(NameTransformer transformer)
  nameWithType: ReferenceTypeSerializer<T>.unwrappingSerializer(NameTransformer transformer)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.unwrappingSerializer(NameTransformer transformer)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.unwrappingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method that will return serializer instance that produces "unwrapped" serialization, if applicable for type being serialized (which is the case for some serializers that produce JSON Objects as output). If no unwrapped serializer can be constructed, will simply return serializer as-is.


    Default implementation just returns serializer as-is, indicating that no unwrapped variant exists
  syntax:
    content: public JsonSerializer<T> unwrappingSerializer(NameTransformer transformer)
    parameters:
    - id: transformer
      type: com.fasterxml.jackson.databind.util.NameTransformer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<T>
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withContentInclusion(java.lang.Object,boolean)
  id: withContentInclusion(java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: withContentInclusion(Object suppressableValue, boolean suppressNulls)
  nameWithType: ReferenceTypeSerializer<T>.withContentInclusion(Object suppressableValue, boolean suppressNulls)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.withContentInclusion(Object suppressableValue, boolean suppressNulls)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withContentInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Mutant factory method called to create a differently constructed instance, specifically with different exclusion rules for contained value.


    NOTE: caller has verified that there are changes, so implementations need NOT check if a new instance is needed.
  syntax:
    content: public abstract ReferenceTypeSerializer<T> withContentInclusion(Object suppressableValue, boolean suppressNulls)
    parameters:
    - id: suppressableValue
      type: java.lang.Object
    - id: suppressNulls
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.util.NameTransformer)
  id: withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.util.NameTransformer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  langs:
  - java
  name: withResolved(BeanProperty prop, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper)
  nameWithType: ReferenceTypeSerializer<T>.withResolved(BeanProperty prop, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper)
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.withResolved(BeanProperty prop, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper)
  overload: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withResolved*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Mutant factory method called when changes are needed; should construct newly configured instance with new values as indicated.


    NOTE: caller has verified that there are changes, so implementations need NOT check if a new instance is needed.
  syntax:
    content: protected abstract ReferenceTypeSerializer<T> withResolved(BeanProperty prop, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper)
    parameters:
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: vts
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: valueSer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: unwrapper
      type: com.fasterxml.jackson.databind.util.NameTransformer
    return:
      type: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>
references:
- uid: com.fasterxml.jackson.databind.type.ReferenceType
  name: ReferenceType
  nameWithType: ReferenceType
  fullName: com.fasterxml.jackson.databind.type.ReferenceType
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.ReferenceTypeSerializer*
  name: ReferenceTypeSerializer
  nameWithType: ReferenceTypeSerializer<T>.ReferenceTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.ReferenceTypeSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
    name: ReferenceTypeSerializer
    fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.util.NameTransformer
  name: NameTransformer
  nameWithType: NameTransformer
  fullName: com.fasterxml.jackson.databind.util.NameTransformer
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.JsonSerializer<T>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.unwrappingSerializer*
  name: unwrappingSerializer
  nameWithType: ReferenceTypeSerializer<T>.unwrappingSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.unwrappingSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>
  spec.java:
  - uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
    name: ReferenceTypeSerializer
    fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withResolved*
  name: withResolved
  nameWithType: ReferenceTypeSerializer<T>.withResolved
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.withResolved
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.withContentInclusion*
  name: withContentInclusion
  nameWithType: ReferenceTypeSerializer<T>.withContentInclusion
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.withContentInclusion
  package: com.fasterxml.jackson.databind.ser.std
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._isValuePresent*
  name: _isValuePresent
  nameWithType: ReferenceTypeSerializer<T>._isValuePresent
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._isValuePresent
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferenced*
  name: _getReferenced
  nameWithType: ReferenceTypeSerializer<T>._getReferenced
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._getReferenced
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._getReferencedIfPresent*
  name: _getReferencedIfPresent
  nameWithType: ReferenceTypeSerializer<T>._getReferencedIfPresent
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._getReferencedIfPresent
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.createContextual*
  name: createContextual
  nameWithType: ReferenceTypeSerializer<T>.createContextual
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.createContextual
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer._useStatic*
  name: _useStatic
  nameWithType: ReferenceTypeSerializer<T>._useStatic
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>._useStatic
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isEmpty*
  name: isEmpty
  nameWithType: ReferenceTypeSerializer<T>.isEmpty
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.isEmpty
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.isUnwrappingSerializer*
  name: isUnwrappingSerializer
  nameWithType: ReferenceTypeSerializer<T>.isUnwrappingSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.isUnwrappingSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.getReferredType*
  name: getReferredType
  nameWithType: ReferenceTypeSerializer<T>.getReferredType
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.getReferredType
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serialize*
  name: serialize
  nameWithType: ReferenceTypeSerializer<T>.serialize
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.serialize
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.serializeWithType*
  name: serializeWithType
  nameWithType: ReferenceTypeSerializer<T>.serializeWithType
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.serializeWithType
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: ReferenceTypeSerializer<T>.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ser.std.ReferenceTypeSerializer<T>.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
  name: PropertySerializerMap
  nameWithType: PropertySerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>
  name: StdSerializer<T>
  nameWithType: StdSerializer<T>
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>
- uid: com.fasterxml.jackson.databind.ser.ContextualSerializer
  name: ContextualSerializer
  nameWithType: ContextualSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContextualSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  name: JsonSerializer.isEmpty(SerializerProvider,T)
  nameWithType: JsonSerializer.isEmpty(SerializerProvider,T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  name: JsonSerializer.properties()
  nameWithType: JsonSerializer.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.properties()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  name: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  nameWithType: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  nameWithType: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  name: JsonSerializer.getDelegatee()
  nameWithType: JsonSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonSerializer.unwrappingSerializer(NameTransformer)
  nameWithType: JsonSerializer.unwrappingSerializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  name: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  name: JsonSerializer.isUnwrappingSerializer()
  nameWithType: JsonSerializer.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  name: StdSerializer._nonEmpty(Collection<?>)
  nameWithType: StdSerializer._nonEmpty(Collection<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  name: StdSerializer.handledType()
  nameWithType: StdSerializer.handledType()
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  name: StdSerializer.createSchemaNode(String,boolean)
  nameWithType: StdSerializer.createSchemaNode(String,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  name: StdSerializer.createSchemaNode(String)
  nameWithType: StdSerializer.createSchemaNode(String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  name: StdSerializer.getSchema(SerializerProvider,Type)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  name: JsonSerializer.withFilterId(Object)
  nameWithType: JsonSerializer.withFilterId(Object)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  nameWithType: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  name: JsonSerializer.isEmpty(T)
  nameWithType: JsonSerializer.isEmpty(T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  name: JsonSerializer.usesObjectId()
  nameWithType: JsonSerializer.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  name: StdSerializer._neitherNull(Object,Object)
  nameWithType: StdSerializer._neitherNull(Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer
  name: StdSerializer
  nameWithType: StdSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer
- uid: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: ?>,JsonFormat.Feature)
  nameWithType: ?>,JsonFormat.Feature)
  fullName: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
  name: StdSerializer._nonEmpty(Collection
  nameWithType: StdSerializer._nonEmpty(Collection
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.isDefaultSerializer(JsonSerializer
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType)
  nameWithType: ?>,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer.replaceDelegatee(JsonSerializer
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
