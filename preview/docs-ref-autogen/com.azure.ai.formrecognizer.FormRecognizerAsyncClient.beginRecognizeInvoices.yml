### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices"
name: "beginRecognizeInvoices"
nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoices"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  name: "beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  summary: "Recognizes invoice data using optical character recognition (OCR) and a prebuilt invoice trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a invoice. Note that the `invoice` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile invoice = new File(\"local/file_path/invoice.jpg\");\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(invoice.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeInvoices(buffer, invoice.length())\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedInvoices -> {\n         for (int i = 0; i < recognizedInvoices.size(); i++) {\n             RecognizedForm recognizedForm = recognizedInvoices.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n             if (customAddrFormField != null) {\n                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n                     System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n                 }\n             }\n             FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n             if (invoiceDateFormField != null) {\n                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n                     System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n                         invoiceDate, invoiceDateFormField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/invoicefields"
  parameters:
  - description: "The data of the document to recognize invoice information from."
    name: "invoice"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize invoice operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  name: "beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  summary: "Recognizes invoice data from documents using optical character recognition (OCR) and a prebuilt invoice trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a invoice. Note that the `invoice` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\n```java\nFile invoice = new File(\"local/file_path/invoice.jpg\");\n boolean includeFieldElements = true;\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer =\n     toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(invoice.toPath())));\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeInvoices(buffer,\n     invoice.length(),\n     new RecognizeInvoicesOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedInvoices -> {\n         for (int i = 0; i < recognizedInvoices.size(); i++) {\n             RecognizedForm recognizedForm = recognizedInvoices.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             FormField customAddrFormField = recognizedFields.get(\"CustomerAddress\");\n             if (customAddrFormField != null) {\n                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {\n                     System.out.printf(\"Customer Address: %s%n\", customAddrFormField.getValue().asString());\n                 }\n             }\n             FormField invoiceDateFormField = recognizedFields.get(\"InvoiceDate\");\n             if (invoiceDateFormField != null) {\n                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {\n                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();\n                     System.out.printf(\"Invoice Date: %s, confidence: %.2f%n\",\n                         invoiceDate, invoiceDateFormField.getConfidence());\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/invoicefields"
  parameters:
  - description: "The data of the document to recognize invoice information from."
    name: "invoice"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a invoice."
    name: "recognizeInvoicesOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions?alt=com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions&text=RecognizeInvoicesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoices(Flux<ByteBuffer> invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize invoice operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
