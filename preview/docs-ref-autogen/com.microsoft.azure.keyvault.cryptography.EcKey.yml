### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.keyvault.cryptography.EcKey
  id: EcKey
  parent: com.microsoft.azure.keyvault.cryptography
  children:
  - com.microsoft.azure.keyvault.cryptography.EcKey.close()
  - com.microsoft.azure.keyvault.cryptography.EcKey.CURVE_TO_SIGNATURE
  - com.microsoft.azure.keyvault.cryptography.EcKey.CURVE_TO_SPEC_NAME
  - com.microsoft.azure.keyvault.cryptography.EcKey.decryptAsync(byte [],byte [],byte [],byte [],String)
  - com.microsoft.azure.keyvault.cryptography.EcKey.defaultEncryptionAlgorithm
  - com.microsoft.azure.keyvault.cryptography.EcKey.EcKey()
  - com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String)
  - com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,JsonWebKeyCurveName)
  - com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,JsonWebKeyCurveName,Provider)
  - com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,KeyPair)
  - com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,KeyPair,Provider)
  - com.microsoft.azure.keyvault.cryptography.EcKey.encryptAsync(byte [],byte [],byte [],String)
  - com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey)
  - com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey,boolean)
  - com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey,boolean,Provider)
  - com.microsoft.azure.keyvault.cryptography.EcKey.getCurve()
  - com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultCurve()
  - com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultEncryptionAlgorithm()
  - com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultKeyWrapAlgorithm()
  - com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultSignatureAlgorithm()
  - com.microsoft.azure.keyvault.cryptography.EcKey.getKeyPair()
  - com.microsoft.azure.keyvault.cryptography.EcKey.getKid()
  - com.microsoft.azure.keyvault.cryptography.EcKey.P256
  - com.microsoft.azure.keyvault.cryptography.EcKey.P256K
  - com.microsoft.azure.keyvault.cryptography.EcKey.P384
  - com.microsoft.azure.keyvault.cryptography.EcKey.P521
  - com.microsoft.azure.keyvault.cryptography.EcKey.signAsync(byte [],String)
  - com.microsoft.azure.keyvault.cryptography.EcKey.signatureAlgorithm
  - com.microsoft.azure.keyvault.cryptography.EcKey.toJsonWebKey()
  - com.microsoft.azure.keyvault.cryptography.EcKey.unwrapKeyAsync(byte [],String)
  - com.microsoft.azure.keyvault.cryptography.EcKey.verifyAsync(byte [],byte [],String)
  - com.microsoft.azure.keyvault.cryptography.EcKey.wrapKeyAsync(byte [],String)
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey
  nameWithType: EcKey
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey
  type: Class
  source:
    remote: &o0
      path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 40
  package: com.microsoft.azure.keyvault.cryptography
  syntax: &o1
    content: public class EcKey implements IKey
  inheritance:
  - java.lang.Object
  - Closeable
  - com.microsoft.azure.keyvault.core.IKey
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.close()
  id: close()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: close()
  nameWithType: EcKey.close()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.close()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.close*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 290
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public void close()
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.CURVE_TO_SIGNATURE
  id: CURVE_TO_SIGNATURE
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: CURVE_TO_SIGNATURE
  nameWithType: EcKey.CURVE_TO_SIGNATURE
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.CURVE_TO_SIGNATURE
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 46
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: >-
      public static final Map<JsonWebKeyCurveName, String> CURVE_TO_SIGNATURE= ImmutableMap.<JsonWebKeyCurveName, String>builder()
                  .put(JsonWebKeyCurveName.P_256, Es256.ALGORITHM_NAME)
                  .put(JsonWebKeyCurveName.P_384, Es384.ALGORITHM_NAME)
                  .put(JsonWebKeyCurveName.P_521, Es512.ALGORITHM_NAME)
                  .put(JsonWebKeyCurveName.P_256K, Es256k.ALGORITHM_NAME)
                  .build()
    return:
      type: 81ec38ddcom.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName4d03418a
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.CURVE_TO_SPEC_NAME
  id: CURVE_TO_SPEC_NAME
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: CURVE_TO_SPEC_NAME
  nameWithType: EcKey.CURVE_TO_SPEC_NAME
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.CURVE_TO_SPEC_NAME
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 52
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: >-
      public static final Map<JsonWebKeyCurveName, String> CURVE_TO_SPEC_NAME= ImmutableMap.<JsonWebKeyCurveName, String>builder()
                  .put(JsonWebKeyCurveName.P_256, P256)
                  .put(JsonWebKeyCurveName.P_384, P384)
                  .put(JsonWebKeyCurveName.P_521, P521)
                  .put(JsonWebKeyCurveName.P_256K, P256K)
                  .build()
    return:
      type: 81ec38ddcom.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName4d03418a
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.decryptAsync(byte [],byte [],byte [],byte [],String)
  id: decryptAsync(byte [],byte [],byte [],byte [],String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: decryptAsync(byte[] ciphertext, byte[] iv, byte[] authenticationData, byte[] authenticationTag, String algorithm)
  nameWithType: EcKey.decryptAsync(byte[] ciphertext, byte[] iv, byte[] authenticationData, byte[] authenticationTag, String algorithm)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.decryptAsync(byte[] ciphertext, byte[] iv, byte[] authenticationData, byte[] authenticationTag, String algorithm)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.decryptAsync*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 315
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Decrypts the specified cipher text. Note that not all algorithms require, or support, all parameters.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<byte[]> decryptAsync(byte[] ciphertext, byte[] iv, byte[] authenticationData, byte[] authenticationTag, String algorithm)
    parameters:
    - id: ciphertext
      type: ccd9418d
      description: <p>The cipher text to decrypt </p>
    - id: iv
      type: ccd9418d
      description: <p>The initialization vector (optional with some algorithms) </p>
    - id: authenticationData
      type: ccd9418d
      description: <p>Additional authentication data (optional with some algorithms) </p>
    - id: authenticationTag
      type: ccd9418d
      description: <p>The authentication tag from the encrypt operation (optional with some algorithms) </p>
    - id: algorithm
      type: "26831127"
      description: <p>The encryption algorithm to use, must be supplied </p>
    return:
      type: dfd3b0c8
      description: <p>A ListenableFuture containing the plain text </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.decryptAsync(final byte [],final byte [],final byte [],final byte [],final String)
  exceptions:
  - type: 456eb9d1
    description: <p>the algorithm is not valid </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.defaultEncryptionAlgorithm
  id: defaultEncryptionAlgorithm
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: defaultEncryptionAlgorithm
  nameWithType: EcKey.defaultEncryptionAlgorithm
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.defaultEncryptionAlgorithm
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 66
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: protected String defaultEncryptionAlgorithm
    return:
      type: "26831127"
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey()
  id: EcKey()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey()
  nameWithType: EcKey.EcKey()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  type: Constructor
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 80
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Constructor.</p>\r\n<p>Generates a new EcKey with a P_256 curve and a randomly generated kid.</p>\r\n<p></p>"
  syntax:
    content: public EcKey()
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String)
  id: EcKey(String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey(String kid)
  nameWithType: EcKey.EcKey(String kid)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String kid)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  type: Constructor
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 93
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Constructor.</p>\r\n<p>Generates a new EcKey with a P_256 curve and the given kid.</p>\r\n<p></p>"
  syntax:
    content: public EcKey(String kid)
    parameters:
    - id: kid
      type: "26831127"
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,JsonWebKeyCurveName)
  id: EcKey(String,JsonWebKeyCurveName)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey(String kid, JsonWebKeyCurveName curve)
  nameWithType: EcKey.EcKey(String kid, JsonWebKeyCurveName curve)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String kid, JsonWebKeyCurveName curve)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  type: Constructor
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 106
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Constructor.</p>\r\n<p>Generates a new EcKey with the given curve and kid. </p>"
  syntax:
    content: public EcKey(String kid, JsonWebKeyCurveName curve)
    parameters:
    - id: kid
      type: "26831127"
    - id: curve
      type: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,JsonWebKeyCurveName,Provider)
  id: EcKey(String,JsonWebKeyCurveName,Provider)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey(String kid, JsonWebKeyCurveName curve, Provider provider)
  nameWithType: EcKey.EcKey(String kid, JsonWebKeyCurveName curve, Provider provider)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String kid, JsonWebKeyCurveName curve, Provider provider)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  type: Constructor
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 120
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Constructor.</p>\r\n<p>Generates a new EcKey with the given curve and kid. </p>"
  syntax:
    content: public EcKey(String kid, JsonWebKeyCurveName curve, Provider provider)
    parameters:
    - id: kid
      type: "26831127"
    - id: curve
      type: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
    - id: provider
      type: 8f3c7027
      description: <p>Java security provider </p>
  exceptions:
  - type: 2093b65f
  - type: 456eb9d1
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,KeyPair)
  id: EcKey(String,KeyPair)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey(String kid, KeyPair keyPair)
  nameWithType: EcKey.EcKey(String kid, KeyPair keyPair)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String kid, KeyPair keyPair)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  type: Constructor
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 148
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Constructor.</p>\r\n<p>Generates a new EcKey with the given keyPair. The keyPair must be an ECKey. </p>"
  syntax:
    content: public EcKey(String kid, KeyPair keyPair)
    parameters:
    - id: kid
      type: "26831127"
    - id: keyPair
      type: 5330fdd9
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String,KeyPair,Provider)
  id: EcKey(String,KeyPair,Provider)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: EcKey(String kid, KeyPair keyPair, Provider provider)
  nameWithType: EcKey.EcKey(String kid, KeyPair keyPair, Provider provider)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey(String kid, KeyPair keyPair, Provider provider)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  type: Constructor
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 163
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Constructor.</p>\r\n<p>Generates a new EcKey with the given keyPair. The keyPair must be an ECKey. </p>"
  syntax:
    content: public EcKey(String kid, KeyPair keyPair, Provider provider)
    parameters:
    - id: kid
      type: "26831127"
    - id: keyPair
      type: 5330fdd9
    - id: provider
      type: 8f3c7027
      description: <p>Java security provider </p>
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.encryptAsync(byte [],byte [],byte [],String)
  id: encryptAsync(byte [],byte [],byte [],String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: encryptAsync(byte[] plaintext, byte[] iv, byte[] authenticationData, String algorithm)
  nameWithType: EcKey.encryptAsync(byte[] plaintext, byte[] iv, byte[] authenticationData, String algorithm)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.encryptAsync(byte[] plaintext, byte[] iv, byte[] authenticationData, String algorithm)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.encryptAsync*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 321
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Encrypts the specified plain text. Note that not all algorithms require, or support, all parameters.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Triple<byte[], byte[], String>> encryptAsync(byte[] plaintext, byte[] iv, byte[] authenticationData, String algorithm)
    parameters:
    - id: plaintext
      type: ccd9418d
      description: <p>The plain text to encrypt </p>
    - id: iv
      type: ccd9418d
      description: <p>The initialization vector (optional with some algorithms) </p>
    - id: authenticationData
      type: ccd9418d
      description: <p>Additional authentication data (optional with some algorithms) </p>
    - id: algorithm
      type: "26831127"
      description: <p>The encryption algorithm to use, defaults to the keys DefaultEncryptionAlgorithm </p>
    return:
      type: 7356d169
      description: <p>A ListenableFuture containing the cipher text, the authentication tag and the algorithm that was used </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.encryptAsync(final byte [],final byte [],final byte [],final String)
  exceptions:
  - type: 456eb9d1
    description: <p>the algorithm is not valid </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey)
  id: fromJsonWebKey(JsonWebKey)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: fromJsonWebKey(JsonWebKey jwk)
  nameWithType: EcKey.fromJsonWebKey(JsonWebKey jwk)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey jwk)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 196
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Converts JSON web key to EC key pair, does not include the private key. </p>"
  syntax:
    content: public static EcKey fromJsonWebKey(JsonWebKey jwk)
    parameters:
    - id: jwk
      type: com.microsoft.azure.keyvault.webkey.JsonWebKey
    return:
      type: com.microsoft.azure.keyvault.cryptography.EcKey
      description: <p>EcKey </p>
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
  - type: cbaab1aa
  - type: b37d91b9
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey,boolean)
  id: fromJsonWebKey(JsonWebKey,boolean)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters)
  nameWithType: EcKey.fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 210
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Converts JSON web key to EC key pair and include the private key if set to true. </p>"
  syntax:
    content: public static EcKey fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters)
    parameters:
    - id: jwk
      type: com.microsoft.azure.keyvault.webkey.JsonWebKey
    - id: includePrivateParameters
      type: 4fc6e284
      description: <p>true if the EC key pair should include the private key. False otherwise. </p>
    return:
      type: com.microsoft.azure.keyvault.cryptography.EcKey
      description: <p>EcKey </p>
  exceptions:
  - type: 456eb9d1
  - type: 2093b65f
  - type: cbaab1aa
  - type: b37d91b9
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey,boolean,Provider)
  id: fromJsonWebKey(JsonWebKey,boolean,Provider)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters, Provider provider)
  nameWithType: EcKey.fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters, Provider provider)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters, Provider provider)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 221
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Converts JSON web key to EC key pair and include the private key if set to true. </p>"
  syntax:
    content: public static EcKey fromJsonWebKey(JsonWebKey jwk, boolean includePrivateParameters, Provider provider)
    parameters:
    - id: jwk
      type: com.microsoft.azure.keyvault.webkey.JsonWebKey
    - id: includePrivateParameters
      type: 4fc6e284
      description: <p>true if the EC key pair should include the private key. False otherwise. </p>
    - id: provider
      type: 8f3c7027
      description: <p>the Java Security Provider </p>
    return:
      type: com.microsoft.azure.keyvault.cryptography.EcKey
      description: <p>EcKey </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getCurve()
  id: getCurve()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getCurve()
  nameWithType: EcKey.getCurve()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getCurve()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getCurve*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 277
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public JsonWebKeyCurveName getCurve()
    return:
      type: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
      description: <p>curve of the key </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultCurve()
  id: getDefaultCurve()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getDefaultCurve()
  nameWithType: EcKey.getDefaultCurve()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultCurve()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultCurve*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 68
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public static JsonWebKeyCurveName getDefaultCurve()
    return:
      type: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultEncryptionAlgorithm()
  id: getDefaultEncryptionAlgorithm()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getDefaultEncryptionAlgorithm()
  nameWithType: EcKey.getDefaultEncryptionAlgorithm()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultEncryptionAlgorithm()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultEncryptionAlgorithm*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 295
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>The default encryption algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>\r\n<p></p>"
  syntax:
    content: public String getDefaultEncryptionAlgorithm()
    return:
      type: "26831127"
      description: <p>The default encryption algorithm for this key. </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultEncryptionAlgorithm()
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultKeyWrapAlgorithm()
  id: getDefaultKeyWrapAlgorithm()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getDefaultKeyWrapAlgorithm()
  nameWithType: EcKey.getDefaultKeyWrapAlgorithm()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultKeyWrapAlgorithm()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultKeyWrapAlgorithm*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 300
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>The default key wrap algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>\r\n<p></p>"
  syntax:
    content: public String getDefaultKeyWrapAlgorithm()
    return:
      type: "26831127"
      description: <p>The default key wrap algorithm for this key. </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultKeyWrapAlgorithm()
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultSignatureAlgorithm()
  id: getDefaultSignatureAlgorithm()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getDefaultSignatureAlgorithm()
  nameWithType: EcKey.getDefaultSignatureAlgorithm()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultSignatureAlgorithm()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultSignatureAlgorithm*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 305
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>The default signature algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>\r\n<p></p>"
  syntax:
    content: public String getDefaultSignatureAlgorithm()
    return:
      type: "26831127"
      description: <p>The default signature algorithm for this key. </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultSignatureAlgorithm()
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getKeyPair()
  id: getKeyPair()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getKeyPair()
  nameWithType: EcKey.getKeyPair()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getKeyPair()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getKeyPair*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 285
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public KeyPair getKeyPair()
    return:
      type: 5330fdd9
      description: <p>the underlying keyPair of the key </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getKid()
  id: getKid()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: getKid()
  nameWithType: EcKey.getKid()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getKid()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.getKid*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 310
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>The unique key identifier for this key.</p>\r\n<p></p>"
  syntax:
    content: public String getKid()
    return:
      type: "26831127"
      description: <p>The key identifier </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.getKid()
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.P256
  id: P256
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: P256
  nameWithType: EcKey.P256
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.P256
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 42
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public static final String P256= "secp256r1"
    return:
      type: 3d93591e
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.P256K
  id: P256K
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: P256K
  nameWithType: EcKey.P256K
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.P256K
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 45
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public static final String P256K= "secp256k1"
    return:
      type: 3d93591e
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.P384
  id: P384
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: P384
  nameWithType: EcKey.P384
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.P384
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 43
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public static final String P384= "secp384r1"
    return:
      type: 3d93591e
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.P521
  id: P521
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: P521
  nameWithType: EcKey.P521
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.P521
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 44
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: public static final String P521= "secp521r1"
    return:
      type: 3d93591e
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.signAsync(byte [],String)
  id: signAsync(byte [],String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: signAsync(byte[] digest, String algorithm)
  nameWithType: EcKey.signAsync(byte[] digest, String algorithm)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.signAsync(byte[] digest, String algorithm)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.signAsync*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 339
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Signs the specified digest using the specified algorithm, or the keys DefaultSignatureAlgorithm if no algorithm is specified.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Pair<byte[], String>> signAsync(byte[] digest, String algorithm)
    parameters:
    - id: digest
      type: ccd9418d
      description: <p>The digest to sign </p>
    - id: algorithm
      type: "26831127"
      description: <p>The signature algorithm to use </p>
    return:
      type: 32be89a6
      description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte [],final String)
  exceptions:
  - type: 456eb9d1
    description: <p>the algorithm is not valid </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.signatureAlgorithm
  id: signatureAlgorithm
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: signatureAlgorithm
  nameWithType: EcKey.signatureAlgorithm
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.signatureAlgorithm
  type: Field
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 65
  package: com.microsoft.azure.keyvault.cryptography
  syntax:
    content: protected final String signatureAlgorithm
    return:
      type: 3d93591e
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.toJsonWebKey()
  id: toJsonWebKey()
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: toJsonWebKey()
  nameWithType: EcKey.toJsonWebKey()
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.toJsonWebKey()
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.toJsonWebKey*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 237
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Converts EcKey to JSON web key. </p>"
  syntax:
    content: public JsonWebKey toJsonWebKey()
    return:
      type: com.microsoft.azure.keyvault.webkey.JsonWebKey
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.unwrapKeyAsync(byte [],String)
  id: unwrapKeyAsync(byte [],String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: unwrapKeyAsync(byte[] encryptedKey, String algorithm)
  nameWithType: EcKey.unwrapKeyAsync(byte[] encryptedKey, String algorithm)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.unwrapKeyAsync(byte[] encryptedKey, String algorithm)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.unwrapKeyAsync*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 333
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Unwraps (decrypts) the specified encryped key material.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<byte[]> unwrapKeyAsync(byte[] encryptedKey, String algorithm)
    parameters:
    - id: encryptedKey
      type: ccd9418d
      description: <p>The encrypted key to decrypt </p>
    - id: algorithm
      type: "26831127"
      description: <p>The algorithm to use, must be supplied </p>
    return:
      type: dfd3b0c8
      description: <p>A ListenableFuture containing the unwrapped key </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.unwrapKeyAsync(final byte [],final String)
  exceptions:
  - type: 456eb9d1
    description: <p>the algorithm is not valid </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.verifyAsync(byte [],byte [],String)
  id: verifyAsync(byte [],byte [],String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: verifyAsync(byte[] digest, byte[] signature, String algorithm)
  nameWithType: EcKey.verifyAsync(byte[] digest, byte[] signature, String algorithm)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.verifyAsync(byte[] digest, byte[] signature, String algorithm)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.verifyAsync*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 371
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Verifies the supplied signature value using the supplied digest and algorithm.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Boolean> verifyAsync(byte[] digest, byte[] signature, String algorithm)
    parameters:
    - id: digest
      type: ccd9418d
      description: <p>The digest input </p>
    - id: signature
      type: ccd9418d
      description: <p>The signature to verify </p>
    - id: algorithm
      type: "26831127"
      description: <p>The algorithm to use, must be provided </p>
    return:
      type: 8779baad
      description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.verifyAsync(final byte [],final byte [],final String)
  exceptions:
  - type: 456eb9d1
    description: <p>the algorithm is not valid </p>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.wrapKeyAsync(byte [],String)
  id: wrapKeyAsync(byte [],String)
  parent: com.microsoft.azure.keyvault.cryptography.EcKey
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  langs:
  - java
  name: wrapKeyAsync(byte[] key, String algorithm)
  nameWithType: EcKey.wrapKeyAsync(byte[] key, String algorithm)
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.wrapKeyAsync(byte[] key, String algorithm)
  overload: com.microsoft.azure.keyvault.cryptography.EcKey.wrapKeyAsync*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/microsoft-azure-keyvault-cryptography/src/main/java/com/microsoft/azure/keyvault/cryptography/EcKey.java
    startLine: 327
  package: com.microsoft.azure.keyvault.cryptography
  summary: "<p>Wraps (encrypts) the specified symmetric key material using the specified algorithm, or the keys DefaultKeyWrapAlgorithm if none is specified.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Pair<byte[], String>> wrapKeyAsync(byte[] key, String algorithm)
    parameters:
    - id: key
      type: ccd9418d
      description: <p>The symmetric key to wrap </p>
    - id: algorithm
      type: "26831127"
      description: <p>The wrapping algorithm to use, defaults to the keys DefaultKeyWrapAlgorithm </p>
    return:
      type: 32be89a6
      description: <p>ListenableFuture containing the encrypted key and the algorithm that was used </p>
  overridden: com.microsoft.azure.keyvault.core.IKey.wrapKeyAsync(final byte [],final String)
  exceptions:
  - type: 456eb9d1
    description: <p>the algorithm is not valid </p>
references:
- uid: 3d93591e
  spec.java:
  - name: final String
    fullName: final String
- uid: 81ec38ddcom.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName4d03418a
  spec.java:
  - name: final Map<
    fullName: final Map<
  - uid: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
    name: JsonWebKeyCurveName
    fullName: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
    href: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.yml
  - name: ', String>'
    fullName: ', String>'
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultCurve*
  name: getDefaultCurve
  nameWithType: EcKey.getDefaultCurve
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultCurve
  package: com.microsoft.azure.keyvault.cryptography
- uid: 456eb9d1
  spec.java:
  - name: NoSuchAlgorithmException
    fullName: NoSuchAlgorithmException
- uid: 2093b65f
  spec.java:
  - name: InvalidAlgorithmParameterException
    fullName: InvalidAlgorithmParameterException
- uid: cbaab1aa
  spec.java:
  - name: InvalidKeySpecException
    fullName: InvalidKeySpecException
- uid: b37d91b9
  spec.java:
  - name: NoSuchProviderException
    fullName: NoSuchProviderException
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey*
  name: fromJsonWebKey
  nameWithType: EcKey.fromJsonWebKey
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.fromJsonWebKey
  package: com.microsoft.azure.keyvault.cryptography
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: 8f3c7027
  spec.java:
  - name: Provider
    fullName: Provider
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey*
  name: EcKey
  nameWithType: EcKey.EcKey
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.EcKey
  package: com.microsoft.azure.keyvault.cryptography
- uid: 5330fdd9
  spec.java:
  - name: KeyPair
    fullName: KeyPair
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.toJsonWebKey*
  name: toJsonWebKey
  nameWithType: EcKey.toJsonWebKey
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.toJsonWebKey
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getCurve*
  name: getCurve
  nameWithType: EcKey.getCurve
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getCurve
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getKeyPair*
  name: getKeyPair
  nameWithType: EcKey.getKeyPair
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getKeyPair
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.close*
  name: close
  nameWithType: EcKey.close
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.close
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultEncryptionAlgorithm*
  name: getDefaultEncryptionAlgorithm
  nameWithType: EcKey.getDefaultEncryptionAlgorithm
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultEncryptionAlgorithm
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultKeyWrapAlgorithm*
  name: getDefaultKeyWrapAlgorithm
  nameWithType: EcKey.getDefaultKeyWrapAlgorithm
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultKeyWrapAlgorithm
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultSignatureAlgorithm*
  name: getDefaultSignatureAlgorithm
  nameWithType: EcKey.getDefaultSignatureAlgorithm
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getDefaultSignatureAlgorithm
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.getKid*
  name: getKid
  nameWithType: EcKey.getKid
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.getKid
  package: com.microsoft.azure.keyvault.cryptography
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: dfd3b0c8
  spec.java:
  - name: ListenableFuture<byte[]>
    fullName: ListenableFuture<byte[]>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.decryptAsync*
  name: decryptAsync
  nameWithType: EcKey.decryptAsync
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.decryptAsync
  package: com.microsoft.azure.keyvault.cryptography
- uid: 7356d169
  spec.java:
  - name: ListenableFuture<Triple<byte[], byte[], String>>
    fullName: ListenableFuture<Triple<byte[], byte[], String>>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.encryptAsync*
  name: encryptAsync
  nameWithType: EcKey.encryptAsync
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.encryptAsync
  package: com.microsoft.azure.keyvault.cryptography
- uid: 32be89a6
  spec.java:
  - name: ListenableFuture<Pair<byte[], String>>
    fullName: ListenableFuture<Pair<byte[], String>>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.wrapKeyAsync*
  name: wrapKeyAsync
  nameWithType: EcKey.wrapKeyAsync
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.wrapKeyAsync
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.unwrapKeyAsync*
  name: unwrapKeyAsync
  nameWithType: EcKey.unwrapKeyAsync
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.unwrapKeyAsync
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.signAsync*
  name: signAsync
  nameWithType: EcKey.signAsync
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.signAsync
  package: com.microsoft.azure.keyvault.cryptography
- uid: 8779baad
  spec.java:
  - name: ListenableFuture<Boolean>
    fullName: ListenableFuture<Boolean>
- uid: com.microsoft.azure.keyvault.cryptography.EcKey.verifyAsync*
  name: verifyAsync
  nameWithType: EcKey.verifyAsync
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey.verifyAsync
  package: com.microsoft.azure.keyvault.cryptography
- uid: com.microsoft.azure.keyvault.core.IKey
  parent: com.microsoft.azure.keyvault.core
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: IKey
  nameWithType: IKey
  fullName: com.microsoft.azure.keyvault.core.IKey
  type: Interface
  summary: "<p>Interface for representing cryptographic keys with the Microsoft Azure Key Vault libraries. </p>"
  syntax:
    content: public interface IKey
- uid: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  parent: com.microsoft.azure.keyvault.webkey
  href: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.yml
  name: JsonWebKeyCurveName
  nameWithType: JsonWebKeyCurveName
  fullName: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  type: Class
  summary: "<p>Defines values for JsonWebKeyCurveName. </p>"
  syntax:
    content: public class JsonWebKeyCurveName
- uid: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_256
  parent: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  href: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.yml
  name: P_256
  nameWithType: JsonWebKeyCurveName.P_256
  fullName: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_256
  type: Field
  summary: "<p>Static value P-256 for JsonWebKeyCurveName. </p>"
  syntax:
    content: public static final JsonWebKeyCurveName P_256= new JsonWebKeyCurveName("P-256")
    return:
      type: 93de0ef9com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
- uid: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_384
  parent: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  href: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.yml
  name: P_384
  nameWithType: JsonWebKeyCurveName.P_384
  fullName: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_384
  type: Field
  summary: "<p>Static value P-384 for JsonWebKeyCurveName. </p>"
  syntax:
    content: public static final JsonWebKeyCurveName P_384= new JsonWebKeyCurveName("P-384")
    return:
      type: 93de0ef9com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
- uid: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_521
  parent: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  href: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.yml
  name: P_521
  nameWithType: JsonWebKeyCurveName.P_521
  fullName: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_521
  type: Field
  summary: "<p>Static value P-521 for JsonWebKeyCurveName. </p>"
  syntax:
    content: public static final JsonWebKeyCurveName P_521= new JsonWebKeyCurveName("P-521")
    return:
      type: 93de0ef9com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
- uid: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_256K
  parent: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
  href: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.yml
  name: P_256K
  nameWithType: JsonWebKeyCurveName.P_256K
  fullName: com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName.P_256K
  type: Field
  summary: "<p>Static value SECP256K1 for JsonWebKeyCurveName. </p>"
  syntax:
    content: public static final JsonWebKeyCurveName P_256K= new JsonWebKeyCurveName("P-256K")
    return:
      type: 93de0ef9com.microsoft.azure.keyvault.webkey.JsonWebKeyCurveName
- uid: com.microsoft.azure.keyvault.cryptography.EcKey
  parent: com.microsoft.azure.keyvault.cryptography
  href: com.microsoft.azure.keyvault.cryptography.EcKey.yml
  name: EcKey
  nameWithType: EcKey
  fullName: com.microsoft.azure.keyvault.cryptography.EcKey
  type: Class
  syntax: *o1
- uid: com.microsoft.azure.keyvault.webkey.JsonWebKey
  parent: com.microsoft.azure.keyvault.webkey
  href: com.microsoft.azure.keyvault.webkey.JsonWebKey.yml
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: com.microsoft.azure.keyvault.webkey.JsonWebKey
  type: Class
  summary: "<p>As of <a href=\"http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18\">http://tools.ietf.org/html/draft-ietf-jose-json-web-key-18</a>. </p>"
  syntax:
    content: public class JsonWebKey
- uid: com.microsoft.azure.keyvault.core.IKey.getDefaultEncryptionAlgorithm()
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: getDefaultEncryptionAlgorithm()
  nameWithType: IKey.getDefaultEncryptionAlgorithm()
  fullName: com.microsoft.azure.keyvault.core.IKey.getDefaultEncryptionAlgorithm()
  type: Method
  summary: "<p>The default encryption algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>\r\n<p></p>"
  syntax:
    content: public String getDefaultEncryptionAlgorithm()
    return:
      type: "26831127"
      description: <p>The default encryption algorithm for this key. </p>
- uid: com.microsoft.azure.keyvault.core.IKey.getDefaultKeyWrapAlgorithm()
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: getDefaultKeyWrapAlgorithm()
  nameWithType: IKey.getDefaultKeyWrapAlgorithm()
  fullName: com.microsoft.azure.keyvault.core.IKey.getDefaultKeyWrapAlgorithm()
  type: Method
  summary: "<p>The default key wrap algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>\r\n<p></p>"
  syntax:
    content: public String getDefaultKeyWrapAlgorithm()
    return:
      type: "26831127"
      description: <p>The default key wrap algorithm for this key. </p>
- uid: com.microsoft.azure.keyvault.core.IKey.getDefaultSignatureAlgorithm()
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: getDefaultSignatureAlgorithm()
  nameWithType: IKey.getDefaultSignatureAlgorithm()
  fullName: com.microsoft.azure.keyvault.core.IKey.getDefaultSignatureAlgorithm()
  type: Method
  summary: "<p>The default signature algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>\r\n<p></p>"
  syntax:
    content: public String getDefaultSignatureAlgorithm()
    return:
      type: "26831127"
      description: <p>The default signature algorithm for this key. </p>
- uid: com.microsoft.azure.keyvault.core.IKey.getKid()
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: getKid()
  nameWithType: IKey.getKid()
  fullName: com.microsoft.azure.keyvault.core.IKey.getKid()
  type: Method
  summary: "<p>The unique key identifier for this key.</p>\r\n<p></p>"
  syntax:
    content: public String getKid()
    return:
      type: "26831127"
      description: <p>The key identifier </p>
- uid: com.microsoft.azure.keyvault.core.IKey.decryptAsync(final byte [],final byte [],final byte [],final byte [],final String)
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  nameWithType: IKey.decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  fullName: com.microsoft.azure.keyvault.core.IKey.decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  type: Method
  summary: "<p>Decrypts the specified cipher text. Note that not all algorithms require, or support, all parameters.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<byte[]> decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
    parameters:
    - id: ciphertext
      type: f549433f
      description: <p>The cipher text to decrypt </p>
    - id: iv
      type: f549433f
      description: <p>The initialization vector (optional with some algorithms) </p>
    - id: authenticationData
      type: f549433f
      description: <p>Additional authentication data (optional with some algorithms) </p>
    - id: authenticationTag
      type: f549433f
      description: <p>The authentication tag from the encrypt operation (optional with some algorithms) </p>
    - id: algorithm
      type: 3d93591e
      description: <p>The encryption algorithm to use, must be supplied </p>
    return:
      type: dfd3b0c8
      description: <p>A ListenableFuture containing the plain text </p>
- uid: com.microsoft.azure.keyvault.core.IKey.encryptAsync(final byte [],final byte [],final byte [],final String)
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  nameWithType: IKey.encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  fullName: com.microsoft.azure.keyvault.core.IKey.encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  type: Method
  summary: "<p>Encrypts the specified plain text. Note that not all algorithms require, or support, all parameters.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Triple<byte[], byte[], String>> encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
    parameters:
    - id: plaintext
      type: f549433f
      description: <p>The plain text to encrypt </p>
    - id: iv
      type: f549433f
      description: <p>The initialization vector (optional with some algorithms) </p>
    - id: authenticationData
      type: f549433f
      description: <p>Additional authentication data (optional with some algorithms) </p>
    - id: algorithm
      type: 3d93591e
      description: <p>The encryption algorithm to use, defaults to the keys DefaultEncryptionAlgorithm </p>
    return:
      type: 7356d169
      description: <p>A ListenableFuture containing the cipher text, the authentication tag and the algorithm that was used </p>
- uid: com.microsoft.azure.keyvault.core.IKey.wrapKeyAsync(final byte [],final String)
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: wrapKeyAsync(final byte[] key, final String algorithm)
  nameWithType: IKey.wrapKeyAsync(final byte[] key, final String algorithm)
  fullName: com.microsoft.azure.keyvault.core.IKey.wrapKeyAsync(final byte[] key, final String algorithm)
  type: Method
  summary: "<p>Wraps (encrypts) the specified symmetric key material using the specified algorithm, or the keys DefaultKeyWrapAlgorithm if none is specified.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Pair<byte[], String>> wrapKeyAsync(final byte[] key, final String algorithm)
    parameters:
    - id: key
      type: f549433f
      description: <p>The symmetric key to wrap </p>
    - id: algorithm
      type: 3d93591e
      description: <p>The wrapping algorithm to use, defaults to the keys DefaultKeyWrapAlgorithm </p>
    return:
      type: 32be89a6
      description: <p>ListenableFuture containing the encrypted key and the algorithm that was used </p>
- uid: com.microsoft.azure.keyvault.core.IKey.unwrapKeyAsync(final byte [],final String)
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  nameWithType: IKey.unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  fullName: com.microsoft.azure.keyvault.core.IKey.unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  type: Method
  summary: "<p>Unwraps (decrypts) the specified encryped key material.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<byte[]> unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
    parameters:
    - id: encryptedKey
      type: f549433f
      description: <p>The encrypted key to decrypt </p>
    - id: algorithm
      type: 3d93591e
      description: <p>The algorithm to use, must be supplied </p>
    return:
      type: dfd3b0c8
      description: <p>A ListenableFuture containing the unwrapped key </p>
- uid: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte [],final String)
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: signAsync(final byte[] digest, final String algorithm)
  nameWithType: IKey.signAsync(final byte[] digest, final String algorithm)
  fullName: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte[] digest, final String algorithm)
  type: Method
  summary: "<p>Signs the specified digest using the specified algorithm, or the keys DefaultSignatureAlgorithm if no algorithm is specified.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Pair<byte[], String>> signAsync(final byte[] digest, final String algorithm)
    parameters:
    - id: digest
      type: f549433f
      description: <p>The digest to sign </p>
    - id: algorithm
      type: 3d93591e
      description: <p>The signature algorithm to use </p>
    return:
      type: 32be89a6
      description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
- uid: com.microsoft.azure.keyvault.core.IKey.verifyAsync(final byte [],final byte [],final String)
  parent: com.microsoft.azure.keyvault.core.IKey
  href: com.microsoft.azure.keyvault.core.IKey.yml
  name: verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  nameWithType: IKey.verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  fullName: com.microsoft.azure.keyvault.core.IKey.verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  type: Method
  summary: "<p>Verifies the supplied signature value using the supplied digest and algorithm.</p>\r\n<p></p>"
  syntax:
    content: public ListenableFuture<Boolean> verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
    parameters:
    - id: digest
      type: f549433f
      description: <p>The digest input </p>
    - id: signature
      type: f549433f
      description: <p>The signature to verify </p>
    - id: algorithm
      type: 3d93591e
      description: <p>The algorithm to use, must be provided </p>
    return:
      type: 8779baad
      description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
