### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Iterables"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables"
name: "Iterables"
nameWithType: "Iterables"
summary: "An assortment of mainly legacy static utility methods that operate on or return objects of type `Iterable`. Except as noted, each method has a corresponding <xref uid=\"java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref>\\-based method in the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterators\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterators\"></xref> class.\n\n**Java 8 users:** several common uses for this class are now more comprehensively addressed by the new <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.stream.Stream\"></xref> library. Read the method documentation below for comparisons. This class is not being deprecated, but we gently encourage you to migrate to streams.\n\n*Performance notes:* Unless otherwise noted, all of the iterables produced in this class are *lazy*, which means that their iterators only advance the backing iteration when absolutely necessary.\n\nSee the Guava User Guide article on [ `Iterables`][_Iterables].\n\n\n[_Iterables]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Iterables"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<E>unmodifiableIterable(com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<F,T>transform(java.lang.Iterable<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>addAll(java.util.Collection<T>,java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>all(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>any(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>...)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>consumingIterable(java.lang.Iterable<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T...)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(java.lang.Iterable<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<?>,java.lang.Class<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(java.lang.Iterable<? extends T>,int,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(java.lang.Iterable<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getFirst(java.lang.Iterable<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(java.lang.Iterable<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(java.lang.Iterable<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(java.lang.Iterable<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(java.lang.Iterable<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>indexOf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>limit(java.lang.Iterable<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>,java.util.Comparator<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>paddedPartition(java.lang.Iterable<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>partition(java.lang.Iterable<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>removeIf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>skip(java.lang.Iterable<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>toArray(java.lang.Iterable<? extends T>,java.lang.Class<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>tryFind(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>unmodifiableIterable(java.lang.Iterable<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.contains(java.lang.Iterable<?>,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual(java.lang.Iterable<?>,java.lang.Iterable<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.frequency(java.lang.Iterable<?>,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty(java.lang.Iterable<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll(java.lang.Iterable<?>,java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll(java.lang.Iterable<?>,java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.size(java.lang.Iterable<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterables.toString(java.lang.Iterable<?>)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
