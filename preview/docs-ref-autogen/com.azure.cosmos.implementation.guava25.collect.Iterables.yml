### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables
  id: Iterables
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<E>unmodifiableIterable(com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<F,T>transform(java.lang.Iterable<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>addAll(java.util.Collection<T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>all(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>any(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>...)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>consumingIterable(java.lang.Iterable<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T...)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(java.lang.Iterable<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<?>,java.lang.Class<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(java.lang.Iterable<? extends T>,int,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(java.lang.Iterable<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getFirst(java.lang.Iterable<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(java.lang.Iterable<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(java.lang.Iterable<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(java.lang.Iterable<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(java.lang.Iterable<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>indexOf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>limit(java.lang.Iterable<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>,java.util.Comparator<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>paddedPartition(java.lang.Iterable<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>partition(java.lang.Iterable<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>removeIf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>skip(java.lang.Iterable<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>toArray(java.lang.Iterable<? extends T>,java.lang.Class<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>tryFind(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.<T>unmodifiableIterable(java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.contains(java.lang.Iterable<?>,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual(java.lang.Iterable<?>,java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.frequency(java.lang.Iterable<?>,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty(java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll(java.lang.Iterable<?>,java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll(java.lang.Iterable<?>,java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.size(java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterables.toString(java.lang.Iterable<?>)
  langs:
  - java
  name: Iterables
  nameWithType: Iterables
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    An assortment of mainly legacy static utility methods that operate on or return objects of type `Iterable`. Except as noted, each method has a corresponding <xref uid="java.util.Iterator" data-throw-if-not-resolved="false">Iterator</xref>\-based method in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators" data-throw-if-not-resolved="false">Iterators</xref> class.


    **Java 8 users:** several common uses for this class are now more comprehensively addressed by the new <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">java.util.stream.Stream</xref> library. Read the method documentation below for comparisons. This class is not being deprecated, but we gently encourage you to migrate to streams.


    *Performance notes:* Unless otherwise noted, all of the iterables produced in this class are *lazy*, which means that their iterators only advance the backing iteration when absolutely necessary.


    See the Guava User Guide article on [ `Iterables`][_Iterables].



    [_Iterables]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables
  syntax:
    content: public final class Iterables
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<E>unmodifiableIterable(com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>)
  id: <E>unmodifiableIterable(com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <E>unmodifiableIterable(ImmutableCollection<E> iterable)
  nameWithType: Iterables.<E>unmodifiableIterable(ImmutableCollection<E> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<E>unmodifiableIterable(ImmutableCollection<E> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.unmodifiableIterable*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Simply returns its argument.
  syntax:
    content: public static Iterable<E> <E>unmodifiableIterable(ImmutableCollection<E> iterable)
    parameters:
    - id: iterable
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
    return:
      type: java.lang.Iterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<F,T>transform(java.lang.Iterable<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  id: <F,T>transform(java.lang.Iterable<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <F,T>transform(Iterable<F> fromIterable, Function<? super F,? extends T> function)
  nameWithType: Iterables.<F,T>transform(Iterable<F> fromIterable, Function<? super F,? extends T> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<F,T>transform(Iterable<F> fromIterable, Function<? super F,? extends T> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.transform*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view containing the result of applying `function` to each element of `fromIterable`.


    The returned iterable's iterator supports `remove()` if `fromIterable`'s iterator does. After a successful `remove()` call, `fromIterable` no longer contains the corresponding element.


    If the input `Iterable` is known to be a `List` or other `Collection`, consider <xref uid="com.azure.cosmos.implementation.Lists.transform" data-throw-if-not-resolved="false">Lists#transform</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.Collections2.transform" data-throw-if-not-resolved="false">Collections2#transform</xref>.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.map" data-throw-if-not-resolved="false">Stream#map</xref>
  syntax:
    content: public static Iterable<T> <F,T>transform(Iterable<F> fromIterable, Function<? super F,? extends T> function)
    parameters:
    - id: fromIterable
      type: java.lang.Iterable<F>
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>addAll(java.util.Collection<T>,java.lang.Iterable<? extends T>)
  id: <T>addAll(java.util.Collection<T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd)
  nameWithType: Iterables.<T>addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds all elements in `iterable` to `collection`.
  syntax:
    content: public static boolean <T>addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd)
    parameters:
    - id: addTo
      type: java.util.Collection<T>
    - id: elementsToAdd
      type: java.lang.Iterable<? extends T>
    return:
      type: boolean
      description: <code>true</code> if <code>collection</code> was modified as a result of this operation.
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>all(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>all(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>all(Iterable<T> iterable, Predicate<? super T> predicate)
  nameWithType: Iterables.<T>all(Iterable<T> iterable, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>all(Iterable<T> iterable, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.all*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if every element in `iterable` satisfies the predicate. If `iterable` is empty, `true` is returned.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.allMatch" data-throw-if-not-resolved="false">Stream#allMatch</xref>.
  syntax:
    content: public static boolean <T>all(Iterable<T> iterable, Predicate<? super T> predicate)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>any(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>any(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>any(Iterable<T> iterable, Predicate<? super T> predicate)
  nameWithType: Iterables.<T>any(Iterable<T> iterable, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>any(Iterable<T> iterable, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.any*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if any element in `iterable` satisfies the predicate.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.anyMatch" data-throw-if-not-resolved="false">Stream#anyMatch</xref>.
  syntax:
    content: public static boolean <T>any(Iterable<T> iterable, Predicate<? super T> predicate)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  id: <T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  nameWithType: Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines two iterables into a single iterable. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`. The source iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **Java 8 users:** The `Stream` equivalent of this method is `Stream.concat(a, b)`.
  syntax:
    content: public static Iterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
    parameters:
    - id: a
      type: java.lang.Iterable<? extends T>
    - id: b
      type: java.lang.Iterable<? extends T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  id: <T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  nameWithType: Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines three iterables into a single iterable. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`, followed by the elements in `c`. The source iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **Java 8 users:** The `Stream` equivalent of this method is `Streams.concat(a, b, c)`.
  syntax:
    content: public static Iterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
    parameters:
    - id: a
      type: java.lang.Iterable<? extends T>
    - id: b
      type: java.lang.Iterable<? extends T>
    - id: c
      type: java.lang.Iterable<? extends T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  id: <T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  nameWithType: Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines four iterables into a single iterable. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`, followed by the elements in `c`, followed by the elements in `d`. The source iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **Java 8 users:** The `Stream` equivalent of this method is `Streams.concat(a, b, c, d)`.
  syntax:
    content: public static Iterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
    parameters:
    - id: a
      type: java.lang.Iterable<? extends T>
    - id: b
      type: java.lang.Iterable<? extends T>
    - id: c
      type: java.lang.Iterable<? extends T>
    - id: d
      type: java.lang.Iterable<? extends T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>...)
  id: <T>concat(java.lang.Iterable<? extends T>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>concat(Iterable<? extends T>[] inputs)
  nameWithType: Iterables.<T>concat(Iterable<? extends T>[] inputs)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T>[] inputs)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in `inputs`. The input iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **Java 8 users:** The `Stream` equivalent of this method is `Streams.concat(...)`.
  syntax:
    content: public static Iterable<T> <T>concat(Iterable<? extends T>[] inputs)
    parameters:
    - id: inputs
      type: java.lang.Iterable<? extends T>[]
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  id: <T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  nameWithType: Iterables.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines multiple iterables into a single iterable. The returned iterable has an iterator that traverses the elements of each iterable in `inputs`. The input iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it. The methods of the returned iterable may throw `NullPointerException` if any of the input iterators is null.


    **Java 8 users:** The `Stream` equivalent of this method is `streamOfStreams.flatMap(s -> s)`.
  syntax:
    content: public static Iterable<T> <T>concat(Iterable<? extends Iterable<? extends T>> inputs)
    parameters:
    - id: inputs
      type: java.lang.Iterable<? extends java.lang.Iterable<? extends T>>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>consumingIterable(java.lang.Iterable<T>)
  id: <T>consumingIterable(java.lang.Iterable<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>consumingIterable(Iterable<T> iterable)
  nameWithType: Iterables.<T>consumingIterable(Iterable<T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>consumingIterable(Iterable<T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.consumingIterable*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the supplied iterable that wraps each generated <xref uid="java.util.Iterator" data-throw-if-not-resolved="false">Iterator</xref> through <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.&lt;T&gt;consumingIterator(java.util.Iterator&lt;T&gt;)" data-throw-if-not-resolved="false">Iterators#consumingIterator(Iterator)</xref>.


    Note: If `iterable` is a <xref uid="java.util.Queue" data-throw-if-not-resolved="false">Queue</xref>, the returned iterable will get entries from <xref uid="java.util.Queue.remove*" data-throw-if-not-resolved="false">Queue#remove()</xref> since <xref uid="java.util.Queue" data-throw-if-not-resolved="false">Queue</xref>'s iteration order is undefined. Calling <xref uid="java.util.Iterator.hasNext*" data-throw-if-not-resolved="false">Iterator#hasNext()</xref> on a generated iterator from the returned iterable may cause an item to be immediately dequeued for return on a subsequent call to <xref uid="java.util.Iterator.next*" data-throw-if-not-resolved="false">Iterator#next()</xref>.
  syntax:
    content: public static Iterable<T> <T>consumingIterable(Iterable<T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
      description: the iterable to wrap
    return:
      type: java.lang.Iterable<T>
      description: >-
        a view of the supplied iterable that wraps each generated iterator through <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.<T>consumingIterator(java.util.Iterator<T>)" data-throw-if-not-resolved="false">Iterators#consumingIterator(Iterator)</xref>; for queues, an iterable that generates iterators
             that return and consume the queue's elements in queue order
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T...)
  id: <T>cycle(T...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>cycle(T[] elements)
  nameWithType: Iterables.<T>cycle(T[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.cycle*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterable whose iterators cycle indefinitely over the provided elements.


    After `remove` is invoked on a generated iterator, the removed element will no longer appear in either that iterator or any other iterator created from the same source iterable. That is, this method behaves exactly as `Iterables.cycle(Lists.newArrayList(elements))`. The iterator's `hasNext` method returns `true` until all of the original elements have been removed.


    **Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.


    To cycle over the elements `n` times, use the following: `Iterables.concat(Collections.nCopies(n, Arrays.asList(elements)))`


    **Java 8 users:** If passing a single element `e`, the `Stream` equivalent of this method is `Stream.generate(() -> e)`. Otherwise, put the elements in a collection and use `Stream.generate(() -> collection).flatMap(Collection::stream)`.
  syntax:
    content: public static Iterable<T> <T>cycle(T[] elements)
    parameters:
    - id: elements
      type: T[]
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(java.lang.Iterable<T>)
  id: <T>cycle(java.lang.Iterable<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>cycle(Iterable<T> iterable)
  nameWithType: Iterables.<T>cycle(Iterable<T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(Iterable<T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.cycle*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterable whose iterators cycle indefinitely over the elements of `iterable`.


    That iterator supports `remove()` if `iterable.iterator()` does. After `remove()` is called, subsequent cycles omit the removed element, which is no longer in `iterable`. The iterator's `hasNext()` method returns `true` until `iterable` is empty.


    **Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.


    To cycle over the iterable `n` times, use the following: `Iterables.concat(Collections.nCopies(n, iterable))`


    **Java 8 users:** The `Stream` equivalent of this method is `Stream.generate(() -> iterable).flatMap(Streams::stream)`.
  syntax:
    content: public static Iterable<T> <T>cycle(Iterable<T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<?>,java.lang.Class<T>)
  id: <T>filter(java.lang.Iterable<?>,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>filter(Iterable<?> unfiltered, Class<T> desiredType)
  nameWithType: Iterables.<T>filter(Iterable<?> unfiltered, Class<T> desiredType)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(Iterable<?> unfiltered, Class<T> desiredType)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of `unfiltered` containing all elements that are of the type `desiredType`. The returned iterable's iterator does not support `remove()`.


    **`Stream` equivalent:** `stream.filter(type::isInstance).map(type::cast)`. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point:


    ```java

    @SuppressWarnings({"unchecked", "rawtypes"}) // safe because of ::isInstance check
     ImmutableList result =
         (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
    ```
  syntax:
    content: public static Iterable<T> <T>filter(Iterable<?> unfiltered, Class<T> desiredType)
    parameters:
    - id: unfiltered
      type: java.lang.Iterable<?>
    - id: desiredType
      type: java.lang.Class<T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>filter(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)
  nameWithType: Iterables.<T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of `unfiltered` containing all elements that satisfy the input predicate `retainIfTrue`. The returned iterable's iterator does not support `remove()`.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.filter" data-throw-if-not-resolved="false">Stream#filter</xref>.
  syntax:
    content: public static Iterable<T> <T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)
    parameters:
    - id: unfiltered
      type: java.lang.Iterable<T>
    - id: retainIfTrue
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)
  id: <T>find(java.lang.Iterable<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)
  nameWithType: Iterables.<T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.find*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the first element in `iterable` that satisfies the given predicate, or `defaultValue` if none found. Note that this can usually be handled more naturally using `tryFind(iterable, predicate).or(defaultValue)`.


    **`Stream` equivalent:** `stream.filter(predicate).findFirst().orElse(defaultValue)`
  syntax:
    content: public static T <T>find(Iterable<? extends T> iterable, Predicate<? super T> predicate, T defaultValue)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    - id: defaultValue
      type: T
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>find(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>find(Iterable<T> iterable, Predicate<? super T> predicate)
  nameWithType: Iterables.<T>find(Iterable<T> iterable, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find(Iterable<T> iterable, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.find*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the first element in `iterable` that satisfies the given predicate; use this method only when such an element is known to exist. If it is possible that *no* element will match, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.tryFind" data-throw-if-not-resolved="false">#tryFind</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.find*" data-throw-if-not-resolved="false">#find(Iterable, Predicate, Object)</xref> instead.


    **`Stream` equivalent:** `stream.filter(predicate).findFirst().get()`
  syntax:
    content: public static T <T>find(Iterable<T> iterable, Predicate<? super T> predicate)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(java.lang.Iterable<? extends T>,int,T)
  id: <T>get(java.lang.Iterable<? extends T>,int,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>get(Iterable<? extends T> iterable, int position, T defaultValue)
  nameWithType: Iterables.<T>get(Iterable<? extends T> iterable, int position, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(Iterable<? extends T> iterable, int position, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the element at the specified position in an iterable or a default value otherwise.


    **`Stream` equivalent:** `stream.skip(position).findFirst().orElse(defaultValue)` (returns the default value if the index is out of bounds)
  syntax:
    content: public static T <T>get(Iterable<? extends T> iterable, int position, T defaultValue)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: position
      type: int
      description: position of the element to return
    - id: defaultValue
      type: T
      description: >-
        the default value to return if <code>position</code> is greater than or equal to
             the size of the iterable
    return:
      type: T
      description: >-
        the element at the specified position in <code>iterable</code> or <code>defaultValue</code> if
             <code>iterable</code> contains fewer than <code>position + 1</code> elements.
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(java.lang.Iterable<T>,int)
  id: <T>get(java.lang.Iterable<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>get(Iterable<T> iterable, int position)
  nameWithType: Iterables.<T>get(Iterable<T> iterable, int position)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get(Iterable<T> iterable, int position)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the element at the specified position in an iterable.


    **`Stream` equivalent:** `stream.skip(position).findFirst().get()` (throws `NoSuchElementException` if out of bounds)
  syntax:
    content: public static T <T>get(Iterable<T> iterable, int position)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: position
      type: int
      description: position of the element to return
    return:
      type: T
      description: the element at the specified position in <code>iterable</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getFirst(java.lang.Iterable<? extends T>,T)
  id: <T>getFirst(java.lang.Iterable<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>getFirst(Iterable<? extends T> iterable, T defaultValue)
  nameWithType: Iterables.<T>getFirst(Iterable<? extends T> iterable, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getFirst(Iterable<? extends T> iterable, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.getFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the first element in `iterable` or `defaultValue` if the iterable is empty. The <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators" data-throw-if-not-resolved="false">Iterators</xref> analog to this method is <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.getNext" data-throw-if-not-resolved="false">Iterators#getNext</xref>.


    If no default value is desired (and the caller instead wants a <xref uid="" data-throw-if-not-resolved="false">NoSuchElementException</xref> to be thrown), it is recommended that `iterable.iterator().next()` is used instead.


    To get the only element in a single-element `Iterable`, consider using <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.&lt;T&gt;getOnlyElement(java.lang.Iterable&lt;T&gt;)" data-throw-if-not-resolved="false">#getOnlyElement(Iterable)</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.getOnlyElement*" data-throw-if-not-resolved="false">#getOnlyElement(Iterable, Object)</xref> instead.


    **`Stream` equivalent:** `stream.findFirst().orElse(defaultValue)`
  syntax:
    content: public static T <T>getFirst(Iterable<? extends T> iterable, T defaultValue)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: defaultValue
      type: T
      description: the default value to return if the iterable is empty
    return:
      type: T
      description: the first element of <code>iterable</code> or the default value
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(java.lang.Iterable<? extends T>,T)
  id: <T>getLast(java.lang.Iterable<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>getLast(Iterable<? extends T> iterable, T defaultValue)
  nameWithType: Iterables.<T>getLast(Iterable<? extends T> iterable, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(Iterable<? extends T> iterable, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.getLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the last element of `iterable` or `defaultValue` if the iterable is empty. If `iterable` is a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref> with <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">RandomAccess</xref> support, then this operation is guaranteed to be `O(1)`.


    **`Stream` equivalent:** `Streams.findLast(stream).orElse(defaultValue)`
  syntax:
    content: public static T <T>getLast(Iterable<? extends T> iterable, T defaultValue)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: defaultValue
      type: T
      description: the value to return if <code>iterable</code> is empty
    return:
      type: T
      description: the last element of <code>iterable</code> or the default value
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(java.lang.Iterable<T>)
  id: <T>getLast(java.lang.Iterable<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>getLast(Iterable<T> iterable)
  nameWithType: Iterables.<T>getLast(Iterable<T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast(Iterable<T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.getLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the last element of `iterable`. If `iterable` is a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref> with <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">RandomAccess</xref> support, then this operation is guaranteed to be `O(1)`.


    **`Stream` equivalent:** <xref uid="com.azure.cosmos.implementation.guava25.collect.Streams.findLast" data-throw-if-not-resolved="false">Streams.findLast(stream).get()</xref>
  syntax:
    content: public static T <T>getLast(Iterable<T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    return:
      type: T
      description: the last element of <code>iterable</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(java.lang.Iterable<? extends T>,T)
  id: <T>getOnlyElement(java.lang.Iterable<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>getOnlyElement(Iterable<? extends T> iterable, T defaultValue)
  nameWithType: Iterables.<T>getOnlyElement(Iterable<? extends T> iterable, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(Iterable<? extends T> iterable, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.getOnlyElement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the single element contained in `iterable`, or `defaultValue` if the iterable is empty.


    **Java 8 users:** the `Stream` equivalent to this method is `stream.collect(MoreCollectors.toOptional()).orElse(defaultValue)`.
  syntax:
    content: public static T <T>getOnlyElement(Iterable<? extends T> iterable, T defaultValue)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    - id: defaultValue
      type: T
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(java.lang.Iterable<T>)
  id: <T>getOnlyElement(java.lang.Iterable<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>getOnlyElement(Iterable<T> iterable)
  nameWithType: Iterables.<T>getOnlyElement(Iterable<T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement(Iterable<T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.getOnlyElement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the single element contained in `iterable`.


    **Java 8 users:** the `Stream` equivalent to this method is `stream.collect(MoreCollectors.onlyElement())`.
  syntax:
    content: public static T <T>getOnlyElement(Iterable<T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>indexOf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>indexOf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>indexOf(Iterable<T> iterable, Predicate<? super T> predicate)
  nameWithType: Iterables.<T>indexOf(Iterable<T> iterable, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>indexOf(Iterable<T> iterable, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the index in `iterable` of the first element that satisfies the provided `predicate`, or `-1` if the Iterable has no such elements.


    More formally, returns the lowest index `i` such that `predicate.apply(Iterables.get(iterable, i))` returns `true`, or `-1` if there is no such index.
  syntax:
    content: public static int <T>indexOf(Iterable<T> iterable, Predicate<? super T> predicate)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>limit(java.lang.Iterable<T>,int)
  id: <T>limit(java.lang.Iterable<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>limit(Iterable<T> iterable, int limitSize)
  nameWithType: Iterables.<T>limit(Iterable<T> iterable, int limitSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>limit(Iterable<T> iterable, int limitSize)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.limit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of `iterable` containing its first `limitSize` elements. If `iterable` contains fewer than `limitSize` elements, the returned view contains all of its elements. The returned iterable's iterator supports `remove()` if `iterable`'s iterator does.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.limit" data-throw-if-not-resolved="false">Stream#limit</xref>
  syntax:
    content: public static Iterable<T> <T>limit(Iterable<T> iterable, int limitSize)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
      description: the iterable to limit
    - id: limitSize
      type: int
      description: the maximum number of elements in the returned iterable
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>,java.util.Comparator<? super T>)
  id: <T>mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>,java.util.Comparator<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>mergeSorted(Iterable<? extends Iterable<? extends T>> iterables, Comparator<? super T> comparator)
  nameWithType: Iterables.<T>mergeSorted(Iterable<? extends Iterable<? extends T>> iterables, Comparator<? super T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>mergeSorted(Iterable<? extends Iterable<? extends T>> iterables, Comparator<? super T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.mergeSorted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterable over the merged contents of all given `iterables`. Equivalent entries will not be de-duplicated.


    Callers must ensure that the source `iterables` are in non-descending order as this method does not sort its input.


    For any equivalent elements across all `iterables`, it is undefined which element is returned first.
  syntax:
    content: public static Iterable<T> <T>mergeSorted(Iterable<? extends Iterable<? extends T>> iterables, Comparator<? super T> comparator)
    parameters:
    - id: iterables
      type: java.lang.Iterable<? extends java.lang.Iterable<? extends T>>
    - id: comparator
      type: java.util.Comparator<? super T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>paddedPartition(java.lang.Iterable<T>,int)
  id: <T>paddedPartition(java.lang.Iterable<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>paddedPartition(Iterable<T> iterable, int size)
  nameWithType: Iterables.<T>paddedPartition(Iterable<T> iterable, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>paddedPartition(Iterable<T> iterable, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.paddedPartition*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Divides an iterable into unmodifiable sublists of the given size, padding the final iterable with null values if necessary. For example, partitioning an iterable containing `[a, b, c, d, e]` with a partition size of 3 yields `[[a, b, c], [d, e, null]]` \-- an outer iterable containing two inner lists of three elements each, all in the original order.


    Iterators returned by the returned iterable do not support the <xref uid="java.util.Iterator.remove*" data-throw-if-not-resolved="false">Iterator#remove()</xref> method.
  syntax:
    content: public static Iterable<List<T>> <T>paddedPartition(Iterable<T> iterable, int size)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
      description: the iterable to return a partitioned view of
    - id: size
      type: int
      description: the desired size of each partition
    return:
      type: java.lang.Iterable<java.util.List<T>>
      description: >-
        an iterable of unmodifiable lists containing the elements of <code>iterable</code> divided
             into partitions (the final iterable may have trailing null elements)
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>partition(java.lang.Iterable<T>,int)
  id: <T>partition(java.lang.Iterable<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>partition(Iterable<T> iterable, int size)
  nameWithType: Iterables.<T>partition(Iterable<T> iterable, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>partition(Iterable<T> iterable, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.partition*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Divides an iterable into unmodifiable sublists of the given size (the final iterable may be smaller). For example, partitioning an iterable containing `[a, b, c, d, e]` with a partition size of 3 yields `[[a, b, c], [d, e]]` \-- an outer iterable containing two inner lists of three and two elements, all in the original order.


    Iterators returned by the returned iterable do not support the <xref uid="java.util.Iterator.remove*" data-throw-if-not-resolved="false">Iterator#remove()</xref> method. The returned lists implement <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">RandomAccess</xref>, whether or not the input list does.


    **Note:** if `iterable` is a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Lists.&lt;T&gt;partition(java.util.List&lt;T&gt;,int)" data-throw-if-not-resolved="false">Lists#partition(List, int)</xref> instead.
  syntax:
    content: public static Iterable<List<T>> <T>partition(Iterable<T> iterable, int size)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
      description: the iterable to return a partitioned view of
    - id: size
      type: int
      description: the desired size of each partition (the last may be smaller)
    return:
      type: java.lang.Iterable<java.util.List<T>>
      description: >-
        an iterable of unmodifiable lists containing the elements of <code>iterable</code> divided
             into partitions
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>removeIf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>removeIf(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)
  nameWithType: Iterables.<T>removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.removeIf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes, from an iterable, every element that satisfies the provided predicate.


    Removals may or may not happen immediately as each element is tested against the predicate. The behavior of this method is not specified if `predicate` is dependent on `removeFrom`.


    **Java 8 users:** if `removeFrom` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, use `removeFrom.removeIf(predicate)` instead.
  syntax:
    content: public static boolean <T>removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate)
    parameters:
    - id: removeFrom
      type: java.lang.Iterable<T>
      description: the iterable to (potentially) remove elements from
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
      description: a predicate that determines whether an element should be removed
    return:
      type: boolean
      description: <code>true</code> if any elements were removed from the iterable
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>skip(java.lang.Iterable<T>,int)
  id: <T>skip(java.lang.Iterable<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>skip(Iterable<T> iterable, int numberToSkip)
  nameWithType: Iterables.<T>skip(Iterable<T> iterable, int numberToSkip)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>skip(Iterable<T> iterable, int numberToSkip)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.skip*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of `iterable` that skips its first `numberToSkip` elements. If `iterable` contains fewer than `numberToSkip` elements, the returned iterable skips all of its elements.


    Modifications to the underlying <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> before a call to `iterator()` are reflected in the returned iterator. That is, the iterator skips the first `numberToSkip` elements that exist when the `Iterator` is created, not when `skip()` is called.


    The returned iterable's iterator supports `remove()` if the iterator of the underlying iterable supports it. Note that it is *not* possible to delete the last skipped element by immediately calling `remove()` on that iterator, as the `Iterator` contract states that a call to `remove()` before a call to `next()` will throw an <xref uid="" data-throw-if-not-resolved="false">IllegalStateException</xref>.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.skip" data-throw-if-not-resolved="false">Stream#skip</xref>
  syntax:
    content: public static Iterable<T> <T>skip(Iterable<T> iterable, int numberToSkip)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: numberToSkip
      type: int
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>toArray(java.lang.Iterable<? extends T>,java.lang.Class<T>)
  id: <T>toArray(java.lang.Iterable<? extends T>,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>toArray(Iterable<? extends T> iterable, Class<T> type)
  nameWithType: Iterables.<T>toArray(Iterable<? extends T> iterable, Class<T> type)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>toArray(Iterable<? extends T> iterable, Class<T> type)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Copies an iterable's elements into an array.
  syntax:
    content: public static T[] <T>toArray(Iterable<? extends T> iterable, Class<T> type)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
      description: the iterable to copy
    - id: type
      type: java.lang.Class<T>
      description: the type of the elements
    return:
      type: T[]
      description: a newly-allocated array into which all the elements of the iterable have been copied
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>tryFind(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>tryFind(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>tryFind(Iterable<T> iterable, Predicate<? super T> predicate)
  nameWithType: Iterables.<T>tryFind(Iterable<T> iterable, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>tryFind(Iterable<T> iterable, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.tryFind*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="com.azure.cosmos.implementation.guava25.base.Optional" data-throw-if-not-resolved="false">Optional</xref> containing the first element in `iterable` that satisfies the given predicate, if such an element exists.


    **Warning:** avoid using a `predicate` that matches `null`. If `null` is matched in `iterable`, a NullPointerException will be thrown.


    **`Stream` equivalent:** `stream.filter(predicate).findFirst()`
  syntax:
    content: public static Optional<T> <T>tryFind(Iterable<T> iterable, Predicate<? super T> predicate)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>unmodifiableIterable(java.lang.Iterable<? extends T>)
  id: <T>unmodifiableIterable(java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: <T>unmodifiableIterable(Iterable<? extends T> iterable)
  nameWithType: Iterables.<T>unmodifiableIterable(Iterable<? extends T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>unmodifiableIterable(Iterable<? extends T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.unmodifiableIterable*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable view of `iterable`.
  syntax:
    content: public static Iterable<T> <T>unmodifiableIterable(Iterable<? extends T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<? extends T>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.Iterables()
  id: Iterables()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: Iterables()
  nameWithType: Iterables.Iterables()
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.Iterables()
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.Iterables*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Iterables()
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.contains(java.lang.Iterable<?>,java.lang.Object)
  id: contains(java.lang.Iterable<?>,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: contains(Iterable<?> iterable, Object element)
  nameWithType: Iterables.contains(Iterable<?> iterable, Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.contains(Iterable<?> iterable, Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `iterable` contains any element `o` for which `Objects.equals(o, element)` would return `true`. Otherwise returns `false`, even in cases where <xref uid="java.util.Collection.contains" data-throw-if-not-resolved="false">Collection#contains</xref> might throw <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref> or <xref uid="" data-throw-if-not-resolved="false">ClassCastException</xref>.
  syntax:
    content: public static boolean contains(Iterable<?> iterable, Object element)
    parameters:
    - id: iterable
      type: java.lang.Iterable<?>
    - id: element
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual(java.lang.Iterable<?>,java.lang.Iterable<?>)
  id: elementsEqual(java.lang.Iterable<?>,java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2)
  nameWithType: Iterables.elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Determines whether two iterables contain equal elements in the same order. More specifically, this method returns `true` if `iterable1` and `iterable2` contain the same number of elements and every element of `iterable1` is equal to the corresponding element of `iterable2`.
  syntax:
    content: public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2)
    parameters:
    - id: iterable1
      type: java.lang.Iterable<?>
    - id: iterable2
      type: java.lang.Iterable<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.frequency(java.lang.Iterable<?>,java.lang.Object)
  id: frequency(java.lang.Iterable<?>,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: frequency(Iterable<?> iterable, Object element)
  nameWithType: Iterables.frequency(Iterable<?> iterable, Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.frequency(Iterable<?> iterable, Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.frequency*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the number of elements in the specified iterable that equal the specified object. This implementation avoids a full iteration when the iterable is a <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset" data-throw-if-not-resolved="false">Multiset</xref> or <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>.


    **Java 8 users:** In most cases, the `Stream` equivalent of this method is `stream.filter(element::equals).count()`. If `element` might be null, use `stream.filter(Predicate.isEqual(element)).count()` instead.
  syntax:
    content: public static int frequency(Iterable<?> iterable, Object element)
    parameters:
    - id: iterable
      type: java.lang.Iterable<?>
    - id: element
      type: java.lang.Object
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty(java.lang.Iterable<?>)
  id: isEmpty(java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: isEmpty(Iterable<?> iterable)
  nameWithType: Iterables.isEmpty(Iterable<?> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty(Iterable<?> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Determines if the given iterable contains no elements.


    There is no precise <xref uid="java.util.Iterator" data-throw-if-not-resolved="false">Iterator</xref> equivalent to this method, since one can only ask an iterator whether it has any elements *remaining* (which one does using <xref uid="java.util.Iterator.hasNext" data-throw-if-not-resolved="false">Iterator#hasNext</xref>).


    **`Stream` equivalent:** `!stream.findAny().isPresent()`
  syntax:
    content: public static boolean isEmpty(Iterable<?> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<?>
    return:
      type: boolean
      description: <code>true</code> if the iterable contains no elements
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll(java.lang.Iterable<?>,java.util.Collection<?>)
  id: removeAll(java.lang.Iterable<?>,java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: removeAll(Iterable<?> removeFrom, Collection<?> elementsToRemove)
  nameWithType: Iterables.removeAll(Iterable<?> removeFrom, Collection<?> elementsToRemove)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll(Iterable<?> removeFrom, Collection<?> elementsToRemove)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes, from an iterable, every element that belongs to the provided collection.


    This method calls <xref uid="java.util.Collection.removeAll" data-throw-if-not-resolved="false">Collection#removeAll</xref> if `iterable` is a collection, and <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll*" data-throw-if-not-resolved="false">Iterators#removeAll</xref> otherwise.
  syntax:
    content: public static boolean removeAll(Iterable<?> removeFrom, Collection<?> elementsToRemove)
    parameters:
    - id: removeFrom
      type: java.lang.Iterable<?>
      description: the iterable to (potentially) remove elements from
    - id: elementsToRemove
      type: java.util.Collection<?>
      description: the elements to remove
    return:
      type: boolean
      description: <code>true</code> if any element was removed from <code>iterable</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll(java.lang.Iterable<?>,java.util.Collection<?>)
  id: retainAll(java.lang.Iterable<?>,java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: retainAll(Iterable<?> removeFrom, Collection<?> elementsToRetain)
  nameWithType: Iterables.retainAll(Iterable<?> removeFrom, Collection<?> elementsToRetain)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll(Iterable<?> removeFrom, Collection<?> elementsToRetain)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes, from an iterable, every element that does not belong to the provided collection.


    This method calls <xref uid="java.util.Collection.retainAll" data-throw-if-not-resolved="false">Collection#retainAll</xref> if `iterable` is a collection, and <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll*" data-throw-if-not-resolved="false">Iterators#retainAll</xref> otherwise.
  syntax:
    content: public static boolean retainAll(Iterable<?> removeFrom, Collection<?> elementsToRetain)
    parameters:
    - id: removeFrom
      type: java.lang.Iterable<?>
      description: the iterable to (potentially) remove elements from
    - id: elementsToRetain
      type: java.util.Collection<?>
      description: the elements to retain
    return:
      type: boolean
      description: <code>true</code> if any element was removed from <code>iterable</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.size(java.lang.Iterable<?>)
  id: size(java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: size(Iterable<?> iterable)
  nameWithType: Iterables.size(Iterable<?> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.size(Iterable<?> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the number of elements in `iterable`.
  syntax:
    content: public static int size(Iterable<?> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<?>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.toString(java.lang.Iterable<?>)
  id: toString(java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterables
  langs:
  - java
  name: toString(Iterable<?> iterable)
  nameWithType: Iterables.toString(Iterable<?> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.toString(Iterable<?> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterables.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a string representation of `iterable`, with the format `[e1, e2, ..., en]` (that is, identical to <xref uid="" data-throw-if-not-resolved="false">Arrays</xref>`.toString(Iterables.toArray(iterable))`). Note that for *most* implementations of <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, `collection.toString()` also gives the same result, but that behavior is not generally guaranteed.
  syntax:
    content: public static String toString(Iterable<?> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<?>
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.Iterables*
  name: Iterables
  nameWithType: Iterables.Iterables
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.Iterables
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.unmodifiableIterable*
  name: <T>unmodifiableIterable
  nameWithType: Iterables.<T>unmodifiableIterable
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>unmodifiableIterable
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
    name: ImmutableCollection
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<?>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.size*
  name: size
  nameWithType: Iterables.size
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.contains*
  name: contains
  nameWithType: Iterables.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll*
  name: removeAll
  nameWithType: Iterables.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll*
  name: retainAll
  nameWithType: Iterables.retainAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.retainAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.removeIf*
  name: <T>removeIf
  nameWithType: Iterables.<T>removeIf
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>removeIf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual*
  name: elementsEqual
  nameWithType: Iterables.elementsEqual
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.elementsEqual
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.toString*
  name: toString
  nameWithType: Iterables.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.getOnlyElement*
  name: <T>getOnlyElement
  nameWithType: Iterables.<T>getOnlyElement
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getOnlyElement
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T[]
  spec.java:
  - uid: T
    name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.toArray*
  name: <T>toArray
  nameWithType: Iterables.<T>toArray
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>toArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<T>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.addAll*
  name: <T>addAll
  nameWithType: Iterables.<T>addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.frequency*
  name: frequency
  nameWithType: Iterables.frequency
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.frequency
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.cycle*
  name: <T>cycle
  nameWithType: Iterables.<T>cycle
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
  name: <T>concat
  nameWithType: Iterables.<T>concat
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends T>[]
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Iterable<? extends java.lang.Iterable<? extends T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.lang.Iterable'
    name: Iterable
    fullName: '? extends java.lang.Iterable'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<java.util.List<T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.partition*
  name: <T>partition
  nameWithType: Iterables.<T>partition
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>partition
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.paddedPartition*
  name: <T>paddedPartition
  nameWithType: Iterables.<T>paddedPartition
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>paddedPartition
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.filter*
  name: <T>filter
  nameWithType: Iterables.<T>filter
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.any*
  name: <T>any
  nameWithType: Iterables.<T>any
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>any
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.all*
  name: <T>all
  nameWithType: Iterables.<T>all
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>all
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.find*
  name: <T>find
  nameWithType: Iterables.<T>find
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>find
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Optional<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.tryFind*
  name: <T>tryFind
  nameWithType: Iterables.<T>tryFind
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>tryFind
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.indexOf*
  name: <T>indexOf
  nameWithType: Iterables.<T>indexOf
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>indexOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<F>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super F'
    name: '? super F'
    fullName: '? super F'
  - name: ','
    fullName: ','
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.transform*
  name: <F,T>transform
  nameWithType: Iterables.<F,T>transform
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<F,T>transform
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.get*
  name: <T>get
  nameWithType: Iterables.<T>get
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.getFirst*
  name: <T>getFirst
  nameWithType: Iterables.<T>getFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.getLast*
  name: <T>getLast
  nameWithType: Iterables.<T>getLast
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>getLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.skip*
  name: <T>skip
  nameWithType: Iterables.<T>skip
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>skip
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.limit*
  name: <T>limit
  nameWithType: Iterables.<T>limit
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>limit
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.consumingIterable*
  name: <T>consumingIterable
  nameWithType: Iterables.<T>consumingIterable
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>consumingIterable
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty*
  name: isEmpty
  nameWithType: Iterables.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.mergeSorted*
  name: <T>mergeSorted
  nameWithType: Iterables.<T>mergeSorted
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>mergeSorted
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: E
  name: E
  nameWithType: E
  fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: ImmutableCollection
  nameWithType: ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '? extends T>[]'
  name: '? extends T>[]'
  nameWithType: '? extends T>[]'
  fullName: '? extends T>[]'
- uid: '? extends java.lang.Iterable'
  name: '? extends Iterable'
  nameWithType: '? extends Iterable'
  fullName: '? extends java.lang.Iterable'
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.cosmos.implementation.guava25.base.Optional
  name: Optional
  nameWithType: Optional
  fullName: com.azure.cosmos.implementation.guava25.base.Optional
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super F,? extends T'
  name: '? super F,? extends T'
  nameWithType: '? super F,? extends T'
  fullName: '? super F,? extends T'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
