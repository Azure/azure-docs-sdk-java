### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse*"
fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse"
name: "importCertificateWithResponse"
nameWithType: "CertificateAsyncClient.importCertificateWithResponse"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)"
  fullName: "com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  name: "importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  nameWithType: "CertificateAsyncClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  summary: "Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.\n\n**Code Samples**\n\nImports a certificate into the key vault.\n\n```java\nbyte[] certToImport = new byte[100];\n ImportCertificateOptions importCertificateOptions  =\n     new ImportCertificateOptions(\"certificateName\", certToImport).setEnabled(false);\n certificateAsyncClient.importCertificateWithResponse(importCertificateOptions)\n     .subscribe(certificateResponse -> System.out.printf(\"Received Certificate with name %s and key id %s\",\n         certificateResponse.getValue().getProperties().getName(), certificateResponse.getValue().getKeyId()));\n```"
  parameters:
  - description: "The details of the certificate to import to the key vault"
    name: "importCertificateOptions"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.ImportCertificateOptions?alt=com.azure.security.keyvault.certificates.models.ImportCertificateOptions&text=ImportCertificateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultCertificateWithPolicy>> importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"imported certificate\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.2.0-beta.2
