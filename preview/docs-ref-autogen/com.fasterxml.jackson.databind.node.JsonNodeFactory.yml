### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory
  id: JsonNodeFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node
  children:
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory()
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange(long)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode()
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode(int)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[])
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[],int,int)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode(boolean)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.instance
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.missingNode()
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode()
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(byte)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(double)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(float)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(int)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Byte)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Double)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Float)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Integer)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Long)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Short)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigDecimal)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigInteger)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(long)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(short)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode()
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode(java.lang.Object)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode(com.fasterxml.jackson.databind.util.RawValue)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode(java.lang.String)
  - com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals(boolean)
  langs:
  - java
  name: JsonNodeFactory
  nameWithType: JsonNodeFactory
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory
  type: Class
  package: com.fasterxml.jackson.databind.node
  summary: Base class that specifies methods for getting access to Node instances (newly constructed, or shared, depending on type), as well as basic implementation of the methods. Designed to be sub-classed if extended functionality (additions to behavior of node types, mostly) is needed.
  syntax:
    content: public class JsonNodeFactory implements Serializable, JsonNodeCreator
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  - com.fasterxml.jackson.databind.node.JsonNodeCreator
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory()
  id: JsonNodeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: JsonNodeFactory()
  nameWithType: JsonNodeFactory.JsonNodeFactory()
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory()
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Default constructor


    This calls <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean)" data-throw-if-not-resolved="false">#JsonNodeFactory(boolean)</xref> with `false` as an argument.
  syntax:
    content: protected JsonNodeFactory()
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean)
  id: JsonNodeFactory(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: JsonNodeFactory(boolean bigDecimalExact)
  nameWithType: JsonNodeFactory.JsonNodeFactory(boolean bigDecimalExact)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean bigDecimalExact)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Main constructor


    The only argument to this constructor is a boolean telling whether <xref uid="com.fasterxml.jackson.databind.node.DecimalNode" data-throw-if-not-resolved="false">DecimalNode</xref> instances must be built with exact representations of <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref> instances.


    This has quite an influence since, for instance, a BigDecimal (and, therefore, a DecimalNode) constructed from input string `"1.0"` and another constructed with input string `"1.00"` **will not** be equal, since their scale differs (1 in the first case, 2 in the second case).


    Note that setting the argument to `true` does *not* guarantee a strict inequality between JSON representations: input texts `"0.1"` and `"1e-1"`, for instance, yield two equivalent BigDecimal instances since they have the same scale (1).


    The no-arg constructor (and the default <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory.instance" data-throw-if-not-resolved="false">#instance</xref>) calls this constructor with `false` as an argument.
  syntax:
    content: public JsonNodeFactory(boolean bigDecimalExact)
    parameters:
    - id: bigDecimalExact
      type: boolean
      description: see description
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange(long)
  id: _inIntRange(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: _inIntRange(long l)
  nameWithType: JsonNodeFactory._inIntRange(long l)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange(long l)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected boolean _inIntRange(long l)
    parameters:
    - id: l
      type: long
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode()
  id: arrayNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: arrayNode()
  nameWithType: JsonNodeFactory.arrayNode()
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode()
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing an empty JSON Array node
  syntax:
    content: public ArrayNode arrayNode()
    return:
      type: com.fasterxml.jackson.databind.node.ArrayNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode(int)
  id: arrayNode(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: arrayNode(int capacity)
  nameWithType: JsonNodeFactory.arrayNode(int capacity)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode(int capacity)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing a JSON Array node with an initial capacity
  syntax:
    content: public ArrayNode arrayNode(int capacity)
    parameters:
    - id: capacity
      type: int
    return:
      type: com.fasterxml.jackson.databind.node.ArrayNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[])
  id: binaryNode(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: binaryNode(byte[] data)
  nameWithType: JsonNodeFactory.binaryNode(byte[] data)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[] data)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing a node that represents given binary data, and will get serialized as equivalent base64-encoded String value
  syntax:
    content: public BinaryNode binaryNode(byte[] data)
    parameters:
    - id: data
      type: byte[]
    return:
      type: com.fasterxml.jackson.databind.node.BinaryNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[],int,int)
  id: binaryNode(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: binaryNode(byte[] data, int offset, int length)
  nameWithType: JsonNodeFactory.binaryNode(byte[] data, int offset, int length)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[] data, int offset, int length)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing a node that represents given binary data, and will get serialized as equivalent base64-encoded String value
  syntax:
    content: public BinaryNode binaryNode(byte[] data, int offset, int length)
    parameters:
    - id: data
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
    return:
      type: com.fasterxml.jackson.databind.node.BinaryNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode(boolean)
  id: booleanNode(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: booleanNode(boolean v)
  nameWithType: JsonNodeFactory.booleanNode(boolean v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode(boolean v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON boolean value (either literal 'true' or 'false')
  syntax:
    content: public BooleanNode booleanNode(boolean v)
    parameters:
    - id: v
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.node.BooleanNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.instance
  id: instance
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: instance
  nameWithType: JsonNodeFactory.instance
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.instance
  type: Field
  package: com.fasterxml.jackson.databind.node
  summary: 'Default singleton instance that construct "standard" node instances: given that this class is stateless, a globally shared singleton can be used.'
  syntax:
    content: public static final JsonNodeFactory instance
    return:
      type: com.fasterxml.jackson.databind.node.JsonNodeFactory
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.missingNode()
  id: missingNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: missingNode()
  nameWithType: JsonNodeFactory.missingNode()
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.missingNode()
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.missingNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public JsonNode missingNode()
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode()
  id: nullNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: nullNode()
  nameWithType: JsonNodeFactory.nullNode()
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode()
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON null node (which represents literal null value)
  syntax:
    content: public NullNode nullNode()
    return:
      type: com.fasterxml.jackson.databind.node.NullNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(byte)
  id: numberNode(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(byte v)
  nameWithType: JsonNodeFactory.numberNode(byte v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(byte v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given 8-bit value
  syntax:
    content: public NumericNode numberNode(byte v)
    parameters:
    - id: v
      type: byte
    return:
      type: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(double)
  id: numberNode(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(double v)
  nameWithType: JsonNodeFactory.numberNode(double v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(double v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given 64-bit floating point value
  syntax:
    content: public NumericNode numberNode(double v)
    parameters:
    - id: v
      type: double
    return:
      type: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(float)
  id: numberNode(float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(float v)
  nameWithType: JsonNodeFactory.numberNode(float v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(float v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given 32-bit floating point value
  syntax:
    content: public NumericNode numberNode(float v)
    parameters:
    - id: v
      type: float
    return:
      type: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(int)
  id: numberNode(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(int v)
  nameWithType: JsonNodeFactory.numberNode(int v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(int v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given 32-bit integer value
  syntax:
    content: public NumericNode numberNode(int v)
    parameters:
    - id: v
      type: int
    return:
      type: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Byte)
  id: numberNode(java.lang.Byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(Byte value)
  nameWithType: JsonNodeFactory.numberNode(Byte value)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(Byte value)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be <xref uid="com.fasterxml.jackson.databind.node.NumericNode" data-throw-if-not-resolved="false">NumericNode</xref>, but just <xref uid="com.fasterxml.jackson.databind.node.ValueNode" data-throw-if-not-resolved="false">ValueNode</xref>.
  syntax:
    content: public ValueNode numberNode(Byte value)
    parameters:
    - id: value
      type: java.lang.Byte
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Double)
  id: numberNode(java.lang.Double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(Double value)
  nameWithType: JsonNodeFactory.numberNode(Double value)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(Double value)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be <xref uid="com.fasterxml.jackson.databind.node.NumericNode" data-throw-if-not-resolved="false">NumericNode</xref>, but just <xref uid="com.fasterxml.jackson.databind.node.ValueNode" data-throw-if-not-resolved="false">ValueNode</xref>.
  syntax:
    content: public ValueNode numberNode(Double value)
    parameters:
    - id: value
      type: java.lang.Double
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Float)
  id: numberNode(java.lang.Float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(Float value)
  nameWithType: JsonNodeFactory.numberNode(Float value)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(Float value)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be <xref uid="com.fasterxml.jackson.databind.node.NumericNode" data-throw-if-not-resolved="false">NumericNode</xref>, but just <xref uid="com.fasterxml.jackson.databind.node.ValueNode" data-throw-if-not-resolved="false">ValueNode</xref>.
  syntax:
    content: public ValueNode numberNode(Float value)
    parameters:
    - id: value
      type: java.lang.Float
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Integer)
  id: numberNode(java.lang.Integer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(Integer value)
  nameWithType: JsonNodeFactory.numberNode(Integer value)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(Integer value)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be <xref uid="com.fasterxml.jackson.databind.node.NumericNode" data-throw-if-not-resolved="false">NumericNode</xref>, but just <xref uid="com.fasterxml.jackson.databind.node.ValueNode" data-throw-if-not-resolved="false">ValueNode</xref>.
  syntax:
    content: public ValueNode numberNode(Integer value)
    parameters:
    - id: value
      type: java.lang.Integer
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Long)
  id: numberNode(java.lang.Long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(Long v)
  nameWithType: JsonNodeFactory.numberNode(Long v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(Long v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be <xref uid="com.fasterxml.jackson.databind.node.NumericNode" data-throw-if-not-resolved="false">NumericNode</xref>, but just <xref uid="com.fasterxml.jackson.databind.node.ValueNode" data-throw-if-not-resolved="false">ValueNode</xref>.
  syntax:
    content: public ValueNode numberNode(Long v)
    parameters:
    - id: v
      type: java.lang.Long
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Short)
  id: numberNode(java.lang.Short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(Short value)
  nameWithType: JsonNodeFactory.numberNode(Short value)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(Short value)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be <xref uid="com.fasterxml.jackson.databind.node.NumericNode" data-throw-if-not-resolved="false">NumericNode</xref>, but just <xref uid="com.fasterxml.jackson.databind.node.ValueNode" data-throw-if-not-resolved="false">ValueNode</xref>.
  syntax:
    content: public ValueNode numberNode(Short value)
    parameters:
    - id: value
      type: java.lang.Short
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigDecimal)
  id: numberNode(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(BigDecimal v)
  nameWithType: JsonNodeFactory.numberNode(BigDecimal v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(BigDecimal v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Factory method for getting an instance of JSON numeric value that expresses given unlimited precision floating point value


    In the event that the factory has been built to normalize decimal values, the BigDecimal argument will be stripped off its trailing zeroes, using <xref uid="java.math.BigDecimal.stripTrailingZeros*" data-throw-if-not-resolved="false">BigDecimal#stripTrailingZeros()</xref>.
  syntax:
    content: public ValueNode numberNode(BigDecimal v)
    parameters:
    - id: v
      type: java.math.BigDecimal
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigInteger)
  id: numberNode(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(BigInteger v)
  nameWithType: JsonNodeFactory.numberNode(BigInteger v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(BigInteger v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given unlimited range integer value
  syntax:
    content: public ValueNode numberNode(BigInteger v)
    parameters:
    - id: v
      type: java.math.BigInteger
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(long)
  id: numberNode(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(long v)
  nameWithType: JsonNodeFactory.numberNode(long v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(long v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given 64-bit integer value
  syntax:
    content: public NumericNode numberNode(long v)
    parameters:
    - id: v
      type: long
    return:
      type: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(short)
  id: numberNode(short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: numberNode(short v)
  nameWithType: JsonNodeFactory.numberNode(short v)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(short v)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for getting an instance of JSON numeric value that expresses given 16-bit integer value
  syntax:
    content: public NumericNode numberNode(short v)
    parameters:
    - id: v
      type: short
    return:
      type: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode()
  id: objectNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: objectNode()
  nameWithType: JsonNodeFactory.objectNode()
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode()
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing an empty JSON Object ("struct") node
  syntax:
    content: public ObjectNode objectNode()
    return:
      type: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode(java.lang.Object)
  id: pojoNode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: pojoNode(Object pojo)
  nameWithType: JsonNodeFactory.pojoNode(Object pojo)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode(Object pojo)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing a wrapper for POJO ("Plain Old Java Object") objects; these will get serialized using data binding, usually as JSON Objects, but in some cases as JSON Strings or other node types.
  syntax:
    content: public ValueNode pojoNode(Object pojo)
    parameters:
    - id: pojo
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode(com.fasterxml.jackson.databind.util.RawValue)
  id: rawValueNode(com.fasterxml.jackson.databind.util.RawValue)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: rawValueNode(RawValue value)
  nameWithType: JsonNodeFactory.rawValueNode(RawValue value)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode(RawValue value)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method to use for adding "raw values"; pre-encoded values that are included exactly as-is when node is serialized. This may be used, for example, to include fully serialized JSON sub-trees. Note that the concept may not work with all backends, and since no translation of any kinds is done it will not work when converting between data formats.
  syntax:
    content: public ValueNode rawValueNode(RawValue value)
    parameters:
    - id: value
      type: com.fasterxml.jackson.databind.util.RawValue
    return:
      type: com.fasterxml.jackson.databind.node.ValueNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode(java.lang.String)
  id: textNode(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: textNode(String text)
  nameWithType: JsonNodeFactory.textNode(String text)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode(String text)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Factory method for constructing a node that represents JSON String value
  syntax:
    content: public TextNode textNode(String text)
    parameters:
    - id: text
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.node.TextNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals(boolean)
  id: withExactBigDecimals(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.JsonNodeFactory
  langs:
  - java
  name: withExactBigDecimals(boolean bigDecimalExact)
  nameWithType: JsonNodeFactory.withExactBigDecimals(boolean bigDecimalExact)
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals(boolean bigDecimalExact)
  overload: com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Return a factory instance with the desired behavior for BigDecimals


    See <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean)" data-throw-if-not-resolved="false">#JsonNodeFactory(boolean)</xref> for a full description.
  syntax:
    content: public static JsonNodeFactory withExactBigDecimals(boolean bigDecimalExact)
    parameters:
    - id: bigDecimalExact
      type: boolean
      description: see description
    return:
      type: com.fasterxml.jackson.databind.node.JsonNodeFactory
      description: a factory instance
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory*
  name: JsonNodeFactory
  nameWithType: JsonNodeFactory.JsonNodeFactory
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals*
  name: withExactBigDecimals
  nameWithType: JsonNodeFactory.withExactBigDecimals
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.BooleanNode
  name: BooleanNode
  nameWithType: BooleanNode
  fullName: com.fasterxml.jackson.databind.node.BooleanNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode*
  name: booleanNode
  nameWithType: JsonNodeFactory.booleanNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.NullNode
  name: NullNode
  nameWithType: NullNode
  fullName: com.fasterxml.jackson.databind.node.NullNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode*
  name: nullNode
  nameWithType: JsonNodeFactory.nullNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.missingNode*
  name: missingNode
  nameWithType: JsonNodeFactory.missingNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.missingNode
  package: com.fasterxml.jackson.databind.node
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.fasterxml.jackson.databind.node.NumericNode
  name: NumericNode
  nameWithType: NumericNode
  fullName: com.fasterxml.jackson.databind.node.NumericNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode*
  name: numberNode
  nameWithType: JsonNodeFactory.numberNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.Byte
  spec.java:
  - uid: java.lang.Byte
    name: Byte
    fullName: java.lang.Byte
- uid: com.fasterxml.jackson.databind.node.ValueNode
  name: ValueNode
  nameWithType: ValueNode
  fullName: com.fasterxml.jackson.databind.node.ValueNode
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: java.lang.Short
  spec.java:
  - uid: java.lang.Short
    name: Short
    fullName: java.lang.Short
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: java.lang.Long
  spec.java:
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: java.lang.Float
  spec.java:
  - uid: java.lang.Float
    name: Float
    fullName: java.lang.Float
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: java.lang.Double
  spec.java:
  - uid: java.lang.Double
    name: Double
    fullName: java.lang.Double
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.node.TextNode
  name: TextNode
  nameWithType: TextNode
  fullName: com.fasterxml.jackson.databind.node.TextNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode*
  name: textNode
  nameWithType: JsonNodeFactory.textNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode
  package: com.fasterxml.jackson.databind.node
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.node.BinaryNode
  name: BinaryNode
  nameWithType: BinaryNode
  fullName: com.fasterxml.jackson.databind.node.BinaryNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode*
  name: binaryNode
  nameWithType: JsonNodeFactory.binaryNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ArrayNode
  name: ArrayNode
  nameWithType: ArrayNode
  fullName: com.fasterxml.jackson.databind.node.ArrayNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode*
  name: arrayNode
  nameWithType: JsonNodeFactory.arrayNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ObjectNode
  name: ObjectNode
  nameWithType: ObjectNode
  fullName: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode*
  name: objectNode
  nameWithType: JsonNodeFactory.objectNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode*
  name: pojoNode
  nameWithType: JsonNodeFactory.pojoNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.util.RawValue
  name: RawValue
  nameWithType: RawValue
  fullName: com.fasterxml.jackson.databind.util.RawValue
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode*
  name: rawValueNode
  nameWithType: JsonNodeFactory.rawValueNode
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange*
  name: _inIntRange
  nameWithType: JsonNodeFactory._inIntRange
  fullName: com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.JsonNodeCreator
  name: JsonNodeCreator
  nameWithType: JsonNodeCreator
  fullName: com.fasterxml.jackson.databind.node.JsonNodeCreator
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
