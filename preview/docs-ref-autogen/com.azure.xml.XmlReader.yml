### YamlMime:JavaType
uid: "com.azure.xml.XmlReader"
fullName: "com.azure.xml.XmlReader"
name: "XmlReader"
nameWithType: "XmlReader"
summary: "Reads an XML encoded value as a stream of tokens."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public abstract class **XmlReader**</br> implements <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\">AutoCloseable</a>"
constructors:
- uid: "com.azure.xml.XmlReader.XmlReader()"
  fullName: "com.azure.xml.XmlReader.XmlReader()"
  name: "XmlReader()"
  nameWithType: "XmlReader.XmlReader()"
  syntax: "public XmlReader()"
methods:
- uid: "com.azure.xml.XmlReader.<T>getNullableAttribute(java.lang.String,java.lang.String,com.azure.xml.ReadValueCallback<java.lang.String,T>)"
  fullName: "com.azure.xml.XmlReader.getNullableAttribute(String namespaceUri, String localName, ReadValueCallback<String,T> converter)"
  name: "getNullableAttribute(String namespaceUri, String localName, ReadValueCallback<String,T> converter)"
  nameWithType: "XmlReader.getNullableAttribute(String namespaceUri, String localName, ReadValueCallback<String,T> converter)"
  summary: "Gets the nullable value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Function that converts the attribute text value to the nullable type."
    name: "converter"
    type: "<xref href=\"com.azure.xml.ReadValueCallback?alt=com.azure.xml.ReadValueCallback&text=ReadValueCallback\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final T <T>getNullableAttribute(String namespaceUri, String localName, ReadValueCallback<String,T> converter)"
  exceptions:
  - description: "If the nullable attribute cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the nullable value for the attribute in the XML element.\n\nIf the attribute doesn't have a value or doesn't exist null will be returned, otherwise the attribute <xref uid=\"com.azure.xml.XmlReader.getStringAttribute(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getStringAttribute(String, String)\"></xref> is passed to the converter."
  returns:
    description: "The converted text value, or null if the attribute didn't have a value."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.<T>getNullableElement(com.azure.xml.ReadValueCallback<java.lang.String,T>)"
  fullName: "com.azure.xml.XmlReader.getNullableElement(ReadValueCallback<String,T> converter)"
  name: "getNullableElement(ReadValueCallback<String,T> converter)"
  nameWithType: "XmlReader.getNullableElement(ReadValueCallback<String,T> converter)"
  summary: "Gets the nullable value for the current element."
  modifiers:
  - "final"
  parameters:
  - description: "Function that converts the element text value to the nullable type."
    name: "converter"
    type: "<xref href=\"com.azure.xml.ReadValueCallback?alt=com.azure.xml.ReadValueCallback&text=ReadValueCallback\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final T <T>getNullableElement(ReadValueCallback<String,T> converter)"
  exceptions:
  - description: "If the nullable element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the nullable value for the current element.\n\nIf the current element doesn't have a value null will be returned, otherwise the element <xref uid=\"com.azure.xml.XmlReader.getStringElement()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"text value\"></xref> is passed to the converter."
  returns:
    description: "The converted text value, or null if the element didn't have a value."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.<T>readObject(java.lang.String,com.azure.xml.ReadValueCallback<com.azure.xml.XmlReader,T>)"
  fullName: "com.azure.xml.XmlReader.readObject(String localName, ReadValueCallback<XmlReader,T> converter)"
  name: "readObject(String localName, ReadValueCallback<XmlReader,T> converter)"
  nameWithType: "XmlReader.readObject(String localName, ReadValueCallback<XmlReader,T> converter)"
  summary: "Reads an object from the XML stream."
  modifiers:
  - "final"
  parameters:
  - description: "The expecting starting local name for the object."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The function that reads the object."
    name: "converter"
    type: "<xref href=\"com.azure.xml.ReadValueCallback?alt=com.azure.xml.ReadValueCallback&text=ReadValueCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.xml.XmlReader?alt=com.azure.xml.XmlReader&text=XmlReader\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final T <T>readObject(String localName, ReadValueCallback<XmlReader,T> converter)"
  exceptions:
  - description: "If the starting tag isn't <xref uid=\"XmlToken#START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> or the tag doesn't match\n the expected <code>startTagName</code>"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Reads an object from the XML stream.\n\nValidates that the <xref uid=\"com.azure.xml.XmlReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlReader\"></xref> is currently pointing to an <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> which has the qualifying name specified by the `startTagName`."
  returns:
    description: "An instance of the expected object,"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.<T>readObject(java.lang.String,java.lang.String,com.azure.xml.ReadValueCallback<com.azure.xml.XmlReader,T>)"
  fullName: "com.azure.xml.XmlReader.readObject(String namespaceUri, String localName, ReadValueCallback<XmlReader,T> converter)"
  name: "readObject(String namespaceUri, String localName, ReadValueCallback<XmlReader,T> converter)"
  nameWithType: "XmlReader.readObject(String namespaceUri, String localName, ReadValueCallback<XmlReader,T> converter)"
  summary: "Reads an object from the XML stream."
  modifiers:
  - "final"
  parameters:
  - description: "The expecting namespace for the object."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The expecting starting local name for the object."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The function that reads the object."
    name: "converter"
    type: "<xref href=\"com.azure.xml.ReadValueCallback?alt=com.azure.xml.ReadValueCallback&text=ReadValueCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.xml.XmlReader?alt=com.azure.xml.XmlReader&text=XmlReader\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public final T <T>readObject(String namespaceUri, String localName, ReadValueCallback<XmlReader,T> converter)"
  exceptions:
  - description: "If the starting tag isn't <xref uid=\"XmlToken#START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> or the tag doesn't match\n the expected <code>startTagName</code>"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Reads an object from the XML stream.\n\nValidates that the <xref uid=\"com.azure.xml.XmlReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlReader\"></xref> is currently pointing to an <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> which has the qualifying name specified by the `startTagName`."
  returns:
    description: "An instance of the expected object,"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.close()"
  fullName: "com.azure.xml.XmlReader.close()"
  name: "close()"
  nameWithType: "XmlReader.close()"
  summary: "Closes the XML stream."
  modifiers:
  - "abstract"
  syntax: "public abstract void close()"
  exceptions:
  - description: "If the underlying content store fails to close."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Closes the XML stream."
- uid: "com.azure.xml.XmlReader.currentToken()"
  fullName: "com.azure.xml.XmlReader.currentToken()"
  name: "currentToken()"
  nameWithType: "XmlReader.currentToken()"
  summary: "Gets the <xref uid=\"com.azure.xml.XmlToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken\"></xref> that the reader points to currently."
  modifiers:
  - "abstract"
  syntax: "public abstract XmlToken currentToken()"
  desc: "Gets the <xref uid=\"com.azure.xml.XmlToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken\"></xref> that the reader points to currently.\n\nReturns <xref uid=\"com.azure.xml.XmlToken.START_DOCUMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_DOCUMENT\"></xref> if the reader hasn't begun reading the XML stream. Returns <xref uid=\"com.azure.xml.XmlToken.END_DOCUMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_DOCUMENT\"></xref> if the reader has completed reading the XML stream."
  returns:
    description: "The <xref uid=\"com.azure.xml.XmlToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken\"></xref> that the reader points to currently."
    type: "<xref href=\"com.azure.xml.XmlToken?alt=com.azure.xml.XmlToken&text=XmlToken\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getBinaryAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getBinaryAttribute(String namespaceUri, String localName)"
  name: "getBinaryAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getBinaryAttribute(String namespaceUri, String localName)"
  summary: "Gets the binary value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public final byte[] getBinaryAttribute(String namespaceUri, String localName)"
  desc: "Gets the binary value for the attribute in the XML element."
  returns:
    description: "The binary value for the attribute in the XML element."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.xml.XmlReader.getBinaryElement()"
  fullName: "com.azure.xml.XmlReader.getBinaryElement()"
  name: "getBinaryElement()"
  nameWithType: "XmlReader.getBinaryElement()"
  summary: "Gets the binary value for the current element."
  modifiers:
  - "final"
  syntax: "public final byte[] getBinaryElement()"
  exceptions:
  - description: "If the binary element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the binary value for the current element."
  returns:
    description: "The binary value for the current element."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.xml.XmlReader.getBooleanAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getBooleanAttribute(String namespaceUri, String localName)"
  name: "getBooleanAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getBooleanAttribute(String namespaceUri, String localName)"
  summary: "Gets the boolean value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public final boolean getBooleanAttribute(String namespaceUri, String localName)"
  desc: "Gets the boolean value for the attribute in the XML element."
  returns:
    description: "The boolean value for the attribute in the XML element."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getBooleanElement()"
  fullName: "com.azure.xml.XmlReader.getBooleanElement()"
  name: "getBooleanElement()"
  nameWithType: "XmlReader.getBooleanElement()"
  summary: "Gets the boolean value for the current element."
  modifiers:
  - "final"
  syntax: "public final boolean getBooleanElement()"
  exceptions:
  - description: "If the boolean element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the boolean value for the current element."
  returns:
    description: "The boolean value for the current element."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getDoubleAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getDoubleAttribute(String namespaceUri, String localName)"
  name: "getDoubleAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getDoubleAttribute(String namespaceUri, String localName)"
  summary: "Gets the double value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public final double getDoubleAttribute(String namespaceUri, String localName)"
  desc: "Gets the double value for the attribute in the XML element."
  returns:
    description: "The double value for the attribute in the XML element."
    type: "<xref href=\"double?alt=double&text=double\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getDoubleElement()"
  fullName: "com.azure.xml.XmlReader.getDoubleElement()"
  name: "getDoubleElement()"
  nameWithType: "XmlReader.getDoubleElement()"
  summary: "Gets the double value for the current element."
  modifiers:
  - "final"
  syntax: "public final double getDoubleElement()"
  exceptions:
  - description: "If the double element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the double value for the current element."
  returns:
    description: "The double value for the current element."
    type: "<xref href=\"double?alt=double&text=double\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getElementName()"
  fullName: "com.azure.xml.XmlReader.getElementName()"
  name: "getElementName()"
  nameWithType: "XmlReader.getElementName()"
  summary: "Gets the <xref uid=\"javax.xml.namespace.QName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QName\"></xref> for the current XML element."
  modifiers:
  - "abstract"
  syntax: "public abstract QName getElementName()"
  desc: "Gets the <xref uid=\"javax.xml.namespace.QName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QName\"></xref> for the current XML element."
  returns:
    description: "The <xref uid=\"javax.xml.namespace.QName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"QName\"></xref> for the current XML element."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/namespace/QName.html\">QName</a>"
- uid: "com.azure.xml.XmlReader.getFloatAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getFloatAttribute(String namespaceUri, String localName)"
  name: "getFloatAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getFloatAttribute(String namespaceUri, String localName)"
  summary: "Gets the float value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public final float getFloatAttribute(String namespaceUri, String localName)"
  desc: "Gets the float value for the attribute in the XML element."
  returns:
    description: "The float value for the attribute in the XML element."
    type: "<xref href=\"float?alt=float&text=float\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getFloatElement()"
  fullName: "com.azure.xml.XmlReader.getFloatElement()"
  name: "getFloatElement()"
  nameWithType: "XmlReader.getFloatElement()"
  summary: "Gets the float value for the current element."
  modifiers:
  - "final"
  syntax: "public final float getFloatElement()"
  exceptions:
  - description: "If the float element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the float value for the current element."
  returns:
    description: "The float value for the current element."
    type: "<xref href=\"float?alt=float&text=float\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getIntAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getIntAttribute(String namespaceUri, String localName)"
  name: "getIntAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getIntAttribute(String namespaceUri, String localName)"
  summary: "Gets the int value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public final int getIntAttribute(String namespaceUri, String localName)"
  desc: "Gets the int value for the attribute in the XML element."
  returns:
    description: "The int value for the attribute in the XML element."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getIntElement()"
  fullName: "com.azure.xml.XmlReader.getIntElement()"
  name: "getIntElement()"
  nameWithType: "XmlReader.getIntElement()"
  summary: "Gets the int value for the current element."
  modifiers:
  - "final"
  syntax: "public final int getIntElement()"
  exceptions:
  - description: "If the int element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the int value for the current element."
  returns:
    description: "The int value for the current element."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getLongAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getLongAttribute(String namespaceUri, String localName)"
  name: "getLongAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getLongAttribute(String namespaceUri, String localName)"
  summary: "Gets the long value for the attribute in the XML element."
  modifiers:
  - "final"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public final long getLongAttribute(String namespaceUri, String localName)"
  desc: "Gets the long value for the attribute in the XML element."
  returns:
    description: "The long value for the attribute in the XML element."
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getLongElement()"
  fullName: "com.azure.xml.XmlReader.getLongElement()"
  name: "getLongElement()"
  nameWithType: "XmlReader.getLongElement()"
  summary: "Gets the long value for the current element."
  modifiers:
  - "final"
  syntax: "public final long getLongElement()"
  exceptions:
  - description: "If the long element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the long value for the current element."
  returns:
    description: "The long value for the current element."
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.getStringAttribute(java.lang.String,java.lang.String)"
  fullName: "com.azure.xml.XmlReader.getStringAttribute(String namespaceUri, String localName)"
  name: "getStringAttribute(String namespaceUri, String localName)"
  nameWithType: "XmlReader.getStringAttribute(String namespaceUri, String localName)"
  summary: "Gets the string value for the attribute in the XML element."
  modifiers:
  - "abstract"
  parameters:
  - description: "Attribute namespace, may be null."
    name: "namespaceUri"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Attribute local name."
    name: "localName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public abstract String getStringAttribute(String namespaceUri, String localName)"
  desc: "Gets the string value for the attribute in the XML element.\n\nNull is returned if the attribute doesn't exist in the XML element."
  returns:
    description: "The string value for the attribute in the XML element, or null if the attribute doesn't exist."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.xml.XmlReader.getStringElement()"
  fullName: "com.azure.xml.XmlReader.getStringElement()"
  name: "getStringElement()"
  nameWithType: "XmlReader.getStringElement()"
  summary: "Gets the string value for the current element."
  modifiers:
  - "abstract"
  syntax: "public abstract String getStringElement()"
  exceptions:
  - description: "If the String element cannot be read."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Gets the string value for the current element."
  returns:
    description: "The string value for the current element."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.xml.XmlReader.nextElement()"
  fullName: "com.azure.xml.XmlReader.nextElement()"
  name: "nextElement()"
  nameWithType: "XmlReader.nextElement()"
  summary: "Iterates to and returns the next <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> or <xref uid=\"com.azure.xml.XmlToken.END_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_ELEMENT\"></xref> in the XML stream."
  modifiers:
  - "abstract"
  syntax: "public abstract XmlToken nextElement()"
  exceptions:
  - description: "If the next element cannot be determined."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Iterates to and returns the next <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> or <xref uid=\"com.azure.xml.XmlToken.END_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_ELEMENT\"></xref> in the XML stream.\n\nReturns <xref uid=\"com.azure.xml.XmlToken.END_DOCUMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_DOCUMENT\"></xref> if iterating to the next element token completes reading of the XML stream."
  returns:
    description: "The next <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> or <xref uid=\"com.azure.xml.XmlToken.END_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_ELEMENT\"></xref> in the XML stream, or\n <xref uid=\"com.azure.xml.XmlToken.END_DOCUMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_DOCUMENT\"></xref> if reading completes."
    type: "<xref href=\"com.azure.xml.XmlToken?alt=com.azure.xml.XmlToken&text=XmlToken\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlReader.skipElement()"
  fullName: "com.azure.xml.XmlReader.skipElement()"
  name: "skipElement()"
  nameWithType: "XmlReader.skipElement()"
  summary: "Skips the current XML element."
  modifiers:
  - "final"
  syntax: "public final void skipElement()"
  exceptions:
  - description: "If skipping the element fails."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Skips the current XML element.\n\nIf the <xref uid=\"com.azure.xml.XmlReader.currentToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#currentToken()\"></xref> isn't an <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref> this is a no-op.\n\nThis reads the XML stream until the matching <xref uid=\"com.azure.xml.XmlToken.END_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#END_ELEMENT\"></xref> is found for the current <xref uid=\"com.azure.xml.XmlToken.START_ELEMENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlToken#START_ELEMENT\"></xref>."
type: "class"
desc: "Reads an XML encoded value as a stream of tokens."
implements:
- "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\">AutoCloseable</a>"
metadata: {}
package: "com.azure.xml"
artifact: com.azure:azure-xml:1.0.0-beta.1
