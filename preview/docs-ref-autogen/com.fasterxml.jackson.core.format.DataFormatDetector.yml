### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.format.DataFormatDetector
  id: DataFormatDetector
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format
  children:
  - com.fasterxml.jackson.core.format.DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD
  - com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory...)
  - com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(java.util.Collection<com.fasterxml.jackson.core.JsonFactory>)
  - com.fasterxml.jackson.core.format.DataFormatDetector._detectors
  - com.fasterxml.jackson.core.format.DataFormatDetector._maxInputLookahead
  - com.fasterxml.jackson.core.format.DataFormatDetector._minimalMatch
  - com.fasterxml.jackson.core.format.DataFormatDetector._optimalMatch
  - com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[])
  - com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int)
  - com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)
  - com.fasterxml.jackson.core.format.DataFormatDetector.toString()
  - com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int)
  - com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(com.fasterxml.jackson.core.format.MatchStrength)
  - com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(com.fasterxml.jackson.core.format.MatchStrength)
  langs:
  - java
  name: DataFormatDetector
  nameWithType: DataFormatDetector
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector
  type: Class
  package: com.fasterxml.jackson.core.format
  summary: Simple helper class that allows data format (content type) auto-detection, given an ordered set of <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> instances to use for actual low-level detection.
  syntax:
    content: public class DataFormatDetector
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD
  id: DEFAULT_MAX_INPUT_LOOKAHEAD
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: DEFAULT_MAX_INPUT_LOOKAHEAD
  nameWithType: DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: By default we will look ahead at most 64 bytes; in most cases, much less (4 bytes or so) is needed, but we will allow bit more leniency to support data formats that need more complex heuristics.
  syntax:
    content: public static final int DEFAULT_MAX_INPUT_LOOKAHEAD
    return:
      type: int
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory...)
  id: DataFormatDetector(com.fasterxml.jackson.core.JsonFactory...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: DataFormatDetector(JsonFactory[] detectors)
  nameWithType: DataFormatDetector.DataFormatDetector(JsonFactory[] detectors)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(JsonFactory[] detectors)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector*
  type: Constructor
  package: com.fasterxml.jackson.core.format
  syntax:
    content: public DataFormatDetector(JsonFactory[] detectors)
    parameters:
    - id: detectors
      type: com.fasterxml.jackson.core.JsonFactory[]
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[],com.fasterxml.jackson.core.format.MatchStrength,com.fasterxml.jackson.core.format.MatchStrength,int)
  id: DataFormatDetector(com.fasterxml.jackson.core.JsonFactory[],com.fasterxml.jackson.core.format.MatchStrength,com.fasterxml.jackson.core.format.MatchStrength,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: DataFormatDetector(JsonFactory[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead)
  nameWithType: DataFormatDetector.DataFormatDetector(JsonFactory[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(JsonFactory[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector*
  type: Constructor
  package: com.fasterxml.jackson.core.format
  syntax:
    content: private DataFormatDetector(JsonFactory[] detectors, MatchStrength optMatch, MatchStrength minMatch, int maxInputLookahead)
    parameters:
    - id: detectors
      type: com.fasterxml.jackson.core.JsonFactory[]
    - id: optMatch
      type: com.fasterxml.jackson.core.format.MatchStrength
    - id: minMatch
      type: com.fasterxml.jackson.core.format.MatchStrength
    - id: maxInputLookahead
      type: int
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(java.util.Collection<com.fasterxml.jackson.core.JsonFactory>)
  id: DataFormatDetector(java.util.Collection<com.fasterxml.jackson.core.JsonFactory>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: DataFormatDetector(Collection<JsonFactory> detectors)
  nameWithType: DataFormatDetector.DataFormatDetector(Collection<JsonFactory> detectors)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector(Collection<JsonFactory> detectors)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector*
  type: Constructor
  package: com.fasterxml.jackson.core.format
  syntax:
    content: public DataFormatDetector(Collection<JsonFactory> detectors)
    parameters:
    - id: detectors
      type: java.util.Collection<com.fasterxml.jackson.core.JsonFactory>
- uid: com.fasterxml.jackson.core.format.DataFormatDetector._detectors
  id: _detectors
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: _detectors
  nameWithType: DataFormatDetector._detectors
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector._detectors
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: Ordered list of factories which both represent data formats to detect (in precedence order, starting with highest) and are used for actual detection.
  syntax:
    content: protected final JsonFactory[] _detectors
    return:
      type: com.fasterxml.jackson.core.JsonFactory[]
- uid: com.fasterxml.jackson.core.format.DataFormatDetector._maxInputLookahead
  id: _maxInputLookahead
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: _maxInputLookahead
  nameWithType: DataFormatDetector._maxInputLookahead
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector._maxInputLookahead
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: >-
    Maximum number of leading bytes of the input that we can read to determine data format.


    Default value is <xref uid="com.fasterxml.jackson.core.format.DataFormatDetector.DEFAULT_MAX_INPUT_LOOKAHEAD" data-throw-if-not-resolved="false">#DEFAULT_MAX_INPUT_LOOKAHEAD</xref>.
  syntax:
    content: protected final int _maxInputLookahead
    return:
      type: int
- uid: com.fasterxml.jackson.core.format.DataFormatDetector._minimalMatch
  id: _minimalMatch
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: _minimalMatch
  nameWithType: DataFormatDetector._minimalMatch
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector._minimalMatch
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: Strength of minimal match we accept as the answer, unless better matches are found. Default value is <xref uid="com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH" data-throw-if-not-resolved="false">MatchStrength#WEAK_MATCH</xref>,
  syntax:
    content: protected final MatchStrength _minimalMatch
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.DataFormatDetector._optimalMatch
  id: _optimalMatch
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: _optimalMatch
  nameWithType: DataFormatDetector._optimalMatch
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector._optimalMatch
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: Strength of match we consider to be good enough to be used without checking any other formats. Default value is <xref uid="com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH" data-throw-if-not-resolved="false">MatchStrength#SOLID_MATCH</xref>,
  syntax:
    content: protected final MatchStrength _optimalMatch
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[])
  id: findFormat(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: findFormat(byte[] fullInputData)
  nameWithType: DataFormatDetector.findFormat(byte[] fullInputData)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[] fullInputData)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat*
  type: Method
  package: com.fasterxml.jackson.core.format
  summary: Method to call to find format that given content (full document) has, as per configuration of this detector instance.
  syntax:
    content: public DataFormatMatcher findFormat(byte[] fullInputData)
    parameters:
    - id: fullInputData
      type: byte[]
    return:
      type: com.fasterxml.jackson.core.format.DataFormatMatcher
      description: >-
        Matcher object which contains result; never null, even in cases
            where no match (with specified minimal match strength) is found.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[],int,int)
  id: findFormat(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: findFormat(byte[] fullInputData, int offset, int len)
  nameWithType: DataFormatDetector.findFormat(byte[] fullInputData, int offset, int len)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(byte[] fullInputData, int offset, int len)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat*
  type: Method
  package: com.fasterxml.jackson.core.format
  summary: Method to call to find format that given content (full document) has, as per configuration of this detector instance.
  syntax:
    content: public DataFormatMatcher findFormat(byte[] fullInputData, int offset, int len)
    parameters:
    - id: fullInputData
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    return:
      type: com.fasterxml.jackson.core.format.DataFormatMatcher
      description: >-
        Matcher object which contains result; never null, even in cases
            where no match (with specified minimal match strength) is found.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(java.io.InputStream)
  id: findFormat(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: findFormat(InputStream in)
  nameWithType: DataFormatDetector.findFormat(InputStream in)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat(InputStream in)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat*
  type: Method
  package: com.fasterxml.jackson.core.format
  summary: Method to call to find format that content (accessible via given <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref>) given has, as per configuration of this detector instance.
  syntax:
    content: public DataFormatMatcher findFormat(InputStream in)
    parameters:
    - id: in
      type: java.io.InputStream
    return:
      type: com.fasterxml.jackson.core.format.DataFormatMatcher
      description: >-
        Matcher object which contains result; never null, even in cases
            where no match (with specified minimal match strength) is found.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.toString()
  id: toString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: toString()
  nameWithType: DataFormatDetector.toString()
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.toString()
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.toString*
  type: Method
  package: com.fasterxml.jackson.core.format
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int)
  id: withMaxInputLookahead(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: withMaxInputLookahead(int lookaheadBytes)
  nameWithType: DataFormatDetector.withMaxInputLookahead(int lookaheadBytes)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead(int lookaheadBytes)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead*
  type: Method
  package: com.fasterxml.jackson.core.format
  summary: Method that will return a detector instance that allows detectors to read up to specified number of bytes when determining format match strength.
  syntax:
    content: public DataFormatDetector withMaxInputLookahead(int lookaheadBytes)
    parameters:
    - id: lookaheadBytes
      type: int
    return:
      type: com.fasterxml.jackson.core.format.DataFormatDetector
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(com.fasterxml.jackson.core.format.MatchStrength)
  id: withMinimalMatch(com.fasterxml.jackson.core.format.MatchStrength)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: withMinimalMatch(MatchStrength minMatch)
  nameWithType: DataFormatDetector.withMinimalMatch(MatchStrength minMatch)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch(MatchStrength minMatch)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch*
  type: Method
  package: com.fasterxml.jackson.core.format
  summary: Method that will return a detector instance that uses given minimal match level; match that may be returned unless a stronger match is found with other format detectors.
  syntax:
    content: public DataFormatDetector withMinimalMatch(MatchStrength minMatch)
    parameters:
    - id: minMatch
      type: com.fasterxml.jackson.core.format.MatchStrength
    return:
      type: com.fasterxml.jackson.core.format.DataFormatDetector
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(com.fasterxml.jackson.core.format.MatchStrength)
  id: withOptimalMatch(com.fasterxml.jackson.core.format.MatchStrength)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.DataFormatDetector
  langs:
  - java
  name: withOptimalMatch(MatchStrength optMatch)
  nameWithType: DataFormatDetector.withOptimalMatch(MatchStrength optMatch)
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch(MatchStrength optMatch)
  overload: com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch*
  type: Method
  package: com.fasterxml.jackson.core.format
  summary: Method that will return a detector instance that uses given optimal match level (match that is considered sufficient to return, without trying to find stronger matches with other formats).
  syntax:
    content: public DataFormatDetector withOptimalMatch(MatchStrength optMatch)
    parameters:
    - id: optMatch
      type: com.fasterxml.jackson.core.format.MatchStrength
    return:
      type: com.fasterxml.jackson.core.format.DataFormatDetector
references:
- uid: com.fasterxml.jackson.core.JsonFactory[]
  spec.java:
  - uid: com.fasterxml.jackson.core.JsonFactory
    name: JsonFactory
    fullName: com.fasterxml.jackson.core.JsonFactory
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector*
  name: DataFormatDetector
  nameWithType: DataFormatDetector.DataFormatDetector
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.DataFormatDetector
  package: com.fasterxml.jackson.core.format
- uid: java.util.Collection<com.fasterxml.jackson.core.JsonFactory>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.core.JsonFactory
    name: JsonFactory
    fullName: com.fasterxml.jackson.core.JsonFactory
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.format.MatchStrength
  name: MatchStrength
  nameWithType: MatchStrength
  fullName: com.fasterxml.jackson.core.format.MatchStrength
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch*
  name: withOptimalMatch
  nameWithType: DataFormatDetector.withOptimalMatch
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.withOptimalMatch
  package: com.fasterxml.jackson.core.format
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch*
  name: withMinimalMatch
  nameWithType: DataFormatDetector.withMinimalMatch
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.withMinimalMatch
  package: com.fasterxml.jackson.core.format
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead*
  name: withMaxInputLookahead
  nameWithType: DataFormatDetector.withMaxInputLookahead
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.withMaxInputLookahead
  package: com.fasterxml.jackson.core.format
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: com.fasterxml.jackson.core.format.DataFormatMatcher
  name: DataFormatMatcher
  nameWithType: DataFormatMatcher
  fullName: com.fasterxml.jackson.core.format.DataFormatMatcher
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat*
  name: findFormat
  nameWithType: DataFormatDetector.findFormat
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.findFormat
  package: com.fasterxml.jackson.core.format
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.format.DataFormatDetector.toString*
  name: toString
  nameWithType: DataFormatDetector.toString
  fullName: com.fasterxml.jackson.core.format.DataFormatDetector.toString
  package: com.fasterxml.jackson.core.format
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.JsonFactory
  name: JsonFactory
  nameWithType: JsonFactory
  fullName: com.fasterxml.jackson.core.JsonFactory
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
