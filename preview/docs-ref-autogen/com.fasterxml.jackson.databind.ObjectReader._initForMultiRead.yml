### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectReader._initForMultiRead*"
fullName: "com.fasterxml.jackson.databind.ObjectReader._initForMultiRead"
name: "_initForMultiRead"
nameWithType: "ObjectReader._initForMultiRead"
members:
- uid: "com.fasterxml.jackson.databind.ObjectReader._initForMultiRead(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser)"
  fullName: "com.fasterxml.jackson.databind.ObjectReader._initForMultiRead(DeserializationContext ctxt, JsonParser p)"
  name: "_initForMultiRead(DeserializationContext ctxt, JsonParser p)"
  nameWithType: "ObjectReader._initForMultiRead(DeserializationContext ctxt, JsonParser p)"
  summary: "Alternative to <xref uid=\"com.fasterxml.jackson.databind.ObjectReader._initForReading*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#_initForReading\"></xref> used in cases where reading of multiple values means that we may or may not want to advance the stream, but need to do other initialization.\n\nBase implementation only sets configured <xref uid=\"com.fasterxml.jackson.core.FormatSchema\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FormatSchema\"></xref>, if any, on parser."
  parameters:
  - name: "ctxt"
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationContext?alt=com.fasterxml.jackson.databind.DeserializationContext&text=DeserializationContext\" data-throw-if-not-resolved=\"False\" />"
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void _initForMultiRead(DeserializationContext ctxt, JsonParser p)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
