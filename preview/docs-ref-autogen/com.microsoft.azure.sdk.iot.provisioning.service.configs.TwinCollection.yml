### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection"
fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection"
name: "TwinCollection"
nameWithType: "TwinCollection"
summary: "Representation of a single Twin collection for Provisioning."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.AbstractMap?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.HashMap?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
- classRef: "<xref href=\"java.util.AbstractMap?alt=java.util.AbstractMap&text=AbstractMap\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.util.AbstractMap.equals(java.lang.Object)?alt=java.util.AbstractMap.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.AbstractMap.hashCode()?alt=java.util.AbstractMap.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.AbstractMap.toString()?alt=java.util.AbstractMap.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
- classRef: "<xref href=\"java.util.HashMap?alt=java.util.HashMap&text=HashMap\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.util.HashMap.clear()?alt=java.util.HashMap.clear&text=clear\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.clone()?alt=java.util.HashMap.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)?alt=java.util.HashMap.compute&text=compute\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)?alt=java.util.HashMap.computeIfAbsent&text=computeIfAbsent\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)?alt=java.util.HashMap.computeIfPresent&text=computeIfPresent\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.containsKey(java.lang.Object)?alt=java.util.HashMap.containsKey&text=containsKey\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.containsValue(java.lang.Object)?alt=java.util.HashMap.containsValue&text=containsValue\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.entrySet()?alt=java.util.HashMap.entrySet&text=entrySet\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)?alt=java.util.HashMap.forEach&text=forEach\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.get(java.lang.Object)?alt=java.util.HashMap.get&text=get\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.getOrDefault(java.lang.Object,V)?alt=java.util.HashMap.getOrDefault&text=getOrDefault\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.isEmpty()?alt=java.util.HashMap.isEmpty&text=isEmpty\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.keySet()?alt=java.util.HashMap.keySet&text=keySet\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)?alt=java.util.HashMap.merge&text=merge\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.put(K,V)?alt=java.util.HashMap.put&text=put\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)?alt=java.util.HashMap.putAll&text=putAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.putIfAbsent(K,V)?alt=java.util.HashMap.putIfAbsent&text=putIfAbsent\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.remove(java.lang.Object)?alt=java.util.HashMap.remove&text=remove\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.remove(java.lang.Object,java.lang.Object)?alt=java.util.HashMap.remove&text=remove\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.replace(K,V)?alt=java.util.HashMap.replace&text=replace\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.replace(K,V,V)?alt=java.util.HashMap.replace&text=replace\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)?alt=java.util.HashMap.replaceAll&text=replaceAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.size()?alt=java.util.HashMap.size&text=size\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.util.HashMap.values()?alt=java.util.HashMap.values&text=values\" data-throw-if-not-resolved=\"False\" />"
syntax: "public class **TwinCollection**</br> extends <xref href=\"java.util.HashMap?alt=java.util.HashMap&text=HashMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection()"
  name: "TwinCollection()"
  nameWithType: "TwinCollection.TwinCollection()"
  summary: "Constructor"
  syntax: "public TwinCollection()"
  desc: "Constructor\n\nCreates an empty collection. Fill it with <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.put(java.lang.String,java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#put(String, Object)\"></xref> or <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.putAll(java.util.Map<? extends java.lang.String,?>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#putAll(Map)\"></xref>."
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection(java.util.Map<? extends java.lang.String,java.lang.Object>)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection(Map<? extends String,Object> map)"
  name: "TwinCollection(Map<? extends String,Object> map)"
  nameWithType: "TwinCollection.TwinCollection(Map<? extends String,Object> map)"
  summary: "Constructor"
  parameters:
  - description: "the Map of <code>? extends String</code> and <code>Object</code> with the Twin collection"
    name: "map"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends java.lang.String?alt=? extends java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public TwinCollection(Map<? extends String,Object> map)"
  desc: "Constructor\n\nCreates a new Twin collection coping the provided Map. Once TwinCollection extends Map, this method can copy another TwinCollection."
methods:
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata()"
  name: "getTwinMetadata()"
  nameWithType: "TwinCollection.getTwinMetadata()"
  summary: "Getter for the Twin<wbr>Collection metadata"
  syntax: "public TwinMetadata getTwinMetadata()"
  desc: "Getter for the TwinCollection metadata"
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TwinMetadata\"></xref> of the Whole TwinCollection. It can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata&text=TwinMetadata\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata(String key)"
  name: "getTwinMetadata(String key)"
  nameWithType: "TwinCollection.getTwinMetadata(String key)"
  summary: "Getter for the entry metadata in the Twin<wbr>Collection."
  parameters:
  - description: "the <code>String</code> with the name of the entry to retrieve the metadata."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public TwinMetadata getTwinMetadata(String key)"
  desc: "Getter for the entry metadata in the TwinCollection."
  returns:
    description: "the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TwinMetadata\"></xref> ot the specific entry in the TwinCollection. It can be <code>null</code>."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata&text=TwinMetadata\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getVersion()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getVersion()"
  name: "getVersion()"
  nameWithType: "TwinCollection.getVersion()"
  summary: "Getter for the version."
  syntax: "public Integer getVersion()"
  desc: "Getter for the version."
  returns:
    description: "The <code>Integer</code> with the version content. It can be <code>null</code>."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.put(java.lang.String,java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.put(String key, Object value)"
  name: "put(String key, Object value)"
  nameWithType: "TwinCollection.put(String key, Object value)"
  summary: "Add a single new entry in the Twin<wbr>Collection."
  overridden: "java.util.HashMap.put(K,V)"
  parameters:
  - description: "the <code>String</code> that represent the key of the new entry. It cannot be {#code null} or empty."
    name: "key"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>Object</code> that represents the value of the new entry. It cannot be user defined type or array."
    name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Object put(String key, Object value)"
  desc: "Add a single new entry in the TwinCollection.\n\nOverride `HashMap.put(String, Object)`.\n\nThis function will add a single pair key value to the TwinCollection. By the Twin definition, the `Object` can contain types of `Boolean`, `Number`, `String`, `Object`, or up to 5 levels of sub-TwinCollection, but it cannot be types defined by the user or arrays."
  returns:
    description: "The <code>Object</code> that correspond to the last value of this key. It will be <code>null</code> if there is no previous value."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.putAll(java.util.Map<? extends java.lang.String,?>)"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.putAll(Map<? extends String,?> map)"
  name: "putAll(Map<? extends String,?> map)"
  nameWithType: "TwinCollection.putAll(Map<? extends String,?> map)"
  summary: "Add all information in the provided Map to the Twin<wbr>Collection."
  overridden: "java.util.HashMap.putAll(java.util.Map<? extends K,? extends V>)"
  parameters:
  - description: "A <code>Map</code> of entries to add to the TwinCollection."
    name: "map"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends java.lang.String?alt=? extends java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,?&gt;"
  syntax: "public void putAll(Map<? extends String,?> map)"
  desc: "Add all information in the provided Map to the TwinCollection.\n\nOverride `HashMap.putAll(Map)`.\n\nThis function will add all entries in the Map to the TwinCollection. If the provided key already exists, it will replace the value by the new one. This function will not delete or change the content of the other keys in the Map.\n\nAs defined by the Twin, the value of a entry can be an inner Map. TwinCollection will accept up to 5 levels of inner Maps."
- uid: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.toJsonElement()"
  fullName: "com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.toJsonElement()"
  name: "toJsonElement()"
  nameWithType: "TwinCollection.toJsonElement()"
  summary: "Serializer"
  syntax: "public JsonElement toJsonElement()"
  desc: "Serializer\n\nCreates a `JsonElement`, which the content represents the information in this class and its subclasses in a JSON format.\n\nThis is useful if the caller will integrate this JSON with JSON from other classes to generate a consolidated JSON."
  returns:
    description: "The <code>JsonElement</code> with the content of this class."
    type: "<xref href=\"com.google.gson.JsonElement?alt=com.google.gson.JsonElement&text=JsonElement\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Representation of a single Twin collection for Provisioning.\n\nThe TwinCollection is an extension of a `HashMap` of `String` and `Object` that contain individual and general versioning mechanism.\n\nBy the Twin definition, the `Object` can contain types of `Boolean`, `Number`, `String`, `Object`, or a sub-TwinCollection, but it cannot be types defined by the user or arrays.\n\nA TwinCollection can contain up to 5 levels of sub TwinCollections. Once the TwinCollection is a extension of the `HashMap`, both TwinCollection as well as its sub-TwinCollections can be casted to Map of String and Object.\n\nThe collection will be represented in the rest API as a JSON in the body. It can or cannot contain the metadata (identified by the **$** character at the beginning of the key.\n\nBecause of the Twin metadata, the character **$** is not allowed in the entry key.\n\nFor instance, the following JSON is a valid TwinCollection with its metadata.\n\n```java\n{\n     \"Color\":\"White\",\n     \"MaxSpeed\":{\n         \"Value\":500,\n         \"NewValue\":300\n     },\n     \"$metadata\":{\n         \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\n         \"$lastUpdatedVersion\":4,\n         \"Color\":{\n             \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\n             \"$lastUpdatedVersion\":4,\n         },\n         \"MaxSpeed\":{\n             \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\n             \"$lastUpdatedVersion\":4,\n             \"Value\":{\n                 \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\n                 \"$lastUpdatedVersion\":4\n             },\n             \"NewValue\":{\n                 \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\n                 \"$lastUpdatedVersion\":4\n             }\n         }\n     },\n     \"$version\":4\n }\n```\n\nThis class exposes the Twin collection with or without metadata as a Map here user can gat both the value and the metadata. For instance, in the above TwinCollection, <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.get*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#get(Object)\"></xref> for **Color** will return **White** and the <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getTwinMetadata(String)\"></xref> for **Color** will return the Object TwinMetadata that contain <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata.getLastUpdated()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TwinMetadata#getLastUpdated()\"></xref> that will returns the `Date` **2017-09-21T02:07:44.238Z** and <xref uid=\"com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinMetadata.getLastUpdatedVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TwinMetadata#getLastUpdatedVersion()\"></xref> that will returns the `Integer` **4**.\n\nFor the nested TwinCollection, you can do the same, for instance, the following code will return the value and metadata of the **NewValue** nested in **MaxSpeed**:\n\n```java\n// Get the value of the MaxSpeed, which is a inner TwinCollection.\n      TwinCollection innerMaxSpeed = (TwinCollection) twinCollection.get(\"MaxSpeed\");\n\n      // From the inner TwinCollection, get the value of the NewValue.\n      Long maxSpeedNewValue = innerMaxSpeed.get(\"NewValue\");\n\n      // As in the root TwinCollection, the inner TwinCollection contain its own metadata.\n      // So, get the metadata information for the inner NewValue.\n      TwinMetadata maxSpeedNewValueMetadata = innerMaxSpeed.getTwinMetadata(\"NewValue\");\n      Date newValueLastUpdated = maxSpeedNewValueMetadata.getLastUpdated(); //Shall contain `2017-09-21T02:07:44.238Z`\n      Integer newValueLastUpdatedVersion = maxSpeedNewValueMetadata.getLastUpdatedVersion(); //Shall contain `4`\n```"
metadata: {}
package: "com.microsoft.azure.sdk.iot.provisioning.service.configs"
artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
