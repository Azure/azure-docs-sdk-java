### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  id: ServiceBusManagementAsyncClient
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus
  children:
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue(com.azure.messaging.servicebus.models.CreateQueueOptions)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueueWithResponse(com.azure.messaging.servicebus.models.CreateQueueOptions)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription(com.azure.messaging.servicebus.models.CreateSubscriptionOptions)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscriptionWithResponse(com.azure.messaging.servicebus.models.CreateSubscriptionOptions)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic(com.azure.messaging.servicebus.models.CreateTopicOptions)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopicWithResponse(com.azure.messaging.servicebus.models.CreateTopicOptions)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueue(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueueWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscription(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopic(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopicWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespaceProperties()
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse()
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExists(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExistsWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfo(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExists(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExists(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExistsWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfo(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listQueues()
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listSubscriptions(java.lang.String)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listTopics()
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueue(com.azure.messaging.servicebus.models.QueueProperties)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueueWithResponse(com.azure.messaging.servicebus.models.QueueProperties)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscription(com.azure.messaging.servicebus.models.SubscriptionProperties)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscriptionWithResponse(com.azure.messaging.servicebus.models.SubscriptionProperties)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopic(com.azure.messaging.servicebus.models.TopicProperties)
  - com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopicWithResponse(com.azure.messaging.servicebus.models.TopicProperties)
  langs:
  - java
  name: ServiceBusManagementAsyncClient
  nameWithType: ServiceBusManagementAsyncClient
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  type: Class
  package: com.azure.messaging.servicebus
  summary: An **asynchronous** client for managing a Service Bus namespace.
  syntax:
    content: public final class ServiceBusManagementAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient(com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl,com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer)
  id: ServiceBusManagementAsyncClient(com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl,com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: ServiceBusManagementAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)
  nameWithType: ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient*
  type: Constructor
  package: com.azure.messaging.servicebus
  summary: Creates a new instance with the given management client and serializer.
  syntax:
    content: " ServiceBusManagementAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)"
    parameters:
    - id: managementClient
      type: com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl
      description: Client to make management calls.
    - id: serializer
      type: com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer
      description: Serializer to deserialize ATOM XML responses.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue(com.azure.messaging.servicebus.models.CreateQueueOptions)
  id: createQueue(com.azure.messaging.servicebus.models.CreateQueueOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createQueue(CreateQueueOptions queueOptions)
  nameWithType: ServiceBusManagementAsyncClient.createQueue(CreateQueueOptions queueOptions)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue(CreateQueueOptions queueOptions)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a queue with the <xref uid="com.azure.messaging.servicebus.models.CreateQueueOptions" data-throw-if-not-resolved="false">CreateQueueOptions</xref>.
  syntax:
    content: public Mono<QueueProperties> createQueue(CreateQueueOptions queueOptions)
    parameters:
    - id: queueOptions
      type: com.azure.messaging.servicebus.models.CreateQueueOptions
      description: Information about the queue to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueProperties>
      description: A Mono that completes with information about the created queue.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue(java.lang.String)
  id: createQueue(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createQueue(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.createQueue(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a queue with the given name.
  syntax:
    content: public Mono<QueueProperties> createQueue(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueProperties>
      description: A Mono that completes with information about the created queue.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueueWithResponse(com.azure.messaging.servicebus.models.CreateQueueOptions)
  id: createQueueWithResponse(com.azure.messaging.servicebus.models.CreateQueueOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createQueueWithResponse(CreateQueueOptions queue)
  nameWithType: ServiceBusManagementAsyncClient.createQueueWithResponse(CreateQueueOptions queue)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueueWithResponse(CreateQueueOptions queue)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a queue and returns the created queue in addition to the HTTP response.
  syntax:
    content: public Mono<Response<QueueProperties>> createQueueWithResponse(CreateQueueOptions queue)
    parameters:
    - id: queue
      type: com.azure.messaging.servicebus.models.CreateQueueOptions
      description: The queue to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.QueueProperties>>
      description: A Mono that returns the created queue in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription(com.azure.messaging.servicebus.models.CreateSubscriptionOptions)
  id: createSubscription(com.azure.messaging.servicebus.models.CreateSubscriptionOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createSubscription(CreateSubscriptionOptions subscription)
  nameWithType: ServiceBusManagementAsyncClient.createSubscription(CreateSubscriptionOptions subscription)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription(CreateSubscriptionOptions subscription)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a subscription with the <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref>.
  syntax:
    content: public Mono<SubscriptionProperties> createSubscription(CreateSubscriptionOptions subscription)
    parameters:
    - id: subscription
      type: com.azure.messaging.servicebus.models.CreateSubscriptionOptions
      description: Information about the subscription to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionProperties>
      description: A Mono that completes with information about the created subscription.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription(java.lang.String,java.lang.String)
  id: createSubscription(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createSubscription(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.createSubscription(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a subscription with the given topic and subscription names.
  syntax:
    content: public Mono<SubscriptionProperties> createSubscription(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionProperties>
      description: A Mono that completes with information about the created subscription.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscriptionWithResponse(com.azure.messaging.servicebus.models.CreateSubscriptionOptions)
  id: createSubscriptionWithResponse(com.azure.messaging.servicebus.models.CreateSubscriptionOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createSubscriptionWithResponse(CreateSubscriptionOptions subscription)
  nameWithType: ServiceBusManagementAsyncClient.createSubscriptionWithResponse(CreateSubscriptionOptions subscription)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscriptionWithResponse(CreateSubscriptionOptions subscription)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a queue and returns the created queue in addition to the HTTP response.
  syntax:
    content: public Mono<Response<SubscriptionProperties>> createSubscriptionWithResponse(CreateSubscriptionOptions subscription)
    parameters:
    - id: subscription
      type: com.azure.messaging.servicebus.models.CreateSubscriptionOptions
      description: Information about the subscription to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.SubscriptionProperties>>
      description: A Mono that returns the created queue in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic(com.azure.messaging.servicebus.models.CreateTopicOptions)
  id: createTopic(com.azure.messaging.servicebus.models.CreateTopicOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createTopic(CreateTopicOptions topicOptions)
  nameWithType: ServiceBusManagementAsyncClient.createTopic(CreateTopicOptions topicOptions)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic(CreateTopicOptions topicOptions)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a topic with the <xref uid="com.azure.messaging.servicebus.models.CreateTopicOptions" data-throw-if-not-resolved="false">CreateTopicOptions</xref>.
  syntax:
    content: public Mono<TopicProperties> createTopic(CreateTopicOptions topicOptions)
    parameters:
    - id: topicOptions
      type: com.azure.messaging.servicebus.models.CreateTopicOptions
      description: Information about the topic to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicProperties>
      description: A Mono that completes with information about the created topic.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic(java.lang.String)
  id: createTopic(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createTopic(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.createTopic(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a topic with the given name.
  syntax:
    content: public Mono<TopicProperties> createTopic(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicProperties>
      description: A Mono that completes with information about the created topic.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopicWithResponse(com.azure.messaging.servicebus.models.CreateTopicOptions)
  id: createTopicWithResponse(com.azure.messaging.servicebus.models.CreateTopicOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: createTopicWithResponse(CreateTopicOptions topic)
  nameWithType: ServiceBusManagementAsyncClient.createTopicWithResponse(CreateTopicOptions topic)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopicWithResponse(CreateTopicOptions topic)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Creates a topic and returns the created topic in addition to the HTTP response.
  syntax:
    content: public Mono<Response<TopicProperties>> createTopicWithResponse(CreateTopicOptions topic)
    parameters:
    - id: topic
      type: com.azure.messaging.servicebus.models.CreateTopicOptions
      description: The topic to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.TopicProperties>>
      description: A Mono that returns the created topic in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueue(java.lang.String)
  id: deleteQueue(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: deleteQueue(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.deleteQueue(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueue(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueue*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Deletes a queue the matching `queueName`.
  syntax:
    content: public Mono<Void> deleteQueue(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the queue is deleted.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueueWithResponse(java.lang.String)
  id: deleteQueueWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: deleteQueueWithResponse(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.deleteQueueWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueueWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Deletes a queue the matching `queueName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteQueueWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the queue is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscription(java.lang.String,java.lang.String)
  id: deleteSubscription(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: deleteSubscription(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.deleteSubscription(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscription(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscription*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Deletes a subscription the matching `subscriptionName`.
  syntax:
    content: public Mono<Void> deleteSubscription(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription to delete.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the subscription is deleted.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse(java.lang.String,java.lang.String)
  id: deleteSubscriptionWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: deleteSubscriptionWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Deletes a subscription the matching `subscriptionName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteSubscriptionWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription to delete.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the subscription is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopic(java.lang.String)
  id: deleteTopic(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: deleteTopic(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.deleteTopic(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopic(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopic*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Deletes a topic the matching `topicName`.
  syntax:
    content: public Mono<Void> deleteTopic(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the topic is deleted.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopicWithResponse(java.lang.String)
  id: deleteTopicWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: deleteTopicWithResponse(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.deleteTopicWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopicWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Deletes a topic the matching `topicName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteTopicWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the topic is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespaceProperties()
  id: getNamespaceProperties()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getNamespaceProperties()
  nameWithType: ServiceBusManagementAsyncClient.getNamespaceProperties()
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespaceProperties()
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespaceProperties*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the Service Bus namespace.
  syntax:
    content: public Mono<NamespaceProperties> getNamespaceProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.NamespaceProperties>
      description: A Mono that completes with information about the Service Bus namespace.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse()
  id: getNamespacePropertiesWithResponse()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getNamespacePropertiesWithResponse()
  nameWithType: ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse()
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse()
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the Service Bus namespace along with its HTTP response.
  syntax:
    content: public Mono<Response<NamespaceProperties>> getNamespacePropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.NamespaceProperties>>
      description: A Mono that completes with information about the namespace and the associated HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue(java.lang.String)
  id: getQueue(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getQueue(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.getQueue(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the queue.
  syntax:
    content: public Mono<QueueProperties> getQueue(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueProperties>
      description: A Mono that completes with information about the queue.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExists(java.lang.String)
  id: getQueueExists(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getQueueExists(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.getQueueExists(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExists(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExists*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets whether or not a queue with `queueName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Boolean> getQueueExists(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: A Mono that completes indicating whether or not the queue exists.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExistsWithResponse(java.lang.String)
  id: getQueueExistsWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getQueueExistsWithResponse(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.getQueueExistsWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExistsWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExistsWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets whether or not a queue with `queueName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Response<Boolean>> getQueueExistsWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: A Mono that completes indicating whether or not the queue exists along with its HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfo(java.lang.String)
  id: getQueueRuntimeInfo(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getQueueRuntimeInfo(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.getQueueRuntimeInfo(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfo(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfo*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets runtime information about the queue.
  syntax:
    content: public Mono<QueueRuntimeInfo> getQueueRuntimeInfo(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueRuntimeInfo>
      description: A Mono that completes with runtime information about the queue.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse(java.lang.String)
  id: getQueueRuntimeInfoWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getQueueRuntimeInfoWithResponse(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets runtime information about the queue along with its HTTP response.
  syntax:
    content: public Mono<Response<QueueRuntimeInfo>> getQueueRuntimeInfoWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.QueueRuntimeInfo>>
      description: A Mono that completes with runtime information about the queue and the associated HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueWithResponse(java.lang.String)
  id: getQueueWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getQueueWithResponse(String queueName)
  nameWithType: ServiceBusManagementAsyncClient.getQueueWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the queue along with its HTTP response.
  syntax:
    content: public Mono<Response<QueueProperties>> getQueueWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.QueueProperties>>
      description: A Mono that completes with information about the queue and the associated HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription(java.lang.String,java.lang.String)
  id: getSubscription(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getSubscription(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.getSubscription(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the queue.
  syntax:
    content: public Mono<SubscriptionProperties> getSubscription(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionProperties>
      description: A Mono that completes with information about the subscription.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExists(java.lang.String,java.lang.String)
  id: getSubscriptionExists(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getSubscriptionExists(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionExists(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExists(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExists*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets whether or not a subscription within a topic exists.
  syntax:
    content: public Mono<Boolean> getSubscriptionExists(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: A Mono that completes indicating whether or not the subscription exists.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse(java.lang.String,java.lang.String)
  id: getSubscriptionExistsWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets whether or not a subscription within a topic exists.
  syntax:
    content: public Mono<Response<Boolean>> getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: A Mono that completes indicating whether or not the subscription exists along with its HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo(java.lang.String,java.lang.String)
  id: getSubscriptionRuntimeInfo(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getSubscriptionRuntimeInfo(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets runtime information about the subscription.
  syntax:
    content: public Mono<SubscriptionRuntimeInfo> getSubscriptionRuntimeInfo(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo>
      description: A Mono that completes with runtime information about the subscription.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse(java.lang.String,java.lang.String)
  id: getSubscriptionRuntimeInfoWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getSubscriptionRuntimeInfoWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets runtime information about the subscription.
  syntax:
    content: public Mono<Response<SubscriptionRuntimeInfo>> getSubscriptionRuntimeInfoWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo>>
      description: A Mono that completes with runtime information about the subscription.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionWithResponse(java.lang.String,java.lang.String)
  id: getSubscriptionWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getSubscriptionWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the subscription along with its HTTP response.
  syntax:
    content: public Mono<Response<SubscriptionProperties>> getSubscriptionWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.SubscriptionProperties>>
      description: A Mono that completes with information about the subscription and the associated HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic(java.lang.String)
  id: getTopic(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getTopic(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.getTopic(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the topic.
  syntax:
    content: public Mono<TopicProperties> getTopic(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicProperties>
      description: A Mono that completes with information about the topic.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExists(java.lang.String)
  id: getTopicExists(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getTopicExists(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.getTopicExists(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExists(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExists*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets whether or not a topic with `topicName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Boolean> getTopicExists(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: A Mono that completes indicating whether or not the topic exists.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExistsWithResponse(java.lang.String)
  id: getTopicExistsWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getTopicExistsWithResponse(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.getTopicExistsWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExistsWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExistsWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets whether or not a topic with `topicName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Response<Boolean>> getTopicExistsWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: A Mono that completes indicating whether or not the topic exists along with its HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfo(java.lang.String)
  id: getTopicRuntimeInfo(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getTopicRuntimeInfo(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.getTopicRuntimeInfo(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfo(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfo*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets runtime information about the topic.
  syntax:
    content: public Mono<TopicRuntimeInfo> getTopicRuntimeInfo(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicRuntimeInfo>
      description: A Mono that completes with runtime information about the topic.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse(java.lang.String)
  id: getTopicRuntimeInfoWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getTopicRuntimeInfoWithResponse(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets runtime information about the topic with its HTTP response.
  syntax:
    content: public Mono<Response<TopicRuntimeInfo>> getTopicRuntimeInfoWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.TopicRuntimeInfo>>
      description: A Mono that completes with runtime information about the topic and the associated HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicWithResponse(java.lang.String)
  id: getTopicWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: getTopicWithResponse(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.getTopicWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Gets information about the topic along with its HTTP response.
  syntax:
    content: public Mono<Response<TopicProperties>> getTopicWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.TopicProperties>>
      description: A Mono that completes with information about the topic and the associated HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listQueues()
  id: listQueues()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: listQueues()
  nameWithType: ServiceBusManagementAsyncClient.listQueues()
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listQueues()
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listQueues*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Fetches all the queues in the Service Bus namespace.
  syntax:
    content: public PagedFlux<QueueProperties> listQueues()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.models.QueueProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.models.QueueProperties" data-throw-if-not-resolved="false">queues</xref> in the Service Bus namespace.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listSubscriptions(java.lang.String)
  id: listSubscriptions(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: listSubscriptions(String topicName)
  nameWithType: ServiceBusManagementAsyncClient.listSubscriptions(String topicName)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listSubscriptions(String topicName)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listSubscriptions*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Fetches all the subscriptions for a topic.
  syntax:
    content: public PagedFlux<SubscriptionProperties> listSubscriptions(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The topic name under which all the subscriptions need to be retrieved.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.models.SubscriptionProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties" data-throw-if-not-resolved="false">subscriptions</xref> for the <code>topicName</code>.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listTopics()
  id: listTopics()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: listTopics()
  nameWithType: ServiceBusManagementAsyncClient.listTopics()
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listTopics()
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listTopics*
  type: Method
  package: com.azure.messaging.servicebus
  summary: Fetches all the topics in the Service Bus namespace.
  syntax:
    content: public PagedFlux<TopicProperties> listTopics()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.models.TopicProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.models.TopicProperties" data-throw-if-not-resolved="false">topics</xref> in the Service Bus namespace.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueue(com.azure.messaging.servicebus.models.QueueProperties)
  id: updateQueue(com.azure.messaging.servicebus.models.QueueProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: updateQueue(QueueProperties queue)
  nameWithType: ServiceBusManagementAsyncClient.updateQueue(QueueProperties queue)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueue(QueueProperties queue)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueue*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Updates a queue with the given <xref uid="com.azure.messaging.servicebus.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref>. The <xref uid="com.azure.messaging.servicebus.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue(java.lang.String)" data-throw-if-not-resolved="false">Get queue description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setMaxDeliveryCount(java.lang.Integer)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<QueueProperties> updateQueue(QueueProperties queue)
    parameters:
    - id: queue
      type: com.azure.messaging.servicebus.models.QueueProperties
      description: >-
        Information about the queue to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueProperties>
      description: A Mono that completes with the updated queue.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueueWithResponse(com.azure.messaging.servicebus.models.QueueProperties)
  id: updateQueueWithResponse(com.azure.messaging.servicebus.models.QueueProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: updateQueueWithResponse(QueueProperties queue)
  nameWithType: ServiceBusManagementAsyncClient.updateQueueWithResponse(QueueProperties queue)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueueWithResponse(QueueProperties queue)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Updates a queue with the given <xref uid="com.azure.messaging.servicebus.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref>. The <xref uid="com.azure.messaging.servicebus.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue(java.lang.String)" data-throw-if-not-resolved="false">Get queue description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.QueueProperties.setMaxDeliveryCount(java.lang.Integer)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<Response<QueueProperties>> updateQueueWithResponse(QueueProperties queue)
    parameters:
    - id: queue
      type: com.azure.messaging.servicebus.models.QueueProperties
      description: >-
        Information about the queue to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.QueueProperties>>
      description: A Mono that returns the updated queue in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscription(com.azure.messaging.servicebus.models.SubscriptionProperties)
  id: updateSubscription(com.azure.messaging.servicebus.models.SubscriptionProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: updateSubscription(SubscriptionProperties subscription)
  nameWithType: ServiceBusManagementAsyncClient.updateSubscription(SubscriptionProperties subscription)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscription(SubscriptionProperties subscription)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscription*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Updates a subscription with the given <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref>. The <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Get subscription description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties.setMaxDeliveryCount(int)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<SubscriptionProperties> updateSubscription(SubscriptionProperties subscription)
    parameters:
    - id: subscription
      type: com.azure.messaging.servicebus.models.SubscriptionProperties
      description: >-
        Information about the subscription to update. You must provide all the property values
             that are desired on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionProperties>
      description: A Mono that returns the updated subscription.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscriptionWithResponse(com.azure.messaging.servicebus.models.SubscriptionProperties)
  id: updateSubscriptionWithResponse(com.azure.messaging.servicebus.models.SubscriptionProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: updateSubscriptionWithResponse(SubscriptionProperties subscription)
  nameWithType: ServiceBusManagementAsyncClient.updateSubscriptionWithResponse(SubscriptionProperties subscription)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscriptionWithResponse(SubscriptionProperties subscription)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Updates a subscription with the given <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref>. The <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Get subscription description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.SubscriptionProperties.setMaxDeliveryCount(int)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<Response<SubscriptionProperties>> updateSubscriptionWithResponse(SubscriptionProperties subscription)
    parameters:
    - id: subscription
      type: com.azure.messaging.servicebus.models.SubscriptionProperties
      description: >-
        Information about the subscription to update. You must provide all the property values
             that are desired on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.SubscriptionProperties>>
      description: A Mono that returns the updated subscription in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopic(com.azure.messaging.servicebus.models.TopicProperties)
  id: updateTopic(com.azure.messaging.servicebus.models.TopicProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: updateTopic(TopicProperties topic)
  nameWithType: ServiceBusManagementAsyncClient.updateTopic(TopicProperties topic)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopic(TopicProperties topic)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopic*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Updates a topic with the given <xref uid="com.azure.messaging.servicebus.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref>. The <xref uid="com.azure.messaging.servicebus.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic(java.lang.String)" data-throw-if-not-resolved="false">Get topic description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.models.TopicProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.TopicProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
  syntax:
    content: public Mono<TopicProperties> updateTopic(TopicProperties topic)
    parameters:
    - id: topic
      type: com.azure.messaging.servicebus.models.TopicProperties
      description: >-
        Information about the topic to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicProperties>
      description: A Mono that completes with the updated topic.
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopicWithResponse(com.azure.messaging.servicebus.models.TopicProperties)
  id: updateTopicWithResponse(com.azure.messaging.servicebus.models.TopicProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
  parent: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient
  langs:
  - java
  name: updateTopicWithResponse(TopicProperties topic)
  nameWithType: ServiceBusManagementAsyncClient.updateTopicWithResponse(TopicProperties topic)
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopicWithResponse(TopicProperties topic)
  overload: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus
  summary: >-
    Updates a topic with the given <xref uid="com.azure.messaging.servicebus.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref>. The <xref uid="com.azure.messaging.servicebus.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic(java.lang.String)" data-throw-if-not-resolved="false">Get topic description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.models.TopicProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.models.TopicProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
  syntax:
    content: public Mono<Response<TopicProperties>> updateTopicWithResponse(TopicProperties topic)
    parameters:
    - id: topic
      type: com.azure.messaging.servicebus.models.TopicProperties
      description: >-
        Information about the topic to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.TopicProperties>>
      description: A Mono that completes with the updated topic and its HTTP response.
references:
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl
  name: ServiceBusManagementClientImpl
  nameWithType: ServiceBusManagementClientImpl
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer
  name: ServiceBusManagementSerializer
  nameWithType: ServiceBusManagementSerializer
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient*
  name: ServiceBusManagementAsyncClient
  nameWithType: ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.ServiceBusManagementAsyncClient
  package: com.azure.messaging.servicebus
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.messaging.servicebus.models.QueueProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue*
  name: createQueue
  nameWithType: ServiceBusManagementAsyncClient.createQueue
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueue
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.CreateQueueOptions
  name: CreateQueueOptions
  nameWithType: CreateQueueOptions
  fullName: com.azure.messaging.servicebus.models.CreateQueueOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.QueueProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.messaging.servicebus.models.QueueProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueueWithResponse*
  name: createQueueWithResponse
  nameWithType: ServiceBusManagementAsyncClient.createQueueWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createQueueWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.SubscriptionProperties
    name: SubscriptionProperties
    fullName: com.azure.messaging.servicebus.models.SubscriptionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription*
  name: createSubscription
  nameWithType: ServiceBusManagementAsyncClient.createSubscription
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscription
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.CreateSubscriptionOptions
  name: CreateSubscriptionOptions
  nameWithType: CreateSubscriptionOptions
  fullName: com.azure.messaging.servicebus.models.CreateSubscriptionOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.SubscriptionProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.SubscriptionProperties
    name: SubscriptionProperties
    fullName: com.azure.messaging.servicebus.models.SubscriptionProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscriptionWithResponse*
  name: createSubscriptionWithResponse
  nameWithType: ServiceBusManagementAsyncClient.createSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createSubscriptionWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.TopicProperties
    name: TopicProperties
    fullName: com.azure.messaging.servicebus.models.TopicProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic*
  name: createTopic
  nameWithType: ServiceBusManagementAsyncClient.createTopic
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopic
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.CreateTopicOptions
  name: CreateTopicOptions
  nameWithType: CreateTopicOptions
  fullName: com.azure.messaging.servicebus.models.CreateTopicOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.TopicProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.TopicProperties
    name: TopicProperties
    fullName: com.azure.messaging.servicebus.models.TopicProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopicWithResponse*
  name: createTopicWithResponse
  nameWithType: ServiceBusManagementAsyncClient.createTopicWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.createTopicWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueue*
  name: deleteQueue
  nameWithType: ServiceBusManagementAsyncClient.deleteQueue
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueue
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueueWithResponse*
  name: deleteQueueWithResponse
  nameWithType: ServiceBusManagementAsyncClient.deleteQueueWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteQueueWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscription*
  name: deleteSubscription
  nameWithType: ServiceBusManagementAsyncClient.deleteSubscription
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscription
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse*
  name: deleteSubscriptionWithResponse
  nameWithType: ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteSubscriptionWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopic*
  name: deleteTopic
  nameWithType: ServiceBusManagementAsyncClient.deleteTopic
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopic
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopicWithResponse*
  name: deleteTopicWithResponse
  nameWithType: ServiceBusManagementAsyncClient.deleteTopicWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.deleteTopicWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue*
  name: getQueue
  nameWithType: ServiceBusManagementAsyncClient.getQueue
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueue
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueWithResponse*
  name: getQueueWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getQueueWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExists*
  name: getQueueExists
  nameWithType: ServiceBusManagementAsyncClient.getQueueExists
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExists
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExistsWithResponse*
  name: getQueueExistsWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getQueueExistsWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueExistsWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.QueueRuntimeInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.QueueRuntimeInfo
    name: QueueRuntimeInfo
    fullName: com.azure.messaging.servicebus.models.QueueRuntimeInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfo*
  name: getQueueRuntimeInfo
  nameWithType: ServiceBusManagementAsyncClient.getQueueRuntimeInfo
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfo
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.QueueRuntimeInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.QueueRuntimeInfo
    name: QueueRuntimeInfo
    fullName: com.azure.messaging.servicebus.models.QueueRuntimeInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse*
  name: getQueueRuntimeInfoWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getQueueRuntimeInfoWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.NamespaceProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.NamespaceProperties
    name: NamespaceProperties
    fullName: com.azure.messaging.servicebus.models.NamespaceProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespaceProperties*
  name: getNamespaceProperties
  nameWithType: ServiceBusManagementAsyncClient.getNamespaceProperties
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespaceProperties
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.NamespaceProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.NamespaceProperties
    name: NamespaceProperties
    fullName: com.azure.messaging.servicebus.models.NamespaceProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse*
  name: getNamespacePropertiesWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getNamespacePropertiesWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription*
  name: getSubscription
  nameWithType: ServiceBusManagementAsyncClient.getSubscription
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscription
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionWithResponse*
  name: getSubscriptionWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExists*
  name: getSubscriptionExists
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionExists
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExists
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse*
  name: getSubscriptionExistsWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionExistsWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo
    name: SubscriptionRuntimeInfo
    fullName: com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo*
  name: getSubscriptionRuntimeInfo
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfo
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo
    name: SubscriptionRuntimeInfo
    fullName: com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse*
  name: getSubscriptionRuntimeInfoWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getSubscriptionRuntimeInfoWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic*
  name: getTopic
  nameWithType: ServiceBusManagementAsyncClient.getTopic
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopic
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicWithResponse*
  name: getTopicWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getTopicWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExists*
  name: getTopicExists
  nameWithType: ServiceBusManagementAsyncClient.getTopicExists
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExists
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExistsWithResponse*
  name: getTopicExistsWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getTopicExistsWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicExistsWithResponse
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.models.TopicRuntimeInfo>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.TopicRuntimeInfo
    name: TopicRuntimeInfo
    fullName: com.azure.messaging.servicebus.models.TopicRuntimeInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfo*
  name: getTopicRuntimeInfo
  nameWithType: ServiceBusManagementAsyncClient.getTopicRuntimeInfo
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfo
  package: com.azure.messaging.servicebus
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.models.TopicRuntimeInfo>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.TopicRuntimeInfo
    name: TopicRuntimeInfo
    fullName: com.azure.messaging.servicebus.models.TopicRuntimeInfo
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse*
  name: getTopicRuntimeInfoWithResponse
  nameWithType: ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.getTopicRuntimeInfoWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.models.QueueProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.messaging.servicebus.models.QueueProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listQueues*
  name: listQueues
  nameWithType: ServiceBusManagementAsyncClient.listQueues
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listQueues
  package: com.azure.messaging.servicebus
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.models.SubscriptionProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.SubscriptionProperties
    name: SubscriptionProperties
    fullName: com.azure.messaging.servicebus.models.SubscriptionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listSubscriptions*
  name: listSubscriptions
  nameWithType: ServiceBusManagementAsyncClient.listSubscriptions
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listSubscriptions
  package: com.azure.messaging.servicebus
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.models.TopicProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.models.TopicProperties
    name: TopicProperties
    fullName: com.azure.messaging.servicebus.models.TopicProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listTopics*
  name: listTopics
  nameWithType: ServiceBusManagementAsyncClient.listTopics
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.listTopics
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.QueueProperties
  name: QueueProperties
  nameWithType: QueueProperties
  fullName: com.azure.messaging.servicebus.models.QueueProperties
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueue*
  name: updateQueue
  nameWithType: ServiceBusManagementAsyncClient.updateQueue
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueue
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueueWithResponse*
  name: updateQueueWithResponse
  nameWithType: ServiceBusManagementAsyncClient.updateQueueWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateQueueWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.SubscriptionProperties
  name: SubscriptionProperties
  nameWithType: SubscriptionProperties
  fullName: com.azure.messaging.servicebus.models.SubscriptionProperties
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscription*
  name: updateSubscription
  nameWithType: ServiceBusManagementAsyncClient.updateSubscription
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscription
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscriptionWithResponse*
  name: updateSubscriptionWithResponse
  nameWithType: ServiceBusManagementAsyncClient.updateSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateSubscriptionWithResponse
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.models.TopicProperties
  name: TopicProperties
  nameWithType: TopicProperties
  fullName: com.azure.messaging.servicebus.models.TopicProperties
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopic*
  name: updateTopic
  nameWithType: ServiceBusManagementAsyncClient.updateTopic
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopic
  package: com.azure.messaging.servicebus
- uid: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopicWithResponse*
  name: updateTopicWithResponse
  nameWithType: ServiceBusManagementAsyncClient.updateTopicWithResponse
  fullName: com.azure.messaging.servicebus.ServiceBusManagementAsyncClient.updateTopicWithResponse
  package: com.azure.messaging.servicebus
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: com.azure.messaging.servicebus.models.QueueRuntimeInfo
  name: QueueRuntimeInfo
  nameWithType: QueueRuntimeInfo
  fullName: com.azure.messaging.servicebus.models.QueueRuntimeInfo
- uid: com.azure.messaging.servicebus.models.NamespaceProperties
  name: NamespaceProperties
  nameWithType: NamespaceProperties
  fullName: com.azure.messaging.servicebus.models.NamespaceProperties
- uid: com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo
  name: SubscriptionRuntimeInfo
  nameWithType: SubscriptionRuntimeInfo
  fullName: com.azure.messaging.servicebus.models.SubscriptionRuntimeInfo
- uid: com.azure.messaging.servicebus.models.TopicRuntimeInfo
  name: TopicRuntimeInfo
  nameWithType: TopicRuntimeInfo
  fullName: com.azure.messaging.servicebus.models.TopicRuntimeInfo
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
