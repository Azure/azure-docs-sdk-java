### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>"
name: "ImmutableBiMap.Builder<K,V>"
nameWithType: "ImmutableBiMap.Builder<K,V>"
summary: "A builder for creating immutable bimap instances, especially `public static final` bimaps (\"constant bimaps\"). Example:\n\n```java\nstatic final ImmutableBiMap WORD_TO_INT =\n     new ImmutableBiMap.Builder()\n         .put(\"one\", 1)\n         .put(\"two\", 2)\n         .put(\"three\", 3)\n         .build();\n```\n\nFor *small* immutable bimaps, the `ImmutableBiMap.of()` methods are even more convenient.\n\nBy default, a `Builder` will generate bimaps that iterate over entries in the order they were inserted into the builder. For example, in the above example, `WORD_TO_INT.entrySet()` is guaranteed to iterate over the entries in the order `\"one\"=1, \"two\"=2, \"three\"=3`, and `keySet()` and `values()` respect the same order. If you want a different order, consider using <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue(java.util.Comparator&lt;? super V&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#orderEntriesByValue(Comparator)\"></xref>, which changes this builder to sort entries by value.\n\nBuilder instances can be reused - it is safe to call <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#build\"></xref> multiple times to build multiple bimaps in series. Each bimap is a superset of the bimaps created before it."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.build()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.util.Map<? extends K,? extends V>)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public static final class ImmutableBiMap.Builder<K,V> extends ImmutableMap.Builder<K,V>"
constructors:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder()"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll(java.util.Map<? extends K,? extends V>)"
type: "class"
typeParameters:
- name: "K"
- name: "V"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
