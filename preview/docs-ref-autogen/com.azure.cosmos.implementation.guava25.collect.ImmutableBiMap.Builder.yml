### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  id: Builder
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll(java.util.Map<? extends K,? extends V>)
  langs:
  - java
  name: ImmutableBiMap.Builder<K,V>
  nameWithType: ImmutableBiMap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A builder for creating immutable bimap instances, especially `public static final` bimaps ("constant bimaps"). Example:


    ```java

    static final ImmutableBiMap WORD_TO_INT =
         new ImmutableBiMap.Builder()
             .put("one", 1)
             .put("two", 2)
             .put("three", 3)
             .build();
    ```


    For *small* immutable bimaps, the `ImmutableBiMap.of()` methods are even more convenient.


    By default, a `Builder` will generate bimaps that iterate over entries in the order they were inserted into the builder. For example, in the above example, `WORD_TO_INT.entrySet()` is guaranteed to iterate over the entries in the order `"one"=1, "two"=2, "three"=3`, and `keySet()` and `values()` respect the same order. If you want a different order, consider using <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue(java.util.Comparator&lt;? super V&gt;)" data-throw-if-not-resolved="false">#orderEntriesByValue(Comparator)</xref>, which changes this builder to sort entries by value.


    Builder instances can be reused - it is safe to call <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> multiple times to build multiple bimaps in series. Each bimap is a superset of the bimaps created before it.
  syntax:
    content: public static final class ImmutableBiMap.Builder<K,V> extends ImmutableMap.Builder<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.build()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.util.Map<? extends K,? extends V>)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder()
  id: Builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: Builder()
  nameWithType: ImmutableBiMap.Builder<K,V>.Builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.Builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new builder. The returned builder is equivalent to the builder generated by <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.builder" data-throw-if-not-resolved="false">ImmutableBiMap#builder</xref>.
  syntax:
    content: public Builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder(int)
  id: Builder(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: Builder(int size)
  nameWithType: ImmutableBiMap.Builder<K,V>.Builder(int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.Builder(int size)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " Builder(int size)"
    parameters:
    - id: size
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build()
  id: build()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: build()
  nameWithType: ImmutableBiMap.Builder<K,V>.build()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.build()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a newly-created immutable bimap. The iteration order of the returned bimap is the order in which entries were inserted into the builder, unless <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue" data-throw-if-not-resolved="false">#orderEntriesByValue</xref> was called, in which case entries are sorted by value.
  syntax:
    content: public ImmutableBiMap<K,V> build()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)
  id: orderEntriesByValue(java.util.Comparator<? super V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: orderEntriesByValue(Comparator<? super V> valueComparator)
  nameWithType: ImmutableBiMap.Builder<K,V>.orderEntriesByValue(Comparator<? super V> valueComparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.orderEntriesByValue(Comparator<? super V> valueComparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Configures this `Builder` to order entries by value according to the specified comparator.


    The sort order is stable, that is, if two entries have values that compare as equivalent, the entry that was inserted first will be first in the built map's iteration order.
  syntax:
    content: public ImmutableBiMap.Builder<K,V> orderEntriesByValue(Comparator<? super V> valueComparator)
    parameters:
    - id: valueComparator
      type: java.util.Comparator<? super V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: put(K key, V value)
  nameWithType: ImmutableBiMap.Builder<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Associates `key` with `value` in the built bimap. Duplicate keys or values are not allowed, and will cause <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> to fail.
  syntax:
    content: public ImmutableBiMap.Builder<K,V> put(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)
  id: put(java.util.Map.Entry<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: put(Map.Entry<? extends K,? extends V> entry)
  nameWithType: ImmutableBiMap.Builder<K,V>.put(Map.Entry<? extends K,? extends V> entry)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.put(Map.Entry<? extends K,? extends V> entry)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds the given `entry` to the bimap. Duplicate keys or values are not allowed, and will cause <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> to fail.
  syntax:
    content: public ImmutableBiMap.Builder<K,V> put(Map.Entry<? extends K,? extends V> entry)
    parameters:
    - id: entry
      type: java.util.Map.Entry<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  id: putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  nameWithType: ImmutableBiMap.Builder<K,V>.putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds all of the given entries to the built bimap. Duplicate keys or values are not allowed, and will cause <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> to fail.
  syntax:
    content: public ImmutableBiMap.Builder<K,V> putAll(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll(java.util.Map<? extends K,? extends V>)
  id: putAll(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  langs:
  - java
  name: putAll(Map<? extends K,? extends V> map)
  nameWithType: ImmutableBiMap.Builder<K,V>.putAll(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.putAll(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Associates all of the given map's keys and values in the built bimap. Duplicate keys or values are not allowed, and will cause <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build" data-throw-if-not-resolved="false">#build</xref> to fail.
  syntax:
    content: public ImmutableBiMap.Builder<K,V> putAll(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.Builder*
  name: Builder
  nameWithType: ImmutableBiMap.Builder<K,V>.Builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.Builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.put*
  name: put
  nameWithType: ImmutableBiMap.Builder<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map.Entry<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.putAll*
  name: putAll
  nameWithType: ImmutableBiMap.Builder<K,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Map.Entry'
    name: Entry
    fullName: '? extends java.util.Map.Entry'
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.Comparator<? super V>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.orderEntriesByValue*
  name: orderEntriesByValue
  nameWithType: ImmutableBiMap.Builder<K,V>.orderEntriesByValue
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.orderEntriesByValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
    name: ImmutableBiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build*
  name: build
  nameWithType: ImmutableBiMap.Builder<K,V>.build
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>.build
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder<K,V>
  name: ImmutableMap.Builder<K,V>
  nameWithType: ImmutableMap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder<K,V>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)
  name: ImmutableMap.Builder.put(Map.Entry<? extends K,? extends V>)
  nameWithType: ImmutableMap.Builder.put(Map.Entry<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(java.util.Map.Entry<? extends K,? extends V>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  name: ImmutableMap.Builder.putAll(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  nameWithType: ImmutableMap.Builder.putAll(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.build()
  name: ImmutableMap.Builder.build()
  nameWithType: ImmutableMap.Builder.build()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.build()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(K,V)
  name: ImmutableMap.Builder.put(K,V)
  nameWithType: ImmutableMap.Builder.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(K,V)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)
  name: ImmutableMap.Builder.orderEntriesByValue(Comparator<? super V>)
  nameWithType: ImmutableMap.Builder.orderEntriesByValue(Comparator<? super V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.orderEntriesByValue(java.util.Comparator<? super V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.util.Map<? extends K,? extends V>)
  name: ImmutableMap.Builder.putAll(Map<? extends K,? extends V>)
  nameWithType: ImmutableMap.Builder.putAll(Map<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.util.Map<? extends K,? extends V>)
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends java.util.Map.Entry'
  name: '? extends Map.Entry'
  nameWithType: '? extends Map.Entry'
  fullName: '? extends java.util.Map.Entry'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? super V'
  name: '? super V'
  nameWithType: '? super V'
  fullName: '? super V'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  name: ImmutableBiMap
  nameWithType: ImmutableBiMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
  name: ImmutableMap.Builder
  nameWithType: ImmutableMap.Builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(java.util.Map.Entry
  name: ImmutableMap.Builder.put(Map.Entry
  nameWithType: ImmutableMap.Builder.put(Map.Entry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.put(java.util.Map.Entry
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: '? extends K,? extends V>>)'
  name: '? extends K,? extends V>>)'
  nameWithType: '? extends K,? extends V>>)'
  fullName: '? extends K,? extends V>>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.lang.Iterable
  name: ImmutableMap.Builder.putAll(Iterable
  nameWithType: ImmutableMap.Builder.putAll(Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.orderEntriesByValue(java.util.Comparator
  name: ImmutableMap.Builder.orderEntriesByValue(Comparator
  nameWithType: ImmutableMap.Builder.orderEntriesByValue(Comparator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.orderEntriesByValue(java.util.Comparator
- uid: '? super V>)'
  name: '? super V>)'
  nameWithType: '? super V>)'
  fullName: '? super V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.util.Map
  name: ImmutableMap.Builder.putAll(Map
  nameWithType: ImmutableMap.Builder.putAll(Map
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.Builder.putAll(java.util.Map
