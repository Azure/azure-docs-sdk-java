### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.cdn.CdnProfile.checkEndpointNameAvailability(String name)
  name: checkEndpointNameAvailability(String name)
  nameWithType: CdnProfile.checkEndpointNameAvailability(String name)
  parameters:
  - description: <p>the endpoint resource name to validate </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the result if successful. </p>
    type: <xref href="com.microsoft.azure.management.cdn.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.cdn.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the availability of an endpoint name without creating the CDN endpoint.</p>

    <p></p>
  syntax: public CheckNameAvailabilityResult checkEndpointNameAvailability(String name)
  uid: com.microsoft.azure.management.cdn.CdnProfile.checkEndpointNameAvailability(String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.checkEndpointNameAvailabilityAsync(String name)
  name: checkEndpointNameAvailabilityAsync(String name)
  nameWithType: CdnProfile.checkEndpointNameAvailabilityAsync(String name)
  parameters:
  - description: <p>the endpoint resource name to validate. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.cdn.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.cdn.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks the availability of an endpoint name without creating the CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public Observable<CheckNameAvailabilityResult> checkEndpointNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.cdn.CdnProfile.checkEndpointNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.checkEndpointNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  name: checkEndpointNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  nameWithType: CdnProfile.checkEndpointNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  parameters:
  - description: <p>the endpoint resource name to validate. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.cdn.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.cdn.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.cdn.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.cdn.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks the availability of an endpoint name without creating the CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<CheckNameAvailabilityResult> checkEndpointNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.checkEndpointNameAvailabilityAsync(String,ServiceCallback<CheckNameAvailabilityResult>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.endpoints()
  name: endpoints()
  nameWithType: CdnProfile.endpoints()
  returns:
    description: <p>endpoints in the CDN manager profile, indexed by name </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.cdn.CdnEndpoint?alt=com.microsoft.azure.management.cdn.CdnEndpoint&text=CdnEndpoint" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, CdnEndpoint> endpoints()
  uid: com.microsoft.azure.management.cdn.CdnProfile.endpoints()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.generateSsoUri()
  name: generateSsoUri()
  nameWithType: CdnProfile.generateSsoUri()
  returns:
    description: <p>URI used to login to the third party web portal </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generates a dynamic SSO URI used to sign in to the CDN supplemental portal used for advanced management tasks.</p>

    <p></p>
  syntax: public String generateSsoUri()
  uid: com.microsoft.azure.management.cdn.CdnProfile.generateSsoUri()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.generateSsoUriAsync()
  name: generateSsoUriAsync()
  nameWithType: CdnProfile.generateSsoUriAsync()
  returns:
    description: <p>Observable to URI used to login to third party web portal </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously generates a dynamic SSO URI used to sign into the CDN supplemental portal used for advanced management tasks.</p>

    <p></p>
  syntax: public Observable<String> generateSsoUriAsync()
  uid: com.microsoft.azure.management.cdn.CdnProfile.generateSsoUriAsync()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.generateSsoUriAsync(ServiceCallback<String> callback)
  name: generateSsoUriAsync(ServiceCallback<String> callback)
  nameWithType: CdnProfile.generateSsoUriAsync(ServiceCallback<String> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CString%3E?alt=ServiceCallback%3CString%3E&text=ServiceCallback%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CString%3E?alt=ServiceFuture%3CString%3E&text=ServiceFuture%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously generates a dynamic SSO URI used to sign in to the CDN supplemental portal used for advanced management tasks.</p>

    <p></p>
  syntax: public ServiceFuture<String> generateSsoUriAsync(ServiceCallback<String> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.generateSsoUriAsync(ServiceCallback<String>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.isPremiumVerizon()
  name: isPremiumVerizon()
  nameWithType: CdnProfile.isPremiumVerizon()
  returns:
    description: <p>true if this CDN profile's SKU is of Premium Verizon, else false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isPremiumVerizon()
  uid: com.microsoft.azure.management.cdn.CdnProfile.isPremiumVerizon()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.listResourceUsage()
  name: listResourceUsage()
  nameWithType: CdnProfile.listResourceUsage()
  returns:
    description: <p>quotas and actual usages of endpoints under the current CDN profile </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.cdn.ResourceUsage?alt=com.microsoft.azure.management.cdn.ResourceUsage&text=ResourceUsage" data-throw-if-not-resolved="False"/>&gt;
  syntax: public PagedList<ResourceUsage> listResourceUsage()
  uid: com.microsoft.azure.management.cdn.CdnProfile.listResourceUsage()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.loadEndpointContent(String endpointName, Set<String> contentPaths)
  name: loadEndpointContent(String endpointName, Set<String> contentPaths)
  nameWithType: CdnProfile.loadEndpointContent(String endpointName, Set<String> contentPaths)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly pre-loads CDN endpoint content in the CDN profile. </p>

    <p>Note, this is Available for Verizon Profiles only.</p>

    <p></p>
  syntax: public void loadEndpointContent(String endpointName, Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnProfile.loadEndpointContent(String,Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.loadEndpointContentAsync(String endpointName, Set<String> contentPaths)
  name: loadEndpointContentAsync(String endpointName, Set<String> contentPaths)
  nameWithType: CdnProfile.loadEndpointContentAsync(String endpointName, Set<String> contentPaths)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly pre-loads CDN endpoint content in the CDN profile asynchronously. </p>

    <p>Note, this is Available for Verizon Profiles only.</p>

    <p></p>
  syntax: public Completable loadEndpointContentAsync(String endpointName, Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnProfile.loadEndpointContentAsync(String,Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.loadEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  name: loadEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  nameWithType: CdnProfile.loadEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly pre-loads CDN endpoint content in the CDN profile asynchronously. </p>

    <p>Note, this is Available for Verizon Profiles only.</p>

    <p></p>
  syntax: public ServiceFuture<Void> loadEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.loadEndpointContentAsync(String,Set<String>,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.purgeEndpointContent(String endpointName, Set<String> contentPaths)
  name: purgeEndpointContent(String endpointName, Set<String> contentPaths)
  nameWithType: CdnProfile.purgeEndpointContent(String endpointName, Set<String> contentPaths)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly purges CDN endpoint content in the CDN profile.</p>

    <p></p>
  syntax: public void purgeEndpointContent(String endpointName, Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnProfile.purgeEndpointContent(String,Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.purgeEndpointContentAsync(String endpointName, Set<String> contentPaths)
  name: purgeEndpointContentAsync(String endpointName, Set<String> contentPaths)
  nameWithType: CdnProfile.purgeEndpointContentAsync(String endpointName, Set<String> contentPaths)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly purges CDN endpoint content in the CDN profile asynchronously.</p>

    <p></p>
  syntax: public Completable purgeEndpointContentAsync(String endpointName, Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnProfile.purgeEndpointContentAsync(String,Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.purgeEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  name: purgeEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  nameWithType: CdnProfile.purgeEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly purges CDN endpoint content in the CDN profile asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> purgeEndpointContentAsync(String endpointName, Set<String> contentPaths, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.purgeEndpointContentAsync(String,Set<String>,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.resourceState()
  name: resourceState()
  nameWithType: CdnProfile.resourceState()
  returns:
    description: <p>CDN profile state </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String resourceState()
  uid: com.microsoft.azure.management.cdn.CdnProfile.resourceState()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.sku()
  name: sku()
  nameWithType: CdnProfile.sku()
  returns:
    description: <p>the SKU of the CDN profile </p>
    type: <xref href="com.microsoft.azure.management.cdn.Sku?alt=com.microsoft.azure.management.cdn.Sku&text=Sku" data-throw-if-not-resolved="False"/>
  syntax: public Sku sku()
  uid: com.microsoft.azure.management.cdn.CdnProfile.sku()
- fullName: com.microsoft.azure.management.cdn.CdnProfile.startEndpoint(String endpointName)
  name: startEndpoint(String endpointName)
  nameWithType: CdnProfile.startEndpoint(String endpointName)
  parameters:
  - description: <p>a name of an endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts a stopped CDN endpoint.</p>

    <p></p>
  syntax: public void startEndpoint(String endpointName)
  uid: com.microsoft.azure.management.cdn.CdnProfile.startEndpoint(String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.startEndpointAsync(String endpointName)
  name: startEndpointAsync(String endpointName)
  nameWithType: CdnProfile.startEndpointAsync(String endpointName)
  parameters:
  - description: <p>a name of an endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts a stopped CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public Completable startEndpointAsync(String endpointName)
  uid: com.microsoft.azure.management.cdn.CdnProfile.startEndpointAsync(String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.startEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  name: startEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  nameWithType: CdnProfile.startEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  parameters:
  - description: <p>a name of an endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts a stopped CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> startEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.startEndpointAsync(String,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.stopEndpoint(String endpointName)
  name: stopEndpoint(String endpointName)
  nameWithType: CdnProfile.stopEndpoint(String endpointName)
  parameters:
  - description: <p>a name of an endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops a running CDN endpoint.</p>

    <p></p>
  syntax: public void stopEndpoint(String endpointName)
  uid: com.microsoft.azure.management.cdn.CdnProfile.stopEndpoint(String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.stopEndpointAsync(String endpointName)
  name: stopEndpointAsync(String endpointName)
  nameWithType: CdnProfile.stopEndpointAsync(String endpointName)
  parameters:
  - description: <p>a name of an endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops a running CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public Completable stopEndpointAsync(String endpointName)
  uid: com.microsoft.azure.management.cdn.CdnProfile.stopEndpointAsync(String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.stopEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  name: stopEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  nameWithType: CdnProfile.stopEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  parameters:
  - description: <p>a name of an endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops a running CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> stopEndpointAsync(String endpointName, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.stopEndpointAsync(String,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.validateEndpointCustomDomain(String endpointName, String hostName)
  name: validateEndpointCustomDomain(String endpointName, String hostName)
  nameWithType: CdnProfile.validateEndpointCustomDomain(String endpointName, String hostName)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the host name of the custom domain, which must be a domain name </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CustomDomainValidationResult object if successful </p>
    type: <xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS in current profile.</p>

    <p></p>
  syntax: public CustomDomainValidationResult validateEndpointCustomDomain(String endpointName, String hostName)
  uid: com.microsoft.azure.management.cdn.CdnProfile.validateEndpointCustomDomain(String,String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.validateEndpointCustomDomainAsync(String endpointName, String hostName)
  name: validateEndpointCustomDomainAsync(String endpointName, String hostName)
  nameWithType: CdnProfile.validateEndpointCustomDomainAsync(String endpointName, String hostName)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the host name of the custom domain, which must be a domain name </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Observable to CustomDomainValidationResult object if successful </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS in current profile asynchronously.</p>

    <p></p>
  syntax: public Observable<CustomDomainValidationResult> validateEndpointCustomDomainAsync(String endpointName, String hostName)
  uid: com.microsoft.azure.management.cdn.CdnProfile.validateEndpointCustomDomainAsync(String,String)
- fullName: com.microsoft.azure.management.cdn.CdnProfile.validateEndpointCustomDomainAsync(String endpointName, String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  name: validateEndpointCustomDomainAsync(String endpointName, String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  nameWithType: CdnProfile.validateEndpointCustomDomainAsync(String endpointName, String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  parameters:
  - description: <p>a name of the endpoint under the profile </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the host name of the custom domain, which must be a domain name </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS in current profile asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<CustomDomainValidationResult> validateEndpointCustomDomainAsync(String endpointName, String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  uid: com.microsoft.azure.management.cdn.CdnProfile.validateEndpointCustomDomainAsync(String,String,ServiceCallback<CustomDomainValidationResult>)
nameWithType: CdnProfile
syntax: public interface CdnProfile extends GroupableResource<CdnManager, ProfileInner>,Refreshable<CdnProfile>,Updatable<CdnProfile.Update>
type: interface
uid: com.microsoft.azure.management.cdn.CdnProfile
fullName: com.microsoft.azure.management.cdn.CdnProfile
name: CdnProfile
package: com.microsoft.azure.management.cdn
summary: <p>An immutable client-side representation of an Azure CDN profile. </p>
metadata: {}
