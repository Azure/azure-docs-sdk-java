### YamlMime:JavaType
uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient"
fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient"
name: "AnomalyDetectorAsyncClient"
nameWithType: "AnomalyDetectorAsyncClient"
summary: "Initializes a new instance of the asynchronous Anomaly<wbr>Detector<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **AnomalyDetectorAsyncClient**"
methods:
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModel(java.lang.String)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModel(String modelId)"
  name: "deleteMultivariateModel(String modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.deleteMultivariateModel(String modelId)"
  summary: "Delete Multivariate Model"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteMultivariateModel(String modelId)"
  desc: "Delete Multivariate Model\n\nDelete an existing multivariate model according to the modelId."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> that completes when a successful response is received."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModelWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  name: "deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  summary: "Delete Multivariate Model"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  desc: "Delete Multivariate Model\n\nDelete an existing multivariate model according to the modelId."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateBatchAnomaly(java.lang.String,com.azure.ai.anomalydetector.models.MultivariateBatchDetectionOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateBatchAnomaly(String modelId, MultivariateBatchDetectionOptions options)"
  name: "detectMultivariateBatchAnomaly(String modelId, MultivariateBatchDetectionOptions options)"
  nameWithType: "AnomalyDetectorAsyncClient.detectMultivariateBatchAnomaly(String modelId, MultivariateBatchDetectionOptions options)"
  summary: "Detect Multivariate Anomaly"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Request of multivariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.MultivariateBatchDetectionOptions?alt=com.azure.ai.anomalydetector.models.MultivariateBatchDetectionOptions&text=MultivariateBatchDetectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<MultivariateDetectionResult> detectMultivariateBatchAnomaly(String modelId, MultivariateBatchDetectionOptions options)"
  desc: "Detect Multivariate Anomaly\n\nSubmit multivariate anomaly detection task with the modelId of trained model and inference data, the input schema should be the same with the training request. The request will complete asynchronously and return a resultId to query the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri, either pointed to an Azure blob storage folder, or pointed to a CSV file in Azure blob storage."
  returns:
    description: "detection results for the given resultId on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.MultivariateDetectionResult?alt=com.azure.ai.anomalydetector.models.MultivariateDetectionResult&text=MultivariateDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateBatchAnomalyWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateBatchAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  name: "detectMultivariateBatchAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.detectMultivariateBatchAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  summary: "Detect Multivariate Anomaly"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Request of multivariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> detectMultivariateBatchAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  desc: "Detect Multivariate Anomaly\n\nSubmit multivariate anomaly detection task with the modelId of trained model and inference data, the input schema should be the same with the training request. The request will complete asynchronously and return a resultId to query the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri, either pointed to an Azure blob storage folder, or pointed to a CSV file in Azure blob storage.\n\n**Request Body Schema**\n\n```java\n{\n     dataSource: String (Required)\n     topContributorCount: int (Required)\n     startTime: OffsetDateTime (Required)\n     endTime: OffsetDateTime (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     resultId: String (Required)\n     summary (Required): {\n         status: String(CREATED/RUNNING/READY/FAILED) (Required)\n         errors (Optional): [\n              (Optional){\n                 code: String (Required)\n                 message: String (Required)\n             }\n         ]\n         variableStates (Optional): [\n              (Optional){\n                 variable: String (Optional)\n                 filledNARatio: Double (Optional)\n                 effectiveCount: Integer (Optional)\n                 firstTimestamp: OffsetDateTime (Optional)\n                 lastTimestamp: OffsetDateTime (Optional)\n             }\n         ]\n         setupInfo (Required): {\n             dataSource: String (Required)\n             topContributorCount: int (Required)\n             startTime: OffsetDateTime (Required)\n             endTime: OffsetDateTime (Required)\n         }\n     }\n     results (Required): [\n          (Required){\n             timestamp: OffsetDateTime (Required)\n             value (Optional): {\n                 isAnomaly: boolean (Required)\n                 severity: double (Required)\n                 score: double (Required)\n                 interpretation (Optional): [\n                      (Optional){\n                         variable: String (Optional)\n                         contributionScore: Double (Optional)\n                         correlationChanges (Optional): {\n                             changedVariables (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     }\n                 ]\n             }\n             errors (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     ]\n }\n```"
  returns:
    description: "detection results for the given resultId along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateLastAnomaly(java.lang.String,com.azure.ai.anomalydetector.models.MultivariateLastDetectionOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateLastAnomaly(String modelId, MultivariateLastDetectionOptions options)"
  name: "detectMultivariateLastAnomaly(String modelId, MultivariateLastDetectionOptions options)"
  nameWithType: "AnomalyDetectorAsyncClient.detectMultivariateLastAnomaly(String modelId, MultivariateLastDetectionOptions options)"
  summary: "Detect anomalies in the last point of the request body"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Request of last detection."
    name: "options"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.MultivariateLastDetectionOptions?alt=com.azure.ai.anomalydetector.models.MultivariateLastDetectionOptions&text=MultivariateLastDetectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<MultivariateLastDetectionResult> detectMultivariateLastAnomaly(String modelId, MultivariateLastDetectionOptions options)"
  desc: "Detect anomalies in the last point of the request body\n\nSubmit multivariate anomaly detection task with the modelId of trained model and inference data, and the inference data should be put into request body in a JSON format. The request will complete synchronously and return the detection immediately in the response body."
  returns:
    description: "results of last detection on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.MultivariateLastDetectionResult?alt=com.azure.ai.anomalydetector.models.MultivariateLastDetectionResult&text=MultivariateLastDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateLastAnomalyWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectMultivariateLastAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  name: "detectMultivariateLastAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.detectMultivariateLastAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  summary: "Detect anomalies in the last point of the request body"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Request of last detection."
    name: "options"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> detectMultivariateLastAnomalyWithResponse(String modelId, BinaryData options, RequestOptions requestOptions)"
  desc: "Detect anomalies in the last point of the request body\n\nSubmit multivariate anomaly detection task with the modelId of trained model and inference data, and the inference data should be put into request body in a JSON format. The request will complete synchronously and return the detection immediately in the response body.\n\n**Request Body Schema**\n\n```java\n{\n     variables (Required): [\n          (Required){\n             variable: String (Required)\n             timestamps (Required): [\n                 String (Required)\n             ]\n             values (Required): [\n                 double (Required)\n             ]\n         }\n     ]\n     topContributorCount: int (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     variableStates (Optional): [\n          (Optional){\n             variable: String (Optional)\n             filledNARatio: Double (Optional)\n             effectiveCount: Integer (Optional)\n             firstTimestamp: OffsetDateTime (Optional)\n             lastTimestamp: OffsetDateTime (Optional)\n         }\n     ]\n     results (Optional): [\n          (Optional){\n             timestamp: OffsetDateTime (Required)\n             value (Optional): {\n                 isAnomaly: boolean (Required)\n                 severity: double (Required)\n                 score: double (Required)\n                 interpretation (Optional): [\n                      (Optional){\n                         variable: String (Optional)\n                         contributionScore: Double (Optional)\n                         correlationChanges (Optional): {\n                             changedVariables (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     }\n                 ]\n             }\n             errors (Optional): [\n                  (Optional){\n                     code: String (Required)\n                     message: String (Required)\n                 }\n             ]\n         }\n     ]\n }\n```"
  returns:
    description: "results of last detection along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateChangePoint(com.azure.ai.anomalydetector.models.UnivariateChangePointDetectionOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateChangePoint(UnivariateChangePointDetectionOptions options)"
  name: "detectUnivariateChangePoint(UnivariateChangePointDetectionOptions options)"
  nameWithType: "AnomalyDetectorAsyncClient.detectUnivariateChangePoint(UnivariateChangePointDetectionOptions options)"
  summary: "Detect change point for the entire series"
  parameters:
  - description: "Method of univariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.UnivariateChangePointDetectionOptions?alt=com.azure.ai.anomalydetector.models.UnivariateChangePointDetectionOptions&text=UnivariateChangePointDetectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UnivariateChangePointDetectionResult> detectUnivariateChangePoint(UnivariateChangePointDetectionOptions options)"
  desc: "Detect change point for the entire series\n\nEvaluate change point score of every series point."
  returns:
    description: "the response of change point detection on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.UnivariateChangePointDetectionResult?alt=com.azure.ai.anomalydetector.models.UnivariateChangePointDetectionResult&text=UnivariateChangePointDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateChangePointWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateChangePointWithResponse(BinaryData options, RequestOptions requestOptions)"
  name: "detectUnivariateChangePointWithResponse(BinaryData options, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.detectUnivariateChangePointWithResponse(BinaryData options, RequestOptions requestOptions)"
  summary: "Detect change point for the entire series"
  parameters:
  - description: "Method of univariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> detectUnivariateChangePointWithResponse(BinaryData options, RequestOptions requestOptions)"
  desc: "Detect change point for the entire series\n\nEvaluate change point score of every series point.\n\n**Request Body Schema**\n\n```java\n{\n     series (Required): [\n          (Required){\n             timestamp: OffsetDateTime (Optional)\n             value: double (Required)\n         }\n     ]\n     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none) (Required)\n     customInterval: Integer (Optional)\n     period: Integer (Optional)\n     stableTrendWindow: Integer (Optional)\n     threshold: Double (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     period: Integer (Optional)\n     isChangePoint (Optional): [\n         boolean (Optional)\n     ]\n     confidenceScores (Optional): [\n         double (Optional)\n     ]\n }\n```"
  returns:
    description: "the response of change point detection along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateEntireSeries(com.azure.ai.anomalydetector.models.UnivariateDetectionOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateEntireSeries(UnivariateDetectionOptions options)"
  name: "detectUnivariateEntireSeries(UnivariateDetectionOptions options)"
  nameWithType: "AnomalyDetectorAsyncClient.detectUnivariateEntireSeries(UnivariateDetectionOptions options)"
  summary: "Detect anomalies for the entire series in batch."
  parameters:
  - description: "Method of univariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.UnivariateDetectionOptions?alt=com.azure.ai.anomalydetector.models.UnivariateDetectionOptions&text=UnivariateDetectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UnivariateEntireDetectionResult> detectUnivariateEntireSeries(UnivariateDetectionOptions options)"
  desc: "Detect anomalies for the entire series in batch.\n\nThis operation generates a model with an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series."
  returns:
    description: "the response of entire anomaly detection on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.UnivariateEntireDetectionResult?alt=com.azure.ai.anomalydetector.models.UnivariateEntireDetectionResult&text=UnivariateEntireDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateEntireSeriesWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateEntireSeriesWithResponse(BinaryData options, RequestOptions requestOptions)"
  name: "detectUnivariateEntireSeriesWithResponse(BinaryData options, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.detectUnivariateEntireSeriesWithResponse(BinaryData options, RequestOptions requestOptions)"
  summary: "Detect anomalies for the entire series in batch."
  parameters:
  - description: "Method of univariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> detectUnivariateEntireSeriesWithResponse(BinaryData options, RequestOptions requestOptions)"
  desc: "Detect anomalies for the entire series in batch.\n\nThis operation generates a model with an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series.\n\n**Request Body Schema**\n\n```java\n{\n     series (Required): [\n          (Required){\n             timestamp: OffsetDateTime (Optional)\n             value: double (Required)\n         }\n     ]\n     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none) (Optional)\n     customInterval: Integer (Optional)\n     period: Integer (Optional)\n     maxAnomalyRatio: Double (Optional)\n     sensitivity: Integer (Optional)\n     imputeMode: String(auto/previous/linear/fixed/zero/notFill) (Optional)\n     imputeFixedValue: Double (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     period: int (Required)\n     expectedValues (Required): [\n         double (Required)\n     ]\n     upperMargins (Required): [\n         double (Required)\n     ]\n     lowerMargins (Required): [\n         double (Required)\n     ]\n     isAnomaly (Required): [\n         boolean (Required)\n     ]\n     isNegativeAnomaly (Required): [\n         boolean (Required)\n     ]\n     isPositiveAnomaly (Required): [\n         boolean (Required)\n     ]\n     severity (Optional): [\n         double (Optional)\n     ]\n }\n```"
  returns:
    description: "the response of entire anomaly detection along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateLastPoint(com.azure.ai.anomalydetector.models.UnivariateDetectionOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateLastPoint(UnivariateDetectionOptions options)"
  name: "detectUnivariateLastPoint(UnivariateDetectionOptions options)"
  nameWithType: "AnomalyDetectorAsyncClient.detectUnivariateLastPoint(UnivariateDetectionOptions options)"
  summary: "Detect anomaly status of the latest point in time series."
  parameters:
  - description: "Method of univariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.UnivariateDetectionOptions?alt=com.azure.ai.anomalydetector.models.UnivariateDetectionOptions&text=UnivariateDetectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<UnivariateLastDetectionResult> detectUnivariateLastPoint(UnivariateDetectionOptions options)"
  desc: "Detect anomaly status of the latest point in time series.\n\nThis operation generates a model using the points that you sent into the API, and based on all data to determine whether the last point is anomalous."
  returns:
    description: "the response of last anomaly detection on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.UnivariateLastDetectionResult?alt=com.azure.ai.anomalydetector.models.UnivariateLastDetectionResult&text=UnivariateLastDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateLastPointWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectUnivariateLastPointWithResponse(BinaryData options, RequestOptions requestOptions)"
  name: "detectUnivariateLastPointWithResponse(BinaryData options, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.detectUnivariateLastPointWithResponse(BinaryData options, RequestOptions requestOptions)"
  summary: "Detect anomaly status of the latest point in time series."
  parameters:
  - description: "Method of univariate anomaly detection."
    name: "options"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> detectUnivariateLastPointWithResponse(BinaryData options, RequestOptions requestOptions)"
  desc: "Detect anomaly status of the latest point in time series.\n\nThis operation generates a model using the points that you sent into the API, and based on all data to determine whether the last point is anomalous.\n\n**Request Body Schema**\n\n```java\n{\n     series (Required): [\n          (Required){\n             timestamp: OffsetDateTime (Optional)\n             value: double (Required)\n         }\n     ]\n     granularity: String(yearly/monthly/weekly/daily/hourly/minutely/secondly/microsecond/none) (Optional)\n     customInterval: Integer (Optional)\n     period: Integer (Optional)\n     maxAnomalyRatio: Double (Optional)\n     sensitivity: Integer (Optional)\n     imputeMode: String(auto/previous/linear/fixed/zero/notFill) (Optional)\n     imputeFixedValue: Double (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     period: int (Required)\n     suggestedWindow: int (Required)\n     expectedValue: double (Required)\n     upperMargin: double (Required)\n     lowerMargin: double (Required)\n     isAnomaly: boolean (Required)\n     isNegativeAnomaly: boolean (Required)\n     isPositiveAnomaly: boolean (Required)\n     severity: Double (Optional)\n }\n```"
  returns:
    description: "the response of last anomaly detection along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateBatchDetectionResult(java.lang.String)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateBatchDetectionResult(String resultId)"
  name: "getMultivariateBatchDetectionResult(String resultId)"
  nameWithType: "AnomalyDetectorAsyncClient.getMultivariateBatchDetectionResult(String resultId)"
  summary: "Get Multivariate Anomaly Detection Result"
  parameters:
  - description: "ID of a batch detection result."
    name: "resultId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<MultivariateDetectionResult> getMultivariateBatchDetectionResult(String resultId)"
  desc: "Get Multivariate Anomaly Detection Result\n\nFor asynchronous inference, get multivariate anomaly detection result based on resultId returned by the BatchDetectAnomaly api."
  returns:
    description: "detection results for the given resultId on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.MultivariateDetectionResult?alt=com.azure.ai.anomalydetector.models.MultivariateDetectionResult&text=MultivariateDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateBatchDetectionResultWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateBatchDetectionResultWithResponse(String resultId, RequestOptions requestOptions)"
  name: "getMultivariateBatchDetectionResultWithResponse(String resultId, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.getMultivariateBatchDetectionResultWithResponse(String resultId, RequestOptions requestOptions)"
  summary: "Get Multivariate Anomaly Detection Result"
  parameters:
  - description: "ID of a batch detection result."
    name: "resultId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMultivariateBatchDetectionResultWithResponse(String resultId, RequestOptions requestOptions)"
  desc: "Get Multivariate Anomaly Detection Result\n\nFor asynchronous inference, get multivariate anomaly detection result based on resultId returned by the BatchDetectAnomaly api.\n\n**Response Body Schema**\n\n```java\n{\n     resultId: String (Required)\n     summary (Required): {\n         status: String(CREATED/RUNNING/READY/FAILED) (Required)\n         errors (Optional): [\n              (Optional){\n                 code: String (Required)\n                 message: String (Required)\n             }\n         ]\n         variableStates (Optional): [\n              (Optional){\n                 variable: String (Optional)\n                 filledNARatio: Double (Optional)\n                 effectiveCount: Integer (Optional)\n                 firstTimestamp: OffsetDateTime (Optional)\n                 lastTimestamp: OffsetDateTime (Optional)\n             }\n         ]\n         setupInfo (Required): {\n             dataSource: String (Required)\n             topContributorCount: int (Required)\n             startTime: OffsetDateTime (Required)\n             endTime: OffsetDateTime (Required)\n         }\n     }\n     results (Required): [\n          (Required){\n             timestamp: OffsetDateTime (Required)\n             value (Optional): {\n                 isAnomaly: boolean (Required)\n                 severity: double (Required)\n                 score: double (Required)\n                 interpretation (Optional): [\n                      (Optional){\n                         variable: String (Optional)\n                         contributionScore: Double (Optional)\n                         correlationChanges (Optional): {\n                             changedVariables (Optional): [\n                                 String (Optional)\n                             ]\n                         }\n                     }\n                 ]\n             }\n             errors (Optional): [\n                 (recursive schema, see above)\n             ]\n         }\n     ]\n }\n```"
  returns:
    description: "detection results for the given resultId along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModel(java.lang.String)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModel(String modelId)"
  name: "getMultivariateModel(String modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.getMultivariateModel(String modelId)"
  summary: "Get Multivariate Model"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<AnomalyDetectionModel> getMultivariateModel(String modelId)"
  desc: "Get Multivariate Model\n\nGet detailed information of multivariate model, including the training status and variables used in the model."
  returns:
    description: "detailed information of multivariate model, including the training status and variables used in the model\n     on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.AnomalyDetectionModel?alt=com.azure.ai.anomalydetector.models.AnomalyDetectionModel&text=AnomalyDetectionModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModelWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  name: "getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  summary: "Get Multivariate Model"
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMultivariateModelWithResponse(String modelId, RequestOptions requestOptions)"
  desc: "Get Multivariate Model\n\nGet detailed information of multivariate model, including the training status and variables used in the model.\n\n**Response Body Schema**\n\n```java\n{\n     modelId: String (Required)\n     createdTime: OffsetDateTime (Required)\n     lastUpdatedTime: OffsetDateTime (Required)\n     modelInfo (Optional): {\n         dataSource: String (Required)\n         dataSchema: String(OneTable/MultiTable) (Optional)\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Required)\n         displayName: String (Optional)\n         slidingWindow: Integer (Optional)\n         alignPolicy (Optional): {\n             alignMode: String(Inner/Outer) (Optional)\n             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)\n             paddingValue: Double (Optional)\n         }\n         status: String(CREATED/RUNNING/READY/FAILED) (Optional)\n         errors (Optional): [\n              (Optional){\n                 code: String (Required)\n                 message: String (Required)\n             }\n         ]\n         diagnosticsInfo (Optional): {\n             modelState (Optional): {\n                 epochIds (Optional): [\n                     int (Optional)\n                 ]\n                 trainLosses (Optional): [\n                     double (Optional)\n                 ]\n                 validationLosses (Optional): [\n                     double (Optional)\n                 ]\n                 latenciesInSeconds (Optional): [\n                     double (Optional)\n                 ]\n             }\n             variableStates (Optional): [\n                  (Optional){\n                     variable: String (Optional)\n                     filledNARatio: Double (Optional)\n                     effectiveCount: Integer (Optional)\n                     firstTimestamp: OffsetDateTime (Optional)\n                     lastTimestamp: OffsetDateTime (Optional)\n                 }\n             ]\n         }\n     }\n }\n```"
  returns:
    description: "detailed information of multivariate model, including the training status and variables used in the model\n     along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModels()"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModels()"
  name: "listMultivariateModels()"
  nameWithType: "AnomalyDetectorAsyncClient.listMultivariateModels()"
  summary: "List Multivariate Models"
  syntax: "public PagedFlux<AnomalyDetectionModel> listMultivariateModels()"
  desc: "List Multivariate Models\n\nList models of a resource."
  returns:
    description: "response of listing models as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.AnomalyDetectionModel?alt=com.azure.ai.anomalydetector.models.AnomalyDetectionModel&text=AnomalyDetectionModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModels(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModels(RequestOptions requestOptions)"
  name: "listMultivariateModels(RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.listMultivariateModels(RequestOptions requestOptions)"
  summary: "List Multivariate Models"
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listMultivariateModels(RequestOptions requestOptions)"
  desc: "List Multivariate Models\n\nList models of a resource.\n\n**Query Parameters**\n\n    | ---- | ------- | -------- | ----------------------------------------------- |\n    | Name | Type    | Required | Description                                     |\n    | skip | Integer | No       | Skip indicates how many models will be skipped. |\n    | top  | Integer | No       | Top indicates how many models will be fetched.  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     modelId: String (Required)\n     createdTime: OffsetDateTime (Required)\n     lastUpdatedTime: OffsetDateTime (Required)\n     modelInfo (Optional): {\n         dataSource: String (Required)\n         dataSchema: String(OneTable/MultiTable) (Optional)\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Required)\n         displayName: String (Optional)\n         slidingWindow: Integer (Optional)\n         alignPolicy (Optional): {\n             alignMode: String(Inner/Outer) (Optional)\n             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)\n             paddingValue: Double (Optional)\n         }\n         status: String(CREATED/RUNNING/READY/FAILED) (Optional)\n         errors (Optional): [\n              (Optional){\n                 code: String (Required)\n                 message: String (Required)\n             }\n         ]\n         diagnosticsInfo (Optional): {\n             modelState (Optional): {\n                 epochIds (Optional): [\n                     int (Optional)\n                 ]\n                 trainLosses (Optional): [\n                     double (Optional)\n                 ]\n                 validationLosses (Optional): [\n                     double (Optional)\n                 ]\n                 latenciesInSeconds (Optional): [\n                     double (Optional)\n                 ]\n             }\n             variableStates (Optional): [\n                  (Optional){\n                     variable: String (Optional)\n                     filledNARatio: Double (Optional)\n                     effectiveCount: Integer (Optional)\n                     firstTimestamp: OffsetDateTime (Optional)\n                     lastTimestamp: OffsetDateTime (Optional)\n                 }\n             ]\n         }\n     }\n }\n```"
  returns:
    description: "response of listing models as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModel(com.azure.ai.anomalydetector.models.ModelInfo)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModel(ModelInfo modelInfo)"
  name: "trainMultivariateModel(ModelInfo modelInfo)"
  nameWithType: "AnomalyDetectorAsyncClient.trainMultivariateModel(ModelInfo modelInfo)"
  summary: "Train a Multivariate Anomaly Detection Model"
  parameters:
  - description: "Model information."
    name: "modelInfo"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ModelInfo?alt=com.azure.ai.anomalydetector.models.ModelInfo&text=ModelInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnomalyDetectionModel> trainMultivariateModel(ModelInfo modelInfo)"
  desc: "Train a Multivariate Anomaly Detection Model\n\nCreate and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure blob storage URI.There are two types of data input: An URI pointed to an Azure blob storage folder which contains multiple CSV files, and each CSV file contains two columns, timestamp and variable. Another type of input is an URI pointed to a CSV file in Azure blob storage, which contains all the variables and a timestamp column."
  returns:
    description: "response of getting a model on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.AnomalyDetectionModel?alt=com.azure.ai.anomalydetector.models.AnomalyDetectionModel&text=AnomalyDetectionModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModelWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModelWithResponse(BinaryData modelInfo, RequestOptions requestOptions)"
  name: "trainMultivariateModelWithResponse(BinaryData modelInfo, RequestOptions requestOptions)"
  nameWithType: "AnomalyDetectorAsyncClient.trainMultivariateModelWithResponse(BinaryData modelInfo, RequestOptions requestOptions)"
  summary: "Train a Multivariate Anomaly Detection Model"
  parameters:
  - description: "Model information."
    name: "modelInfo"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> trainMultivariateModelWithResponse(BinaryData modelInfo, RequestOptions requestOptions)"
  desc: "Train a Multivariate Anomaly Detection Model\n\nCreate and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure blob storage URI.There are two types of data input: An URI pointed to an Azure blob storage folder which contains multiple CSV files, and each CSV file contains two columns, timestamp and variable. Another type of input is an URI pointed to a CSV file in Azure blob storage, which contains all the variables and a timestamp column.\n\n**Request Body Schema**\n\n```java\n{\n     dataSource: String (Required)\n     dataSchema: String(OneTable/MultiTable) (Optional)\n     startTime: OffsetDateTime (Required)\n     endTime: OffsetDateTime (Required)\n     displayName: String (Optional)\n     slidingWindow: Integer (Optional)\n     alignPolicy (Optional): {\n         alignMode: String(Inner/Outer) (Optional)\n         fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)\n         paddingValue: Double (Optional)\n     }\n     status: String(CREATED/RUNNING/READY/FAILED) (Optional)\n     errors (Optional): [\n          (Optional){\n             code: String (Required)\n             message: String (Required)\n         }\n     ]\n     diagnosticsInfo (Optional): {\n         modelState (Optional): {\n             epochIds (Optional): [\n                 int (Optional)\n             ]\n             trainLosses (Optional): [\n                 double (Optional)\n             ]\n             validationLosses (Optional): [\n                 double (Optional)\n             ]\n             latenciesInSeconds (Optional): [\n                 double (Optional)\n             ]\n         }\n         variableStates (Optional): [\n              (Optional){\n                 variable: String (Optional)\n                 filledNARatio: Double (Optional)\n                 effectiveCount: Integer (Optional)\n                 firstTimestamp: OffsetDateTime (Optional)\n                 lastTimestamp: OffsetDateTime (Optional)\n             }\n         ]\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     modelId: String (Required)\n     createdTime: OffsetDateTime (Required)\n     lastUpdatedTime: OffsetDateTime (Required)\n     modelInfo (Optional): {\n         dataSource: String (Required)\n         dataSchema: String(OneTable/MultiTable) (Optional)\n         startTime: OffsetDateTime (Required)\n         endTime: OffsetDateTime (Required)\n         displayName: String (Optional)\n         slidingWindow: Integer (Optional)\n         alignPolicy (Optional): {\n             alignMode: String(Inner/Outer) (Optional)\n             fillNAMethod: String(Previous/Subsequent/Linear/Zero/Fixed) (Optional)\n             paddingValue: Double (Optional)\n         }\n         status: String(CREATED/RUNNING/READY/FAILED) (Optional)\n         errors (Optional): [\n              (Optional){\n                 code: String (Required)\n                 message: String (Required)\n             }\n         ]\n         diagnosticsInfo (Optional): {\n             modelState (Optional): {\n                 epochIds (Optional): [\n                     int (Optional)\n                 ]\n                 trainLosses (Optional): [\n                     double (Optional)\n                 ]\n                 validationLosses (Optional): [\n                     double (Optional)\n                 ]\n                 latenciesInSeconds (Optional): [\n                     double (Optional)\n                 ]\n             }\n             variableStates (Optional): [\n                  (Optional){\n                     variable: String (Optional)\n                     filledNARatio: Double (Optional)\n                     effectiveCount: Integer (Optional)\n                     firstTimestamp: OffsetDateTime (Optional)\n                     lastTimestamp: OffsetDateTime (Optional)\n                 }\n             ]\n         }\n     }\n }\n```"
  returns:
    description: "response of getting a model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous AnomalyDetectorClient type."
metadata: {}
package: "com.azure.ai.anomalydetector"
artifact: com.azure:azure-ai-anomalydetector:3.0.0-beta.5
