### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- system.fabric.CancellationToken.canBeCancelled()
- system.fabric.CancellationToken.close()
- system.fabric.CancellationToken.getDefault()
- system.fabric.CancellationToken.isCancelled()
- system.fabric.CancellationToken.registerCancellationCallback(Runnable)
- system.fabric.CancellationToken.registerCancellationCallback(String,Runnable)
- system.fabric.CancellationToken.throwIfCancellationRequested()
- system.fabric.CancellationToken.unregisterCancellationCallback()
- system.fabric.CancellationToken.unregisterCancellationCallback(String)
nameWithType: CancellationToken
syntax: public class CancellationToken
type: class
uid: system.fabric.CancellationToken
fullName: system.fabric.CancellationToken
name: CancellationToken
package: system.fabric
summary: <p>A CancellationToken is used to propagate notification that operations should be canceled. You create a cancellation token by instantiating a <xref uid="system.fabric.CancellationTokenSource" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource</xref> object, which manages cancellation tokens retrieved from its <xref uid="system.fabric.CancellationTokenSource.getToken()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#getToken()</xref> method. You then pass the cancellation token to any number of operations that should receive notice of cancellation. The token cannot be used to initiate cancellation. When the owning object calls <xref uid="system.fabric.CancellationTokenSource.cancel()" data-throw-if-not-resolved="false">system.fabric.CancellationTokenSource#cancel()</xref>, the cancelled property on the cancellation token is set to true. The objects that receive the notification can respond in whatever manner is appropriate. </p>
metadata: {}
