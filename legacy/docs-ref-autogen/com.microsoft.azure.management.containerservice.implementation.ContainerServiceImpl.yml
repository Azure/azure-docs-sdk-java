### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.ContainerServiceImpl(String name, ContainerServiceInner innerObject, ContainerServiceManager manager)
  name: ContainerServiceImpl(String name, ContainerServiceInner innerObject, ContainerServiceManager manager)
  nameWithType: ContainerServiceImpl.ContainerServiceImpl(String name, ContainerServiceInner innerObject, ContainerServiceManager manager)
  parameters:
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: innerObject
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceInner?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceInner&text=ContainerServiceInner" data-throw-if-not-resolved="False"/>
  - name: manager
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceManager?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceManager&text=ContainerServiceManager" data-throw-if-not-resolved="False"/>
  syntax: protected ContainerServiceImpl(String name, ContainerServiceInner innerObject, ContainerServiceManager manager)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.ContainerServiceImpl(String,ContainerServiceInner,ContainerServiceManager)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.GroupableResourceImpl&lt;ContainerService, ContainerServiceInner, ContainerServiceImpl, ContainerServiceManager&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.apply()
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync()
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.UpdateWithTags.withoutTag(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithRegion.withRegion(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithRegion.withRegion(Region)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTag(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.UpdateWithTags.withTag(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTags(Map<String, String>)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.UpdateWithTags.withTags(Map<String, String>)
methods:
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.agentPools()
  name: agentPools()
  nameWithType: ContainerServiceImpl.agentPools()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.agentPools()
  returns:
    description: <p>the agent pools map </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.containerservice.ContainerServiceAgentPool?alt=com.microsoft.azure.management.containerservice.ContainerServiceAgentPool&text=ContainerServiceAgentPool" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, ContainerServiceAgentPool> agentPools()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.agentPools()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.createResourceAsync()
  name: createResourceAsync()
  nameWithType: ContainerServiceImpl.createResourceAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerservice.ContainerService?alt=com.microsoft.azure.management.containerservice.ContainerService&text=ContainerService" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<ContainerService> createResourceAsync()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.createResourceAsync()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.defineAgentPool(String name)
  name: defineAgentPool(String name)
  nameWithType: ContainerServiceImpl.defineAgentPool(String name)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithAgentPool.defineAgentPool(String)
  parameters:
  - description: <p>the name for the agent pool profile </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage representing configuration for the agent pool profile </p>
    type: <xref href="ContainerServiceAgentPoolImpl?alt=ContainerServiceAgentPoolImpl&text=ContainerServiceAgentPoolImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins the definition of a agent pool profile to be attached to the container service.</p>

    <p></p>
  syntax: public ContainerServiceAgentPoolImpl defineAgentPool(String name)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.defineAgentPool(String)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.getInnerAsync()
  name: getInnerAsync()
  nameWithType: ContainerServiceImpl.getInnerAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceInner?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceInner&text=ContainerServiceInner" data-throw-if-not-resolved="False"/>&gt;
  syntax: protected Observable<ContainerServiceInner> getInnerAsync()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.getInnerAsync()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.isDiagnosticsEnabled()
  name: isDiagnosticsEnabled()
  nameWithType: ContainerServiceImpl.isDiagnosticsEnabled()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.isDiagnosticsEnabled()
  returns:
    description: <p>true if diagnostics are enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isDiagnosticsEnabled()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.isDiagnosticsEnabled()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.linuxRootUsername()
  name: linuxRootUsername()
  nameWithType: ContainerServiceImpl.linuxRootUsername()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.linuxRootUsername()
  returns:
    description: <p>the Linux root username </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String linuxRootUsername()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.linuxRootUsername()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterDnsPrefix()
  name: masterDnsPrefix()
  nameWithType: ContainerServiceImpl.masterDnsPrefix()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.masterDnsPrefix()
  returns:
    description: <p>the master DNS prefix which was specified at creation time </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String masterDnsPrefix()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterDnsPrefix()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterFqdn()
  name: masterFqdn()
  nameWithType: ContainerServiceImpl.masterFqdn()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.masterFqdn()
  returns:
    description: <p>the master FQDN </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String masterFqdn()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterFqdn()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterNodeCount()
  name: masterNodeCount()
  nameWithType: ContainerServiceImpl.masterNodeCount()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.masterNodeCount()
  returns:
    description: <p>the master node count </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int masterNodeCount()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterNodeCount()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterOSDiskSizeInGB()
  name: masterOSDiskSizeInGB()
  nameWithType: ContainerServiceImpl.masterOSDiskSizeInGB()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.masterOSDiskSizeInGB()
  returns:
    description: <p>OS disk size in GB set for every machine in the master pool </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int masterOSDiskSizeInGB()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterOSDiskSizeInGB()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterStorageProfile()
  name: masterStorageProfile()
  nameWithType: ContainerServiceImpl.masterStorageProfile()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.masterStorageProfile()
  returns:
    description: <p>the storage kind set for every machine in the master pool </p>
    type: <xref href="com.microsoft.azure.management.containerservice.ContainerServiceStorageProfileTypes?alt=com.microsoft.azure.management.containerservice.ContainerServiceStorageProfileTypes&text=ContainerServiceStorageProfileTypes" data-throw-if-not-resolved="False"/>
  syntax: public ContainerServiceStorageProfileTypes masterStorageProfile()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterStorageProfile()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterSubnetName()
  name: masterSubnetName()
  nameWithType: ContainerServiceImpl.masterSubnetName()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.masterSubnetName()
  returns:
    description: <p>the name of the subnet used by every machine in the master pool </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String masterSubnetName()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.masterSubnetName()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.networkId()
  name: networkId()
  nameWithType: ContainerServiceImpl.networkId()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.networkId()
  returns:
    description: <p>the ID of the virtual network used by every machine in the master and agent pools </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String networkId()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.networkId()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.orchestratorType()
  name: orchestratorType()
  nameWithType: ContainerServiceImpl.orchestratorType()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.orchestratorType()
  returns:
    description: <p>the type of the orchestrator </p>
    type: <xref href="com.microsoft.azure.management.containerservice.ContainerServiceOrchestratorTypes?alt=com.microsoft.azure.management.containerservice.ContainerServiceOrchestratorTypes&text=ContainerServiceOrchestratorTypes" data-throw-if-not-resolved="False"/>
  syntax: public ContainerServiceOrchestratorTypes orchestratorType()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.orchestratorType()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.servicePrincipalClientId()
  name: servicePrincipalClientId()
  nameWithType: ContainerServiceImpl.servicePrincipalClientId()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.servicePrincipalClientId()
  returns:
    description: <p>the service principal client ID </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String servicePrincipalClientId()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.servicePrincipalClientId()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.servicePrincipalSecret()
  name: servicePrincipalSecret()
  nameWithType: ContainerServiceImpl.servicePrincipalSecret()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.servicePrincipalSecret()
  returns:
    description: <p>the service principal secret </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String servicePrincipalSecret()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.servicePrincipalSecret()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.sshKey()
  name: sshKey()
  nameWithType: ContainerServiceImpl.sshKey()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.sshKey()
  returns:
    description: <p>the Linux SSH key </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String sshKey()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.sshKey()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withAgentVirtualMachineCount(int agentCount)
  name: withAgentVirtualMachineCount(int agentCount)
  nameWithType: ContainerServiceImpl.withAgentVirtualMachineCount(int agentCount)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.UpdateStages.WithUpdateAgentPoolCount.withAgentVirtualMachineCount(int)
  parameters:
  - description: <p>the number of agents (virtual machines) to host docker containers. </p>
    name: agentCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the update </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the agent pool virtual machine count.</p>

    <p></p>
  syntax: public ContainerServiceImpl withAgentVirtualMachineCount(int agentCount)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withAgentVirtualMachineCount(int)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withDcosOrchestration()
  name: withDcosOrchestration()
  nameWithType: ContainerServiceImpl.withDcosOrchestration()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Specifies the DCOS orchestration type for the container service. </p>
  syntax: public ContainerServiceImpl withDcosOrchestration()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withDcosOrchestration()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withDiagnostics()
  name: withDiagnostics()
  nameWithType: ContainerServiceImpl.withDiagnostics()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.UpdateStages.WithDiagnostics.withDiagnostics()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Enables diagnostics. </p>
  syntax: public ContainerServiceImpl withDiagnostics()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withDiagnostics()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withKubernetesOrchestration()
  name: withKubernetesOrchestration()
  nameWithType: ContainerServiceImpl.withKubernetesOrchestration()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Specifies the Kubernetes orchestration type for the container service. </p>
  syntax: public ContainerServiceImpl withKubernetesOrchestration()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withKubernetesOrchestration()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withLinux()
  name: withLinux()
  nameWithType: ContainerServiceImpl.withLinux()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux.withLinux()
  returns:
    description: <p>the stage representing configuration of Linux specific settings </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Begins the definition to specify Linux settings. </p>
  syntax: public ContainerServiceImpl withLinux()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withLinux()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterDnsPrefix(String dnsPrefix)
  name: withMasterDnsPrefix(String dnsPrefix)
  nameWithType: ContainerServiceImpl.withMasterDnsPrefix(String dnsPrefix)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithMasterDnsPrefix.withMasterDnsPrefix(String)
  parameters:
  - description: <p>the DNS prefix to be used to create the FQDN for the master pool </p>
    name: dnsPrefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the DNS prefix to be used to create the FQDN for the master pool.</p>

    <p></p>
  syntax: public ContainerServiceImpl withMasterDnsPrefix(String dnsPrefix)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterDnsPrefix(String)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterNodeCount(ContainerServiceMasterProfileCount profileCount)
  name: withMasterNodeCount(ContainerServiceMasterProfileCount profileCount)
  nameWithType: ContainerServiceImpl.withMasterNodeCount(ContainerServiceMasterProfileCount profileCount)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithMasterNodeCount.withMasterNodeCount(ContainerServiceMasterProfileCount)
  parameters:
  - description: <p>master profile count (1, 3, 5) </p>
    name: count
    type: <xref href="com.microsoft.azure.management.containerservice.ContainerServiceMasterProfileCount?alt=com.microsoft.azure.management.containerservice.ContainerServiceMasterProfileCount&text=ContainerServiceMasterProfileCount" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Specifies the master node count. </p>
  syntax: public ContainerServiceImpl withMasterNodeCount(ContainerServiceMasterProfileCount profileCount)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterNodeCount(ContainerServiceMasterProfileCount)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterOSDiskSizeInGB(int osDiskSizeInGB)
  name: withMasterOSDiskSizeInGB(int osDiskSizeInGB)
  nameWithType: ContainerServiceImpl.withMasterOSDiskSizeInGB(int osDiskSizeInGB)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithMasterOSDiskSize.withMasterOSDiskSizeInGB(int)
  parameters:
  - description: <p>OS Disk Size in GB to be used for every machine in the master pool </p>
    name: osDiskSizeInGB
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>OS Disk Size in GB to be used for every machine in the master pool.</p>

    <p>If you specify 0, the default osDisk size will be used according to the vmSize specified. </p>
  syntax: public ContainerServiceImpl withMasterOSDiskSizeInGB(int osDiskSizeInGB)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterOSDiskSizeInGB(int)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterStorageProfile(ContainerServiceStorageProfileTypes storageProfile)
  name: withMasterStorageProfile(ContainerServiceStorageProfileTypes storageProfile)
  nameWithType: ContainerServiceImpl.withMasterStorageProfile(ContainerServiceStorageProfileTypes storageProfile)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithMasterStorageProfile.withMasterStorageProfile(ContainerServiceStorageProfileTypes)
  parameters:
  - description: <p>the storage kind to be used for every machine in the master pool </p>
    name: storageProfile
    type: <xref href="com.microsoft.azure.management.containerservice.ContainerServiceStorageProfileTypes?alt=com.microsoft.azure.management.containerservice.ContainerServiceStorageProfileTypes&text=ContainerServiceStorageProfileTypes" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the storage kind to be used for every machine in master pool.</p>

    <p></p>
  syntax: public ContainerServiceImpl withMasterStorageProfile(ContainerServiceStorageProfileTypes storageProfile)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterStorageProfile(ContainerServiceStorageProfileTypes)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterVMSize(ContainerServiceVMSizeTypes vmSize)
  name: withMasterVMSize(ContainerServiceVMSizeTypes vmSize)
  nameWithType: ContainerServiceImpl.withMasterVMSize(ContainerServiceVMSizeTypes vmSize)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithMasterVMSize.withMasterVMSize(ContainerServiceVMSizeTypes)
  parameters:
  - description: <p>the size of the VM </p>
    name: vmSize
    type: <xref href="com.microsoft.azure.management.containerservice.ContainerServiceVMSizeTypes?alt=com.microsoft.azure.management.containerservice.ContainerServiceVMSizeTypes&text=ContainerServiceVMSizeTypes" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Specifies the size of the master VMs, default set to "Standard_D2_v2". </p>
  syntax: public ContainerServiceImpl withMasterVMSize(ContainerServiceVMSizeTypes vmSize)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withMasterVMSize(ContainerServiceVMSizeTypes)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withoutDiagnostics()
  name: withoutDiagnostics()
  nameWithType: ContainerServiceImpl.withoutDiagnostics()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.UpdateStages.WithDiagnostics.withoutDiagnostics()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Disables diagnostics. </p>
  syntax: public ContainerServiceImpl withoutDiagnostics()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withoutDiagnostics()
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withRootUsername(String rootUserName)
  name: withRootUsername(String rootUserName)
  nameWithType: ContainerServiceImpl.withRootUsername(String rootUserName)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinuxRootUsername.withRootUsername(String)
  parameters:
  - description: <p>the root username </p>
    name: rootUserName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Begins the definition to specify Linux root username. </p>
  syntax: public ContainerServiceImpl withRootUsername(String rootUserName)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withRootUsername(String)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withServicePrincipal(String clientId, String secret)
  name: withServicePrincipal(String clientId, String secret)
  nameWithType: ContainerServiceImpl.withServicePrincipal(String clientId, String secret)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile.withServicePrincipal(String,String)
  parameters:
  - description: <p>the ID for the service principal </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the secret password associated with the service principal </p>
    name: secret
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Properties for cluster service principals. </p>
  syntax: public ContainerServiceImpl withServicePrincipal(String clientId, String secret)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withServicePrincipal(String,String)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSshKey(String sshKeyData)
  name: withSshKey(String sshKeyData)
  nameWithType: ContainerServiceImpl.withSshKey(String sshKeyData)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinuxSshKey.withSshKey(String)
  parameters:
  - description: <p>the SSH key data </p>
    name: sshKeyData
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Begins the definition to specify Linux ssh key. </p>
  syntax: public ContainerServiceImpl withSshKey(String sshKeyData)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSshKey(String)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSubnet(String networkId, String subnetName)
  name: withSubnet(String networkId, String subnetName)
  nameWithType: ContainerServiceImpl.withSubnet(String networkId, String subnetName)
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithSubnet.withSubnet(String,String)
  parameters:
  - description: <p>the network ID to be used by the machines </p>
    name: networkId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the subnet </p>
    name: subnetName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the virtual network and subnet for the virtual machines in the master and agent pools.</p>

    <p></p>
  syntax: public ContainerServiceImpl withSubnet(String networkId, String subnetName)
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSubnet(String,String)
- fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSwarmOrchestration()
  name: withSwarmOrchestration()
  nameWithType: ContainerServiceImpl.withSwarmOrchestration()
  overridden: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl?alt=com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl&text=ContainerServiceImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Specifies the Swarm orchestration type for the container service. </p>
  syntax: public ContainerServiceImpl withSwarmOrchestration()
  uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSwarmOrchestration()
nameWithType: ContainerServiceImpl
syntax: public class ContainerServiceImpl implements ContainerService,ContainerService.Definition,ContainerService.Update
type: class
uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
name: ContainerServiceImpl
package: com.microsoft.azure.management.containerservice.implementation
summary: <p>The implementation for ContainerService and its create and update interfaces. </p>
metadata: {}
