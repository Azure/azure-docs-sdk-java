### YamlMime:JavaMember
nameWithType: Operation.acknowledge
type: method
members:
- fullName: system.fabric.Operation.acknowledge()
  name: acknowledge()
  nameWithType: Operation.acknowledge()
  summary: >-
    <p>Acknowledges that this operation has been successfully applied at the Secondary replica. </p>

    <p>

      <b>Remarks:</b>Services should call this method when they have obtained an <xref uid="" data-throw-if-not-resolved="false">system.fabric.Operation</xref> from the replicator and successfully applied it to their local store. For persisted services, calling this method is mandatory because the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false">system.fabric.FabricReplicator</xref> does not release additional objects that implement <xref uid="" data-throw-if-not-resolved="false">system.fabric.Operation</xref>. For volatile services, the replicator implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value <xref uid="system.fabric.ReplicatorSettings.isRequireServiceAck()" data-throw-if-not-resolved="false">system.fabric.ReplicatorSettings#isRequireServiceAck()</xref> to true. An operation must be acknowledged by a quorum of replicas before the Primary replica receives the <xref uid="system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)</xref> operation complete responses. </p>
  syntax: public void acknowledge()
  uid: system.fabric.Operation.acknowledge()
uid: system.fabric.Operation.acknowledge*
fullName: system.fabric.Operation.acknowledge()
name: acknowledge()
package: system.fabric
metadata: {}
