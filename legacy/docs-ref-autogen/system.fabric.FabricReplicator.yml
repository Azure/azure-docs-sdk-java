### YamlMime:JavaType
constructors:
- fullName: system.fabric.FabricReplicator.FabricReplicator(long replicator)
  name: FabricReplicator(long replicator)
  nameWithType: FabricReplicator.FabricReplicator(long replicator)
  parameters:
  - description: <p>pointer to native replicator. </p>
    name: replicator
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Creates instance of <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="FabricReplicator"></xref>. </p>
  syntax: protected FabricReplicator(long replicator)
  uid: system.fabric.FabricReplicator.FabricReplicator(long)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="system.fabric.PrimaryReplicator?alt=system.fabric.PrimaryReplicator&text=PrimaryReplicator" data-throw-if-not-resolved="False"/>
- <xref href="system.fabric.Replicator?alt=system.fabric.Replicator&text=Replicator" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.FabricReplicator.abort()
  name: abort()
  nameWithType: FabricReplicator.abort()
  overridden: system.fabric.Replicator.abort()
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public void abort()
  uid: system.fabric.FabricReplicator.abort()
- fullName: system.fabric.FabricReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  name: buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  overridden: system.fabric.PrimaryReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: replicaInfo
    type: <xref href="system.fabric.ReplicaInformation?alt=system.fabric.ReplicaInformation&text=ReplicaInformation" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public CompletableFuture buildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.buildReplicaAsync(ReplicaInformation,CancellationToken)
- fullName: system.fabric.FabricReplicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  name: changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  overridden: system.fabric.Replicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: epoch
    type: <xref href="system.fabric.Epoch?alt=system.fabric.Epoch&text=Epoch" data-throw-if-not-resolved="False"/>
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: role
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture changeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.changeRoleAsync(Epoch,ReplicaRole,CancellationToken)
- fullName: system.fabric.FabricReplicator.closeAsync(CancellationToken cancellationToken)
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.closeAsync(CancellationToken cancellationToken)
  overridden: system.fabric.Replicator.closeAsync(CancellationToken)
  parameters:
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture closeAsync(CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.closeAsync(CancellationToken)
- fullName: system.fabric.FabricReplicator.getCatchUpCapability()
  name: getCatchUpCapability()
  nameWithType: FabricReplicator.getCatchUpCapability()
  overridden: system.fabric.Replicator.getCatchUpCapability()
  returns:
    description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public long getCatchUpCapability()
  uid: system.fabric.FabricReplicator.getCatchUpCapability()
- fullName: system.fabric.FabricReplicator.getCurrentProgress()
  name: getCurrentProgress()
  nameWithType: FabricReplicator.getCurrentProgress()
  overridden: system.fabric.Replicator.getCurrentProgress()
  returns:
    description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public long getCurrentProgress()
  uid: system.fabric.FabricReplicator.getCurrentProgress()
- fullName: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.onDataLossAsync(CancellationToken cancellationToken)
  overridden: system.fabric.PrimaryReplicator.onDataLossAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A CompletableFuture that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.onDataLossAsync(CancellationToken)
- fullName: system.fabric.FabricReplicator.openAsync(CancellationToken cancellationToken)
  name: openAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.openAsync(CancellationToken cancellationToken)
  overridden: system.fabric.Replicator.openAsync(CancellationToken)
  parameters:
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CString%3E?alt=CompletableFuture%3CString%3E&text=CompletableFuture%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture<String> openAsync(CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.openAsync(CancellationToken)
- fullName: system.fabric.FabricReplicator.removeReplica(long replicaId)
  name: removeReplica(long replicaId)
  nameWithType: FabricReplicator.removeReplica(long replicaId)
  overridden: system.fabric.PrimaryReplicator.removeReplica(long)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
    name: replicaId
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>

    <p>

      <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public void removeReplica(long replicaId)
  uid: system.fabric.FabricReplicator.removeReplica(long)
- fullName: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  name: updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  nameWithType: FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  overridden: system.fabric.PrimaryReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
  parameters:
  - description: <p>For Internal Use Only. </p>
    name: currentConfiguration
    type: <xref href="system.fabric.ReplicaSetConfiguration?alt=system.fabric.ReplicaSetConfiguration&text=ReplicaSetConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>For Internal Use Only. </p>
    name: previousConfiguration
    type: <xref href="system.fabric.ReplicaSetConfiguration?alt=system.fabric.ReplicaSetConfiguration&text=ReplicaSetConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>
  syntax: public void updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
  uid: system.fabric.FabricReplicator.updateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration,ReplicaSetConfiguration)
- fullName: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  name: updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  nameWithType: FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  overridden: system.fabric.PrimaryReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>
    name: currentConfiguration
    type: <xref href="system.fabric.ReplicaSetConfiguration?alt=system.fabric.ReplicaSetConfiguration&text=ReplicaSetConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>

    <p></p>

    <p>

      <b>Remarks:</b> This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public void updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
  uid: system.fabric.FabricReplicator.updateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
- fullName: system.fabric.FabricReplicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  name: updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  overridden: system.fabric.Replicator.updateEpochAsync(Epoch,CancellationToken)
  parameters:
  - description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
    name: epoch
    type: <xref href="system.fabric.Epoch?alt=system.fabric.Epoch&text=Epoch" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture updateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.updateEpochAsync(Epoch,CancellationToken)
- fullName: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  name: waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  nameWithType: FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  overridden: system.fabric.PrimaryReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
  parameters:
  - description: <p>For Internal Use Only. </p>
    name: quorumMode
    type: <xref href="system.fabric.ReplicaSetQuorumMode?alt=system.fabric.ReplicaSetQuorumMode&text=ReplicaSetQuorumMode" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents asynchrnous completion. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>

    <p>For Internal Use Only. </p>

    <p></p>
  syntax: public CompletableFuture waitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.waitForCatchUpQuorumAsync(ReplicaSetQuorumMode,CancellationToken)
nameWithType: FabricReplicator
syntax: public class FabricReplicator implements Replicator
type: class
uid: system.fabric.FabricReplicator
fullName: system.fabric.FabricReplicator
name: FabricReplicator
package: system.fabric
summary: >-
  <p>Replicates state for high availability and reliability. </p>

  <p>

    <b>Remarks:</b>Provides the default implementation of the <xref uid="system.fabric.StateReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator"></xref>, <xref uid="system.fabric.Replicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Replicator"></xref>, and <xref uid="system.fabric.PrimaryReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.PrimaryReplicator"></xref> interfaces, which user services can use, along with their implementation of the <xref uid="system.fabric.StateProvider" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider"></xref> interface. An instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> class is obtained via the <xref uid="system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServicePartition#createReplicator( system.fabric.StateProvider, system.fabric.ReplicatorSettings)"></xref> method, which can be cast to <xref uid="system.fabric.StateReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator"></xref> for use. </p>
metadata: {}
