### YamlMime:JavaType
constructors:
- fullName: system.fabric.ReplicatorSettings.ReplicatorSettings()
  name: ReplicatorSettings()
  nameWithType: ReplicatorSettings.ReplicatorSettings()
  syntax: public ReplicatorSettings()
  uid: system.fabric.ReplicatorSettings.ReplicatorSettings()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval()
  name: getBatchAcknowledgementInterval()
  nameWithType: ReplicatorSettings.getBatchAcknowledgementInterval()
  returns:
    description: <p>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</p>

    <p>

      <b>Remarks:</b>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message. Increasing the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings#batchAcknowledgementInterval"></xref> value decreases latency of individual replication operations but increases throughput of the replicator. Default value is 0.05 Seconds (50 milliseconds) </p>
  syntax: public Duration getBatchAcknowledgementInterval()
  uid: system.fabric.ReplicatorSettings.getBatchAcknowledgementInterval()
- fullName: system.fabric.ReplicatorSettings.getInitialCopyQueueSize()
  name: getInitialCopyQueueSize()
  nameWithType: ReplicatorSettings.getInitialCopyQueueSize()
  returns:
    description: <p>The initial size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the initial size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service.</p>

    <p>

      <b>Remarks:</b>The default value is 64. Note that values for this parameter must be a power of 2. </p>
  syntax: public long getInitialCopyQueueSize()
  uid: system.fabric.ReplicatorSettings.getInitialCopyQueueSize()
- fullName: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  name: getInitialPrimaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  returns:
    description: <p>The initial size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref></p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the initial size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s.The unit here is the number of operations in the queue.</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary The default value is 64. Note that values for this parameter must be a power of 2. </p>
  syntax: public long getInitialPrimaryReplicationQueueSize()
  uid: system.fabric.ReplicatorSettings.getInitialPrimaryReplicationQueueSize()
- fullName: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize()
  name: getInitialReplicationQueueSize()
  nameWithType: ReplicatorSettings.getInitialReplicationQueueSize()
  returns:
    description: <p>The initial size of the replication queue size. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the initial size of the replication queue size.</p>

    <p></p>
  syntax: public long getInitialReplicationQueueSize()
  uid: system.fabric.ReplicatorSettings.getInitialReplicationQueueSize()
- fullName: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  name: getInitialSecondaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  returns:
    description: <p>The initial size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the initial size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle The default value is 64. Note that values for this parameter must be a power of 2. </p>
  syntax: public long getInitialSecondaryReplicationQueueSize()
  uid: system.fabric.ReplicatorSettings.getInitialSecondaryReplicationQueueSize()
- fullName: system.fabric.ReplicatorSettings.getMaxCopyQueueSize()
  name: getMaxCopyQueueSize()
  nameWithType: ReplicatorSettings.getMaxCopyQueueSize()
  returns:
    description: <p>The maximum size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service.</p>

    <p>

      <b>Remarks:</b>If this queue size is reached at the secondary, operations will be buffered in the Primaryâ€™s copy queue. If that queue also fills, then the Primary will begin seeing <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricErrorCode#ReplicationQueueFull"></xref> exceptions. The default value is 1024 </p>
  syntax: public long getMaxCopyQueueSize()
  uid: system.fabric.ReplicatorSettings.getMaxCopyQueueSize()
- fullName: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  name: getMaxPrimaryReplicationQueueMemorySize()
  nameWithType: ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  returns:
    description: <p>. Returns the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s The unit here is the virtual memory consumption of the queue .Returns long. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit </p>
  syntax: public long getMaxPrimaryReplicationQueueMemorySize()
  uid: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
- fullName: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  name: getMaxPrimaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  returns:
    description: <p>The maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the number of operations in the queue. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>If this queue size is reached, then the Primary will begin seeing <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricErrorCode#ReplicationQueueFull"></xref> exceptions. The default value is 1024 Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Primary </p>
  syntax: public long getMaxPrimaryReplicationQueueSize()
  uid: system.fabric.ReplicatorSettings.getMaxPrimaryReplicationQueueSize()
- fullName: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize()
  name: getMaxReplicationMessageSize()
  nameWithType: ReplicatorSettings.getMaxReplicationMessageSize()
  returns:
    description: <p>The maximum size of a message that can be transmitted via the replicator. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages and copy context messages. The unit of representation is bytes.</p>

    <p>

      <b>Remarks:</b>The default value is 50MB </p>
  syntax: public Long getMaxReplicationMessageSize()
  uid: system.fabric.ReplicatorSettings.getMaxReplicationMessageSize()
- fullName: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize()
  name: getMaxReplicationQueueMemorySize()
  nameWithType: ReplicatorSettings.getMaxReplicationQueueMemorySize()
  returns:
    description: <p>The maximum size for the replication queue memory. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum size for the replication queue memory.</p>

    <p>

      <b>Remarks:</b>The default value is 0. This implies there is no memory limit </p>
  syntax: public long getMaxReplicationQueueMemorySize()
  uid: system.fabric.ReplicatorSettings.getMaxReplicationQueueMemorySize()
- fullName: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize()
  name: getMaxReplicationQueueSize()
  nameWithType: ReplicatorSettings.getMaxReplicationQueueSize()
  returns:
    description: <p>the maximum size for the replication queue. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum size for the replication queue.</p>

    <p></p>
  syntax: public long getMaxReplicationQueueSize()
  uid: system.fabric.ReplicatorSettings.getMaxReplicationQueueSize()
- fullName: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  name: getMaxSecondaryReplicationQueueMemorySize()
  nameWithType: ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  returns:
    description: <p>Returns the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the virtual memory consumption of the queue. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s.</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit </p>
  syntax: public long getMaxSecondaryReplicationQueueMemorySize()
  uid: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
- fullName: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  name: getMaxSecondaryReplicationQueueSize()
  nameWithType: ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  returns:
    description: <p>The maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>If this queue size is reached, operations will be buffered in the Primaryâ€™s replication queue. If that queue also fills, then the Primary will begin seeing <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricErrorCode#ReplicationQueueFull"></xref> exceptions. The default value is 2048.Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Secondary/Idle </p>
  syntax: public long getMaxSecondaryReplicationQueueSize()
  uid: system.fabric.ReplicatorSettings.getMaxSecondaryReplicationQueueSize()
- fullName: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
  name: getPrimaryWaitForPendingQuorumsTimeout()
  nameWithType: ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
  returns:
    description: <p>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is a request for the primary replicator to process a reconfiguration <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref>. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before processing a reconfiguration request, that could potentially result in â€˜cancellingâ€™ the pending replication operations.</p>

    <p>

      <b>Remarks:</b>The default value is 0. This implies that reconfigurations arenâ€™t waited upon for receiving quorum on the pending replication operations. This helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations, implying longer durations to fail-over a primary. </p>
  syntax: public Duration getPrimaryWaitForPendingQuorumsTimeout()
  uid: system.fabric.ReplicatorSettings.getPrimaryWaitForPendingQuorumsTimeout()
- fullName: system.fabric.ReplicatorSettings.getReplicatorAddress()
  name: getReplicatorAddress()
  nameWithType: ReplicatorSettings.getReplicatorAddress()
  returns:
    description: <p>The address that this replicator will use when communicating with other Replicators. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Configures the address that this replicator will use when communicating with other Replicators.</p>

    <p>

      <b>Remarks:</b>String is formatted as "hostname:port", where hostname can be FQDN or IP address. The default value is localhost:0 </p>
  syntax: public String getReplicatorAddress()
  uid: system.fabric.ReplicatorSettings.getReplicatorAddress()
- fullName: system.fabric.ReplicatorSettings.getRetryInterval()
  name: getRetryInterval()
  nameWithType: ReplicatorSettings.getRetryInterval()
  returns:
    description: <p>The time needed the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how long the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message.</p>

    <p>

      <b>Remarks:</b>Receiving a message does not necessarily that the message has been processed. If this timer is exceeded, then the message is retransmitted. The default value is 5 seconds. </p>
  syntax: public Duration getRetryInterval()
  uid: system.fabric.ReplicatorSettings.getRetryInterval()
- fullName: system.fabric.ReplicatorSettings.getSecurityCredentials()
  name: getSecurityCredentials()
  nameWithType: ReplicatorSettings.getSecurityCredentials()
  returns:
    description: <p>The service to define security credentials for securing the traffic between replicators. </p>
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Allows the service to define security credentials for securing the traffic between replicators.</p>

    <p></p>
  syntax: public SecurityCredentials getSecurityCredentials()
  uid: system.fabric.ReplicatorSettings.getSecurityCredentials()
- fullName: system.fabric.ReplicatorSettings.isRequireServiceAck()
  name: isRequireServiceAck()
  nameWithType: ReplicatorSettings.isRequireServiceAck()
  returns:
    description: <p>true if the optimistic acknowledgment of operations in non-persistent services;otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls <xref uid="system.fabric.Operation.acknowledge()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation#acknowledge()"></xref> before it pumps the next operation.</p>

    <p>

      <b>Remarks:</b>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment of the operations by the Replicator. This setting has no effect for persistent services. The default value is false. </p>
  syntax: public boolean isRequireServiceAck()
  uid: system.fabric.ReplicatorSettings.isRequireServiceAck()
- fullName: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
  name: isSecondaryClearAcknowledgedOperations()
  nameWithType: ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
  returns:
    description: <p>true if the secondary replicator releases the operation as soon as it is acknowledged by the user service; otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With this flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</p>

    <p>

      <b>Remarks:</b>The default value is false </p>
  syntax: public boolean isSecondaryClearAcknowledgedOperations()
  uid: system.fabric.ReplicatorSettings.isSecondaryClearAcknowledgedOperations()
- fullName: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
  name: isUseStreamFaultsAndEndOfStreamOperationAck()
  nameWithType: ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
  returns:
    description: <p>true if the replicator uses stream faults; otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies whether the replicator uses stream faults.</p>

    <p>

      <b>Remarks:</b>The default value is false </p>
  syntax: public boolean isUseStreamFaultsAndEndOfStreamOperationAck()
  uid: system.fabric.ReplicatorSettings.isUseStreamFaultsAndEndOfStreamOperationAck()
- fullName: system.fabric.ReplicatorSettings.loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  name: loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  nameWithType: ReplicatorSettings.loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  parameters:
  - name: codePackageActivationContext
    type: <xref href="system.fabric.FabricCodePackageActivationContext?alt=system.fabric.FabricCodePackageActivationContext&text=FabricCodePackageActivationContext" data-throw-if-not-resolved="False"/>
  - name: configPackageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="system.fabric.ReplicatorSettings?alt=system.fabric.ReplicatorSettings&text=ReplicatorSettings" data-throw-if-not-resolved="False"/>
  syntax: public static ReplicatorSettings loadFrom(FabricCodePackageActivationContext codePackageActivationContext, String configPackageName, String sectionName)
  uid: system.fabric.ReplicatorSettings.loadFrom(FabricCodePackageActivationContext,String,String)
- fullName: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  name: setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  nameWithType: ReplicatorSettings.setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  parameters:
  - description: <p>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </p>
    name: batchAcknowledgementInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</p>

    <p>

      <b>Remarks:</b>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message. Increasing the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings#batchAcknowledgementInterval"></xref> value decreases latency of individual replication operations but increases throughput of the replicator. Default value is 0.05 Seconds (50 milliseconds) </p>
  syntax: public void setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  uid: system.fabric.ReplicatorSettings.setBatchAcknowledgementInterval(Duration)
- fullName: system.fabric.ReplicatorSettings.setInitialCopyQueueSize(long initialCopyQueueSize)
  name: setInitialCopyQueueSize(long initialCopyQueueSize)
  nameWithType: ReplicatorSettings.setInitialCopyQueueSize(long initialCopyQueueSize)
  parameters:
  - description: <p>The initial size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
    name: initialCopyQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets or sets the initial size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service.</p>

    <p>

      <b>Remarks:</b>The default value is 64. Note that values for this parameter must be a power of 2. </p>
  syntax: public void setInitialCopyQueueSize(long initialCopyQueueSize)
  uid: system.fabric.ReplicatorSettings.setInitialCopyQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  name: setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  parameters:
  - description: <p>The initial size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref></p>
    name: initialPrimaryReplicationQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the initial size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s.The unit here is the number of operations in the queue.</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary The default value is 64. Note that values for this parameter must be a power of 2. </p>
  syntax: public void setInitialPrimaryReplicationQueueSize(long initialPrimaryReplicationQueueSize)
  uid: system.fabric.ReplicatorSettings.setInitialPrimaryReplicationQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize(long initialReplicationQueueSize)
  name: setInitialReplicationQueueSize(long initialReplicationQueueSize)
  nameWithType: ReplicatorSettings.setInitialReplicationQueueSize(long initialReplicationQueueSize)
  parameters:
  - description: <p>The initial size of the replication queue size. </p>
    name: initialReplicationQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the initial size of the replication queue size.</p>

    <p></p>
  syntax: public void setInitialReplicationQueueSize(long initialReplicationQueueSize)
  uid: system.fabric.ReplicatorSettings.setInitialReplicationQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  name: setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  parameters:
  - description: <p>The initial size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
    name: initialSecondaryReplicationQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the initial size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle The default value is 64. Note that values for this parameter must be a power of 2. </p>
  syntax: public void setInitialSecondaryReplicationQueueSize(long initialSecondaryReplicationQueueSize)
  uid: system.fabric.ReplicatorSettings.setInitialSecondaryReplicationQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxCopyQueueSize(long maxCopyQueueSize)
  name: setMaxCopyQueueSize(long maxCopyQueueSize)
  nameWithType: ReplicatorSettings.setMaxCopyQueueSize(long maxCopyQueueSize)
  parameters:
  - description: <p>The maximum size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. </p>
    name: maxCopyQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum size of the copy operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains copy <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service.</p>

    <p>

      <b>Remarks:</b>If this queue size is reached at the secondary, operations will be buffered in the Primaryâ€™s copy queue. If that queue also fills, then the Primary will begin seeing <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricErrorCode#ReplicationQueueFull"></xref> exceptions. The default value is 1024 </p>
  syntax: public void setMaxCopyQueueSize(long maxCopyQueueSize)
  uid: system.fabric.ReplicatorSettings.setMaxCopyQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  name: setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  nameWithType: ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  parameters:
  - description: <p>the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s The unit here is the virtual memory consumption of the queue .Returns long. </p>
    name: maxPrimaryReplicationQueueMemorySize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit </p>
  syntax: public void setMaxPrimaryReplicationQueueMemorySize(long maxPrimaryReplicationQueueMemorySize)
  uid: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  name: setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  parameters:
  - description: <p>The maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the number of operations in the queue. </p>
    name: maxPrimaryReplicationQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the primary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>If this queue size is reached, then the Primary will begin seeing <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricErrorCode#ReplicationQueueFull"></xref> exceptions. The default value is 1024 Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Primary </p>
  syntax: public void setMaxPrimaryReplicationQueueSize(long maxPrimaryReplicationQueueSize)
  uid: system.fabric.ReplicatorSettings.setMaxPrimaryReplicationQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize(long maxReplicationMessageSize)
  name: setMaxReplicationMessageSize(long maxReplicationMessageSize)
  nameWithType: ReplicatorSettings.setMaxReplicationMessageSize(long maxReplicationMessageSize)
  parameters:
  - description: <p>The maximum size of a message that can be transmitted via the replicator. </p>
    name: maxReplicationMessageSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages and copy context messages. The unit of representation is bytes.</p>

    <p>

      <b>Remarks:</b>The default value is 50MB </p>
  syntax: public void setMaxReplicationMessageSize(long maxReplicationMessageSize)
  uid: system.fabric.ReplicatorSettings.setMaxReplicationMessageSize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  name: setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  nameWithType: ReplicatorSettings.setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  parameters:
  - description: <p>The maximum size for the replication queue memory. </p>
    name: maxReplicationQueueMemorySize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum size for the replication queue memory.</p>

    <p>

      <b>Remarks:</b>The default value is 0. This implies there is no memory limit </p>
  syntax: public void setMaxReplicationQueueMemorySize(long maxReplicationQueueMemorySize)
  uid: system.fabric.ReplicatorSettings.setMaxReplicationQueueMemorySize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize(long maxReplicationQueueSize)
  name: setMaxReplicationQueueSize(long maxReplicationQueueSize)
  nameWithType: ReplicatorSettings.setMaxReplicationQueueSize(long maxReplicationQueueSize)
  parameters:
  - description: <p>the maximum size for the replication queue. </p>
    name: maxReplicationQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum size for the replication queue.</p>

    <p></p>
  syntax: public void setMaxReplicationQueueSize(long maxReplicationQueueSize)
  uid: system.fabric.ReplicatorSettings.setMaxReplicationQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  name: setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  nameWithType: ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  parameters:
  - description: <p>Returns the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s. The unit here is the virtual memory consumption of the queue. </p>
    name: maxSecondaryReplicationQueueMemorySize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s.</p>

    <p>

      <b>Remarks:</b>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit </p>
  syntax: public void setMaxSecondaryReplicationQueueMemorySize(long maxSecondaryReplicationQueueMemorySize)
  uid: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(long)
- fullName: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  name: setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  nameWithType: ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  parameters:
  - description: <p>The maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>
    name: maxSecondaryReplicationQueueSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the maximum size of the secondary replication operation queue inside <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref>, which contains replication <xref uid="system.fabric.Operation" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>s</p>

    <p>

      <b>Remarks:</b>If this queue size is reached, operations will be buffered in the Primaryâ€™s replication queue. If that queue also fills, then the Primary will begin seeing <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricErrorCode#ReplicationQueueFull"></xref> exceptions. The default value is 2048.Note that values for this parameter must be a power of 2. This setting is specific to the Replicator when the role of the service is Secondary/Idle </p>
  syntax: public void setMaxSecondaryReplicationQueueSize(long maxSecondaryReplicationQueueSize)
  uid: system.fabric.ReplicatorSettings.setMaxSecondaryReplicationQueueSize(long)
- fullName: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  name: setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  nameWithType: ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  parameters:
  - description: <p>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is a request for the primary replicator to process a reconfiguration <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref>. </p>
    name: primaryWaitForPendingQuorumsTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before processing a reconfiguration request, that could potentially result in â€˜cancellingâ€™ the pending replication operations.</p>

    <p>

      <b>Remarks:</b>The default value is 0. This implies that reconfigurations arenâ€™t waited upon for receiving quorum on the pending replication operations. This helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations, implying longer durations to fail-over a primary. </p>
  syntax: public void setPrimaryWaitForPendingQuorumsTimeout(Duration primaryWaitForPendingQuorumsTimeout)
  uid: system.fabric.ReplicatorSettings.setPrimaryWaitForPendingQuorumsTimeout(Duration)
- fullName: system.fabric.ReplicatorSettings.setReplicatorAddress(String replicatorAddress)
  name: setReplicatorAddress(String replicatorAddress)
  nameWithType: ReplicatorSettings.setReplicatorAddress(String replicatorAddress)
  parameters:
  - description: <p>The address that this replicator will use when communicating with other Replicators. </p>
    name: replicatorAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Configures the address that this replicator will use when communicating with other Replicators.</p>

    <p>

      <b>Remarks:</b>String is formatted as "hostname:port", where hostname can be FQDN or IP address. The default value is localhost:0 </p>
  syntax: public void setReplicatorAddress(String replicatorAddress)
  uid: system.fabric.ReplicatorSettings.setReplicatorAddress(String)
- fullName: system.fabric.ReplicatorSettings.setRequireServiceAck(boolean requireServiceAck)
  name: setRequireServiceAck(boolean requireServiceAck)
  nameWithType: ReplicatorSettings.setRequireServiceAck(boolean requireServiceAck)
  parameters:
  - description: <p>true if the optimistic acknowledgment of operations in non-persistent services;otherwise, false. </p>
    name: requireServiceAck
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls <xref uid="system.fabric.Operation.acknowledge()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation#acknowledge()"></xref> before it pumps the next operation.</p>

    <p>

      <b>Remarks:</b>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment of the operations by the Replicator. This setting has no effect for persistent services. The default value is false. </p>
  syntax: public void setRequireServiceAck(boolean requireServiceAck)
  uid: system.fabric.ReplicatorSettings.setRequireServiceAck(boolean)
- fullName: system.fabric.ReplicatorSettings.setRetryInterval(Duration retryInterval)
  name: setRetryInterval(Duration retryInterval)
  nameWithType: ReplicatorSettings.setRetryInterval(Duration retryInterval)
  parameters:
  - description: <p>The time needed the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message. </p>
    name: retryInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how long the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message.</p>

    <p>

      <b>Remarks:</b>Receiving a message does not necessarily that the message has been processed. If this timer is exceeded, then the message is retransmitted. The default value is 5 seconds. </p>
  syntax: public void setRetryInterval(Duration retryInterval)
  uid: system.fabric.ReplicatorSettings.setRetryInterval(Duration)
- fullName: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  name: setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  nameWithType: ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  parameters:
  - description: <p>true if the secondary replicator releases the operation as soon as it is acknowledged by the user service; otherwise, false. </p>
    name: secondaryClearAcknowledgedOperations
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With this flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</p>

    <p>

      <b>Remarks:</b>The default value is false </p>
  syntax: public void setSecondaryClearAcknowledgedOperations(boolean secondaryClearAcknowledgedOperations)
  uid: system.fabric.ReplicatorSettings.setSecondaryClearAcknowledgedOperations(boolean)
- fullName: system.fabric.ReplicatorSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  name: setSecurityCredentials(SecurityCredentials securityCredentials)
  nameWithType: ReplicatorSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  parameters:
  - description: <p>The service to define security credentials for securing the traffic between replicators. </p>
    name: securityCredentials
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Allows the service to define security credentials for securing the traffic between replicators.</p>

    <p></p>
  syntax: public void setSecurityCredentials(SecurityCredentials securityCredentials)
  uid: system.fabric.ReplicatorSettings.setSecurityCredentials(SecurityCredentials)
- fullName: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  name: setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  nameWithType: ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  parameters:
  - description: <p>true if the replicator uses stream faults; otherwise, false. </p>
    name: useStreamFaultsAndEndOfStreamOperationAck
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies whether the replicator uses stream faults.</p>

    <p>

      <b>Remarks:</b>The default value is false </p>
  syntax: public void setUseStreamFaultsAndEndOfStreamOperationAck(boolean useStreamFaultsAndEndOfStreamOperationAck)
  uid: system.fabric.ReplicatorSettings.setUseStreamFaultsAndEndOfStreamOperationAck(boolean)
- fullName: system.fabric.ReplicatorSettings.toNative(PinCollection pinCollection)
  name: toNative(PinCollection pinCollection)
  nameWithType: ReplicatorSettings.toNative(PinCollection pinCollection)
  parameters:
  - name: pinCollection
    type: <xref href="PinCollection?alt=PinCollection&text=PinCollection" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long toNative(PinCollection pinCollection)
  uid: system.fabric.ReplicatorSettings.toNative(PinCollection)
- fullName: system.fabric.ReplicatorSettings.toString()
  name: toString()
  nameWithType: ReplicatorSettings.toString()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String toString()
  uid: system.fabric.ReplicatorSettings.toString()
nameWithType: ReplicatorSettings
syntax: public class ReplicatorSettings
type: class
uid: system.fabric.ReplicatorSettings
fullName: system.fabric.ReplicatorSettings
name: ReplicatorSettings
package: system.fabric
summary: <p>Allows a stateful replica to configure the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> when creating it <xref uid="system.fabric.StatefulServicePartition.createReplicator(StateProvider,ReplicatorSettings)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StatefulServicePartition#createReplicator(system.fabric.StateProvider,system.fabric.ReplicatorSettings)"></xref></p>
metadata: {}
