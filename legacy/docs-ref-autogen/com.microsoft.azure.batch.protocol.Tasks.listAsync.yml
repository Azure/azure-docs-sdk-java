### YamlMime:JavaMember
nameWithType: Tasks.listAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId)
  name: listAsync(final String jobId)
  nameWithType: Tasks.listAsync(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<Page<CloudTask>> listAsync(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  name: listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudTask>> listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final ListOperationCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions)
  name: listAsync(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<Page<CloudTask>> listAsync(final String jobId, final TaskListOptions taskListOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  name: listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudTask>> listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions,final ListOperationCallback<CloudTask>)
uid: com.microsoft.azure.batch.protocol.Tasks.listAsync*
fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync
name: listAsync(final String jobId)
package: com.microsoft.azure.batch.protocol
metadata: {}
