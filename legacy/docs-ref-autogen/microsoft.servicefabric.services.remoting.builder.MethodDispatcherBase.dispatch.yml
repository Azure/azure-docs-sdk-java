### YamlMime:JavaMember
nameWithType: MethodDispatcherBase.dispatch
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  name: dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  nameWithType: MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  overridden: microsoft.servicefabric.services.remoting.MethodDispatcher.dispatch(Object,int,Object)
  parameters:
  - description: <p>remoted object Implementation. </p>
    name: objectImplementation
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>methodId of the interface implemented by the remoted object. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>message body. </p>
    name: requestMsgBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is used to dispatch one way messages to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax: public void dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object,int,Object)
uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch*
fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
name: dispatch(Object objectImplementation, int methodId, Object requestMsgBody)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
