### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.clone()
  name: clone()
  nameWithType: Versions.clone()
  returns:
    description: <p>the first stage of the clone call </p>
    type: <xref href="VersionsCloneDefinitionStages.WithAppId?alt=VersionsCloneDefinitionStages.WithAppId&text=VersionsCloneDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new version from the selected version.</p>

    <p></p>
  syntax: public VersionsCloneDefinitionStages.WithAppId clone()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.clone()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.clone(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  name: clone(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  nameWithType: Versions.clone(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: cloneOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CloneOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CloneOptionalParameter&text=CloneOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new version from the selected version.</p>

    <p></p>
  syntax: public String clone(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.clone(UUID,String,CloneOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  name: cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  nameWithType: Versions.cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: cloneOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CloneOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CloneOptionalParameter&text=CloneOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new version from the selected version.</p>

    <p></p>
  syntax: public Observable<String> cloneAsync(UUID appId, String versionId, CloneOptionalParameter cloneOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.cloneAsync(UUID,String,CloneOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.delete(UUID appId, String versionId)
  name: delete(UUID appId, String versionId)
  nameWithType: Versions.delete(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application version.</p>

    <p></p>
  syntax: public OperationStatus delete(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.delete(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.deleteAsync(UUID appId, String versionId)
  name: deleteAsync(UUID appId, String versionId)
  nameWithType: Versions.deleteAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes an application version.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.deleteAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.deleteUnlabelledUtterance(UUID appId, String versionId, String utterance)
  name: deleteUnlabelledUtterance(UUID appId, String versionId, String utterance)
  nameWithType: Versions.deleteUnlabelledUtterance(UUID appId, String versionId, String utterance)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The utterance text to delete. </p>
    name: utterance
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deleted an unlabelled utterance in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deleteUnlabelledUtterance(UUID appId, String versionId, String utterance)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.deleteUnlabelledUtterance(UUID,String,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance)
  name: deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance)
  nameWithType: Versions.deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The utterance text to delete. </p>
    name: utterance
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deleted an unlabelled utterance in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deleteUnlabelledUtteranceAsync(UUID appId, String versionId, String utterance)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.deleteUnlabelledUtteranceAsync(UUID,String,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.export(UUID appId, String versionId)
  name: export(UUID appId, String versionId)
  nameWithType: Versions.export(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the LuisApp object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp&text=LuisApp" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports a LUIS application to JSON format.</p>

    <p></p>
  syntax: public LuisApp export(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.export(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.exportAsync(UUID appId, String versionId)
  name: exportAsync(UUID appId, String versionId)
  nameWithType: Versions.exportAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LuisApp object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp&text=LuisApp" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Exports a LUIS application to JSON format.</p>

    <p></p>
  syntax: public Observable<LuisApp> exportAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.exportAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.exportLuFormat(UUID appId, String versionId)
  name: exportLuFormat(UUID appId, String versionId)
  nameWithType: Versions.exportLuFormat(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the InputStream object if successful. </p>
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports a LUIS application to text format.</p>

    <p></p>
  syntax: public InputStream exportLuFormat(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.exportLuFormat(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.exportLuFormatAsync(UUID appId, String versionId)
  name: exportLuFormatAsync(UUID appId, String versionId)
  nameWithType: Versions.exportLuFormatAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports a LUIS application to text format.</p>

    <p></p>
  syntax: public Observable<InputStream> exportLuFormatAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.exportLuFormatAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.get(UUID appId, String versionId)
  name: get(UUID appId, String versionId)
  nameWithType: Versions.get(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the VersionInfo object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo&text=VersionInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.</p>

    <p></p>
  syntax: public VersionInfo get(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.get(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.getAsync(UUID appId, String versionId)
  name: getAsync(UUID appId, String versionId)
  nameWithType: Versions.getAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the VersionInfo object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo&text=VersionInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the version information such as date created, last modified date, endpoint URL, count of intents and entities, training and publishing status.</p>

    <p></p>
  syntax: public Observable<VersionInfo> getAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.getAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importLuFormat()
  name: importLuFormat()
  nameWithType: Versions.importLuFormat()
  returns:
    description: <p>the first stage of the importLuFormat call </p>
    type: <xref href="VersionsImportLuFormatDefinitionStages.WithAppId?alt=VersionsImportLuFormatDefinitionStages.WithAppId&text=VersionsImportLuFormatDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public VersionsImportLuFormatDefinitionStages.WithAppId importLuFormat()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importLuFormat()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importLuFormat(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  name: importLuFormat(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  nameWithType: Versions.importLuFormat(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An LU representing the LUIS application structure. </p>
    name: luisAppLu
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importLuFormatOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatVersionsOptionalParameter&text=ImportLuFormatVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public String importLuFormat(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importLuFormat(UUID,String,ImportLuFormatVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importLuFormatAsync(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  name: importLuFormatAsync(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  nameWithType: Versions.importLuFormatAsync(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An LU representing the LUIS application structure. </p>
    name: luisAppLu
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importLuFormatOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportLuFormatVersionsOptionalParameter&text=ImportLuFormatVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public Observable<String> importLuFormatAsync(UUID appId, String luisAppLu, ImportLuFormatVersionsOptionalParameter importLuFormatOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importLuFormatAsync(UUID,String,ImportLuFormatVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importMethod()
  name: importMethod()
  nameWithType: Versions.importMethod()
  returns:
    description: <p>the first stage of the importMethod call </p>
    type: <xref href="VersionsImportMethodDefinitionStages.WithAppId?alt=VersionsImportMethodDefinitionStages.WithAppId&text=VersionsImportMethodDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public VersionsImportMethodDefinitionStages.WithAppId importMethod()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importMethod()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importMethod(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  name: importMethod(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  nameWithType: Versions.importMethod(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A LUIS application structure. </p>
    name: luisApp
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp&text=LuisApp" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodVersionsOptionalParameter&text=ImportMethodVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public String importMethod(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importMethod(UUID,LuisApp,ImportMethodVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importMethodAsync(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  name: importMethodAsync(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  nameWithType: Versions.importMethodAsync(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A LUIS application structure. </p>
    name: luisApp
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisApp&text=LuisApp" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportMethodVersionsOptionalParameter&text=ImportMethodVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public Observable<String> importMethodAsync(UUID appId, LuisApp luisApp, ImportMethodVersionsOptionalParameter importMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importMethodAsync(UUID,LuisApp,ImportMethodVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importV2App()
  name: importV2App()
  nameWithType: Versions.importV2App()
  returns:
    description: <p>the first stage of the importV2App call </p>
    type: <xref href="VersionsImportV2AppDefinitionStages.WithAppId?alt=VersionsImportV2AppDefinitionStages.WithAppId&text=VersionsImportV2AppDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public VersionsImportV2AppDefinitionStages.WithAppId importV2App()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importV2App()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importV2App(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  name: importV2App(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  nameWithType: Versions.importV2App(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A LUIS application structure. </p>
    name: luisAppV2
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2&text=LuisAppV2" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importV2AppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppVersionsOptionalParameter&text=ImportV2AppVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public String importV2App(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importV2App(UUID,LuisAppV2,ImportV2AppVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importV2AppAsync(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  name: importV2AppAsync(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  nameWithType: Versions.importV2AppAsync(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>A LUIS application structure. </p>
    name: luisAppV2
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LuisAppV2&text=LuisAppV2" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: importV2AppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ImportV2AppVersionsOptionalParameter&text=ImportV2AppVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a new version into a LUIS application.</p>

    <p></p>
  syntax: public Observable<String> importV2AppAsync(UUID appId, LuisAppV2 luisAppV2, ImportV2AppVersionsOptionalParameter importV2AppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.importV2AppAsync(UUID,LuisAppV2,ImportV2AppVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.list()
  name: list()
  nameWithType: Versions.list()
  returns:
    description: <p>the first stage of the list call </p>
    type: <xref href="VersionsListDefinitionStages.WithAppId?alt=VersionsListDefinitionStages.WithAppId&text=VersionsListDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a list of versions for this application ID.</p>

    <p></p>
  syntax: public VersionsListDefinitionStages.WithAppId list()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.list()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.list(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  name: list(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  nameWithType: Versions.list(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListVersionsOptionalParameter&text=ListVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;VersionInfo&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo&text=VersionInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets a list of versions for this application ID.</p>

    <p></p>
  syntax: public List<VersionInfo> list(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.list(UUID,ListVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.listAsync(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  name: listAsync(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  nameWithType: Versions.listAsync(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListVersionsOptionalParameter&text=ListVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;VersionInfo&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.VersionInfo&text=VersionInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a list of versions for this application ID.</p>

    <p></p>
  syntax: public Observable<List<VersionInfo>> listAsync(UUID appId, ListVersionsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.listAsync(UUID,ListVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.update()
  name: update()
  nameWithType: Versions.update()
  returns:
    description: <p>the first stage of the update call </p>
    type: <xref href="VersionsUpdateDefinitionStages.WithAppId?alt=VersionsUpdateDefinitionStages.WithAppId&text=VersionsUpdateDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name or description of the application version.</p>

    <p></p>
  syntax: public VersionsUpdateDefinitionStages.WithAppId update()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.update()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.update(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  name: update(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  nameWithType: Versions.update(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateVersionsOptionalParameter&text=UpdateVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the name or description of the application version.</p>

    <p></p>
  syntax: public OperationStatus update(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.update(UUID,String,UpdateVersionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.updateAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  name: updateAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  nameWithType: Versions.updateAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateVersionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateVersionsOptionalParameter&text=UpdateVersionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the name or description of the application version.</p>

    <p></p>
  syntax: public Observable<OperationStatus> updateAsync(UUID appId, String versionId, UpdateVersionsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions.updateAsync(UUID,String,UpdateVersionsOptionalParameter)
nameWithType: Versions
syntax: public interface Versions
type: interface
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Versions
name: Versions
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
summary: <p>An instance of this class provides access to all the operations defined in Versions. </p>
metadata: {}
