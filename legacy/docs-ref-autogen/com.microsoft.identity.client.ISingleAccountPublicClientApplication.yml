### YamlMime:JavaType
inheritedMembers:
- com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
- com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
- com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
- com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
- com.microsoft.identity.client.IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String [],@NonNull final DeviceCodeFlowCallback)
- com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme)
- com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme,@NonNull final SignedHttpRequestRequestCallback)
- com.microsoft.identity.client.IPublicClientApplication.getConfiguration()
- com.microsoft.identity.client.IPublicClientApplication.isSharedDevice()
methods:
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  name: acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  nameWithType: ISingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  parameters:
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Authority to issue the token. </p>
    name: authority
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.identity.client.IAuthenticationResult?alt=com.microsoft.identity.client.IAuthenticationResult&text=IAuthenticationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public IAuthenticationResult acquireTokenSilent(@NonNull final String[] scopes, @NonNull final String authority)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String [],@NonNull final String)
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  name: acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  nameWithType: ISingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  parameters:
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Authority to issue the token. </p>
    name: authority
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="SilentAuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="SilentAuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public void acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final String,@NonNull final SilentAuthenticationCallback)
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.getCurrentAccount()
  name: getCurrentAccount()
  nameWithType: ISingleAccountPublicClientApplication.getCurrentAccount()
  returns:
    description: <p>CurrentAccountResult </p>
    type: <xref href="com.microsoft.identity.client.ICurrentAccountResult?alt=com.microsoft.identity.client.ICurrentAccountResult&text=ICurrentAccountResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the current account and notify if the current account changes. This method must be called whenever the application is resumed or prior to running a scheduled background operation.</p>

    <p></p>
  syntax: public ICurrentAccountResult getCurrentAccount()
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.getCurrentAccount()
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.getCurrentAccountAsync(final CurrentAccountCallback callback)
  name: getCurrentAccountAsync(final CurrentAccountCallback callback)
  nameWithType: ISingleAccountPublicClientApplication.getCurrentAccountAsync(final CurrentAccountCallback callback)
  parameters:
  - description: <p>a callback to be invoked when the operation finishes. </p>
    name: callback
    type: final <xref href="com.microsoft.identity.client.ISingleAccountPublicClientApplication.CurrentAccountCallback?alt=com.microsoft.identity.client.ISingleAccountPublicClientApplication.CurrentAccountCallback&text=ISingleAccountPublicClientApplication.CurrentAccountCallback" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the current account and notify if the current account changes. This method must be called whenever the application is resumed or prior to running a scheduled background operation.</p>

    <p></p>
  syntax: public void getCurrentAccountAsync(final CurrentAccountCallback callback)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.getCurrentAccountAsync(final CurrentAccountCallback)
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  name: signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  nameWithType: ISingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=%40Nullable+final+String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be consented to during sign in. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. The access token returned is for MS Graph and will allow you to query for additional information about the signed in account. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Allows a user to sign in to your application with one of their accounts. This method may only be called once: once a user is signed in, they must first be signed out before another user may sign in. If you wish to prompt the existing user for credentials use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="signInAgain(Activity, String[], Prompt, AuthenticationCallback)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="acquireToken(AcquireTokenParameters)"></xref>. </p>

    <p>Note: The authority used to make the sign in request will be either the MSAL default: <a href="https://login.microsoftonline.com/common">https://login.microsoftonline.com/common</a> or the default authority specified by you in your configuration</p>

    <p></p>
  syntax: public void signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signIn(@NonNull final Activity,@Nullable final String,@NonNull final String [],@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  name: signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  nameWithType: ISingleAccountPublicClientApplication.signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=%40Nullable+final+String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be consented to during sign in. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. The access token returned is for MS Graph and will allow you to query for additional information about the signed in account. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: prompt
    type: '@Nullable final <xref href="com.microsoft.identity.client.Prompt?alt=com.microsoft.identity.client.Prompt&text=Prompt" data-throw-if-not-resolved="False"/>'
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Allows a user to sign in to your application with one of their accounts. This method may only be called once: once a user is signed in, they must first be signed out before another user may sign in. If you wish to prompt the existing user for credentials use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="signInAgain(Activity, String[], Prompt, AuthenticationCallback)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="acquireToken(AcquireTokenParameters)"></xref>. </p>

    <p>Note: The authority used to make the sign in request will be either the MSAL default: <a href="https://login.microsoftonline.com/common">https://login.microsoftonline.com/common</a> or the default authority specified by you in your configuration</p>

    <p></p>
  syntax: public void signIn(@NonNull final Activity activity, @Nullable final String loginHint, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signIn(@NonNull final Activity,@Nullable final String,@NonNull final String [],@Nullable final Prompt,@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  name: signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  nameWithType: ISingleAccountPublicClientApplication.signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be consented to during sign in. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. The access token returned is for MS Graph and will allow you to query for additional information about the signed in account. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Nullable. Indicates the type of user interaction that is required. If no argument is supplied the default behavior will be used. </p>
    name: prompt
    type: '@Nullable final <xref href="com.microsoft.identity.client.Prompt?alt=com.microsoft.identity.client.Prompt&text=Prompt" data-throw-if-not-resolved="False"/>'
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(MsalException)"></xref>. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Reauthorizes the current account according to the supplied scopes and prompt behavior. </p>

    <p>Note: The authority used to make the sign in request will be either the MSAL default: <a href="https://login.microsoftonline.com/common">https://login.microsoftonline.com/common</a> or the default authority specified by you in your configuration.</p>

    <p></p>
  syntax: public void signInAgain(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final Prompt prompt, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signInAgain(@NonNull final Activity,@NonNull final String [],@Nullable final Prompt,@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signOut()
  name: signOut()
  nameWithType: ISingleAccountPublicClientApplication.signOut()
  returns:
    description: <p>boolean indicating whether the account was removed successfully </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs out the current the Account and Credentials (tokens). NOTE: If a device is marked as a shared device within broker signout will be device wide.</p>

    <p></p>
  syntax: public boolean signOut()
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signOut()
- fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback callback)
  name: signOut(@NonNull final SignOutCallback callback)
  nameWithType: ISingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback callback)
  parameters:
  - description: <p>a callback to be invoked when the operation finishes. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.ISingleAccountPublicClientApplication.SignOutCallback?alt=com.microsoft.identity.client.ISingleAccountPublicClientApplication.SignOutCallback&text=ISingleAccountPublicClientApplication.SignOutCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Signs out the current the Account and Credentials (tokens). NOTE: If a device is marked as a shared device within broker signout will be device wide.</p>

    <p></p>
  syntax: public void signOut(@NonNull final SignOutCallback callback)
  uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication.signOut(@NonNull final SignOutCallback)
nameWithType: ISingleAccountPublicClientApplication
syntax: public interface ISingleAccountPublicClientApplication extends IPublicClientApplication
type: interface
uid: com.microsoft.identity.client.ISingleAccountPublicClientApplication
fullName: com.microsoft.identity.client.ISingleAccountPublicClientApplication
name: ISingleAccountPublicClientApplication
package: com.microsoft.identity.client
summary: >-
  <p>An interface that contains list of operations that are available when MSAL is in 'single account' mode.<ul><li><p>In this mode, one account can be signed-in to the app.</p></li><li><p>If the user wants to acquire a token for another account, the previous account must be signed out first. </p></li></ul></p>

  <p>When the device is registered as 'shared', this will be the only available PublicClientApplication the app can obtain. The calling app has to support ISingleAccountPublicClientApplication if it is planning to support shared device mode. </p>

  <p>In the shared device mode,<ul><li><p>'Sign-in' means that the user will be signed in to the device - not just this app.</p></li><li><p>Once an account is 'signed-in', every MSAL app on the device that support shared device mode will be able to retrieve this account, and use them to silently perform API calls.</p></li><li><p>'Sign-out' means that user will be signed out from the device - every MSAL apps and the default browser. </p></li></ul></p>
metadata: {}
