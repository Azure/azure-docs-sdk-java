### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.network.model.HasNetworkInterfaces.getPrimaryNetworkInterface()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.network.model.HasNetworkInterfaces.networkInterfaceIds()
- com.microsoft.azure.management.network.model.HasNetworkInterfaces.primaryNetworkInterfaceId()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.compute.VirtualMachine.availabilitySetId()
  name: availabilitySetId()
  nameWithType: VirtualMachine.availabilitySetId()
  returns:
    description: <p>the resource ID of the availability set associated with this virtual machine </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String availabilitySetId()
  uid: com.microsoft.azure.management.compute.VirtualMachine.availabilitySetId()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.availabilityZones()
  name: availabilityZones()
  nameWithType: VirtualMachine.availabilityZones()
  returns:
    description: <p>the availability zones assigned to the virtual machine </p>
    type: Set&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.arm.AvailabilityZoneId?alt=com.microsoft.azure.management.resources.fluentcore.arm.AvailabilityZoneId&text=AvailabilityZoneId" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Set<AvailabilityZoneId> availabilityZones()
  uid: com.microsoft.azure.management.compute.VirtualMachine.availabilityZones()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.availableSizes()
  name: availableSizes()
  nameWithType: VirtualMachine.availableSizes()
  returns:
    description: <p>the virtual machine sizes </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.compute.VirtualMachineSize?alt=com.microsoft.azure.management.compute.VirtualMachineSize&text=VirtualMachineSize" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all available virtual machine sizes this virtual machine can resized to.</p>

    <p></p>
  syntax: public PagedList<VirtualMachineSize> availableSizes()
  uid: com.microsoft.azure.management.compute.VirtualMachine.availableSizes()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.bootDiagnosticsStorageUri()
  name: bootDiagnosticsStorageUri()
  nameWithType: VirtualMachine.bootDiagnosticsStorageUri()
  returns:
    description: <p>the storage blob endpoint uri if boot diagnostics is enabled for the virtual machine </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String bootDiagnosticsStorageUri()
  uid: com.microsoft.azure.management.compute.VirtualMachine.bootDiagnosticsStorageUri()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.capture(String containerName, String vhdPrefix, boolean overwriteVhd)
  name: capture(String containerName, String vhdPrefix, boolean overwriteVhd)
  nameWithType: VirtualMachine.capture(String containerName, String vhdPrefix, boolean overwriteVhd)
  parameters:
  - description: <p>destination container name to store the captured VHD </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the prefix for the VHD holding captured image </p>
    name: vhdPrefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>whether to overwrites destination VHD if it exists </p>
    name: overwriteVhd
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JSON template for creating more such virtual machines </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Captures the virtual machine by copying virtual hard disks of the VM.</p>

    <p></p>
  syntax: public String capture(String containerName, String vhdPrefix, boolean overwriteVhd)
  uid: com.microsoft.azure.management.compute.VirtualMachine.capture(String,String,boolean)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd)
  name: captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd)
  nameWithType: VirtualMachine.captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd)
  parameters:
  - description: <p>destination container name to store the captured VHD </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the prefix for the VHD holding captured image </p>
    name: vhdPrefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>whether to overwrites destination VHD if it exists </p>
    name: overwriteVhd
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Captures the virtual machine by copying virtual hard disks of the VM asynchronously.</p>

    <p></p>
  syntax: public Observable<String> captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd)
  uid: com.microsoft.azure.management.compute.VirtualMachine.captureAsync(String,String,boolean)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd, ServiceCallback<String> callback)
  name: captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd, ServiceCallback<String> callback)
  nameWithType: VirtualMachine.captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd, ServiceCallback<String> callback)
  parameters:
  - description: <p>destination container name to store the captured VHD </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the prefix for the VHD holding captured image </p>
    name: vhdPrefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>whether to overwrites destination VHD if it exists </p>
    name: overwriteVhd
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CString%3E?alt=ServiceCallback%3CString%3E&text=ServiceCallback%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="ServiceFuture%3CString%3E?alt=ServiceFuture%3CString%3E&text=ServiceFuture%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Captures the virtual machine by copying virtual hard disks of the VM asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<String> captureAsync(String containerName, String vhdPrefix, boolean overwriteVhd, ServiceCallback<String> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.captureAsync(String,String,boolean,ServiceCallback<String>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.computerName()
  name: computerName()
  nameWithType: VirtualMachine.computerName()
  returns:
    description: <p>name of this virtual machine </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String computerName()
  uid: com.microsoft.azure.management.compute.VirtualMachine.computerName()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.convertToManaged()
  name: convertToManaged()
  nameWithType: VirtualMachine.convertToManaged()
  summary: <p>Converts (migrates) the virtual machine with un-managed disks to use managed disk. </p>
  syntax: public void convertToManaged()
  uid: com.microsoft.azure.management.compute.VirtualMachine.convertToManaged()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.convertToManagedAsync()
  name: convertToManagedAsync()
  nameWithType: VirtualMachine.convertToManagedAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts (migrates) the virtual machine with un-managed disks to use managed disk asynchronously.</p>

    <p></p>
  syntax: public Completable convertToManagedAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.convertToManagedAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.convertToManagedAsync(ServiceCallback<Void> callback)
  name: convertToManagedAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.convertToManagedAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts (migrates) the virtual machine with un-managed disks to use managed disk asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> convertToManagedAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.convertToManagedAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.dataDisks()
  name: dataDisks()
  nameWithType: VirtualMachine.dataDisks()
  returns:
    description: <p>the managed data disks associated with this virtual machine, indexed by LUN </p>
    type: Map&lt;Integer, <xref href="com.microsoft.azure.management.compute.VirtualMachineDataDisk?alt=com.microsoft.azure.management.compute.VirtualMachineDataDisk&text=VirtualMachineDataDisk" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<Integer, VirtualMachineDataDisk> dataDisks()
  uid: com.microsoft.azure.management.compute.VirtualMachine.dataDisks()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.deallocate()
  name: deallocate()
  nameWithType: VirtualMachine.deallocate()
  summary: <p>Shuts down the virtual machine and releases the compute resources. </p>
  syntax: public void deallocate()
  uid: com.microsoft.azure.management.compute.VirtualMachine.deallocate()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.deallocateAsync()
  name: deallocateAsync()
  nameWithType: VirtualMachine.deallocateAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Shuts down the virtual machine and releases the compute resources asynchronously.</p>

    <p></p>
  syntax: public Completable deallocateAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.deallocateAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.deallocateAsync(ServiceCallback<Void> callback)
  name: deallocateAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.deallocateAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Shuts down the virtual machine and releases the compute resources asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deallocateAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.deallocateAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.diagnosticsProfile()
  name: diagnosticsProfile()
  nameWithType: VirtualMachine.diagnosticsProfile()
  returns:
    description: <p>the diagnostics profile </p>
    type: <xref href="com.microsoft.azure.management.compute.DiagnosticsProfile?alt=com.microsoft.azure.management.compute.DiagnosticsProfile&text=DiagnosticsProfile" data-throw-if-not-resolved="False"/>
  syntax: public DiagnosticsProfile diagnosticsProfile()
  uid: com.microsoft.azure.management.compute.VirtualMachine.diagnosticsProfile()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.diskEncryption()
  name: diskEncryption()
  nameWithType: VirtualMachine.diskEncryption()
  returns:
    description: <p>entry point to enabling, disabling and querying disk encryption </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachineEncryption?alt=com.microsoft.azure.management.compute.VirtualMachineEncryption&text=VirtualMachineEncryption" data-throw-if-not-resolved="False"/>
  syntax: public VirtualMachineEncryption diskEncryption()
  uid: com.microsoft.azure.management.compute.VirtualMachine.diskEncryption()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.generalize()
  name: generalize()
  nameWithType: VirtualMachine.generalize()
  summary: <p>Generalizes the virtual machine. </p>
  syntax: public void generalize()
  uid: com.microsoft.azure.management.compute.VirtualMachine.generalize()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.generalizeAsync()
  name: generalizeAsync()
  nameWithType: VirtualMachine.generalizeAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generalizes the virtual machine asynchronously.</p>

    <p></p>
  syntax: public Completable generalizeAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.generalizeAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.generalizeAsync(ServiceCallback<Void> callback)
  name: generalizeAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.generalizeAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Generalizes the virtual machine asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> generalizeAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.generalizeAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.getPrimaryPublicIPAddress()
  name: getPrimaryPublicIPAddress()
  nameWithType: VirtualMachine.getPrimaryPublicIPAddress()
  returns:
    description: <p>the public IP of the primary network interface </p>
    type: <xref href="com.microsoft.azure.management.network.PublicIPAddress?alt=com.microsoft.azure.management.network.PublicIPAddress&text=PublicIPAddress" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the public IP address associated with this virtual machine's primary network interface. </p>

    <p>Note that this method makes a rest API call to fetch the resource.</p>

    <p></p>
  syntax: public PublicIPAddress getPrimaryPublicIPAddress()
  uid: com.microsoft.azure.management.compute.VirtualMachine.getPrimaryPublicIPAddress()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.getPrimaryPublicIPAddressId()
  name: getPrimaryPublicIPAddressId()
  nameWithType: VirtualMachine.getPrimaryPublicIPAddressId()
  returns:
    description: <p>the resource ID of the public IP address associated with this virtual machine's primary network interface </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getPrimaryPublicIPAddressId()
  uid: com.microsoft.azure.management.compute.VirtualMachine.getPrimaryPublicIPAddressId()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.instanceView()
  name: instanceView()
  nameWithType: VirtualMachine.instanceView()
  returns:
    description: <p>the virtual machine's instance view </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachineInstanceView?alt=com.microsoft.azure.management.compute.VirtualMachineInstanceView&text=VirtualMachineInstanceView" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the virtual machine instance view. </p>

    <p>The instance view will be cached for later retrieval using .</p>

    <p></p>
  syntax: public VirtualMachineInstanceView instanceView()
  uid: com.microsoft.azure.management.compute.VirtualMachine.instanceView()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.isBootDiagnosticsEnabled()
  name: isBootDiagnosticsEnabled()
  nameWithType: VirtualMachine.isBootDiagnosticsEnabled()
  returns:
    description: <p>true if boot diagnostics is enabled for the virtual machine </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isBootDiagnosticsEnabled()
  uid: com.microsoft.azure.management.compute.VirtualMachine.isBootDiagnosticsEnabled()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.isManagedDiskEnabled()
  name: isManagedDiskEnabled()
  nameWithType: VirtualMachine.isManagedDiskEnabled()
  returns:
    description: <p>true if managed disks are used for the virtual machine's disks (OS, data) </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isManagedDiskEnabled()
  uid: com.microsoft.azure.management.compute.VirtualMachine.isManagedDiskEnabled()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.isManagedServiceIdentityEnabled()
  name: isManagedServiceIdentityEnabled()
  nameWithType: VirtualMachine.isManagedServiceIdentityEnabled()
  returns:
    description: <p>true if Managed Service Identity is enabled for the virtual machine </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isManagedServiceIdentityEnabled()
  uid: com.microsoft.azure.management.compute.VirtualMachine.isManagedServiceIdentityEnabled()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.licenseType()
  name: licenseType()
  nameWithType: VirtualMachine.licenseType()
  returns:
    description: <p>the licenseType value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String licenseType()
  uid: com.microsoft.azure.management.compute.VirtualMachine.licenseType()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.listExtensions()
  name: listExtensions()
  nameWithType: VirtualMachine.listExtensions()
  returns:
    description: <p>extensions attached to the virtual machine </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.compute.VirtualMachineExtension?alt=com.microsoft.azure.management.compute.VirtualMachineExtension&text=VirtualMachineExtension" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, VirtualMachineExtension> listExtensions()
  uid: com.microsoft.azure.management.compute.VirtualMachine.listExtensions()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.listExtensionsAsync()
  name: listExtensionsAsync()
  nameWithType: VirtualMachine.listExtensionsAsync()
  returns:
    description: <p>a representation of the deferred computation of this call, returning extensions attached to the virtual machine </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.compute.VirtualMachineExtension?alt=com.microsoft.azure.management.compute.VirtualMachineExtension&text=VirtualMachineExtension" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<VirtualMachineExtension> listExtensionsAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.listExtensionsAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.managedServiceIdentityPrincipalId()
  name: managedServiceIdentityPrincipalId()
  nameWithType: VirtualMachine.managedServiceIdentityPrincipalId()
  returns:
    description: <p>the Managed Service Identity specific Active Directory service principal ID assigned to the virtual machine. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String managedServiceIdentityPrincipalId()
  uid: com.microsoft.azure.management.compute.VirtualMachine.managedServiceIdentityPrincipalId()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.managedServiceIdentityTenantId()
  name: managedServiceIdentityTenantId()
  nameWithType: VirtualMachine.managedServiceIdentityTenantId()
  returns:
    description: <p>the Managed Service Identity specific Active Directory tenant ID assigned to the virtual machine. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String managedServiceIdentityTenantId()
  uid: com.microsoft.azure.management.compute.VirtualMachine.managedServiceIdentityTenantId()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osDiskCachingType()
  name: osDiskCachingType()
  nameWithType: VirtualMachine.osDiskCachingType()
  returns:
    description: <p>the operating system disk caching type </p>
    type: <xref href="com.microsoft.azure.management.compute.CachingTypes?alt=com.microsoft.azure.management.compute.CachingTypes&text=CachingTypes" data-throw-if-not-resolved="False"/>
  syntax: public CachingTypes osDiskCachingType()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osDiskCachingType()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osDiskId()
  name: osDiskId()
  nameWithType: VirtualMachine.osDiskId()
  returns:
    description: <p>resource ID of the managed disk backing the OS disk </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String osDiskId()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osDiskId()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osDiskSize()
  name: osDiskSize()
  nameWithType: VirtualMachine.osDiskSize()
  returns:
    description: <p>the size of the operating system disk in GB </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int osDiskSize()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osDiskSize()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osDiskStorageAccountType()
  name: osDiskStorageAccountType()
  nameWithType: VirtualMachine.osDiskStorageAccountType()
  returns:
    description: <p>the storage account type of the managed disk backing OS disk </p>
    type: <xref href="com.microsoft.azure.management.compute.StorageAccountTypes?alt=com.microsoft.azure.management.compute.StorageAccountTypes&text=StorageAccountTypes" data-throw-if-not-resolved="False"/>
  syntax: public StorageAccountTypes osDiskStorageAccountType()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osDiskStorageAccountType()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osProfile()
  name: osProfile()
  nameWithType: VirtualMachine.osProfile()
  returns:
    description: <p>the operating system profile </p>
    type: <xref href="com.microsoft.azure.management.compute.OSProfile?alt=com.microsoft.azure.management.compute.OSProfile&text=OSProfile" data-throw-if-not-resolved="False"/>
  syntax: public OSProfile osProfile()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osProfile()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osType()
  name: osType()
  nameWithType: VirtualMachine.osType()
  returns:
    description: <p>the operating system of this virtual machine </p>
    type: <xref href="com.microsoft.azure.management.compute.OperatingSystemTypes?alt=com.microsoft.azure.management.compute.OperatingSystemTypes&text=OperatingSystemTypes" data-throw-if-not-resolved="False"/>
  syntax: public OperatingSystemTypes osType()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osType()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.osUnmanagedDiskVhdUri()
  name: osUnmanagedDiskVhdUri()
  nameWithType: VirtualMachine.osUnmanagedDiskVhdUri()
  returns:
    description: <p>the URI to the VHD file backing this virtual machine's operating system disk </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String osUnmanagedDiskVhdUri()
  uid: com.microsoft.azure.management.compute.VirtualMachine.osUnmanagedDiskVhdUri()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.plan()
  name: plan()
  nameWithType: VirtualMachine.plan()
  returns:
    description: <p>the plan value </p>
    type: <xref href="com.microsoft.azure.management.compute.Plan?alt=com.microsoft.azure.management.compute.Plan&text=Plan" data-throw-if-not-resolved="False"/>
  syntax: public Plan plan()
  uid: com.microsoft.azure.management.compute.VirtualMachine.plan()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.powerOff()
  name: powerOff()
  nameWithType: VirtualMachine.powerOff()
  summary: <p>Powers off (stops) the virtual machine. </p>
  syntax: public void powerOff()
  uid: com.microsoft.azure.management.compute.VirtualMachine.powerOff()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.powerOffAsync()
  name: powerOffAsync()
  nameWithType: VirtualMachine.powerOffAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Powers off (stops) the virtual machine asynchronously.</p>

    <p></p>
  syntax: public Completable powerOffAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.powerOffAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.powerOffAsync(ServiceCallback<Void> callback)
  name: powerOffAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.powerOffAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Powers off (stop) the virtual machine asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> powerOffAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.powerOffAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.powerState()
  name: powerState()
  nameWithType: VirtualMachine.powerState()
  returns:
    description: <p>the power state of the virtual machine </p>
    type: <xref href="com.microsoft.azure.management.compute.PowerState?alt=com.microsoft.azure.management.compute.PowerState&text=PowerState" data-throw-if-not-resolved="False"/>
  syntax: public PowerState powerState()
  uid: com.microsoft.azure.management.compute.VirtualMachine.powerState()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.provisioningState()
  name: provisioningState()
  nameWithType: VirtualMachine.provisioningState()
  returns:
    description: <p>the provisioningState value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String provisioningState()
  uid: com.microsoft.azure.management.compute.VirtualMachine.provisioningState()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.redeploy()
  name: redeploy()
  nameWithType: VirtualMachine.redeploy()
  summary: <p>Redeploys the virtual machine. </p>
  syntax: public void redeploy()
  uid: com.microsoft.azure.management.compute.VirtualMachine.redeploy()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.redeployAsync()
  name: redeployAsync()
  nameWithType: VirtualMachine.redeployAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Redeploys the virtual machine asynchronously.</p>

    <p></p>
  syntax: public Completable redeployAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.redeployAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.redeployAsync(ServiceCallback<Void> callback)
  name: redeployAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.redeployAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Redeploys the virtual machine asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> redeployAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.redeployAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.refreshInstanceView()
  name: refreshInstanceView()
  nameWithType: VirtualMachine.refreshInstanceView()
  returns:
    description: <p>the refreshed instance view </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachineInstanceView?alt=com.microsoft.azure.management.compute.VirtualMachineInstanceView&text=VirtualMachineInstanceView" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Refreshes the virtual machine instance view to sync with Azure. </p>

    <p>The instance view will be cached for later retrieval using .</p>

    <p></p>
  syntax: public VirtualMachineInstanceView refreshInstanceView()
  uid: com.microsoft.azure.management.compute.VirtualMachine.refreshInstanceView()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.refreshInstanceViewAsync()
  name: refreshInstanceViewAsync()
  nameWithType: VirtualMachine.refreshInstanceViewAsync()
  returns:
    description: <p>an observable that emits the instance view of the virtual machine. </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.compute.VirtualMachineInstanceView?alt=com.microsoft.azure.management.compute.VirtualMachineInstanceView&text=VirtualMachineInstanceView" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Refreshes the virtual machine instance view to sync with Azure.</p>

    <p></p>
  syntax: public Observable<VirtualMachineInstanceView> refreshInstanceViewAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.refreshInstanceViewAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.restart()
  name: restart()
  nameWithType: VirtualMachine.restart()
  summary: <p>Restarts the virtual machine. </p>
  syntax: public void restart()
  uid: com.microsoft.azure.management.compute.VirtualMachine.restart()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.restartAsync()
  name: restartAsync()
  nameWithType: VirtualMachine.restartAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restarts the virtual machine asynchronously.</p>

    <p></p>
  syntax: public Completable restartAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.restartAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.restartAsync(ServiceCallback<Void> callback)
  name: restartAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.restartAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restarts the virtual machine asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> restartAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.restartAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.size()
  name: size()
  nameWithType: VirtualMachine.size()
  returns:
    description: <p>the virtual machine size </p>
    type: <xref href="com.microsoft.azure.management.compute.VirtualMachineSizeTypes?alt=com.microsoft.azure.management.compute.VirtualMachineSizeTypes&text=VirtualMachineSizeTypes" data-throw-if-not-resolved="False"/>
  syntax: public VirtualMachineSizeTypes size()
  uid: com.microsoft.azure.management.compute.VirtualMachine.size()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.start()
  name: start()
  nameWithType: VirtualMachine.start()
  summary: <p>Starts the virtual machine. </p>
  syntax: public void start()
  uid: com.microsoft.azure.management.compute.VirtualMachine.start()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.startAsync()
  name: startAsync()
  nameWithType: VirtualMachine.startAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts the virtual machine asynchronously.</p>

    <p></p>
  syntax: public Completable startAsync()
  uid: com.microsoft.azure.management.compute.VirtualMachine.startAsync()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.startAsync(ServiceCallback<Void> callback)
  name: startAsync(ServiceCallback<Void> callback)
  nameWithType: VirtualMachine.startAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts the virtual machine asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> startAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.compute.VirtualMachine.startAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.compute.VirtualMachine.storageProfile()
  name: storageProfile()
  nameWithType: VirtualMachine.storageProfile()
  returns:
    description: <p>the storageProfile value </p>
    type: <xref href="com.microsoft.azure.management.compute.StorageProfile?alt=com.microsoft.azure.management.compute.StorageProfile&text=StorageProfile" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the storage profile of an Azure virtual machine.</p>

    <p></p>
  syntax: public StorageProfile storageProfile()
  uid: com.microsoft.azure.management.compute.VirtualMachine.storageProfile()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.unmanagedDataDisks()
  name: unmanagedDataDisks()
  nameWithType: VirtualMachine.unmanagedDataDisks()
  returns:
    description: <p>the unmanaged data disks associated with this virtual machine, indexed by LUN number </p>
    type: Map&lt;Integer, <xref href="com.microsoft.azure.management.compute.VirtualMachineUnmanagedDataDisk?alt=com.microsoft.azure.management.compute.VirtualMachineUnmanagedDataDisk&text=VirtualMachineUnmanagedDataDisk" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<Integer, VirtualMachineUnmanagedDataDisk> unmanagedDataDisks()
  uid: com.microsoft.azure.management.compute.VirtualMachine.unmanagedDataDisks()
- fullName: com.microsoft.azure.management.compute.VirtualMachine.vmId()
  name: vmId()
  nameWithType: VirtualMachine.vmId()
  returns:
    description: <p>the virtual machine unique ID. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String vmId()
  uid: com.microsoft.azure.management.compute.VirtualMachine.vmId()
nameWithType: VirtualMachine
syntax: public interface VirtualMachine extends GroupableResource<ComputeManager, VirtualMachineInner>,Refreshable<VirtualMachine>,Updatable<VirtualMachine.Update>,HasNetworkInterfaces
type: interface
uid: com.microsoft.azure.management.compute.VirtualMachine
fullName: com.microsoft.azure.management.compute.VirtualMachine
name: VirtualMachine
package: com.microsoft.azure.management.compute
summary: <p>An immutable client-side representation of an Azure virtual machine. </p>
metadata: {}
