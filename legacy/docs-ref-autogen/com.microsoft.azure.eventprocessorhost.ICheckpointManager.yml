### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  id: ICheckpointManager
  parent: com.microsoft.azure.eventprocessorhost
  children:
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists(List<String>)
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String)
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String)
  - com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(CompleteLease,Checkpoint)
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: ICheckpointManager
  nameWithType: ICheckpointManager
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  type: Interface
  source:
    remote: &o0
      path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-java
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 22
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public interface ICheckpointManager
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
  id: checkpointStoreExists()
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: checkpointStoreExists()
  nameWithType: ICheckpointManager.checkpointStoreExists()
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 31
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public CompletableFuture<Boolean> checkpointStoreExists()
    return:
      type: 7e53ac82
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists(List<String>)
  id: createAllCheckpointsIfNotExists(List<String>)
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: createAllCheckpointsIfNotExists(List<String> partitionIds)
  nameWithType: ICheckpointManager.createAllCheckpointsIfNotExists(List<String> partitionIds)
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists(List<String> partitionIds)
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 71
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public CompletableFuture<Void> createAllCheckpointsIfNotExists(List<String> partitionIds)
    parameters:
    - id: partitionIds
      type: 7d60c20e
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
  id: createCheckpointStoreIfNotExists()
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: createCheckpointStoreIfNotExists()
  nameWithType: ICheckpointManager.createCheckpointStoreIfNotExists()
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 38
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public CompletableFuture<Void> createCheckpointStoreIfNotExists()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String)
  id: deleteCheckpoint(String)
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: deleteCheckpoint(String partitionId)
  nameWithType: ICheckpointManager.deleteCheckpoint(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 95
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public CompletableFuture<Void> deleteCheckpoint(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
  id: deleteCheckpointStore()
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: deleteCheckpointStore()
  nameWithType: ICheckpointManager.deleteCheckpointStore()
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 45
  package: com.microsoft.azure.eventprocessorhost
  summary: "<p>Deletes the checkpoint store.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> deleteCheckpointStore()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String)
  id: getCheckpoint(String)
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: getCheckpoint(String partitionId)
  nameWithType: ICheckpointManager.getCheckpoint(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String partitionId)
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 55
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public CompletableFuture<Checkpoint> getCheckpoint(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: 9cdf14d0com.microsoft.azure.eventprocessorhost.Checkpointa08ddfce
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(CompleteLease,Checkpoint)
  id: updateCheckpoint(CompleteLease,Checkpoint)
  parent: com.microsoft.azure.eventprocessorhost.ICheckpointManager
  href: com.microsoft.azure.eventprocessorhost.ICheckpointManager.yml
  langs:
  - java
  name: updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  nameWithType: ICheckpointManager.updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  overload: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint*
  type: Method
  source:
    remote: *o0
    path: azure-eventhubs-eph/src/main/java/com/microsoft/azure/eventprocessorhost/ICheckpointManager.java
    startLine: 85
  package: com.microsoft.azure.eventprocessorhost
  syntax:
    content: public CompletableFuture<Void> updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost.CompleteLease
    - id: checkpoint
      type: com.microsoft.azure.eventprocessorhost.Checkpoint
    return:
      type: db03ee24
references:
- uid: 7e53ac82
  spec.java:
  - name: CompletableFuture<Boolean>
    fullName: CompletableFuture<Boolean>
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists*
  name: checkpointStoreExists
  nameWithType: ICheckpointManager.checkpointStoreExists
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists
  package: com.microsoft.azure.eventprocessorhost
- uid: db03ee24
  spec.java:
  - name: CompletableFuture<Void>
    fullName: CompletableFuture<Void>
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists*
  name: createCheckpointStoreIfNotExists
  nameWithType: ICheckpointManager.createCheckpointStoreIfNotExists
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore*
  name: deleteCheckpointStore
  nameWithType: ICheckpointManager.deleteCheckpointStore
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore
  package: com.microsoft.azure.eventprocessorhost
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 9cdf14d0com.microsoft.azure.eventprocessorhost.Checkpointa08ddfce
  spec.java:
  - name: CompletableFuture<
    fullName: CompletableFuture<
  - uid: com.microsoft.azure.eventprocessorhost.Checkpoint
    name: Checkpoint
    fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
    href: com.microsoft.azure.eventprocessorhost.Checkpoint.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint*
  name: getCheckpoint
  nameWithType: ICheckpointManager.getCheckpoint
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: 7d60c20e
  spec.java:
  - name: List<String>
    fullName: List<String>
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists*
  name: createAllCheckpointsIfNotExists
  nameWithType: ICheckpointManager.createAllCheckpointsIfNotExists
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint*
  name: updateCheckpoint
  nameWithType: ICheckpointManager.updateCheckpoint
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint*
  name: deleteCheckpoint
  nameWithType: ICheckpointManager.deleteCheckpoint
  fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint
  package: com.microsoft.azure.eventprocessorhost
- uid: com.microsoft.azure.eventprocessorhost.AzureStorageCheckpointLeaseManager
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: InMemoryCheckpointManager
  nameWithType: InMemoryCheckpointManager
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  type: Class
  syntax:
    content: public class InMemoryCheckpointManager
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.checkpointStoreExists()
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: checkpointStoreExists()
  nameWithType: InMemoryCheckpointManager.checkpointStoreExists()
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.checkpointStoreExists()
  type: Method
  syntax:
    content: public CompletableFuture<Boolean> checkpointStoreExists()
    return:
      type: 7e53ac82
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createCheckpointStoreIfNotExists()
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: createCheckpointStoreIfNotExists()
  nameWithType: InMemoryCheckpointManager.createCheckpointStoreIfNotExists()
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createCheckpointStoreIfNotExists()
  type: Method
  syntax:
    content: public CompletableFuture<Void> createCheckpointStoreIfNotExists()
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpointStore()
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: deleteCheckpointStore()
  nameWithType: InMemoryCheckpointManager.deleteCheckpointStore()
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpointStore()
  type: Method
  summary: "<p>Deletes the checkpoint store.</p>\r\n<p></p>"
  syntax:
    content: public CompletableFuture<Void> deleteCheckpointStore()
    return:
      type: db03ee24
      description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
- uid: com.microsoft.azure.eventprocessorhost.Checkpoint
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.Checkpoint.yml
  name: Checkpoint
  nameWithType: Checkpoint
  fullName: com.microsoft.azure.eventprocessorhost.Checkpoint
  type: Class
  summary: "<p>Checkpoint class is public so that advanced users can implement an ICheckpointManager. Unless you are implementing ICheckpointManager you should not have to deal with objects of this class directly. </p>\r\n<p>A Checkpoint is essentially just a tuple. It has a fixed partition id, set at creation time and immutable thereafter, and associates that with an offset/sequenceNumber pair which indicates a position within the events in that partition. </p>"
  syntax:
    content: public class Checkpoint
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.getCheckpoint(String)
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: getCheckpoint(String partitionId)
  nameWithType: InMemoryCheckpointManager.getCheckpoint(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.getCheckpoint(String partitionId)
  type: Method
  syntax:
    content: public CompletableFuture<Checkpoint> getCheckpoint(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: 9cdf14d0com.microsoft.azure.eventprocessorhost.Checkpointa08ddfce
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createAllCheckpointsIfNotExists(List<String>)
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: createAllCheckpointsIfNotExists(List<String> partitionIds)
  nameWithType: InMemoryCheckpointManager.createAllCheckpointsIfNotExists(List<String> partitionIds)
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.createAllCheckpointsIfNotExists(List<String> partitionIds)
  type: Method
  syntax:
    content: public CompletableFuture<Void> createAllCheckpointsIfNotExists(List<String> partitionIds)
    parameters:
    - id: partitionIds
      type: 7d60c20e
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.updateCheckpoint(CompleteLease,Checkpoint)
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  nameWithType: InMemoryCheckpointManager.updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  type: Method
  syntax:
    content: public CompletableFuture<Void> updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
    parameters:
    - id: lease
      type: com.microsoft.azure.eventprocessorhost.CompleteLease
    - id: checkpoint
      type: com.microsoft.azure.eventprocessorhost.Checkpoint
    return:
      type: db03ee24
- uid: com.microsoft.azure.eventprocessorhost.CompleteLease
  parent: com.microsoft.azure.eventprocessorhost
  href: com.microsoft.azure.eventprocessorhost.CompleteLease.yml
  name: CompleteLease
  nameWithType: CompleteLease
  fullName: com.microsoft.azure.eventprocessorhost.CompleteLease
  type: Class
  summary: "<p>CompleteLease class is public so that advanced users can implement an ILeaseManager. Unless you are implementing ILeaseManager you should not have to deal with objects of this class or derived classes directly. </p>\r\n<p>CompleteLease carries around complete information about a lease. By itself, it has the epoch. Any lease manager implementation can derive from this class to add data which the lease manager needs to function <ndash></ndash> see AzureBlobLease for an example. Having two distinct classes allows the code to clearly express which variety of lease any variable holds or a method requires, and avoids the problem of accidentally supplying a lightweight BaseLease to a method which needs the lease-manager-specific fields. </p>"
  syntax:
    content: public class CompleteLease extends BaseLease
- uid: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpoint(String)
  parent: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager
  href: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.yml
  name: deleteCheckpoint(String partitionId)
  nameWithType: InMemoryCheckpointManager.deleteCheckpoint(String partitionId)
  fullName: com.microsoft.azure.eventprocessorhost.InMemoryCheckpointManager.deleteCheckpoint(String partitionId)
  type: Method
  syntax:
    content: public CompletableFuture<Void> deleteCheckpoint(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
    return:
      type: db03ee24
