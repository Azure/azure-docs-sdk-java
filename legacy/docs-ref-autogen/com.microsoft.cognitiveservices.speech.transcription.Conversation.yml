### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.addParticipantAsync(final String userId)
  name: addParticipantAsync(final String userId)
  nameWithType: Conversation.addParticipantAsync(final String userId)
  parameters:
  - description: <p>The user id. </p>
    name: userId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation of adding a participant. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.Participant?alt=com.microsoft.cognitiveservices.speech.transcription.Participant&text=Participant" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a participant to a conversation using the user's id.</p>

    <p></p>
  syntax: public Future<Participant> addParticipantAsync(final String userId)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.addParticipantAsync(final String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.addParticipantAsync(final User user)
  name: addParticipantAsync(final User user)
  nameWithType: Conversation.addParticipantAsync(final User user)
  parameters:
  - description: <p>A user object. </p>
    name: user
    type: final <xref href="com.microsoft.cognitiveservices.speech.transcription.User?alt=com.microsoft.cognitiveservices.speech.transcription.User&text=User" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation of adding a participant. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.User?alt=com.microsoft.cognitiveservices.speech.transcription.User&text=User" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a participant to a conversation using a user object.</p>

    <p></p>
  syntax: public Future<User> addParticipantAsync(final User user)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.addParticipantAsync(final User)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.addParticipantAsync(Participant participant)
  name: addParticipantAsync(Participant participant)
  nameWithType: Conversation.addParticipantAsync(Participant participant)
  parameters:
  - description: <p>A participant object. </p>
    name: participant
    type: <xref href="com.microsoft.cognitiveservices.speech.transcription.Participant?alt=com.microsoft.cognitiveservices.speech.transcription.Participant&text=Participant" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation of adding a participant. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.Participant?alt=com.microsoft.cognitiveservices.speech.transcription.Participant&text=Participant" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add a participant to a conversation using a participant object.</p>

    <p></p>
  syntax: public Future<Participant> addParticipantAsync(Participant participant)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.addParticipantAsync(Participant)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.close()
  name: close()
  nameWithType: Conversation.close()
  summary: '<p>Dispose of associated resources. Note: close() must be called in order to release underlying resources held by the object. </p>'
  syntax: public void close()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.close()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.createConversationAsync(SpeechConfig speechConfig)
  name: createConversationAsync(SpeechConfig speechConfig)
  nameWithType: Conversation.createConversationAsync(SpeechConfig speechConfig)
  parameters:
  - description: <p>speech configuration. </p>
    name: speechConfig
    type: <xref href="com.microsoft.cognitiveservices.speech.SpeechConfig?alt=com.microsoft.cognitiveservices.speech.SpeechConfig&text=SpeechConfig" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation that creates a conversation. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.Conversation?alt=com.microsoft.cognitiveservices.speech.transcription.Conversation&text=Conversation" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Initializes a new instance of Conversation. </p>
  syntax: public static Future<Conversation> createConversationAsync(SpeechConfig speechConfig)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.createConversationAsync(SpeechConfig)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.createConversationAsync(SpeechConfig speechConfig, String conversationId)
  name: createConversationAsync(SpeechConfig speechConfig, String conversationId)
  nameWithType: Conversation.createConversationAsync(SpeechConfig speechConfig, String conversationId)
  parameters:
  - description: <p>speech configuration. </p>
    name: speechConfig
    type: <xref href="com.microsoft.cognitiveservices.speech.SpeechConfig?alt=com.microsoft.cognitiveservices.speech.SpeechConfig&text=SpeechConfig" data-throw-if-not-resolved="False"/>
  - description: <p>a unqiue identification of your conversation. </p>
    name: conversationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the asynchronous operation that creates a conversation. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.Conversation?alt=com.microsoft.cognitiveservices.speech.transcription.Conversation&text=Conversation" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Initializes a new instance of Conversation. </p>
  syntax: public static Future<Conversation> createConversationAsync(SpeechConfig speechConfig, String conversationId)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.createConversationAsync(SpeechConfig,String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.deleteConversationAsync()
  name: deleteConversationAsync()
  nameWithType: Conversation.deleteConversationAsync()
  returns:
    description: <p>An asynchronous operation representing deleting a conversation. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a conversation. After this no one will be able to join the conversation.</p>

    <p></p>
  syntax: public Future<Void> deleteConversationAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.deleteConversationAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.endConversationAsync()
  name: endConversationAsync()
  nameWithType: Conversation.endConversationAsync()
  returns:
    description: <p>An empty task representing the asynchronous operation that ending a conversation. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>End a conversation.</p>

    <p></p>
  syntax: public Future<Void> endConversationAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.endConversationAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.getAuthorizationToken()
  name: getAuthorizationToken()
  nameWithType: Conversation.getAuthorizationToken()
  returns:
    description: <p>Authorization token. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the authorization token used to communicate with the service. </p>
  syntax: public String getAuthorizationToken()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.getAuthorizationToken()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.getConversationId()
  name: getConversationId()
  nameWithType: Conversation.getConversationId()
  returns:
    description: <p>the conversation Id. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the conversation Id. </p>
  syntax: public String getConversationId()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.getConversationId()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.getProperties()
  name: getProperties()
  nameWithType: Conversation.getProperties()
  returns:
    description: <p>The collection of properties and their values defined for this Conversation. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.PropertyCollection?alt=com.microsoft.cognitiveservices.speech.PropertyCollection&text=PropertyCollection" data-throw-if-not-resolved="False"/>
  summary: <p>The collection of properties and their values defined for this Conversation. </p>
  syntax: public PropertyCollection getProperties()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.getProperties()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.lockConversationAsync()
  name: lockConversationAsync()
  nameWithType: Conversation.lockConversationAsync()
  returns:
    description: <p>An asynchronous operation representing locking a conversation. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Lock a conversation. This will prevent new participants from joining.</p>

    <p></p>
  syntax: public Future<Void> lockConversationAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.lockConversationAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.muteAllParticipantsAsync()
  name: muteAllParticipantsAsync()
  nameWithType: Conversation.muteAllParticipantsAsync()
  returns:
    description: <p>An asynchronous operation representing muting all participants. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Mute all other participants in the conversation. After this no other participants will have their speech recognitions broadcast, nor be able to send text messages.</p>

    <p></p>
  syntax: public Future<Void> muteAllParticipantsAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.muteAllParticipantsAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.muteParticipantAsync(String userId)
  name: muteParticipantAsync(String userId)
  nameWithType: Conversation.muteParticipantAsync(String userId)
  parameters:
  - description: <p>A user identifier. </p>
    name: userId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An asynchronous operation representing muting a particular participant. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Mute a participant.</p>

    <p></p>
  syntax: public Future<Void> muteParticipantAsync(String userId)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.muteParticipantAsync(String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.removeParticipantAsync(Participant participant)
  name: removeParticipantAsync(Participant participant)
  nameWithType: Conversation.removeParticipantAsync(Participant participant)
  parameters:
  - description: <p>A participant object. </p>
    name: participant
    type: <xref href="com.microsoft.cognitiveservices.speech.transcription.Participant?alt=com.microsoft.cognitiveservices.speech.transcription.Participant&text=Participant" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Am empty task representing the asynchronous operation of removing a participant. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Remove a participant from a conversation using a participant object.</p>

    <p></p>
  syntax: public Future<Void> removeParticipantAsync(Participant participant)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.removeParticipantAsync(Participant)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.removeParticipantAsync(String userId)
  name: removeParticipantAsync(String userId)
  nameWithType: Conversation.removeParticipantAsync(String userId)
  parameters:
  - description: <p>A user id. </p>
    name: userId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Am empty task representing the asynchronous operation of removing a participant. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Remove a participant from a conversation using a user id.</p>

    <p></p>
  syntax: public Future<Void> removeParticipantAsync(String userId)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.removeParticipantAsync(String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.removeParticipantAsync(User user)
  name: removeParticipantAsync(User user)
  nameWithType: Conversation.removeParticipantAsync(User user)
  parameters:
  - description: <p>A user object. </p>
    name: user
    type: <xref href="com.microsoft.cognitiveservices.speech.transcription.User?alt=com.microsoft.cognitiveservices.speech.transcription.User&text=User" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Am empty task representing the asynchronous operation of removing a participant. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Remove a participant from a conversation using a user object.</p>

    <p></p>
  syntax: public Future<Void> removeParticipantAsync(User user)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.removeParticipantAsync(User)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.setAuthorizationToken(String token)
  name: setAuthorizationToken(String token)
  nameWithType: Conversation.setAuthorizationToken(String token)
  parameters:
  - description: <p>Authorization token. </p>
    name: token
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: '<p>Sets the authorization token used to communicate with the service. Note: The caller needs to ensure that the authorization token is valid. Before the authorization token expires, the caller needs to refresh it by calling this setter with a new valid token. Otherwise, the recognizer will encounter errors during recognition. </p>'
  syntax: public void setAuthorizationToken(String token)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.setAuthorizationToken(String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.startConversationAsync()
  name: startConversationAsync()
  nameWithType: Conversation.startConversationAsync()
  returns:
    description: <p>An asynchronous operation representing starting a conversation. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Start a conversation.</p>

    <p></p>
  syntax: public Future<Void> startConversationAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.startConversationAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.unlockConversationAsync()
  name: unlockConversationAsync()
  nameWithType: Conversation.unlockConversationAsync()
  returns:
    description: <p>An asynchronous operation representing unlocking a conversation. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unlocks a conversation.</p>

    <p></p>
  syntax: public Future<Void> unlockConversationAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.unlockConversationAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.unmuteAllParticipantsAsync()
  name: unmuteAllParticipantsAsync()
  nameWithType: Conversation.unmuteAllParticipantsAsync()
  returns:
    description: <p>An asynchronous operation representing un-muting all participants. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unmute all other participants in the conversation.</p>

    <p></p>
  syntax: public Future<Void> unmuteAllParticipantsAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.unmuteAllParticipantsAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation.unmuteParticipantAsync(String userId)
  name: unmuteParticipantAsync(String userId)
  nameWithType: Conversation.unmuteParticipantAsync(String userId)
  parameters:
  - description: <p>A user identifier. </p>
    name: userId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An asynchronous operation representing un-muting a particular participant. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unmute a participant.</p>

    <p></p>
  syntax: public Future<Void> unmuteParticipantAsync(String userId)
  uid: com.microsoft.cognitiveservices.speech.transcription.Conversation.unmuteParticipantAsync(String)
nameWithType: Conversation
syntax: public class Conversation
type: class
uid: com.microsoft.cognitiveservices.speech.transcription.Conversation
fullName: com.microsoft.cognitiveservices.speech.transcription.Conversation
name: Conversation
package: com.microsoft.cognitiveservices.speech.transcription
summary: '<p>Performs conversation management including add and remove participants. Note: close() must be called in order to release underlying resources held by the object. Added in version 1.8.0 </p>'
metadata: {}
