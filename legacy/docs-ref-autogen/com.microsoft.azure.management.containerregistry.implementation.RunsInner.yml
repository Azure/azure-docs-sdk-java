### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.RunsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  name: RunsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  nameWithType: RunsInner.RunsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl&text=ContainerRegistryManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of RunsInner.</p>

    <p></p>
  syntax: public RunsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.RunsInner(Retrofit,ContainerRegistryManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancel(String resourceGroupName, String registryName, String runId)
  name: beginCancel(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.beginCancel(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public void beginCancel(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancel(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancelAsync(String resourceGroupName, String registryName, String runId)
  name: beginCancelAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.beginCancelAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public Observable<Void> beginCancelAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancelAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  name: beginCancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  nameWithType: RunsInner.beginCancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginCancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancelAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  name: beginCancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.beginCancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginCancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginCancelWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdate(String resourceGroupName, String registryName, String runId)
  name: beginUpdate(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.beginUpdate(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public RunInner beginUpdate(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdate(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdate(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  name: beginUpdate(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  nameWithType: RunsInner.beginUpdate(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public RunInner beginUpdate(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdate(String,String,String,Boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<RunInner> beginUpdateAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  nameWithType: RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<RunInner> beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String,String,String,Boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> beginUpdateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String,String,String,Boolean,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.beginUpdateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> beginUpdateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateAsync(String,String,String,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  nameWithType: RunsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.beginUpdateWithServiceResponseAsync(String,String,String,Boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancel(String resourceGroupName, String registryName, String runId)
  name: cancel(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.cancel(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public void cancel(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancel(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancelAsync(String resourceGroupName, String registryName, String runId)
  name: cancelAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.cancelAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public Observable<Void> cancelAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancelAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  name: cancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  nameWithType: RunsInner.cancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public ServiceFuture<Void> cancelAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancelAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  name: cancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.cancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancel an existing run.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> cancelWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.cancelWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.get(String resourceGroupName, String registryName, String runId)
  name: get(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.get(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the detailed information for a given run.</p>

    <p></p>
  syntax: public RunInner get(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.get(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getAsync(String resourceGroupName, String registryName, String runId)
  name: getAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.getAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the detailed information for a given run.</p>

    <p></p>
  syntax: public Observable<RunInner> getAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  name: getAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.getAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the detailed information for a given run.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> getAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getAsync(String,String,String,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrl(String resourceGroupName, String registryName, String runId)
  name: getLogSasUrl(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.getLogSasUrl(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunGetLogResultInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner&text=RunGetLogResultInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a link to download the run logs.</p>

    <p></p>
  syntax: public RunGetLogResultInner getLogSasUrl(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrl(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrlAsync(String resourceGroupName, String registryName, String runId)
  name: getLogSasUrlAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.getLogSasUrlAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunGetLogResultInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner&text=RunGetLogResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets a link to download the run logs.</p>

    <p></p>
  syntax: public Observable<RunGetLogResultInner> getLogSasUrlAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrlAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrlAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunGetLogResultInner> serviceCallback)
  name: getLogSasUrlAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunGetLogResultInner> serviceCallback)
  nameWithType: RunsInner.getLogSasUrlAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunGetLogResultInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner&text=RunGetLogResultInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner&text=RunGetLogResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets a link to download the run logs.</p>

    <p></p>
  syntax: public ServiceFuture<RunGetLogResultInner> getLogSasUrlAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunGetLogResultInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrlAsync(String,String,String,final ServiceCallback<RunGetLogResultInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrlWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  name: getLogSasUrlWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.getLogSasUrlWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunGetLogResultInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunGetLogResultInner&text=RunGetLogResultInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a link to download the run logs.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunGetLogResultInner>> getLogSasUrlWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getLogSasUrlWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  name: getWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the detailed information for a given run.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> getWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.list(final String resourceGroupName, final String registryName)
  name: list(final String resourceGroupName, final String registryName)
  nameWithType: RunsInner.list(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RunInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public PagedList<RunInner> list(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.list(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.list(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  name: list(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  nameWithType: RunsInner.list(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RunInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public PagedList<RunInner> list(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.list(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String resourceGroupName, final String registryName)
  name: listAsync(final String resourceGroupName, final String registryName)
  nameWithType: RunsInner.listAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RunInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<Page<RunInner>> listAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<RunInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<RunInner>> listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String,final String,final ListOperationCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  name: listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  nameWithType: RunsInner.listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RunInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<Page<RunInner>> listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top, final ListOperationCallback<RunInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top, final ListOperationCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top, final ListOperationCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<RunInner>> listAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top, final ListOperationCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listAsync(final String,final String,final String,final Integer,final ListOperationCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: RunsInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RunInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public PagedList<RunInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: RunsInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RunInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<Page<RunInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<RunInner>> serviceFuture, final ListOperationCallback<RunInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<RunInner>> serviceFuture, final ListOperationCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<RunInner>> serviceFuture, final ListOperationCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<RunInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RunInner>> serviceFuture, final ListOperationCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextAsync(final String,final ServiceFuture<List<RunInner>>,final ListOperationCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: RunsInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RunInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;RunInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<RunInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: RunsInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RunInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RunInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  name: listSinglePageAsync(final String resourceGroupName, final String registryName)
  nameWithType: RunsInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RunInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RunInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listSinglePageAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  name: listSinglePageAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  nameWithType: RunsInner.listSinglePageAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. ServiceResponse&lt;PageImpl&lt;RunInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. ServiceResponse&lt;PageImpl&lt;RunInner&gt;&gt; * </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. ServiceResponse&lt;PageImpl&lt;RunInner&gt;&gt; * </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RunInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;RunInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<RunInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listSinglePageAsync(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  nameWithType: RunsInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RunInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RunInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  nameWithType: RunsInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - name: top
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RunInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets all the runs for a registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RunInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String filter, final Integer top)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.listWithServiceResponseAsync(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.update(String resourceGroupName, String registryName, String runId)
  name: update(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.update(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public RunInner update(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.update(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.update(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  name: update(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  nameWithType: RunsInner.update(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public RunInner update(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.update(String,String,String,Boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String resourceGroupName, String registryName, String runId)
  name: updateAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.updateAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<RunInner> updateAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  name: updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  nameWithType: RunsInner.updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<RunInner> updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String,String,String,Boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> updateAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String,String,String,Boolean,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RunsInner.updateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> updateAsync(String resourceGroupName, String registryName, String runId, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateAsync(String,String,String,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  nameWithType: RunsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  nameWithType: RunsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The run ID. </p>
    name: runId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The value that indicates whether archiving is enabled or not. </p>
    name: isArchiveEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Patch the run properties.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String runId, Boolean isArchiveEnabled)
  uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner.updateWithServiceResponseAsync(String,String,String,Boolean)
nameWithType: RunsInner
syntax: public class RunsInner
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.RunsInner
fullName: com.microsoft.azure.management.containerregistry.implementation.RunsInner
name: RunsInner
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>An instance of this class provides access to all the operations defined in Runs. </p>
metadata: {}
