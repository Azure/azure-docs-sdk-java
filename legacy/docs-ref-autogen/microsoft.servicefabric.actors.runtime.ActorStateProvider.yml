### YamlMime:JavaType
inheritedMembers:
- microsoft.servicefabric.data.StateProviderReplica.abort()
- microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole,CancellationToken)
- microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken)
- microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters)
- microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
- microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String)
- microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
- microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
methods:
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  name: actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor that is activated. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous Actor activation notification processing. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is invoked as part of the activation process of the actor with the specified Id.</p>

    <p></p>
  syntax: public CompletableFuture<?> actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.actorActivatedAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  name: containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to check state existence. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the actor state to check for existence. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous check operation. The value of TResult parameter is true if state with specified name exists otherwise false. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether actor state provider contains an actor state with specified state name.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.containsStateAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  name: deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to delete the reminder. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the reminder to delete. </p>
    name: reminderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous delete operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified actor reminder if it exists.</p>

    <p></p>
  syntax: public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteReminderAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  name: deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  parameters:
  - description: <p>The set of reminders to delete </p>
    name: reminderNames
    type: Map&lt;<xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>, Collection&lt;String&gt;&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous delete operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified set of reminders</p>

    <p></p>
  syntax: public CompletableFuture<?> deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  name: enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to create enumerable. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous enumeration operation. The value of TResult parameter is an enumerable of all state names associated with specified actor. </p>
    type: <xref href="CompletableFuture%3CList%3CString%3E%3E?alt=CompletableFuture%3CList%3CString%3E%3E&text=CompletableFuture%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an enumerable of all the state names associated with specified actor.</p>

    <p>

      <b>Remarks:</b>The enumerator returned from actor state provider is safe to use concurrently with reads and writes to the state provider. It represents a snapshot consistent view of the state provider. </p>
  syntax: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.enumerateStateNamesAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  name: getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  parameters:
  - description: <p>Number of items requested to be returned. </p>
    name: numItemsToReturn
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    name: continuationToken
    type: <xref href="microsoft.servicefabric.actors.ContinuationToken?alt=microsoft.servicefabric.actors.ContinuationToken&text=ContinuationToken" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of call to server. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.PagedResult?alt=microsoft.servicefabric.actors.PagedResult&text=PagedResult" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets ActorIds from the State Provider.</p>

    <p>

      <b>Remarks:</b> The </p>
  syntax: public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.getActorsAsync(int,ContinuationToken,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  name: initialize(ActorTypeInformation actorTypeInformation)
  nameWithType: ActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  parameters:
  - description: <p>Type information of the actor class </p>
    name: actorTypeInformation
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes the actor state provider with type information of the actor type associated with it.</p>

    <p></p>
  syntax: public void initialize(ActorTypeInformation actorTypeInformation)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.initialize(ActorTypeInformation)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  name: loadRemindersAsync(CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous load operation. The value of TResult parameter is a collection of all actor reminders contained in the actor state provider. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorReminderCollection?alt=microsoft.servicefabric.actors.runtime.ActorReminderCollection&text=ActorReminderCollection" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Loads all the reminders contained in the actor state provider.</p>

    <p></p>
  syntax: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadRemindersAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  name: loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to load the state. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the actor state to load. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous load operation. The value of TResult parameter contains value of actor state associated with given state name. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Loads the actor state associated with the specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadStateAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  name: reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor which own reminder </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Actor reminder that completed successfully. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous reminder callback completed notification processing. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Invoked when a reminder fires and finishes executing its callback <xref uid="microsoft.servicefabric.actors.runtime.Remindable.receiveReminderAsync(String,byte [],Duration,Duration)" data-throw-if-not-resolved="false" data-raw-source="Remindable#receiveReminderAsync"></xref> successfully </p>
  syntax: public CompletableFuture<?> reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  name: removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to remove state. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes all the existing states and reminders associated with specified actor atomically.</p>

    <p></p>
  syntax: public CompletableFuture<?> removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.removeActorAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  name: saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to save the reminder. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Actor reminder to save. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified actor reminder. If an actor reminder with given name does not exist, it adds the actor reminder otherwise existing actor reminder with same name is updated.</p>

    <p></p>
  syntax: public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  nameWithType: ActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  parameters:
  - description: <p>ID of the actor for which to save the state changes. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Collection of state changes to save. </p>
    name: stateChanges
    type: List&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorStateChange?alt=microsoft.servicefabric.actors.runtime.ActorStateChange&text=ActorStateChange" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified set of actor state changes atomically.</p>

    <p>

      <b>Remarks:</b> The collection of state changes should contain only one item for a given state name. The save operation will fail on trying to add an actor state which already exists or update/remove an actor state which does not exist. </p>
  syntax: public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
nameWithType: ActorStateProvider
syntax: public interface ActorStateProvider extends StateProviderReplica
type: interface
uid: microsoft.servicefabric.actors.runtime.ActorStateProvider
fullName: microsoft.servicefabric.actors.runtime.ActorStateProvider
name: ActorStateProvider
package: microsoft.servicefabric.actors.runtime
summary: <p>Represents the interface that an actor state provider needs to implement for actor runtime to communicate with it. </p>
metadata: {}
