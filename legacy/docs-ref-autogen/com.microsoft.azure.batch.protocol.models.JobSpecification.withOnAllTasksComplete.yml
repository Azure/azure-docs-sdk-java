### YamlMime:JavaMember
nameWithType: JobSpecification.withOnAllTasksComplete
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.models.JobSpecification.withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  name: withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  nameWithType: JobSpecification.withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  parameters:
  - description: <p>the onAllTasksComplete value to set </p>
    name: onAllTasksComplete
    type: <xref href="com.microsoft.azure.batch.protocol.models.OnAllTasksComplete?alt=com.microsoft.azure.batch.protocol.models.OnAllTasksComplete&text=OnAllTasksComplete" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobSpecification object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSpecification?alt=com.microsoft.azure.batch.protocol.models.JobSpecification&text=JobSpecification" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction. Possible values include: 'noAction', 'terminateJob'.</p>

    <p></p>
  syntax: public JobSpecification withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  uid: com.microsoft.azure.batch.protocol.models.JobSpecification.withOnAllTasksComplete(OnAllTasksComplete)
uid: com.microsoft.azure.batch.protocol.models.JobSpecification.withOnAllTasksComplete*
fullName: com.microsoft.azure.batch.protocol.models.JobSpecification.withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
name: withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
package: com.microsoft.azure.batch.protocol.models
metadata: {}
