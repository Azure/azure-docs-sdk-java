### YamlMime:JavaMember
nameWithType: Events.getByTypeWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  name: getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  nameWithType: Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CServiceResponse%3CEventsResults%3E%3E?alt=Observable%3CServiceResponse%3CEventsResults%3E%3E&text=Observable%3CServiceResponse%3CEventsResults%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventsResults>> getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String,EventType)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  name: getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  nameWithType: Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the returned events </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A free-text search expression to match for whether a particular event should be returned </p>
    name: search
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A comma-separated list of properties with "asc" (the default) or "desc" to control the order of returned events </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Limits the properties to just those requested on each returned event </p>
    name: select
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning events </p>
    name: skip
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of events to return </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Format for the returned events </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Request a count of matching items included with the returned events </p>
    name: count
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used for aggregation over returned events </p>
    name: apply
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CServiceResponse%3CEventsResults%3E%3E?alt=Observable%3CServiceResponse%3CEventsResults%3E%3E&text=Observable%3CServiceResponse%3CEventsResults%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventsResults>> getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String,EventType,String,String,String,String,String,Integer,Integer,String,Boolean,String)
uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync*
fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync
name: getByTypeWithServiceResponseAsync(String appId, EventType eventType)
package: com.microsoft.azure.applicationinsights.query
metadata: {}
