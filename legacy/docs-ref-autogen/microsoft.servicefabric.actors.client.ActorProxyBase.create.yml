### YamlMime:JavaMember
nameWithType: ActorProxyBase.create
type: method
members:
- fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId)
  name: create(Class<T> actorInterfaceType, ActorId actorId)
  nameWithType: ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
  returns:
    description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and TActorInterface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>, and is obtained by calling the <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref> property. </p>

    <p></p>
  syntax: public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId)
  uid: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T>,ActorId)
- fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)
  name: create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)
  nameWithType: ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
  returns:
    description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and TActorInterface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>, and is obtained by calling the <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref> property. </p>

    <p></p>
  syntax: public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, String applicationName)
  uid: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T>,ActorId,String)
- fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)
  name: create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)
  nameWithType: ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorServiceAttribute"></xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorServiceAttribute"></xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
  returns:
    description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and TActorInterface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>, and is obtained by calling the <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref> property. </p>

    <p></p>
  syntax: public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName)
  uid: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T>,ActorId,String,String)
- fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  name: create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  nameWithType: ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorServiceAttribute"></xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorServiceAttribute"></xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
  returns:
    description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and TActorInterface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p>

    The applicationName parameter can be null if the client is running as part of the same Service Fabric application as the actor service it intends to communicate with. In this case, the application name is determined from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>, and is obtained by calling the <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref> property. </p>

    <p></p>
  syntax: public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  uid: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T>,ActorId,String,String,String)
- fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)
  name: create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)
  nameWithType: ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and TActorInterface. The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax: public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri)
  uid: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T>,ActorId,URI)
- fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)
  name: create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)
  nameWithType: ActorProxyBase.create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An actor proxy object that implements <xref uid="microsoft.servicefabric.actors.client.ActorProxy" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and TActorInterface. The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    type: static&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax: public static static<T extends Actor> T create(Class<T> actorInterfaceType, ActorId actorId, URI serviceUri, String listenerName)
  uid: microsoft.servicefabric.actors.client.ActorProxyBase.create(Class<T>,ActorId,URI,String)
uid: microsoft.servicefabric.actors.client.ActorProxyBase.create*
fullName: microsoft.servicefabric.actors.client.ActorProxyBase.create
name: create(Class<T> actorInterfaceType, ActorId actorId)
package: microsoft.servicefabric.actors.client
metadata: {}
