### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.close()
  name: close()
  nameWithType: ProvisioningDeviceClient.close()
  summary: <p>Closes all the executors opened by the client if they have not already closed. </p>
  syntax: public void close()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.close()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)
  name: create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)
  nameWithType: ProvisioningDeviceClient.create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)
  parameters:
  - description: >-
      <p>global endpoint for the service to connect to. Cannot be<code>null 

          </code> . </p>
    name: globalEndpoint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>IdScope for the instance of the service hosted by you. Cannot be<code>null 

          </code> . </p>
    name: idScope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Protocol to communicate with the service onto. Cannot be<code>null 

          </code> . </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientTransportProtocol?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientTransportProtocol&text=ProvisioningDeviceClientTransportProtocol" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Security Provider for X509 or TPM flow. Cannot be<code>null 

          </code> . </p>
    name: securityProvider
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider&text=SecurityProvider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if any of the underlying API calls fail to process. </p>
  returns:
    description: <p>An instance of ProvisioningDeviceClient </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient&text=ProvisioningDeviceClient" data-throw-if-not-resolved="False"/>
  summary: <p>Creates an instance of ProvisioningDeviceClient </p>
  syntax: public static ProvisioningDeviceClient create(String globalEndpoint, String idScope, ProvisioningDeviceClientTransportProtocol protocol, SecurityProvider securityProvider)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.create(String,String,ProvisioningDeviceClientTransportProtocol,SecurityProvider)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)
  name: registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)
  nameWithType: ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)
  parameters:
  - description: >-
      <p>Callback where you can retrieve the status of registration like iothub uri and the registered device or any exception that was caused during registration process. Cannot be<code>null 

          </code> . </p>
    name: provisioningDeviceClientRegistrationCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback&text=ProvisioningDeviceClientRegistrationCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Context for the callback. Can be<code>null 

          </code> . </p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if any of the underlying API calls fail to process. </p>
  summary: <p>Register's a device with the service and provides you with iothub uri and the registered device. </p>
  syntax: public void registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)
  name: registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)
  nameWithType: ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)
  parameters:
  - description: >-
      <p>Callback where you can retrieve the status of registration like iothub uri and the registered device or any exception that was caused during registration process. Cannot be<code>null 

          </code> . </p>
    name: provisioningDeviceClientRegistrationCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClientRegistrationCallback&text=ProvisioningDeviceClientRegistrationCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Context for the callback. Can be<code>null 

          </code> . </p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Additional data for device registration. </p>
    name: additionalData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.AdditionalData?alt=com.microsoft.azure.sdk.iot.provisioning.device.AdditionalData&text=AdditionalData" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: <p>if any of the underlying API calls fail to process. </p>
  summary: <p>Register's a device with the service and provides you with iothub uri and the registered device. </p>
  syntax: public void registerDevice(ProvisioningDeviceClientRegistrationCallback provisioningDeviceClientRegistrationCallback, Object context, AdditionalData additionalData)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient.registerDevice(ProvisioningDeviceClientRegistrationCallback,Object,AdditionalData)
nameWithType: ProvisioningDeviceClient
syntax: public class ProvisioningDeviceClient
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient
fullName: com.microsoft.azure.sdk.iot.provisioning.device.ProvisioningDeviceClient
name: ProvisioningDeviceClient
package: com.microsoft.azure.sdk.iot.provisioning.device
metadata: {}
