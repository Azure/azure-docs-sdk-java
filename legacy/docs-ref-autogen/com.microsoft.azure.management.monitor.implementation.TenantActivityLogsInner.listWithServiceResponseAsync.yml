### YamlMime:JavaMember
nameWithType: TenantActivityLogsInner.listWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.management.monitor.implementation.TenantActivityLogsInner.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: TenantActivityLogsInner.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;EventDataInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.monitor.implementation.EventDataInner?alt=com.microsoft.azure.management.monitor.implementation.EventDataInner&text=EventDataInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the Activity Logs for the Tenant.&lt;br&gt;Everything that is applicable to the API to get the Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).&lt;br&gt;One thing to point out here is that this API does *not* retrieve the logs at the individual subscription of the tenant but only surfaces the logs that were generated at the tenant level.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<EventDataInner>>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.management.monitor.implementation.TenantActivityLogsInner.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.management.monitor.implementation.TenantActivityLogsInner.listWithServiceResponseAsync(final String filter, final String select)
  name: listWithServiceResponseAsync(final String filter, final String select)
  nameWithType: TenantActivityLogsInner.listWithServiceResponseAsync(final String filter, final String select)
  parameters:
  - description: "<p>Reduces the set of data collected. &lt;br&gt;The **$filter** is very restricted and allows only the following patterns.&lt;br&gt;- List events for a resource group: $filter=eventTimestamp ge '&lt;Start Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and eventChannels eq 'Admin, Operation' and resourceGroupName eq '&lt;ResourceGroupName&gt;'.&lt;br&gt;- List events for resource: $filter=eventTimestamp ge '&lt;Start Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and eventChannels eq 'Admin, Operation' and resourceUri eq '&lt;ResourceURI&gt;'.&lt;br&gt;- List events for a subscription: $filter=eventTimestamp ge '&lt;Start Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and eventChannels eq 'Admin, Operation'.&lt;br&gt;- List events for a resource provider: $filter=eventTimestamp ge '&lt;Start Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and eventChannels eq 'Admin, Operation' and resourceProvider eq '&lt;ResourceProviderName&gt;'.&lt;br&gt;- List events for a correlation Id: api-version=2014-04-01&amp;$filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and eventTimestamp le '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin, Operation' and correlationId eq '&lt;CorrelationID&gt;'.&lt;br&gt;**NOTE**: No other syntax is allowed. </p>"
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: '<p>Used to fetch events with only the given properties.&lt;br&gt;The **$select** argument is a comma separated list of property names to be returned. Possible values are: *authorization*, *claims*, *correlationId*, *description*, *eventDataId*, *eventName*, *eventTimestamp*, *httpRequest*, *level*, *operationId*, *operationName*, *properties*, *resourceGroupName*, *resourceProviderName*, *resourceId*, *status*, *submissionTimestamp*, *subStatus*, *subscriptionId* </p>'
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;EventDataInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.monitor.implementation.EventDataInner?alt=com.microsoft.azure.management.monitor.implementation.EventDataInner&text=EventDataInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Gets the Activity Logs for the Tenant.&lt;br&gt;Everything that is applicable to the API to get the Activity Logs for the subscription is applicable to this API (the parameters, $filter, etc.).&lt;br&gt;One thing to point out here is that this API does *not* retrieve the logs at the individual subscription of the tenant but only surfaces the logs that were generated at the tenant level.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<EventDataInner>>> listWithServiceResponseAsync(final String filter, final String select)
  uid: com.microsoft.azure.management.monitor.implementation.TenantActivityLogsInner.listWithServiceResponseAsync(final String,final String)
uid: com.microsoft.azure.management.monitor.implementation.TenantActivityLogsInner.listWithServiceResponseAsync*
fullName: com.microsoft.azure.management.monitor.implementation.TenantActivityLogsInner.listWithServiceResponseAsync
name: listWithServiceResponseAsync()
package: com.microsoft.azure.management.monitor.implementation
metadata: {}
