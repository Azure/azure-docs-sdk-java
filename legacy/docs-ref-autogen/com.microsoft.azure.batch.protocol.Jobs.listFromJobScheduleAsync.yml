### YamlMime:JavaMember
nameWithType: Jobs.listFromJobScheduleAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId)
  name: listFromJobScheduleAsync(final String jobScheduleId)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  name: listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions&text=JobListFromJobScheduleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String,final JobListFromJobScheduleOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  name: listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions&text=JobListFromJobScheduleOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String,final JobListFromJobScheduleOptions,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  name: listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String,final ListOperationCallback<CloudJob>)
uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync*
fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync
name: listFromJobScheduleAsync(final String jobScheduleId)
package: com.microsoft.azure.batch.protocol
metadata: {}
