### YamlMime:JavaMember
nameWithType: DeviceRegistrationParser.DeviceRegistrationParser
type: constructor
members:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser.DeviceRegistrationParser.DeviceRegistrationParser(String registrationId, String customPayload)
  name: DeviceRegistrationParser(String registrationId, String customPayload)
  nameWithType: DeviceRegistrationParser.DeviceRegistrationParser(String registrationId, String customPayload)
  parameters:
  - description: >-
      <p>Registration Id to be sent to the service. Cannot be a<code>null 

          </code> or empty value. </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Custom Payload being sent to the DPS service. Can be a<code>null 

          </code> or empty value. </p>
    name: customPayload
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>If the provided registration id was<code>null 

          </code> or empty. </p>
  summary: <p>Constructor for Device Registration for X509 flow </p>
  syntax: public DeviceRegistrationParser(String registrationId, String customPayload)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser.DeviceRegistrationParser.DeviceRegistrationParser(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser.DeviceRegistrationParser.DeviceRegistrationParser(String registrationId, String customPayload, String endorsementKey, String storageRootKey)
  name: DeviceRegistrationParser(String registrationId, String customPayload, String endorsementKey, String storageRootKey)
  nameWithType: DeviceRegistrationParser.DeviceRegistrationParser(String registrationId, String customPayload, String endorsementKey, String storageRootKey)
  parameters:
  - description: >-
      <p>Registration Id to be sent to the service. Cannot be a<code>null 

          </code> or empty value. </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Custom Payload being sent to the DPS service. Can be a<code>null 

          </code> or empty value. </p>
    name: customPayload
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>endorsement key to be sent to the service. Cannot be a<code>null 

          </code> or empty value. </p>
    name: endorsementKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Storage Root Key to be sent to the service. Can be a<code>null 

          </code> value. </p>
    name: storageRootKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>is thrown if any of the input parameters are invalid. </p>
  summary: <p>Constructor for Device Registration for TPM flow </p>
  syntax: public DeviceRegistrationParser(String registrationId, String customPayload, String endorsementKey, String storageRootKey)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser.DeviceRegistrationParser.DeviceRegistrationParser(String,String,String,String)
uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser.DeviceRegistrationParser.DeviceRegistrationParser*
fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser.DeviceRegistrationParser.DeviceRegistrationParser
name: DeviceRegistrationParser
package: com.microsoft.azure.sdk.iot.provisioning.device.internal.parser
metadata: {}
