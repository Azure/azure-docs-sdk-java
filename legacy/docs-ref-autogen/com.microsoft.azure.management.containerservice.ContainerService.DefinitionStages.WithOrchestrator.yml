### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator
  id: WithOrchestrator
  parent: com.microsoft.azure.management.containerservice
  children:
  - com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()
  - com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()
  - com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()
  href: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.yml
  langs:
  - java
  name: ContainerService.DefinitionStages.WithOrchestrator
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator
  type: Interface
  source:
    remote: &o0
      path: azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/ContainerService.java
      branch: master
      repo: https://github.com/Azure/azure-libraries-for-java
    path: azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/ContainerService.java
    startLine: 143
  package: com.microsoft.azure.management.containerservice
  summary: "<p>The stage of the container service definition allowing to specify orchestration type. </p>"
  syntax:
    content: public interface WithOrchestrator
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()
  id: withDcosOrchestration()
  parent: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator
  href: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.yml
  langs:
  - java
  name: withDcosOrchestration()
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration()
  overload: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/ContainerService.java
    startLine: 154
  package: com.microsoft.azure.management.containerservice
  summary: "<p>Specifies the DCOS orchestration type for the container service. </p>"
  syntax:
    content: public WithLinux withDcosOrchestration()
    return:
      type: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()
  id: withKubernetesOrchestration()
  parent: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator
  href: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.yml
  langs:
  - java
  name: withKubernetesOrchestration()
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration()
  overload: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/ContainerService.java
    startLine: 160
  package: com.microsoft.azure.management.containerservice
  summary: "<p>Specifies the Kubernetes orchestration type for the container service. </p>"
  syntax:
    content: public WithServicePrincipalProfile withKubernetesOrchestration()
    return:
      type: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()
  id: withSwarmOrchestration()
  parent: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator
  href: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.yml
  langs:
  - java
  name: withSwarmOrchestration()
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration()
  overload: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-containerservice/src/main/java/com/microsoft/azure/management/containerservice/ContainerService.java
    startLine: 148
  package: com.microsoft.azure.management.containerservice
  summary: "<p>Specifies the Swarm orchestration type for the container service. </p>"
  syntax:
    content: public WithLinux withSwarmOrchestration()
    return:
      type: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux
      description: <p>the next stage of the definition </p>
references:
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration*
  name: withSwarmOrchestration
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withSwarmOrchestration
  package: com.microsoft.azure.management.containerservice
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration*
  name: withDcosOrchestration
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withDcosOrchestration
  package: com.microsoft.azure.management.containerservice
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration*
  name: withKubernetesOrchestration
  nameWithType: ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithOrchestrator.withKubernetesOrchestration
  package: com.microsoft.azure.management.containerservice
- uid: com.microsoft.azure.management.containerservice.ContainerService.Definition
  parent: com.microsoft.azure.management.containerservice
  href: com.microsoft.azure.management.containerservice.ContainerService.Definition.yml
  name: ContainerService.Definition
  nameWithType: ContainerService.Definition
  fullName: com.microsoft.azure.management.containerservice.ContainerService.Definition
  type: Interface
  summary: "<p>Container interface for all the definitions related to a container service. </p>"
  syntax:
    content: public interface Definition extends ContainerService.DefinitionStages.Blank,ContainerService.DefinitionStages.WithGroup,ContainerService.DefinitionStages.WithOrchestrator,ContainerService.DefinitionStages.WithMasterNodeCount,ContainerService.DefinitionStages.WithLinux,ContainerService.DefinitionStages.WithLinuxRootUsername,ContainerService.DefinitionStages.WithLinuxSshKey,ContainerService.DefinitionStages.WithAgentPool,ContainerService.DefinitionStages.WithServicePrincipalProfile,ContainerService.DefinitionStages.WithCreate
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux
  parent: com.microsoft.azure.management.containerservice
  href: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux.yml
  name: ContainerService.DefinitionStages.WithLinux
  nameWithType: ContainerService.DefinitionStages.WithLinux
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithLinux
  type: Interface
  summary: "<p>The stage of the container service definition allowing the start of defining Linux specific settings. </p>"
  syntax:
    content: public interface WithLinux
- uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSwarmOrchestration()
  parent: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
  href: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.yml
  name: withSwarmOrchestration()
  nameWithType: ContainerServiceImpl.withSwarmOrchestration()
  fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withSwarmOrchestration()
  type: Method
  summary: "<p>Specifies the Swarm orchestration type for the container service. </p>"
  syntax:
    content: public ContainerServiceImpl withSwarmOrchestration()
    return:
      type: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withDcosOrchestration()
  parent: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
  href: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.yml
  name: withDcosOrchestration()
  nameWithType: ContainerServiceImpl.withDcosOrchestration()
  fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withDcosOrchestration()
  type: Method
  summary: "<p>Specifies the DCOS orchestration type for the container service. </p>"
  syntax:
    content: public ContainerServiceImpl withDcosOrchestration()
    return:
      type: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile
  parent: com.microsoft.azure.management.containerservice
  href: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile.yml
  name: ContainerService.DefinitionStages.WithServicePrincipalProfile
  nameWithType: ContainerService.DefinitionStages.WithServicePrincipalProfile
  fullName: com.microsoft.azure.management.containerservice.ContainerService.DefinitionStages.WithServicePrincipalProfile
  type: Interface
  summary: "<p>The stage allowing properties for cluster service principals to be specified. </p>"
  syntax:
    content: public interface WithServicePrincipalProfile
- uid: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withKubernetesOrchestration()
  parent: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
  href: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.yml
  name: withKubernetesOrchestration()
  nameWithType: ContainerServiceImpl.withKubernetesOrchestration()
  fullName: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl.withKubernetesOrchestration()
  type: Method
  summary: "<p>Specifies the Kubernetes orchestration type for the container service. </p>"
  syntax:
    content: public ContainerServiceImpl withKubernetesOrchestration()
    return:
      type: com.microsoft.azure.management.containerservice.implementation.ContainerServiceImpl
      description: <p>the next stage of the definition </p>
