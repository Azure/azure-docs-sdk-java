### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.ICloseable.close()
- com.microsoft.azure.servicebus.ICloseable.closeAsync()
- com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
- com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()
- com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()
- com.microsoft.azure.servicebus.IMessageBrowser.peek()
- com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
- com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
- com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
- com.microsoft.azure.servicebus.IMessageReceiver.receive()
- com.microsoft.azure.servicebus.IMessageReceiver.receive(Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()
- com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int,Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int,Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(Collection<Long>)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long>)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(IMessage)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int)
methods:
- com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
- com.microsoft.azure.servicebus.IMessageSession.getSessionId()
- com.microsoft.azure.servicebus.IMessageSession.getState()
- com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
- com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
- com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
- com.microsoft.azure.servicebus.IMessageSession.setState(byte [])
- com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte [])
nameWithType: IMessageSession
syntax: public interface IMessageSession extends IMessageReceiver
type: interface
uid: com.microsoft.azure.servicebus.IMessageSession
fullName: com.microsoft.azure.servicebus.IMessageSession
name: IMessageSession
package: com.microsoft.azure.servicebus
summary: >-
  <p>Describes a Session object. IMessageSession can be used to perform operations on sessions. </p>

  <p>Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session. </p>

  <p>Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="" data-throw-if-not-resolved="false">Message#sessionId</xref> property on Message to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property. </p>

  <p>Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears. </p>
metadata: {}
