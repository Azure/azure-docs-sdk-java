### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.abandon(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.abandonAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.ICloseable.close()
- com.microsoft.azure.servicebus.ICloseable.closeAsync()
- com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.complete(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.completeAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.defer(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageReceiver.deferAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
- com.microsoft.azure.servicebus.IMessageReceiver.getPrefetchCount()
- com.microsoft.azure.servicebus.IMessageReceiver.getReceiveMode()
- com.microsoft.azure.servicebus.IMessageBrowser.peek()
- com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
- com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
- com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
- com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
- com.microsoft.azure.servicebus.IMessageReceiver.receive()
- com.microsoft.azure.servicebus.IMessageReceiver.receive(Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync()
- com.microsoft.azure.servicebus.IMessageReceiver.receiveAsync(Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatch(int,Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveBatchAsync(int,Duration)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessage(long)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageAsync(long)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatch(Collection<Long>)
- com.microsoft.azure.servicebus.IMessageReceiver.receiveDeferredMessageBatchAsync(Collection<Long>)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(IMessage)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLock(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(IMessage)
- com.microsoft.azure.servicebus.IMessageReceiver.renewMessageLockAsync(UUID)
- com.microsoft.azure.servicebus.IMessageReceiver.setPrefetchCount(int)
methods:
- fullName: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
  name: getLockedUntilUtc()
  nameWithType: IMessageSession.getLockedUntilUtc()
  returns:
    description: <p>Gets the time that the session identified by <xref uid="com.microsoft.azure.servicebus.IMessageSession.getSessionId()" data-throw-if-not-resolved="false" data-raw-source="IMessageSession#getSessionId()"></xref> is locked until for this client. </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  syntax: public Instant getLockedUntilUtc()
  uid: com.microsoft.azure.servicebus.IMessageSession.getLockedUntilUtc()
- fullName: com.microsoft.azure.servicebus.IMessageSession.getSessionId()
  name: getSessionId()
  nameWithType: IMessageSession.getSessionId()
  returns:
    description: <p>Gets the SessionId. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getSessionId()
  uid: com.microsoft.azure.servicebus.IMessageSession.getSessionId()
- fullName: com.microsoft.azure.servicebus.IMessageSession.getState()
  name: getState()
  nameWithType: IMessageSession.getState()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if get state failed. </p>
  returns:
    description: <p>The session state </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the session state.</p>

    <p></p>
  syntax: public byte [] getState()
  uid: com.microsoft.azure.servicebus.IMessageSession.getState()
- fullName: com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
  name: getStateAsync()
  nameWithType: IMessageSession.getStateAsync()
  returns:
    description: <p>a CompletableFuture representing the pending session state retrieving. </p>
    type: <xref href="CompletableFuture%3Cbyte%5B%5D%3E?alt=CompletableFuture%3Cbyte%5B%5D%3E&text=CompletableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Asynchronously gets the session state. </p>
  syntax: public CompletableFuture<byte[]> getStateAsync()
  uid: com.microsoft.azure.servicebus.IMessageSession.getStateAsync()
- fullName: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
  name: renewSessionLock()
  nameWithType: IMessageSession.renewSessionLock()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the renew failed. </p>
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus.IMessageSession.getSessionId()" data-throw-if-not-resolved="false" data-raw-source="IMessageSession#getSessionId()"></xref>. The lock will be renewed based on the setting specified on the entity. </p>

    <p>When you accept a session, the session is locked for this client instance by the service for a duration as specified during the Queue/Subscription creation. If processing of the session requires longer than this duration, the session-lock needs to be renewed. For each renewal, the session-lock is renewed by the entity's LockDuration. </p>

    <p>Renewal of session renews all the messages in the session as well. Each individual message need not be renewed.</p>

    <p></p>
  syntax: public void renewSessionLock()
  uid: com.microsoft.azure.servicebus.IMessageSession.renewSessionLock()
- fullName: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
  name: renewSessionLockAsync()
  nameWithType: IMessageSession.renewSessionLockAsync()
  returns:
    description: <p>a CompletableFuture representing the pending renew. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renews the lock on the session specified by the <xref uid="com.microsoft.azure.servicebus.IMessageSession.getSessionId()" data-throw-if-not-resolved="false" data-raw-source="IMessageSession#getSessionId()"></xref>. The lock will be renewed based on the setting specified on the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> renewSessionLockAsync()
  uid: com.microsoft.azure.servicebus.IMessageSession.renewSessionLockAsync()
- fullName: com.microsoft.azure.servicebus.IMessageSession.setState(byte[] state)
  name: setState(byte[] state)
  nameWithType: IMessageSession.setState(byte[] state)
  parameters:
  - description: <p>The session state. </p>
    name: state
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the set state failed. </p>
  summary: >-
    <p>Set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus.IMessageSession.getState()" data-throw-if-not-resolved="false" data-raw-source="IMessageSession#getState()"></xref>.</p>

    <p></p>
  syntax: public void setState(byte[] state)
  uid: com.microsoft.azure.servicebus.IMessageSession.setState(byte [])
- fullName: com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte[] state)
  name: setStateAsync(byte[] state)
  nameWithType: IMessageSession.setStateAsync(byte[] state)
  parameters:
  - description: <p>The session state. </p>
    name: state
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session state setting. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously set a custom state on the session which can be later retrieved using <xref uid="com.microsoft.azure.servicebus.IMessageSession.getState()" data-throw-if-not-resolved="false" data-raw-source="IMessageSession#getState()"></xref>.</p>

    <p></p>
  syntax: public CompletableFuture<Void> setStateAsync(byte[] state)
  uid: com.microsoft.azure.servicebus.IMessageSession.setStateAsync(byte [])
nameWithType: IMessageSession
syntax: public interface IMessageSession extends IMessageReceiver
type: interface
uid: com.microsoft.azure.servicebus.IMessageSession
fullName: com.microsoft.azure.servicebus.IMessageSession
name: IMessageSession
package: com.microsoft.azure.servicebus
summary: >-
  <p>Describes a Session object. IMessageSession can be used to perform operations on sessions. </p>

  <p>Service Bus Sessions, also called 'Groups' in the AMQP 1.0 protocol, are unbounded sequences of related messages. ServiceBus guarantees ordering of messages in a session. </p>

  <p>Any sender can create a session when submitting messages into a Topic or Queue by setting the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Message#sessionId"></xref> property on Message to some application defined unique identifier. At the AMQP 1.0 protocol level, this value maps to the group-id property. </p>

  <p>Sessions come into existence when there is at least one message with the session's SessionId in the Queue or Topic subscription. Once a Session exists, there is no defined moment or gesture for when the session expires or disappears. </p>
metadata: {}
