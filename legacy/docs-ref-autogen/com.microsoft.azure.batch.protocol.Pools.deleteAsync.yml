### YamlMime:JavaMember
nameWithType: Pools.deleteAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId)
  name: deleteAsync(String poolId)
  nameWithType: Pools.deleteAsync(String poolId)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String poolId)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String poolId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  name: deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  nameWithType: Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteOptions&text=PoolDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String,PoolDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool to delete. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.PoolDeleteOptions&text=PoolDeleteOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a pool from the specified account. When you request that a pool be deleted, the following actions occur: the pool state is set to deleting; any ongoing resize operation on the pool are stopped; the Batch service starts resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued (as if a resize pool operation had been requested with the default requeue option); finally, the pool is removed from the system. Because running tasks are requeued, the user can rerun these tasks by updating their job to target a different pool. The tasks can then run on the new pool. If you want to override the requeue behavior, then you should call resize pool explicitly to shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete API on a pool in the deleting state, it will fail with HTTP status code 409 with error code PoolBeingDeleted.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String poolId, PoolDeleteOptions poolDeleteOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync(String,PoolDeleteOptions,final ServiceCallback<Void>)
uid: com.microsoft.azure.batch.protocol.Pools.deleteAsync*
fullName: com.microsoft.azure.batch.protocol.Pools.deleteAsync
name: deleteAsync(String poolId)
package: com.microsoft.azure.batch.protocol
metadata: {}
