### YamlMime:JavaMember
nameWithType: FabricReplicator.closeAsync
type: method
members:
- fullName: system.fabric.FabricReplicator.closeAsync(CancellationToken cancellationToken)
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: FabricReplicator.closeAsync(CancellationToken cancellationToken)
  overridden: system.fabric.Replicator.closeAsync(CancellationToken)
  parameters:
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false">system.fabric.CancellationToken</xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A future that represents the asynchronous operation. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false">FabricException</xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture?alt=CompletableFuture&text=CompletableFuture" data-throw-if-not-resolved="False"/>
  summary: <p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code. </p>
  syntax: public CompletableFuture closeAsync(CancellationToken cancellationToken)
  uid: system.fabric.FabricReplicator.closeAsync(CancellationToken)
uid: system.fabric.FabricReplicator.closeAsync*
fullName: system.fabric.FabricReplicator.closeAsync(CancellationToken cancellationToken)
name: closeAsync(CancellationToken cancellationToken)
package: system.fabric
metadata: {}
