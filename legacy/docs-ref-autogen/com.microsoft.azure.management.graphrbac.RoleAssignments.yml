### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.graphrbac.RoleAssignments.getByScope(String scope, String name)
  name: getByScope(String scope, String name)
  nameWithType: RoleAssignments.getByScope(String scope, String name)
  parameters:
  - description: <p>the scope of the role assignment </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role assignment </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an immutable representation of the role assignment </p>
    type: <xref href="com.microsoft.azure.management.graphrbac.RoleAssignment?alt=com.microsoft.azure.management.graphrbac.RoleAssignment&text=RoleAssignment" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the information about a role assignment based on scope and name.</p>

    <p></p>
  syntax: public RoleAssignment getByScope(String scope, String name)
  uid: com.microsoft.azure.management.graphrbac.RoleAssignments.getByScope(String,String)
- fullName: com.microsoft.azure.management.graphrbac.RoleAssignments.getByScopeAsync(String scope, String name)
  name: getByScopeAsync(String scope, String name)
  nameWithType: RoleAssignments.getByScopeAsync(String scope, String name)
  parameters:
  - description: <p>the scope of the role assignment </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role assignment </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an immutable representation of the role assignment </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleAssignment?alt=com.microsoft.azure.management.graphrbac.RoleAssignment&text=RoleAssignment" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a role assignment based on scope and name.</p>

    <p></p>
  syntax: public Observable<RoleAssignment> getByScopeAsync(String scope, String name)
  uid: com.microsoft.azure.management.graphrbac.RoleAssignments.getByScopeAsync(String,String)
- fullName: com.microsoft.azure.management.graphrbac.RoleAssignments.getByScopeAsync(String scope, String name, ServiceCallback<RoleAssignment> callback)
  name: getByScopeAsync(String scope, String name, ServiceCallback<RoleAssignment> callback)
  nameWithType: RoleAssignments.getByScopeAsync(String scope, String name, ServiceCallback<RoleAssignment> callback)
  parameters:
  - description: <p>the scope of the role assignment </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role assignment </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback when the operation finishes </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleAssignment?alt=com.microsoft.azure.management.graphrbac.RoleAssignment&text=RoleAssignment" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>an immutable representation of the role assignment </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleAssignment?alt=com.microsoft.azure.management.graphrbac.RoleAssignment&text=RoleAssignment" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a role assignment based on scope and name.</p>

    <p></p>
  syntax: public ServiceFuture<RoleAssignment> getByScopeAsync(String scope, String name, ServiceCallback<RoleAssignment> callback)
  uid: com.microsoft.azure.management.graphrbac.RoleAssignments.getByScopeAsync(String,String,ServiceCallback<RoleAssignment>)
- fullName: com.microsoft.azure.management.graphrbac.RoleAssignments.listByScope(String scope)
  name: listByScope(String scope)
  nameWithType: RoleAssignments.listByScope(String scope)
  parameters:
  - description: <p>the scope of the role assignments </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a list of role assignments </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleAssignment?alt=com.microsoft.azure.management.graphrbac.RoleAssignment&text=RoleAssignment" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List role assignments in a scope.</p>

    <p></p>
  syntax: public PagedList<RoleAssignment> listByScope(String scope)
  uid: com.microsoft.azure.management.graphrbac.RoleAssignments.listByScope(String)
- fullName: com.microsoft.azure.management.graphrbac.RoleAssignments.listByScopeAsync(String scope)
  name: listByScopeAsync(String scope)
  nameWithType: RoleAssignments.listByScopeAsync(String scope)
  parameters:
  - description: <p>the scope of the role assignments </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an observable of role assignments </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleAssignment?alt=com.microsoft.azure.management.graphrbac.RoleAssignment&text=RoleAssignment" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List role assignments in a scope.</p>

    <p></p>
  syntax: public Observable<RoleAssignment> listByScopeAsync(String scope)
  uid: com.microsoft.azure.management.graphrbac.RoleAssignments.listByScopeAsync(String)
nameWithType: RoleAssignments
syntax: public interface RoleAssignments extends SupportsGettingById<RoleAssignment>,SupportsCreating<RoleAssignment.DefinitionStages.Blank>,SupportsBatchCreation<RoleAssignment>,SupportsDeletingById,HasManager<GraphRbacManager>,HasInner<RoleAssignmentsInner>
type: interface
uid: com.microsoft.azure.management.graphrbac.RoleAssignments
fullName: com.microsoft.azure.management.graphrbac.RoleAssignments
name: RoleAssignments
package: com.microsoft.azure.management.graphrbac
summary: <p>Entry point to role assignment management API. </p>
metadata: {}
