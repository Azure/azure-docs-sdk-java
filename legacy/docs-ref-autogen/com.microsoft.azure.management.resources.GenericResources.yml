### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingInResourceGroupByTag.listByTag(String,String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingInResourceGroupByTag.listByTagAsync(String,String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.resources.GenericResources.checkExistence(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  name: checkExistence(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  nameWithType: GenericResources.checkExistence(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  parameters:
  - description: <p>the resource group's name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the resource provider's namespace </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the parent's resource path </p>
    name: parentResourcePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the type of the resource </p>
    name: resourceType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the resource </p>
    name: resourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the API version </p>
    name: apiVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if the resource exists; false otherwise </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if a resource exists in a resource group.</p>

    <p></p>
  syntax: public boolean checkExistence(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  uid: com.microsoft.azure.management.resources.GenericResources.checkExistence(String,String,String,String,String,String)
- fullName: com.microsoft.azure.management.resources.GenericResources.checkExistenceById(String id)
  name: checkExistenceById(String id)
  nameWithType: GenericResources.checkExistenceById(String id)
  parameters:
  - description: <p>the ID of the resource. </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if the resource exists; false otherwise </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if a resource exists.</p>

    <p></p>
  syntax: public boolean checkExistenceById(String id)
  uid: com.microsoft.azure.management.resources.GenericResources.checkExistenceById(String)
- fullName: com.microsoft.azure.management.resources.GenericResources.delete(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  name: delete(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  nameWithType: GenericResources.delete(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  parameters:
  - description: <p>The name of the resource group. The name is case insensitive. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: parentResourcePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the String value </p>
    name: apiVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete resource and all of its child resources.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  uid: com.microsoft.azure.management.resources.GenericResources.delete(String,String,String,String,String,String)
- fullName: com.microsoft.azure.management.resources.GenericResources.deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  name: deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  nameWithType: GenericResources.deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  parameters:
  - description: <p>The name of the resource group. The name is case insensitive. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: parentResourcePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the String value </p>
    name: apiVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete resource and all of its child resources asynchronously.</p>

    <p></p>
  syntax: public Completable deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  uid: com.microsoft.azure.management.resources.GenericResources.deleteAsync(String,String,String,String,String,String)
- fullName: com.microsoft.azure.management.resources.GenericResources.deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, ServiceCallback<Void> callback)
  name: deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, ServiceCallback<Void> callback)
  nameWithType: GenericResources.deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, ServiceCallback<Void> callback)
  parameters:
  - description: <p>The name of the resource group. The name is case insensitive. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: parentResourcePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the String value </p>
    name: apiVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure</p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete resource and all of its child resources asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.resources.GenericResources.deleteAsync(String,String,String,String,String,String,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.resources.GenericResources.get(String resourceGroupName, String providerNamespace, String resourceType, String resourceName)
  name: get(String resourceGroupName, String providerNamespace, String resourceType, String resourceName)
  nameWithType: GenericResources.get(String resourceGroupName, String providerNamespace, String resourceType, String resourceName)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the provider namespace </p>
    name: providerNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the resource type </p>
    name: resourceType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the resource </p>
    name: resourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the generic resource </p>
    type: <xref href="com.microsoft.azure.management.resources.GenericResource?alt=com.microsoft.azure.management.resources.GenericResource&text=GenericResource" data-throw-if-not-resolved="False"/>
  summary: <p>Returns a resource belonging to a resource group. </p>
  syntax: public GenericResource get(String resourceGroupName, String providerNamespace, String resourceType, String resourceName)
  uid: com.microsoft.azure.management.resources.GenericResources.get(String,String,String,String)
- fullName: com.microsoft.azure.management.resources.GenericResources.get(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  name: get(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  nameWithType: GenericResources.get(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  parameters:
  - description: <p>The name of the resource group. The name is case insensitive. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceProviderNamespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: parentResourcePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Resource identity. </p>
    name: resourceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the String value </p>
    name: apiVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the generic resource </p>
    type: <xref href="com.microsoft.azure.management.resources.GenericResource?alt=com.microsoft.azure.management.resources.GenericResource&text=GenericResource" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a resource belonging to a resource group.</p>

    <p></p>
  syntax: public GenericResource get(String resourceGroupName, String resourceProviderNamespace, String parentResourcePath, String resourceType, String resourceName, String apiVersion)
  uid: com.microsoft.azure.management.resources.GenericResources.get(String,String,String,String,String,String)
- fullName: com.microsoft.azure.management.resources.GenericResources.moveResources(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  name: moveResources(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  nameWithType: GenericResources.moveResources(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  parameters:
  - description: <p>Source resource group name </p>
    name: sourceResourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>target resource group, can be in a different subscription </p>
    name: targetResourceGroup
    type: <xref href="com.microsoft.azure.management.resources.ResourceGroup?alt=com.microsoft.azure.management.resources.ResourceGroup&text=ResourceGroup" data-throw-if-not-resolved="False"/>
  - description: <p>the list of IDs of the resources to move </p>
    name: resources
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Move resources from one resource group to another.</p>

    <p></p>
  syntax: public void moveResources(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  uid: com.microsoft.azure.management.resources.GenericResources.moveResources(String,ResourceGroup,List<String>)
- fullName: com.microsoft.azure.management.resources.GenericResources.moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  name: moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  nameWithType: GenericResources.moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  parameters:
  - description: <p>Source resource group name </p>
    name: sourceResourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>target resource group, can be in a different subscription </p>
    name: targetResourceGroup
    type: <xref href="com.microsoft.azure.management.resources.ResourceGroup?alt=com.microsoft.azure.management.resources.ResourceGroup&text=ResourceGroup" data-throw-if-not-resolved="False"/>
  - description: <p>the list of IDs of the resources to move</p>
    name: resources
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Move resources from one resource group to another asynchronously.</p>

    <p></p>
  syntax: public Completable moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources)
  uid: com.microsoft.azure.management.resources.GenericResources.moveResourcesAsync(String,ResourceGroup,List<String>)
- fullName: com.microsoft.azure.management.resources.GenericResources.moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources, ServiceCallback<Void> callback)
  name: moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources, ServiceCallback<Void> callback)
  nameWithType: GenericResources.moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources, ServiceCallback<Void> callback)
  parameters:
  - description: <p>Source resource group name </p>
    name: sourceResourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>target resource group, can be in a different subscription </p>
    name: targetResourceGroup
    type: <xref href="com.microsoft.azure.management.resources.ResourceGroup?alt=com.microsoft.azure.management.resources.ResourceGroup&text=ResourceGroup" data-throw-if-not-resolved="False"/>
  - description: <p>the list of IDs of the resources to move </p>
    name: resources
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure</p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Move resources from one resource group to another asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> moveResourcesAsync(String sourceResourceGroupName, ResourceGroup targetResourceGroup, List<String> resources, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.resources.GenericResources.moveResourcesAsync(String,ResourceGroup,List<String>,ServiceCallback<Void>)
nameWithType: GenericResources
syntax: public interface GenericResources extends SupportsListing<GenericResource>,SupportsListingByResourceGroup<GenericResource>,SupportsListingInResourceGroupByTag<GenericResource>,SupportsGettingById<GenericResource>,SupportsCreating<GenericResource.DefinitionStages.Blank>,SupportsDeletingById,HasManager<ResourceManager>
type: interface
uid: com.microsoft.azure.management.resources.GenericResources
fullName: com.microsoft.azure.management.resources.GenericResources
name: GenericResources
package: com.microsoft.azure.management.resources
summary: <p>Entry point to generic resources management API. </p>
metadata: {}
