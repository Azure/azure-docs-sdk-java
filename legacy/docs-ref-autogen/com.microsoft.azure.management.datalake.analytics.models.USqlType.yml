### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.datalake.analytics.models.CatalogItem?alt=com.microsoft.azure.management.datalake.analytics.models.CatalogItem&text=CatalogItem" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.datalake.analytics.models.CatalogItem.computeAccountName()
- com.microsoft.azure.management.datalake.analytics.models.CatalogItem.version()
- com.microsoft.azure.management.datalake.analytics.models.CatalogItem.withComputeAccountName(String)
- com.microsoft.azure.management.datalake.analytics.models.CatalogItem.withVersion(UUID)
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.cSharpName()
  name: cSharpName()
  nameWithType: USqlType.cSharpName()
  returns:
    description: <p>the cSharpName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the cSharpName value.</p>

    <p></p>
  syntax: public String cSharpName()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.cSharpName()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.databaseName()
  name: databaseName()
  nameWithType: USqlType.databaseName()
  returns:
    description: <p>the databaseName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the databaseName value.</p>

    <p></p>
  syntax: public String databaseName()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.databaseName()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.fullCSharpName()
  name: fullCSharpName()
  nameWithType: USqlType.fullCSharpName()
  returns:
    description: <p>the fullCSharpName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the fullCSharpName value.</p>

    <p></p>
  syntax: public String fullCSharpName()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.fullCSharpName()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.isAssemblyType()
  name: isAssemblyType()
  nameWithType: USqlType.isAssemblyType()
  returns:
    description: <p>the isAssemblyType value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the isAssemblyType value.</p>

    <p></p>
  syntax: public Boolean isAssemblyType()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.isAssemblyType()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.isComplexType()
  name: isComplexType()
  nameWithType: USqlType.isComplexType()
  returns:
    description: <p>the isComplexType value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the isComplexType value.</p>

    <p></p>
  syntax: public Boolean isComplexType()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.isComplexType()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.isNullable()
  name: isNullable()
  nameWithType: USqlType.isNullable()
  returns:
    description: <p>the isNullable value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the isNullable value.</p>

    <p></p>
  syntax: public Boolean isNullable()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.isNullable()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.isTableType()
  name: isTableType()
  nameWithType: USqlType.isTableType()
  returns:
    description: <p>the isTableType value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the isTableType value.</p>

    <p></p>
  syntax: public Boolean isTableType()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.isTableType()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.isUserDefined()
  name: isUserDefined()
  nameWithType: USqlType.isUserDefined()
  returns:
    description: <p>the isUserDefined value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the isUserDefined value.</p>

    <p></p>
  syntax: public Boolean isUserDefined()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.isUserDefined()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.name()
  name: name()
  nameWithType: USqlType.name()
  returns:
    description: <p>the name value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name value.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.name()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.principalId()
  name: principalId()
  nameWithType: USqlType.principalId()
  returns:
    description: <p>the principalId value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the principalId value.</p>

    <p></p>
  syntax: public Integer principalId()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.principalId()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.schemaId()
  name: schemaId()
  nameWithType: USqlType.schemaId()
  returns:
    description: <p>the schemaId value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the schemaId value.</p>

    <p></p>
  syntax: public Integer schemaId()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.schemaId()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.schemaName()
  name: schemaName()
  nameWithType: USqlType.schemaName()
  returns:
    description: <p>the schemaName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the schemaName value.</p>

    <p></p>
  syntax: public String schemaName()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.schemaName()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.systemTypeId()
  name: systemTypeId()
  nameWithType: USqlType.systemTypeId()
  returns:
    description: <p>the systemTypeId value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the systemTypeId value.</p>

    <p></p>
  syntax: public Integer systemTypeId()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.systemTypeId()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.typeFamily()
  name: typeFamily()
  nameWithType: USqlType.typeFamily()
  returns:
    description: <p>the typeFamily value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the typeFamily value.</p>

    <p></p>
  syntax: public String typeFamily()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.typeFamily()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.userTypeId()
  name: userTypeId()
  nameWithType: USqlType.userTypeId()
  returns:
    description: <p>the userTypeId value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the userTypeId value.</p>

    <p></p>
  syntax: public Integer userTypeId()
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.userTypeId()
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withCSharpName(String cSharpName)
  name: withCSharpName(String cSharpName)
  nameWithType: USqlType.withCSharpName(String cSharpName)
  parameters:
  - description: <p>the cSharpName value to set </p>
    name: cSharpName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the cSharpName value.</p>

    <p></p>
  syntax: public USqlType withCSharpName(String cSharpName)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withCSharpName(String)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withDatabaseName(String databaseName)
  name: withDatabaseName(String databaseName)
  nameWithType: USqlType.withDatabaseName(String databaseName)
  parameters:
  - description: <p>the databaseName value to set </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the databaseName value.</p>

    <p></p>
  syntax: public USqlType withDatabaseName(String databaseName)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withDatabaseName(String)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withFullCSharpName(String fullCSharpName)
  name: withFullCSharpName(String fullCSharpName)
  nameWithType: USqlType.withFullCSharpName(String fullCSharpName)
  parameters:
  - description: <p>the fullCSharpName value to set </p>
    name: fullCSharpName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the fullCSharpName value.</p>

    <p></p>
  syntax: public USqlType withFullCSharpName(String fullCSharpName)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withFullCSharpName(String)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsAssemblyType(Boolean isAssemblyType)
  name: withIsAssemblyType(Boolean isAssemblyType)
  nameWithType: USqlType.withIsAssemblyType(Boolean isAssemblyType)
  parameters:
  - description: <p>the isAssemblyType value to set </p>
    name: isAssemblyType
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the isAssemblyType value.</p>

    <p></p>
  syntax: public USqlType withIsAssemblyType(Boolean isAssemblyType)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsAssemblyType(Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsComplexType(Boolean isComplexType)
  name: withIsComplexType(Boolean isComplexType)
  nameWithType: USqlType.withIsComplexType(Boolean isComplexType)
  parameters:
  - description: <p>the isComplexType value to set </p>
    name: isComplexType
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the isComplexType value.</p>

    <p></p>
  syntax: public USqlType withIsComplexType(Boolean isComplexType)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsComplexType(Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsNullable(Boolean isNullable)
  name: withIsNullable(Boolean isNullable)
  nameWithType: USqlType.withIsNullable(Boolean isNullable)
  parameters:
  - description: <p>the isNullable value to set </p>
    name: isNullable
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the isNullable value.</p>

    <p></p>
  syntax: public USqlType withIsNullable(Boolean isNullable)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsNullable(Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsTableType(Boolean isTableType)
  name: withIsTableType(Boolean isTableType)
  nameWithType: USqlType.withIsTableType(Boolean isTableType)
  parameters:
  - description: <p>the isTableType value to set </p>
    name: isTableType
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the isTableType value.</p>

    <p></p>
  syntax: public USqlType withIsTableType(Boolean isTableType)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsTableType(Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsUserDefined(Boolean isUserDefined)
  name: withIsUserDefined(Boolean isUserDefined)
  nameWithType: USqlType.withIsUserDefined(Boolean isUserDefined)
  parameters:
  - description: <p>the isUserDefined value to set </p>
    name: isUserDefined
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the isUserDefined value.</p>

    <p></p>
  syntax: public USqlType withIsUserDefined(Boolean isUserDefined)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withIsUserDefined(Boolean)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withName(String name)
  name: withName(String name)
  nameWithType: USqlType.withName(String name)
  parameters:
  - description: <p>the name value to set </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name value.</p>

    <p></p>
  syntax: public USqlType withName(String name)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withName(String)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withPrincipalId(Integer principalId)
  name: withPrincipalId(Integer principalId)
  nameWithType: USqlType.withPrincipalId(Integer principalId)
  parameters:
  - description: <p>the principalId value to set </p>
    name: principalId
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the principalId value.</p>

    <p></p>
  syntax: public USqlType withPrincipalId(Integer principalId)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withPrincipalId(Integer)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withSchemaId(Integer schemaId)
  name: withSchemaId(Integer schemaId)
  nameWithType: USqlType.withSchemaId(Integer schemaId)
  parameters:
  - description: <p>the schemaId value to set </p>
    name: schemaId
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the schemaId value.</p>

    <p></p>
  syntax: public USqlType withSchemaId(Integer schemaId)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withSchemaId(Integer)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withSchemaName(String schemaName)
  name: withSchemaName(String schemaName)
  nameWithType: USqlType.withSchemaName(String schemaName)
  parameters:
  - description: <p>the schemaName value to set </p>
    name: schemaName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the schemaName value.</p>

    <p></p>
  syntax: public USqlType withSchemaName(String schemaName)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withSchemaName(String)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withSystemTypeId(Integer systemTypeId)
  name: withSystemTypeId(Integer systemTypeId)
  nameWithType: USqlType.withSystemTypeId(Integer systemTypeId)
  parameters:
  - description: <p>the systemTypeId value to set </p>
    name: systemTypeId
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the systemTypeId value.</p>

    <p></p>
  syntax: public USqlType withSystemTypeId(Integer systemTypeId)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withSystemTypeId(Integer)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withTypeFamily(String typeFamily)
  name: withTypeFamily(String typeFamily)
  nameWithType: USqlType.withTypeFamily(String typeFamily)
  parameters:
  - description: <p>the typeFamily value to set </p>
    name: typeFamily
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the typeFamily value.</p>

    <p></p>
  syntax: public USqlType withTypeFamily(String typeFamily)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withTypeFamily(String)
- fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType.withUserTypeId(Integer userTypeId)
  name: withUserTypeId(Integer userTypeId)
  nameWithType: USqlType.withUserTypeId(Integer userTypeId)
  parameters:
  - description: <p>the userTypeId value to set </p>
    name: userTypeId
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the USqlType object itself. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.USqlType?alt=com.microsoft.azure.management.datalake.analytics.models.USqlType&text=USqlType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the userTypeId value.</p>

    <p></p>
  syntax: public USqlType withUserTypeId(Integer userTypeId)
  uid: com.microsoft.azure.management.datalake.analytics.models.USqlType.withUserTypeId(Integer)
nameWithType: USqlType
syntax: public class USqlType extends CatalogItem
type: class
uid: com.microsoft.azure.management.datalake.analytics.models.USqlType
fullName: com.microsoft.azure.management.datalake.analytics.models.USqlType
name: USqlType
package: com.microsoft.azure.management.datalake.analytics.models
summary: <p>A Data Lake Analytics catalog U-SQL type item. </p>
metadata: {}
