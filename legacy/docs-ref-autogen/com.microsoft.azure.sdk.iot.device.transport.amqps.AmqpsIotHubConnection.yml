### YamlMime:JavaType
constructors:
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.AmqpsIotHubConnection(DeviceClientConfig)
fields:
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.amqpsSessionManager
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.connectionId
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="BaseHandler" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler?alt=com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler&text=ErrorLoggingBaseHandler" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler.onConnectionRemoteClose(Event)
- com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler.onSessionRemoteClose(Event)
- com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler.protonJExceptionParser
- com.microsoft.azure.sdk.iot.device.transport.IotHubTransportConnection.sendMessage(Message)
- com.microsoft.azure.sdk.iot.device.transport.IotHubTransportConnection.sendMessageResult(Message,IotHubMessageResult)
methods:
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.addDeviceOperationSession(DeviceClientConfig)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.authenticate()
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.close()
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.convertFromProton(AmqpsMessage,DeviceClientConfig)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.convertToProton(com.microsoft.azure.sdk.iot.device.Message)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.getConnectionId()
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onConnectionBound(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onConnectionInit(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onConnectionUnbound(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onDelivery(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onLinkInit(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onLinkRemoteClose(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onLinkRemoteOpen(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onReactorFinal(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onReactorInit(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onSessionRemoteOpen(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onTimerTask(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.onTransportError(Event)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.open(Queue<DeviceClientConfig>,ScheduledExecutorService)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.sendMessage(com.microsoft.azure.sdk.iot.device.Message)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.sendMessageResult(com.microsoft.azure.sdk.iot.device.Message,IotHubMessageResult)
- com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection.setListener(IotHubListener)
nameWithType: AmqpsIotHubConnection
syntax: public class AmqpsIotHubConnection extends ErrorLoggingBaseHandler implements IotHubTransportConnection
type: class
uid: com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection
fullName: com.microsoft.azure.sdk.iot.device.transport.amqps.AmqpsIotHubConnection
name: AmqpsIotHubConnection
package: com.microsoft.azure.sdk.iot.device.transport.amqps
summary: <p>An AMQPS IotHub connection between a device and an IoTHub. This class contains functionality for sending/receiving a message, and logic to re-establish the connection with the IoTHub in case it gets lost. </p>
metadata: {}
