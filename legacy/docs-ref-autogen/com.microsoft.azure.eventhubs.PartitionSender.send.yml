### YamlMime:JavaMember
nameWithType: PartitionSender.send
type: method
members:
- fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to be sent. </p>
    name: data
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false">EventHubClient#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">EventHubClient#send(Iterable)</xref>, <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false">EventHubClient#send(EventDataBatch)</xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false">EventHubClient#send(EventData, String)</xref> or <xref uid="" data-throw-if-not-resolved="false">EventHubClient#send(Iterable, String)</xref>

    iii. <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false">PartitionSender#send(EventData)</xref>, <xref uid="" data-throw-if-not-resolved="false">PartitionSender#send(Iterable)</xref>, or <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false">PartitionSender#send(EventDataBatch)</xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.

    ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(EventData data)
  uid: com.microsoft.azure.eventhubs.PartitionSender.send(EventData)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)
  name: send(EventDataBatch eventDatas)
  nameWithType: PartitionSender.send(EventDataBatch eventDatas)
  parameters:
  - description: <p>EventDataBatch to send to EventHub </p>
    name: eventDatas
    type: <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operation is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false">EventDataBatch</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. A partitionKey cannot be set when using EventDataBatch with a PartitionSender. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(EventDataBatch eventDatas)
  uid: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData> eventDatas)
  name: send(Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.send(Iterable<EventData> eventDatas)
  parameters:
  - description: <p>batch of events to send to EventHub </p>
    name: eventDatas
    type: Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture<Void>&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false">send(EventData)</xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    Gson gson = new GsonBuilder().create();

    EventHubClient client = EventHubClient.createSync("__connection__");

    PartitionSender senderToPartitionOne = client.createPartitionSenderSync("1");</pre></p>

    <p>

      <pre>while (true)

    {

        LinkedList{&lt;}EventData{&gt;} events = new LinkedList{&lt;}EventData{&gt;}();

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            EventData sendEvent = EventData.create(payloadBytes);

            sendEvent.getProperties().put("from", "javaClient");

            events.add(sendEvent);

        }</pre>

    </p>

    <p>

      <pre>    senderToPartitionOne.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </pre>

    </p>

    <p></p>
  syntax: public CompletableFuture<Void> send(Iterable<EventData> eventDatas)
  uid: com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData>)
uid: com.microsoft.azure.eventhubs.PartitionSender.send*
fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
name: send(EventData data)
package: com.microsoft.azure.eventhubs
metadata: {}
