### YamlMime:JavaMember
nameWithType: Jobs.enableAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId)
  name: enableAsync(String jobId)
  nameWithType: Jobs.enableAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public Observable<Void> enableAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  name: enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  name: enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  nameWithType: Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobEnableOptions&text=JobEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public Observable<Void> enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String,JobEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  name: enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobEnableOptions&text=JobEnableOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String,JobEnableOptions,final ServiceCallback<Void>)
uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync*
fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync
name: enableAsync(String jobId)
package: com.microsoft.azure.batch.protocol
metadata: {}
