### YamlMime:JavaMember
nameWithType: ReliableHashMap<K,V>.computeAsync
type: method
members:
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  name: computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  nameWithType: ReliableHashMap<K,V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value </p>
    name: remappingFunction
    type: <xref href="BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E?alt=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E&text=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, remappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value associated with the specified key, or null if the computed value is null. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).</p>

    <p></p>
  syntax: public CompletableFuture<V> computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  name: computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>key with which the specified value is to be associated. </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the function to compute a value. </p>
    name: remappingFunction
    type: <xref href="BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E?alt=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E&text=BiFunction%3C%3F+super+K%2C+%3F+super+V%2C+%3F+extends+V%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key, remappingFunction or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with the new(computed) value associated with the specified key, or null if the computed value is null. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).</p>

    <p></p>
  syntax: public CompletableFuture<V> computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync(Transaction,K,BiFunction<? super K, ? super V, ? extends V>,Duration,CancellationToken)
uid: microsoft.servicefabric.data.collections.ReliableHashMap.computeAsync*
fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.computeAsync
name: computeAsync(Transaction txn, K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)
package: microsoft.servicefabric.data.collections
metadata: {}
