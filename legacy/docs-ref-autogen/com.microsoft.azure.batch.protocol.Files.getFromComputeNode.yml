### YamlMime:JavaMember
nameWithType: Files.getFromComputeNode
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that contains the file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the compute node file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileGetFromComputeNodeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions" data-throw-if-not-resolved="False"/>
  - description: <p>The OutputStream object which data will be written to if successful. </p>
    name: outputStream
    type: <xref href="OutputStream?alt=OutputStream&text=OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Returns the content of the specified compute node file.</p>

    <p></p>
  syntax: public void getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
  uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String,String,String,FileGetFromComputeNodeOptions,OutputStream)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  name: getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  nameWithType: Files.getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that contains the file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the compute node file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The OutputStream object which data will be written to if successful. </p>
    name: outputStream
    type: <xref href="OutputStream?alt=OutputStream&text=OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax: public void getFromComputeNode(String poolId, String nodeId, String filePath, OutputStream outputStream)
  uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String,String,String,OutputStream)
uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNode*
fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
name: getFromComputeNode(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, OutputStream outputStream)
package: com.microsoft.azure.batch.protocol
metadata: {}
