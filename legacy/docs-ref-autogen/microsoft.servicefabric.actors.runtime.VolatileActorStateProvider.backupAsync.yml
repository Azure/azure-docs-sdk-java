### YamlMime:JavaMember
nameWithType: VolatileActorStateProvider.backupAsync
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.data.BackupOption" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.data.BackupOption"></xref> for the callback </p>
    name: option
    type: <xref href="microsoft.servicefabric.data.BackupOption?alt=microsoft.servicefabric.data.BackupOption&text=BackupOption" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref> that describes timeout for the backup </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  - description: <p>BackupCallbackCallback to be called when the backup folder has been created locally and is ready to be moved out of the node. </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of state managed by this actor state provider</p>

    <p>

      <b>Remarks:</b>Backup/restore is not supported by <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>BackupCallbackCallback to be called when the backup folder has been created locally and is ready to be moved out of the node. </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of state managed by this actor state provider</p>

    <p>

      <b>Remarks:</b>Backup/restore is not supported by <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync*
fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync
name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
package: microsoft.servicefabric.actors.runtime
metadata: {}
