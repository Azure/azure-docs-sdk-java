### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithCollation.withCollation(String)
- com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithMaxSizeBytes.withMaxSizeBytes(long)
- com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithSourceDatabaseId.withSourceDatabase(String)
- com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithSourceDatabaseId.withSourceDatabase(SqlDatabase)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTag(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTags(Map<String, String>)
nameWithType: SqlDatabase.DefinitionStages.WithExistingDatabase
syntax: public interface WithExistingDatabase extends SqlDatabase.DefinitionStages.WithSourceDatabaseId<ParentT>,SqlDatabase.DefinitionStages.WithCreateWithElasticPoolOptions
type: interface
uid: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabase
fullName: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabase
name: SqlDatabase.DefinitionStages.WithExistingDatabase
package: com.microsoft.azure.management.sql
summary: <p>The stage to decide whether using existing database or not. </p>
metadata: {}
