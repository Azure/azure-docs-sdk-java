### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection()
  name: HttpsConnection()
  nameWithType: HttpsConnection.HttpsConnection()
  syntax: protected HttpsConnection()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(URL url, HttpsMethod method)
  name: HttpsConnection(URL url, HttpsMethod method)
  nameWithType: HttpsConnection.HttpsConnection(URL url, HttpsMethod method)
  parameters:
  - description: <p>the URL for the HTTP/HTTPS connection. </p>
    name: url
    type: <xref href="URL?alt=URL&text=URL" data-throw-if-not-resolved="False"/>
  - description: <p>the HTTP method (i.e. GET). </p>
    name: method
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod&text=HttpsMethod" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the connection could not be opened. </p>
  summary: >-
    <p>Constructor. Opens a connection to the given URL. Can be HTTPS or HTTP</p>

    <p></p>
  syntax: public HttpsConnection(URL url, HttpsMethod method)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(URL,HttpsMethod)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings)
  name: HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings)
  nameWithType: HttpsConnection.HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings)
  parameters:
  - description: <p>the URL for the HTTP/HTTPS connection. </p>
    name: url
    type: <xref href="URL?alt=URL&text=URL" data-throw-if-not-resolved="False"/>
  - description: <p>the HTTP method (i.e. GET). </p>
    name: method
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod&text=HttpsMethod" data-throw-if-not-resolved="False"/>
  - description: <p>The proxy settings to use when connecting. If null, then no proxy will be used</p>
    name: proxySettings
    type: final <xref href="com.microsoft.azure.sdk.iot.device.ProxySettings?alt=com.microsoft.azure.sdk.iot.device.ProxySettings&text=ProxySettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the connection could not be opened. </p>
  summary: >-
    <p>Constructor. Opens a connection to the given URL. Can be HTTPS or HTTP</p>

    <p></p>
  syntax: public HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(URL,HttpsMethod,final ProxySettings)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings, boolean isHttps)
  name: HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings, boolean isHttps)
  nameWithType: HttpsConnection.HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings, boolean isHttps)
  parameters:
  - description: <p>the URL for the HTTP/HTTPS connection. </p>
    name: url
    type: <xref href="URL?alt=URL&text=URL" data-throw-if-not-resolved="False"/>
  - description: <p>the HTTP method (i.e. GET). </p>
    name: method
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod&text=HttpsMethod" data-throw-if-not-resolved="False"/>
  - description: <p>The proxy settings to use when connecting. If null, then no proxy will be used </p>
    name: proxySettings
    type: final <xref href="com.microsoft.azure.sdk.iot.device.ProxySettings?alt=com.microsoft.azure.sdk.iot.device.ProxySettings&text=ProxySettings" data-throw-if-not-resolved="False"/>
  - description: <p>if true, then this request is an https request as opposed to an http request </p>
    name: isHttps
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the connection could not be opened. </p>
  summary: >-
    <p>Constructor. Opens a connection to the given URL. Can be HTTPS or HTTP</p>

    <p></p>
  syntax: public HttpsConnection(URL url, HttpsMethod method, final ProxySettings proxySettings, boolean isHttps)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.HttpsConnection(URL,HttpsMethod,final ProxySettings,boolean)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.connect()
  name: connect()
  nameWithType: HttpsConnection.connect()
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the connection could not be established, or the server responded with a bad status code. </p>
  summary: >-
    <p>Sends the request to the URL given in the constructor.</p>

    <p></p>
  syntax: public void connect()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.connect()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.getResponseHeaders()
  name: getResponseHeaders()
  nameWithType: HttpsConnection.getResponseHeaders()
  returns:
    description: <p>the response headers. </p>
    type: <xref href="Map%3CString%2C+List%3CString%3E%3E?alt=Map%3CString%2C+List%3CString%3E%3E&text=Map%3CString%2C+List%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the response headers as a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Map"></xref>, where the key is the header field name and the values are the values associated with the header field name.</p>

    <p></p>
  syntax: public Map<String, List<String>> getResponseHeaders()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.getResponseHeaders()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.getResponseStatus()
  name: getResponseStatus()
  nameWithType: HttpsConnection.getResponseStatus()
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if no response was received. </p>
  returns:
    description: <p>the response status code.</p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the response status code.</p>

    <p></p>
  syntax: public int getResponseStatus()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.getResponseStatus()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.readError()
  name: readError()
  nameWithType: HttpsConnection.readError()
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the input stream could not be accessed, for example if the server could not be reached. </p>
  returns:
    description: <p>the error reason.</p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads from the error stream and returns the error reason.</p>

    <p></p>
  syntax: public byte [] readError()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.readError()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.readInput()
  name: readInput()
  nameWithType: HttpsConnection.readInput()
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the input stream could not be accessed, for example if the server could not be reached. </p>
  returns:
    description: <p>the response body.</p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads from the input stream (response stream) and returns the response.</p>

    <p></p>
  syntax: public byte [] readInput()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.readInput()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setConnectTimeout(int timeout)
  name: setConnectTimeout(int timeout)
  nameWithType: HttpsConnection.setConnectTimeout(int timeout)
  parameters:
  - description: <p>the connect timeout in milliseconds. </p>
    name: timeout
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the connect timeout in milliseconds. </p>
  syntax: public void setConnectTimeout(int timeout)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setConnectTimeout(int)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setReadTimeout(int timeout)
  name: setReadTimeout(int timeout)
  nameWithType: HttpsConnection.setReadTimeout(int timeout)
  parameters:
  - description: <p>the read timeout. </p>
    name: timeout
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the read timeout in milliseconds. The read timeout is the number of milliseconds after the server receives a request and before the server sends data back.</p>

    <p></p>
  syntax: public void setReadTimeout(int timeout)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setReadTimeout(int)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setRequestHeader(String field, String value)
  name: setRequestHeader(String field, String value)
  nameWithType: HttpsConnection.setRequestHeader(String field, String value)
  parameters:
  - description: <p>the header field name. </p>
    name: field
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the header field value. </p>
    name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the request header field to the given value.</p>

    <p></p>
  syntax: public void setRequestHeader(String field, String value)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setRequestHeader(String,String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setRequestMethod(HttpsMethod method)
  name: setRequestMethod(HttpsMethod method)
  nameWithType: HttpsConnection.setRequestMethod(HttpsMethod method)
  parameters:
  - description: <p>the request method.</p>
    name: method
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsMethod&text=HttpsMethod" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the request currently has a non-empty body and the new method is not a POST or a PUT. This is because Java's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="HttpsURLConnection"></xref> silently converts the HTTPS method to POST or PUT if a body is written to the request. </p>
  summary: >-
    <p>Sets the request method (i.e. POST).</p>

    <p></p>
  syntax: public void setRequestMethod(HttpsMethod method)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.setRequestMethod(HttpsMethod)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.writeOutput(byte[] body)
  name: writeOutput(byte[] body)
  nameWithType: HttpsConnection.writeOutput(byte[] body)
  parameters:
  - description: <p>the request body. </p>
    name: body
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the body to be sent with the request.</p>

    <p></p>
  syntax: public void writeOutput(byte[] body)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.writeOutput(byte [])
nameWithType: HttpsConnection
syntax: public class HttpsConnection
type: class
uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection
fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection
name: HttpsConnection
package: com.microsoft.azure.sdk.iot.device.transport.https
summary: >-
  <p>A wrapper for the Java SE class <xref uid="" data-throw-if-not-resolved="false" data-raw-source="HttpsURLConnection"></xref>. Used to avoid compatibility issues when testing with the mocking framework JMockit, as well as to avoid some undocumented side effects when using HttpsURLConnection. </p>

  <p>The underlying <xref uid="" data-throw-if-not-resolved="false" data-raw-source="HttpsURLConnection"></xref> is transparently managed by Java. To reuse connections, for each time <xref uid="com.microsoft.azure.sdk.iot.device.transport.https.HttpsConnection.connect()" data-throw-if-not-resolved="false" data-raw-source="connect()"></xref> is called, the input streams (input stream or error stream, if input stream is not accessible) must be completely read. Otherwise, the data remains in the stream and the connection will not be reusable. </p>
metadata: {}
