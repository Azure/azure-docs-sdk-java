### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.dateTimeUtcToString(Date date)
  name: dateTimeUtcToString(Date date)
  nameWithType: ParserUtility.dateTimeUtcToString(Date date)
  parameters:
  - description: >-
      <p>is the<code>Date 

          </code> with the date and time </p>
    name: date
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the provided date is<code>null 

          </code> . </p>
  returns:
    description: >-
      <p>the<code>String 

          </code> with the date and time using the UTC format. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Helper to convert the provided Date UTC into String. Expected result: "2016-06-01T21:22:43.799Z"</p>

    <p></p>
  syntax: public static String dateTimeUtcToString(Date date)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.dateTimeUtcToString(Date)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.getDateTimeUtc(String dataTime)
  name: getDateTimeUtc(String dataTime)
  nameWithType: ParserUtility.getDateTimeUtc(String dataTime)
  parameters:
  - description: <p>is the string with the date and time </p>
    name: dataTime
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the date and time in the string is not in the correct format. </p>
  returns:
    description: <p>Date parsed from the string </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Helper to convert the provided string in a UTC Date. Expected format: "2016-06-01T21:22:43.7996883Z"</p>

    <p></p>
  syntax: public static Date getDateTimeUtc(String dataTime)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.getDateTimeUtc(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.getJsonObjectValue(JsonObject jsonObject)
  name: getJsonObjectValue(JsonObject jsonObject)
  nameWithType: ParserUtility.getJsonObjectValue(JsonObject jsonObject)
  parameters:
  - name: jsonObject
    type: <xref href="JsonObject?alt=JsonObject&text=JsonObject" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public static Map<String, Object> getJsonObjectValue(JsonObject jsonObject)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.getJsonObjectValue(JsonObject)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.getUTCDateStringFromDate(Date date)
  name: getUTCDateStringFromDate(Date date)
  nameWithType: ParserUtility.getUTCDateStringFromDate(Date date)
  parameters:
  - description: <p>the date to convert into a string </p>
    name: date
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided date is null </p>
  returns:
    description: <p>the date represented as a string </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Convert from a date object back into a string representation Expected format of returned string: "2016-01-21T11:05:21"</p>

    <p></p>
  syntax: public static String getUTCDateStringFromDate(Date date)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.getUTCDateStringFromDate(Date)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.mapToJsonElement(Map<String, Object> map)
  name: mapToJsonElement(Map<String, Object> map)
  nameWithType: ParserUtility.mapToJsonElement(Map<String, Object> map)
  parameters:
  - description: <p>is the map to serialize </p>
    name: map
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided map is null. </p>
  returns:
    description: <p>a JsonElement that represents the content of the map. </p>
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Helper to convert a provided map in to a JsonElement, including sub-maps.</p>

    <p></p>
  syntax: public static JsonElement mapToJsonElement(Map<String, Object> map)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.mapToJsonElement(Map<String, Object>)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.resolveJsonElement(JsonElement jsonElement)
  name: resolveJsonElement(JsonElement jsonElement)
  nameWithType: ParserUtility.resolveJsonElement(JsonElement jsonElement)
  parameters:
  - name: jsonElement
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: public static Object resolveJsonElement(JsonElement jsonElement)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.resolveJsonElement(JsonElement)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.stringToDateTimeOffset(String dateTime)
  name: stringToDateTimeOffset(String dateTime)
  nameWithType: ParserUtility.stringToDateTimeOffset(String dateTime)
  parameters:
  - description: <p>is the string with the date and time </p>
    name: dateTime
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the date and time in the string is not in the correct format. </p>
  returns:
    description: <p>Date parsed from the string </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Helper to convert the provided string in a offset Date. Expected format: "2016-06-01T21:22:41+00:00"</p>

    <p></p>
  syntax: public static Date stringToDateTimeOffset(String dateTime)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.stringToDateTimeOffset(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateBlobName(String blobName)
  name: validateBlobName(String blobName)
  nameWithType: ParserUtility.validateBlobName(String blobName)
  parameters:
  - description: <p>is the blob name to be validated. </p>
    name: blobName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the blob name do not fit the criteria. </p>
  summary: >-
    <p>Helper to validate if the provided blob name is not null, empty, and valid.</p>

    <p></p>
  syntax: public static void validateBlobName(String blobName)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateBlobName(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateMap(Map<String, Object> map)
  name: validateMap(Map<String, Object> map)
  nameWithType: ParserUtility.validateMap(Map<String, Object> map)
  parameters:
  - description: >-
      <p>the<code>Map 

          </code> to be validate. It can be<code>null 

          </code> , and it will succeed in this case. </p>
    name: map
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If the Map contains more than maxLevel levels or do not allow metadata but contains metadata key. </p>
  summary: >-
    <p>Helper to validate if the provided map in terms of maximum levels and optionally if the keys ar not metadata.</p>

    <p></p>
  syntax: public static void validateMap(Map<String, Object> map)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateMap(Map<String, Object>)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateObject(Object val)
  name: validateObject(Object val)
  nameWithType: ParserUtility.validateObject(Object val)
  parameters:
  - description: <p>is the object to be validated. </p>
    name: val
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the object do not fit the criteria. </p>
  summary: >-
    <p>Helper to validate if the provided object is not null.</p>

    <p></p>
  syntax: public static void validateObject(Object val)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateObject(Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateQuery(String query)
  name: validateQuery(String query)
  nameWithType: ParserUtility.validateQuery(String query)
  parameters:
  - description: <p>query to be validated </p>
    name: query
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if query does not contain "select" or "from" or is not a valid utf-8 string </p>
  summary: <p>Validates if query contains select and from keywords and also if it is a valid utf-8 string </p>
  syntax: public static void validateQuery(String query)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateQuery(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateStringUTF8(String str)
  name: validateStringUTF8(String str)
  nameWithType: ParserUtility.validateStringUTF8(String str)
  parameters:
  - description: <p>is the string to be validated. </p>
    name: str
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the string do not fit the criteria. </p>
  summary: >-
    <p>Helper to validate if the provided string is not null, empty, and all characters are UTF-8.</p>

    <p></p>
  syntax: public static void validateStringUTF8(String str)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility.validateStringUTF8(String)
nameWithType: ParserUtility
syntax: public class ParserUtility
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility
fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.ParserUtility
name: ParserUtility
package: com.microsoft.azure.sdk.iot.provisioning.service.configs
summary: <p>Set of static functions to help the serializer. </p>
metadata: {}
