### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.assignToApp()
  name: assignToApp()
  nameWithType: AzureAccounts.assignToApp()
  returns:
    description: <p>the first stage of the assignToApp call </p>
    type: <xref href="AzureAccountsAssignToAppDefinitionStages.WithAppId?alt=AzureAccountsAssignToAppDefinitionStages.WithAppId&text=AzureAccountsAssignToAppDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>apps - Assign a LUIS Azure account to an application. Assigns an Azure account to the application.</p>

    <p></p>
  syntax: public AzureAccountsAssignToAppDefinitionStages.WithAppId assignToApp()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.assignToApp()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.assignToApp(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  name: assignToApp(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  nameWithType: AzureAccounts.assignToApp(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: assignToAppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AssignToAppOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AssignToAppOptionalParameter&text=AssignToAppOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>apps - Assign a LUIS Azure account to an application. Assigns an Azure account to the application.</p>

    <p></p>
  syntax: public OperationStatus assignToApp(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.assignToApp(UUID,AssignToAppOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.assignToAppAsync(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  name: assignToAppAsync(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  nameWithType: AzureAccounts.assignToAppAsync(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: assignToAppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AssignToAppOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AssignToAppOptionalParameter&text=AssignToAppOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>apps - Assign a LUIS Azure account to an application. Assigns an Azure account to the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> assignToAppAsync(UUID appId, AssignToAppOptionalParameter assignToAppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.assignToAppAsync(UUID,AssignToAppOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.getAssigned()
  name: getAssigned()
  nameWithType: AzureAccounts.getAssigned()
  returns:
    description: <p>the first stage of the getAssigned call </p>
    type: <xref href="AzureAccountsGetAssignedDefinitionStages.WithAppId?alt=AzureAccountsGetAssignedDefinitionStages.WithAppId&text=AzureAccountsGetAssignedDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>apps - Get LUIS Azure accounts assigned to the application. Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.</p>

    <p></p>
  syntax: public AzureAccountsGetAssignedDefinitionStages.WithAppId getAssigned()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.getAssigned()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.getAssigned(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  name: getAssigned(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  nameWithType: AzureAccounts.getAssigned(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getAssignedOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetAssignedOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetAssignedOptionalParameter&text=GetAssignedOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;AzureAccountInfoObject&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject&text=AzureAccountInfoObject" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>apps - Get LUIS Azure accounts assigned to the application. Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.</p>

    <p></p>
  syntax: public List<AzureAccountInfoObject> getAssigned(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.getAssigned(UUID,GetAssignedOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.getAssignedAsync(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  name: getAssignedAsync(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  nameWithType: AzureAccounts.getAssignedAsync(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getAssignedOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetAssignedOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetAssignedOptionalParameter&text=GetAssignedOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;AzureAccountInfoObject&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject&text=AzureAccountInfoObject" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>apps - Get LUIS Azure accounts assigned to the application. Gets the LUIS Azure accounts assigned to the application for the user using his ARM token.</p>

    <p></p>
  syntax: public Observable<List<AzureAccountInfoObject>> getAssignedAsync(UUID appId, GetAssignedOptionalParameter getAssignedOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.getAssignedAsync(UUID,GetAssignedOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts()
  name: listUserLUISAccounts()
  nameWithType: AzureAccounts.listUserLUISAccounts()
  returns:
    description: <p>the first stage of the listUserLUISAccounts call </p>
    type: <xref href="AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute?alt=AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute&text=AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>user - Get LUIS Azure accounts. Gets the LUIS Azure accounts for the user using his ARM token.</p>

    <p></p>
  syntax: public AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute listUserLUISAccounts()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  name: listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  nameWithType: AzureAccounts.listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listUserLUISAccountsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListUserLUISAccountsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListUserLUISAccountsOptionalParameter&text=ListUserLUISAccountsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;AzureAccountInfoObject&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject&text=AzureAccountInfoObject" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>user - Get LUIS Azure accounts. Gets the LUIS Azure accounts for the user using his ARM token.</p>

    <p></p>
  syntax: public List<AzureAccountInfoObject> listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts(ListUserLUISAccountsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccountsAsync(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  name: listUserLUISAccountsAsync(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  nameWithType: AzureAccounts.listUserLUISAccountsAsync(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listUserLUISAccountsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListUserLUISAccountsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListUserLUISAccountsOptionalParameter&text=ListUserLUISAccountsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;AzureAccountInfoObject&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject&text=AzureAccountInfoObject" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>user - Get LUIS Azure accounts. Gets the LUIS Azure accounts for the user using his ARM token.</p>

    <p></p>
  syntax: public Observable<List<AzureAccountInfoObject>> listUserLUISAccountsAsync(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccountsAsync(ListUserLUISAccountsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.removeFromApp()
  name: removeFromApp()
  nameWithType: AzureAccounts.removeFromApp()
  returns:
    description: <p>the first stage of the removeFromApp call </p>
    type: <xref href="AzureAccountsRemoveFromAppDefinitionStages.WithAppId?alt=AzureAccountsRemoveFromAppDefinitionStages.WithAppId&text=AzureAccountsRemoveFromAppDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>apps - Removes an assigned LUIS Azure account from an application. Removes assigned Azure account from the application.</p>

    <p></p>
  syntax: public AzureAccountsRemoveFromAppDefinitionStages.WithAppId removeFromApp()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.removeFromApp()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.removeFromApp(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  name: removeFromApp(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  nameWithType: AzureAccounts.removeFromApp(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: removeFromAppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RemoveFromAppOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RemoveFromAppOptionalParameter&text=RemoveFromAppOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>apps - Removes an assigned LUIS Azure account from an application. Removes assigned Azure account from the application.</p>

    <p></p>
  syntax: public OperationStatus removeFromApp(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.removeFromApp(UUID,RemoveFromAppOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.removeFromAppAsync(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  name: removeFromAppAsync(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  nameWithType: AzureAccounts.removeFromAppAsync(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: removeFromAppOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RemoveFromAppOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RemoveFromAppOptionalParameter&text=RemoveFromAppOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>apps - Removes an assigned LUIS Azure account from an application. Removes assigned Azure account from the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> removeFromAppAsync(UUID appId, RemoveFromAppOptionalParameter removeFromAppOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.removeFromAppAsync(UUID,RemoveFromAppOptionalParameter)
nameWithType: AzureAccounts
syntax: public interface AzureAccounts
type: interface
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts
name: AzureAccounts
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
summary: <p>An instance of this class provides access to all the operations defined in AzureAccounts. </p>
metadata: {}
