### YamlMime:JavaMember
nameWithType: Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
type: field
members:
- fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
  name: FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
  nameWithType: Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
  returns:
    type: final Func1&lt;ServiceResponseWithHeaders&lt;Object, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders&text=DigitalTwinInvokeComponentCommandHeaders" data-throw-if-not-resolved="False"/>&gt;, Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders&text=DigitalTwinInvokeCommandHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  syntax: >-
    public static final Func1<ServiceResponseWithHeaders<Object, DigitalTwinInvokeComponentCommandHeaders>, Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>>> FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE= object -> {
            try {
                DigitalTwinCommandResponse digitalTwinCommandResponse = new DigitalTwinCommandResponse();
                digitalTwinCommandResponse.setPayload(objectMapper.writeValueAsString(object.body()));
                digitalTwinCommandResponse.setStatus(object.headers().xMsCommandStatuscode());
                DigitalTwinInvokeCommandHeaders digitalTwinInvokeCommandHeaders = new DigitalTwinInvokeCommandHeaders();
                digitalTwinInvokeCommandHeaders.setRequestId(object.headers().xMsRequestId());
                ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> result = new ServiceResponseWithHeaders<>(digitalTwinCommandResponse, digitalTwinInvokeCommandHeaders, object.response());
                return Observable.just(result);
            }
            catch (JsonProcessingException e) {
                return Observable.error(new IotHubException("Failed to parse the resonse"));
            }

        }
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE*
fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
name: FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
package: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers
metadata: {}
