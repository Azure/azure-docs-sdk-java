### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  name: SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  nameWithType: SubStream.SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  parameters:
  - description: <p>The markable InputStream to be wrapped. </p>
    name: source
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A valid index in the wrapped stream where the substream should logically begin. </p>
    name: startIndex
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The length of the substream. </p>
    name: streamLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>An intrinsic lock to ensure thread-safe, concurrent operations on substream instances wrapping the same InputStream. </p>
    name: lock
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new substream instance that partitions the wrapped stream  from  up to . Each substream instance that wraps the same underlying  must share the same mutual exclusion  to avoid race conditions from concurrent operations.</p>

    <p></p>
  syntax: public SubStream(InputStream source, long startIndex, long streamLength, Object lock)
  uid: com.microsoft.azure.storage.blob.SubStream.SubStream(InputStream,long,long,Object)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="InputStream" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.blob.SubStream.close()
  name: close()
  nameWithType: SubStream.close()
  summary: <p>Closes the substream. </p>
  syntax: public void close()
  uid: com.microsoft.azure.storage.blob.SubStream.close()
- fullName: com.microsoft.azure.storage.blob.SubStream.getInputStream()
  name: getInputStream()
  nameWithType: SubStream.getInputStream()
  returns:
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  syntax: public InputStream getInputStream()
  uid: com.microsoft.azure.storage.blob.SubStream.getInputStream()
- fullName: com.microsoft.azure.storage.blob.SubStream.getLength()
  name: getLength()
  nameWithType: SubStream.getLength()
  returns:
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long getLength()
  uid: com.microsoft.azure.storage.blob.SubStream.getLength()
- fullName: com.microsoft.azure.storage.blob.SubStream.mark(int readlimit)
  name: mark(int readlimit)
  nameWithType: SubStream.mark(int readlimit)
  parameters:
  - description: <p>the maximum limit of bytes that can be read before the mark position becomes invalid. </p>
    name: readlimit
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Marks the current position in the substream. A subsequent call to the  method will reposition the stream to this stored position.</p>

    <p></p>
  syntax: public synchronized void mark(int readlimit)
  uid: com.microsoft.azure.storage.blob.SubStream.mark(int)
- fullName: com.microsoft.azure.storage.blob.SubStream.markSupported()
  name: markSupported()
  nameWithType: SubStream.markSupported()
  returns:
    description: >-
      <p>

        <code>true</code>

      </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The substream wrapper class is only compatible with markable input streams and hence will always return true. This requirement is enforced in the class constructor.</p>

    <p></p>
  syntax: public boolean markSupported()
  uid: com.microsoft.azure.storage.blob.SubStream.markSupported()
- fullName: com.microsoft.azure.storage.blob.SubStream.read()
  name: read()
  nameWithType: SubStream.read()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if an I/O error occurs. </p>
  returns:
    description: <p>the next byte of data, or <code>-1</code> if the end of the substream is reached. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads the next byte of data from the wrapped stream. The value byte is returned as an  in the range  to . If no byte is available because the end of the substream has been reached, the value  is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.</p>

    <p></p>
  syntax: public int read()
  uid: com.microsoft.azure.storage.blob.SubStream.read()
- fullName: com.microsoft.azure.storage.blob.SubStream.read(byte[] b)
  name: read(byte[] b)
  nameWithType: SubStream.read(byte[] b)
  parameters:
  - description: <p>the buffer into which the data is read. </p>
    name: b
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the first byte cannot be read for any reason other than the end of the file, if the wrapped stream has been closed, or if some other I/O error occurs. </p>
  - type: <xref href="NullPointerException?alt=NullPointerException&text=NullPointerException" data-throw-if-not-resolved="False"/>
    description: <p>if <code>b</code> is <code>null</code>. </p>
  returns:
    description: <p>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached. </p>
    type: <xref href="synchronized+int?alt=synchronized+int&text=synchronized+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads some number of bytes from the wrapped stream and stores them into the buffer array . The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. </p>

    <p>If the length of  is zero, then no bytes are read and  is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the substream is at the end of the file, the value  is returned; otherwise, at least one byte is read and stored into . </p>

    <p>The first byte read is stored into element , the next one into , and so on. The number of bytes read is, at most, equal to the length of . Let <em>k</em> be the number of bytes actually read; these bytes will be stored in elements  through <em>k</em>, leaving elements <em>k</em> through  unaffected. </p>

    <p>The  method for class  has the same effect as: <pre></pre></p>

    <p></p>
  syntax: public synchronized int read(byte[] b)
  uid: com.microsoft.azure.storage.blob.SubStream.read(byte [])
- fullName: com.microsoft.azure.storage.blob.SubStream.read(byte[] b, int off, int len)
  name: read(byte[] b, int off, int len)
  nameWithType: SubStream.read(byte[] b, int off, int len)
  parameters:
  - description: <p>the buffer into which the data is read. </p>
    name: b
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the start offset in array <code>b</code> at which the data is written. </p>
    name: off
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the maximum number of bytes to read. </p>
    name: len
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the first byte cannot be read for any reason other than end of file, or if the wrapped stream has been closed, or if some other I/O error occurs. </p>
  - type: <xref href="NullPointerException?alt=NullPointerException&text=NullPointerException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>b</code> is <code>null</code>. </p>
  - type: <xref href="IndexOutOfBoundsException?alt=IndexOutOfBoundsException&text=IndexOutOfBoundsException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code></p>
  returns:
    description: <p>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached. </p>
    type: <xref href="synchronized+int?alt=synchronized+int&text=synchronized+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads up to  bytes of data from the substream. Buffers data from the wrapped stream in order to minimize skip and read overhead. The wrappedstream will only be invoked if the readBuffer cannot fulfil the the read request. In order to ensure valid results, the wrapped stream must be marked prior to reading from the substream. This allows us to reset to the relative substream position in the wrapped stream. The number of bytes actually read is returned as an integer. All these operations are done synchronously within an intrinsic lock to ensure other concurrent requests by substream instances do not result in race conditions. </p>

    <p>The underlying call to the read of the wrapped stream will blocks until input data is available, end of file is detected, or an exception is thrown. </p>

    <p>If  is zero, then no bytes are read and  is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the substream is at end of file, the value  is returned; otherwise, at least one byte is read and stored into .</p>

    <p></p>
  syntax: public synchronized int read(byte[] b, int off, int len)
  uid: com.microsoft.azure.storage.blob.SubStream.read(byte [],int,int)
- fullName: com.microsoft.azure.storage.blob.SubStream.reset()
  name: reset()
  nameWithType: SubStream.reset()
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Repositions the substream position to the index where the  method was last called. </p>

    <p>The new reset position on substream does not take effect until subsequent reads.</p>

    <p></p>
  syntax: public synchronized void reset()
  uid: com.microsoft.azure.storage.blob.SubStream.reset()
- fullName: com.microsoft.azure.storage.blob.SubStream.skip(long n)
  name: skip(long n)
  nameWithType: SubStream.skip(long n)
  parameters:
  - description: <p>the number of bytes to be effectively skipped. </p>
    name: n
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the actual number of bytes skipped. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Advances the current position of the substream by . The  method does not invoke the underlying  method of the wrapped stream class. The actual skipping of bytes will be accounted for during subsequent substream read operations.</p>

    <p></p>
  syntax: public long skip(long n)
  uid: com.microsoft.azure.storage.blob.SubStream.skip(long)
nameWithType: SubStream
syntax: public class SubStream
type: class
uid: com.microsoft.azure.storage.blob.SubStream
fullName: com.microsoft.azure.storage.blob.SubStream
name: SubStream
package: com.microsoft.azure.storage.blob
metadata: {}
