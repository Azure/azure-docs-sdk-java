### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.commandLine()
  name: commandLine()
  nameWithType: JobReleaseTask.commandLine()
  returns:
    description: <p>the commandLine value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public String commandLine()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.commandLine()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.containerSettings()
  name: containerSettings()
  nameWithType: JobReleaseTask.containerSettings()
  returns:
    description: <p>the containerSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskContainerSettings containerSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.containerSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.environmentSettings()
  name: environmentSettings()
  nameWithType: JobReleaseTask.environmentSettings()
  returns:
    description: <p>the environmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the environmentSettings value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> environmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.environmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.id()
  name: id()
  nameWithType: JobReleaseTask.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other task in the job can have the same ID as the Job Release task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.id()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.maxWallClockTime()
  name: maxWallClockTime()
  nameWithType: JobReleaseTask.maxWallClockTime()
  returns:
    description: <p>the maxWallClockTime value </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the maxWallClockTime value.</p>

    <p></p>
  syntax: public Period maxWallClockTime()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.maxWallClockTime()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.resourceFiles()
  name: resourceFiles()
  nameWithType: JobReleaseTask.resourceFiles()
  returns:
    description: <p>the resourceFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get files listed under this element are located in the task's working directory.</p>

    <p></p>
  syntax: public List<ResourceFile> resourceFiles()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.resourceFiles()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.retentionTime()
  name: retentionTime()
  nameWithType: JobReleaseTask.retentionTime()
  returns:
    description: <p>the retentionTime value </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the default is 7 days, i.e. the task directory will be retained for 7 days unless the compute node is removed or the job is deleted.</p>

    <p></p>
  syntax: public Period retentionTime()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.retentionTime()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.userIdentity()
  name: userIdentity()
  nameWithType: JobReleaseTask.userIdentity()
  returns:
    description: <p>the userIdentity value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public UserIdentity userIdentity()
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.userIdentity()
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withCommandLine(String commandLine)
  name: withCommandLine(String commandLine)
  nameWithType: JobReleaseTask.withCommandLine(String commandLine)
  parameters:
  - description: <p>the commandLine value to set </p>
    name: commandLine
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public JobReleaseTask withCommandLine(String commandLine)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withCommandLine(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withContainerSettings(TaskContainerSettings containerSettings)
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: JobReleaseTask.withContainerSettings(TaskContainerSettings containerSettings)
  parameters:
  - description: <p>the containerSettings value to set </p>
    name: containerSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public JobReleaseTask withContainerSettings(TaskContainerSettings containerSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withContainerSettings(TaskContainerSettings)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: JobReleaseTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  parameters:
  - description: <p>the environmentSettings value to set </p>
    name: environmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the environmentSettings value.</p>

    <p></p>
  syntax: public JobReleaseTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withId(String id)
  name: withId(String id)
  nameWithType: JobReleaseTask.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobrelease'. No other task in the job can have the same ID as the Job Release task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).</p>

    <p></p>
  syntax: public JobReleaseTask withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withMaxWallClockTime(Period maxWallClockTime)
  name: withMaxWallClockTime(Period maxWallClockTime)
  nameWithType: JobReleaseTask.withMaxWallClockTime(Period maxWallClockTime)
  parameters:
  - description: <p>the maxWallClockTime value to set </p>
    name: maxWallClockTime
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the maxWallClockTime value.</p>

    <p></p>
  syntax: public JobReleaseTask withMaxWallClockTime(Period maxWallClockTime)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withMaxWallClockTime(Period)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withResourceFiles(List<ResourceFile> resourceFiles)
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: JobReleaseTask.withResourceFiles(List<ResourceFile> resourceFiles)
  parameters:
  - description: <p>the resourceFiles value to set </p>
    name: resourceFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set files listed under this element are located in the task's working directory.</p>

    <p></p>
  syntax: public JobReleaseTask withResourceFiles(List<ResourceFile> resourceFiles)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withResourceFiles(List<ResourceFile>)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withRetentionTime(Period retentionTime)
  name: withRetentionTime(Period retentionTime)
  nameWithType: JobReleaseTask.withRetentionTime(Period retentionTime)
  parameters:
  - description: <p>the retentionTime value to set </p>
    name: retentionTime
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the default is 7 days, i.e. the task directory will be retained for 7 days unless the compute node is removed or the job is deleted.</p>

    <p></p>
  syntax: public JobReleaseTask withRetentionTime(Period retentionTime)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withRetentionTime(Period)
- fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withUserIdentity(UserIdentity userIdentity)
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: JobReleaseTask.withUserIdentity(UserIdentity userIdentity)
  parameters:
  - description: <p>the userIdentity value to set </p>
    name: userIdentity
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobReleaseTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public JobReleaseTask withUserIdentity(UserIdentity userIdentity)
  uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask.withUserIdentity(UserIdentity)
nameWithType: JobReleaseTask
syntax: public class JobReleaseTask
type: class
uid: com.microsoft.azure.batch.protocol.models.JobReleaseTask
fullName: com.microsoft.azure.batch.protocol.models.JobReleaseTask
name: JobReleaseTask
package: com.microsoft.azure.batch.protocol.models
summary: "<p>A Job Release task to run on job completion on any compute node where the job has run. The Job Release task runs when the job ends, because of one of the following: The user calls the Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall clock time constraint is reached, and the job is still active, or the job's Job Manager task completed, and the job is configured to terminate when the Job Manager completes. The Job Release task runs on each compute node where tasks of the job have run and the Job Preparation task ran and completed. If you reimage a compute node after it has run the Job Preparation task, and the job ends without any further tasks of the job running on that compute node (and hence the Job Preparation task does not re-run), then the Job Release task does not run on that node. If a compute node reboots while the Job Release task is still running, the Job Release task runs again when the compute node starts up. The job is not marked as complete until all Job Release tasks have completed. The Job Release task runs in the background. It does not occupy a scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the pool. </p>"
metadata: {}
