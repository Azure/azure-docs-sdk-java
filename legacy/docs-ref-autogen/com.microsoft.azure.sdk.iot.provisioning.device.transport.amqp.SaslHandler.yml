### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.chooseSaslMechanism(String[] mechanisms)
  name: chooseSaslMechanism(String[] mechanisms)
  nameWithType: SaslHandler.chooseSaslMechanism(String[] mechanisms)
  parameters:
  - description: <p>A list of available Sasl Mechanisms offered by the service </p>
    name: mechanisms
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
    description: <p>if sasl negotiation fails </p>
  returns:
    description: <p>the mechanism to use </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Handle the provided mechanisms and return the mechanism to be used from a provided list</p>

    <p></p>
  syntax: public String chooseSaslMechanism(String[] mechanisms)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.chooseSaslMechanism(String [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.getInitPayload(String chosenMechanism)
  name: getInitPayload(String chosenMechanism)
  nameWithType: SaslHandler.getInitPayload(String chosenMechanism)
  parameters:
  - description: <p>the sasl mechanism that was chosen </p>
    name: chosenMechanism
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the bytes to be used as the paylaod for the Sasl init message </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Based on the chosen mechanism, builds and returns the bytes to be sent in the payload for the Sasl init message </p>
  syntax: public byte [] getInitPayload(String chosenMechanism)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.getInitPayload(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.getPlainPassword()
  name: getPlainPassword()
  nameWithType: SaslHandler.getPlainPassword()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getPlainPassword()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.getPlainPassword()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.getPlainUsername()
  name: getPlainUsername()
  nameWithType: SaslHandler.getPlainUsername()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getPlainUsername()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.getPlainUsername()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.handleChallenge(byte[] saslChallenge)
  name: handleChallenge(byte[] saslChallenge)
  nameWithType: SaslHandler.handleChallenge(byte[] saslChallenge)
  parameters:
  - description: <p>The bytes from the Sasl challenge received from the service </p>
    name: saslChallenge
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
    description: <p>if sasl negotiation fails </p>
  returns:
    description: <p>the bytes to be sent in the payload of the Sasl response to the provided challenge </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Handles a given challenge and returns the bytes to be sent in the payload of the Sasl response message </p>
  syntax: public byte [] handleChallenge(byte[] saslChallenge)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.handleChallenge(byte [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.handleOutcome(SaslOutcome outcome)
  name: handleOutcome(SaslOutcome outcome)
  nameWithType: SaslHandler.handleOutcome(SaslOutcome outcome)
  parameters:
  - description: <p>The outcome of the sasl negotiation </p>
    name: outcome
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.SaslOutcome?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.SaslOutcome&text=SaslHandler.SaslOutcome" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
    description: <p>if sasl negotiation fails </p>
  summary: <p>Handles what to do upon the Sasl negotiation finishing. </p>
  syntax: public void handleOutcome(SaslOutcome outcome)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.handleOutcome(SaslOutcome)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.setSasToken(String sasToken)
  name: setSasToken(String sasToken)
  nameWithType: SaslHandler.setSasToken(String sasToken)
  parameters:
  - name: sasToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setSasToken(String sasToken)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler.setSasToken(String)
nameWithType: SaslHandler
syntax: public interface SaslHandler
type: interface
uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler
fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.SaslHandler
name: SaslHandler
package: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp
summary: <p>Interface definition for what client events are expected to be handled during Sasl negotiation </p>
metadata: {}
