### YamlMime:JavaMember
nameWithType: CloudStorageAccount.parse
type: method
members:
- fullName: com.microsoft.azure.storage.CloudStorageAccount.parse(final String connectionString)
  name: parse(final String connectionString)
  nameWithType: CloudStorageAccount.parse(final String connectionString)
  parameters:
  - description: <p>A <code>String</code> that represents the connection string to parse.</p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If credentials in the connection string contain an invalid key. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the connection string specifies an invalid URI. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.CloudStorageAccount" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount"></xref> object that represents the cloud storage account constructed from the values provided in the connection string.</p>
    type: <xref href="com.microsoft.azure.storage.CloudStorageAccount?alt=com.microsoft.azure.storage.CloudStorageAccount&text=CloudStorageAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Parses a connection string and returns a cloud storage account created from the connection string. </p>

    <p>The connection string should be in the <a href="http://msdn.microsoft.com/library/azure/ee758697.aspx">Azure connection string</a> format. </p>

    <p>Note that while a connection string may include a SAS token, it is often easier to use the <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final URI)" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer#CloudBlobContainer(URI)"></xref>, <xref uid="com.microsoft.azure.storage.queue.CloudQueue.CloudQueue(final URI)" data-throw-if-not-resolved="false" data-raw-source="CloudQueue#CloudQueue(URI)"></xref>, <xref uid="com.microsoft.azure.storage.table.CloudTable.CloudTable(final URI)" data-throw-if-not-resolved="false" data-raw-source="CloudTable#CloudTable(URI)"></xref> constructors directly. To do this, create a <xref uid="com.microsoft.azure.storage.StorageCredentialsSharedAccessSignature.StorageCredentialsSharedAccessSignature(final String)" data-throw-if-not-resolved="false" data-raw-source="StorageCredentialsSharedAccessSignature#StorageCredentialsSharedAccessSignature(String)"></xref> object with your SAS token, use the <xref uid="com.microsoft.azure.storage.StorageCredentials.transformUri(final URI)" data-throw-if-not-resolved="false" data-raw-source="StorageCredentialsSharedAccessSignature#transformUri(URI)"></xref> method on the container, queue, or table URI, and then use that URI to construct the object.</p>

    <p></p>
  syntax: public static CloudStorageAccount parse(final String connectionString)
  uid: com.microsoft.azure.storage.CloudStorageAccount.parse(final String)
uid: com.microsoft.azure.storage.CloudStorageAccount.parse*
fullName: com.microsoft.azure.storage.CloudStorageAccount.parse
name: parse(final String connectionString)
package: com.microsoft.azure.storage
metadata: {}
