### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowKeyAllPermissions()
  name: allowKeyAllPermissions()
  nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowKeyAllPermissions()
  returns:
    description: <p>the next stage of access policy definition </p>
    type: <xref href="com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach?alt=com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach&text=AccessPolicy.DefinitionStages.WithAttach" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Allow all permissions for the AD identity to access keys.</p>

    <p></p>
  syntax: public WithAttach<ParentT> allowKeyAllPermissions()
  uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions.allowKeyAllPermissions()
- fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowKeyPermissions(KeyPermissions... permissions)
  name: allowKeyPermissions(KeyPermissions... permissions)
  nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowKeyPermissions(KeyPermissions... permissions)
  parameters:
  - description: <p>the list of permissions allowed </p>
    name: permissions
    type: <xref href="KeyPermissions...?alt=KeyPermissions...&text=KeyPermissions..." data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of access policy definition </p>
    type: <xref href="com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach?alt=com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach&text=AccessPolicy.DefinitionStages.WithAttach" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Allow a list of permissions for the AD identity to access keys.</p>

    <p></p>
  syntax: public WithAttach<ParentT> allowKeyPermissions(KeyPermissions... permissions)
  uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions.allowKeyPermissions(KeyPermissions...)
- fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowKeyPermissions(List<KeyPermissions> permissions)
  name: allowKeyPermissions(List<KeyPermissions> permissions)
  nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowKeyPermissions(List<KeyPermissions> permissions)
  parameters:
  - description: <p>the list of permissions allowed </p>
    name: permissions
    type: List&lt;<xref href="com.microsoft.azure.management.keyvault.KeyPermissions?alt=com.microsoft.azure.management.keyvault.KeyPermissions&text=KeyPermissions" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the next stage of access policy definition </p>
    type: <xref href="com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach?alt=com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach&text=AccessPolicy.DefinitionStages.WithAttach" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Allow a list of permissions for the AD identity to access keys.</p>

    <p></p>
  syntax: public WithAttach<ParentT> allowKeyPermissions(List<KeyPermissions> permissions)
  uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions.allowKeyPermissions(List<KeyPermissions>)
- fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowSecretAllPermissions()
  name: allowSecretAllPermissions()
  nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowSecretAllPermissions()
  returns:
    description: <p>the next stage of access policy definition </p>
    type: <xref href="com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach?alt=com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach&text=AccessPolicy.DefinitionStages.WithAttach" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Allow all permissions for the AD identity to access secrets.</p>

    <p></p>
  syntax: public WithAttach<ParentT> allowSecretAllPermissions()
  uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions.allowSecretAllPermissions()
- fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowSecretPermissions(List<SecretPermissions> permissions)
  name: allowSecretPermissions(List<SecretPermissions> permissions)
  nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowSecretPermissions(List<SecretPermissions> permissions)
  parameters:
  - description: <p>the list of permissions allowed </p>
    name: permissions
    type: List&lt;<xref href="com.microsoft.azure.management.keyvault.SecretPermissions?alt=com.microsoft.azure.management.keyvault.SecretPermissions&text=SecretPermissions" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the next stage of access policy definition </p>
    type: <xref href="com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach?alt=com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach&text=AccessPolicy.DefinitionStages.WithAttach" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Allow a list of permissions for the AD identity to access secrets.</p>

    <p></p>
  syntax: public WithAttach<ParentT> allowSecretPermissions(List<SecretPermissions> permissions)
  uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions.allowSecretPermissions(List<SecretPermissions>)
- fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowSecretPermissions(SecretPermissions... permissions)
  name: allowSecretPermissions(SecretPermissions... permissions)
  nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>.allowSecretPermissions(SecretPermissions... permissions)
  parameters:
  - description: <p>the list of permissions allowed </p>
    name: permissions
    type: <xref href="SecretPermissions...?alt=SecretPermissions...&text=SecretPermissions..." data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of access policy definition </p>
    type: <xref href="com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach?alt=com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithAttach&text=AccessPolicy.DefinitionStages.WithAttach" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Allow a list of permissions for the AD identity to access secrets.</p>

    <p></p>
  syntax: public WithAttach<ParentT> allowSecretPermissions(SecretPermissions... permissions)
  uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions.allowSecretPermissions(SecretPermissions...)
nameWithType: AccessPolicy.DefinitionStages.WithPermissions<ParentT>
syntax: public interface WithPermissions<ParentT>
type: interface
typeParameters:
- description: <p>the stage of the parent definition to return to after attaching this definition </p>
  name: ParentT
uid: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions
fullName: com.microsoft.azure.management.keyvault.AccessPolicy.DefinitionStages.WithPermissions<ParentT>
name: AccessPolicy.DefinitionStages.WithPermissions<ParentT>
package: com.microsoft.azure.management.keyvault
summary: <p>The access policy definition stage allowing permissions to be added. </p>
metadata: {}
