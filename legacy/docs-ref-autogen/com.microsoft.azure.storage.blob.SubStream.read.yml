### YamlMime:JavaMember
nameWithType: SubStream.read
type: method
members:
- fullName: com.microsoft.azure.storage.blob.SubStream.read()
  name: read()
  nameWithType: SubStream.read()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if an I/O error occurs. </p>
  returns:
    description: <p>the next byte of data, or <code>-1</code> if the end of the substream is reached. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads the next byte of data from the wrapped stream. The value byte is returned as an  in the range  to . If no byte is available because the end of the substream has been reached, the value  is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.</p>

    <p></p>
  syntax: public int read()
  uid: com.microsoft.azure.storage.blob.SubStream.read()
- fullName: com.microsoft.azure.storage.blob.SubStream.read(byte[] b)
  name: read(byte[] b)
  nameWithType: SubStream.read(byte[] b)
  parameters:
  - description: <p>the buffer into which the data is read. </p>
    name: b
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the first byte cannot be read for any reason other than the end of the file, if the wrapped stream has been closed, or if some other I/O error occurs. </p>
  - type: <xref href="NullPointerException?alt=NullPointerException&text=NullPointerException" data-throw-if-not-resolved="False"/>
    description: <p>if <code>b</code> is <code>null</code>. </p>
  returns:
    description: <p>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached. </p>
    type: <xref href="synchronized+int?alt=synchronized+int&text=synchronized+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads some number of bytes from the wrapped stream and stores them into the buffer array . The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. </p>

    <p>If the length of  is zero, then no bytes are read and  is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the substream is at the end of the file, the value  is returned; otherwise, at least one byte is read and stored into . </p>

    <p>The first byte read is stored into element , the next one into , and so on. The number of bytes read is, at most, equal to the length of . Let <em>k</em> be the number of bytes actually read; these bytes will be stored in elements  through <em>k</em>, leaving elements <em>k</em> through  unaffected. </p>

    <p>The  method for class  has the same effect as: <pre></pre></p>

    <p></p>
  syntax: public synchronized int read(byte[] b)
  uid: com.microsoft.azure.storage.blob.SubStream.read(byte [])
- fullName: com.microsoft.azure.storage.blob.SubStream.read(byte[] b, int off, int len)
  name: read(byte[] b, int off, int len)
  nameWithType: SubStream.read(byte[] b, int off, int len)
  parameters:
  - description: <p>the buffer into which the data is read. </p>
    name: b
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the start offset in array <code>b</code> at which the data is written. </p>
    name: off
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the maximum number of bytes to read. </p>
    name: len
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the first byte cannot be read for any reason other than end of file, or if the wrapped stream has been closed, or if some other I/O error occurs. </p>
  - type: <xref href="NullPointerException?alt=NullPointerException&text=NullPointerException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>b</code> is <code>null</code>. </p>
  - type: <xref href="IndexOutOfBoundsException?alt=IndexOutOfBoundsException&text=IndexOutOfBoundsException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>off</code> is negative, <code>len</code> is negative, or <code>len</code> is greater than <code>b.length - off</code></p>
  returns:
    description: <p>the total number of bytes read into the buffer, or <code>-1</code> if there is no more data because the end of the stream has been reached. </p>
    type: <xref href="synchronized+int?alt=synchronized+int&text=synchronized+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads up to  bytes of data from the substream. Buffers data from the wrapped stream in order to minimize skip and read overhead. The wrappedstream will only be invoked if the readBuffer cannot fulfil the the read request. In order to ensure valid results, the wrapped stream must be marked prior to reading from the substream. This allows us to reset to the relative substream position in the wrapped stream. The number of bytes actually read is returned as an integer. All these operations are done synchronously within an intrinsic lock to ensure other concurrent requests by substream instances do not result in race conditions. </p>

    <p>The underlying call to the read of the wrapped stream will blocks until input data is available, end of file is detected, or an exception is thrown. </p>

    <p>If  is zero, then no bytes are read and  is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the substream is at end of file, the value  is returned; otherwise, at least one byte is read and stored into .</p>

    <p></p>
  syntax: public synchronized int read(byte[] b, int off, int len)
  uid: com.microsoft.azure.storage.blob.SubStream.read(byte [],int,int)
uid: com.microsoft.azure.storage.blob.SubStream.read*
fullName: com.microsoft.azure.storage.blob.SubStream.read
name: read()
package: com.microsoft.azure.storage.blob
metadata: {}
