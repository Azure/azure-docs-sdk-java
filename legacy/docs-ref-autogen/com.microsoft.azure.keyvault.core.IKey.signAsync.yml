### YamlMime:JavaMember
nameWithType: IKey.signAsync
type: method
members:
- fullName: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte[] digest, final String algorithm)
  name: signAsync(final byte[] digest, final String algorithm)
  nameWithType: IKey.signAsync(final byte[] digest, final String algorithm)
  parameters:
  - description: <p>The digest to sign </p>
    name: digest
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature algorithm to use </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
    type: <xref href="ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs the specified digest using the specified algorithm, or the keys DefaultSignatureAlgorithm if no algorithm is specified.</p>

    <p></p>
  syntax: public ListenableFuture<Pair<byte[], String>> signAsync(final byte[] digest, final String algorithm)
  uid: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte [],final String)
uid: com.microsoft.azure.keyvault.core.IKey.signAsync*
fullName: com.microsoft.azure.keyvault.core.IKey.signAsync
name: signAsync(final byte[] digest, final String algorithm)
package: com.microsoft.azure.keyvault.core
metadata: {}
