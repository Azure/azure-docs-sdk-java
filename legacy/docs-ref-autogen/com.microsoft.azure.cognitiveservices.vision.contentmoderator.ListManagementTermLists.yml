### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.create(String contentType, BodyModel bodyParameter)
  name: create(String contentType, BodyModel bodyParameter)
  nameWithType: ListManagementTermLists.create(String contentType, BodyModel bodyParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Schema of the body. </p>
    name: bodyParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel&text=BodyModel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TermList object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a Term List.</p>

    <p></p>
  syntax: public TermList create(String contentType, BodyModel bodyParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.create(String,BodyModel)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.createAsync(String contentType, BodyModel bodyParameter)
  name: createAsync(String contentType, BodyModel bodyParameter)
  nameWithType: ListManagementTermLists.createAsync(String contentType, BodyModel bodyParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Schema of the body. </p>
    name: bodyParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel&text=BodyModel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TermList object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a Term List.</p>

    <p></p>
  syntax: public Observable<TermList> createAsync(String contentType, BodyModel bodyParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.createAsync(String,BodyModel)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.delete(String listId)
  name: delete(String listId)
  nameWithType: ListManagementTermLists.delete(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes term list with the list Id equal to list Id passed.</p>

    <p></p>
  syntax: public String delete(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.delete(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.deleteAsync(String listId)
  name: deleteAsync(String listId)
  nameWithType: ListManagementTermLists.deleteAsync(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes term list with the list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<String> deleteAsync(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.deleteAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getAllTermLists()
  name: getAllTermLists()
  nameWithType: ListManagementTermLists.getAllTermLists()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;TermList&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>gets all the Term Lists.</p>

    <p></p>
  syntax: public List<TermList> getAllTermLists()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getAllTermLists()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getAllTermListsAsync()
  name: getAllTermListsAsync()
  nameWithType: ListManagementTermLists.getAllTermListsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;TermList&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>gets all the Term Lists.</p>

    <p></p>
  syntax: public Observable<List<TermList>> getAllTermListsAsync()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getAllTermListsAsync()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getDetails(String listId)
  name: getDetails(String listId)
  nameWithType: ListManagementTermLists.getDetails(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TermList object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns list Id details of the term list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public TermList getDetails(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getDetails(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getDetailsAsync(String listId)
  name: getDetailsAsync(String listId)
  nameWithType: ListManagementTermLists.getDetailsAsync(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TermList object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns list Id details of the term list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<TermList> getDetailsAsync(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.getDetailsAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.refreshIndexMethod(String listId, String language)
  name: refreshIndexMethod(String listId, String language)
  nameWithType: ListManagementTermLists.refreshIndexMethod(String listId, String language)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RefreshIndex object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex&text=RefreshIndex" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Refreshes the index of the list with list Id equal to list ID passed.</p>

    <p></p>
  syntax: public RefreshIndex refreshIndexMethod(String listId, String language)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.refreshIndexMethod(String,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.refreshIndexMethodAsync(String listId, String language)
  name: refreshIndexMethodAsync(String listId, String language)
  nameWithType: ListManagementTermLists.refreshIndexMethodAsync(String listId, String language)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RefreshIndex object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.RefreshIndex&text=RefreshIndex" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Refreshes the index of the list with list Id equal to list ID passed.</p>

    <p></p>
  syntax: public Observable<RefreshIndex> refreshIndexMethodAsync(String listId, String language)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.refreshIndexMethodAsync(String,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.update(String listId, String contentType, BodyModel bodyParameter)
  name: update(String listId, String contentType, BodyModel bodyParameter)
  nameWithType: ListManagementTermLists.update(String listId, String contentType, BodyModel bodyParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Schema of the body. </p>
    name: bodyParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel&text=BodyModel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TermList object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates an Term List.</p>

    <p></p>
  syntax: public TermList update(String listId, String contentType, BodyModel bodyParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.update(String,String,BodyModel)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.updateAsync(String listId, String contentType, BodyModel bodyParameter)
  name: updateAsync(String listId, String contentType, BodyModel bodyParameter)
  nameWithType: ListManagementTermLists.updateAsync(String listId, String contentType, BodyModel bodyParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Schema of the body. </p>
    name: bodyParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModel&text=BodyModel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TermList object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.TermList&text=TermList" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates an Term List.</p>

    <p></p>
  syntax: public Observable<TermList> updateAsync(String listId, String contentType, BodyModel bodyParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists.updateAsync(String,String,BodyModel)
nameWithType: ListManagementTermLists
syntax: public interface ListManagementTermLists
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists
fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementTermLists
name: ListManagementTermLists
package: com.microsoft.azure.cognitiveservices.vision.contentmoderator
summary: <p>An instance of this class provides access to all the operations defined in ListManagementTermLists. </p>
metadata: {}
