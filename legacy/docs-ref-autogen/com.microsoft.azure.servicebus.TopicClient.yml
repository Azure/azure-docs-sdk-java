### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  name: TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: TopicClient.TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  parameters:
  - name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  syntax: public TopicClient(ConnectionStringBuilder amqpConnectionStringBuilder)
  uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  name: TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  nameWithType: TopicClient.TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  parameters:
  - name: namespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  syntax: public TopicClient(String namespace, String topicPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  name: TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  nameWithType: TopicClient.TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  parameters:
  - name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - name: topicPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  syntax: public TopicClient(URI namespaceEndpointURI, String topicPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.TopicClient.TopicClient(URI,String,ClientSettings)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.primitives.ClientEntity" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.InitializableEntity" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- com.microsoft.azure.servicebus.ICloseable.close()
- com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- com.microsoft.azure.servicebus.ICloseable.closeAsync()
- com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
methods:
- fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long sequenceNumber)
  name: cancelScheduledMessage(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessage(long sequenceNumber)
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessage(long)
  parameters:
  - description: <p>sequence number of the scheduled message </p>
    name: sequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if scheduled message couldn't be cancelled </p>
  summary: >-
    <p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void cancelScheduledMessage(long sequenceNumber)
  uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessage(long)
- fullName: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  name: cancelScheduledMessageAsync(long sequenceNumber)
  nameWithType: TopicClient.cancelScheduledMessageAsync(long sequenceNumber)
  overridden: com.microsoft.azure.servicebus.IMessageSender.cancelScheduledMessageAsync(long)
  parameters:
  - description: <p>sequence number of the scheduled message </p>
    name: sequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending cancellation </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels the enqueuing of an already sent scheduled message, if it was not already enqueued. This is an asynchronous method returning a CompletableFuture which completes when the message is cancelled.</p>

    <p></p>
  syntax: public CompletableFuture<Void> cancelScheduledMessageAsync(long sequenceNumber)
  uid: com.microsoft.azure.servicebus.TopicClient.cancelScheduledMessageAsync(long)
- fullName: com.microsoft.azure.servicebus.TopicClient.getEntityPath()
  name: getEntityPath()
  nameWithType: TopicClient.getEntityPath()
  overridden: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  returns:
    description: <p>path of the entity this client is connecting to </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>

    <p></p>
  syntax: public String getEntityPath()
  uid: com.microsoft.azure.servicebus.TopicClient.getEntityPath()
- fullName: com.microsoft.azure.servicebus.TopicClient.getTopicName()
  name: getTopicName()
  nameWithType: TopicClient.getTopicName()
  overridden: com.microsoft.azure.servicebus.ITopicClient.getTopicName()
  returns:
    description: <p>the name of the topic </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Get the name of the topic </p>
  syntax: public String getTopicName()
  uid: com.microsoft.azure.servicebus.TopicClient.getTopicName()
- fullName: com.microsoft.azure.servicebus.TopicClient.onClose()
  name: onClose()
  nameWithType: TopicClient.onClose()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CompletableFuture<Void> onClose()
  uid: com.microsoft.azure.servicebus.TopicClient.onClose()
- fullName: com.microsoft.azure.servicebus.TopicClient.peek()
  name: peek()
  nameWithType: TopicClient.peek()
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid="com.microsoft.azure.servicebus.IMessageBrowser.peek()" data-throw-if-not-resolved="false" data-raw-source="IMessageBrowser#peek()"></xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.</p>

    <p></p>
  syntax: public IMessage peek()
  uid: com.microsoft.azure.servicebus.TopicClient.peek()
- fullName: com.microsoft.azure.servicebus.TopicClient.peek(long fromSequenceNumber)
  name: peek(long fromSequenceNumber)
  nameWithType: TopicClient.peek(long fromSequenceNumber)
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public IMessage peek(long fromSequenceNumber)
  uid: com.microsoft.azure.servicebus.TopicClient.peek(long)
- fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync()
  name: peekAsync()
  nameWithType: TopicClient.peekAsync()
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously reads the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<IMessage> peekAsync()
  uid: com.microsoft.azure.servicebus.TopicClient.peekAsync()
- fullName: com.microsoft.azure.servicebus.TopicClient.peekAsync(long fromSequenceNumber)
  name: peekAsync(long fromSequenceNumber)
  nameWithType: TopicClient.peekAsync(long fromSequenceNumber)
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
  uid: com.microsoft.azure.servicebus.TopicClient.peekAsync(long)
- fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch(int messageCount)
  name: peekBatch(int messageCount)
  nameWithType: TopicClient.peekBatch(int messageCount)
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
  parameters:
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public Collection<IMessage> peekBatch(int messageCount)
  uid: com.microsoft.azure.servicebus.TopicClient.peekBatch(int)
- fullName: com.microsoft.azure.servicebus.TopicClient.peekBatch(long fromSequenceNumber, int messageCount)
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: TopicClient.peekBatch(long fromSequenceNumber, int messageCount)
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
  uid: com.microsoft.azure.servicebus.TopicClient.peekBatch(long,int)
- fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int messageCount)
  name: peekBatchAsync(int messageCount)
  nameWithType: TopicClient.peekBatchAsync(int messageCount)
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
  parameters:
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
    type: CompletableFuture&lt;Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
  uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(int)
- fullName: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: TopicClient.peekBatchAsync(long fromSequenceNumber, int messageCount)
  overridden: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
    type: CompletableFuture&lt;Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
  uid: com.microsoft.azure.servicebus.TopicClient.peekBatchAsync(long,int)
- fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  returns:
    description: <p>sequence number of the scheduled message </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc)
  uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant)
- fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  name: scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessage(IMessage,Instant,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  returns:
    description: <p>sequence number of the scheduled message </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public long scheduleMessage(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessage(IMessage,Instant,TransactionContext)
- fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
    type: <xref href="CompletableFuture%3CLong%3E?alt=CompletableFuture%3CLong%3E&text=CompletableFuture%3CLong%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>

    <p></p>
  syntax: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc)
  uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant)
- fullName: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  name: scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  nameWithType: TopicClient.scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.scheduleMessageAsync(IMessage,Instant,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: <p>instant at which the message should be enqueued in the entity </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send, which returns the sequence number of the scheduled message. This sequence number can be used to cancel the scheduling of the message. </p>
    type: <xref href="CompletableFuture%3CLong%3E?alt=CompletableFuture%3CLong%3E&text=CompletableFuture%3CLong%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a scheduled message to the Azure Service Bus entity this sender is connected to. A scheduled message is enqueued and made available to receivers only at the scheduled enqueue time. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity. The CompletableFuture, on completion, returns the sequence number of the scheduled message which can be used to cancel the scheduling of the message.</p>

    <p></p>
  syntax: public CompletableFuture<Long> scheduleMessageAsync(IMessage message, Instant scheduledEnqueueTimeUtc, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.TopicClient.scheduleMessageAsync(IMessage,Instant,TransactionContext)
- fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message)
  name: send(IMessage message)
  nameWithType: TopicClient.send(IMessage message)
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void send(IMessage message)
  uid: com.microsoft.azure.servicebus.TopicClient.send(IMessage)
- fullName: com.microsoft.azure.servicebus.TopicClient.send(IMessage message, TransactionContext transaction)
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.send(IMessage message, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void send(IMessage message, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.TopicClient.send(IMessage,TransactionContext)
- fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message)
  name: sendAsync(IMessage message)
  nameWithType: TopicClient.sendAsync(IMessage message)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendAsync(IMessage message)
  uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage)
- fullName: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  name: sendAsync(IMessage message, TransactionContext transaction)
  nameWithType: TopicClient.sendAsync(IMessage message, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendAsync(IMessage,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the message is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendAsync(IMessage message, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.TopicClient.sendAsync(IMessage,TransactionContext)
- fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages)
  name: sendBatch(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the batch couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void sendBatch(Collection<? extends IMessage> messages)
  uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>)
- fullName: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  name: sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatch(Collection<? extends IMessage>,TransactionContext)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the batch couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This method blocks until the batch is sent to the entity. Calling this method is equivalent to calling . For better performance, use async methods.</p>

    <p></p>
  syntax: public void sendBatch(Collection<? extends IMessage> messages, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.TopicClient.sendBatch(Collection<? extends IMessage>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  name: sendBatchAsync(Collection<? extends IMessage> messages)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages)
  uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>)
- fullName: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  name: sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  nameWithType: TopicClient.sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
  parameters:
  - description: <p>collection of messages to be sent to the entity </p>
    name: messages
    type: Collection&lt;? extends <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending send </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a batch of messages to the Azure Service Bus entity this sender is connected to. This is an asynchronous method returning a CompletableFuture which completes when the batch is sent to the entity.</p>

    <p></p>
  syntax: public CompletableFuture<Void> sendBatchAsync(Collection<? extends IMessage> messages, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.TopicClient.sendBatchAsync(Collection<? extends IMessage>,TransactionContext)
nameWithType: TopicClient
syntax: public class TopicClient implements ITopicClient
type: class
uid: com.microsoft.azure.servicebus.TopicClient
fullName: com.microsoft.azure.servicebus.TopicClient
name: TopicClient
package: com.microsoft.azure.servicebus
summary: <p>The topic client that interacts with service bus topic. </p>
metadata: {}
