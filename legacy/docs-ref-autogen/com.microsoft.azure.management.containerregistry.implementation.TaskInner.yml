### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Resource" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.agentConfiguration()
  name: agentConfiguration()
  nameWithType: TaskInner.agentConfiguration()
  returns:
    description: <p>the agentConfiguration value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.AgentProperties?alt=com.microsoft.azure.management.containerregistry.AgentProperties&text=AgentProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the machine configuration of the run agent.</p>

    <p></p>
  syntax: public AgentProperties agentConfiguration()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.agentConfiguration()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.creationDate()
  name: creationDate()
  nameWithType: TaskInner.creationDate()
  returns:
    description: <p>the creationDate value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the creation date of task.</p>

    <p></p>
  syntax: public DateTime creationDate()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.creationDate()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.platform()
  name: platform()
  nameWithType: TaskInner.platform()
  returns:
    description: <p>the platform value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the platform properties against which the run has to happen.</p>

    <p></p>
  syntax: public PlatformProperties platform()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.platform()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.provisioningState()
  name: provisioningState()
  nameWithType: TaskInner.provisioningState()
  returns:
    description: <p>the provisioningState value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.ProvisioningState?alt=com.microsoft.azure.management.containerregistry.ProvisioningState&text=ProvisioningState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the provisioning state of the task. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'.</p>

    <p></p>
  syntax: public ProvisioningState provisioningState()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.provisioningState()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.status()
  name: status()
  nameWithType: TaskInner.status()
  returns:
    description: <p>the status value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskStatus?alt=com.microsoft.azure.management.containerregistry.TaskStatus&text=TaskStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the current status of task. Possible values include: 'Disabled', 'Enabled'.</p>

    <p></p>
  syntax: public TaskStatus status()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.status()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.step()
  name: step()
  nameWithType: TaskInner.step()
  returns:
    description: <p>the step value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskStepProperties?alt=com.microsoft.azure.management.containerregistry.TaskStepProperties&text=TaskStepProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the properties of a task step.</p>

    <p></p>
  syntax: public TaskStepProperties step()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.step()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.timeout()
  name: timeout()
  nameWithType: TaskInner.timeout()
  returns:
    description: <p>the timeout value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get run timeout in seconds.</p>

    <p></p>
  syntax: public Integer timeout()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.timeout()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.trigger()
  name: trigger()
  nameWithType: TaskInner.trigger()
  returns:
    description: <p>the trigger value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.TriggerProperties?alt=com.microsoft.azure.management.containerregistry.TriggerProperties&text=TriggerProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the properties that describe all triggers for the task.</p>

    <p></p>
  syntax: public TriggerProperties trigger()
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.trigger()
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withAgentConfiguration(AgentProperties agentConfiguration)
  name: withAgentConfiguration(AgentProperties agentConfiguration)
  nameWithType: TaskInner.withAgentConfiguration(AgentProperties agentConfiguration)
  parameters:
  - description: <p>the agentConfiguration value to set </p>
    name: agentConfiguration
    type: <xref href="com.microsoft.azure.management.containerregistry.AgentProperties?alt=com.microsoft.azure.management.containerregistry.AgentProperties&text=AgentProperties" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskInner object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the machine configuration of the run agent.</p>

    <p></p>
  syntax: public TaskInner withAgentConfiguration(AgentProperties agentConfiguration)
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withAgentConfiguration(AgentProperties)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withPlatform(PlatformProperties platform)
  name: withPlatform(PlatformProperties platform)
  nameWithType: TaskInner.withPlatform(PlatformProperties platform)
  parameters:
  - description: <p>the platform value to set </p>
    name: platform
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskInner object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the platform properties against which the run has to happen.</p>

    <p></p>
  syntax: public TaskInner withPlatform(PlatformProperties platform)
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withPlatform(PlatformProperties)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withStatus(TaskStatus status)
  name: withStatus(TaskStatus status)
  nameWithType: TaskInner.withStatus(TaskStatus status)
  parameters:
  - description: <p>the status value to set </p>
    name: status
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskStatus?alt=com.microsoft.azure.management.containerregistry.TaskStatus&text=TaskStatus" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskInner object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the current status of task. Possible values include: 'Disabled', 'Enabled'.</p>

    <p></p>
  syntax: public TaskInner withStatus(TaskStatus status)
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withStatus(TaskStatus)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withStep(TaskStepProperties step)
  name: withStep(TaskStepProperties step)
  nameWithType: TaskInner.withStep(TaskStepProperties step)
  parameters:
  - description: <p>the step value to set </p>
    name: step
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskStepProperties?alt=com.microsoft.azure.management.containerregistry.TaskStepProperties&text=TaskStepProperties" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskInner object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the properties of a task step.</p>

    <p></p>
  syntax: public TaskInner withStep(TaskStepProperties step)
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withStep(TaskStepProperties)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withTimeout(Integer timeout)
  name: withTimeout(Integer timeout)
  nameWithType: TaskInner.withTimeout(Integer timeout)
  parameters:
  - description: <p>the timeout value to set </p>
    name: timeout
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskInner object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set run timeout in seconds.</p>

    <p></p>
  syntax: public TaskInner withTimeout(Integer timeout)
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withTimeout(Integer)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withTrigger(TriggerProperties trigger)
  name: withTrigger(TriggerProperties trigger)
  nameWithType: TaskInner.withTrigger(TriggerProperties trigger)
  parameters:
  - description: <p>the trigger value to set </p>
    name: trigger
    type: <xref href="com.microsoft.azure.management.containerregistry.TriggerProperties?alt=com.microsoft.azure.management.containerregistry.TriggerProperties&text=TriggerProperties" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskInner object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the properties that describe all triggers for the task.</p>

    <p></p>
  syntax: public TaskInner withTrigger(TriggerProperties trigger)
  uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner.withTrigger(TriggerProperties)
nameWithType: TaskInner
syntax: public class TaskInner
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.TaskInner
fullName: com.microsoft.azure.management.containerregistry.implementation.TaskInner
name: TaskInner
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>The task that has the ARM resource and task properties. The task will have all information to schedule a run against it. </p>
metadata: {}
