### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.HttpsTransportManager(ClientConfiguration config)
  name: HttpsTransportManager(ClientConfiguration config)
  nameWithType: HttpsTransportManager.HttpsTransportManager(ClientConfiguration config)
  parameters:
  - description: <p>is the set of device configurations. </p>
    name: config
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientConfiguration?alt=com.microsoft.azure.sdk.iot.device.ClientConfiguration&text=ClientConfiguration" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>is the config is null. </p>
  summary: >-
    <p>Constructor</p>

    <p></p>
  syntax: public HttpsTransportManager(ClientConfiguration config)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.HttpsTransportManager(ClientConfiguration)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.close()
  name: close()
  nameWithType: HttpsTransportManager.close()
  summary: <p>Close the connection destroying the HttpsIotHubConnection instance. </p>
  syntax: public void close()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.close()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.getFileUploadSasUri(IotHubTransportMessage message)
  name: getFileUploadSasUri(IotHubTransportMessage message)
  nameWithType: HttpsTransportManager.getFileUploadSasUri(IotHubTransportMessage message)
  parameters:
  - name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsResponse?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsResponse&text=HttpsResponse" data-throw-if-not-resolved="False"/>
  syntax: public HttpsResponse getFileUploadSasUri(IotHubTransportMessage message)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.getFileUploadSasUri(IotHubTransportMessage)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.invokeMethod(DirectMethodRequest directMethodRequest, String deviceId, String moduleId)
  name: invokeMethod(DirectMethodRequest directMethodRequest, String deviceId, String moduleId)
  nameWithType: HttpsTransportManager.invokeMethod(DirectMethodRequest directMethodRequest, String deviceId, String moduleId)
  parameters:
  - description: <p>the method request to make </p>
    name: directMethodRequest
    type: <xref href="com.microsoft.azure.sdk.iot.device.edge.DirectMethodRequest?alt=com.microsoft.azure.sdk.iot.device.edge.DirectMethodRequest&text=DirectMethodRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the device id of the device the moduleId belongs to </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the module id of the module to invoke the method on </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if the IotHub cannot be reached </p>
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if any issues occur when sending the http request to its target </p>
  returns:
    description: <p>the result of that request </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.edge.DirectMethodResponse?alt=com.microsoft.azure.sdk.iot.device.edge.DirectMethodResponse&text=DirectMethodResponse" data-throw-if-not-resolved="False"/>
  summary: <p>Invoke a direct method to the provided uri </p>
  syntax: public DirectMethodResponse invokeMethod(DirectMethodRequest directMethodRequest, String deviceId, String moduleId)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.invokeMethod(DirectMethodRequest,String,String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.open()
  name: open()
  nameWithType: HttpsTransportManager.open()
  summary: <p>Opens the connection by creating a new instance of the HttpsIotHubConnection. </p>
  syntax: public void open()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.open()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.open(String[] topics)
  name: open(String[] topics)
  nameWithType: HttpsTransportManager.open(String[] topics)
  parameters:
  - description: <p>is a list of topics to signed in. </p>
    name: topics
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens the connection by creating a new instance of the HttpsIotHubConnection. The provided topics have no effect for HTTPS protocol, and it is ignored.</p>

    <p></p>
  syntax: public void open(String[] topics)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.open(String [])
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.receive()
  name: receive()
  nameWithType: HttpsTransportManager.receive()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if the IotHub communication failed. </p>
  returns:
    description: >-
      <p>New message from the IotHub. It can be<code>nullÂ 

          </code> is there is no new message to read. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  summary: <p>Pull the IotHub looking for new message. </p>
  syntax: public Message receive()
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.receive()
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.send(IotHubTransportMessage message, Map<String, String> additionalHeaders)
  name: send(IotHubTransportMessage message, Map<String, String> additionalHeaders)
  nameWithType: HttpsTransportManager.send(IotHubTransportMessage message, Map<String, String> additionalHeaders)
  parameters:
  - description: <p>is the message to send. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage" data-throw-if-not-resolved="False"/>
  - description: <p>the http headers to use in the request. </p>
    name: additionalHeaders
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if the IotHub communication failed. </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided message is null, or invalid. </p>
  returns:
    description: <p>the IotHub response with the status and payload. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsResponse?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsResponse&text=HttpsResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This is a blocking send message. It send the provide message, wait for the IotHub answer, and return is in the ResponseMessage, which contains the status and the payload.</p>

    <p></p>
  syntax: public HttpsResponse send(IotHubTransportMessage message, Map<String, String> additionalHeaders)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.send(IotHubTransportMessage,Map<String, String>)
- fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.sendFileUploadNotification(IotHubTransportMessage message)
  name: sendFileUploadNotification(IotHubTransportMessage message)
  nameWithType: HttpsTransportManager.sendFileUploadNotification(IotHubTransportMessage message)
  parameters:
  - name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.https.HttpsResponse?alt=com.microsoft.azure.sdk.iot.device.transport.https.HttpsResponse&text=HttpsResponse" data-throw-if-not-resolved="False"/>
  syntax: public HttpsResponse sendFileUploadNotification(IotHubTransportMessage message)
  uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager.sendFileUploadNotification(IotHubTransportMessage)
nameWithType: HttpsTransportManager
syntax: public class HttpsTransportManager
type: class
uid: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager
fullName: com.microsoft.azure.sdk.iot.device.transport.https.HttpsTransportManager
name: HttpsTransportManager
package: com.microsoft.azure.sdk.iot.device.transport.https
summary: <p>Implementation of the transport manager for https. </p>
metadata: {}
