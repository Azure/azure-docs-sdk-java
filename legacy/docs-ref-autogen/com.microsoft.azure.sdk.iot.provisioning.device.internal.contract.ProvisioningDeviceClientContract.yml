### YamlMime:JavaType
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.RETRY_AFTER
  name: RETRY_AFTER
  nameWithType: ProvisioningDeviceClientContract.RETRY_AFTER
  syntax: protected static final String RETRY_AFTER= "retry-after"
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.RETRY_AFTER
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  name: authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  nameWithType: ProvisioningDeviceClientContract.authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  parameters:
  - name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - name: dpsAuthorizationCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  syntax: public abstract void authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.authenticateWithProvisioningService(RequestData,ResponseCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.close()
  name: close()
  nameWithType: ProvisioningDeviceClientContract.close()
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  syntax: public abstract void close()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.close()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.createProvisioningContract(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  name: createProvisioningContract(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  nameWithType: ProvisioningDeviceClientContract.createProvisioningContract(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  parameters:
  - description: <p>Config used for provisioning </p>
    name: provisioningDeviceClientConfig
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.ProvisioningDeviceClientConfig?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.ProvisioningDeviceClientConfig&text=ProvisioningDeviceClientConfig" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the contract implementation could not be instantiated. </p>
  returns:
    description: <p>Implementation of the relevant contract for the requested protocol </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract&text=ProvisioningDeviceClientContract" data-throw-if-not-resolved="False"/>
  summary: <p>Static method to create contracts with the service over the specified protocol </p>
  syntax: public static ProvisioningDeviceClientContract createProvisioningContract(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.createProvisioningContract(ProvisioningDeviceClientConfig)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getConnectionId()
  name: getConnectionId()
  nameWithType: ProvisioningDeviceClientContract.getConnectionId()
  returns:
    type: <xref href="abstract+String?alt=abstract+String&text=abstract+String" data-throw-if-not-resolved="False"/>
  syntax: public abstract String getConnectionId()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getConnectionId()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getHostName()
  name: getHostName()
  nameWithType: ProvisioningDeviceClientContract.getHostName()
  returns:
    type: <xref href="abstract+String?alt=abstract+String&text=abstract+String" data-throw-if-not-resolved="False"/>
  syntax: public abstract String getHostName()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getHostName()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  name: getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  nameWithType: ProvisioningDeviceClientContract.getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  parameters:
  - name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - name: dpsAuthorizationCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  syntax: public abstract void getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getRegistrationStatus(RequestData,ResponseCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getRetryValue()
  name: getRetryValue()
  nameWithType: ProvisioningDeviceClientContract.getRetryValue()
  returns:
    description: <p>integer value of the number of milliseconds to wait to call dps service </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Method to get the DPS retry after value </p>
  syntax: public int getRetryValue()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getRetryValue()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.open(RequestData requestData)
  name: open(RequestData requestData)
  nameWithType: ProvisioningDeviceClientContract.open(RequestData requestData)
  parameters:
  - name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  syntax: public abstract void open(RequestData requestData)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.open(RequestData)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  name: requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  nameWithType: ProvisioningDeviceClientContract.requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  parameters:
  - name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - name: dpsAuthorizationCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  syntax: public abstract void requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.requestNonceForTPM(RequestData,ResponseCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.setRetrieveRetryAfterValue(String protocolRetryValue)
  name: setRetrieveRetryAfterValue(String protocolRetryValue)
  nameWithType: ProvisioningDeviceClientContract.setRetrieveRetryAfterValue(String protocolRetryValue)
  parameters:
  - name: protocolRetryValue
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: protected void setRetrieveRetryAfterValue(String protocolRetryValue)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.setRetrieveRetryAfterValue(String)
nameWithType: ProvisioningDeviceClientContract
syntax: public class ProvisioningDeviceClientContract
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract
fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract
name: ProvisioningDeviceClientContract
package: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract
metadata: {}
