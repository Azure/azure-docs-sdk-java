### YamlMime:JavaMember
nameWithType: InMemoryLeaseManager.updateLease
type: method
members:
- fullName: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease(CompleteLease lease)
  name: updateLease(CompleteLease lease)
  nameWithType: InMemoryLeaseManager.updateLease(CompleteLease lease)
  overridden: com.microsoft.azure.eventprocessorhost.ILeaseManager.updateLease(CompleteLease)
  parameters:
  - description: <p>New lease info to be stored </p>
    name: lease
    type: <xref href="com.microsoft.azure.eventprocessorhost.CompleteLease?alt=com.microsoft.azure.eventprocessorhost.CompleteLease&text=CompleteLease" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if the update was successful, false if lease was lost and could not be updated, completes exceptionally on error. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture<Boolean>&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update the store with the information in the provided lease. </p>

    <p>It is necessary to currently hold a lease in order to update it. If the lease has been stolen, or expired, or released, it cannot be updated. Lease manager implementations should renew the lease before performing the update to avoid lease expiration during the process.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> updateLease(CompleteLease lease)
  uid: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease(CompleteLease)
uid: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease*
fullName: com.microsoft.azure.eventprocessorhost.InMemoryLeaseManager.updateLease(CompleteLease lease)
name: updateLease(CompleteLease lease)
package: com.microsoft.azure.eventprocessorhost
metadata: {}
