### YamlMime:JavaMember
nameWithType: Files.listFromTaskAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId)
  name: listFromTaskAsync(final String jobId, final String taskId)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose files you want to list. </p>
    name: taskId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId)
  uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String)
- fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose files you want to list. </p>
    name: taskId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    name: recursive
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileListFromTaskOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions&text=FileListFromTaskOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeFile&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax: public Observable<Page<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions)
  uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions)
- fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  name: listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose files you want to list. </p>
    name: taskId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to list children of the task directory. This parameter can be used in combination with the filter parameter to list specific type of files. </p>
    name: recursive
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileListFromTaskOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileListFromTaskOptions&text=FileListFromTaskOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final Boolean recursive, final FileListFromTaskOptions fileListFromTaskOptions, final ListOperationCallback<NodeFile> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final Boolean,final FileListFromTaskOptions,final ListOperationCallback<NodeFile>)
- fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  name: listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  nameWithType: Files.listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose files you want to list. </p>
    name: taskId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeFile?alt=com.microsoft.azure.batch.protocol.models.NodeFile&text=NodeFile" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the files in a task's directory on its compute node.</p>

    <p></p>
  syntax: public ServiceFuture<List<NodeFile>> listFromTaskAsync(final String jobId, final String taskId, final ListOperationCallback<NodeFile> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync(final String,final String,final ListOperationCallback<NodeFile>)
uid: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync*
fullName: com.microsoft.azure.batch.protocol.Files.listFromTaskAsync
name: listFromTaskAsync(final String jobId, final String taskId)
package: com.microsoft.azure.batch.protocol
metadata: {}
