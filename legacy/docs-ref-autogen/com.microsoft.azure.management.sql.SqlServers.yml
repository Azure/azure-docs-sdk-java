### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIds(Collection<String>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIds(String...)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIdsAsync(Collection<String>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIdsAsync(String...)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.sql.SqlServers.checkNameAvailability(String name)
  name: checkNameAvailability(String name)
  nameWithType: SqlServers.checkNameAvailability(String name)
  parameters:
  - description: <p>the container registry name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>whether the name is available and other info if not </p>
    type: <xref href="com.microsoft.azure.management.sql.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.sql.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if the specified container registry name is valid and available.</p>

    <p></p>
  syntax: public CheckNameAvailabilityResult checkNameAvailability(String name)
  uid: com.microsoft.azure.management.sql.SqlServers.checkNameAvailability(String)
- fullName: com.microsoft.azure.management.sql.SqlServers.checkNameAvailabilityAsync(String name)
  name: checkNameAvailabilityAsync(String name)
  nameWithType: SqlServers.checkNameAvailabilityAsync(String name)
  parameters:
  - description: <p>the container registry name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning whether the name is available or other info if not </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.sql.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks if container registry name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.sql.SqlServers.checkNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.sql.SqlServers.databases()
  name: databases()
  nameWithType: SqlServers.databases()
  returns:
    description: <p>the SQL Server Database API entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabaseOperations?alt=com.microsoft.azure.management.sql.SqlDatabaseOperations&text=SqlDatabaseOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlDatabaseOperations databases()
  uid: com.microsoft.azure.management.sql.SqlServers.databases()
- fullName: com.microsoft.azure.management.sql.SqlServers.dnsAliases()
  name: dnsAliases()
  nameWithType: SqlServers.dnsAliases()
  returns:
    description: <p>the SQL Server DNS aliases API entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlServerDnsAliasOperations?alt=com.microsoft.azure.management.sql.SqlServerDnsAliasOperations&text=SqlServerDnsAliasOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlServerDnsAliasOperations dnsAliases()
  uid: com.microsoft.azure.management.sql.SqlServers.dnsAliases()
- fullName: com.microsoft.azure.management.sql.SqlServers.elasticPools()
  name: elasticPools()
  nameWithType: SqlServers.elasticPools()
  returns:
    description: <p>the SQL Server Elastic Pools API entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlElasticPoolOperations?alt=com.microsoft.azure.management.sql.SqlElasticPoolOperations&text=SqlElasticPoolOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlElasticPoolOperations elasticPools()
  uid: com.microsoft.azure.management.sql.SqlServers.elasticPools()
- fullName: com.microsoft.azure.management.sql.SqlServers.encryptionProtectors()
  name: encryptionProtectors()
  nameWithType: SqlServers.encryptionProtectors()
  returns:
    description: <p>the SQL Encryption Protector entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlEncryptionProtectorOperations?alt=com.microsoft.azure.management.sql.SqlEncryptionProtectorOperations&text=SqlEncryptionProtectorOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlEncryptionProtectorOperations encryptionProtectors()
  uid: com.microsoft.azure.management.sql.SqlServers.encryptionProtectors()
- fullName: com.microsoft.azure.management.sql.SqlServers.failoverGroups()
  name: failoverGroups()
  nameWithType: SqlServers.failoverGroups()
  returns:
    description: <p>the SQL Failover Group API entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlFailoverGroupOperations?alt=com.microsoft.azure.management.sql.SqlFailoverGroupOperations&text=SqlFailoverGroupOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlFailoverGroupOperations failoverGroups()
  uid: com.microsoft.azure.management.sql.SqlServers.failoverGroups()
- fullName: com.microsoft.azure.management.sql.SqlServers.firewallRules()
  name: firewallRules()
  nameWithType: SqlServers.firewallRules()
  returns:
    description: <p>the SQL Server Firewall Rules API entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlFirewallRuleOperations?alt=com.microsoft.azure.management.sql.SqlFirewallRuleOperations&text=SqlFirewallRuleOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlFirewallRuleOperations firewallRules()
  uid: com.microsoft.azure.management.sql.SqlServers.firewallRules()
- fullName: com.microsoft.azure.management.sql.SqlServers.getCapabilitiesByRegion(Region region)
  name: getCapabilitiesByRegion(Region region)
  nameWithType: SqlServers.getCapabilitiesByRegion(Region region)
  parameters:
  - description: <p>the location to get the Azure SQL server capabilities for </p>
    name: region
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the server capabilities object </p>
    type: <xref href="com.microsoft.azure.management.sql.RegionCapabilities?alt=com.microsoft.azure.management.sql.RegionCapabilities&text=RegionCapabilities" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Azure SQL server capabilities for a given Azure region.</p>

    <p></p>
  syntax: public RegionCapabilities getCapabilitiesByRegion(Region region)
  uid: com.microsoft.azure.management.sql.SqlServers.getCapabilitiesByRegion(Region)
- fullName: com.microsoft.azure.management.sql.SqlServers.getCapabilitiesByRegionAsync(Region region)
  name: getCapabilitiesByRegionAsync(Region region)
  nameWithType: SqlServers.getCapabilitiesByRegionAsync(Region region)
  parameters:
  - description: <p>the location to get the Azure SQL server capabilities for </p>
    name: region
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the server capabilities object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.RegionCapabilities?alt=com.microsoft.azure.management.sql.RegionCapabilities&text=RegionCapabilities" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the Azure SQL server capabilities for a given Azure region asynchronously.</p>

    <p></p>
  syntax: public Observable<RegionCapabilities> getCapabilitiesByRegionAsync(Region region)
  uid: com.microsoft.azure.management.sql.SqlServers.getCapabilitiesByRegionAsync(Region)
- fullName: com.microsoft.azure.management.sql.SqlServers.listUsageByRegion(Region region)
  name: listUsageByRegion(Region region)
  nameWithType: SqlServers.listUsageByRegion(Region region)
  parameters:
  - description: <p>the location to get the Azure SQL server usages for </p>
    name: region
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SQL usage object </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.SqlSubscriptionUsageMetric?alt=com.microsoft.azure.management.sql.SqlSubscriptionUsageMetric&text=SqlSubscriptionUsageMetric" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Azure SQL server usages for a given Azure region.</p>

    <p></p>
  syntax: public List<SqlSubscriptionUsageMetric> listUsageByRegion(Region region)
  uid: com.microsoft.azure.management.sql.SqlServers.listUsageByRegion(Region)
- fullName: com.microsoft.azure.management.sql.SqlServers.listUsageByRegionAsync(Region region)
  name: listUsageByRegionAsync(Region region)
  nameWithType: SqlServers.listUsageByRegionAsync(Region region)
  parameters:
  - description: <p>the location to get the Azure SQL server usages for </p>
    name: region
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the server usages object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.SqlSubscriptionUsageMetric?alt=com.microsoft.azure.management.sql.SqlSubscriptionUsageMetric&text=SqlSubscriptionUsageMetric" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Azure SQL server usages for a given Azure region asynchronously.</p>

    <p></p>
  syntax: public Observable<SqlSubscriptionUsageMetric> listUsageByRegionAsync(Region region)
  uid: com.microsoft.azure.management.sql.SqlServers.listUsageByRegionAsync(Region)
- fullName: com.microsoft.azure.management.sql.SqlServers.serverKeys()
  name: serverKeys()
  nameWithType: SqlServers.serverKeys()
  returns:
    description: <p>the SQL Server Key entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlServerKeyOperations?alt=com.microsoft.azure.management.sql.SqlServerKeyOperations&text=SqlServerKeyOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlServerKeyOperations serverKeys()
  uid: com.microsoft.azure.management.sql.SqlServers.serverKeys()
- fullName: com.microsoft.azure.management.sql.SqlServers.serverSecurityAlertPolicies()
  name: serverSecurityAlertPolicies()
  nameWithType: SqlServers.serverSecurityAlertPolicies()
  returns:
    description: <p>entry point to manage SQL Server Security Alert Policy </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlServerSecurityAlertPolicyOperations?alt=com.microsoft.azure.management.sql.SqlServerSecurityAlertPolicyOperations&text=SqlServerSecurityAlertPolicyOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlServerSecurityAlertPolicyOperations serverSecurityAlertPolicies()
  uid: com.microsoft.azure.management.sql.SqlServers.serverSecurityAlertPolicies()
- fullName: com.microsoft.azure.management.sql.SqlServers.syncGroups()
  name: syncGroups()
  nameWithType: SqlServers.syncGroups()
  returns:
    description: <p>the SQL Sync Group entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlSyncGroupOperations?alt=com.microsoft.azure.management.sql.SqlSyncGroupOperations&text=SqlSyncGroupOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlSyncGroupOperations syncGroups()
  uid: com.microsoft.azure.management.sql.SqlServers.syncGroups()
- fullName: com.microsoft.azure.management.sql.SqlServers.syncMembers()
  name: syncMembers()
  nameWithType: SqlServers.syncMembers()
  returns:
    description: <p>the SQL Sync Group entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlSyncMemberOperations?alt=com.microsoft.azure.management.sql.SqlSyncMemberOperations&text=SqlSyncMemberOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlSyncMemberOperations syncMembers()
  uid: com.microsoft.azure.management.sql.SqlServers.syncMembers()
- fullName: com.microsoft.azure.management.sql.SqlServers.virtualNetworkRules()
  name: virtualNetworkRules()
  nameWithType: SqlServers.virtualNetworkRules()
  returns:
    description: <p>the SQL Server VirtualNetwork Rules API entry point </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlVirtualNetworkRuleOperations?alt=com.microsoft.azure.management.sql.SqlVirtualNetworkRuleOperations&text=SqlVirtualNetworkRuleOperations" data-throw-if-not-resolved="False"/>
  syntax: public SqlVirtualNetworkRuleOperations virtualNetworkRules()
  uid: com.microsoft.azure.management.sql.SqlServers.virtualNetworkRules()
nameWithType: SqlServers
syntax: public interface SqlServers extends SupportsCreating<SqlServer.DefinitionStages.Blank>,SupportsListing<SqlServer>,SupportsListingByResourceGroup<SqlServer>,SupportsGettingByResourceGroup<SqlServer>,SupportsGettingById<SqlServer>,SupportsDeletingById,SupportsDeletingByResourceGroup,SupportsBatchCreation<SqlServer>,SupportsBatchDeletion,HasManager<SqlServerManager>,HasInner<ServersInner>,SupportsCreating<SqlServer.DefinitionStages.Blank>,SupportsListing<SqlServer>,SupportsListingByResourceGroup<SqlServer>,SupportsGettingByResourceGroup<SqlServer>,SupportsGettingById<SqlServer>,SupportsDeletingById,SupportsDeletingByResourceGroup,SupportsBatchCreation<SqlServer>,SupportsBatchDeletion,HasManager<SqlServerManager>,HasInner<ServersInner>
type: interface
uid: com.microsoft.azure.management.sql.SqlServers
fullName: com.microsoft.azure.management.sql.SqlServers
name: SqlServers
package: com.microsoft.azure.management.sql
summary: <p>Entry point to SQL Server management API. </p>
metadata: {}
