### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.containerregistry.Registries.checkNameAvailability(String name)
  name: checkNameAvailability(String name)
  nameWithType: Registries.checkNameAvailability(String name)
  parameters:
  - description: <p>the container registry name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>whether the name is available and other info if not </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if the specified container registry name is valid and available.</p>

    <p></p>
  syntax: public CheckNameAvailabilityResult checkNameAvailability(String name)
  uid: com.microsoft.azure.management.containerregistry.Registries.checkNameAvailability(String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.checkNameAvailabilityAsync(String name)
  name: checkNameAvailabilityAsync(String name)
  nameWithType: Registries.checkNameAvailabilityAsync(String name)
  parameters:
  - description: <p>the container registry name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning whether the name is available or other info if not </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks if container registry name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.containerregistry.Registries.checkNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.getBuildSourceUploadUrl(String rgName, String acrName)
  name: getBuildSourceUploadUrl(String rgName, String acrName)
  nameWithType: Registries.getBuildSourceUploadUrl(String rgName, String acrName)
  parameters:
  - description: <p>the name of the resource group. </p>
    name: rgName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the container. </p>
    name: acrName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the URL of the build source upload. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.SourceUploadDefinition?alt=com.microsoft.azure.management.containerregistry.SourceUploadDefinition&text=SourceUploadDefinition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The function that gets the URL of the build source upload.</p>

    <p></p>
  syntax: public SourceUploadDefinition getBuildSourceUploadUrl(String rgName, String acrName)
  uid: com.microsoft.azure.management.containerregistry.Registries.getBuildSourceUploadUrl(String,String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.getBuildSourceUploadUrlAsync(String rgName, String acrName)
  name: getBuildSourceUploadUrlAsync(String rgName, String acrName)
  nameWithType: Registries.getBuildSourceUploadUrlAsync(String rgName, String acrName)
  parameters:
  - description: <p>the name of the resource group. </p>
    name: rgName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the container. </p>
    name: acrName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the URL of the build source upload. </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.SourceUploadDefinition?alt=com.microsoft.azure.management.containerregistry.SourceUploadDefinition&text=SourceUploadDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>The function that gets the URL of the build source upload ashnchronously.</p>

    <p></p>
  syntax: public Observable<SourceUploadDefinition> getBuildSourceUploadUrlAsync(String rgName, String acrName)
  uid: com.microsoft.azure.management.containerregistry.Registries.getBuildSourceUploadUrlAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.getCredentials(String resourceGroupName, String registryName)
  name: getCredentials(String resourceGroupName, String registryName)
  nameWithType: Registries.getCredentials(String resourceGroupName, String registryName)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the container registry's login credentials </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public RegistryCredentials getCredentials(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.Registries.getCredentials(String,String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.getCredentialsAsync(String resourceGroupName, String registryName)
  name: getCredentialsAsync(String resourceGroupName, String registryName)
  nameWithType: Registries.getCredentialsAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the container registry's login credentials </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryCredentials> getCredentialsAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.Registries.getCredentialsAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.listQuotaUsages(String resourceGroupName, String registryName)
  name: listQuotaUsages(String resourceGroupName, String registryName)
  nameWithType: Registries.listQuotaUsages(String resourceGroupName, String registryName)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of container registry's quota usages </p>
    type: Collection&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryUsage?alt=com.microsoft.azure.management.containerregistry.RegistryUsage&text=RegistryUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Collection<RegistryUsage> listQuotaUsages(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.Registries.listQuotaUsages(String,String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.listQuotaUsagesAsync(String resourceGroupName, String registryName)
  name: listQuotaUsagesAsync(String resourceGroupName, String registryName)
  nameWithType: Registries.listQuotaUsagesAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the list of container registry's quota usages </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryUsage?alt=com.microsoft.azure.management.containerregistry.RegistryUsage&text=RegistryUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryUsage> listQuotaUsagesAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.Registries.listQuotaUsagesAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.Registries.regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  name: regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  nameWithType: Registries.regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the admin user access key name to regenerate the value for </p>
    name: accessKeyType
    type: <xref href="com.microsoft.azure.management.containerregistry.AccessKeyType?alt=com.microsoft.azure.management.containerregistry.AccessKeyType&text=AccessKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the container registry's login credentials </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates the value for one of the admin user access key for the specified container registry.</p>

    <p></p>
  syntax: public RegistryCredentials regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  uid: com.microsoft.azure.management.containerregistry.Registries.regenerateCredential(String,String,AccessKeyType)
- fullName: com.microsoft.azure.management.containerregistry.Registries.regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  name: regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  nameWithType: Registries.regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the admin user access key name to regenerate the value for </p>
    name: accessKeyType
    type: <xref href="com.microsoft.azure.management.containerregistry.AccessKeyType?alt=com.microsoft.azure.management.containerregistry.AccessKeyType&text=AccessKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the container registry's login credentials </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates the value for one of the admin user access key for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryCredentials> regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  uid: com.microsoft.azure.management.containerregistry.Registries.regenerateCredentialAsync(String,String,AccessKeyType)
- fullName: com.microsoft.azure.management.containerregistry.Registries.webhooks()
  name: webhooks()
  nameWithType: Registries.webhooks()
  returns:
    description: <p>returns entry point to manage container registry webhooks. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.Registries.WebhooksClient?alt=com.microsoft.azure.management.containerregistry.Registries.WebhooksClient&text=Registries.WebhooksClient" data-throw-if-not-resolved="False"/>
  syntax: public WebhooksClient webhooks()
  uid: com.microsoft.azure.management.containerregistry.Registries.webhooks()
nameWithType: Registries
syntax: public interface Registries extends SupportsCreating<Registry.DefinitionStages.Blank>,HasManager<ContainerRegistryManager>,HasInner<RegistriesInner>,SupportsBatchCreation<Registry>,SupportsGettingById<Registry>,SupportsDeletingById,SupportsDeletingByResourceGroup,SupportsListingByResourceGroup<Registry>,SupportsGettingByResourceGroup<Registry>,SupportsListing<Registry>
type: interface
uid: com.microsoft.azure.management.containerregistry.Registries
fullName: com.microsoft.azure.management.containerregistry.Registries
name: Registries
package: com.microsoft.azure.management.containerregistry
summary: <p>Entry point to the registry management API. </p>
metadata: {}
