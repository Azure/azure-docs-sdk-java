### YamlMime:JavaMember
nameWithType: AzureAccounts.listUserLUISAccounts
type: method
members:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts()
  name: listUserLUISAccounts()
  nameWithType: AzureAccounts.listUserLUISAccounts()
  returns:
    description: <p>the first stage of the listUserLUISAccounts call </p>
    type: <xref href="AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute?alt=AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute&text=AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>user - Get LUIS Azure accounts. Gets the LUIS Azure accounts for the user using his ARM token.</p>

    <p></p>
  syntax: public AzureAccountsListUserLUISAccountsDefinitionStages.WithExecute listUserLUISAccounts()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  name: listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  nameWithType: AzureAccounts.listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listUserLUISAccountsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListUserLUISAccountsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListUserLUISAccountsOptionalParameter&text=ListUserLUISAccountsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;AzureAccountInfoObject&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AzureAccountInfoObject&text=AzureAccountInfoObject" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>user - Get LUIS Azure accounts. Gets the LUIS Azure accounts for the user using his ARM token.</p>

    <p></p>
  syntax: public List<AzureAccountInfoObject> listUserLUISAccounts(ListUserLUISAccountsOptionalParameter listUserLUISAccountsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts(ListUserLUISAccountsOptionalParameter)
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts*
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.AzureAccounts.listUserLUISAccounts
name: listUserLUISAccounts()
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
metadata: {}
