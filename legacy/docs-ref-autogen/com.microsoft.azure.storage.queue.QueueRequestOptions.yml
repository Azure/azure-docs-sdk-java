### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.QueueRequestOptions()
  name: QueueRequestOptions()
  nameWithType: QueueRequestOptions.QueueRequestOptions()
  summary: <p>Initializes a new instance of the QueueRequestOptions class. </p>
  syntax: public QueueRequestOptions()
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.QueueRequestOptions()
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.QueueRequestOptions(final QueueRequestOptions other)
  name: QueueRequestOptions(final QueueRequestOptions other)
  nameWithType: QueueRequestOptions.QueueRequestOptions(final QueueRequestOptions other)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.queue.QueueRequestOptions" data-throw-if-not-resolved="false" data-raw-source="QueueRequestOptions"></xref> object to copy the values from. </p>
    name: other
    type: final <xref href="com.microsoft.azure.storage.queue.QueueRequestOptions?alt=com.microsoft.azure.storage.queue.QueueRequestOptions&text=QueueRequestOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the QueueRequestOptions class as a copy of another QueueRequestOptions instance.</p>

    <p></p>
  syntax: public QueueRequestOptions(final QueueRequestOptions other)
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.QueueRequestOptions(final QueueRequestOptions)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.storage.RequestOptions.applyBaseDefaultsInternal(final RequestOptions)
- com.microsoft.azure.storage.RequestOptions.disableHttpsSocketKeepAlive()
- com.microsoft.azure.storage.RequestOptions.getLocationMode()
- com.microsoft.azure.storage.RequestOptions.getMaximumExecutionTimeInMs()
- com.microsoft.azure.storage.RequestOptions.getOperationExpiryTimeInMs()
- com.microsoft.azure.storage.RequestOptions.getRetryPolicyFactory()
- com.microsoft.azure.storage.RequestOptions.getTimeoutIntervalInMs()
- com.microsoft.azure.storage.RequestOptions.populateRequestOptions(RequestOptions,final RequestOptions,final boolean)
- com.microsoft.azure.storage.RequestOptions.RequestOptions()
- com.microsoft.azure.storage.RequestOptions.RequestOptions(final RequestOptions)
- com.microsoft.azure.storage.RequestOptions.requireEncryption()
- com.microsoft.azure.storage.RequestOptions.setDisableHttpsSocketKeepAlive(Boolean)
- com.microsoft.azure.storage.RequestOptions.setLocationMode(final LocationMode)
- com.microsoft.azure.storage.RequestOptions.setMaximumExecutionTimeInMs(Integer)
- com.microsoft.azure.storage.RequestOptions.setRequireEncryption(Boolean)
- com.microsoft.azure.storage.RequestOptions.setRetryPolicyFactory(final RetryPolicyFactory)
- com.microsoft.azure.storage.RequestOptions.setTimeoutIntervalInMs(final Integer)
methods:
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.applyDefaults(QueueRequestOptions modifiedOptions)
  name: applyDefaults(QueueRequestOptions modifiedOptions)
  nameWithType: QueueRequestOptions.applyDefaults(QueueRequestOptions modifiedOptions)
  parameters:
  - description: <p>The options to apply defaults to. </p>
    name: modifiedOptions
    type: <xref href="com.microsoft.azure.storage.queue.QueueRequestOptions?alt=com.microsoft.azure.storage.queue.QueueRequestOptions&text=QueueRequestOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Applies defaults to the options passed in.</p>

    <p></p>
  syntax: protected static void applyDefaults(QueueRequestOptions modifiedOptions)
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.applyDefaults(QueueRequestOptions)
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.assertPolicyIfRequired()
  name: assertPolicyIfRequired()
  nameWithType: QueueRequestOptions.assertPolicyIfRequired()
  summary: <p>Assert that if strict mode is on, an encryption policy is specified. </p>
  syntax: protected void assertPolicyIfRequired()
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.assertPolicyIfRequired()
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.getEncryptionPolicy()
  name: getEncryptionPolicy()
  nameWithType: QueueRequestOptions.getEncryptionPolicy()
  returns:
    description: <p>An <xref uid="com.microsoft.azure.storage.queue.QueueEncryptionPolicy" data-throw-if-not-resolved="false" data-raw-source="QueueEncryptionPolicy"></xref> object that represents the current encryption policy. </p>
    type: <xref href="com.microsoft.azure.storage.queue.QueueEncryptionPolicy?alt=com.microsoft.azure.storage.queue.QueueEncryptionPolicy&text=QueueEncryptionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the encryption policy to use for this request. For more information about the encryption policy defaults, see <xref uid="com.microsoft.azure.storage.queue.QueueRequestOptions.setEncryptionPolicy(QueueEncryptionPolicy)" data-throw-if-not-resolved="false" data-raw-source="setEncryptionPolicy(QueueEncryptionPolicy)"></xref>.</p>

    <p></p>
  syntax: public QueueEncryptionPolicy getEncryptionPolicy()
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.getEncryptionPolicy()
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.populateAndApplyDefaults(QueueRequestOptions options, final CloudQueueClient client)
  name: populateAndApplyDefaults(QueueRequestOptions options, final CloudQueueClient client)
  nameWithType: QueueRequestOptions.populateAndApplyDefaults(QueueRequestOptions options, final CloudQueueClient client)
  parameters:
  - description: <p>The input options to copy from when applying defaults </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.queue.QueueRequestOptions?alt=com.microsoft.azure.storage.queue.QueueRequestOptions&text=QueueRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.azure.storage.queue.CloudQueueClient" data-throw-if-not-resolved="false" data-raw-source="CloudQueueClient"></xref> service client to populate the default values from. </p>
    name: client
    type: final <xref href="com.microsoft.azure.storage.queue.CloudQueueClient?alt=com.microsoft.azure.storage.queue.CloudQueueClient&text=CloudQueueClient" data-throw-if-not-resolved="False"/>
  returns:
    type: final <xref href="com.microsoft.azure.storage.queue.QueueRequestOptions?alt=com.microsoft.azure.storage.queue.QueueRequestOptions&text=QueueRequestOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Populates the default timeout and retry policy from client if they are not set.</p>

    <p></p>
  syntax: protected static final QueueRequestOptions populateAndApplyDefaults(QueueRequestOptions options, final CloudQueueClient client)
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.populateAndApplyDefaults(QueueRequestOptions,final CloudQueueClient)
- fullName: com.microsoft.azure.storage.queue.QueueRequestOptions.setEncryptionPolicy(QueueEncryptionPolicy encryptionPolicy)
  name: setEncryptionPolicy(QueueEncryptionPolicy encryptionPolicy)
  nameWithType: QueueRequestOptions.setEncryptionPolicy(QueueEncryptionPolicy encryptionPolicy)
  parameters:
  - description: <p>the QueueEncryptionPolicy object to use when making service requests. </p>
    name: encryptionPolicy
    type: <xref href="com.microsoft.azure.storage.queue.QueueEncryptionPolicy?alt=com.microsoft.azure.storage.queue.QueueEncryptionPolicy&text=QueueEncryptionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the QueueEncryptionPolicy object to use for this request. </p>

    <p>The default QueueEncryptionPolicy is set in the client and is by default null, indicating no encryption. You can change the QueueEncryptionPolicy on this request by setting this property. You can also change the value on the <xref uid="com.microsoft.azure.storage.ServiceClient.getDefaultRequestOptions()" data-throw-if-not-resolved="false" data-raw-source="ServiceClient#getDefaultRequestOptions()"></xref> object so that all subsequent requests made via the service client will use that QueueEncryptionPolicy.</p>

    <p></p>
  syntax: public void setEncryptionPolicy(QueueEncryptionPolicy encryptionPolicy)
  uid: com.microsoft.azure.storage.queue.QueueRequestOptions.setEncryptionPolicy(QueueEncryptionPolicy)
nameWithType: QueueRequestOptions
syntax: public class QueueRequestOptions extends RequestOptions
type: class
uid: com.microsoft.azure.storage.queue.QueueRequestOptions
fullName: com.microsoft.azure.storage.queue.QueueRequestOptions
name: QueueRequestOptions
package: com.microsoft.azure.storage.queue
summary: <p>Represents a set of options that may be specified on a queue request. </p>
metadata: {}
