### YamlMime:JavaMember
nameWithType: FabricClient.FabricClient
type: constructor
members:
- fullName: system.fabric.FabricClient.FabricClient()
  name: FabricClient()
  nameWithType: FabricClient.FabricClient()
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class.</p>

    <p>

      <b>Remarks:</b>If the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> is on the same cluster as the service, then use a Local <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref>. Local <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> is a feature of Service Fabric that allows the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> , as it enables automatic load balancing and improves performance. </p>
  syntax: public FabricClient()
  uid: system.fabric.FabricClient.FabricClient()
- fullName: system.fabric.FabricClient.FabricClient(FabricClientRole clientRole)
  name: FabricClient(FabricClientRole clientRole)
  nameWithType: FabricClient.FabricClient(FabricClientRole clientRole)
  parameters:
  - description: <p>The fabric client role </p>
    name: clientRole
    type: <xref href="system.fabric.FabricClientRole?alt=system.fabric.FabricClientRole&text=FabricClientRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false">FabricClient</xref> class with the specified fabric client role.</p>

    <p></p>
  syntax: public FabricClient(FabricClientRole clientRole)
  uid: system.fabric.FabricClient.FabricClient(FabricClientRole)
- fullName: system.fabric.FabricClient.FabricClient(FabricClientSettings settings)
  name: FabricClient(FabricClientSettings settings)
  nameWithType: FabricClient.FabricClient(FabricClientSettings settings)
  parameters:
  - description: <p>The fabric client settings used by the fabric client. </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class with the desired fabric client settings. If the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> is on the same cluster as the service, then use a Local <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref>. Local <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> is a feature of Service Fabric that allows the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref>, as it enables automatic load balancing and improves performance.</p>

    <p></p>
  syntax: public FabricClient(FabricClientSettings settings)
  uid: system.fabric.FabricClient.FabricClient(FabricClientSettings)
- fullName: system.fabric.FabricClient.FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  name: FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  parameters:
  - description: <p>The fabric client settings. </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String []&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class with given Service Fabric Gateway addresses (hostEndpoints) and the desired fabric client settings.</p>

    <p></p>
  syntax: public FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(FabricClientSettings,String [])
- fullName: system.fabric.FabricClient.FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  name: FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false">system.fabric.SecurityCredentials</xref> defines the security settings for the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref>. </p>
    name: credential
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  - description: <p>The fabric client settings. </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String []&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class with given Service Fabric Gateway addresses (hostEndpoints), security credentials and fabric client settings.</p>

    <p></p>
  syntax: public FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(SecurityCredentials,FabricClientSettings,String [])
- fullName: system.fabric.FabricClient.FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  name: FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false">system.fabric.SecurityCredentials</xref> defines the security settings for the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref>. </p>
    name: credential
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String []&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class with given Service Fabric Gateway addresses (hostEndpoints) and security credentials.</p>

    <p></p>
  syntax: public FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(SecurityCredentials,String [])
- fullName: system.fabric.FabricClient.FabricClient(String[] hostEndpoints)
  name: FabricClient(String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(String[] hostEndpoints)
  parameters:
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String []&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false">system.fabric.FabricClient</xref> class with given Service Fabric Gateway addresses (hostEndpoints).</p>

    <p></p>
  syntax: public FabricClient(String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(String [])
uid: system.fabric.FabricClient.FabricClient*
fullName: system.fabric.FabricClient.FabricClient
name: FabricClient
package: system.fabric
metadata: {}
