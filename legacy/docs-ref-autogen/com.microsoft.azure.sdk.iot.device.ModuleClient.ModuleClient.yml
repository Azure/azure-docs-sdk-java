### YamlMime:JavaMember
nameWithType: ModuleClient.ModuleClient
type: constructor
members:
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  parameters:
  - description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol to use when communicating with the module </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ModuleClientException?alt=ModuleClientException&text=ModuleClientException" data-throw-if-not-resolved="False"/>
    description: <p>if an exception is encountered when parsing the connection string </p>
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if using any protocol besides MQTT, if the connection string is missing the "moduleId" field, or if the connection string uses x509 </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided connection string is null or empty, or if the provided protocol is null </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>if the connection string cannot be parsed for a valid hostname </p>
  summary: "<p>Constructor for a ModuleClient instance. \r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>"
  syntax: public ModuleClient(String connectionString, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  parameters:
  - description: <p>The connection string for the edge module to connect to. May be an x509 connection string or a SAS connection string. If it is an x509 connection string, the provided SSLContext will be used for x509 authentication </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol to communicate with </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>the ssl context that will be used during authentication. If the provided connection string does not contain SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string does contain SAS based credentials, the sslContext will still be used during SSL negotiation. </p>
    name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>if the hostname in the connection string is not a valid URI </p>
  summary: >-
    <p>Create a module client instance that uses the provided SSLContext for SSL negotiation.</p>

    <p></p>
  syntax: public ModuleClient(String connectionString, IotHubClientProtocol protocol, SSLContext sslContext)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,SSLContext)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  parameters:
  - description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol to communicate with </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The PEM formatted string for the public key certificate or the system path to the file containing the PEM. </p>
    name: publicKeyCertificate
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>'false' if the publicKeyCertificate argument is a path to the PEM, and 'true' if it is the PEM string itself, </p>
    name: isCertificatePath
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The PEM formatted string for the private key or the system path to the file containing the PEM. </p>
    name: privateKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>'false' if the privateKey argument is a path to the PEM, and 'true' if it is the PEM string itself, </p>
    name: isPrivateKeyPath
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the connString cannot be parsed </p>
  - type: <xref href="ModuleClientException?alt=ModuleClientException&text=ModuleClientException" data-throw-if-not-resolved="False"/>
    description: <p>if any other exception occurs while building the module client </p>
  summary: >-
    <p>Create a module client instance that uses x509 authentication.</p>

    <p>Note! Communication from a module to another EdgeHub using x509 authentication is not currently supported and the service will always return "UNAUTHORIZED"</p>

    <p>Communication from a module directly to the IotHub does support x509 authentication, though.</p>

    <p>

    or</p>

    <p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>
  syntax: public ModuleClient(String connectionString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,String,boolean,String,boolean)
uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient*
fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient
name: ModuleClient
package: com.microsoft.azure.sdk.iot.device
metadata: {}
