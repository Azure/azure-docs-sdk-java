### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.keyvault.models.Contact.emailAddress()
  name: emailAddress()
  nameWithType: Contact.emailAddress()
  returns:
    description: <p>the emailAddress value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the emailAddress value.</p>

    <p></p>
  syntax: public String emailAddress()
  uid: com.microsoft.azure.keyvault.models.Contact.emailAddress()
- fullName: com.microsoft.azure.keyvault.models.Contact.name()
  name: name()
  nameWithType: Contact.name()
  returns:
    description: <p>the name value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name value.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.keyvault.models.Contact.name()
- fullName: com.microsoft.azure.keyvault.models.Contact.phone()
  name: phone()
  nameWithType: Contact.phone()
  returns:
    description: <p>the phone value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the phone value.</p>

    <p></p>
  syntax: public String phone()
  uid: com.microsoft.azure.keyvault.models.Contact.phone()
- fullName: com.microsoft.azure.keyvault.models.Contact.withEmailAddress(String emailAddress)
  name: withEmailAddress(String emailAddress)
  nameWithType: Contact.withEmailAddress(String emailAddress)
  parameters:
  - description: <p>the emailAddress value to set </p>
    name: emailAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Contact object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.Contact?alt=com.microsoft.azure.keyvault.models.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the emailAddress value.</p>

    <p></p>
  syntax: public Contact withEmailAddress(String emailAddress)
  uid: com.microsoft.azure.keyvault.models.Contact.withEmailAddress(String)
- fullName: com.microsoft.azure.keyvault.models.Contact.withName(String name)
  name: withName(String name)
  nameWithType: Contact.withName(String name)
  parameters:
  - description: <p>the name value to set </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Contact object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.Contact?alt=com.microsoft.azure.keyvault.models.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name value.</p>

    <p></p>
  syntax: public Contact withName(String name)
  uid: com.microsoft.azure.keyvault.models.Contact.withName(String)
- fullName: com.microsoft.azure.keyvault.models.Contact.withPhone(String phone)
  name: withPhone(String phone)
  nameWithType: Contact.withPhone(String phone)
  parameters:
  - description: <p>the phone value to set </p>
    name: phone
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Contact object itself. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.Contact?alt=com.microsoft.azure.keyvault.models.Contact&text=Contact" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the phone value.</p>

    <p></p>
  syntax: public Contact withPhone(String phone)
  uid: com.microsoft.azure.keyvault.models.Contact.withPhone(String)
nameWithType: Contact
syntax: public class Contact
type: class
uid: com.microsoft.azure.keyvault.models.Contact
fullName: com.microsoft.azure.keyvault.models.Contact
name: Contact
package: com.microsoft.azure.keyvault.models
summary: <p>The contact information for the vault certificates. </p>
metadata: {}
