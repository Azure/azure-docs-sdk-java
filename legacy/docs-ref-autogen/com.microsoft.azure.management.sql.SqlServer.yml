### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.sql.SqlServer.administratorLogin()
  name: administratorLogin()
  nameWithType: SqlServer.administratorLogin()
  returns:
    description: <p>the administrator login user name for the SQL Server </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String administratorLogin()
  uid: com.microsoft.azure.management.sql.SqlServer.administratorLogin()
- fullName: com.microsoft.azure.management.sql.SqlServer.databases()
  name: databases()
  nameWithType: SqlServer.databases()
  returns:
    description: <p>entry point to manage Databases for this SQL server </p>
    type: <xref href="SqlDatabaseOperations.SqlDatabaseActionsDefinition?alt=SqlDatabaseOperations.SqlDatabaseActionsDefinition&text=SqlDatabaseOperations.SqlDatabaseActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlDatabaseOperations.SqlDatabaseActionsDefinition databases()
  uid: com.microsoft.azure.management.sql.SqlServer.databases()
- fullName: com.microsoft.azure.management.sql.SqlServer.dnsAliases()
  name: dnsAliases()
  nameWithType: SqlServer.dnsAliases()
  returns:
    description: <p>the entry point to manage SQL Server DNS aliases for this server </p>
    type: <xref href="SqlServerDnsAliasOperations.SqlServerDnsAliasActionsDefinition?alt=SqlServerDnsAliasOperations.SqlServerDnsAliasActionsDefinition&text=SqlServerDnsAliasOperations.SqlServerDnsAliasActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlServerDnsAliasOperations.SqlServerDnsAliasActionsDefinition dnsAliases()
  uid: com.microsoft.azure.management.sql.SqlServer.dnsAliases()
- fullName: com.microsoft.azure.management.sql.SqlServer.elasticPools()
  name: elasticPools()
  nameWithType: SqlServer.elasticPools()
  returns:
    description: <p>the entry point to manage the SQL Elastic Pools for this server </p>
    type: <xref href="SqlElasticPoolOperations.SqlElasticPoolActionsDefinition?alt=SqlElasticPoolOperations.SqlElasticPoolActionsDefinition&text=SqlElasticPoolOperations.SqlElasticPoolActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlElasticPoolOperations.SqlElasticPoolActionsDefinition elasticPools()
  uid: com.microsoft.azure.management.sql.SqlServer.elasticPools()
- fullName: com.microsoft.azure.management.sql.SqlServer.enableAccessFromAzureServices()
  name: enableAccessFromAzureServices()
  nameWithType: SqlServer.enableAccessFromAzureServices()
  returns:
    description: <p>the SQL Firewall rule </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlFirewallRule?alt=com.microsoft.azure.management.sql.SqlFirewallRule&text=SqlFirewallRule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the Azure services default access to this server to true. </p>

    <p>A firewall rule named "AllowAllWindowsAzureIps" with the start IP "0.0.0.0" will be added to the SQL server if one does not exist.</p>

    <p></p>
  syntax: public SqlFirewallRule enableAccessFromAzureServices()
  uid: com.microsoft.azure.management.sql.SqlServer.enableAccessFromAzureServices()
- fullName: com.microsoft.azure.management.sql.SqlServer.encryptionProtectors()
  name: encryptionProtectors()
  nameWithType: SqlServer.encryptionProtectors()
  returns:
    description: <p>the entry point to manage SQL Encryption Protector for this server </p>
    type: <xref href="SqlEncryptionProtectorOperations.SqlEncryptionProtectorActionsDefinition?alt=SqlEncryptionProtectorOperations.SqlEncryptionProtectorActionsDefinition&text=SqlEncryptionProtectorOperations.SqlEncryptionProtectorActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlEncryptionProtectorOperations.SqlEncryptionProtectorActionsDefinition encryptionProtectors()
  uid: com.microsoft.azure.management.sql.SqlServer.encryptionProtectors()
- fullName: com.microsoft.azure.management.sql.SqlServer.failoverGroups()
  name: failoverGroups()
  nameWithType: SqlServer.failoverGroups()
  returns:
    description: <p>the entry point to manage SQL Failover Group for this server </p>
    type: <xref href="SqlFailoverGroupOperations.SqlFailoverGroupActionsDefinition?alt=SqlFailoverGroupOperations.SqlFailoverGroupActionsDefinition&text=SqlFailoverGroupOperations.SqlFailoverGroupActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlFailoverGroupOperations.SqlFailoverGroupActionsDefinition failoverGroups()
  uid: com.microsoft.azure.management.sql.SqlServer.failoverGroups()
- fullName: com.microsoft.azure.management.sql.SqlServer.firewallRules()
  name: firewallRules()
  nameWithType: SqlServer.firewallRules()
  returns:
    description: <p>the entry point to manage SQL Firewall rules for this server </p>
    type: <xref href="SqlFirewallRuleOperations.SqlFirewallRuleActionsDefinition?alt=SqlFirewallRuleOperations.SqlFirewallRuleActionsDefinition&text=SqlFirewallRuleOperations.SqlFirewallRuleActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlFirewallRuleOperations.SqlFirewallRuleActionsDefinition firewallRules()
  uid: com.microsoft.azure.management.sql.SqlServer.firewallRules()
- fullName: com.microsoft.azure.management.sql.SqlServer.fullyQualifiedDomainName()
  name: fullyQualifiedDomainName()
  nameWithType: SqlServer.fullyQualifiedDomainName()
  returns:
    description: <p>fully qualified name of the SQL Server </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String fullyQualifiedDomainName()
  uid: com.microsoft.azure.management.sql.SqlServer.fullyQualifiedDomainName()
- fullName: com.microsoft.azure.management.sql.SqlServer.getActiveDirectoryAdministrator()
  name: getActiveDirectoryAdministrator()
  nameWithType: SqlServer.getActiveDirectoryAdministrator()
  returns:
    description: <p>a representation of a SQL Server Active Directory administrator object (null if one is not set) </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlActiveDirectoryAdministrator?alt=com.microsoft.azure.management.sql.SqlActiveDirectoryAdministrator&text=SqlActiveDirectoryAdministrator" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Active Directory administrator for this server.</p>

    <p></p>
  syntax: public SqlActiveDirectoryAdministrator getActiveDirectoryAdministrator()
  uid: com.microsoft.azure.management.sql.SqlServer.getActiveDirectoryAdministrator()
- fullName: com.microsoft.azure.management.sql.SqlServer.getServerAutomaticTuning()
  name: getServerAutomaticTuning()
  nameWithType: SqlServer.getServerAutomaticTuning()
  returns:
    description: <p>the SQL server automatic tuning state and options </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlServerAutomaticTuning?alt=com.microsoft.azure.management.sql.SqlServerAutomaticTuning&text=SqlServerAutomaticTuning" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a SQL server automatic tuning state and options.</p>

    <p></p>
  syntax: public SqlServerAutomaticTuning getServerAutomaticTuning()
  uid: com.microsoft.azure.management.sql.SqlServer.getServerAutomaticTuning()
- fullName: com.microsoft.azure.management.sql.SqlServer.getServiceObjective(String serviceObjectiveName)
  name: getServiceObjective(String serviceObjectiveName)
  nameWithType: SqlServer.getServiceObjective(String serviceObjectiveName)
  parameters:
  - description: <p>name of the service objective to be fetched </p>
    name: serviceObjectiveName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>information of the service objective </p>
    type: <xref href="com.microsoft.azure.management.sql.ServiceObjective?alt=com.microsoft.azure.management.sql.ServiceObjective&text=ServiceObjective" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the information on a particular Sql Server Service Objective. </p>
  syntax: public ServiceObjective getServiceObjective(String serviceObjectiveName)
  uid: com.microsoft.azure.management.sql.SqlServer.getServiceObjective(String)
- fullName: com.microsoft.azure.management.sql.SqlServer.isManagedServiceIdentityEnabled()
  name: isManagedServiceIdentityEnabled()
  nameWithType: SqlServer.isManagedServiceIdentityEnabled()
  returns:
    description: <p>true if Managed Service Identity is enabled for the SQL server </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isManagedServiceIdentityEnabled()
  uid: com.microsoft.azure.management.sql.SqlServer.isManagedServiceIdentityEnabled()
- fullName: com.microsoft.azure.management.sql.SqlServer.kind()
  name: kind()
  nameWithType: SqlServer.kind()
  returns:
    description: <p>the SQL Server "kind" </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String kind()
  uid: com.microsoft.azure.management.sql.SqlServer.kind()
- fullName: com.microsoft.azure.management.sql.SqlServer.listRecommendedElasticPools()
  name: listRecommendedElasticPools()
  nameWithType: SqlServer.listRecommendedElasticPools()
  returns:
    description: <p>list of recommended elastic pools for the server </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.sql.RecommendedElasticPool?alt=com.microsoft.azure.management.sql.RecommendedElasticPool&text=RecommendedElasticPool" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns all the recommended elastic pools for the server.</p>

    <p></p>
  syntax: public Map<String, RecommendedElasticPool> listRecommendedElasticPools()
  uid: com.microsoft.azure.management.sql.SqlServer.listRecommendedElasticPools()
- fullName: com.microsoft.azure.management.sql.SqlServer.listRestorableDroppedDatabases()
  name: listRestorableDroppedDatabases()
  nameWithType: SqlServer.listRestorableDroppedDatabases()
  returns:
    description: <p>the list of all restorable dropped databases </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.SqlRestorableDroppedDatabase?alt=com.microsoft.azure.management.sql.SqlRestorableDroppedDatabase&text=SqlRestorableDroppedDatabase" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<SqlRestorableDroppedDatabase> listRestorableDroppedDatabases()
  uid: com.microsoft.azure.management.sql.SqlServer.listRestorableDroppedDatabases()
- fullName: com.microsoft.azure.management.sql.SqlServer.listRestorableDroppedDatabasesAsync()
  name: listRestorableDroppedDatabasesAsync()
  nameWithType: SqlServer.listRestorableDroppedDatabasesAsync()
  returns:
    description: <p>the list of all restorable dropped databases </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.SqlRestorableDroppedDatabase?alt=com.microsoft.azure.management.sql.SqlRestorableDroppedDatabase&text=SqlRestorableDroppedDatabase" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<SqlRestorableDroppedDatabase> listRestorableDroppedDatabasesAsync()
  uid: com.microsoft.azure.management.sql.SqlServer.listRestorableDroppedDatabasesAsync()
- fullName: com.microsoft.azure.management.sql.SqlServer.listServiceObjectives()
  name: listServiceObjectives()
  nameWithType: SqlServer.listServiceObjectives()
  returns:
    description: <p>the list of information on all service objectives </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.ServiceObjective?alt=com.microsoft.azure.management.sql.ServiceObjective&text=ServiceObjective" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<ServiceObjective> listServiceObjectives()
  uid: com.microsoft.azure.management.sql.SqlServer.listServiceObjectives()
- fullName: com.microsoft.azure.management.sql.SqlServer.listUsageMetrics()
  name: listUsageMetrics()
  nameWithType: SqlServer.listUsageMetrics()
  returns:
    description: <p>returns the list of usage metrics for an Azure SQL Server </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.ServerMetric?alt=com.microsoft.azure.management.sql.ServerMetric&text=ServerMetric" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<ServerMetric> listUsageMetrics()
  uid: com.microsoft.azure.management.sql.SqlServer.listUsageMetrics()
- fullName: com.microsoft.azure.management.sql.SqlServer.listUsages()
  name: listUsages()
  nameWithType: SqlServer.listUsages()
  returns:
    description: <p>returns the list of usages (ServerMetric) of Azure SQL Server </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.ServerMetric?alt=com.microsoft.azure.management.sql.ServerMetric&text=ServerMetric" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<ServerMetric> listUsages()
  uid: com.microsoft.azure.management.sql.SqlServer.listUsages()
- fullName: com.microsoft.azure.management.sql.SqlServer.managedServiceIdentityType()
  name: managedServiceIdentityType()
  nameWithType: SqlServer.managedServiceIdentityType()
  returns:
    description: <p>the type of Managed Service Identity used for the SQL server. </p>
    type: <xref href="com.microsoft.azure.management.sql.IdentityType?alt=com.microsoft.azure.management.sql.IdentityType&text=IdentityType" data-throw-if-not-resolved="False"/>
  syntax: public IdentityType managedServiceIdentityType()
  uid: com.microsoft.azure.management.sql.SqlServer.managedServiceIdentityType()
- fullName: com.microsoft.azure.management.sql.SqlServer.removeAccessFromAzureServices()
  name: removeAccessFromAzureServices()
  nameWithType: SqlServer.removeAccessFromAzureServices()
  summary: >-
    <p>Sets the Azure services default access to this server to false. </p>

    <p>The firewall rule named "AllowAllWindowsAzureIps" will be removed from the SQL server. </p>
  syntax: public void removeAccessFromAzureServices()
  uid: com.microsoft.azure.management.sql.SqlServer.removeAccessFromAzureServices()
- fullName: com.microsoft.azure.management.sql.SqlServer.removeActiveDirectoryAdministrator()
  name: removeActiveDirectoryAdministrator()
  nameWithType: SqlServer.removeActiveDirectoryAdministrator()
  summary: <p>Removes the Active Directory administrator from this server. </p>
  syntax: public void removeActiveDirectoryAdministrator()
  uid: com.microsoft.azure.management.sql.SqlServer.removeActiveDirectoryAdministrator()
- fullName: com.microsoft.azure.management.sql.SqlServer.serverKeys()
  name: serverKeys()
  nameWithType: SqlServer.serverKeys()
  returns:
    description: <p>the entry point to manage SQL Server Keys for this server </p>
    type: <xref href="SqlServerKeyOperations.SqlServerKeyActionsDefinition?alt=SqlServerKeyOperations.SqlServerKeyActionsDefinition&text=SqlServerKeyOperations.SqlServerKeyActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlServerKeyOperations.SqlServerKeyActionsDefinition serverKeys()
  uid: com.microsoft.azure.management.sql.SqlServer.serverKeys()
- fullName: com.microsoft.azure.management.sql.SqlServer.serverSecurityAlertPolicies()
  name: serverSecurityAlertPolicies()
  nameWithType: SqlServer.serverSecurityAlertPolicies()
  returns:
    description: <p>the entry point to manage SQL Server Security Alert Policy for this server </p>
    type: <xref href="SqlServerSecurityAlertPolicyOperations.SqlServerSecurityAlertPolicyActionsDefinition?alt=SqlServerSecurityAlertPolicyOperations.SqlServerSecurityAlertPolicyActionsDefinition&text=SqlServerSecurityAlertPolicyOperations.SqlServerSecurityAlertPolicyActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlServerSecurityAlertPolicyOperations.SqlServerSecurityAlertPolicyActionsDefinition serverSecurityAlertPolicies()
  uid: com.microsoft.azure.management.sql.SqlServer.serverSecurityAlertPolicies()
- fullName: com.microsoft.azure.management.sql.SqlServer.setActiveDirectoryAdministrator(String userLogin, String id)
  name: setActiveDirectoryAdministrator(String userLogin, String id)
  nameWithType: SqlServer.setActiveDirectoryAdministrator(String userLogin, String id)
  parameters:
  - description: <p>the user or group login; it can be the name or the email address </p>
    name: userLogin
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the user or group unique ID </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of a SQL Server Active Directory administrator object </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlActiveDirectoryAdministrator?alt=com.microsoft.azure.management.sql.SqlActiveDirectoryAdministrator&text=SqlActiveDirectoryAdministrator" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets an Active Directory administrator to this server. </p>

    <p>Azure Active Directory authentication allows you to centrally manage identity and access to your Azure SQL Database V12.</p>

    <p></p>
  syntax: public SqlActiveDirectoryAdministrator setActiveDirectoryAdministrator(String userLogin, String id)
  uid: com.microsoft.azure.management.sql.SqlServer.setActiveDirectoryAdministrator(String,String)
- fullName: com.microsoft.azure.management.sql.SqlServer.state()
  name: state()
  nameWithType: SqlServer.state()
  returns:
    description: <p>the state of the server. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String state()
  uid: com.microsoft.azure.management.sql.SqlServer.state()
- fullName: com.microsoft.azure.management.sql.SqlServer.systemAssignedManagedServiceIdentityPrincipalId()
  name: systemAssignedManagedServiceIdentityPrincipalId()
  nameWithType: SqlServer.systemAssignedManagedServiceIdentityPrincipalId()
  returns:
    description: <p>the System Assigned (Local) Managed Service Identity specific Active Directory service principal ID assigned to the SQL server. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String systemAssignedManagedServiceIdentityPrincipalId()
  uid: com.microsoft.azure.management.sql.SqlServer.systemAssignedManagedServiceIdentityPrincipalId()
- fullName: com.microsoft.azure.management.sql.SqlServer.systemAssignedManagedServiceIdentityTenantId()
  name: systemAssignedManagedServiceIdentityTenantId()
  nameWithType: SqlServer.systemAssignedManagedServiceIdentityTenantId()
  returns:
    description: <p>the System Assigned (Local) Managed Service Identity specific Active Directory tenant ID assigned to the SQL server. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String systemAssignedManagedServiceIdentityTenantId()
  uid: com.microsoft.azure.management.sql.SqlServer.systemAssignedManagedServiceIdentityTenantId()
- fullName: com.microsoft.azure.management.sql.SqlServer.version()
  name: version()
  nameWithType: SqlServer.version()
  returns:
    description: <p>the SQL Server version </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String version()
  uid: com.microsoft.azure.management.sql.SqlServer.version()
- fullName: com.microsoft.azure.management.sql.SqlServer.virtualNetworkRules()
  name: virtualNetworkRules()
  nameWithType: SqlServer.virtualNetworkRules()
  returns:
    description: <p>the entry point to manage SQL Virtual Network Rule for this server </p>
    type: <xref href="SqlVirtualNetworkRuleOperations.SqlVirtualNetworkRuleActionsDefinition?alt=SqlVirtualNetworkRuleOperations.SqlVirtualNetworkRuleActionsDefinition&text=SqlVirtualNetworkRuleOperations.SqlVirtualNetworkRuleActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlVirtualNetworkRuleOperations.SqlVirtualNetworkRuleActionsDefinition virtualNetworkRules()
  uid: com.microsoft.azure.management.sql.SqlServer.virtualNetworkRules()
nameWithType: SqlServer
syntax: public interface SqlServer extends GroupableResource<SqlServerManager, ServerInner>,Refreshable<SqlServer>,Updatable<SqlServer.Update>,GroupableResource<SqlServerManager, ServerInner>,Refreshable<SqlServer>,Updatable<SqlServer.Update>
type: interface
uid: com.microsoft.azure.management.sql.SqlServer
fullName: com.microsoft.azure.management.sql.SqlServer
name: SqlServer
package: com.microsoft.azure.management.sql
summary: <p>An immutable client-side representation of an Azure SQL Server. </p>
metadata: {}
