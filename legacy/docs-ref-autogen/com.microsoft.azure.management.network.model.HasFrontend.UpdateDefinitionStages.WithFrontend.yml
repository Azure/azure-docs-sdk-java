### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  name: fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  parameters:
  - description: <p>an existing public IP address </p>
    name: publicIPAddress
    type: <xref href="com.microsoft.azure.management.network.PublicIPAddress?alt=com.microsoft.azure.management.network.PublicIPAddress&text=PublicIPAddress" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="ReturnT?alt=ReturnT&text=ReturnT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies an existing public IP address to receive network traffic from. </p>

    <p>If this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer. </p>
  syntax: public ReturnT fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingPublicIPAddress(PublicIPAddress)
- fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)
  name: fromExistingPublicIPAddress(String resourceId)
  nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)
  parameters:
  - description: <p>the resource ID of an existing public IP address </p>
    name: resourceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="ReturnT?alt=ReturnT&text=ReturnT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies an existing public IP address to receive network traffic from. </p>

    <p>If this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer. </p>
  syntax: public ReturnT fromExistingPublicIPAddress(String resourceId)
  uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingPublicIPAddress(String)
- fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)
  name: fromExistingSubnet(Network network, String subnetName)
  nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)
  parameters:
  - description: <p>an existing network </p>
    name: network
    type: <xref href="com.microsoft.azure.management.network.Network?alt=com.microsoft.azure.management.network.Network&text=Network" data-throw-if-not-resolved="False"/>
  - description: <p>the name of an existing subnet within the specified network </p>
    name: subnetName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="ReturnT?alt=ReturnT&text=ReturnT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies an existing private subnet to receive network traffic from. </p>

    <p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>
  syntax: public ReturnT fromExistingSubnet(Network network, String subnetName)
  uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingSubnet(Network,String)
- fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)
  name: fromExistingSubnet(String networkResourceId, String subnetName)
  nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)
  parameters:
  - description: <p>the resource ID of an existing network </p>
    name: networkResourceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of an existing subnet within the specified network </p>
    name: subnetName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="ReturnT?alt=ReturnT&text=ReturnT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies an existing private subnet to receive network traffic from. </p>

    <p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>
  syntax: public ReturnT fromExistingSubnet(String networkResourceId, String subnetName)
  uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingSubnet(String,String)
- fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)
  name: fromExistingSubnet(Subnet subnet)
  nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)
  parameters:
  - description: <p>an existing subnet </p>
    name: subnet
    type: <xref href="com.microsoft.azure.management.network.Subnet?alt=com.microsoft.azure.management.network.Subnet&text=Subnet" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="ReturnT?alt=ReturnT&text=ReturnT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies an existing private subnet to receive network traffic from. </p>

    <p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>
  syntax: public ReturnT fromExistingSubnet(Subnet subnet)
  uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromExistingSubnet(Subnet)
- fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)
  name: fromFrontend(String frontendName)
  nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)
  parameters:
  - description: <p>an existing frontend name </p>
    name: frontendName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="ReturnT?alt=ReturnT&text=ReturnT" data-throw-if-not-resolved="False"/>
  summary: <p>Specifies the frontend to associate. </p>
  syntax: public ReturnT fromFrontend(String frontendName)
  uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend.fromFrontend(String)
nameWithType: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>
syntax: public interface WithFrontend<ReturnT>
type: interface
typeParameters:
- description: <p>the next stage of the definition </p>
  name: ReturnT
uid: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend
fullName: com.microsoft.azure.management.network.model.HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>
name: HasFrontend.UpdateDefinitionStages.WithFrontend<ReturnT>
package: com.microsoft.azure.management.network.model
summary: <p>The stage of a definition allowing to specify a frontend from to associate. </p>
metadata: {}
