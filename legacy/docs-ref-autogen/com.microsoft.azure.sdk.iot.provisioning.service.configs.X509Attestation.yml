### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation(X509Attestation x509Attestation)
  name: X509Attestation(X509Attestation x509Attestation)
  nameWithType: X509Attestation.X509Attestation(X509Attestation x509Attestation)
  parameters:
  - description: <p>the original X509Attestation to copy. </p>
    name: x509Attestation
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided x509Attestation is null or do not contains a primary certificate. </p>
  summary: >-
    <p>Constructor [COPY]</p>

    <p>Creates a new instance of the X509Attestation copping the content of the provided one.</p>

    <p></p>
  syntax: public X509Attestation(X509Attestation x509Attestation)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.X509Attestation(X509Attestation)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation&text=Attestation" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.provisioning.service.configs.Serializable.toJson()
- com.microsoft.azure.sdk.iot.provisioning.service.configs.Serializable.toJsonElement()
- com.microsoft.azure.sdk.iot.provisioning.service.configs.Serializable.toString()
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(String primary)
  name: createFromCAReferences(String primary)
  nameWithType: X509Attestation.createFromCAReferences(String primary)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the primary CA reference. It cannot be<code>null 

          </code> or empty. </p>
    name: primary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provide CA reference is invalid. </p>
  returns:
    description: <p>the new instance of the X509Attestation. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory with CAReferences with only primary reference.</p>

    <p>Creates a new instance of the X509Attestation using the provided primary CA reference.</p>

    <p></p>
  syntax: public static X509Attestation createFromCAReferences(String primary)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(String primary, String secondary)
  name: createFromCAReferences(String primary, String secondary)
  nameWithType: X509Attestation.createFromCAReferences(String primary, String secondary)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the primary CA references. It cannot be<code>null 

          </code> or empty. </p>
    name: primary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the secondary CA references. It can be<code>null 

          </code> or empty (ignored). </p>
    name: secondary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provide primary CA reference is invalid. </p>
  returns:
    description: <p>the new instance of the X509Attestation. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory with CAReferences with primary and secondary references.</p>

    <p>Creates a new instance of the X509Attestation with the primary and secondary CA references.</p>

    <p></p>
  syntax: public static X509Attestation createFromCAReferences(String primary, String secondary)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromCAReferences(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String primary)
  name: createFromClientCertificates(String primary)
  nameWithType: X509Attestation.createFromClientCertificates(String primary)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the primary certificate. It cannot be<code>null 

          </code> or empty. </p>
    name: primary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provide certificate is invalid. </p>
  returns:
    description: <p>the new instance of the X509Attestation. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory with ClientCertificate with only primary certificate.</p>

    <p>Creates a new instance of the X509Attestation using the provided primary Certificate.</p>

    <p></p>
  syntax: public static X509Attestation createFromClientCertificates(String primary)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String primary, String secondary)
  name: createFromClientCertificates(String primary, String secondary)
  nameWithType: X509Attestation.createFromClientCertificates(String primary, String secondary)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the primary certificate. It cannot be<code>null 

          </code> or empty. </p>
    name: primary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the secondary certificate. It can be<code>null 

          </code> or empty (ignored). </p>
    name: secondary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provide primary certificate is invalid. </p>
  returns:
    description: <p>the new instance of the X509Attestation. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory with ClientCertificates with primary and secondary certificates.</p>

    <p>Creates a new instance of the X509Attestation with the primary and secondary certificates.</p>

    <p></p>
  syntax: public static X509Attestation createFromClientCertificates(String primary, String secondary)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromClientCertificates(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String primary)
  name: createFromRootCertificates(String primary)
  nameWithType: X509Attestation.createFromRootCertificates(String primary)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the primary certificate. It cannot be<code>null 

          </code> or empty. </p>
    name: primary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provide certificate is invalid. </p>
  returns:
    description: <p>the new instance of the X509Attestation. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory with RootCertificates with only primary certificate.</p>

    <p>Creates a new instance of the X509Attestation using the provided primary Certificate.</p>

    <p></p>
  syntax: public static X509Attestation createFromRootCertificates(String primary)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String primary, String secondary)
  name: createFromRootCertificates(String primary, String secondary)
  nameWithType: X509Attestation.createFromRootCertificates(String primary, String secondary)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the primary certificate. It cannot be<code>null 

          </code> or empty. </p>
    name: primary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the secondary certificate. It can be<code>null 

          </code> or empty (ignored). </p>
    name: secondary
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provide primary certificate is invalid. </p>
  returns:
    description: <p>the new instance of the X509Attestation. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation&text=X509Attestation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Factory with RootCertificates with primary and secondary certificates.</p>

    <p>Creates a new instance of the X509Attestation with the primary and secondary certificates.</p>

    <p></p>
  syntax: public static X509Attestation createFromRootCertificates(String primary, String secondary)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.createFromRootCertificates(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferences()
  name: getCAReferences()
  nameWithType: X509Attestation.getCAReferences()
  returns:
    description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences" data-throw-if-not-resolved="false" data-raw-source="X509CAReferences"></xref> with the stored caReferences. it can be<code>null 

          </code> . </p>
    type: final <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CAReferences&text=X509CAReferences" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the caReferences.</p>

    <p></p>
  syntax: public final X509CAReferences getCAReferences()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getCAReferences()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificates()
  name: getClientCertificates()
  nameWithType: X509Attestation.getClientCertificates()
  returns:
    description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates" data-throw-if-not-resolved="false" data-raw-source="X509Certificates"></xref> with the stored clientCertificates. it can be<code>null 

          </code> . </p>
    type: final <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates&text=X509Certificates" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the clientCertificates.</p>

    <p></p>
  syntax: public final X509Certificates getClientCertificates()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getClientCertificates()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()
  name: getPrimaryX509CertificateInfo()
  nameWithType: X509Attestation.getPrimaryX509CertificateInfo()
  returns:
    description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo" data-throw-if-not-resolved="false" data-raw-source="X509CertificateInfo"></xref> with the returned certificate information. it can be<code>null 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo&text=X509CertificateInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the primary X509 certificate info.</p>

    <p>This method is a getter for the information returned from the provisioning service for the provided primary certificate.</p>

    <p></p>
  syntax: public X509CertificateInfo getPrimaryX509CertificateInfo()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificates()
  name: getRootCertificates()
  nameWithType: X509Attestation.getRootCertificates()
  returns:
    description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates" data-throw-if-not-resolved="false" data-raw-source="X509Certificates"></xref> with the stored rootCertificates. it can be<code>null 

          </code> . </p>
    type: final <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates&text=X509Certificates" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the rootCertificates.</p>

    <p></p>
  syntax: public final X509Certificates getRootCertificates()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getRootCertificates()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()
  name: getSecondaryX509CertificateInfo()
  nameWithType: X509Attestation.getSecondaryX509CertificateInfo()
  returns:
    description: >-
      <p>the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo" data-throw-if-not-resolved="false" data-raw-source="X509CertificateInfo"></xref> with the returned certificate information. it can be<code>null 

          </code> . </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo?alt=com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo&text=X509CertificateInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the secondary X509 certificate info.</p>

    <p>This method is a getter for the information returned from the provisioning service for the provided secondary certificate.</p>

    <p></p>
  syntax: public X509CertificateInfo getSecondaryX509CertificateInfo()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()
nameWithType: X509Attestation
syntax: public class X509Attestation extends Attestation,Serializable
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation
name: X509Attestation
package: com.microsoft.azure.sdk.iot.provisioning.service.configs
summary: >-
  <p>Representation of a single Device Provisioning Service X509 Attestation.</p>

  <p>The provisioning service supports Device Identifier Composition Engine, or DICE, as the device attestation mechanism. To use DICE, user must provide the X509 certificate. This class provide the means to create a new attestation for a X509 certificate and return it as an abstract interface <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.Attestation" data-throw-if-not-resolved="false" data-raw-source="Attestation"></xref>.</p>

  <p>An X509 attestation can contains one of the 3 types of certificate:</p>

  <p>

    <variablelist>

      <varlistentry>

        <b>Client or Alias certificate:</b>

      </varlistentry>

      <li>

        <p>Called on this class as clientCertificates, this certificate can authenticate a single device. </p>

      </li>

      <varlistentry>

        <b>Signing or Root certificate:</b>

      </varlistentry>

      <li>

        <p>Called on this class as rootCertificates, this certificate can create multiple Client certificates to authenticate multiple devices. </p>

      </li>

      <varlistentry>

        <b>CA Reference:</b>

      </varlistentry>

      <li>

        <p>Called on this class as X509CAReferences, this is a CA reference for a rootCertificate that can create multiple Client certificates to authenticate multiple devices. </p>

      </li>

    </variablelist>

  </p>

  <p>The provisioning service allows user to create <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup" data-throw-if-not-resolved="false" data-raw-source="EnrollmentGroup"></xref>. For all operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.IndividualEnrollment" data-throw-if-not-resolved="false" data-raw-source="IndividualEnrollment"></xref> with <b>DICE</b>, user must provide a <b>clientCertificates</b>, and for operations over <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.EnrollmentGroup" data-throw-if-not-resolved="false" data-raw-source="EnrollmentGroup"></xref>, user must provide a <b>rootCertificates</b> or a <b>X509CAReferences</b>.</p>

  <p>For each of this types of certificates, user can provide 2 Certificates, a primary and a secondary. Only the primary is mandatory, the secondary is optional.</p>

  <p>The provisioning service will process the provided certificates, but will never return it back. Instead of it, <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getPrimaryX509CertificateInfo()" data-throw-if-not-resolved="false" data-raw-source="getPrimaryX509CertificateInfo()"></xref> and <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation.getSecondaryX509CertificateInfo()" data-throw-if-not-resolved="false" data-raw-source="getSecondaryX509CertificateInfo()"></xref> will return the certificate information for the certificates.</p>

  <p></p>
metadata: {}
