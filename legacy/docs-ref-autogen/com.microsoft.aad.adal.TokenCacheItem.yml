### YamlMime:JavaType
constructors:
- fullName: com.microsoft.aad.adal.TokenCacheItem.TokenCacheItem()
  name: TokenCacheItem()
  nameWithType: TokenCacheItem.TokenCacheItem()
  summary: <p>Default constructor for cache item. </p>
  syntax: public TokenCacheItem()
  uid: com.microsoft.aad.adal.TokenCacheItem.TokenCacheItem()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Serializable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.aad.adal.TokenCacheItem.createFRRTTokenCacheItem(final String authority, final AuthenticationResult authResult)
  name: createFRRTTokenCacheItem(final String authority, final AuthenticationResult authResult)
  nameWithType: TokenCacheItem.createFRRTTokenCacheItem(final String authority, final AuthenticationResult authResult)
  parameters:
  - description: <p>required authority identifier. </p>
    name: authority
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required authentication result to create FRRT refresh token cache item. </p>
    name: authResult
    type: final <xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>TokenCacheItem </p>
    type: <xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create FRT token cache entry. Will not store clientId, resource and AT.</p>

    <p></p>
  syntax: public static TokenCacheItem createFRRTTokenCacheItem(final String authority, final AuthenticationResult authResult)
  uid: com.microsoft.aad.adal.TokenCacheItem.createFRRTTokenCacheItem(final String,final AuthenticationResult)
- fullName: com.microsoft.aad.adal.TokenCacheItem.createMRRTTokenCacheItem(final String authority, final String clientId, final AuthenticationResult authResult)
  name: createMRRTTokenCacheItem(final String authority, final String clientId, final AuthenticationResult authResult)
  nameWithType: TokenCacheItem.createMRRTTokenCacheItem(final String authority, final String clientId, final AuthenticationResult authResult)
  parameters:
  - description: <p>required authority identifier. </p>
    name: authority
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required authentication result to create multi-resource refresh token cache item. </p>
    name: authResult
    type: final <xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>TokenCacheItem </p>
    type: <xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create MRRT token cache item. Will not store AT and resource in the token cache.</p>

    <p></p>
  syntax: public static TokenCacheItem createMRRTTokenCacheItem(final String authority, final String clientId, final AuthenticationResult authResult)
  uid: com.microsoft.aad.adal.TokenCacheItem.createMRRTTokenCacheItem(final String,final String,final AuthenticationResult)
- fullName: com.microsoft.aad.adal.TokenCacheItem.createRegularTokenCacheItem(final String authority, final String resource, final String clientId, final AuthenticationResult authResult)
  name: createRegularTokenCacheItem(final String authority, final String resource, final String clientId, final AuthenticationResult authResult)
  nameWithType: TokenCacheItem.createRegularTokenCacheItem(final String authority, final String resource, final String clientId, final AuthenticationResult authResult)
  parameters:
  - description: <p>required authority identifier. </p>
    name: authority
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required resource identifier. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required client identifier. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>required authentication result to create regular token cache item. </p>
    name: authResult
    type: final <xref href="com.microsoft.aad.adal.AuthenticationResult?alt=com.microsoft.aad.adal.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>TokenCacheItem </p>
    type: <xref href="com.microsoft.aad.adal.TokenCacheItem?alt=com.microsoft.aad.adal.TokenCacheItem&text=TokenCacheItem" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create regular RT token cache item.</p>

    <p></p>
  syntax: public static TokenCacheItem createRegularTokenCacheItem(final String authority, final String resource, final String clientId, final AuthenticationResult authResult)
  uid: com.microsoft.aad.adal.TokenCacheItem.createRegularTokenCacheItem(final String,final String,final String,final AuthenticationResult)
- fullName: com.microsoft.aad.adal.TokenCacheItem.getAccessToken()
  name: getAccessToken()
  nameWithType: TokenCacheItem.getAccessToken()
  returns:
    description: <p>the access token string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the access token.</p>

    <p></p>
  syntax: public String getAccessToken()
  uid: com.microsoft.aad.adal.TokenCacheItem.getAccessToken()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getAuthority()
  name: getAuthority()
  nameWithType: TokenCacheItem.getAuthority()
  returns:
    description: <p>authority url string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the authority.</p>

    <p></p>
  syntax: public String getAuthority()
  uid: com.microsoft.aad.adal.TokenCacheItem.getAuthority()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getClientId()
  name: getClientId()
  nameWithType: TokenCacheItem.getClientId()
  returns:
    description: <p>client identifier string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the client identifier.</p>

    <p></p>
  syntax: public String getClientId()
  uid: com.microsoft.aad.adal.TokenCacheItem.getClientId()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getExpiresOn()
  name: getExpiresOn()
  nameWithType: TokenCacheItem.getExpiresOn()
  returns:
    description: <p>the time the token get expired. </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the expire date.</p>

    <p></p>
  syntax: public Date getExpiresOn()
  uid: com.microsoft.aad.adal.TokenCacheItem.getExpiresOn()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getExtendedExpiresOn()
  name: getExtendedExpiresOn()
  nameWithType: TokenCacheItem.getExtendedExpiresOn()
  returns:
    description: <p>the extended expired date. </p>
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the extended expired time.</p>

    <p></p>
  syntax: public final Date getExtendedExpiresOn()
  uid: com.microsoft.aad.adal.TokenCacheItem.getExtendedExpiresOn()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getFamilyClientId()
  name: getFamilyClientId()
  nameWithType: TokenCacheItem.getFamilyClientId()
  returns:
    description: <p>the family client ID string. </p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get family client identifier.</p>

    <p></p>
  syntax: public final String getFamilyClientId()
  uid: com.microsoft.aad.adal.TokenCacheItem.getFamilyClientId()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getIsMultiResourceRefreshToken()
  name: getIsMultiResourceRefreshToken()
  nameWithType: TokenCacheItem.getIsMultiResourceRefreshToken()
  returns:
    description: <p>true if the token is a multi-resource refresh token, else return false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the multi-resource refresh token flag.</p>

    <p></p>
  syntax: public boolean getIsMultiResourceRefreshToken()
  uid: com.microsoft.aad.adal.TokenCacheItem.getIsMultiResourceRefreshToken()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getRawIdToken()
  name: getRawIdToken()
  nameWithType: TokenCacheItem.getRawIdToken()
  returns:
    description: <p>raw ID token string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get raw ID token.</p>

    <p></p>
  syntax: public String getRawIdToken()
  uid: com.microsoft.aad.adal.TokenCacheItem.getRawIdToken()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getRefreshToken()
  name: getRefreshToken()
  nameWithType: TokenCacheItem.getRefreshToken()
  returns:
    description: <p>the refresh token string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the refresh token string.</p>

    <p></p>
  syntax: public String getRefreshToken()
  uid: com.microsoft.aad.adal.TokenCacheItem.getRefreshToken()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getResource()
  name: getResource()
  nameWithType: TokenCacheItem.getResource()
  returns:
    description: <p>resource String. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the resource.</p>

    <p></p>
  syntax: public String getResource()
  uid: com.microsoft.aad.adal.TokenCacheItem.getResource()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getSpeRing()
  name: getSpeRing()
  nameWithType: TokenCacheItem.getSpeRing()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getSpeRing()
  uid: com.microsoft.aad.adal.TokenCacheItem.getSpeRing()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getTenantId()
  name: getTenantId()
  nameWithType: TokenCacheItem.getTenantId()
  returns:
    description: <p>the tenant identifier string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get tenant identifier.</p>

    <p></p>
  syntax: public String getTenantId()
  uid: com.microsoft.aad.adal.TokenCacheItem.getTenantId()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getTokenUpdateTime()
  name: getTokenUpdateTime()
  nameWithType: TokenCacheItem.getTokenUpdateTime()
  returns:
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  syntax: protected final Date getTokenUpdateTime()
  uid: com.microsoft.aad.adal.TokenCacheItem.getTokenUpdateTime()
- fullName: com.microsoft.aad.adal.TokenCacheItem.getUserInfo()
  name: getUserInfo()
  nameWithType: TokenCacheItem.getUserInfo()
  returns:
    description: <p>UserInfo object. </p>
    type: <xref href="com.microsoft.aad.adal.UserInfo?alt=com.microsoft.aad.adal.UserInfo&text=UserInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the user information.</p>

    <p></p>
  syntax: public UserInfo getUserInfo()
  uid: com.microsoft.aad.adal.TokenCacheItem.getUserInfo()
- fullName: com.microsoft.aad.adal.TokenCacheItem.isExtendedLifetimeValid()
  name: isExtendedLifetimeValid()
  nameWithType: TokenCacheItem.isExtendedLifetimeValid()
  returns:
    description: <p>true if the access token is not null and is not expired in the extended expired time, else return false. </p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Verify if the token cache token is valid for the extended expired time.</p>

    <p></p>
  syntax: public final boolean isExtendedLifetimeValid()
  uid: com.microsoft.aad.adal.TokenCacheItem.isExtendedLifetimeValid()
- fullName: com.microsoft.aad.adal.TokenCacheItem.isTokenExpired(final Date expiresOn)
  name: isTokenExpired(final Date expiresOn)
  nameWithType: TokenCacheItem.isTokenExpired(final Date expiresOn)
  parameters:
  - description: <p>the time in type Date to check if it is expired </p>
    name: expiresOn
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if expired </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks expiration time.</p>

    <p></p>
  syntax: public static boolean isTokenExpired(final Date expiresOn)
  uid: com.microsoft.aad.adal.TokenCacheItem.isTokenExpired(final Date)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setAccessToken(String accessToken)
  name: setAccessToken(String accessToken)
  nameWithType: TokenCacheItem.setAccessToken(String accessToken)
  parameters:
  - description: <p>the access token string. </p>
    name: accessToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the access token string.</p>

    <p></p>
  syntax: public void setAccessToken(String accessToken)
  uid: com.microsoft.aad.adal.TokenCacheItem.setAccessToken(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setAuthority(String authority)
  name: setAuthority(String authority)
  nameWithType: TokenCacheItem.setAuthority(String authority)
  parameters:
  - description: <p>String authority url. </p>
    name: authority
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the authority.</p>

    <p></p>
  syntax: public void setAuthority(String authority)
  uid: com.microsoft.aad.adal.TokenCacheItem.setAuthority(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setClientId(String clientId)
  name: setClientId(String clientId)
  nameWithType: TokenCacheItem.setClientId(String clientId)
  parameters:
  - description: <p>client identifier string. </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the client identifier.</p>

    <p></p>
  syntax: public void setClientId(String clientId)
  uid: com.microsoft.aad.adal.TokenCacheItem.setClientId(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setExpiresOn(final Date expiresOn)
  name: setExpiresOn(final Date expiresOn)
  nameWithType: TokenCacheItem.setExpiresOn(final Date expiresOn)
  parameters:
  - description: <p>the expire time. </p>
    name: expiresOn
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the expire date.</p>

    <p></p>
  syntax: public void setExpiresOn(final Date expiresOn)
  uid: com.microsoft.aad.adal.TokenCacheItem.setExpiresOn(final Date)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setExtendedExpiresOn(final Date extendedExpiresOn)
  name: setExtendedExpiresOn(final Date extendedExpiresOn)
  nameWithType: TokenCacheItem.setExtendedExpiresOn(final Date extendedExpiresOn)
  parameters:
  - description: <p>extended expired date. </p>
    name: extendedExpiresOn
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the extended expired time.</p>

    <p></p>
  syntax: public final void setExtendedExpiresOn(final Date extendedExpiresOn)
  uid: com.microsoft.aad.adal.TokenCacheItem.setExtendedExpiresOn(final Date)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setFamilyClientId(final String familyClientId)
  name: setFamilyClientId(final String familyClientId)
  nameWithType: TokenCacheItem.setFamilyClientId(final String familyClientId)
  parameters:
  - description: <p>the family client ID string. </p>
    name: familyClientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set family client identifier.</p>

    <p></p>
  syntax: public final void setFamilyClientId(final String familyClientId)
  uid: com.microsoft.aad.adal.TokenCacheItem.setFamilyClientId(final String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setIsMultiResourceRefreshToken(boolean isMultiResourceRefreshToken)
  name: setIsMultiResourceRefreshToken(boolean isMultiResourceRefreshToken)
  nameWithType: TokenCacheItem.setIsMultiResourceRefreshToken(boolean isMultiResourceRefreshToken)
  parameters:
  - description: <p>true if the token is a multi-resource refresh token. </p>
    name: isMultiResourceRefreshToken
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the multi-resource refresh token flag.</p>

    <p></p>
  syntax: public void setIsMultiResourceRefreshToken(boolean isMultiResourceRefreshToken)
  uid: com.microsoft.aad.adal.TokenCacheItem.setIsMultiResourceRefreshToken(boolean)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setRawIdToken(String rawIdToken)
  name: setRawIdToken(String rawIdToken)
  nameWithType: TokenCacheItem.setRawIdToken(String rawIdToken)
  parameters:
  - description: <p>raw ID token string. </p>
    name: rawIdToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set raw ID token.</p>

    <p></p>
  syntax: public void setRawIdToken(String rawIdToken)
  uid: com.microsoft.aad.adal.TokenCacheItem.setRawIdToken(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setRefreshToken(String refreshToken)
  name: setRefreshToken(String refreshToken)
  nameWithType: TokenCacheItem.setRefreshToken(String refreshToken)
  parameters:
  - description: <p>the refresh token string. </p>
    name: refreshToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the fresh token string.</p>

    <p></p>
  syntax: public void setRefreshToken(String refreshToken)
  uid: com.microsoft.aad.adal.TokenCacheItem.setRefreshToken(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setResource(String resource)
  name: setResource(String resource)
  nameWithType: TokenCacheItem.setResource(String resource)
  parameters:
  - description: <p>resource identifier. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the resource.</p>

    <p></p>
  syntax: public void setResource(String resource)
  uid: com.microsoft.aad.adal.TokenCacheItem.setResource(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setTenantId(String tenantId)
  name: setTenantId(String tenantId)
  nameWithType: TokenCacheItem.setTenantId(String tenantId)
  parameters:
  - description: <p>the tenant identifier string. </p>
    name: tenantId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set tenant identifier.</p>

    <p></p>
  syntax: public void setTenantId(String tenantId)
  uid: com.microsoft.aad.adal.TokenCacheItem.setTenantId(String)
- fullName: com.microsoft.aad.adal.TokenCacheItem.setUserInfo(UserInfo info)
  name: setUserInfo(UserInfo info)
  nameWithType: TokenCacheItem.setUserInfo(UserInfo info)
  parameters:
  - description: <p>UserInfo object which contains user information. </p>
    name: info
    type: <xref href="com.microsoft.aad.adal.UserInfo?alt=com.microsoft.aad.adal.UserInfo&text=UserInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the user information.</p>

    <p></p>
  syntax: public void setUserInfo(UserInfo info)
  uid: com.microsoft.aad.adal.TokenCacheItem.setUserInfo(UserInfo)
nameWithType: TokenCacheItem
syntax: public class TokenCacheItem
type: class
uid: com.microsoft.aad.adal.TokenCacheItem
fullName: com.microsoft.aad.adal.TokenCacheItem
name: TokenCacheItem
package: com.microsoft.aad.adal
summary: <p>Extended result to store more info Queries will be performed over this item not the key. </p>
metadata: {}
