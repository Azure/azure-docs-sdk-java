### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.file.CloudFile.CloudFile(final CloudFile otherFile)
  name: CloudFile(final CloudFile otherFile)
  nameWithType: CloudFile.CloudFile(final CloudFile otherFile)
  parameters:
  - description: <p>A <code>CloudFile</code> object that represents the file to copy. </p>
    name: otherFile
    type: final <xref href="com.microsoft.azure.storage.file.CloudFile?alt=com.microsoft.azure.storage.file.CloudFile&text=CloudFile" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class by copying values from another cloud file.</p>

    <p></p>
  syntax: public CloudFile(final CloudFile otherFile)
  uid: com.microsoft.azure.storage.file.CloudFile.CloudFile(final CloudFile)
- fullName: com.microsoft.azure.storage.file.CloudFile.CloudFile(final StorageUri fileAbsoluteUri)
  name: CloudFile(final StorageUri fileAbsoluteUri)
  nameWithType: CloudFile.CloudFile(final StorageUri fileAbsoluteUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object that represents the absolute URI to the file.</p>
    name: fileAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute StorageUri.</p>

    <p></p>
  syntax: public CloudFile(final StorageUri fileAbsoluteUri)
  uid: com.microsoft.azure.storage.file.CloudFile.CloudFile(final StorageUri)
- fullName: com.microsoft.azure.storage.file.CloudFile.CloudFile(final StorageUri fileAbsoluteUri, final StorageCredentials credentials)
  name: CloudFile(final StorageUri fileAbsoluteUri, final StorageCredentials credentials)
  nameWithType: CloudFile.CloudFile(final StorageUri fileAbsoluteUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object that represents the absolute URI to the file. </p>
    name: fileAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access.</p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute StorageUri and credentials.</p>

    <p></p>
  syntax: public CloudFile(final StorageUri fileAbsoluteUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.file.CloudFile.CloudFile(final StorageUri,final StorageCredentials)
- fullName: com.microsoft.azure.storage.file.CloudFile.CloudFile(final StorageUri uri, final String fileName, final CloudFileShare share)
  name: CloudFile(final StorageUri uri, final String fileName, final CloudFileShare share)
  nameWithType: CloudFile.CloudFile(final StorageUri uri, final String fileName, final CloudFileShare share)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the file directory's address. </p>
    name: uri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the name of the file. </p>
    name: fileName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> object that represents the associated file share. </p>
    name: share
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using the specified address, share, and client.</p>

    <p></p>
  syntax: protected CloudFile(final StorageUri uri, final String fileName, final CloudFileShare share)
  uid: com.microsoft.azure.storage.file.CloudFile.CloudFile(final StorageUri,final String,final CloudFileShare)
- fullName: com.microsoft.azure.storage.file.CloudFile.CloudFile(final URI fileAbsoluteUri)
  name: CloudFile(final URI fileAbsoluteUri)
  nameWithType: CloudFile.CloudFile(final URI fileAbsoluteUri)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the absolute URI to the file.</p>
    name: fileAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute URI.</p>

    <p></p>
  syntax: public CloudFile(final URI fileAbsoluteUri)
  uid: com.microsoft.azure.storage.file.CloudFile.CloudFile(final URI)
- fullName: com.microsoft.azure.storage.file.CloudFile.CloudFile(final URI fileAbsoluteUri, final StorageCredentials credentials)
  name: CloudFile(final URI fileAbsoluteUri, final StorageCredentials credentials)
  nameWithType: CloudFile.CloudFile(final URI fileAbsoluteUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the absolute URI to the file. </p>
    name: fileAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access.</p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute URI and credentials.</p>

    <p></p>
  syntax: public CloudFile(final URI fileAbsoluteUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.file.CloudFile.CloudFile(final URI,final StorageCredentials)
fields:
- field:
    type: <xref href="com.microsoft.azure.storage.file.CloudFileClient?alt=com.microsoft.azure.storage.file.CloudFileClient&text=CloudFileClient" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.file.CloudFile.fileServiceClient
  name: fileServiceClient
  nameWithType: CloudFile.fileServiceClient
  summary: <p>Represents the file service client. </p>
  syntax: protected CloudFileClient fileServiceClient
  uid: com.microsoft.azure.storage.file.CloudFile.fileServiceClient
- field:
    type: <xref href="com.microsoft.azure.storage.file.CloudFileDirectory?alt=com.microsoft.azure.storage.file.CloudFileDirectory&text=CloudFileDirectory" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.file.CloudFile.parent
  name: parent
  nameWithType: CloudFile.parent
  summary: <p>Represents the file's directory reference. </p>
  syntax: protected CloudFileDirectory parent
  uid: com.microsoft.azure.storage.file.CloudFile.parent
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.file.CloudFile.streamMinimumReadSizeInBytes
  name: streamMinimumReadSizeInBytes
  nameWithType: CloudFile.streamMinimumReadSizeInBytes
  summary: <p>Holds the minimum read size when using a <xref uid="com.microsoft.azure.storage.file.FileInputStream" data-throw-if-not-resolved="false" data-raw-source="FileInputStream"></xref>. </p>
  syntax: protected int streamMinimumReadSizeInBytes= Constants.DEFAULT_MINIMUM_READ_SIZE_IN_BYTES
  uid: com.microsoft.azure.storage.file.CloudFile.streamMinimumReadSizeInBytes
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.file.CloudFile.streamWriteSizeInBytes
  name: streamWriteSizeInBytes
  nameWithType: CloudFile.streamWriteSizeInBytes
  summary: <p>Holds the number of bytes to buffer when writing to a <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref>. </p>
  syntax: protected int streamWriteSizeInBytes= Constants.DEFAULT_STREAM_WRITE_IN_BYTES
  uid: com.microsoft.azure.storage.file.CloudFile.streamWriteSizeInBytes
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.file.CloudFile.abortCopy(final String copyId)
  name: abortCopy(final String copyId)
  nameWithType: CloudFile.abortCopy(final String copyId)
  parameters:
  - description: <p>A <code>String</code> object that identifies the copy operation.</p>
    name: copyId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Aborts an ongoing Azure File copy operation.</p>

    <p></p>
  syntax: public final void abortCopy(final String copyId)
  uid: com.microsoft.azure.storage.file.CloudFile.abortCopy(final String)
- fullName: com.microsoft.azure.storage.file.CloudFile.abortCopy(final String copyId, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: abortCopy(final String copyId, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.abortCopy(final String copyId, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> object that identifies the copy operation. </p>
    name: copyId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the Azure File. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Aborts an ongoing Azure File copy operation.</p>

    <p></p>
  syntax: public final void abortCopy(final String copyId, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.abortCopy(final String,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey()
  name: assertValidFilePermissionOrKey()
  nameWithType: CloudFile.assertValidFilePermissionOrKey()
  summary: <p>Verifies that the directory's filePermission and properties.filePermissionKey are both not set. </p>
  syntax: protected void assertValidFilePermissionOrKey()
  uid: com.microsoft.azure.storage.file.CloudFile.assertValidFilePermissionOrKey()
- fullName: com.microsoft.azure.storage.file.CloudFile.clearRange(final long offset, final long length)
  name: clearRange(final long offset, final long length)
  nameWithType: CloudFile.clearRange(final long offset, final long length)
  parameters:
  - description: <p>The offset, in bytes, at which to begin clearing. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>The length, in bytes, of the data range to be cleared.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clears a range from a file. </p>

    <p>Calling  releases the storage space used by the specified range. Ranges that have been cleared are no longer tracked as part of the file.</p>

    <p></p>
  syntax: public void clearRange(final long offset, final long length)
  uid: com.microsoft.azure.storage.file.CloudFile.clearRange(final long,final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.clearRange(final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: clearRange(final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.clearRange(final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the offset, in bytes, at which to begin clearing. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the data range to be cleared. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Clears a range from a file using the specified lease ID, request options, and operation context. </p>

    <p>Calling  releases the storage space used by the specified range. Ranges that have been cleared are no longer tracked as part of the file.</p>

    <p></p>
  syntax: public void clearRange(final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.clearRange(final long,final long,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented()
  name: closeAllHandlesSegmented()
  nameWithType: CloudFile.closeAllHandlesSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeAllHandlesSegmented()
  uid: com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented()
- fullName: com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented(final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: closeAllHandlesSegmented(final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.closeAllHandlesSegmented(final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeAllHandlesSegmented(final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.closeAllHandlesSegmented(final ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(String handleID)
  name: closeHandleSegmented(String handleID)
  nameWithType: CloudFile.closeHandleSegmented(String handleID)
  parameters:
  - description: <p>The handle to close.</p>
    name: handleID
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeHandleSegmented(String handleID)
  uid: com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(String)
- fullName: com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The handle to close. </p>
    name: handleID
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.closeHandleSegmented(String,ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.create(final long size)
  name: create(final long size)
  nameWithType: CloudFile.create(final long size)
  parameters:
  - description: <p>A <code>long</code> which represents the size, in bytes, of the file.</p>
    name: size
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a file. If the file already exists, this will replace it.</p>

    <p></p>
  syntax: public void create(final long size)
  uid: com.microsoft.azure.storage.file.CloudFile.create(final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.create(final long size, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: create(final long size, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.create(final long size, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the size, in bytes, of the file. </p>
    name: size
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a file using the specified access condition, request options and operation context. If the file already exists, this will replace it.</p>

    <p></p>
  syntax: public void create(final long size, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.create(final long,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.delete()
  name: delete()
  nameWithType: CloudFile.delete()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the file.</p>

    <p></p>
  syntax: public final void delete()
  uid: com.microsoft.azure.storage.file.CloudFile.delete()
- fullName: com.microsoft.azure.storage.file.CloudFile.delete(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: delete(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.delete(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the file using the specified access condition, request options, and operation context.</p>

    <p></p>
  syntax: public final void delete(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.delete(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.deleteIfExists()
  name: deleteIfExists()
  nameWithType: CloudFile.deleteIfExists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the file was deleted; otherwise, <code>false</code>.</p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the file if it exists.</p>

    <p></p>
  syntax: public final boolean deleteIfExists()
  uid: com.microsoft.azure.storage.file.CloudFile.deleteIfExists()
- fullName: com.microsoft.azure.storage.file.CloudFile.deleteIfExists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: deleteIfExists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.deleteIfExists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the file existed and was deleted; otherwise, <code>false</code></p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the file if it exists, using the specified access condition, request options, and operation context.</p>

    <p></p>
  syntax: public final boolean deleteIfExists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.deleteIfExists(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.download(final OutputStream outStream)
  name: download(final OutputStream outStream)
  nameWithType: CloudFile.download(final OutputStream outStream)
  parameters:
  - description: <p>An <code><xref uid="" data-throw-if-not-resolved="false" data-raw-source="OutputStream"></xref></code> object that represents the target stream. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads the contents of a file to a stream.</p>

    <p></p>
  syntax: public final void download(final OutputStream outStream)
  uid: com.microsoft.azure.storage.file.CloudFile.download(final OutputStream)
- fullName: com.microsoft.azure.storage.file.CloudFile.download(final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: download(final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.download(final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <code>OutputStream</code> object that represents the target stream. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads the contents of a file to a stream using the specified request options and operation context.</p>

    <p></p>
  syntax: public final void download(final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.download(final OutputStream,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadAttributes()
  name: downloadAttributes()
  nameWithType: CloudFile.downloadAttributes()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Populates a file's properties and metadata. </p>

    <p>This method populates the file's system properties and user-defined metadata. Before reading or modifying a file's properties or metadata, call this method or its overload to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void downloadAttributes()
  uid: com.microsoft.azure.storage.file.CloudFile.downloadAttributes()
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadAttributes(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadAttributes(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadAttributes(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Populates a file's properties and metadata using the specified request options and operation context. </p>

    <p>This method populates the file's system properties and user-defined metadata. Before reading or modifying a file's properties or metadata, call this method or its overload to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void downloadAttributes(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadAttributes(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadFileRanges()
  name: downloadFileRanges()
  nameWithType: CloudFile.downloadFileRanges()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>An <code>ArrayList</code> object which represents the set of file ranges and their starting and ending byte offsets.</p>
    type: ArrayList&lt;<xref href="com.microsoft.azure.storage.file.FileRange?alt=com.microsoft.azure.storage.file.FileRange&text=FileRange" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a collection of file ranges and their starting and ending byte offsets. </p>

    <p>The start and end byte offsets for each file range are inclusive.</p>

    <p></p>
  syntax: public ArrayList<FileRange> downloadFileRanges()
  uid: com.microsoft.azure.storage.file.CloudFile.downloadFileRanges()
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadFileRanges(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadFileRanges(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadFileRanges(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>An <code>ArrayList</code> object which represents the set of file ranges and their starting and ending byte offsets.</p>
    type: ArrayList&lt;<xref href="com.microsoft.azure.storage.file.FileRange?alt=com.microsoft.azure.storage.file.FileRange&text=FileRange" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a collection of file ranges and their starting and ending byte offsets using the specified request options and operation context.</p>

    <p></p>
  syntax: public ArrayList<FileRange> downloadFileRanges(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadFileRanges(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadRange(final long offset, final Long length, final OutputStream outStream)
  name: downloadRange(final long offset, final Long length, final OutputStream outStream)
  nameWithType: CloudFile.downloadRange(final long offset, final Long length, final OutputStream outStream)
  parameters:
  - description: <p>A <code>long</code> which represents the offset to use as the starting point for the source. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to read or <code>null</code>. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>An <code><xref uid="" data-throw-if-not-resolved="false" data-raw-source="OutputStream"></xref></code> object that represents the target stream. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads the contents of a file to a stream.</p>

    <p></p>
  syntax: public final void downloadRange(final long offset, final Long length, final OutputStream outStream)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadRange(final long,final Long,final OutputStream)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadRange(final long offset, final Long length, final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadRange(final long offset, final Long length, final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadRange(final long offset, final Long length, final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the offset to use as the starting point for the source. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to read or <code>null</code>. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>An <code><xref uid="" data-throw-if-not-resolved="false" data-raw-source="OutputStream"></xref></code> object that represents the target stream. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads the contents of a file to a stream using the specified request options and operation context.</p>

    <p></p>
  syntax: public final void downloadRange(final long offset, final Long length, final OutputStream outStream, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadRange(final long,final Long,final OutputStream,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal(final long fileOffset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadRangeInternal(final long fileOffset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadRangeInternal(final long fileOffset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the offset within the file to begin downloading. </p>
    name: fileOffset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to read. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>byte</code> array which represents the buffer to write to. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the offset in the byte buffer to begin writing. </p>
    name: bufferOffset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object used to track the execution of the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>an exception representing any error which occurred during the operation. </p>
  returns:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a range of bytes from the file to the given byte buffer.</p>

    <p></p>
  syntax: protected final int downloadRangeInternal(final long fileOffset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadRangeInternal(final long,final Long,final byte [],final int,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset)
  name: downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset)
  nameWithType: CloudFile.downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset)
  parameters:
  - description: <p>A <code>long</code> which represents the byte offset to use as the starting point for the source. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to read or null. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>byte</code> array which represents the buffer to which the file bytes are downloaded. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the byte offset to use as the starting point for the target.</p>
    name: bufferOffset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a range of bytes from the file to the given byte buffer.</p>

    <p></p>
  syntax: public final int downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(final long,final Long,final byte [],final int)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the byte offset to use as the starting point for the source. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to read or <code>null</code>. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>byte</code> array which represents the buffer to which the file bytes are downloaded. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the byte offset to use as the starting point for the target. </p>
    name: bufferOffset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a range of bytes from the file to the given byte buffer, using the specified request options and operation context.</p>

    <p></p>
  syntax: public final int downloadRangeToByteArray(final long offset, final Long length, final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadRangeToByteArray(final long,final Long,final byte [],final int,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadText()
  name: downloadText()
  nameWithType: CloudFile.downloadText()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the file's contents.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a file to a string using the platform's default encoding.</p>

    <p></p>
  syntax: public String downloadText()
  uid: com.microsoft.azure.storage.file.CloudFile.downloadText()
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadText(final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadText(final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadText(final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> which represents the name of the charset to use to encode the content. If null, the platform's default encoding is used. </p>
    name: charsetName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the file's contents.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a file to a string using the specified encoding.</p>

    <p></p>
  syntax: public String downloadText(final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadText(final String,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(final byte[] buffer, final int bufferOffset)
  name: downloadToByteArray(final byte[] buffer, final int bufferOffset)
  nameWithType: CloudFile.downloadToByteArray(final byte[] buffer, final int bufferOffset)
  parameters:
  - description: <p>A <code>byte</code> array which represents the buffer to which the file bytes are downloaded. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the byte offset to use as the starting point for the target.</p>
    name: bufferOffset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a range of bytes from the file to the given byte buffer.</p>

    <p></p>
  syntax: public final int downloadToByteArray(final byte[] buffer, final int bufferOffset)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(final byte [],final int)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadToByteArray(final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadToByteArray(final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>byte</code> array which represents the buffer to which the file bytes are downloaded. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the byte offset to use as the starting point for the target. </p>
    name: bufferOffset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a range of bytes from the file to the given byte buffer, using the specified request options and operation context.</p>

    <p></p>
  syntax: public final int downloadToByteArray(final byte[] buffer, final int bufferOffset, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadToByteArray(final byte [],final int,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadToFile(final String path)
  name: downloadToFile(final String path)
  nameWithType: CloudFile.downloadToFile(final String path)
  parameters:
  - description: <p>A <code>String</code> which represents the path to the file that will be created.</p>
    name: path
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a file.</p>

    <p></p>
  syntax: public void downloadToFile(final String path)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadToFile(final String)
- fullName: com.microsoft.azure.storage.file.CloudFile.downloadToFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadToFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.downloadToFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> which represents the path to the file that will be created. </p>
    name: path
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads a file.</p>

    <p></p>
  syntax: public void downloadToFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.downloadToFile(final String,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.exists()
  name: exists()
  nameWithType: CloudFile.exists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the file exists, otherwise <code>false</code>.</p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks to see if the file exists.</p>

    <p></p>
  syntax: public final boolean exists()
  uid: com.microsoft.azure.storage.file.CloudFile.exists()
- fullName: com.microsoft.azure.storage.file.CloudFile.exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the file exists, otherwise <code>false</code>.</p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks to see if the file exists, using the specified access condition, request options and operation context.</p>

    <p></p>
  syntax: public final boolean exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.exists(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier)
  name: generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier)
  nameWithType: CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier)
  parameters:
  - description: <p>A <code><xref uid="com.microsoft.azure.storage.file.SharedAccessFilePolicy" data-throw-if-not-resolved="false" data-raw-source="SharedAccessFilePolicy"></xref></code> object that represents the access policy for the shared access signature. </p>
    name: policy
    type: final <xref href="com.microsoft.azure.storage.file.SharedAccessFilePolicy?alt=com.microsoft.azure.storage.file.SharedAccessFilePolicy&text=SharedAccessFilePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>A <code><xref uid="com.microsoft.azure.storage.file.SharedAccessFileHeaders" data-throw-if-not-resolved="false" data-raw-source="SharedAccessFileHeaders"></xref></code> object that represents the optional header values to set for a file accessed with this shared access signature. </p>
    name: headers
    type: final <xref href="com.microsoft.azure.storage.file.SharedAccessFileHeaders?alt=com.microsoft.azure.storage.file.SharedAccessFileHeaders&text=SharedAccessFileHeaders" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the share-level access policy.</p>
    name: groupPolicyIdentifier
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If the credentials are invalid. </p>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the credentials are invalid. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the shared access signature.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a shared access signature for the file using the specified group policy identifier and shared access file headers. Note this does not contain the leading "?".</p>

    <p></p>
  syntax: public String generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier)
  uid: com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy,final SharedAccessFileHeaders,final String)
- fullName: com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  name: generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  nameWithType: CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  parameters:
  - description: <p>A <code><xref uid="com.microsoft.azure.storage.file.SharedAccessFilePolicy" data-throw-if-not-resolved="false" data-raw-source="SharedAccessFilePolicy"></xref></code> object that represents the access policy for the shared access signature. </p>
    name: policy
    type: final <xref href="com.microsoft.azure.storage.file.SharedAccessFilePolicy?alt=com.microsoft.azure.storage.file.SharedAccessFilePolicy&text=SharedAccessFilePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>A <code><xref uid="com.microsoft.azure.storage.file.SharedAccessFileHeaders" data-throw-if-not-resolved="false" data-raw-source="SharedAccessFileHeaders"></xref></code> object that represents the optional header values to set for a file accessed with this shared access signature. </p>
    name: headers
    type: final <xref href="com.microsoft.azure.storage.file.SharedAccessFileHeaders?alt=com.microsoft.azure.storage.file.SharedAccessFileHeaders&text=SharedAccessFileHeaders" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the share-level access policy. </p>
    name: groupPolicyIdentifier
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.IPRange" data-throw-if-not-resolved="false" data-raw-source="IPRange"></xref> object containing the range of allowed IP addresses. </p>
    name: ipRange
    type: final <xref href="com.microsoft.azure.storage.IPRange?alt=com.microsoft.azure.storage.IPRange&text=IPRange" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.SharedAccessProtocols" data-throw-if-not-resolved="false" data-raw-source="SharedAccessProtocols"></xref> representing the allowed Internet protocols.</p>
    name: protocols
    type: final <xref href="com.microsoft.azure.storage.SharedAccessProtocols?alt=com.microsoft.azure.storage.SharedAccessProtocols&text=SharedAccessProtocols" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If the credentials are invalid. </p>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the credentials are invalid. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the shared access signature.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a shared access signature for the file using the specified group policy identifier and shared access file headers. Note this does not contain the leading "?".</p>

    <p></p>
  syntax: public String generateSharedAccessSignature(final SharedAccessFilePolicy policy, final SharedAccessFileHeaders headers, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  uid: com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy,final SharedAccessFileHeaders,final String,final IPRange,final SharedAccessProtocols)
- fullName: com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy policy, final String groupPolicyIdentifier)
  name: generateSharedAccessSignature(final SharedAccessFilePolicy policy, final String groupPolicyIdentifier)
  nameWithType: CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy policy, final String groupPolicyIdentifier)
  parameters:
  - description: <p>A <code><xref uid="com.microsoft.azure.storage.file.SharedAccessFilePolicy" data-throw-if-not-resolved="false" data-raw-source="SharedAccessFilePolicy"></xref></code> object that represents the access policy for the shared access signature. </p>
    name: policy
    type: final <xref href="com.microsoft.azure.storage.file.SharedAccessFilePolicy?alt=com.microsoft.azure.storage.file.SharedAccessFilePolicy&text=SharedAccessFilePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the share-level access policy.</p>
    name: groupPolicyIdentifier
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the credentials are invalid. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the shared access signature.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a shared access signature for the file using the specified group policy identifier and shared access file headers. Note this does not contain the leading "?".</p>

    <p></p>
  syntax: public String generateSharedAccessSignature(final SharedAccessFilePolicy policy, final String groupPolicyIdentifier)
  uid: com.microsoft.azure.storage.file.CloudFile.generateSharedAccessSignature(final SharedAccessFilePolicy,final String)
- fullName: com.microsoft.azure.storage.file.CloudFile.getCopyState()
  name: getCopyState()
  nameWithType: CloudFile.getCopyState()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CopyState" data-throw-if-not-resolved="false" data-raw-source="CopyState"></xref> object that represents the copy state of the file. </p>
    type: <xref href="com.microsoft.azure.storage.file.CopyState?alt=com.microsoft.azure.storage.file.CopyState&text=CopyState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the Azure File's copy state.</p>

    <p></p>
  syntax: public CopyState getCopyState()
  uid: com.microsoft.azure.storage.file.CloudFile.getCopyState()
- fullName: com.microsoft.azure.storage.file.CloudFile.getMetadata()
  name: getMetadata()
  nameWithType: CloudFile.getMetadata()
  returns:
    description: <p>A <code>java.util.HashMap</code> object that represents the metadata for the file. </p>
    type: <xref href="final+HashMap%3CString%2C+String%3E?alt=final+HashMap%3CString%2C+String%3E&text=final+HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the metadata for the file.</p>

    <p></p>
  syntax: public final HashMap<String, String> getMetadata()
  uid: com.microsoft.azure.storage.file.CloudFile.getMetadata()
- fullName: com.microsoft.azure.storage.file.CloudFile.getName()
  name: getName()
  nameWithType: CloudFile.getName()
  returns:
    description: <p>A <code>String</code> that represents the name of the file. </p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the name of the file.</p>

    <p></p>
  syntax: public final String getName()
  uid: com.microsoft.azure.storage.file.CloudFile.getName()
- fullName: com.microsoft.azure.storage.file.CloudFile.getParent()
  name: getParent()
  nameWithType: CloudFile.getParent()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getParent()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory"></xref> object that represents the parent directory for the file.</p>
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileDirectory?alt=com.microsoft.azure.storage.file.CloudFileDirectory&text=CloudFileDirectory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the file item's parent.</p>

    <p></p>
  syntax: public final CloudFileDirectory getParent()
  uid: com.microsoft.azure.storage.file.CloudFile.getParent()
- fullName: com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI(final StorageUri resourceAddress, final CloudFileShare share)
  name: getParentNameFromURI(final StorageUri resourceAddress, final CloudFileShare share)
  nameWithType: CloudFile.getParentNameFromURI(final StorageUri resourceAddress, final CloudFileShare share)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object which represents the resource URI. </p>
    name: resourceAddress
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> object which represents the file share.</p>
    name: share
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the parent address for a file URI.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the parent name for a file URI.</p>

    <p></p>
  syntax: protected static String getParentNameFromURI(final StorageUri resourceAddress, final CloudFileShare share)
  uid: com.microsoft.azure.storage.file.CloudFile.getParentNameFromURI(final StorageUri,final CloudFileShare)
- fullName: com.microsoft.azure.storage.file.CloudFile.getProperties()
  name: getProperties()
  nameWithType: CloudFile.getProperties()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileProperties" data-throw-if-not-resolved="false" data-raw-source="FileProperties"></xref> object that represents the properties of the file. </p>
    type: final <xref href="com.microsoft.azure.storage.file.FileProperties?alt=com.microsoft.azure.storage.file.FileProperties&text=FileProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the file's properties.</p>

    <p></p>
  syntax: public final FileProperties getProperties()
  uid: com.microsoft.azure.storage.file.CloudFile.getProperties()
- fullName: com.microsoft.azure.storage.file.CloudFile.getServiceClient()
  name: getServiceClient()
  nameWithType: CloudFile.getServiceClient()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref> object that represents the client. </p>
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileClient?alt=com.microsoft.azure.storage.file.CloudFileClient&text=CloudFileClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the file service client associated with the file.</p>

    <p></p>
  syntax: public final CloudFileClient getServiceClient()
  uid: com.microsoft.azure.storage.file.CloudFile.getServiceClient()
- fullName: com.microsoft.azure.storage.file.CloudFile.getShare()
  name: getShare()
  nameWithType: CloudFile.getShare()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getShare()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> object that represents the share of the file. </p>
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the file's share.</p>

    <p></p>
  syntax: public final CloudFileShare getShare()
  uid: com.microsoft.azure.storage.file.CloudFile.getShare()
- fullName: com.microsoft.azure.storage.file.CloudFile.getStorageUri()
  name: getStorageUri()
  nameWithType: CloudFile.getStorageUri()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getStorageUri()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the list of URIs for all locations. </p>
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of URIs for all locations.</p>

    <p></p>
  syntax: public final StorageUri getStorageUri()
  uid: com.microsoft.azure.storage.file.CloudFile.getStorageUri()
- fullName: com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes()
  name: getStreamMinimumReadSizeInBytes()
  nameWithType: CloudFile.getStreamMinimumReadSizeInBytes()
  returns:
    description: <p>A <code>int</code> which represents the minimum read size, in bytes, when using a <xref uid="com.microsoft.azure.storage.file.FileInputStream" data-throw-if-not-resolved="false" data-raw-source="FileInputStream"></xref> object. </p>
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the minimum read size when using a <xref uid="com.microsoft.azure.storage.file.FileInputStream" data-throw-if-not-resolved="false" data-raw-source="FileInputStream"></xref>.</p>

    <p></p>
  syntax: public final int getStreamMinimumReadSizeInBytes()
  uid: com.microsoft.azure.storage.file.CloudFile.getStreamMinimumReadSizeInBytes()
- fullName: com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes()
  name: getStreamWriteSizeInBytes()
  nameWithType: CloudFile.getStreamWriteSizeInBytes()
  returns:
    description: <p>A <code>int</code> which represents the number of bytes to buffer. </p>
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of bytes to buffer when writing to a <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref>.</p>

    <p></p>
  syntax: public final int getStreamWriteSizeInBytes()
  uid: com.microsoft.azure.storage.file.CloudFile.getStreamWriteSizeInBytes()
- fullName: com.microsoft.azure.storage.file.CloudFile.getTransformedAddress(final OperationContext opContext)
  name: getTransformedAddress(final OperationContext opContext)
  nameWithType: CloudFile.getTransformedAddress(final OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object that represents the transformed URI.</p>
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the transformed URI for the resource if the given credentials require transformation.</p>

    <p></p>
  syntax: protected final StorageUri getTransformedAddress(final OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.getTransformedAddress(final OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.getUri()
  name: getUri()
  nameWithType: CloudFile.getUri()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getUri()
  returns:
    description: <p>A <code>java.net.URI</code> object that represents the URI for the file. </p>
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the URI for this file.</p>

    <p></p>
  syntax: public final URI getUri()
  uid: com.microsoft.azure.storage.file.CloudFile.getUri()
- fullName: com.microsoft.azure.storage.file.CloudFile.listHandles()
  name: listHandles()
  nameWithType: CloudFile.listHandles()
  returns:
    description: >-
      <p>An<code>Iterable 

          </code> of the handles that will lazily request new segments. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public Iterable<FileHandle> listHandles()
  uid: com.microsoft.azure.storage.file.CloudFile.listHandles()
- fullName: com.microsoft.azure.storage.file.CloudFile.listHandles(FileRequestOptions options, OperationContext opContext)
  name: listHandles(FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.listHandles(FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>An<code>Iterable 

          </code> of the handles that will lazily request new segments. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public Iterable<FileHandle> listHandles(FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.listHandles(FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented()
  name: listHandlesSegmented()
  nameWithType: CloudFile.listHandlesSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public ResultSegment<FileHandle> listHandlesSegmented()
  uid: com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented()
- fullName: com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: listHandlesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.listHandlesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The maximum number of results to retrieve. If <code>null</code> or greater than 5000, the server will return up to 5,000 items. Must be at least 1. </p>
    name: maxResults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public ResultSegment<FileHandle> listHandlesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.listHandlesSegmented(final Integer,final ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.openRead()
  name: openRead()
  nameWithType: CloudFile.openRead()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>An <code>InputStream</code> object that represents the stream to use for reading from the file.</p>
    type: final <xref href="com.microsoft.azure.storage.file.FileInputStream?alt=com.microsoft.azure.storage.file.FileInputStream&text=FileInputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens a file input stream to download the file. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(final int)" data-throw-if-not-resolved="false" data-raw-source="CloudFile#setStreamMinimumReadSizeInBytes(int)"></xref> to configure the read size.</p>

    <p></p>
  syntax: public final FileInputStream openRead()
  uid: com.microsoft.azure.storage.file.CloudFile.openRead()
- fullName: com.microsoft.azure.storage.file.CloudFile.openRead(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: openRead(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.openRead(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>An <code>InputStream</code> object that represents the stream to use for reading from the file.</p>
    type: final <xref href="com.microsoft.azure.storage.file.FileInputStream?alt=com.microsoft.azure.storage.file.FileInputStream&text=FileInputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens a file input stream to download the file using the specified request options and operation context. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(final int)" data-throw-if-not-resolved="false" data-raw-source="setStreamMinimumReadSizeInBytes(int)"></xref> to configure the read size.</p>

    <p></p>
  syntax: public final FileInputStream openRead(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.openRead(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteExisting()
  name: openWriteExisting()
  nameWithType: CloudFile.openWriteExisting()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file. The file must already exist and any existing data may be overwritten.</p>

    <p></p>
  syntax: public FileOutputStream openWriteExisting()
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteExisting()
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file, using specified request options and operation context. The file must already exist and any existing data may be overwritten.</p>

    <p></p>
  syntax: public FileOutputStream openWriteExisting(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteExisting(AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long length)
  name: openWriteNew(final long length)
  nameWithType: CloudFile.openWriteNew(final long length)
  parameters:
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream to create.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file. The file does not yet exist and will be created with the length specified. If the file already exists on the service, it will be overwritten. </p>

    <p>To avoid overwriting and instead throw an error, please use the <xref uid="com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long,AccessCondition,FileRequestOptions,OperationContext)" data-throw-if-not-resolved="false" data-raw-source="openWriteNew(long, AccessCondition, FileRequestOptions, OperationContext)"></xref> overload with the appropriate <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref>.</p>

    <p></p>
  syntax: public FileOutputStream openWriteNew(final long length)
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream to create. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file, using the specified lease ID, request options and operation context. The file does not need to yet exist and will be created with the length specified. If the file already exists on the service, it will be overwritten. </p>

    <p>To avoid overwriting and instead throw an error, please pass in an <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> generated using <xref uid="com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()" data-throw-if-not-resolved="false" data-raw-source="AccessCondition#generateIfNotExistsCondition()"></xref>.</p>

    <p></p>
  syntax: public FileOutputStream openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long,AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset)
  name: putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset)
  nameWithType: CloudFile.putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset)
  parameters:
  - description: <p>A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the data. </p>
    name: destOffset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the data to write and read. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.net.URI</code> object that specifies the source URI. </p>
    name: sourceUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the offset, in number of bytes, at which to begin reading the data.</p>
    name: sourceOffset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a range from one file to another file.</p>

    <p></p>
  syntax: public void putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset)
  uid: com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(final long,final long,final URI,final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset, FileRequestOptions options, OperationContext opContext)
  name: putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the data. </p>
    name: destOffset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the data to write and read. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.net.URI</code> object that specifies the source URI. </p>
    name: sourceUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the offset, in number of bytes, at which to begin reading the data. </p>
    name: sourceOffset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a range from one file to another file using the specified lease ID, request options, and operation context</p>

    <p></p>
  syntax: public void putRangeFromURL(final long destOffset, final long length, final URI sourceUri, final long sourceOffset, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.putRangeFromURL(final long,final long,final URI,final long,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.resize(long size)
  name: resize(long size)
  nameWithType: CloudFile.resize(long size)
  parameters:
  - description: <p>A <code>long</code> which represents the size of the file, in bytes.</p>
    name: size
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Resizes the file to the specified size.</p>

    <p></p>
  syntax: public void resize(long size)
  uid: com.microsoft.azure.storage.file.CloudFile.resize(long)
- fullName: com.microsoft.azure.storage.file.CloudFile.resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the size of the file, in bytes. </p>
    name: size
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Resizes the file to the specified size.</p>

    <p></p>
  syntax: public void resize(long size, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.resize(long,AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.setFilePermission(String filePermission)
  name: setFilePermission(String filePermission)
  nameWithType: CloudFile.setFilePermission(String filePermission)
  parameters:
  - description: <p>A <code>String</code> that represents the file's file permission to set. </p>
    name: filePermission
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the file's file permission to set </p>
  syntax: public void setFilePermission(String filePermission)
  uid: com.microsoft.azure.storage.file.CloudFile.setFilePermission(String)
- fullName: com.microsoft.azure.storage.file.CloudFile.setMetadata(final HashMap<String, String> metadata)
  name: setMetadata(final HashMap<String, String> metadata)
  nameWithType: CloudFile.setMetadata(final HashMap<String, String> metadata)
  parameters:
  - description: <p>A <code>java.util.HashMap</code> object that contains the metadata being assigned to the file. </p>
    name: metadata
    type: <xref href="final+HashMap%3CString%2C+String%3E?alt=final+HashMap%3CString%2C+String%3E&text=final+HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the metadata for the file.</p>

    <p></p>
  syntax: public final void setMetadata(final HashMap<String, String> metadata)
  uid: com.microsoft.azure.storage.file.CloudFile.setMetadata(final HashMap<String, String>)
- fullName: com.microsoft.azure.storage.file.CloudFile.setProperties(final FileProperties properties)
  name: setProperties(final FileProperties properties)
  nameWithType: CloudFile.setProperties(final FileProperties properties)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileProperties" data-throw-if-not-resolved="false" data-raw-source="FileProperties"></xref> object that represents the properties being assigned to the file. </p>
    name: properties
    type: final <xref href="com.microsoft.azure.storage.file.FileProperties?alt=com.microsoft.azure.storage.file.FileProperties&text=FileProperties" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the properties for the file.</p>

    <p></p>
  syntax: protected final void setProperties(final FileProperties properties)
  uid: com.microsoft.azure.storage.file.CloudFile.setProperties(final FileProperties)
- fullName: com.microsoft.azure.storage.file.CloudFile.setShare(final CloudFileShare share)
  name: setShare(final CloudFileShare share)
  nameWithType: CloudFile.setShare(final CloudFileShare share)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> object that represents the share being assigned to the file. </p>
    name: share
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the share for the file.</p>

    <p></p>
  syntax: protected final void setShare(final CloudFileShare share)
  uid: com.microsoft.azure.storage.file.CloudFile.setShare(final CloudFileShare)
- fullName: com.microsoft.azure.storage.file.CloudFile.setStorageUri(final StorageUri storageUri)
  name: setStorageUri(final StorageUri storageUri)
  nameWithType: CloudFile.setStorageUri(final StorageUri storageUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the list of URIs for all locations. </p>
    name: storageUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the list of URIs for all locations.</p>

    <p></p>
  syntax: protected void setStorageUri(final StorageUri storageUri)
  uid: com.microsoft.azure.storage.file.CloudFile.setStorageUri(final StorageUri)
- fullName: com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(final int minimumReadSize)
  name: setStreamMinimumReadSizeInBytes(final int minimumReadSize)
  nameWithType: CloudFile.setStreamMinimumReadSizeInBytes(final int minimumReadSize)
  parameters:
  - description: <p>An <code>int</code> that represents the minimum number of bytes to buffer when reading from a file while using a <xref uid="com.microsoft.azure.storage.file.FileInputStream" data-throw-if-not-resolved="false" data-raw-source="FileInputStream"></xref> object. Must be greater than or equal to 16 KB. </p>
    name: minimumReadSize
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>minimumReadSize</code> is less than 16 KB. </p>
  summary: >-
    <p>Sets the minimum read size when using a <xref uid="com.microsoft.azure.storage.file.FileInputStream" data-throw-if-not-resolved="false" data-raw-source="FileInputStream"></xref>.</p>

    <p></p>
  syntax: public void setStreamMinimumReadSizeInBytes(final int minimumReadSize)
  uid: com.microsoft.azure.storage.file.CloudFile.setStreamMinimumReadSizeInBytes(final int)
- fullName: com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  name: setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  nameWithType: CloudFile.setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  parameters:
  - description: <p>An <code>int</code> which represents the number of bytes to buffer while using a <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object, ranging from 512 bytes to 4 MB, inclusive.</p>
    name: streamWriteSizeInBytes
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>streamWriteSizeInBytes</code> is less than 512 bytes or greater than 4 MB. </p>
  summary: >-
    <p>Sets the number of bytes to buffer when writing to a <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref>.</p>

    <p></p>
  syntax: public void setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  uid: com.microsoft.azure.storage.file.CloudFile.setStreamWriteSizeInBytes(final int)
- fullName: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudBlob sourceBlob)
  name: startCopy(final CloudBlob sourceBlob)
  nameWithType: CloudFile.startCopy(final CloudBlob sourceBlob)
  parameters:
  - description: <p>A <code>CloudBlob</code> object that represents the source blob to copy.</p>
    name: sourceBlob
    type: final <xref href="com.microsoft.azure.storage.blob.CloudBlob?alt=com.microsoft.azure.storage.blob.CloudBlob&text=CloudBlob" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying a blob's contents, properties, and metadata to a new file.</p>

    <p></p>
  syntax: public final String startCopy(final CloudBlob sourceBlob)
  uid: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudBlob)
- fullName: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  name: startCopy(final CloudBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.startCopy(final CloudBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>CloudBlob</code> object that represents the source blob to copy. </p>
    name: sourceBlob
    type: final <xref href="com.microsoft.azure.storage.blob.CloudBlob?alt=com.microsoft.azure.storage.blob.CloudBlob&text=CloudBlob" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the source blob. </p>
    name: sourceAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the destination file. </p>
    name: destinationAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying a file's contents, properties, and metadata to a new file, using the specified access conditions, lease ID, request options, and operation context.</p>

    <p></p>
  syntax: public final String startCopy(final CloudBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudBlob,final AccessCondition,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudFile sourceFile)
  name: startCopy(final CloudFile sourceFile)
  nameWithType: CloudFile.startCopy(final CloudFile sourceFile)
  parameters:
  - description: <p>A <code>CloudFile</code> object that represents the source Azure File to copy.</p>
    name: sourceFile
    type: final <xref href="com.microsoft.azure.storage.file.CloudFile?alt=com.microsoft.azure.storage.file.CloudFile&text=CloudFile" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying an Azure File's contents, properties, and metadata to a new Azure File.</p>

    <p></p>
  syntax: public final String startCopy(final CloudFile sourceFile)
  uid: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudFile)
- fullName: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudFile sourceFile, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  name: startCopy(final CloudFile sourceFile, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.startCopy(final CloudFile sourceFile, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>CloudFile</code> object that represents the source file to copy. </p>
    name: sourceFile
    type: final <xref href="com.microsoft.azure.storage.file.CloudFile?alt=com.microsoft.azure.storage.file.CloudFile&text=CloudFile" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the source. </p>
    name: sourceAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the destination. </p>
    name: destinationAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying an Azure File's contents, properties, and metadata to a new Azure File, using the specified access conditions, lease ID, request options, and operation context.</p>

    <p></p>
  syntax: public final String startCopy(final CloudFile sourceFile, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.startCopy(final CloudFile,final AccessCondition,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.startCopy(final URI source)
  name: startCopy(final URI source)
  nameWithType: CloudFile.startCopy(final URI source)
  parameters:
  - description: <p>The source's <code>java.net.URI</code>.</p>
    name: source
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying a URI's contents, properties, and metadata to a new Azure File.</p>

    <p></p>
  syntax: public final String startCopy(final URI source)
  uid: com.microsoft.azure.storage.file.CloudFile.startCopy(final URI)
- fullName: com.microsoft.azure.storage.file.CloudFile.startCopy(final URI source, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  name: startCopy(final URI source, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.startCopy(final URI source, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The source's <code>java.net.URI</code>. </p>
    name: source
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the source. </p>
    name: sourceAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the destination. </p>
    name: destinationAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying a URI's contents, properties, and metadata to a new Azure File, using the specified access conditions, lease ID, request options, and operation context.</p>

    <p></p>
  syntax: public final String startCopy(final URI source, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.startCopy(final URI,final AccessCondition,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse(HttpURLConnection request)
  name: updateEtagAndLastModifiedFromResponse(HttpURLConnection request)
  nameWithType: CloudFile.updateEtagAndLastModifiedFromResponse(HttpURLConnection request)
  parameters:
  - name: request
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  syntax: protected void updateEtagAndLastModifiedFromResponse(HttpURLConnection request)
  uid: com.microsoft.azure.storage.file.CloudFile.updateEtagAndLastModifiedFromResponse(HttpURLConnection)
- fullName: com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse(HttpURLConnection request)
  name: updateLengthFromResponse(HttpURLConnection request)
  nameWithType: CloudFile.updateLengthFromResponse(HttpURLConnection request)
  parameters:
  - name: request
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  syntax: protected void updateLengthFromResponse(HttpURLConnection request)
  uid: com.microsoft.azure.storage.file.CloudFile.updateLengthFromResponse(HttpURLConnection)
- fullName: com.microsoft.azure.storage.file.CloudFile.upload(final InputStream sourceStream, final long length)
  name: upload(final InputStream sourceStream, final long length)
  nameWithType: CloudFile.upload(final InputStream sourceStream, final long length)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object to read from. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data. Must be non zero.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the source stream data to the file. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void upload(final InputStream sourceStream, final long length)
  uid: com.microsoft.azure.storage.file.CloudFile.upload(final InputStream,final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object to read from. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data. This must be greater than or equal to zero. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the source stream data to the file using the specified access condition, request options, and operation context. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.upload(final InputStream,final long,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(final byte[] buffer, final int offset, final int length)
  name: uploadFromByteArray(final byte[] buffer, final int offset, final int length)
  nameWithType: CloudFile.uploadFromByteArray(final byte[] buffer, final int offset, final int length)
  parameters:
  - description: <p>A <code>byte</code> array which represents the data to write to the file. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>int</code> which represents the offset of the byte array from which to start the data upload. </p>
    name: offset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the number of bytes to upload from the input buffer.</p>
    name: length
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a file from data in a byte array. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void uploadFromByteArray(final byte[] buffer, final int offset, final int length)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(final byte [],final int,final int)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.uploadFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>byte</code> array which represents the data to write to the file. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>int</code> which represents the offset of the byte array from which to start the data upload. </p>
    name: offset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the number of bytes to upload from the input buffer. </p>
    name: length
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a file from data in a byte array. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void uploadFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadFromByteArray(final byte [],final int,final int,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadFromFile(final String path)
  name: uploadFromFile(final String path)
  nameWithType: CloudFile.uploadFromFile(final String path)
  parameters:
  - description: <p>A <code>String</code> which represents the path to the file to be uploaded.</p>
    name: path
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a local file. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void uploadFromFile(final String path)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadFromFile(final String)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadFromFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadFromFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.uploadFromFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> which represents the path to the file to be uploaded. </p>
    name: path
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a file from a local file. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void uploadFromFile(final String path, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadFromFile(final String,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadMetadata()
  name: uploadMetadata()
  nameWithType: CloudFile.uploadMetadata()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the file's metadata to the storage service. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFile.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="CloudFile#downloadAttributes"></xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void uploadMetadata()
  uid: com.microsoft.azure.storage.file.CloudFile.uploadMetadata()
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadMetadata(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadMetadata(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.uploadMetadata(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the file's metadata to the storage service using the access condition, request options, and operation context. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFile.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="CloudFile#downloadAttributes"></xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void uploadMetadata(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadMetadata(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadProperties()
  name: uploadProperties()
  nameWithType: CloudFile.uploadProperties()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the file's properties to the storage service. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFile.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="CloudFile#downloadAttributes"></xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void uploadProperties()
  uid: com.microsoft.azure.storage.file.CloudFile.uploadProperties()
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the file's properties using the access condition, request options, and operation context. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFile.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="CloudFile#downloadAttributes"></xref> to retrieve the latest values for the file's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadProperties(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadRange(final InputStream sourceStream, final long offset, final long length)
  name: uploadRange(final InputStream sourceStream, final long offset, final long length)
  nameWithType: CloudFile.uploadRange(final InputStream sourceStream, final long offset, final long length)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object which represents the input stream to write to the file. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the data. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the data to write.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a range to a file.</p>

    <p></p>
  syntax: public void uploadRange(final InputStream sourceStream, final long offset, final long length)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadRange(final InputStream,final long,final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadRange(final InputStream sourceStream, final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadRange(final InputStream sourceStream, final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.uploadRange(final InputStream sourceStream, final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object which represents the input stream to write to the file. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the offset, in number of bytes, at which to begin writing the data. </p>
    name: offset
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the data to write. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a range to a file using the specified lease ID, request options, and operation context.</p>

    <p></p>
  syntax: public void uploadRange(final InputStream sourceStream, final long offset, final long length, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadRange(final InputStream,final long,final long,final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadText(final String content)
  name: uploadText(final String content)
  nameWithType: CloudFile.uploadText(final String content)
  parameters:
  - description: <p>A <code>String</code> which represents the content that will be uploaded to the file.</p>
    name: content
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a file from a string using the platform's default encoding. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void uploadText(final String content)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadText(final String)
- fullName: com.microsoft.azure.storage.file.CloudFile.uploadText(final String content, final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadText(final String content, final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.uploadText(final String content, final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> which represents the content that will be uploaded to the file. </p>
    name: content
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which represents the name of the charset to use to encode the content. If null, the platform's default encoding is used. </p>
    name: charsetName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the file. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads a file from a string using the specified encoding. If the file already exists on the service, it will be overwritten.</p>

    <p></p>
  syntax: public void uploadText(final String content, final String charsetName, final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.uploadText(final String,final String,final AccessCondition,FileRequestOptions,OperationContext)
nameWithType: CloudFile
syntax: public class CloudFile implements ListFileItem
type: class
uid: com.microsoft.azure.storage.file.CloudFile
fullName: com.microsoft.azure.storage.file.CloudFile
name: CloudFile
package: com.microsoft.azure.storage.file
summary: <p>Represents a Microsoft Azure File. </p>
metadata: {}
