### YamlMime:JavaMember
nameWithType: ReliableCollectionsActorStateProvider.backupAsync
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: ReliableCollectionsActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>The type of backup to perform. </p>
    name: option
    type: <xref href="microsoft.servicefabric.data.BackupOption?alt=microsoft.servicefabric.data.BackupOption&text=BackupOption" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  - description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture<?>&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: ReliableCollectionsActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>Callback to be called when the backup folder has been created locally and is ready to be moved out of the node </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture<?>&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of all reliable state managed by this ReliableStateManager.</p>

    <p>

      <b>Remarks:</b> A FULL backup will be performed with a one-hour timeout. Boolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location. If false is returned, BackupAsync throws UnsupportedOperationException with the relevant message indicating backupCallback returned false. Also, backup will be marked as unsuccessful. </p>
  syntax: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
uid: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync*
fullName: microsoft.servicefabric.actors.runtime.ReliableCollectionsActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
package: microsoft.servicefabric.actors.runtime
metadata: {}
