### YamlMime:JavaType
constructors:
- fullName: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.SpeakerRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)
  name: SpeakerRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)
  nameWithType: SpeakerRecognizer.SpeakerRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)
  parameters:
  - description: <p>speech configuration. </p>
    name: speechConfig
    type: <xref href="com.microsoft.cognitiveservices.speech.SpeechConfig?alt=com.microsoft.cognitiveservices.speech.SpeechConfig&text=SpeechConfig" data-throw-if-not-resolved="False"/>
  - description: <p>audio configuration. </p>
    name: audioConfig
    type: <xref href="com.microsoft.cognitiveservices.speech.audio.AudioConfig?alt=com.microsoft.cognitiveservices.speech.audio.AudioConfig&text=AudioConfig" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a new instance of a speaker recognizer. If no audio config is provided as input parameter, it will be equivalent to calling with a config constructed with AudioConfig::FromDefaultMicrophoneInput. </p>
  syntax: public SpeakerRecognizer(SpeechConfig speechConfig, AudioConfig audioConfig)
  uid: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.SpeakerRecognizer(SpeechConfig,AudioConfig)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.close()
  name: close()
  nameWithType: SpeakerRecognizer.close()
  summary: '<p>Dispose of associated resources. Note: close() must be called in order to release underlying resources held by the object. </p>'
  syntax: public void close()
  uid: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.close()
- fullName: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.getProperties()
  name: getProperties()
  nameWithType: SpeakerRecognizer.getProperties()
  returns:
    description: <p>The collection of properties and their values defined for SpeakerRecognizer. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.PropertyCollection?alt=com.microsoft.cognitiveservices.speech.PropertyCollection&text=PropertyCollection" data-throw-if-not-resolved="False"/>
  summary: <p>The collection of properties and their values defined for SpeakerRecognizer. </p>
  syntax: public PropertyCollection getProperties()
  uid: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.getProperties()
- fullName: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.recognizeOnceAsync(final SpeakerIdentificationModel model)
  name: recognizeOnceAsync(final SpeakerIdentificationModel model)
  nameWithType: SpeakerRecognizer.recognizeOnceAsync(final SpeakerIdentificationModel model)
  parameters:
  - description: <p>The speaker identification model that specifies the speaker to be identified. </p>
    name: model
    type: final <xref href="com.microsoft.cognitiveservices.speech.speaker.SpeakerIdentificationModel?alt=com.microsoft.cognitiveservices.speech.speaker.SpeakerIdentificationModel&text=SpeakerIdentificationModel" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the speaker recognition operation. The task returns an instance of SpeakerRecognitionResult. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognitionResult?alt=com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognitionResult&text=SpeakerRecognitionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Starts a speaker recognition session to identify the speaker in the identification model. </p>
  syntax: public Future<SpeakerRecognitionResult> recognizeOnceAsync(final SpeakerIdentificationModel model)
  uid: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.recognizeOnceAsync(final SpeakerIdentificationModel)
- fullName: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.recognizeOnceAsync(final SpeakerVerificationModel model)
  name: recognizeOnceAsync(final SpeakerVerificationModel model)
  nameWithType: SpeakerRecognizer.recognizeOnceAsync(final SpeakerVerificationModel model)
  parameters:
  - description: <p>The speaker verification model that specifies the speaker to be verified. </p>
    name: model
    type: final <xref href="com.microsoft.cognitiveservices.speech.speaker.SpeakerVerificationModel?alt=com.microsoft.cognitiveservices.speech.speaker.SpeakerVerificationModel&text=SpeakerVerificationModel" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the speaker recognition operation. The task returns an instance of SpeakerRecognitionResult. </p>
    type: Future&lt;<xref href="com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognitionResult?alt=com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognitionResult&text=SpeakerRecognitionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Starts a speaker recognition session to verify the speaker in the verification model. </p>
  syntax: public Future<SpeakerRecognitionResult> recognizeOnceAsync(final SpeakerVerificationModel model)
  uid: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer.recognizeOnceAsync(final SpeakerVerificationModel)
nameWithType: SpeakerRecognizer
syntax: public class SpeakerRecognizer
type: class
uid: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer
fullName: com.microsoft.cognitiveservices.speech.speaker.SpeakerRecognizer
name: SpeakerRecognizer
package: com.microsoft.cognitiveservices.speech.speaker
summary: '<p>Performs speaker recognition on the speech input. Note: close() must be called in order to release underlying resources held by the object. </p>'
metadata: {}
