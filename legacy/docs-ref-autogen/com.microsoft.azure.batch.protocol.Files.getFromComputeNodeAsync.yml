### YamlMime:JavaMember
nameWithType: Files.getFromComputeNodeAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that contains the file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the compute node file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified compute node file.</p>

    <p></p>
  syntax: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
  uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that contains the file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the compute node file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileGetFromComputeNodeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified compute node file.</p>

    <p></p>
  syntax: public Observable<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions)
  uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that contains the file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the compute node file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileGetFromComputeNodeOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromComputeNodeOptions&text=FileGetFromComputeNodeOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CInputStream%3E?alt=final+ServiceCallback%3CInputStream%3E&text=final+ServiceCallback%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CInputStream%3E?alt=ServiceFuture%3CInputStream%3E&text=ServiceFuture%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified compute node file.</p>

    <p></p>
  syntax: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, FileGetFromComputeNodeOptions fileGetFromComputeNodeOptions, final ServiceCallback<InputStream> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,FileGetFromComputeNodeOptions,final ServiceCallback<InputStream>)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that contains the file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the compute node file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CInputStream%3E?alt=final+ServiceCallback%3CInputStream%3E&text=final+ServiceCallback%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CInputStream%3E?alt=ServiceFuture%3CInputStream%3E&text=ServiceFuture%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified compute node file.</p>

    <p></p>
  syntax: public ServiceFuture<InputStream> getFromComputeNodeAsync(String poolId, String nodeId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync(String,String,String,final ServiceCallback<InputStream>)
uid: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync*
fullName: com.microsoft.azure.batch.protocol.Files.getFromComputeNodeAsync
name: getFromComputeNodeAsync(String poolId, String nodeId, String filePath)
package: com.microsoft.azure.batch.protocol
metadata: {}
