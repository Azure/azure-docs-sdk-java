### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.AmqpMessage()
  name: AmqpMessage()
  nameWithType: AmqpMessage.AmqpMessage()
  syntax: public AmqpMessage()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.AmqpMessage()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.AmqpMessage(MessageImpl messageImpl)
  name: AmqpMessage(MessageImpl messageImpl)
  nameWithType: AmqpMessage.AmqpMessage(MessageImpl messageImpl)
  parameters:
  - description: <p>the ProtonJ Impl message. </p>
    name: messageImpl
    type: <xref href="MessageImpl?alt=MessageImpl&text=MessageImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Consule a MessageImpl object </p>
  syntax: public AmqpMessage(MessageImpl messageImpl)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.AmqpMessage(MessageImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.decode(byte[] data, int offset, int length)
  name: decode(byte[] data, int offset, int length)
  nameWithType: AmqpMessage.decode(byte[] data, int offset, int length)
  parameters:
  - description: >-
      <p>the<code>byte[]Â 

          </code> to be decoded </p>
    name: data
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the offset in the byte[] </p>
    name: offset
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>the total length </p>
    name: length
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the data value </p>
  syntax: public void decode(byte[] data, int offset, int length)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.decode(byte [],int,int)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.encode(byte[] data, int offset)
  name: encode(byte[] data, int offset)
  nameWithType: AmqpMessage.encode(byte[] data, int offset)
  parameters:
  - name: data
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: offset
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int encode(byte[] data, int offset)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.encode(byte [],int)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.getAmqpBody()
  name: getAmqpBody()
  nameWithType: AmqpMessage.getAmqpBody()
  returns:
    description: <p>Byte array </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Returns the amqp body used in the message </p>
  syntax: public byte [] getAmqpBody()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.getAmqpBody()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.getApplicationProperty()
  name: getApplicationProperty()
  nameWithType: AmqpMessage.getApplicationProperty()
  returns:
    description: <p>Map of properties </p>
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Set the application property for the message </p>
  syntax: public Map<String, Object> getApplicationProperty()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.getApplicationProperty()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.setApplicationProperty(Map<String, Object> userProperties)
  name: setApplicationProperty(Map<String, Object> userProperties)
  nameWithType: AmqpMessage.setApplicationProperty(Map<String, Object> userProperties)
  parameters:
  - description: <p>The user prototype. </p>
    name: userProperties
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Set the application property for the message </p>
  syntax: public void setApplicationProperty(Map<String, Object> userProperties)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.setApplicationProperty(Map<String, Object>)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.setBody(byte[] msgData)
  name: setBody(byte[] msgData)
  nameWithType: AmqpMessage.setBody(byte[] msgData)
  parameters:
  - name: msgData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public void setBody(byte[] msgData)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.setBody(byte [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.setBody(Data msgData)
  name: setBody(Data msgData)
  nameWithType: AmqpMessage.setBody(Data msgData)
  parameters:
  - description: <p>the AMQP message body. </p>
    name: msgData
    type: <xref href="Data?alt=Data&text=Data" data-throw-if-not-resolved="False"/>
  summary: <p>set the Body of the AMQP message </p>
  syntax: public void setBody(Data msgData)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage.setBody(Data)
nameWithType: AmqpMessage
syntax: public class AmqpMessage
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage
fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage
name: AmqpMessage
package: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp
metadata: {}
