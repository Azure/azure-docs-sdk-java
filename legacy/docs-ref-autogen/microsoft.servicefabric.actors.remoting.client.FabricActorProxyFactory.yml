### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory()
  name: FabricActorProxyFactory()
  nameWithType: FabricActorProxyFactory.FabricActorProxyFactory()
  summary: <p>Initializes a new instance of the ActorProxyFactory class. </p>
  syntax: public FabricActorProxyFactory()
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory()
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  name: FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  nameWithType: FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  parameters:
  - description: <p>Factory method to create remoting communication client factor. </p>
    name: createServiceRemotingClientFactory
    type: Function&lt;<xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient&text=ServiceRemotingCallbackClient" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory&text=ServiceRemotingClientFactory" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Retry settings for the remote object calls made by proxy. </p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the ActorProxyFactory class.</p>

    <p></p>
  syntax: public FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory> createServiceRemotingClientFactory, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.FabricActorProxyFactory(Function<ServiceRemotingCallbackClient, ServiceRemotingClientFactory>,OperationRetrySettings)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.actors.client.ActorProxyFactory?alt=microsoft.servicefabric.actors.client.ActorProxyFactory&text=ActorProxyFactory" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T>,ActorId)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and Actor Interface. </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T>,ActorId)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  name: createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T>,ActorId,String,String,String)
  parameters:
  - description: <p>The actor interface implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric application that contains the actor service hosting the actor objects. This parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the Service Fabric service as configured by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorServiceAttribute"></xref> on the actor implementation. By default, the name of the service is derived from the name of the actor interface. However <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorServiceAttribute"></xref> is required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the serviceName cannot be made automatically. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws exception when invalid URI format is passed as applicationName </p>
  returns:
    description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and Actor Interface. </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, ActorId actorId, String applicationName, String serviceName, String listenerName)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T>,ActorId,String,String,String)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T>,URI,ActorId)
  parameters:
  - description: <p>The actor interface type implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and Actor Interface. </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T>,URI,ActorId)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  name: createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorProxy(Class<T>,URI,ActorId,String)
  parameters:
  - description: <p>The actor interface type implemented by the remote actor object. The returned proxy object will implement this interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Actor Id of the proxy actor object. Methods called on this proxy will result in requests being sent to the actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An actor proxy object that implements <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ActorProxy"></xref> and Actor Interface. </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.actors.Actor?alt=microsoft.servicefabric.actors.Actor&text=Actor" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Creates a proxy to the actor object that implements an actor interface.</p>

    <p></p>
  syntax: public <T extends Actor> T createActorProxy(Class<T> actorInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorProxy(Class<T>,URI,ActorId,String)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxyBase"></xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxyBase"></xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId,String)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,long)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The key of the actor service partition to connect to. </p>
    name: partitionKey
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxyBase"></xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,long)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,long,String)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The key of the actor service partition to connect to. </p>
    name: partitionKey
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.services.remoting.client.ServiceProxyBase"></xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,long,String)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  name: createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  nameWithType: FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  parameters:
  - description: <p>Callback from the remoting listener to the client. </p>
    name: callbackClient
    type: <xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingCallbackClient&text=ServiceRemotingCallbackClient" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Created service remoting client factory as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceRemotingClientFactory"></xref>. </p>
    type: <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingClientFactory&text=ServiceRemotingClientFactory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates service remoting client factory.</p>

    <p></p>
  syntax: protected ServiceRemotingClientFactory createServiceRemotingClientFactory(ServiceRemotingCallbackClient callbackClient)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createServiceRemotingClientFactory(ServiceRemotingCallbackClient)
nameWithType: FabricActorProxyFactory
syntax: public class FabricActorProxyFactory implements ActorProxyFactory
type: class
uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory
name: FabricActorProxyFactory
package: microsoft.servicefabric.actors.remoting.client
summary: <p>Factory class to create a proxy to the remote actor objects. </p>
metadata: {}
