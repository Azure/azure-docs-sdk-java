### YamlMime:JavaMember
nameWithType: EventProcessorHost.registerEventProcessor
type: method
members:
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType)
  name: registerEventProcessor(Class<T> eventProcessorType)
  nameWithType: EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType)
  parameters:
  - description: <p>Class that implements IEventProcessor. </p>
    name: eventProcessorType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Future that completes when initialization is finished. </p>
    type: '&lt;T extends <xref href="com.microsoft.azure.eventprocessorhost.IEventProcessor?alt=com.microsoft.azure.eventprocessorhost.IEventProcessor&text=IEventProcessor" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;Void&gt;'
  summary: >-
    <p>Register class for event processor and start processing. </p>

    <p>This overload uses the default event processor factory, which simply creates new instances of the registered event processor class, and uses all the default options. </p>

    <p>The returned CompletableFuture completes when host initialization is finished. Initialization failures are reported by completing the future with an exception, so it is important to call get() on the future and handle any exceptions thrown. <pre>

    class MyEventProcessor implements IEventProcessor { ... }

    EventProcessorHost host = new EventProcessorHost(...);

    { CompletableFuture&lt;Void&gt;} foo = host.registerEventProcessor(MyEventProcessor.class);

    foo.get();

    </pre></p>

    <p></p>
  syntax: public <T extends IEventProcessor> CompletableFuture<Void> registerEventProcessor(Class<T> eventProcessorType)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T>)
- fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  name: registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  nameWithType: EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  parameters:
  - description: <p>Class that implements IEventProcessor. </p>
    name: eventProcessorType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Options for the processor host and event processor(s). </p>
    name: processorOptions
    type: <xref href="com.microsoft.azure.eventprocessorhost.EventProcessorOptions?alt=com.microsoft.azure.eventprocessorhost.EventProcessorOptions&text=EventProcessorOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Future that completes when initialization is finished. </p>
    type: '&lt;T extends <xref href="com.microsoft.azure.eventprocessorhost.IEventProcessor?alt=com.microsoft.azure.eventprocessorhost.IEventProcessor&text=IEventProcessor" data-throw-if-not-resolved="False"/>&gt; CompletableFuture&lt;Void&gt;'
  summary: >-
    <p>Register class for event processor and start processing. </p>

    <p>This overload uses the default event processor factory, which simply creates new instances of the registered event processor class, but takes user-specified options. </p>

    <p>The returned CompletableFuture completes when host initialization is finished. Initialization failures are reported by completing the future with an exception, so it is important to call get() on the future and handle any exceptions thrown.</p>

    <p></p>
  syntax: public <T extends IEventProcessor> CompletableFuture<Void> registerEventProcessor(Class<T> eventProcessorType, EventProcessorOptions processorOptions)
  uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T>,EventProcessorOptions)
uid: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor*
fullName: com.microsoft.azure.eventprocessorhost.EventProcessorHost.registerEventProcessor(Class<T> eventProcessorType)
name: registerEventProcessor(Class<T> eventProcessorType)
package: com.microsoft.azure.eventprocessorhost
metadata: {}
