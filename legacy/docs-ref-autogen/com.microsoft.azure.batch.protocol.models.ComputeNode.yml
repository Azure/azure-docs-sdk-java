### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.affinityId()
  name: affinityId()
  nameWithType: ComputeNode.affinityId()
  returns:
    description: <p>the affinityId value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.</p>

    <p></p>
  syntax: public String affinityId()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.affinityId()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.allocationTime()
  name: allocationTime()
  nameWithType: ComputeNode.allocationTime()
  returns:
    description: <p>the allocationTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this is the time when the node was initially allocated and doesn't change once set. It is not updated when the node is service healed or preempted.</p>

    <p></p>
  syntax: public DateTime allocationTime()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.allocationTime()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.certificateReferences()
  name: certificateReferences()
  nameWithType: ComputeNode.certificateReferences()
  returns:
    description: <p>the certificateReferences value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get for Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p>

    <p></p>
  syntax: public List<CertificateReference> certificateReferences()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.certificateReferences()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.endpointConfiguration()
  name: endpointConfiguration()
  nameWithType: ComputeNode.endpointConfiguration()
  returns:
    description: <p>the endpointConfiguration value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration&text=ComputeNodeEndpointConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the endpointConfiguration value.</p>

    <p></p>
  syntax: public ComputeNodeEndpointConfiguration endpointConfiguration()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.endpointConfiguration()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.errors()
  name: errors()
  nameWithType: ComputeNode.errors()
  returns:
    description: <p>the errors value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeError?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeError&text=ComputeNodeError" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the errors value.</p>

    <p></p>
  syntax: public List<ComputeNodeError> errors()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.errors()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.id()
  name: id()
  nameWithType: ComputeNode.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes.</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.id()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.ipAddress()
  name: ipAddress()
  nameWithType: ComputeNode.ipAddress()
  returns:
    description: <p>the ipAddress value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes.</p>

    <p></p>
  syntax: public String ipAddress()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.ipAddress()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.isDedicated()
  name: isDedicated()
  nameWithType: ComputeNode.isDedicated()
  returns:
    description: <p>the isDedicated value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the isDedicated value.</p>

    <p></p>
  syntax: public Boolean isDedicated()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.isDedicated()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.lastBootTime()
  name: lastBootTime()
  nameWithType: ComputeNode.lastBootTime()
  returns:
    description: <p>the lastBootTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property may not be present if the node state is unusable.</p>

    <p></p>
  syntax: public DateTime lastBootTime()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.lastBootTime()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.nodeAgentInfo()
  name: nodeAgentInfo()
  nameWithType: ComputeNode.nodeAgentInfo()
  returns:
    description: <p>the nodeAgentInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeAgentInformation?alt=com.microsoft.azure.batch.protocol.models.NodeAgentInformation&text=NodeAgentInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the nodeAgentInfo value.</p>

    <p></p>
  syntax: public NodeAgentInformation nodeAgentInfo()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.nodeAgentInfo()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.recentTasks()
  name: recentTasks()
  nameWithType: ComputeNode.recentTasks()
  returns:
    description: <p>the recentTasks value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskInformation?alt=com.microsoft.azure.batch.protocol.models.TaskInformation&text=TaskInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get this property is present only if at least one task has run on this node since it was assigned to the pool.</p>

    <p></p>
  syntax: public List<TaskInformation> recentTasks()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.recentTasks()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.runningTasksCount()
  name: runningTasksCount()
  nameWithType: ComputeNode.runningTasksCount()
  returns:
    description: <p>the runningTasksCount value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the runningTasksCount value.</p>

    <p></p>
  syntax: public Integer runningTasksCount()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.runningTasksCount()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.schedulingState()
  name: schedulingState()
  nameWithType: ComputeNode.schedulingState()
  returns:
    description: <p>the schedulingState value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.SchedulingState?alt=com.microsoft.azure.batch.protocol.models.SchedulingState&text=SchedulingState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'enabled', 'disabled'.</p>

    <p></p>
  syntax: public SchedulingState schedulingState()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.schedulingState()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.startTask()
  name: startTask()
  nameWithType: ComputeNode.startTask()
  returns:
    description: <p>the startTask value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the startTask value.</p>

    <p></p>
  syntax: public StartTask startTask()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.startTask()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.startTaskInfo()
  name: startTaskInfo()
  nameWithType: ComputeNode.startTaskInfo()
  returns:
    description: <p>the startTaskInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the startTaskInfo value.</p>

    <p></p>
  syntax: public StartTaskInformation startTaskInfo()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.startTaskInfo()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.state()
  name: state()
  nameWithType: ComputeNode.state()
  returns:
    description: <p>the state value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeState?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeState&text=ComputeNodeState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the low-priority node has been preempted. Tasks which were running on the node when it was pre-empted will be rescheduled when another node becomes available. Possible values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool', 'offline', 'preempted'.</p>

    <p></p>
  syntax: public ComputeNodeState state()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.state()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.stateTransitionTime()
  name: stateTransitionTime()
  nameWithType: ComputeNode.stateTransitionTime()
  returns:
    description: <p>the stateTransitionTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the stateTransitionTime value.</p>

    <p></p>
  syntax: public DateTime stateTransitionTime()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.stateTransitionTime()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksRun()
  name: totalTasksRun()
  nameWithType: ComputeNode.totalTasksRun()
  returns:
    description: <p>the totalTasksRun value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the totalTasksRun value.</p>

    <p></p>
  syntax: public Integer totalTasksRun()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksRun()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksSucceeded()
  name: totalTasksSucceeded()
  nameWithType: ComputeNode.totalTasksSucceeded()
  returns:
    description: <p>the totalTasksSucceeded value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the totalTasksSucceeded value.</p>

    <p></p>
  syntax: public Integer totalTasksSucceeded()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.totalTasksSucceeded()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.url()
  name: url()
  nameWithType: ComputeNode.url()
  returns:
    description: <p>the url value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the url value.</p>

    <p></p>
  syntax: public String url()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.url()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.vmSize()
  name: vmSize()
  nameWithType: ComputeNode.vmSize()
  returns:
    description: <p>the vmSize value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get for information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (<a href="https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes">https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes</a>).</p>

    <p></p>
  syntax: public String vmSize()
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.vmSize()
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withAffinityId(String affinityId)
  name: withAffinityId(String affinityId)
  nameWithType: ComputeNode.withAffinityId(String affinityId)
  parameters:
  - description: <p>the affinityId value to set </p>
    name: affinityId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set note that this is just a soft affinity. If the target node is busy or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.</p>

    <p></p>
  syntax: public ComputeNode withAffinityId(String affinityId)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withAffinityId(String)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withAllocationTime(DateTime allocationTime)
  name: withAllocationTime(DateTime allocationTime)
  nameWithType: ComputeNode.withAllocationTime(DateTime allocationTime)
  parameters:
  - description: <p>the allocationTime value to set </p>
    name: allocationTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this is the time when the node was initially allocated and doesn't change once set. It is not updated when the node is service healed or preempted.</p>

    <p></p>
  syntax: public ComputeNode withAllocationTime(DateTime allocationTime)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withAllocationTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withCertificateReferences(List<CertificateReference> certificateReferences)
  name: withCertificateReferences(List<CertificateReference> certificateReferences)
  nameWithType: ComputeNode.withCertificateReferences(List<CertificateReference> certificateReferences)
  parameters:
  - description: <p>the certificateReferences value to set </p>
    name: certificateReferences
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p>

    <p></p>
  syntax: public ComputeNode withCertificateReferences(List<CertificateReference> certificateReferences)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withCertificateReferences(List<CertificateReference>)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)
  name: withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)
  nameWithType: ComputeNode.withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)
  parameters:
  - description: <p>the endpointConfiguration value to set </p>
    name: endpointConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEndpointConfiguration&text=ComputeNodeEndpointConfiguration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the endpointConfiguration value.</p>

    <p></p>
  syntax: public ComputeNode withEndpointConfiguration(ComputeNodeEndpointConfiguration endpointConfiguration)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withEndpointConfiguration(ComputeNodeEndpointConfiguration)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withErrors(List<ComputeNodeError> errors)
  name: withErrors(List<ComputeNodeError> errors)
  nameWithType: ComputeNode.withErrors(List<ComputeNodeError> errors)
  parameters:
  - description: <p>the errors value to set </p>
    name: errors
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeError?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeError&text=ComputeNodeError" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the errors value.</p>

    <p></p>
  syntax: public ComputeNode withErrors(List<ComputeNodeError> errors)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withErrors(List<ComputeNodeError>)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withId(String id)
  name: withId(String id)
  nameWithType: ComputeNode.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set every node that is added to a pool is assigned a unique ID. Whenever a node is removed from a pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new nodes.</p>

    <p></p>
  syntax: public ComputeNode withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withIpAddress(String ipAddress)
  name: withIpAddress(String ipAddress)
  nameWithType: ComputeNode.withIpAddress(String ipAddress)
  parameters:
  - description: <p>the ipAddress value to set </p>
    name: ipAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set every node that is added to a pool is assigned a unique IP address. Whenever a node is removed from a pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new nodes.</p>

    <p></p>
  syntax: public ComputeNode withIpAddress(String ipAddress)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withIpAddress(String)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withIsDedicated(Boolean isDedicated)
  name: withIsDedicated(Boolean isDedicated)
  nameWithType: ComputeNode.withIsDedicated(Boolean isDedicated)
  parameters:
  - description: <p>the isDedicated value to set </p>
    name: isDedicated
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the isDedicated value.</p>

    <p></p>
  syntax: public ComputeNode withIsDedicated(Boolean isDedicated)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withIsDedicated(Boolean)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withLastBootTime(DateTime lastBootTime)
  name: withLastBootTime(DateTime lastBootTime)
  nameWithType: ComputeNode.withLastBootTime(DateTime lastBootTime)
  parameters:
  - description: <p>the lastBootTime value to set </p>
    name: lastBootTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property may not be present if the node state is unusable.</p>

    <p></p>
  syntax: public ComputeNode withLastBootTime(DateTime lastBootTime)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withLastBootTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)
  name: withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)
  nameWithType: ComputeNode.withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)
  parameters:
  - description: <p>the nodeAgentInfo value to set </p>
    name: nodeAgentInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeAgentInformation?alt=com.microsoft.azure.batch.protocol.models.NodeAgentInformation&text=NodeAgentInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the nodeAgentInfo value.</p>

    <p></p>
  syntax: public ComputeNode withNodeAgentInfo(NodeAgentInformation nodeAgentInfo)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withNodeAgentInfo(NodeAgentInformation)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withRecentTasks(List<TaskInformation> recentTasks)
  name: withRecentTasks(List<TaskInformation> recentTasks)
  nameWithType: ComputeNode.withRecentTasks(List<TaskInformation> recentTasks)
  parameters:
  - description: <p>the recentTasks value to set </p>
    name: recentTasks
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskInformation?alt=com.microsoft.azure.batch.protocol.models.TaskInformation&text=TaskInformation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is present only if at least one task has run on this node since it was assigned to the pool.</p>

    <p></p>
  syntax: public ComputeNode withRecentTasks(List<TaskInformation> recentTasks)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withRecentTasks(List<TaskInformation>)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withRunningTasksCount(Integer runningTasksCount)
  name: withRunningTasksCount(Integer runningTasksCount)
  nameWithType: ComputeNode.withRunningTasksCount(Integer runningTasksCount)
  parameters:
  - description: <p>the runningTasksCount value to set </p>
    name: runningTasksCount
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the runningTasksCount value.</p>

    <p></p>
  syntax: public ComputeNode withRunningTasksCount(Integer runningTasksCount)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withRunningTasksCount(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withSchedulingState(SchedulingState schedulingState)
  name: withSchedulingState(SchedulingState schedulingState)
  nameWithType: ComputeNode.withSchedulingState(SchedulingState schedulingState)
  parameters:
  - description: <p>the schedulingState value to set </p>
    name: schedulingState
    type: <xref href="com.microsoft.azure.batch.protocol.models.SchedulingState?alt=com.microsoft.azure.batch.protocol.models.SchedulingState&text=SchedulingState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'enabled', 'disabled'.</p>

    <p></p>
  syntax: public ComputeNode withSchedulingState(SchedulingState schedulingState)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withSchedulingState(SchedulingState)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTask(StartTask startTask)
  name: withStartTask(StartTask startTask)
  nameWithType: ComputeNode.withStartTask(StartTask startTask)
  parameters:
  - description: <p>the startTask value to set </p>
    name: startTask
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the startTask value.</p>

    <p></p>
  syntax: public ComputeNode withStartTask(StartTask startTask)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTask(StartTask)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTaskInfo(StartTaskInformation startTaskInfo)
  name: withStartTaskInfo(StartTaskInformation startTaskInfo)
  nameWithType: ComputeNode.withStartTaskInfo(StartTaskInformation startTaskInfo)
  parameters:
  - description: <p>the startTaskInfo value to set </p>
    name: startTaskInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the startTaskInfo value.</p>

    <p></p>
  syntax: public ComputeNode withStartTaskInfo(StartTaskInformation startTaskInfo)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withStartTaskInfo(StartTaskInformation)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withState(ComputeNodeState state)
  name: withState(ComputeNodeState state)
  nameWithType: ComputeNode.withState(ComputeNodeState state)
  parameters:
  - description: <p>the state value to set </p>
    name: state
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeState?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeState&text=ComputeNodeState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the low-priority node has been preempted. Tasks which were running on the node when it was pre-empted will be rescheduled when another node becomes available. Possible values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating', 'starting', 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool', 'offline', 'preempted'.</p>

    <p></p>
  syntax: public ComputeNode withState(ComputeNodeState state)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withState(ComputeNodeState)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withStateTransitionTime(DateTime stateTransitionTime)
  name: withStateTransitionTime(DateTime stateTransitionTime)
  nameWithType: ComputeNode.withStateTransitionTime(DateTime stateTransitionTime)
  parameters:
  - description: <p>the stateTransitionTime value to set </p>
    name: stateTransitionTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the stateTransitionTime value.</p>

    <p></p>
  syntax: public ComputeNode withStateTransitionTime(DateTime stateTransitionTime)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withStateTransitionTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksRun(Integer totalTasksRun)
  name: withTotalTasksRun(Integer totalTasksRun)
  nameWithType: ComputeNode.withTotalTasksRun(Integer totalTasksRun)
  parameters:
  - description: <p>the totalTasksRun value to set </p>
    name: totalTasksRun
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the totalTasksRun value.</p>

    <p></p>
  syntax: public ComputeNode withTotalTasksRun(Integer totalTasksRun)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksRun(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksSucceeded(Integer totalTasksSucceeded)
  name: withTotalTasksSucceeded(Integer totalTasksSucceeded)
  nameWithType: ComputeNode.withTotalTasksSucceeded(Integer totalTasksSucceeded)
  parameters:
  - description: <p>the totalTasksSucceeded value to set </p>
    name: totalTasksSucceeded
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the totalTasksSucceeded value.</p>

    <p></p>
  syntax: public ComputeNode withTotalTasksSucceeded(Integer totalTasksSucceeded)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withTotalTasksSucceeded(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withUrl(String url)
  name: withUrl(String url)
  nameWithType: ComputeNode.withUrl(String url)
  parameters:
  - description: <p>the url value to set </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the url value.</p>

    <p></p>
  syntax: public ComputeNode withUrl(String url)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withUrl(String)
- fullName: com.microsoft.azure.batch.protocol.models.ComputeNode.withVmSize(String vmSize)
  name: withVmSize(String vmSize)
  nameWithType: ComputeNode.withVmSize(String vmSize)
  parameters:
  - description: <p>the vmSize value to set </p>
    name: vmSize
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ComputeNode object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for information about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch pool (<a href="https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes">https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes</a>).</p>

    <p></p>
  syntax: public ComputeNode withVmSize(String vmSize)
  uid: com.microsoft.azure.batch.protocol.models.ComputeNode.withVmSize(String)
nameWithType: ComputeNode
syntax: public class ComputeNode
type: class
uid: com.microsoft.azure.batch.protocol.models.ComputeNode
fullName: com.microsoft.azure.batch.protocol.models.ComputeNode
name: ComputeNode
package: com.microsoft.azure.batch.protocol.models
summary: <p>A compute node in the Batch service. </p>
metadata: {}
