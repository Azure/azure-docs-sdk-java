### YamlMime:JavaType
uid: "com.azure.search.SearchServiceAsyncClient"
fullName: "com.azure.search.SearchServiceAsyncClient"
name: "SearchServiceAsyncClient"
nameWithType: "SearchServiceAsyncClient"
summary: "Asynchronous Client to manage and query indexes, as well as manage other resources, on a Cognitive Search service"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **SearchServiceAsyncClient**"
methods:
- uid: "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest)"
  fullName: "com.azure.search.SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  name: "analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  nameWithType: "SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  summary: "Shows how an analyzer breaks text into tokens."
  parameters:
  - description: "the name of the index for which to test an analyzer"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the text and analyzer or analysis components to test"
    name: "analyzeRequest"
    type: "<xref href=\"com.azure.search.models.AnalyzeRequest?alt=com.azure.search.models.AnalyzeRequest&text=AnalyzeRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<TokenInfo> analyzeText(String indexName, AnalyzeRequest analyzeRequest)"
  desc: "Shows how an analyzer breaks text into tokens."
  returns:
    description: "analyze result."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.TokenInfo?alt=com.azure.search.models.TokenInfo&text=TokenInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.analyzeText(java.lang.String,com.azure.search.models.AnalyzeRequest,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  name: "analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  summary: "Shows how an analyzer breaks text into tokens."
  parameters:
  - description: "the name of the index for which to test an analyzer"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the text and analyzer or analysis components to test"
    name: "analyzeRequest"
    type: "<xref href=\"com.azure.search.models.AnalyzeRequest?alt=com.azure.search.models.AnalyzeRequest&text=AnalyzeRequest\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<TokenInfo> analyzeText(String indexName, AnalyzeRequest analyzeRequest, RequestOptions requestOptions)"
  desc: "Shows how an analyzer breaks text into tokens."
  returns:
    description: "a response containing analyze result."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.TokenInfo?alt=com.azure.search.models.TokenInfo&text=TokenInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSource(com.azure.search.models.DataSource)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSource(DataSource dataSource)"
  name: "createDataSource(DataSource dataSource)"
  nameWithType: "SearchServiceAsyncClient.createDataSource(DataSource dataSource)"
  summary: "Creates a new Azure Cognitive Search data source"
  parameters:
  - description: "The definition of the dataSource to create."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataSource> createDataSource(DataSource dataSource)"
  desc: "Creates a new Azure Cognitive Search data source"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  name: "createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search data source"
  parameters:
  - description: "The definition of the data source to create."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging."
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSource>> createDataSourceWithResponse(DataSource dataSource, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search data source"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndex(com.azure.search.models.Index)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndex(Index index)"
  name: "createIndex(Index index)"
  nameWithType: "SearchServiceAsyncClient.createIndex(Index index)"
  summary: "Creates a new Azure Cognitive Search index."
  parameters:
  - description: "definition of the index to create."
    name: "index"
    type: "<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Index> createIndex(Index index)"
  desc: "Creates a new Azure Cognitive Search index."
  returns:
    description: "the created Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(com.azure.search.models.Index,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexWithResponse(Index index, RequestOptions requestOptions)"
  name: "createIndexWithResponse(Index index, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createIndexWithResponse(Index index, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search index."
  parameters:
  - description: "definition of the index to create"
    name: "index"
    type: "<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Index>> createIndexWithResponse(Index index, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search index."
  returns:
    description: "a response containing the created Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexer(com.azure.search.models.Indexer)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexer(Indexer indexer)"
  name: "createIndexer(Indexer indexer)"
  nameWithType: "SearchServiceAsyncClient.createIndexer(Indexer indexer)"
  summary: "Creates a new Azure Cognitive Search indexer."
  parameters:
  - description: "definition of the indexer to create."
    name: "indexer"
    type: "<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Indexer> createIndexer(Indexer indexer)"
  desc: "Creates a new Azure Cognitive Search indexer."
  returns:
    description: "the created Indexer."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(com.azure.search.models.Indexer,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  name: "createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search indexer."
  parameters:
  - description: "definition of the indexer to create"
    name: "indexer"
    type: "<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Indexer>> createIndexerWithResponse(Indexer indexer, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search indexer."
  returns:
    description: "a response containing the created Indexer."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource(com.azure.search.models.DataSource)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSource(DataSource dataSource)"
  name: "createOrUpdateDataSource(DataSource dataSource)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSource(DataSource dataSource)"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  parameters:
  - description: "the definition of the data source to create or update"
    name: "dataSource"
    type: "<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DataSource> createOrUpdateDataSource(DataSource dataSource)"
  desc: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  returns:
    description: "the data source that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(com.azure.search.models.DataSource,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  parameters:
  - description: "The definition of the data source to create or update."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSource>> createOrUpdateDataSourceWithResponse(DataSource dataSource, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  returns:
    description: "a data source response."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex(com.azure.search.models.Index)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndex(Index index)"
  name: "createOrUpdateIndex(Index index)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndex(Index index)"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  parameters:
  - description: "the definition of the index to create or update"
    name: "index"
    type: "<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Index> createOrUpdateIndex(Index index)"
  desc: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  returns:
    description: "the index that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.models.Index,boolean,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  parameters:
  - description: "the definition of the index to create or update"
    name: "index"
    type: "<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />"
  - description: "allows new analyzers, tokenizers, token filters, or char filters to be added to an\n index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests\n to fail. Performance and write availability of the index can be impaired for several minutes after the index is\n updated, or longer for very large indexes"
    name: "allowIndexDowntime"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Index>> createOrUpdateIndexWithResponse(Index index, boolean allowIndexDowntime, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  returns:
    description: "a response containing the index that was created or updated"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer(com.azure.search.models.Indexer)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexer(Indexer indexer)"
  name: "createOrUpdateIndexer(Indexer indexer)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexer(Indexer indexer)"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "The definition of the indexer to create or update."
    name: "indexer"
    type: "<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Indexer> createOrUpdateIndexer(Indexer indexer)"
  desc: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  returns:
    description: "a response containing the created Indexer."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.models.Indexer,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "the definition of the indexer to create or update"
    name: "indexer"
    type: "<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Indexer>> createOrUpdateIndexerWithResponse(Indexer indexer, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  returns:
    description: "a response containing the created Indexer."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset(com.azure.search.models.Skillset)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillset(Skillset skillset)"
  name: "createOrUpdateSkillset(Skillset skillset)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillset(Skillset skillset)"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "the definition of the skillset to create or update"
    name: "skillset"
    type: "<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Skillset> createOrUpdateSkillset(Skillset skillset)"
  desc: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  returns:
    description: "the skillset that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "the definition of the skillset to create or update"
    name: "skillset"
    type: "<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Skillset>> createOrUpdateSkillsetWithResponse(Skillset skillset, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  returns:
    description: "a response containing the skillset that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap(com.azure.search.models.SynonymMap)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  name: "createOrUpdateSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  summary: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  parameters:
  - description: "the definition of the synonym map to create or update"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SynonymMap> createOrUpdateSynonymMap(SynonymMap synonymMap)"
  desc: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  returns:
    description: "the synonym map that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  parameters:
  - description: "the definition of the synonym map to create or update"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SynonymMap>> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  returns:
    description: "a response containing the synonym map that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillset(com.azure.search.models.Skillset)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillset(Skillset skillset)"
  name: "createSkillset(Skillset skillset)"
  nameWithType: "SearchServiceAsyncClient.createSkillset(Skillset skillset)"
  summary: "Creates a new skillset in an Azure Cognitive Search service."
  parameters:
  - description: "definition of the skillset containing one or more cognitive skills"
    name: "skillset"
    type: "<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Skillset> createSkillset(Skillset skillset)"
  desc: "Creates a new skillset in an Azure Cognitive Search service."
  returns:
    description: "the created Skillset."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(com.azure.search.models.Skillset,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  name: "createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  summary: "Creates a new skillset in an Azure Cognitive Search service."
  parameters:
  - description: "definition of the skillset containing one or more cognitive skills"
    name: "skillset"
    type: "<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Skillset>> createSkillsetWithResponse(Skillset skillset, RequestOptions requestOptions)"
  desc: "Creates a new skillset in an Azure Cognitive Search service."
  returns:
    description: "a response containing the created Skillset."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMap(com.azure.search.models.SynonymMap)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMap(SynonymMap synonymMap)"
  name: "createSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchServiceAsyncClient.createSynonymMap(SynonymMap synonymMap)"
  summary: "Creates a new Azure Cognitive Search synonym map."
  parameters:
  - description: "the definition of the synonym map to create"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SynonymMap> createSynonymMap(SynonymMap synonymMap)"
  desc: "Creates a new Azure Cognitive Search synonym map."
  returns:
    description: "the created <xref uid=\"com.azure.search.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(com.azure.search.models.SynonymMap,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  name: "createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  summary: "Creates a new Azure Cognitive Search synonym map."
  parameters:
  - description: "the definition of the synonym map to create"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SynonymMap>> createSynonymMapWithResponse(SynonymMap synonymMap, RequestOptions requestOptions)"
  desc: "Creates a new Azure Cognitive Search synonym map."
  returns:
    description: "a response containing the created SynonymMap."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSource(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSource(String dataSourceName)"
  name: "deleteDataSource(String dataSourceName)"
  nameWithType: "SearchServiceAsyncClient.deleteDataSource(String dataSourceName)"
  summary: "Delete a Data<wbr>Source"
  parameters:
  - description: "the name of the data source for deletion"
    name: "dataSourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteDataSource(String dataSourceName)"
  desc: "Delete a DataSource"
  returns:
    description: "a void Mono"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Deletes an Azure Cognitive Search data source."
  parameters:
  - description: "The name of the data source to delete."
    name: "dataSourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDataSourceWithResponse(String dataSourceName, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Deletes an Azure Cognitive Search data source."
  returns:
    description: "a mono response"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndex(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndex(String indexName)"
  name: "deleteIndex(String indexName)"
  nameWithType: "SearchServiceAsyncClient.deleteIndex(String indexName)"
  summary: "Deletes an Azure Cognitive Search index and all the documents it contains."
  parameters:
  - description: "the name of the index to delete"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteIndex(String indexName)"
  desc: "Deletes an Azure Cognitive Search index and all the documents it contains."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Deletes an Azure Cognitive Search index and all the documents it contains."
  parameters:
  - description: "the name of the index to delete"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteIndexWithResponse(String indexName, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Deletes an Azure Cognitive Search index and all the documents it contains."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexer(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexer(String indexerName)"
  name: "deleteIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexer(String indexerName)"
  summary: "Deletes an Azure Cognitive Search indexer."
  parameters:
  - description: "the name of the indexer to delete"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteIndexer(String indexerName)"
  desc: "Deletes an Azure Cognitive Search indexer."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Deletes an Azure Cognitive Search indexer."
  parameters:
  - description: "the name of the indexer to delete"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteIndexerWithResponse(String indexerName, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Deletes an Azure Cognitive Search indexer."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillset(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillset(String skillsetName)"
  name: "deleteSkillset(String skillsetName)"
  nameWithType: "SearchServiceAsyncClient.deleteSkillset(String skillsetName)"
  summary: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  parameters:
  - description: "the name of the skillset to delete"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteSkillset(String skillsetName)"
  desc: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  parameters:
  - description: "the name of the skillset to delete"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteSkillsetWithResponse(String skillsetName, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMap(String synonymMapName)"
  name: "deleteSynonymMap(String synonymMapName)"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMap(String synonymMapName)"
  summary: "Deletes an Azure Cognitive Search synonym map."
  parameters:
  - description: "the name of the synonym map to delete"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteSynonymMap(String synonymMapName)"
  desc: "Deletes an Azure Cognitive Search synonym map."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(java.lang.String,com.azure.core.http.MatchConditions,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  name: "deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  summary: "Deletes an Azure Cognitive Search synonym map."
  parameters:
  - description: "the name of the synonym map to delete"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the condition where the operation will be performed if the ETag on the server matches or\n doesn't match specified values"
    name: "accessCondition"
    type: "<xref href=\"com.azure.core.http.MatchConditions?alt=com.azure.core.http.MatchConditions&text=MatchConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteSynonymMapWithResponse(String synonymMapName, MatchConditions accessCondition, RequestOptions requestOptions)"
  desc: "Deletes an Azure Cognitive Search synonym map."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSource(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSource(String dataSourceName)"
  name: "getDataSource(String dataSourceName)"
  nameWithType: "SearchServiceAsyncClient.getDataSource(String dataSourceName)"
  summary: "Retrieves a Data<wbr>Source from an Azure Cognitive Search service."
  parameters:
  - description: "the name of the data source to retrieve"
    name: "dataSourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<DataSource> getDataSource(String dataSourceName)"
  desc: "Retrieves a DataSource from an Azure Cognitive Search service."
  returns:
    description: "the DataSource."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  name: "getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  summary: "Retrieves a Data<wbr>Source from an Azure Cognitive Search service."
  parameters:
  - description: "the name of the data source to retrieve"
    name: "dataSourceName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging."
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DataSource>> getDataSourceWithResponse(String dataSourceName, RequestOptions requestOptions)"
  desc: "Retrieves a DataSource from an Azure Cognitive Search service."
  returns:
    description: "a response containing the DataSource."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getEndpoint()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "SearchServiceAsyncClient.getEndpoint()"
  summary: "Gets the endpoint for the Azure Cognitive Search service."
  syntax: "public String getEndpoint()"
  desc: "Gets the endpoint for the Azure Cognitive Search service."
  returns:
    description: "the endpoint value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndex(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndex(String indexName)"
  name: "getIndex(String indexName)"
  nameWithType: "SearchServiceAsyncClient.getIndex(String indexName)"
  summary: "Retrieves an index definition from the Azure Cognitive Search."
  parameters:
  - description: "The name of the index to retrieve"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Index> getIndex(String indexName)"
  desc: "Retrieves an index definition from the Azure Cognitive Search."
  returns:
    description: "the Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexClient(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexClient(String indexName)"
  name: "getIndexClient(String indexName)"
  nameWithType: "SearchServiceAsyncClient.getIndexClient(String indexName)"
  summary: "Initializes a new <xref uid=\"com.azure.search.SearchIndexAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexAsyncClient\"></xref> using the given Index name and the same configuration as the Search<wbr>Service<wbr>Async<wbr>Client."
  parameters:
  - description: "the name of the Index for the client"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchIndexAsyncClient getIndexClient(String indexName)"
  desc: "Initializes a new <xref uid=\"com.azure.search.SearchIndexAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexAsyncClient\"></xref> using the given Index name and the same configuration as the SearchServiceAsyncClient."
  returns:
    description: "a <xref uid=\"com.azure.search.SearchIndexAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexAsyncClient\"></xref> created from the service client configuration"
    type: "<xref href=\"com.azure.search.SearchIndexAsyncClient?alt=com.azure.search.SearchIndexAsyncClient&text=SearchIndexAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatistics(String indexName)"
  name: "getIndexStatistics(String indexName)"
  nameWithType: "SearchServiceAsyncClient.getIndexStatistics(String indexName)"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  parameters:
  - description: "the name of the index for which to retrieve statistics"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<GetIndexStatisticsResult> getIndexStatistics(String indexName)"
  desc: "Returns statistics for the given index, including a document count and storage usage."
  returns:
    description: "the index statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.GetIndexStatisticsResult?alt=com.azure.search.models.GetIndexStatisticsResult&text=GetIndexStatisticsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  name: "getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  parameters:
  - description: "the name of the index for which to retrieve statistics"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<GetIndexStatisticsResult>> getIndexStatisticsWithResponse(String indexName, RequestOptions requestOptions)"
  desc: "Returns statistics for the given index, including a document count and storage usage."
  returns:
    description: "a response containing the index statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.GetIndexStatisticsResult?alt=com.azure.search.models.GetIndexStatisticsResult&text=GetIndexStatisticsResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  name: "getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  summary: "Retrieves an index definition from the Azure Cognitive Search."
  parameters:
  - description: "the name of the index to retrieve"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Index>> getIndexWithResponse(String indexName, RequestOptions requestOptions)"
  desc: "Retrieves an index definition from the Azure Cognitive Search."
  returns:
    description: "a response containing the Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexer(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexer(String indexerName)"
  name: "getIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.getIndexer(String indexerName)"
  summary: "Retrieves an indexer definition."
  parameters:
  - description: "the name of the indexer to retrieve"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Indexer> getIndexer(String indexerName)"
  desc: "Retrieves an indexer definition."
  returns:
    description: "the indexer."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatus(String indexerName)"
  name: "getIndexerStatus(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatus(String indexerName)"
  summary: "Returns the current status and execution history of an indexer."
  parameters:
  - description: "the name of the indexer for which to retrieve status"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<IndexerExecutionInfo> getIndexerStatus(String indexerName)"
  desc: "Returns the current status and execution history of an indexer."
  returns:
    description: "the indexer execution info."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.IndexerExecutionInfo?alt=com.azure.search.models.IndexerExecutionInfo&text=IndexerExecutionInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  name: "getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  summary: "Returns the current status and execution history of an indexer."
  parameters:
  - description: "the name of the indexer for which to retrieve status"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<IndexerExecutionInfo>> getIndexerStatusWithResponse(String indexerName, RequestOptions requestOptions)"
  desc: "Returns the current status and execution history of an indexer."
  returns:
    description: "a response with the indexer execution info."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.IndexerExecutionInfo?alt=com.azure.search.models.IndexerExecutionInfo&text=IndexerExecutionInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  name: "getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  summary: "Retrieves an indexer definition."
  parameters:
  - description: "the name of the indexer to retrieve"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Indexer>> getIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  desc: "Retrieves an indexer definition."
  returns:
    description: "a response containing the indexer."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatistics()"
  name: "getServiceStatistics()"
  nameWithType: "SearchServiceAsyncClient.getServiceStatistics()"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  syntax: "public Mono<ServiceStatistics> getServiceStatistics()"
  desc: "Returns service level statistics for a search service, including service counters and limits.\n\nContains the tracking ID sent with the request to help with debugging"
  returns:
    description: "the search service statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.ServiceStatistics?alt=com.azure.search.models.ServiceStatistics&text=ServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  name: "getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  parameters:
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ServiceStatistics>> getServiceStatisticsWithResponse(RequestOptions requestOptions)"
  desc: "Returns service level statistics for a search service, including service counters and limits."
  returns:
    description: "the search service statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.ServiceStatistics?alt=com.azure.search.models.ServiceStatistics&text=ServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getServiceVersion()"
  fullName: "com.azure.search.SearchServiceAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "SearchServiceAsyncClient.getServiceVersion()"
  summary: "Gets search service version."
  syntax: "public SearchServiceVersion getServiceVersion()"
  desc: "Gets search service version."
  returns:
    description: "the search service version value."
    type: "<xref href=\"com.azure.search.SearchServiceVersion?alt=com.azure.search.SearchServiceVersion&text=SearchServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillset(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillset(String skillsetName)"
  name: "getSkillset(String skillsetName)"
  nameWithType: "SearchServiceAsyncClient.getSkillset(String skillsetName)"
  summary: "Retrieves a skillset definition."
  parameters:
  - description: "the name of the skillset to retrieve"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Skillset> getSkillset(String skillsetName)"
  desc: "Retrieves a skillset definition."
  returns:
    description: "the Skillset."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  name: "getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  summary: "Retrieves a skillset definition."
  parameters:
  - description: "the name of the skillset to retrieve"
    name: "skillsetName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Skillset>> getSkillsetWithResponse(String skillsetName, RequestOptions requestOptions)"
  desc: "Retrieves a skillset definition."
  returns:
    description: "a response containing the Skillset."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMap(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMap(String synonymMapName)"
  name: "getSynonymMap(String synonymMapName)"
  nameWithType: "SearchServiceAsyncClient.getSynonymMap(String synonymMapName)"
  summary: "Retrieves a synonym map definition."
  parameters:
  - description: "name of the synonym map to retrieve"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SynonymMap> getSynonymMap(String synonymMapName)"
  desc: "Retrieves a synonym map definition."
  returns:
    description: "the <xref uid=\"com.azure.search.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> definition"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  name: "getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  summary: "Retrieves a synonym map definition."
  parameters:
  - description: "name of the synonym map to retrieve"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SynonymMap>> getSynonymMapWithResponse(String synonymMapName, RequestOptions requestOptions)"
  desc: "Retrieves a synonym map definition."
  returns:
    description: "a response containing the SynonymMap."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listDataSources()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listDataSources()"
  name: "listDataSources()"
  nameWithType: "SearchServiceAsyncClient.listDataSources()"
  summary: "List all Data<wbr>Sources from an Azure Cognitive Search service."
  syntax: "public PagedFlux<DataSource> listDataSources()"
  desc: "List all DataSources from an Azure Cognitive Search service."
  returns:
    description: "a list of DataSources"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listDataSources(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listDataSources(String select, RequestOptions requestOptions)"
  name: "listDataSources(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listDataSources(String select, RequestOptions requestOptions)"
  summary: "List all Data<wbr>Sources from an Azure Cognitive Search service."
  parameters:
  - description: "Selects which top-level properties of DataSource definitions to retrieve. Specified as a\n comma-separated list of JSON property names, or '*' for all properties. The default is all properties."
    name: "select"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging."
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<DataSource> listDataSources(String select, RequestOptions requestOptions)"
  desc: "List all DataSources from an Azure Cognitive Search service."
  returns:
    description: "a list of DataSources"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.DataSource?alt=com.azure.search.models.DataSource&text=DataSource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexers()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexers()"
  name: "listIndexers()"
  nameWithType: "SearchServiceAsyncClient.listIndexers()"
  syntax: "public PagedFlux<Indexer> listIndexers()"
  returns:
    description: "all Indexers from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexers(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexers(String select, RequestOptions requestOptions)"
  name: "listIndexers(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listIndexers(String select, RequestOptions requestOptions)"
  summary: "Lists all indexers available for an Azure Cognitive Search service."
  parameters:
  - description: "Selects which top-level properties of the indexers to retrieve. Specified as a comma-separated list\n of JSON property names, or '*' for all properties. The default is all properties."
    name: "select"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Additional parameters for the operation."
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Indexer> listIndexers(String select, RequestOptions requestOptions)"
  desc: "Lists all indexers available for an Azure Cognitive Search service."
  returns:
    description: "a response containing all Indexers from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Indexer?alt=com.azure.search.models.Indexer&text=Indexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexes()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexes()"
  name: "listIndexes()"
  nameWithType: "SearchServiceAsyncClient.listIndexes()"
  summary: "Lists all indexes available for an Azure Cognitive Search service."
  syntax: "public PagedFlux<Index> listIndexes()"
  desc: "Lists all indexes available for an Azure Cognitive Search service."
  returns:
    description: "a reactive response emitting the list of indexes."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listIndexes(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listIndexes(String select, RequestOptions requestOptions)"
  name: "listIndexes(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listIndexes(String select, RequestOptions requestOptions)"
  summary: "Lists all indexes available for an Azure Cognitive Search service."
  parameters:
  - description: "selects which top-level properties of the index definitions to retrieve. Specified as a\n comma-separated list of JSON property names, or '*' for all properties. The default is all properties"
    name: "select"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Index> listIndexes(String select, RequestOptions requestOptions)"
  desc: "Lists all indexes available for an Azure Cognitive Search service."
  returns:
    description: "a reactive response emitting the list of indexes."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Index?alt=com.azure.search.models.Index&text=Index\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listSkillsets()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSkillsets()"
  name: "listSkillsets()"
  nameWithType: "SearchServiceAsyncClient.listSkillsets()"
  summary: "Lists all skillsets available for an Azure Cognitive Search service."
  syntax: "public PagedFlux<Skillset> listSkillsets()"
  desc: "Lists all skillsets available for an Azure Cognitive Search service."
  returns:
    description: "a reactive response emitting the list of skillsets."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listSkillsets(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSkillsets(String select, RequestOptions requestOptions)"
  name: "listSkillsets(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listSkillsets(String select, RequestOptions requestOptions)"
  summary: "Lists all skillsets available for an Azure Cognitive Search service."
  parameters:
  - description: "selects which top-level properties of the skillset definitions to retrieve. Specified as a\n comma-separated list of JSON property names, or '*' for all properties. The default is all properties"
    name: "select"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Skillset> listSkillsets(String select, RequestOptions requestOptions)"
  desc: "Lists all skillsets available for an Azure Cognitive Search service."
  returns:
    description: "a reactive response emitting the list of skillsets."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.Skillset?alt=com.azure.search.models.Skillset&text=Skillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps()"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps()"
  name: "listSynonymMaps()"
  nameWithType: "SearchServiceAsyncClient.listSynonymMaps()"
  summary: "Lists all synonym maps available for an Azure Cognitive Search service."
  syntax: "public PagedFlux<SynonymMap> listSynonymMaps()"
  desc: "Lists all synonym maps available for an Azure Cognitive Search service."
  returns:
    description: "a reactive response emitting the list of synonym maps."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.listSynonymMaps(String select, RequestOptions requestOptions)"
  name: "listSynonymMaps(String select, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.listSynonymMaps(String select, RequestOptions requestOptions)"
  summary: "Lists all synonym maps available for an Azure Cognitive Search service."
  parameters:
  - description: "selects which top-level properties of the synonym maps to retrieve. Specified as a comma-separated\n list of JSON property names, or '*' for all properties. The default is all properties"
    name: "select"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<SynonymMap> listSynonymMaps(String select, RequestOptions requestOptions)"
  desc: "Lists all synonym maps available for an Azure Cognitive Search service."
  returns:
    description: "a reactive response emitting the list of synonym maps."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.models.SynonymMap?alt=com.azure.search.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexer(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexer(String indexerName)"
  name: "resetIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.resetIndexer(String indexerName)"
  summary: "Resets the change tracking state associated with an indexer."
  parameters:
  - description: "the name of the indexer to reset"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> resetIndexer(String indexerName)"
  desc: "Resets the change tracking state associated with an indexer."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  name: "resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  summary: "Resets the change tracking state associated with an indexer."
  parameters:
  - description: "the name of the indexer to reset"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> resetIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  desc: "Resets the change tracking state associated with an indexer."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexer(java.lang.String)"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexer(String indexerName)"
  name: "runIndexer(String indexerName)"
  nameWithType: "SearchServiceAsyncClient.runIndexer(String indexerName)"
  summary: "Runs an indexer on-demand."
  parameters:
  - description: "the name of the indexer to run"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> runIndexer(String indexerName)"
  desc: "Runs an indexer on-demand."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(java.lang.String,com.azure.search.models.RequestOptions)"
  fullName: "com.azure.search.SearchServiceAsyncClient.runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  name: "runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  nameWithType: "SearchServiceAsyncClient.runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  summary: "Runs an indexer on-demand."
  parameters:
  - description: "the name of the indexer to run"
    name: "indexerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    name: "requestOptions"
    type: "<xref href=\"com.azure.search.models.RequestOptions?alt=com.azure.search.models.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> runIndexerWithResponse(String indexerName, RequestOptions requestOptions)"
  desc: "Runs an indexer on-demand."
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
type: "class"
desc: "Asynchronous Client to manage and query indexes, as well as manage other resources, on a Cognitive Search service"
metadata: {}
package: "com.azure.search"
artifact: com.azure:azure-search:11.0.0-beta.1
