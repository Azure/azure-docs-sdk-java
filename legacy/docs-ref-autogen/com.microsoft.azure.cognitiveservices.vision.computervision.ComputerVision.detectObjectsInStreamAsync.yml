### YamlMime:JavaMember
nameWithType: ComputerVision.detectObjectsInStreamAsync
type: method
members:
- fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStreamAsync(byte[] image)
  name: detectObjectsInStreamAsync(byte[] image)
  nameWithType: ComputerVision.detectObjectsInStreamAsync(byte[] image)
  parameters:
  - description: <p>An image stream. </p>
    name: image
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DetectResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult?alt=com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult&text=DetectResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Performs object detection on the specified image. Two input methods are supported <ndash></ndash> (1) Uploading an image or (2) specifying an image URL. A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.</p>

    <p></p>
  syntax: public Observable<DetectResult> detectObjectsInStreamAsync(byte[] image)
  uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStreamAsync(byte [])
uid: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStreamAsync*
fullName: com.microsoft.azure.cognitiveservices.vision.computervision.ComputerVision.detectObjectsInStreamAsync
name: detectObjectsInStreamAsync(byte[] image)
package: com.microsoft.azure.cognitiveservices.vision.computervision
metadata: {}
