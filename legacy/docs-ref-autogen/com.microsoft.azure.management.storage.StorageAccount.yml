### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.storage.StorageAccount.accessTier()
  name: accessTier()
  nameWithType: StorageAccount.accessTier()
  returns:
    description: "<p>access tier used for billing. Access tier cannot be changed more than once every 7 days (168 hours). Access tier cannot be set for StandardLRS, StandardGRS, StandardRAGRS, or PremiumLRS account types. Possible values include: 'Hot', 'Cool'. </p>"
    type: <xref href="com.microsoft.azure.management.storage.AccessTier?alt=com.microsoft.azure.management.storage.AccessTier&text=AccessTier" data-throw-if-not-resolved="False"/>
  syntax: public AccessTier accessTier()
  uid: com.microsoft.azure.management.storage.StorageAccount.accessTier()
- fullName: com.microsoft.azure.management.storage.StorageAccount.accountStatuses()
  name: accountStatuses()
  nameWithType: StorageAccount.accountStatuses()
  returns:
    description: "<p>the status indicating whether the primary and secondary location of the storage account is available or unavailable. Possible values include: 'Available', 'Unavailable' </p>"
    type: <xref href="AccountStatuses?alt=AccountStatuses&text=AccountStatuses" data-throw-if-not-resolved="False"/>
  syntax: public AccountStatuses accountStatuses()
  uid: com.microsoft.azure.management.storage.StorageAccount.accountStatuses()
- fullName: com.microsoft.azure.management.storage.StorageAccount.creationTime()
  name: creationTime()
  nameWithType: StorageAccount.creationTime()
  returns:
    description: <p>the creation date and time of the storage account in UTC </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime creationTime()
  uid: com.microsoft.azure.management.storage.StorageAccount.creationTime()
- fullName: com.microsoft.azure.management.storage.StorageAccount.customDomain()
  name: customDomain()
  nameWithType: StorageAccount.customDomain()
  returns:
    description: <p>the user assigned custom domain assigned to this storage account </p>
    type: <xref href="com.microsoft.azure.management.storage.CustomDomain?alt=com.microsoft.azure.management.storage.CustomDomain&text=CustomDomain" data-throw-if-not-resolved="False"/>
  syntax: public CustomDomain customDomain()
  uid: com.microsoft.azure.management.storage.StorageAccount.customDomain()
- fullName: com.microsoft.azure.management.storage.StorageAccount.encryption()
  name: encryption()
  nameWithType: StorageAccount.encryption()
  returns:
    description: '<p>the encryption settings on the account. TODO: This getter should be deprecated and removed (the new fully fluent encryption replaces this) </p>'
    type: <xref href="com.microsoft.azure.management.storage.Encryption?alt=com.microsoft.azure.management.storage.Encryption&text=Encryption" data-throw-if-not-resolved="False"/>
  syntax: public Encryption encryption()
  uid: com.microsoft.azure.management.storage.StorageAccount.encryption()
- fullName: com.microsoft.azure.management.storage.StorageAccount.encryptionKeySource()
  name: encryptionKeySource()
  nameWithType: StorageAccount.encryptionKeySource()
  returns:
    description: <p>the source of the key used for encryption. </p>
    type: <xref href="com.microsoft.azure.management.storage.StorageAccountEncryptionKeySource?alt=com.microsoft.azure.management.storage.StorageAccountEncryptionKeySource&text=StorageAccountEncryptionKeySource" data-throw-if-not-resolved="False"/>
  syntax: public StorageAccountEncryptionKeySource encryptionKeySource()
  uid: com.microsoft.azure.management.storage.StorageAccount.encryptionKeySource()
- fullName: com.microsoft.azure.management.storage.StorageAccount.encryptionStatuses()
  name: encryptionStatuses()
  nameWithType: StorageAccount.encryptionStatuses()
  returns:
    description: <p>the encryption statuses indexed by storage service type. </p>
    type: Map&lt;<xref href="com.microsoft.azure.management.storage.StorageService?alt=com.microsoft.azure.management.storage.StorageService&text=StorageService" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.storage.StorageAccountEncryptionStatus?alt=com.microsoft.azure.management.storage.StorageAccountEncryptionStatus&text=StorageAccountEncryptionStatus" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<StorageService, StorageAccountEncryptionStatus> encryptionStatuses()
  uid: com.microsoft.azure.management.storage.StorageAccount.encryptionStatuses()
- fullName: com.microsoft.azure.management.storage.StorageAccount.endPoints()
  name: endPoints()
  nameWithType: StorageAccount.endPoints()
  returns:
    description: <p>the URLs that are used to perform a retrieval of a public blob, queue or table object. Note that StandardZRS and PremiumLRS accounts only return the blob endpoint </p>
    type: <xref href="com.microsoft.azure.management.storage.PublicEndpoints?alt=com.microsoft.azure.management.storage.PublicEndpoints&text=PublicEndpoints" data-throw-if-not-resolved="False"/>
  syntax: public PublicEndpoints endPoints()
  uid: com.microsoft.azure.management.storage.StorageAccount.endPoints()
- fullName: com.microsoft.azure.management.storage.StorageAccount.getKeys()
  name: getKeys()
  nameWithType: StorageAccount.getKeys()
  returns:
    description: <p>the access keys for this storage account </p>
    type: List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Fetch the up-to-date access keys from Azure for this storage account.</p>

    <p></p>
  syntax: public List<StorageAccountKey> getKeys()
  uid: com.microsoft.azure.management.storage.StorageAccount.getKeys()
- fullName: com.microsoft.azure.management.storage.StorageAccount.getKeysAsync()
  name: getKeysAsync()
  nameWithType: StorageAccount.getKeysAsync()
  returns:
    description: <p>a representation of the deferred computation of this call, returning the access keys </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Fetch the up-to-date access keys from Azure for this storage account asynchronously.</p>

    <p></p>
  syntax: public Observable<List<StorageAccountKey>> getKeysAsync()
  uid: com.microsoft.azure.management.storage.StorageAccount.getKeysAsync()
- fullName: com.microsoft.azure.management.storage.StorageAccount.getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)
  name: getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)
  nameWithType: StorageAccount.getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)
  parameters:
  - description: <p>the callback to call on success or failure, with access keys as parameter. </p>
    name: callback
    type: ServiceCallback&lt;List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Fetch the up-to-date access keys from Azure for this storage account asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageAccountKey>> getKeysAsync(ServiceCallback<List<StorageAccountKey>> callback)
  uid: com.microsoft.azure.management.storage.StorageAccount.getKeysAsync(ServiceCallback<List<StorageAccountKey>>)
- fullName: com.microsoft.azure.management.storage.StorageAccount.kind()
  name: kind()
  nameWithType: StorageAccount.kind()
  returns:
    description: <p>the kind of the storage account. Possible values are 'Storage', 'BlobStorage'. </p>
    type: <xref href="com.microsoft.azure.management.storage.Kind?alt=com.microsoft.azure.management.storage.Kind&text=Kind" data-throw-if-not-resolved="False"/>
  syntax: public Kind kind()
  uid: com.microsoft.azure.management.storage.StorageAccount.kind()
- fullName: com.microsoft.azure.management.storage.StorageAccount.lastGeoFailoverTime()
  name: lastGeoFailoverTime()
  nameWithType: StorageAccount.lastGeoFailoverTime()
  returns:
    description: <p>the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime lastGeoFailoverTime()
  uid: com.microsoft.azure.management.storage.StorageAccount.lastGeoFailoverTime()
- fullName: com.microsoft.azure.management.storage.StorageAccount.provisioningState()
  name: provisioningState()
  nameWithType: StorageAccount.provisioningState()
  returns:
    description: "<p>the status of the storage account at the time the operation was called. Possible values include: 'Creating', 'ResolvingDNS', 'Succeeded' </p>"
    type: <xref href="com.microsoft.azure.management.storage.ProvisioningState?alt=com.microsoft.azure.management.storage.ProvisioningState&text=ProvisioningState" data-throw-if-not-resolved="False"/>
  syntax: public ProvisioningState provisioningState()
  uid: com.microsoft.azure.management.storage.StorageAccount.provisioningState()
- fullName: com.microsoft.azure.management.storage.StorageAccount.regenerateKey(String keyName)
  name: regenerateKey(String keyName)
  nameWithType: StorageAccount.regenerateKey(String keyName)
  parameters:
  - description: <p>if the key name </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the generated access keys for this storage account </p>
    type: List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates the access keys for this storage account.</p>

    <p></p>
  syntax: public List<StorageAccountKey> regenerateKey(String keyName)
  uid: com.microsoft.azure.management.storage.StorageAccount.regenerateKey(String)
- fullName: com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(String keyName)
  name: regenerateKeyAsync(String keyName)
  nameWithType: StorageAccount.regenerateKeyAsync(String keyName)
  parameters:
  - description: <p>if the key name </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call, returning the regenerated access key </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Regenerates the access keys for this storage account asynchronously.</p>

    <p></p>
  syntax: public Observable<List<StorageAccountKey>> regenerateKeyAsync(String keyName)
  uid: com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(String)
- fullName: com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)
  name: regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)
  nameWithType: StorageAccount.regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)
  parameters:
  - description: <p>if the key name </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure, with access keys as parameter. </p>
    name: callback
    type: ServiceCallback&lt;List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.storage.StorageAccountKey?alt=com.microsoft.azure.management.storage.StorageAccountKey&text=StorageAccountKey" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Regenerates the access keys for this storage account asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<List<StorageAccountKey>> regenerateKeyAsync(String keyName, ServiceCallback<List<StorageAccountKey>> callback)
  uid: com.microsoft.azure.management.storage.StorageAccount.regenerateKeyAsync(String,ServiceCallback<List<StorageAccountKey>>)
- fullName: com.microsoft.azure.management.storage.StorageAccount.sku()
  name: sku()
  nameWithType: StorageAccount.sku()
  returns:
    description: "<p>the sku of this storage account. Possible names include: 'Standard_LRS', 'Standard_ZRS', 'Standard_GRS', 'Standard_RAGRS', 'Premium_LRS'. Possible tiers include: 'Standard', 'Premium'. </p>"
    type: <xref href="com.microsoft.azure.management.storage.Sku?alt=com.microsoft.azure.management.storage.Sku&text=Sku" data-throw-if-not-resolved="False"/>
  syntax: public Sku sku()
  uid: com.microsoft.azure.management.storage.StorageAccount.sku()
nameWithType: StorageAccount
syntax: public interface StorageAccount extends GroupableResource<StorageManager, StorageAccountInner>,Refreshable<StorageAccount>,Updatable<StorageAccount.Update>
type: interface
uid: com.microsoft.azure.management.storage.StorageAccount
fullName: com.microsoft.azure.management.storage.StorageAccount
name: StorageAccount
package: com.microsoft.azure.management.storage
summary: <p>An immutable client-side representation of an Azure storage account. </p>
metadata: {}
