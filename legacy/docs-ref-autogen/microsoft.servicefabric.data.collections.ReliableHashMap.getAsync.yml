### YamlMime:JavaMember
nameWithType: ReliableHashMap<K,V>.getAsync
type: method
members:
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getAsync(Transaction txn, K key)
  name: getAsync(Transaction txn, K key)
  nameWithType: ReliableHashMap<K,V>.getAsync(Transaction txn, K key)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>the key whose associated value is to be returned </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with value to which the specified key is mapped, null if no such mapping exists. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ClassNotFoundException"></xref> for deserialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</p>

    <p></p>
  syntax: public CompletableFuture<V> getAsync(Transaction txn, K key)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.getAsync(Transaction,K)
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  name: getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  nameWithType: ReliableHashMap<K,V>.getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>the key whose associated value is to be returned </p>
    name: key
    type: <xref href="K?alt=K&text=K" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout for the operation to complete. Default timeout(4 seconds) will be used if null is passed. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if key or txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> with value to which the specified key is mapped, null if no such mapping exists. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IOException"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ClassNotFoundException"></xref> for deserialization failures, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: <xref href="CompletableFuture%3CV%3E?alt=CompletableFuture%3CV%3E&text=CompletableFuture%3CV%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.</p>

    <p></p>
  syntax: public CompletableFuture<V> getAsync(Transaction txn, K key, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.getAsync(Transaction,K,Duration,CancellationToken)
uid: microsoft.servicefabric.data.collections.ReliableHashMap.getAsync*
fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.getAsync
name: getAsync(Transaction txn, K key)
package: microsoft.servicefabric.data.collections
metadata: {}
