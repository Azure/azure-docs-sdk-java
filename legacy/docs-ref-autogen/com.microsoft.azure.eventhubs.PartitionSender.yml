### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.eventhubs.PartitionSender.close()
  name: close()
  nameWithType: PartitionSender.close()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> close()
  uid: com.microsoft.azure.eventhubs.PartitionSender.close()
- fullName: com.microsoft.azure.eventhubs.PartitionSender.closeSync()
  name: closeSync()
  nameWithType: PartitionSender.closeSync()
  syntax: public void closeSync()
  uid: com.microsoft.azure.eventhubs.PartitionSender.closeSync()
- fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch()
  name: createBatch()
  nameWithType: PartitionSender.createBatch()
  returns:
    description: <p>the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>, after negotiating maximum message size with EventHubs service </p>
    type: default <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventDataBatch)"></xref>.</p>

    <p></p>
  syntax: public default EventDataBatch createBatch()
  uid: com.microsoft.azure.eventhubs.PartitionSender.createBatch()
- fullName: com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions options)
  name: createBatch(BatchOptions options)
  nameWithType: PartitionSender.createBatch(BatchOptions options)
  parameters:
  - description: <p>see <xref uid="com.microsoft.azure.eventhubs.BatchOptions" data-throw-if-not-resolved="false" data-raw-source="BatchOptions"></xref> for more usage details </p>
    name: options
    type: <xref href="com.microsoft.azure.eventhubs.BatchOptions?alt=com.microsoft.azure.eventhubs.BatchOptions&text=BatchOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>, after negotiating maximum message size with EventHubs service </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventDataBatch)"></xref>.</p>

    <p></p>
  syntax: public EventDataBatch createBatch(BatchOptions options)
  uid: com.microsoft.azure.eventhubs.PartitionSender.createBatch(BatchOptions)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId()
  name: getPartitionId()
  nameWithType: PartitionSender.getPartitionId()
  returns:
    description: <p>the partition id the PartitionSender is connected to. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The partition id that will receive events from this sender.</p>

    <p></p>
  syntax: public String getPartitionId()
  uid: com.microsoft.azure.eventhubs.PartitionSender.getPartitionId()
- fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventData data)
  name: send(EventData data)
  nameWithType: PartitionSender.send(EventData data)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to be sent. </p>
    name: data
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to a specific EventHub partition. The target partition is pre-determined when this PartitionSender was created. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(EventData)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(Iterable)"></xref>, <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(EventDataBatch)"></xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(EventData, String)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(Iterable, String)"></xref>

    iii. <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventData)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(Iterable)"></xref>, or <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventDataBatch)"></xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i. The client wants to take direct control of distribution of data across partitions. In this case client is responsible for making sure there is at least one sender per event hub partition.

    ii. User cannot use partition key as a mean to direct events to specific partition, yet there is a need for data correlation with partitioning scheme.

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(EventData data)
  uid: com.microsoft.azure.eventhubs.PartitionSender.send(EventData)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch eventDatas)
  name: send(EventDataBatch eventDatas)
  nameWithType: PartitionSender.send(EventDataBatch eventDatas)
  parameters:
  - description: <p>EventDataBatch to send to EventHub </p>
    name: eventDatas
    type: <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operation is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. A partitionKey cannot be set when using EventDataBatch with a PartitionSender. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(EventDataBatch eventDatas)
  uid: com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData> eventDatas)
  name: send(Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.send(Iterable<EventData> eventDatas)
  parameters:
  - description: <p>batch of events to send to EventHub </p>
    name: eventDatas
    type: Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to a specific EventHub partition. The targeted partition is pre-determined when this PartitionSender was created. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    Gson gson = new GsonBuilder().create();

    EventHubClient client = EventHubClient.createSync("__connection__");

    PartitionSender senderToPartitionOne = client.createPartitionSenderSync("1");</pre></p>

    <p>

      <pre>while (true)

    {

        LinkedList{&lt;}EventData{&gt;} events = new LinkedList{&lt;}EventData{&gt;}();

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            EventData sendEvent = EventData.create(payloadBytes);

            sendEvent.getProperties().put("from", "javaClient");

            events.add(sendEvent);

        }</pre>

    </p>

    <p>

      <pre>    senderToPartitionOne.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </pre>

    </p>

    <p></p>
  syntax: public CompletableFuture<Void> send(Iterable<EventData> eventDatas)
  uid: com.microsoft.azure.eventhubs.PartitionSender.send(Iterable<EventData>)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventData data)
  name: sendSync(final EventData data)
  nameWithType: PartitionSender.sendSync(final EventData data)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to be sent. </p>
    name: data
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="PayloadSizeExceededException?alt=PayloadSizeExceededException&text=PayloadSizeExceededException" data-throw-if-not-resolved="False"/>
    description: <p>if the total size of the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref> Api.</p>

    <p></p>
  syntax: public default void sendSync(final EventData data)
  uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventData)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventDataBatch eventDatas)
  name: sendSync(final EventDataBatch eventDatas)
  nameWithType: PartitionSender.sendSync(final EventDataBatch eventDatas)
  parameters:
  - description: <p>EventDataBatch to send to EventHub </p>
    name: eventDatas
    type: final <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="send(EventDataBatch)"></xref></p>

    <p></p>
  syntax: public default void sendSync(final EventDataBatch eventDatas)
  uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final EventDataBatch)
- fullName: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final Iterable<EventData> eventDatas)
  name: sendSync(final Iterable<EventData> eventDatas)
  nameWithType: PartitionSender.sendSync(final Iterable<EventData> eventDatas)
  parameters:
  - description: <p>batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable)"></xref> .</p>

    <p></p>
  syntax: public default void sendSync(final Iterable<EventData> eventDatas)
  uid: com.microsoft.azure.eventhubs.PartitionSender.sendSync(final Iterable<EventData>)
nameWithType: PartitionSender
syntax: public interface PartitionSender
type: interface
uid: com.microsoft.azure.eventhubs.PartitionSender
fullName: com.microsoft.azure.eventhubs.PartitionSender
name: PartitionSender
package: com.microsoft.azure.eventhubs
summary: >-
  <p>This sender class is a logical representation of sending events to a specific EventHub partition. Do not use this class if you do not care about sending events to specific partitions. Instead, use <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send"></xref> method.</p>

  <p></p>
metadata: {}
