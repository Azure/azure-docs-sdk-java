### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.CertificatesInner(Retrofit retrofit, BatchManagementClientImpl client)
  name: CertificatesInner(Retrofit retrofit, BatchManagementClientImpl client)
  nameWithType: CertificatesInner.CertificatesInner(Retrofit retrofit, BatchManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl?alt=com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl&text=BatchManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of CertificatesInner.</p>

    <p></p>
  syntax: public CertificatesInner(Retrofit retrofit, BatchManagementClientImpl client)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.CertificatesInner(Retrofit,BatchManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDelete(String resourceGroupName, String accountName, String certificateName)
  name: beginDelete(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.beginDelete(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDelete(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDeleteAsync(String resourceGroupName, String accountName, String certificateName)
  name: beginDeleteAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.beginDeleteAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDeleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDeleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  nameWithType: CertificatesInner.beginDeleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDeleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.management.batch.CertificateDeleteHeaders?alt=com.microsoft.azure.management.batch.CertificateDeleteHeaders&text=CertificateDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.beginDeleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletion(String resourceGroupName, String accountName, String certificateName)
  name: cancelDeletion(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.cancelDeletion(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CertificateInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public CertificateInner cancelDeletion(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletion(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName)
  name: cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public Observable<CertificateInner> cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletionAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  name: cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateInner> cancelDeletionAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletionAsync(String,String,String,final ServiceCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletionWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  name: cancelDeletionWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.cancelDeletionWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.CertificateCancelDeletionHeaders?alt=com.microsoft.azure.management.batch.CertificateCancelDeletionHeaders&text=CertificateCancelDeletionHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Cancels a failed deletion of a certificate from the specified account. If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CertificateInner, CertificateCancelDeletionHeaders>> cancelDeletionWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.cancelDeletionWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  name: create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  nameWithType: CertificatesInner.create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CertificateInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public CertificateInner create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.create(String,String,String,CertificateCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  name: create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  nameWithType: CertificatesInner.create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. A value of "*" can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CertificateInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public CertificateInner create(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.create(String,String,String,CertificateCreateOrUpdateParameters,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  name: createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  nameWithType: CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public Observable<CertificateInner> createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String,String,String,CertificateCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateInner> createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String,String,String,CertificateCreateOrUpdateParameters,final ServiceCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  name: createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  nameWithType: CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. A value of "*" can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public Observable<CertificateInner> createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String,String,String,CertificateCreateOrUpdateParameters,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<CertificateInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. A value of "*" can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateInner> createAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.createAsync(String,String,String,CertificateCreateOrUpdateParameters,String,String,final ServiceCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  nameWithType: CertificatesInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.CertificateCreateHeaders?alt=com.microsoft.azure.management.batch.CertificateCreateHeaders&text=CertificateCreateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CertificateInner, CertificateCreateHeaders>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.createWithServiceResponseAsync(String,String,String,CertificateCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  nameWithType: CertificatesInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for certificate creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. A value of "*" can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.CertificateCreateHeaders?alt=com.microsoft.azure.management.batch.CertificateCreateHeaders&text=CertificateCreateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a new certificate inside the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CertificateInner, CertificateCreateHeaders>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.createWithServiceResponseAsync(String,String,String,CertificateCreateOrUpdateParameters,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.delete(String resourceGroupName, String accountName, String certificateName)
  name: delete(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.delete(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.delete(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.deleteAsync(String resourceGroupName, String accountName, String certificateName)
  name: deleteAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.deleteAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.deleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  nameWithType: CertificatesInner.deleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.management.batch.CertificateDeleteHeaders?alt=com.microsoft.azure.management.batch.CertificateDeleteHeaders&text=CertificateDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes the specified certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, CertificateDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.get(String resourceGroupName, String accountName, String certificateName)
  name: get(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.get(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CertificateInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public CertificateInner get(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.get(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.getAsync(String resourceGroupName, String accountName, String certificateName)
  name: getAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.getAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Observable<CertificateInner> getAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.getAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.getAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateInner> getAsync(String resourceGroupName, String accountName, String certificateName, final ServiceCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.getAsync(String,String,String,final ServiceCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  nameWithType: CertificatesInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.CertificateGetHeaders?alt=com.microsoft.azure.management.batch.CertificateGetHeaders&text=CertificateGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CertificateInner, CertificateGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccount(final String resourceGroupName, final String accountName)
  name: listByBatchAccount(final String resourceGroupName, final String accountName)
  nameWithType: CertificatesInner.listByBatchAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CertificateInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public PagedList<CertificateInner> listByBatchAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccount(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: CertificatesInner.listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name". </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CertificateInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public PagedList<CertificateInner> listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccount(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CertificateInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CertificateInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name". </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CertificateInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CertificateInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<CertificateInner> serviceCallback)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name". </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String,final String,final Integer,final String,final String,final ListOperationCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<CertificateInner> serviceCallback)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountAsync(final String,final String,final ListOperationCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNext(final String nextPageLink)
  name: listByBatchAccountNext(final String nextPageLink)
  nameWithType: CertificatesInner.listByBatchAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CertificateInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public PagedList<CertificateInner> listByBatchAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNext(final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextAsync(final String nextPageLink)
  name: listByBatchAccountNextAsync(final String nextPageLink)
  nameWithType: CertificatesInner.listByBatchAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CertificateInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CertificateInner>> listByBatchAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateInner>> serviceFuture, final ListOperationCallback<CertificateInner> serviceCallback)
  name: listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateInner>> serviceFuture, final ListOperationCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateInner>> serviceFuture, final ListOperationCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateInner>> listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<CertificateInner>> serviceFuture, final ListOperationCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextAsync(final String,final ServiceFuture<List<CertificateInner>>,final ListOperationCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  name: listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  nameWithType: CertificatesInner.listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;CertificateInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p>ServiceResponse&lt;PageImpl&lt;CertificateInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<CertificateInner>>> listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: CertificatesInner.listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CertificateInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<CertificateInner>>> listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  name: listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  nameWithType: CertificatesInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;CertificateInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<CertificateInner>>> listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: CertificatesInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. ServiceResponse&lt;PageImpl&lt;CertificateInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. ServiceResponse&lt;PageImpl&lt;CertificateInner&gt;&gt; * </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. ServiceResponse&lt;PageImpl&lt;CertificateInner&gt;&gt; * </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. ServiceResponse&lt;PageImpl&lt;CertificateInner&gt;&gt; * </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name". </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;CertificateInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p>ServiceResponse&lt;PageImpl&lt;CertificateInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<CertificateInner>>> listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountSinglePageAsync(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: CertificatesInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CertificateInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<CertificateInner>>> listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: CertificatesInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>OData filter expression. Valid properties for filtering are "properties/provisioningState", "properties/provisioningStateTransitionTime", "name". </p>
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CertificateInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the certificates in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<CertificateInner>>> listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.listByBatchAccountWithServiceResponseAsync(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  name: update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  nameWithType: CertificatesInner.update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CertificateInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public CertificateInner update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.update(String,String,String,CertificateCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  name: update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  nameWithType: CertificatesInner.update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CertificateInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public CertificateInner update(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.update(String,String,String,CertificateCreateOrUpdateParameters,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  name: updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  nameWithType: CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public Observable<CertificateInner> updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String,String,String,CertificateCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateInner> updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, final ServiceCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String,String,String,CertificateCreateOrUpdateParameters,final ServiceCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  name: updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  nameWithType: CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public Observable<CertificateInner> updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String,String,String,CertificateCreateOrUpdateParameters,String)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ServiceCallback<CertificateInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ServiceCallback<CertificateInner> serviceCallback)
  nameWithType: CertificatesInner.updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ServiceCallback<CertificateInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateInner> updateAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ServiceCallback<CertificateInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateAsync(String,String,String,CertificateCreateOrUpdateParameters,String,final ServiceCallback<CertificateInner>)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  nameWithType: CertificatesInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.CertificateUpdateHeaders?alt=com.microsoft.azure.management.batch.CertificateUpdateHeaders&text=CertificateUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CertificateInner, CertificateUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateWithServiceResponseAsync(String,String,String,CertificateCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  nameWithType: CertificatesInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Certificate entity to update. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters?alt=com.microsoft.azure.management.batch.CertificateCreateOrUpdateParameters&text=CertificateCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the certificate to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CertificateInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.CertificateInner?alt=com.microsoft.azure.management.batch.implementation.CertificateInner&text=CertificateInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.CertificateUpdateHeaders?alt=com.microsoft.azure.management.batch.CertificateUpdateHeaders&text=CertificateUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of an existing certificate.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CertificateInner, CertificateUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String certificateName, CertificateCreateOrUpdateParameters parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.CertificatesInner.updateWithServiceResponseAsync(String,String,String,CertificateCreateOrUpdateParameters,String)
nameWithType: CertificatesInner
syntax: public class CertificatesInner
type: class
uid: com.microsoft.azure.management.batch.implementation.CertificatesInner
fullName: com.microsoft.azure.management.batch.implementation.CertificatesInner
name: CertificatesInner
package: com.microsoft.azure.management.batch.implementation
summary: <p>An instance of this class provides access to all the operations defined in Certificates. </p>
metadata: {}
