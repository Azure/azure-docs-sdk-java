### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.RegistriesInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  name: RegistriesInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  nameWithType: RegistriesInner.RegistriesInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl&text=ContainerRegistryManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of RegistriesInner.</p>

    <p></p>
  syntax: public RegistriesInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.RegistriesInner(Retrofit,ContainerRegistryManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet?alt=com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet&text=InnerSupportsGet%3CInnerT%3E" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet.getByResourceGroupAsync(String,String,ServiceCallback<InnerT>)
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreate(String resourceGroupName, String registryName, RegistryInner registry)
  name: beginCreate(String resourceGroupName, String registryName, RegistryInner registry)
  nameWithType: RegistriesInner.beginCreate(String resourceGroupName, String registryName, RegistryInner registry)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public RegistryInner beginCreate(String resourceGroupName, String registryName, RegistryInner registry)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreate(String,String,RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry)
  name: beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry)
  nameWithType: RegistriesInner.beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<RegistryInner> beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreateAsync(String,String,RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  name: beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryInner> beginCreateAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreateAsync(String,String,RegistryInner,final ServiceCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  name: beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  nameWithType: RegistriesInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginCreateWithServiceResponseAsync(String,String,RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDelete(String resourceGroupName, String registryName)
  name: beginDelete(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.beginDelete(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDelete(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDeleteAsync(String resourceGroupName, String registryName)
  name: beginDeleteAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.beginDeleteAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDeleteAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDeleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  nameWithType: RegistriesInner.beginDeleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDeleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginDeleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  name: beginImportImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  nameWithType: RegistriesInner.beginImportImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public void beginImportImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImage(String,String,ImportImageParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  name: beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  nameWithType: RegistriesInner.beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public Observable<Void> beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImageAsync(String,String,ImportImageParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: RegistriesInner.beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginImportImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImageAsync(String,String,ImportImageParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  name: beginImportImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  nameWithType: RegistriesInner.beginImportImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginImportImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginImportImageWithServiceResponseAsync(String,String,ImportImageParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  name: beginScheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  nameWithType: RegistriesInner.beginScheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public RunInner beginScheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRun(String,String,RunRequest)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  name: beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  nameWithType: RegistriesInner.beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public Observable<RunInner> beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRunAsync(String,String,RunRequest)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  name: beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RegistriesInner.beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> beginScheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRunAsync(String,String,RunRequest,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  name: beginScheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  nameWithType: RegistriesInner.beginScheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RunInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> beginScheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginScheduleRunWithServiceResponseAsync(String,String,RunRequest)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdate(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  name: beginUpdate(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  nameWithType: RegistriesInner.beginUpdate(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public RegistryInner beginUpdate(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdate(String,String,RegistryUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  name: beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  nameWithType: RegistriesInner.beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<RegistryInner> beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdateAsync(String,String,RegistryUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryInner> beginUpdateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdateAsync(String,String,RegistryUpdateParameters,final ServiceCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  name: beginUpdatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  nameWithType: RegistriesInner.beginUpdatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryPoliciesInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public RegistryPoliciesInner beginUpdatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePolicies(String,String,RegistryPoliciesInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  name: beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  nameWithType: RegistriesInner.beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryPoliciesInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryPoliciesInner> beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePoliciesAsync(String,String,RegistryPoliciesInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  name: beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  nameWithType: RegistriesInner.beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryPoliciesInner> beginUpdatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePoliciesAsync(String,String,RegistryPoliciesInner,final ServiceCallback<RegistryPoliciesInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  name: beginUpdatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  nameWithType: RegistriesInner.beginUpdatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryPoliciesInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryPoliciesInner>> beginUpdatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdatePoliciesWithServiceResponseAsync(String,String,RegistryPoliciesInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  nameWithType: RegistriesInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.beginUpdateWithServiceResponseAsync(String,String,RegistryUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailability(String name)
  name: checkNameAvailability(String name)
  nameWithType: RegistriesInner.checkNameAvailability(String name)
  parameters:
  - description: <p>The name of the container registry. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryNameStatusInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner&text=RegistryNameStatusInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.</p>

    <p></p>
  syntax: public RegistryNameStatusInner checkNameAvailability(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailability(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailabilityAsync(String name)
  name: checkNameAvailabilityAsync(String name)
  nameWithType: RegistriesInner.checkNameAvailabilityAsync(String name)
  parameters:
  - description: <p>The name of the container registry. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryNameStatusInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner&text=RegistryNameStatusInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.</p>

    <p></p>
  syntax: public Observable<RegistryNameStatusInner> checkNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailabilityAsync(String name, final ServiceCallback<RegistryNameStatusInner> serviceCallback)
  name: checkNameAvailabilityAsync(String name, final ServiceCallback<RegistryNameStatusInner> serviceCallback)
  nameWithType: RegistriesInner.checkNameAvailabilityAsync(String name, final ServiceCallback<RegistryNameStatusInner> serviceCallback)
  parameters:
  - description: <p>The name of the container registry. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner&text=RegistryNameStatusInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner&text=RegistryNameStatusInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryNameStatusInner> checkNameAvailabilityAsync(String name, final ServiceCallback<RegistryNameStatusInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailabilityAsync(String,final ServiceCallback<RegistryNameStatusInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailabilityWithServiceResponseAsync(String name)
  name: checkNameAvailabilityWithServiceResponseAsync(String name)
  nameWithType: RegistriesInner.checkNameAvailabilityWithServiceResponseAsync(String name)
  parameters:
  - description: <p>The name of the container registry. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryNameStatusInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryNameStatusInner&text=RegistryNameStatusInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Checks whether the container registry name is available for use. The name must contain only alphanumeric characters, be globally unique, and between 5 and 50 characters in length.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryNameStatusInner>> checkNameAvailabilityWithServiceResponseAsync(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.checkNameAvailabilityWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.create(String resourceGroupName, String registryName, RegistryInner registry)
  name: create(String resourceGroupName, String registryName, RegistryInner registry)
  nameWithType: RegistriesInner.create(String resourceGroupName, String registryName, RegistryInner registry)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public RegistryInner create(String resourceGroupName, String registryName, RegistryInner registry)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.create(String,String,RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.createAsync(String resourceGroupName, String registryName, RegistryInner registry)
  name: createAsync(String resourceGroupName, String registryName, RegistryInner registry)
  nameWithType: RegistriesInner.createAsync(String resourceGroupName, String registryName, RegistryInner registry)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<RegistryInner> createAsync(String resourceGroupName, String registryName, RegistryInner registry)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.createAsync(String,String,RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.createAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  name: createAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.createAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryInner> createAsync(String resourceGroupName, String registryName, RegistryInner registry, final ServiceCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.createAsync(String,String,RegistryInner,final ServiceCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  name: createWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  nameWithType: RegistriesInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a container registry. </p>
    name: registry
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryInner>> createWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryInner registry)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.createWithServiceResponseAsync(String,String,RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.delete(String resourceGroupName, String registryName)
  name: delete(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.delete(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.delete(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.deleteAsync(String resourceGroupName, String registryName)
  name: deleteAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.deleteAsync(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete.deleteAsync(String,String)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.deleteAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.deleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  nameWithType: RegistriesInner.deleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String registryName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.deleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.deleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrl(String resourceGroupName, String registryName)
  name: getBuildSourceUploadUrl(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.getBuildSourceUploadUrl(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the SourceUploadDefinitionInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner?alt=com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner&text=SourceUploadDefinitionInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the upload location for the user to be able to upload the source.</p>

    <p></p>
  syntax: public SourceUploadDefinitionInner getBuildSourceUploadUrl(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrl(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName)
  name: getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the SourceUploadDefinitionInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner?alt=com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner&text=SourceUploadDefinitionInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the upload location for the user to be able to upload the source.</p>

    <p></p>
  syntax: public Observable<SourceUploadDefinitionInner> getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrlAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName, final ServiceCallback<SourceUploadDefinitionInner> serviceCallback)
  name: getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName, final ServiceCallback<SourceUploadDefinitionInner> serviceCallback)
  nameWithType: RegistriesInner.getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName, final ServiceCallback<SourceUploadDefinitionInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner?alt=com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner&text=SourceUploadDefinitionInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner?alt=com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner&text=SourceUploadDefinitionInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the upload location for the user to be able to upload the source.</p>

    <p></p>
  syntax: public ServiceFuture<SourceUploadDefinitionInner> getBuildSourceUploadUrlAsync(String resourceGroupName, String registryName, final ServiceCallback<SourceUploadDefinitionInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrlAsync(String,String,final ServiceCallback<SourceUploadDefinitionInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrlWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: getBuildSourceUploadUrlWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.getBuildSourceUploadUrlWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the SourceUploadDefinitionInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner?alt=com.microsoft.azure.management.containerregistry.implementation.SourceUploadDefinitionInner&text=SourceUploadDefinitionInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get the upload location for the user to be able to upload the source.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<SourceUploadDefinitionInner>> getBuildSourceUploadUrlWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getBuildSourceUploadUrlWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroup(String resourceGroupName, String registryName)
  name: getByResourceGroup(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.getByResourceGroup(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet.getByResourceGroup(String,String)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the properties of the specified container registry.</p>

    <p></p>
  syntax: public RegistryInner getByResourceGroup(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroup(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroupAsync(String resourceGroupName, String registryName)
  name: getByResourceGroupAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.getByResourceGroupAsync(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet.getByResourceGroupAsync(String,String)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the properties of the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryInner> getByResourceGroupAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroupAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroupAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryInner> serviceCallback)
  name: getByResourceGroupAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.getByResourceGroupAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the properties of the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryInner> getByResourceGroupAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroupAsync(String,String,final ServiceCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the properties of the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.getByResourceGroupWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  name: importImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  nameWithType: RegistriesInner.importImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public void importImage(String resourceGroupName, String registryName, ImportImageParameters parameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImage(String,String,ImportImageParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  name: importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  nameWithType: RegistriesInner.importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public Observable<Void> importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImageAsync(String,String,ImportImageParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  name: importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  nameWithType: RegistriesInner.importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> importImageAsync(String resourceGroupName, String registryName, ImportImageParameters parameters, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImageAsync(String,String,ImportImageParameters,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  name: importImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  nameWithType: RegistriesInner.importImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters specifying the image to copy and the source container registry. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.containerregistry.ImportImageParameters?alt=com.microsoft.azure.management.containerregistry.ImportImageParameters&text=ImportImageParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Copies an image to this container registry from the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> importImageWithServiceResponseAsync(String resourceGroupName, String registryName, ImportImageParameters parameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.importImageWithServiceResponseAsync(String,String,ImportImageParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.list()
  name: list()
  nameWithType: RegistriesInner.list()
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public PagedList<RegistryInner> list()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.list()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listAsync()
  name: listAsync()
  nameWithType: RegistriesInner.listAsync()
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public Observable<Page<RegistryInner>> listAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listAsync(final ListOperationCallback<RegistryInner> serviceCallback)
  name: listAsync(final ListOperationCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.listAsync(final ListOperationCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public ServiceFuture<List<RegistryInner>> listAsync(final ListOperationCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listAsync(final ListOperationCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroup(final String resourceGroupName)
  name: listByResourceGroup(final String resourceGroupName)
  nameWithType: RegistriesInner.listByResourceGroup(final String resourceGroupName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.listByResourceGroup(String)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public PagedList<RegistryInner> listByResourceGroup(final String resourceGroupName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroup(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupAsync(final String resourceGroupName)
  name: listByResourceGroupAsync(final String resourceGroupName)
  nameWithType: RegistriesInner.listByResourceGroupAsync(final String resourceGroupName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.listByResourceGroupAsync(String)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public Observable<Page<RegistryInner>> listByResourceGroupAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<RegistryInner> serviceCallback)
  name: listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public ServiceFuture<List<RegistryInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupAsync(final String,final ListOperationCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNext(final String nextPageLink)
  name: listByResourceGroupNext(final String nextPageLink)
  nameWithType: RegistriesInner.listByResourceGroupNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public PagedList<RegistryInner> listByResourceGroupNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextAsync(final String nextPageLink)
  name: listByResourceGroupNextAsync(final String nextPageLink)
  nameWithType: RegistriesInner.listByResourceGroupNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public Observable<Page<RegistryInner>> listByResourceGroupNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  name: listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public ServiceFuture<List<RegistryInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextAsync(final String,final ServiceFuture<List<RegistryInner>>,final ListOperationCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextSinglePageAsync(final String nextPageLink)
  name: listByResourceGroupNextSinglePageAsync(final String nextPageLink)
  nameWithType: RegistriesInner.listByResourceGroupNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p>ServiceResponse&lt;PageImpl&lt;RegistryInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  name: listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: RegistriesInner.listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupSinglePageAsync(final String resourceGroupName)
  name: listByResourceGroupSinglePageAsync(final String resourceGroupName)
  nameWithType: RegistriesInner.listByResourceGroupSinglePageAsync(final String resourceGroupName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p>ServiceResponse&lt;PageImpl&lt;RegistryInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  name: listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  nameWithType: RegistriesInner.listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified resource group.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listByResourceGroupWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentials(String resourceGroupName, String registryName)
  name: listCredentials(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listCredentials(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryListCredentialsResultInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Lists the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public RegistryListCredentialsResultInner listCredentials(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentials(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentialsAsync(String resourceGroupName, String registryName)
  name: listCredentialsAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listCredentialsAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryListCredentialsResultInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryListCredentialsResultInner> listCredentialsAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentialsAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentialsAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  name: listCredentialsAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  nameWithType: RegistriesInner.listCredentialsAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryListCredentialsResultInner> listCredentialsAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentialsAsync(String,String,final ServiceCallback<RegistryListCredentialsResultInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentialsWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: listCredentialsWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listCredentialsWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryListCredentialsResultInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryListCredentialsResultInner>> listCredentialsWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listCredentialsWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: RegistriesInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public PagedList<RegistryInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: RegistriesInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public Observable<Page<RegistryInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public ServiceFuture<List<RegistryInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<RegistryInner>> serviceFuture, final ListOperationCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextAsync(final String,final ServiceFuture<List<RegistryInner>>,final ListOperationCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: RegistriesInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p>ServiceResponse&lt;PageImpl&lt;RegistryInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: RegistriesInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPolicies(String resourceGroupName, String registryName)
  name: listPolicies(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listPolicies(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryPoliciesInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Lists the policies for the specified container registry.</p>

    <p></p>
  syntax: public RegistryPoliciesInner listPolicies(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPolicies(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPoliciesAsync(String resourceGroupName, String registryName)
  name: listPoliciesAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listPoliciesAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryPoliciesInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the policies for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryPoliciesInner> listPoliciesAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPoliciesAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPoliciesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  name: listPoliciesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  nameWithType: RegistriesInner.listPoliciesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the policies for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryPoliciesInner> listPoliciesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPoliciesAsync(String,String,final ServiceCallback<RegistryPoliciesInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPoliciesWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: listPoliciesWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listPoliciesWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryPoliciesInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the policies for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryPoliciesInner>> listPoliciesWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listPoliciesWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listSinglePageAsync()
  name: listSinglePageAsync()
  nameWithType: RegistriesInner.listSinglePageAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;RegistryInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listSinglePageAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listSinglePageAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsages(String resourceGroupName, String registryName)
  name: listUsages(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listUsages(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryUsageListResultInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner&text=RegistryUsageListResultInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public RegistryUsageListResultInner listUsages(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsages(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsagesAsync(String resourceGroupName, String registryName)
  name: listUsagesAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listUsagesAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryUsageListResultInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner&text=RegistryUsageListResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryUsageListResultInner> listUsagesAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsagesAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsagesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryUsageListResultInner> serviceCallback)
  name: listUsagesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryUsageListResultInner> serviceCallback)
  nameWithType: RegistriesInner.listUsagesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryUsageListResultInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner&text=RegistryUsageListResultInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner&text=RegistryUsageListResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryUsageListResultInner> listUsagesAsync(String resourceGroupName, String registryName, final ServiceCallback<RegistryUsageListResultInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsagesAsync(String,String,final ServiceCallback<RegistryUsageListResultInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsagesWithServiceResponseAsync(String resourceGroupName, String registryName)
  name: listUsagesWithServiceResponseAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesInner.listUsagesWithServiceResponseAsync(String resourceGroupName, String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryUsageListResultInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryUsageListResultInner&text=RegistryUsageListResultInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryUsageListResultInner>> listUsagesWithServiceResponseAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listUsagesWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: RegistriesInner.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;RegistryInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the container registries under the specified subscription.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<RegistryInner>>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredential(String resourceGroupName, String registryName, PasswordName name)
  name: regenerateCredential(String resourceGroupName, String registryName, PasswordName name)
  nameWithType: RegistriesInner.regenerateCredential(String resourceGroupName, String registryName, PasswordName name)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>Specifies name of the password which should be regenerated <ndash></ndash> password or password2. Possible values include: 'password', 'password2' </p>"
    name: name
    type: <xref href="com.microsoft.azure.management.containerregistry.PasswordName?alt=com.microsoft.azure.management.containerregistry.PasswordName&text=PasswordName" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryListCredentialsResultInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates one of the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public RegistryListCredentialsResultInner regenerateCredential(String resourceGroupName, String registryName, PasswordName name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredential(String,String,PasswordName)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name)
  name: regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name)
  nameWithType: RegistriesInner.regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>Specifies name of the password which should be regenerated <ndash></ndash> password or password2. Possible values include: 'password', 'password2' </p>"
    name: name
    type: <xref href="com.microsoft.azure.management.containerregistry.PasswordName?alt=com.microsoft.azure.management.containerregistry.PasswordName&text=PasswordName" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryListCredentialsResultInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates one of the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryListCredentialsResultInner> regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredentialAsync(String,String,PasswordName)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  name: regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  nameWithType: RegistriesInner.regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>Specifies name of the password which should be regenerated <ndash></ndash> password or password2. Possible values include: 'password', 'password2' </p>"
    name: name
    type: <xref href="com.microsoft.azure.management.containerregistry.PasswordName?alt=com.microsoft.azure.management.containerregistry.PasswordName&text=PasswordName" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates one of the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryListCredentialsResultInner> regenerateCredentialAsync(String resourceGroupName, String registryName, PasswordName name, final ServiceCallback<RegistryListCredentialsResultInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredentialAsync(String,String,PasswordName,final ServiceCallback<RegistryListCredentialsResultInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredentialWithServiceResponseAsync(String resourceGroupName, String registryName, PasswordName name)
  name: regenerateCredentialWithServiceResponseAsync(String resourceGroupName, String registryName, PasswordName name)
  nameWithType: RegistriesInner.regenerateCredentialWithServiceResponseAsync(String resourceGroupName, String registryName, PasswordName name)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>Specifies name of the password which should be regenerated <ndash></ndash> password or password2. Possible values include: 'password', 'password2' </p>"
    name: name
    type: <xref href="com.microsoft.azure.management.containerregistry.PasswordName?alt=com.microsoft.azure.management.containerregistry.PasswordName&text=PasswordName" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the RegistryListCredentialsResultInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryListCredentialsResultInner&text=RegistryListCredentialsResultInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Regenerates one of the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryListCredentialsResultInner>> regenerateCredentialWithServiceResponseAsync(String resourceGroupName, String registryName, PasswordName name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.regenerateCredentialWithServiceResponseAsync(String,String,PasswordName)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  name: scheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  nameWithType: RegistriesInner.scheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RunInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public RunInner scheduleRun(String resourceGroupName, String registryName, RunRequest runRequest)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRun(String,String,RunRequest)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  name: scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  nameWithType: RegistriesInner.scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public Observable<RunInner> scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRunAsync(String,String,RunRequest)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  name: scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  nameWithType: RegistriesInner.scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public ServiceFuture<RunInner> scheduleRunAsync(String resourceGroupName, String registryName, RunRequest runRequest, final ServiceCallback<RunInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRunAsync(String,String,RunRequest,final ServiceCallback<RunInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  name: scheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  nameWithType: RegistriesInner.scheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters of a run that needs to scheduled. </p>
    name: runRequest
    type: <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RunInner?alt=com.microsoft.azure.management.containerregistry.implementation.RunInner&text=RunInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Schedules a new run based on the request parameters and add it to the run queue.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RunInner>> scheduleRunWithServiceResponseAsync(String resourceGroupName, String registryName, RunRequest runRequest)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.scheduleRunWithServiceResponseAsync(String,String,RunRequest)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.update(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  name: update(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  nameWithType: RegistriesInner.update(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public RegistryInner update(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.update(String,String,RegistryUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  name: updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  nameWithType: RegistriesInner.updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<RegistryInner> updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updateAsync(String,String,RegistryUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  nameWithType: RegistriesInner.updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryInner> updateAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters, final ServiceCallback<RegistryInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updateAsync(String,String,RegistryUpdateParameters,final ServiceCallback<RegistryInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  name: updatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  nameWithType: RegistriesInner.updatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the RegistryPoliciesInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public RegistryPoliciesInner updatePolicies(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePolicies(String,String,RegistryPoliciesInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  name: updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  nameWithType: RegistriesInner.updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryPoliciesInner> updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePoliciesAsync(String,String,RegistryPoliciesInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  name: updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  nameWithType: RegistriesInner.updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<RegistryPoliciesInner> updatePoliciesAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters, final ServiceCallback<RegistryPoliciesInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePoliciesAsync(String,String,RegistryPoliciesInner,final ServiceCallback<RegistryPoliciesInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  name: updatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  nameWithType: RegistriesInner.updatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating policies of a container registry. </p>
    name: registryPoliciesUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryPoliciesInner&text=RegistryPoliciesInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the policies for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryPoliciesInner>> updatePoliciesWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryPoliciesInner registryPoliciesUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updatePoliciesWithServiceResponseAsync(String,String,RegistryPoliciesInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  nameWithType: RegistriesInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a container registry. </p>
    name: registryUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryUpdateParameters?alt=com.microsoft.azure.management.containerregistry.RegistryUpdateParameters&text=RegistryUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<RegistryInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, RegistryUpdateParameters registryUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner.updateWithServiceResponseAsync(String,String,RegistryUpdateParameters)
nameWithType: RegistriesInner
syntax: public class RegistriesInner implements InnerSupportsGet<RegistryInner>,InnerSupportsDelete<Void>,InnerSupportsListing<RegistryInner>
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner
fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesInner
name: RegistriesInner
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>An instance of this class provides access to all the operations defined in Registries. </p>
metadata: {}
