### YamlMime:JavaMember
nameWithType: FabricActorProxyFactory.createActorServiceProxy
type: method
members:
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId,String)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId, String listenerName)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,ActorId,String)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,long)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The key of the actor service partition to connect to. </p>
    name: partitionKey
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,long)
- fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  nameWithType: FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  overridden: microsoft.servicefabric.actors.client.ActorProxyFactory.createActorServiceProxy(Class<T>,URI,long,String)
  parameters:
  - description: <p>The service interface type implemented by the actor service. </p>
    name: serviceInterfaceType
    type: <xref href="Class%3CT%3E?alt=Class<T>&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Uri of the actor service to connect to. </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>The key of the actor service partition to connect to. </p>
    name: partitionKey
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>By default an actor service has only one listener for clients to connect to and communicate with. However it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to. </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A service proxy object that implements <xref uid="microsoft.servicefabric.services.remoting.client.ServiceProxyBase" data-throw-if-not-resolved="false">microsoft.servicefabric.services.remoting.client.ServiceProxyBase</xref> and T (Service Interface). </p>
    type: '&lt;T extends <xref href="microsoft.servicefabric.services.remoting.Service?alt=microsoft.servicefabric.services.remoting.Service&text=Service" data-throw-if-not-resolved="False"/>&gt; T'
  summary: >-
    <p>Create a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.</p>

    <p></p>
  syntax: public <T extends Service> T createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, long partitionKey, String listenerName)
  uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T>,URI,long,String)
uid: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy*
fullName: microsoft.servicefabric.actors.remoting.client.FabricActorProxyFactory.createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
name: createActorServiceProxy(Class<T> serviceInterfaceType, URI serviceUri, ActorId actorId)
package: microsoft.servicefabric.actors.remoting.client
metadata: {}
