### YamlMime:JavaMember
nameWithType: FabricRuntime.getNodeContextAsync
type: method
members:
- fullName: system.fabric.FabricRuntime.getNodeContextAsync(Duration timeout)
  name: getNodeContextAsync(Duration timeout)
  nameWithType: FabricRuntime.getNodeContextAsync(Duration timeout)
  parameters:
  - description: <p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The task representing the asynchronous operation. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.NodeContext?alt=system.fabric.NodeContext&text=NodeContext" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</p>

    <p></p>
  syntax: public static CompletableFuture<NodeContext> getNodeContextAsync(Duration timeout)
  uid: system.fabric.FabricRuntime.getNodeContextAsync(Duration)
uid: system.fabric.FabricRuntime.getNodeContextAsync*
fullName: system.fabric.FabricRuntime.getNodeContextAsync(Duration timeout)
name: getNodeContextAsync(Duration timeout)
package: system.fabric
metadata: {}
