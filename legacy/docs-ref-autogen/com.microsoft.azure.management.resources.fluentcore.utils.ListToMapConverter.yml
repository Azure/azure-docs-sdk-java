### YamlMime:JavaType
uid: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter"
fullName: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT,InnerT>"
name: "ListToMapConverter<ImplT,InnerT>"
nameWithType: "ListToMapConverter<ImplT,InnerT>"
summary: "Utility class to convert a list of inners to map of implementation."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"java.lang.Object.clone()?alt=java.lang.Object.clone&text=clone\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.equals(java.lang.Object)?alt=java.lang.Object.equals&text=equals\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.finalize()?alt=java.lang.Object.finalize&text=finalize\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.getClass()?alt=java.lang.Object.getClass&text=getClass\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.hashCode()?alt=java.lang.Object.hashCode&text=hashCode\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notify()?alt=java.lang.Object.notify&text=notify\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.notifyAll()?alt=java.lang.Object.notifyAll&text=notifyAll\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.toString()?alt=java.lang.Object.toString&text=toString\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait()?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"java.lang.Object.wait(long,int)?alt=java.lang.Object.wait&text=wait\" data-throw-if-not-resolved=\"False\" />"
syntax: "public abstract class **ListToMapConverter<ImplT,InnerT>**"
constructors:
- uid: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.ListToMapConverter()"
  fullName: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT,InnerT>.ListToMapConverter()"
  name: "ListToMapConverter()"
  nameWithType: "ListToMapConverter<ImplT,InnerT>.ListToMapConverter()"
  syntax: "public ListToMapConverter()"
methods:
- uid: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.convertToUnmodifiableMap(java.util.List<InnerT>)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT,InnerT>.convertToUnmodifiableMap(List<InnerT> innerList)"
  name: "convertToUnmodifiableMap(List<InnerT> innerList)"
  nameWithType: "ListToMapConverter<ImplT,InnerT>.convertToUnmodifiableMap(List<InnerT> innerList)"
  summary: "Converts the passed list of inners to unmodifiable map of impls."
  parameters:
  - description: "list of the inners."
    name: "innerList"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"InnerT?alt=InnerT&text=InnerT\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Map<String,ImplT> convertToUnmodifiableMap(List<InnerT> innerList)"
  desc: "Converts the passed list of inners to unmodifiable map of impls."
  returns:
    description: "map of the impls"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"ImplT?alt=ImplT&text=ImplT\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.impl(InnerT)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT,InnerT>.impl(InnerT innerT)"
  name: "impl(InnerT innerT)"
  nameWithType: "ListToMapConverter<ImplT,InnerT>.impl(InnerT innerT)"
  modifiers:
  - "protected"
  - "abstract"
  parameters:
  - name: "innerT"
    type: "<xref href=\"InnerT?alt=InnerT&text=InnerT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected abstract ImplT impl(InnerT innerT)"
  returns:
    type: "<xref href=\"ImplT?alt=ImplT&text=ImplT\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.name(InnerT)"
  fullName: "com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT,InnerT>.name(InnerT innerT)"
  name: "name(InnerT innerT)"
  nameWithType: "ListToMapConverter<ImplT,InnerT>.name(InnerT innerT)"
  modifiers:
  - "protected"
  - "abstract"
  parameters:
  - name: "innerT"
    type: "<xref href=\"InnerT?alt=InnerT&text=InnerT\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected abstract String name(InnerT innerT)"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
typeParameters:
- description: "implementation of the interface"
  name: "ImplT"
- description: "inner class which needs to be wrapped"
  name: "InnerT"
desc: "Utility class to convert a list of inners to map of implementation."
metadata: {}
package: "com.microsoft.azure.management.resources.fluentcore.utils"
artifact: com.microsoft.azure:azure-mgmt-resources:1.41.4
