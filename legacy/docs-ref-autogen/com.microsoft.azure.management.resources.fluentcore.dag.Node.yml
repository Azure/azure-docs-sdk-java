### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.Node(final String key, final DataT data)
  name: Node(final String key, final DataT data)
  nameWithType: Node<DataT,NodeT,NodeT>.Node(final String key, final DataT data)
  parameters:
  - description: <p>unique id of the node </p>
    name: key
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>data to be stored in the node </p>
    name: data
    type: <xref href="final+DataT?alt=final+DataT&text=final+DataT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a graph node.</p>

    <p></p>
  syntax: public Node(final String key, final DataT data)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.Node(final String,final DataT)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.addChild(String childKey)
  name: addChild(String childKey)
  nameWithType: Node<DataT,NodeT,NodeT>.addChild(String childKey)
  parameters:
  - description: <p>add a child (neighbour) of this node </p>
    name: childKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void addChild(String childKey)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(String)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.children()
  name: children()
  nameWithType: Node<DataT,NodeT,NodeT>.children()
  returns:
    description: <p>children (neighbours) of this node </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public List<String> children()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.children()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.data()
  name: data()
  nameWithType: Node<DataT,NodeT,NodeT>.data()
  returns:
    description: <p>data stored in this node </p>
    type: <xref href="DataT?alt=DataT&text=DataT" data-throw-if-not-resolved="False"/>
  syntax: public DataT data()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.data()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.hasChildren()
  name: hasChildren()
  nameWithType: Node<DataT,NodeT,NodeT>.hasChildren()
  returns:
    description: >-
      <p>

        <code>true</code> if this node has any children </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hasChildren()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.key()
  name: key()
  nameWithType: Node<DataT,NodeT,NodeT>.key()
  returns:
    description: <p>this node's unique id </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String key()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.key()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.owner()
  name: owner()
  nameWithType: Node<DataT,NodeT,NodeT>.owner()
  returns:
    description: <p>the owner (container) graph of this node. </p>
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.dag.Graph?alt=com.microsoft.azure.management.resources.fluentcore.dag.Graph&text=Graph" data-throw-if-not-resolved="False"/>&lt;DataT, NodeT&gt;
  syntax: public Graph<DataT, NodeT> owner()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT, NodeT extends Node<DataT, NodeT>.setOwner(Graph<DataT, NodeT> ownerGraph)
  name: setOwner(Graph<DataT, NodeT> ownerGraph)
  nameWithType: Node<DataT,NodeT,NodeT>.setOwner(Graph<DataT, NodeT> ownerGraph)
  parameters:
  - description: <p>the owning graph </p>
    name: ownerGraph
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.dag.Graph?alt=com.microsoft.azure.management.resources.fluentcore.dag.Graph&text=Graph" data-throw-if-not-resolved="False"/>&lt;DataT, NodeT&gt;
  summary: >-
    <p>Sets reference to the graph owning this node.</p>

    <p></p>
  syntax: public void setOwner(Graph<DataT, NodeT> ownerGraph)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(Graph<DataT, NodeT>)
nameWithType: Node<DataT,NodeT,NodeT>
syntax: public class Node<DataT,NodeT extends Node<DataT,NodeT>>
type: class
typeParameters:
- description: <p>the type of the data stored in the node </p>
  name: DataT
- description: <p>the type of the node </p>
  name: NodeT
- description: <p>the type of the node </p>
  name: NodeT
uid: com.microsoft.azure.management.resources.fluentcore.dag.Node
fullName: com.microsoft.azure.management.resources.fluentcore.dag.Node<DataT,NodeT,NodeT>
name: Node<DataT,NodeT,NodeT>
package: com.microsoft.azure.management.resources.fluentcore.dag
summary: >-
  <p>Type represents a node in a <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.Graph" data-throw-if-not-resolved="false" data-raw-source="Graph"></xref>.</p>

  <p></p>
metadata: {}
