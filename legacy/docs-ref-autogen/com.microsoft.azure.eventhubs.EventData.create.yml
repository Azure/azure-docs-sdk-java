### YamlMime:JavaMember
nameWithType: EventData.create
type: method
members:
- fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data)
  name: create(final byte[] data)
  nameWithType: EventData.create(final byte[] data)
  parameters:
  - description: <p>the actual payload of data in bytes to be Sent to EventHubs. </p>
    name: data
    type: <xref href="final+byte+%5B%5D?alt=final byte []&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>

    i.	Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii.	If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> for the Consumer.

    </pre></p>

    <p>Sample Code: <pre>

    EventData eventData = EventData.create(telemetryEventBytes);

    eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

    partitionSender.Send(eventData);

    </pre></p>

    <p></p>
  syntax: public static EventData create(final byte[] data)
  uid: com.microsoft.azure.eventhubs.EventData.create(final byte [])
- fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data, final int offset, final int length)
  name: create(final byte[] data, final int offset, final int length)
  nameWithType: EventData.create(final byte[] data, final int offset, final int length)
  parameters:
  - description: <p>the byte[] where the payload of the Event to be sent to EventHubs is present </p>
    name: data
    type: <xref href="final+byte+%5B%5D?alt=final byte []&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Offset in the byte[] to read from ; inclusive index </p>
    name: offset
    type: <xref href="final+int?alt=final int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>length of the byte[] to be read, starting from offset </p>
    name: length
    type: <xref href="final+int?alt=final int&text=final+int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>

    i.	Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii.	If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> for the Consumer.

     </pre></p>

    <p>Illustration: <pre><code>EventData eventData = EventData.create(telemetryEventBytes, offset, length);

        eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

        partitionSender.Send(eventData);

        </code></pre></p>

    <p></p>
  syntax: public static EventData create(final byte[] data, final int offset, final int length)
  uid: com.microsoft.azure.eventhubs.EventData.create(final byte [],final int,final int)
- fullName: com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer buffer)
  name: create(final ByteBuffer buffer)
  nameWithType: EventData.create(final ByteBuffer buffer)
  parameters:
  - description: <p>ByteBuffer which references the payload of the Event to be sent to EventHubs </p>
    name: buffer
    type: <xref href="final+ByteBuffer?alt=final ByteBuffer&text=final+ByteBuffer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>

    i.	Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii.	If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false">getProperties()</xref> for the Consumer.

     </pre></p>

    <p>Illustration: <pre><code>EventData eventData = EventData.create(telemetryEventByteBuffer);

        eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

           partitionSender.Send(eventData);

        </code></pre></p>

    <p></p>
  syntax: public static EventData create(final ByteBuffer buffer)
  uid: com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer)
uid: com.microsoft.azure.eventhubs.EventData.create*
fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data)
name: create(final byte[] data)
package: com.microsoft.azure.eventhubs
metadata: {}
