### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection()
  name: TwinCollection()
  nameWithType: TwinCollection.TwinCollection()
  summary: >-
    <p>Constructor</p>

    <p>Creates an empty collection. Fill it with <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.put(String,Object)" data-throw-if-not-resolved="false" data-raw-source="put(String, Object)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="putAll(Map)"></xref>. </p>
  syntax: public TwinCollection()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection(Map<? extends String, Object> map)
  name: TwinCollection(Map<? extends String, Object> map)
  nameWithType: TwinCollection.TwinCollection(Map<? extends String, Object> map)
  parameters:
  - description: >-
      <p>the Map of<code>? extends String 

          </code> and<code>Object 

          </code> with the Twin collection </p>
    name: map
    type: <xref href="Map%3C%3F+extends+String%2C+Object%3E?alt=Map%3C%3F+extends+String%2C+Object%3E&text=Map%3C%3F+extends+String%2C+Object%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructor</p>

    <p>Creates a new Twin collection coping the provided Map. Once TwinCollection extends Map, this method can copy another TwinCollection.</p>

    <p></p>
  syntax: public TwinCollection(Map<? extends String, Object> map)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.TwinCollection(Map<? extends String, Object>)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="java.util.HashMap&lt;String, Object&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.provisioning.service.configs.Serializable.toJson()
- com.microsoft.azure.sdk.iot.provisioning.service.configs.Serializable.toString()
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata()
  name: getTwinMetadata()
  nameWithType: TwinCollection.getTwinMetadata()
  returns:
    description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TwinMetadata"></xref> of the Whole TwinCollection. It can be<code>null 

          </code> . </p>
    type: <xref href="TwinMetadata?alt=TwinMetadata&text=TwinMetadata" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the TwinCollection metadata</p>

    <p></p>
  syntax: public TwinMetadata getTwinMetadata()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata(String key)
  name: getTwinMetadata(String key)
  nameWithType: TwinCollection.getTwinMetadata(String key)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with the name of the entry to retrieve the metadata. </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TwinMetadata"></xref> ot the specific entry in the TwinCollection. It can be<code>null 

          </code> . </p>
    type: <xref href="TwinMetadata?alt=TwinMetadata&text=TwinMetadata" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the entry metadata in the TwinCollection.</p>

    <p></p>
  syntax: public TwinMetadata getTwinMetadata(String key)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getTwinMetadata(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getVersion()
  name: getVersion()
  nameWithType: TwinCollection.getVersion()
  returns:
    description: >-
      <p>The<code>Integer 

          </code> with the version content. It can be<code>null 

          </code> . </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the version.</p>

    <p></p>
  syntax: public Integer getVersion()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.getVersion()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.put(String key, Object value)
  name: put(String key, Object value)
  nameWithType: TwinCollection.put(String key, Object value)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> that represent the key of the new entry. It cannot be {code null} or empty. </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>Object 

          </code> that represents the value of the new entry. It cannot be user defined type or array. </p>
    name: value
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>The<code>Object 

          </code> that correspond to the last value of this key. It will be<code>null 

          </code> if there is no previous value. </p>
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add a single new entry in the TwinCollection.</p>

    <p>Override<code>HashMap.put(String, Object) 

        </code> .</p>

    <p>This function will add a single pair key value to the TwinCollection. By the Twin definition, the<code>Object 

        </code> can contain types of<code>Boolean 

        </code> , <code>Number 

        </code> ,<code>String 

        </code> ,<code>Object 

        </code> , or up to 5 levels of sub-TwinCollection, but it cannot be types defined by the user or arrays.</p>

    <p></p>
  syntax: public Object put(String key, Object value)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.put(String,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.putAll(Map<? extends String, ?> map)
  name: putAll(Map<? extends String, ?> map)
  nameWithType: TwinCollection.putAll(Map<? extends String, ?> map)
  parameters:
  - description: >-
      <p>A<code>Map 

          </code> of entries to add to the TwinCollection. </p>
    name: map
    type: <xref href="Map%3C%3F+extends+String%2C+%3F%3E?alt=Map%3C%3F+extends+String%2C+%3F%3E&text=Map%3C%3F+extends+String%2C+%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add all information in the provided Map to the TwinCollection.</p>

    <p>Override<code>HashMap.putAll(Map) 

        </code> .</p>

    <p>This function will add all entries in the Map to the TwinCollection. If the provided key already exists, it will replace the value by the new one. This function will not delete or change the content of the other keys in the Map.</p>

    <p>As defined by the Twin, the value of a entry can be an inner Map. TwinCollection will accept up to 5 levels of inner Maps.</p>

    <p></p>
  syntax: public void putAll(Map<? extends String, ?> map)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.putAll(Map<? extends String, ?>)
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.toJsonElement()
  name: toJsonElement()
  nameWithType: TwinCollection.toJsonElement()
  returns:
    description: >-
      <p>The<code>JsonElement 

          </code> with the content of this class. </p>
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Serializer</p>

    <p>Creates a<code>JsonElement 

        </code> , which the content represents the information in this class and its subclasses in a JSON format.</p>

    <p>This is useful if the caller will integrate this JSON with JSON from other classes to generate a consolidated JSON.</p>

    <p></p>
  syntax: public JsonElement toJsonElement()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection.toJsonElement()
nameWithType: TwinCollection
syntax: public class TwinCollection extends Serializable
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.TwinCollection
name: TwinCollection
package: com.microsoft.azure.sdk.iot.provisioning.service.configs
summary: "<p>Representation of a single Twin collection for Provisioning.</p>\r\n<p>The TwinCollection is an extension of a<code>HashMap \r\n    </code> of<code>String \r\n    </code> and <code>Object \r\n    </code> that contain individual and general versioning mechanism.</p>\r\n<p>By the Twin definition, the<code>Object \r\n    </code> can contain types of<code>Boolean \r\n    </code> , <code>Number \r\n    </code> ,<code>String \r\n    </code> ,<code>Object \r\n    </code> , or a sub-TwinCollection, but it cannot be types defined by the user or arrays.</p>\r\n<p>A TwinCollection can contain up to 5 levels of sub TwinCollections. Once the TwinCollection is a extension of the<code>HashMap \r\n    </code> , both TwinCollection as well as its sub-TwinCollections can be casted to Map of String and Object.</p>\r\n<p>The collection will be represented in the rest API as a JSON in the body. It can or cannot contain the metadata (identified by the <b>$</b> character at the beginning of the key.</p>\r\n<p>Because of the Twin metadata, the character <b>$</b> is not allowed in the entry key.</p>\r\n<p>For instance, the following JSON is a valid TwinCollection with its metadata. <pre><code>{\r\n        \"Color\":\"White\",\r\n        \"MaxSpeed\":{\r\n            \"Value\":500,\r\n            \"NewValue\":300\r\n        },\r\n        \"$metadata\":{\r\n            \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\r\n            \"$lastUpdatedVersion\":4,\r\n            \"Color\":{\r\n                \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\r\n                \"$lastUpdatedVersion\":4,\r\n            },\r\n            \"MaxSpeed\":{\r\n                \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\r\n                \"$lastUpdatedVersion\":4,\r\n                \"Value\":{\r\n                    \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\r\n                    \"$lastUpdatedVersion\":4\r\n                },\r\n                \"NewValue\":{\r\n                    \"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\r\n                    \"$lastUpdatedVersion\":4\r\n                }\r\n            }\r\n        },\r\n        \"$version\":4\r\n    }\r\n    </code></pre></p>\r\n<p>This class exposes the Twin collection with or without metadata as a Map here user can gat both the value and the metadata. For instance, in the above TwinCollection, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"get(Object)\"></xref> for <b>Color</b> will return <b>White</b> and getTwinMetadata(String) for <b>Color</b> will return the Object TwinMetadata and TwinMetadata.getLastUpdated() that will returns the<code>Date \r\n    </code><b>2017-09-21T02:07:44.238Z</b> and TwinMetadata.getLastUpdatedVersion() that will returns the<code>Integer \r\n    </code><b>4</b>.</p>\r\n<p>For the nested TwinCollection, you can do the same, for instance, the following code will return the value and metadata of the <b>NewValue</b> nested in <b>MaxSpeed</b>: <pre><code>// Get the value of the MaxSpeed, which is a inner TwinCollection.\r\n    TwinCollection innerMaxSpeed = (TwinCollection) twinCollection.get(\"MaxSpeed\");\r\n    \r\n    // From the inner TwinCollection, get the value of the NewValue.\r\n    Long maxSpeedNewValue = innerMaxSpeed.get(\"NewValue\");\r\n    \r\n    // As in the root TwinCollection, the inner TwinCollection contain its own metadata.\r\n    // So, get the metadata information for the inner NewValue.\r\n    TwinMetadata maxSpeedNewValueMetadata = innerMaxSpeed.getTwinMetadata(\"NewValue\");\r\n    Date newValueLastUpdated = maxSpeedNewValueMetadata.getLastUpdated(); //Shall contain `2017-09-21T02:07:44.238Z`\r\n    Integer newValueLastUpdatedVersion = maxSpeedNewValueMetadata.getLastUpdatedVersion(); //Shall contain `4`\r\n    </code></pre></p>\r\n<p></p>"
metadata: {}
