### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult.QueryResult()
  name: QueryResult()
  nameWithType: QueryResult.QueryResult()
  summary: >-
    <p>Empty constructor</p>

    <p>Used only by the tools that will deserialize this class. </p>
  syntax: protected QueryResult()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult.QueryResult()
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult.QueryResult(String type, String body, String continuationToken)
  name: QueryResult(String type, String body, String continuationToken)
  nameWithType: QueryResult.QueryResult(String type, String body, String continuationToken)
  parameters:
  - description: >-
      <p>the<code>String 

          </code> with type of the content in the body. It cannot be<code>null 

          </code></p>
    name: type
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the body in a JSON list format. It cannot be<code>null 

          </code> , or empty, if the type is different than `unknown`. </p>
    name: body
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the<code>String 

          </code> with the continuation token. It can be<code>null 

          </code> . </p>
    name: continuationToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If one of the provided parameters is invalid. </p>
  summary: >-
    <p>CONSTRUCTOR</p>

    <p>This constructor creates an instance of the QueryResult.</p>

    <p></p>
  syntax: public QueryResult(String type, String body, String continuationToken)
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult.QueryResult(String,String,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult.toString()
  name: toString()
  nameWithType: QueryResult.toString()
  returns:
    description: >-
      <p>The<code>String 

          </code> with the pretty print JSON. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a pretty print JSON with the content of this class and subclasses.</p>

    <p>The result of this function is <b>not</b> a valid JSON for the provisioning service, it is just to provide a way to print its content.</p>

    <p></p>
  syntax: public String toString()
  uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult.toString()
nameWithType: QueryResult
syntax: public class QueryResult
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult
fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResult
name: QueryResult
package: com.microsoft.azure.sdk.iot.provisioning.service.configs
summary: >-
  <p>Representation of a single Device Provisioning Service query response with a JSON deserializer.</p>

  <p>It is the result of any query for the provisioning service. This class will parse the result and return it in a best format possible. For the known formats in <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResultType" data-throw-if-not-resolved="false" data-raw-source="QueryResultType"></xref>, you can just cast the items. In case of <b>unknown</b> type, the items will contain a list of<code>Strings 

      </code> and you shall parse it by your own.</p>

  <p>The system properties are: <variablelist><varlistentry><b>type:</b></varlistentry><li><p>Identify the type of the content in the body. You can use it to cast the objects in the items list. See <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.QueryResultType" data-throw-if-not-resolved="false" data-raw-source="QueryResultType"></xref> for the possible types and classes to cast. </p></li><varlistentry><b>continuationToken:</b></varlistentry><li><p>Contains the token the uniquely identify the next page of information. The service will return the next page of this query when you send a new query with this token, </p></li></variablelist></p>

  <p>And the body is a JSON list of the specific <b>type</b>. For instance, if the system property type is IndividualEnrollment, the body will look like: <pre><code>[

          {

              "registrationId":"validRegistrationId-1",

              "deviceId":"ContosoDevice-1",

              "attestation":{

                  "type":"tpm",

                  "tpm":{

                      "endorsementKey":"validEndorsementKey"

                  }

              },

              "iotHubHostName":"ContosoIoTHub.azure-devices.net",

              "provisioningStatus":"enabled"

          },

          {

              "registrationId":"validRegistrationId-2",

              "deviceId":"ContosoDevice-2",

              "attestation":{

                  "type":"tpm",

                 "tpm":{

                      "endorsementKey":"validEndorsementKey"

                  }

              },

              "iotHubHostName":"ContosoIoTHub.azure-devices.net",

              "provisioningStatus":"enabled"

          }

      ]

      </code></pre></p>

  <p></p>
metadata: {}
