### YamlMime:JavaType
constructors:
- system.fabric.Epoch.Epoch(long,long)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Serializable" data-throw-if-not-resolved="False"/>
methods:
- system.fabric.Epoch.compareTo(Epoch)
- system.fabric.Epoch.equals(Object)
- system.fabric.Epoch.getConfigurationNumber()
- system.fabric.Epoch.getDataLossNumber()
- system.fabric.Epoch.hashCode()
- system.fabric.Epoch.setConfigurationNumber(long)
- system.fabric.Epoch.setDataLossNumber(long)
nameWithType: Epoch
syntax: public class Epoch
type: class
uid: system.fabric.Epoch
fullName: system.fabric.Epoch
name: Epoch
package: system.fabric
summary: >-
  <p>Represents the current version of the partition in Service Fabric. </p>

  <p>

    <b>Remarks:</b>An Epoch is a configuration number for the partition as a whole. When the configuration of the replica set changes, for example when the Primary replica changes, the operations that are replicated from the new Primary replica are said to be a new Epoch from the ones which were sent by the old Primary replica. The fact that the Primary has changed is not directly visible to Secondary replicas, which are usually unaffected by the failure that affected the original Primary replica. To track that the Primary replica has changed has to be communicated to the Secondary replica. This communication occurs via the <xref uid="system.fabric.StateProvider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false">system.fabric.StateProvider#updateEpochAsync(system.fabric.Epoch, system.fabric.SequenceNumber, system.fabric.CancellationToken)</xref> method. Most services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed and to compare Epochs to determine relative ordering of operations and events in the system. Comparison operations are provided for this purpose. </p>
metadata: {}
