### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
methods:
- fullName: com.microsoft.azure.management.servicebus.AuthorizationRule<RuleT extends AuthorizationRule<RuleT>.getKeys()
  name: getKeys()
  nameWithType: AuthorizationRule<RuleT>.getKeys()
  returns:
    description: <p>the primary, secondary keys and connection strings </p>
    type: <xref href="com.microsoft.azure.management.servicebus.AuthorizationKeys?alt=com.microsoft.azure.management.servicebus.AuthorizationKeys&text=AuthorizationKeys" data-throw-if-not-resolved="False"/>
  syntax: public AuthorizationKeys getKeys()
  uid: com.microsoft.azure.management.servicebus.AuthorizationRule.getKeys()
- fullName: com.microsoft.azure.management.servicebus.AuthorizationRule<RuleT extends AuthorizationRule<RuleT>.getKeysAsync()
  name: getKeysAsync()
  nameWithType: AuthorizationRule<RuleT>.getKeysAsync()
  returns:
    description: <p>a representation of the deferred computation of this call, returning the primary, secondary keys and the connection strings </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.servicebus.AuthorizationKeys?alt=com.microsoft.azure.management.servicebus.AuthorizationKeys&text=AuthorizationKeys" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<AuthorizationKeys> getKeysAsync()
  uid: com.microsoft.azure.management.servicebus.AuthorizationRule.getKeysAsync()
- fullName: com.microsoft.azure.management.servicebus.AuthorizationRule<RuleT extends AuthorizationRule<RuleT>.regenerateKey(Policykey policykey)
  name: regenerateKey(Policykey policykey)
  nameWithType: AuthorizationRule<RuleT>.regenerateKey(Policykey policykey)
  parameters:
  - description: <p>the key to regenerate </p>
    name: policykey
    type: <xref href="com.microsoft.azure.management.servicebus.Policykey?alt=com.microsoft.azure.management.servicebus.Policykey&text=Policykey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>primary, secondary keys and connection strings </p>
    type: <xref href="com.microsoft.azure.management.servicebus.AuthorizationKeys?alt=com.microsoft.azure.management.servicebus.AuthorizationKeys&text=AuthorizationKeys" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates primary or secondary keys.</p>

    <p></p>
  syntax: public AuthorizationKeys regenerateKey(Policykey policykey)
  uid: com.microsoft.azure.management.servicebus.AuthorizationRule.regenerateKey(Policykey)
- fullName: com.microsoft.azure.management.servicebus.AuthorizationRule<RuleT extends AuthorizationRule<RuleT>.regenerateKeyAsync(Policykey policykey)
  name: regenerateKeyAsync(Policykey policykey)
  nameWithType: AuthorizationRule<RuleT>.regenerateKeyAsync(Policykey policykey)
  parameters:
  - description: <p>the key to regenerate </p>
    name: policykey
    type: <xref href="com.microsoft.azure.management.servicebus.Policykey?alt=com.microsoft.azure.management.servicebus.Policykey&text=Policykey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call, returning the primary, secondary keys and the connection strings </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.servicebus.AuthorizationKeys?alt=com.microsoft.azure.management.servicebus.AuthorizationKeys&text=AuthorizationKeys" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates primary or secondary keys.</p>

    <p></p>
  syntax: public Observable<AuthorizationKeys> regenerateKeyAsync(Policykey policykey)
  uid: com.microsoft.azure.management.servicebus.AuthorizationRule.regenerateKeyAsync(Policykey)
- fullName: com.microsoft.azure.management.servicebus.AuthorizationRule<RuleT extends AuthorizationRule<RuleT>.rights()
  name: rights()
  nameWithType: AuthorizationRule<RuleT>.rights()
  returns:
    description: <p>rights associated with the rule </p>
    type: List&lt;<xref href="com.microsoft.azure.management.servicebus.AccessRights?alt=com.microsoft.azure.management.servicebus.AccessRights&text=AccessRights" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<AccessRights> rights()
  uid: com.microsoft.azure.management.servicebus.AuthorizationRule.rights()
nameWithType: AuthorizationRule<RuleT>
syntax: public interface AuthorizationRule<RuleT extends AuthorizationRule<RuleT>> extends IndependentChildResource<ServiceBusManager, SharedAccessAuthorizationRuleInner>,Refreshable<RuleT>
type: interface
typeParameters:
- description: <p>the specific rule type </p>
  name: RuleT
uid: com.microsoft.azure.management.servicebus.AuthorizationRule
fullName: com.microsoft.azure.management.servicebus.AuthorizationRule<RuleT>
name: AuthorizationRule<RuleT>
package: com.microsoft.azure.management.servicebus
summary: >-
  <p>Type representing authorization rule.</p>

  <p></p>
metadata: {}
