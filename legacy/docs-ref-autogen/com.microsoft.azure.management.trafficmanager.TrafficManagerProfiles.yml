### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIds(Collection<String>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIds(String...)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIdsAsync(Collection<String>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIdsAsync(String...)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.checkDnsNameAvailability(String dnsNameLabel)
  name: checkDnsNameAvailability(String dnsNameLabel)
  nameWithType: TrafficManagerProfiles.checkDnsNameAvailability(String dnsNameLabel)
  parameters:
  - description: <p>the DNS name to check </p>
    name: dnsNameLabel
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>whether the DNS is available to be used for a traffic manager profile and other info if not </p>
    type: <xref href="com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult?alt=com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult&text=CheckProfileDnsNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks that the DNS name is valid for traffic manager profile and is not in use.</p>

    <p></p>
  syntax: public CheckProfileDnsNameAvailabilityResult checkDnsNameAvailability(String dnsNameLabel)
  uid: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.checkDnsNameAvailability(String)
- fullName: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.checkDnsNameAvailabilityAsync(String dnsNameLabel)
  name: checkDnsNameAvailabilityAsync(String dnsNameLabel)
  nameWithType: TrafficManagerProfiles.checkDnsNameAvailabilityAsync(String dnsNameLabel)
  parameters:
  - description: <p>the DNS name to check </p>
    name: dnsNameLabel
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call, returning whether the DNS is available to be used for a traffic manager profile and other info if not </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult?alt=com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult&text=CheckProfileDnsNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously checks that the DNS name is valid for traffic manager profile and is not in use.</p>

    <p></p>
  syntax: public Observable<CheckProfileDnsNameAvailabilityResult> checkDnsNameAvailabilityAsync(String dnsNameLabel)
  uid: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.checkDnsNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.checkDnsNameAvailabilityAsync(String dnsNameLabel, ServiceCallback<CheckProfileDnsNameAvailabilityResult> callback)
  name: checkDnsNameAvailabilityAsync(String dnsNameLabel, ServiceCallback<CheckProfileDnsNameAvailabilityResult> callback)
  nameWithType: TrafficManagerProfiles.checkDnsNameAvailabilityAsync(String dnsNameLabel, ServiceCallback<CheckProfileDnsNameAvailabilityResult> callback)
  parameters:
  - description: <p>the DNS name to check </p>
    name: dnsNameLabel
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure, on success with the result whether the DNS is available to be used for a traffic manager profile and other info if not</p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult?alt=com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult&text=CheckProfileDnsNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult?alt=com.microsoft.azure.management.trafficmanager.CheckProfileDnsNameAvailabilityResult&text=CheckProfileDnsNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously checks that the DNS name is valid for traffic manager profile and is not in use.</p>

    <p></p>
  syntax: public ServiceFuture<CheckProfileDnsNameAvailabilityResult> checkDnsNameAvailabilityAsync(String dnsNameLabel, ServiceCallback<CheckProfileDnsNameAvailabilityResult> callback)
  uid: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.checkDnsNameAvailabilityAsync(String,ServiceCallback<CheckProfileDnsNameAvailabilityResult>)
- fullName: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.getGeographicHierarchyRoot()
  name: getGeographicHierarchyRoot()
  nameWithType: TrafficManagerProfiles.getGeographicHierarchyRoot()
  returns:
    description: <p>the default geographic hierarchy used by the Geographic traffic routing method. </p>
    type: <xref href="com.microsoft.azure.management.trafficmanager.GeographicLocation?alt=com.microsoft.azure.management.trafficmanager.GeographicLocation&text=GeographicLocation" data-throw-if-not-resolved="False"/>
  syntax: public GeographicLocation getGeographicHierarchyRoot()
  uid: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles.getGeographicHierarchyRoot()
nameWithType: TrafficManagerProfiles
syntax: public interface TrafficManagerProfiles extends SupportsCreating<TrafficManagerProfile.DefinitionStages.Blank>,SupportsListing<TrafficManagerProfile>,SupportsListingByResourceGroup<TrafficManagerProfile>,SupportsGettingByResourceGroup<TrafficManagerProfile>,SupportsGettingById<TrafficManagerProfile>,SupportsDeletingById,SupportsDeletingByResourceGroup,SupportsBatchCreation<TrafficManagerProfile>,SupportsBatchDeletion,HasManager<TrafficManager>,HasInner<ProfilesInner>
type: interface
uid: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles
fullName: com.microsoft.azure.management.trafficmanager.TrafficManagerProfiles
name: TrafficManagerProfiles
package: com.microsoft.azure.management.trafficmanager
summary: <p>Entry point to traffic manager profile management API in Azure. </p>
metadata: {}
