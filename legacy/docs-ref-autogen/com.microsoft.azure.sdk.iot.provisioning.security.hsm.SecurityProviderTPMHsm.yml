### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.SecurityProviderTPMHsm()
  name: SecurityProviderTPMHsm()
  nameWithType: SecurityProviderTPMHsm.SecurityProviderTPMHsm()
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If the constructor could not start the TPM </p>
  summary: <p>Constructor for creating a Security Provider on TPM hardware </p>
  syntax: public SecurityProviderTPMHsm()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.SecurityProviderTPMHsm()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.SecurityProviderTPMHsm(String registrationId)
  name: SecurityProviderTPMHsm(String registrationId)
  nameWithType: SecurityProviderTPMHsm.SecurityProviderTPMHsm(String registrationId)
  parameters:
  - description: >-
      <p>A non<code>null 

          </code> or empty value tied to this registration </p>
    name: registrationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If the constructor could not start the TPM </p>
  summary: <p>Constructor for creating a Security Provider on TPM hardware with the supplied Registration ID </p>
  syntax: public SecurityProviderTPMHsm(String registrationId)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.SecurityProviderTPMHsm(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderTpm?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProviderTpm&text=SecurityProviderTpm" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider.getSSLContext()
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.activateIdentityKey(byte[] key)
  name: activateIdentityKey(byte[] key)
  nameWithType: SecurityProviderTPMHsm.activateIdentityKey(byte[] key)
  parameters:
  - description: <p>Key for activating the TPM </p>
    name: key
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If activation was not successful. </p>
  returns:
    description: >-
      <p>

        <code>null 

          </code> value is returned. Place holder for eventual returns. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Activates the Identity with the nonce provided from the service </p>
  syntax: public byte [] activateIdentityKey(byte[] key)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.activateIdentityKey(byte [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.getEndorsementKey()
  name: getEndorsementKey()
  nameWithType: SecurityProviderTPMHsm.getEndorsementKey()
  returns:
    description: <p>The Endorsement Key from TPM </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for extracting EndorsementKey from TPM </p>
  syntax: public byte [] getEndorsementKey()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.getEndorsementKey()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.getRegistrationId()
  name: getRegistrationId()
  nameWithType: SecurityProviderTPMHsm.getRegistrationId()
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If registration ID could not be extracted </p>
  returns:
    description: <p>The registration ID tied to this registration instance </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for the Registration ID if it was provided. Default is returned otherwise. </p>
  syntax: public String getRegistrationId()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.getRegistrationId()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.getStorageRootKey()
  name: getStorageRootKey()
  nameWithType: SecurityProviderTPMHsm.getStorageRootKey()
  returns:
    description: <p>The StorageRootKey from TPM </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for extracting StorageRootKey from TPM </p>
  syntax: public byte [] getStorageRootKey()
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.getStorageRootKey()
- fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.signWithIdentity(byte[] deviceIdData)
  name: signWithIdentity(byte[] deviceIdData)
  nameWithType: SecurityProviderTPMHsm.signWithIdentity(byte[] deviceIdData)
  parameters:
  - description: >-
      <p>A non<code>null 

          </code> or empty value for the device ID </p>
    name: deviceIdData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="SecurityProviderException?alt=SecurityProviderException&text=SecurityProviderException" data-throw-if-not-resolved="False"/>
    description: <p>If signing was not successful </p>
  returns:
    description: <p>The signature after signing data. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>This method signs the TPM with the provided device ID </p>
  syntax: public byte [] signWithIdentity(byte[] deviceIdData)
  uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm.signWithIdentity(byte [])
nameWithType: SecurityProviderTPMHsm
syntax: public class SecurityProviderTPMHsm extends SecurityProviderTpm
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm
fullName: com.microsoft.azure.sdk.iot.provisioning.security.hsm.SecurityProviderTPMHsm
name: SecurityProviderTPMHsm
package: com.microsoft.azure.sdk.iot.provisioning.security.hsm
metadata: {}
