### YamlMime:JavaType
uid: "com.azure.maps.elevation.ElevationAsyncClient"
fullName: "com.azure.maps.elevation.ElevationAsyncClient"
name: "ElevationAsyncClient"
nameWithType: "ElevationAsyncClient"
summary: "Initializes a new instance of the asynchronous Elevation<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ElevationAsyncClient**"
methods:
- uid: "com.azure.maps.elevation.ElevationAsyncClient.getDataForBoundingBox(com.azure.core.models.GeoBoundingBox,java.lang.Integer,java.lang.Integer)"
  fullName: "com.azure.maps.elevation.ElevationAsyncClient.getDataForBoundingBox(GeoBoundingBox bounds, Integer rows, Integer columns)"
  name: "getDataForBoundingBox(GeoBoundingBox bounds, Integer rows, Integer columns)"
  nameWithType: "ElevationAsyncClient.getDataForBoundingBox(GeoBoundingBox bounds, Integer rows, Integer columns)"
  summary: "Get Data For Bounding Box"
  parameters:
  - description: "The string that represents the rectangular area of a bounding box. The bounds parameter is defined\n     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by\n     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:\n     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`."
    name: "bounds"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the number of rows to use to divide the bounding box area into a grid. The number of\n     vertices (rows x columns) in the grid should be less than 2,000."
    name: "rows"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Specifies the number of columns to use to divide the bounding box area into a grid. The number of\n     vertices (rows x columns) in the grid should be less than 2,000."
    name: "columns"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public Mono<ElevationResult> getDataForBoundingBox(GeoBoundingBox bounds, Integer rows, Integer columns)"
  desc: "Get Data For Bounding Box\n\n```java\nasyncClient.getDataForBoundingBox(new GeoBoundingBox(-121.668533621438f, 46.8464647986371f,\n     -121.658533621438f, 46.8564647986371f), 3, 3);\n```\n\n\\*\\*Applies to\\*\\*: S1 pricing tier.\n\nThe Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided into rows and columns.\n\nElevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner, and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and repeats the process until it reaches the far northeast corner."
  returns:
    description: "the response from a successful Get Data for Bounding Box API."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.elevation.models.ElevationResult?alt=com.azure.maps.elevation.models.ElevationResult&text=ElevationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.elevation.ElevationAsyncClient.getDataForBoundingBoxWithResponse(com.azure.core.models.GeoBoundingBox,java.lang.Integer,java.lang.Integer)"
  fullName: "com.azure.maps.elevation.ElevationAsyncClient.getDataForBoundingBoxWithResponse(GeoBoundingBox bounds, Integer rows, Integer columns)"
  name: "getDataForBoundingBoxWithResponse(GeoBoundingBox bounds, Integer rows, Integer columns)"
  nameWithType: "ElevationAsyncClient.getDataForBoundingBoxWithResponse(GeoBoundingBox bounds, Integer rows, Integer columns)"
  summary: "Get Data For Bounding Box"
  parameters:
  - description: "The string that represents the rectangular area of a bounding box. The bounds parameter is defined\n     by the 4 bounding box coordinates, with WGS84 longitude and latitude of the southwest corner followed by\n     WGS84 longitude and latitude of the northeast corner. The string is presented in the following format:\n     `[SouthwestCorner_Longitude, SouthwestCorner_Latitude, NortheastCorner_Longitude, NortheastCorner_Latitude]`."
    name: "bounds"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies the number of rows to use to divide the bounding box area into a grid. The number of\n     vertices (rows x columns) in the grid should be less than 2,000."
    name: "rows"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Specifies the number of columns to use to divide the bounding box area into a grid. The number of\n     vertices (rows x columns) in the grid should be less than 2,000."
    name: "columns"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public Mono<Response<ElevationResult>> getDataForBoundingBoxWithResponse(GeoBoundingBox bounds, Integer rows, Integer columns)"
  desc: "Get Data For Bounding Box\n\n```java\nasyncClient.getDataForBoundingBox(new GeoBoundingBox(-121.668533621438f, 46.8464647986371f,\n     -121.658533621438f, 46.8564647986371f), 3, 3);\n```\n\n\\*\\*Applies to\\*\\*: S1 pricing tier.\n\nThe Get Data for Bounding Box API provides elevation data at equally spaced locations within a bounding box. A bounding box is defined by the coordinates for two corners (southwest, northeast) and then subsequently divided into rows and columns.\n\nElevations are returned for the vertices of the grid created by the rows and columns. Up to 2,000 elevations can be returned in a single request. The returned elevation values are ordered, starting at the southwest corner, and then proceeding west to east along the row. At the end of the row, it moves north to the next row, and repeats the process until it reaches the far northeast corner."
  returns:
    description: "the response from a successful Get Data for Bounding Box API."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.elevation.models.ElevationResult?alt=com.azure.maps.elevation.models.ElevationResult&text=ElevationResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPoints(java.util.List<com.azure.core.models.GeoPosition>)"
  fullName: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPoints(List<GeoPosition> points)"
  name: "getDataForPoints(List<GeoPosition> points)"
  nameWithType: "ElevationAsyncClient.getDataForPoints(List<GeoPosition> points)"
  summary: "Get Data For Points"
  parameters:
  - description: "The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate\n     reference system format. If multiple points are requested, each of the points in a list should be separated\n     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.\n     The resolution of the elevation data will be the highest for a single point and will decrease if multiple\n     points are spread further apart."
    name: "points"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<ElevationResult> getDataForPoints(List<GeoPosition> points)"
  desc: "Get Data For Points\n\n```java\nasyncClient.getDataForPoints(Arrays.asList(\n     new GeoPosition(-121.66853362143818, 46.84646479863713),\n     new GeoPosition(-121.68853362143818, 46.856464798637127)));\n```\n\n\\*\\*Applies to\\*\\*: S1 pricing tier.\n\nThe Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long coordinate format.\n\nDue to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline delimited string, use the \\[POST Data For Points\\](https://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints).\n\nThe result will be in the same sequence of points listed in the request."
  returns:
    description: "the response from a successful Get Data for Bounding Box API."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.elevation.models.ElevationResult?alt=com.azure.maps.elevation.models.ElevationResult&text=ElevationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPointsWithResponse(java.util.List<com.azure.core.models.GeoPosition>)"
  fullName: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPointsWithResponse(List<GeoPosition> points)"
  name: "getDataForPointsWithResponse(List<GeoPosition> points)"
  nameWithType: "ElevationAsyncClient.getDataForPointsWithResponse(List<GeoPosition> points)"
  summary: "Get Data For Points"
  parameters:
  - description: "The string representation of a list of points. A point is defined in lon/lat WGS84 coordinate\n     reference system format. If multiple points are requested, each of the points in a list should be separated\n     by the pipe ('|') character. The maximum number of points that can be requested in a single request is 2,000.\n     The resolution of the elevation data will be the highest for a single point and will decrease if multiple\n     points are spread further apart."
    name: "points"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<ElevationResult>> getDataForPointsWithResponse(List<GeoPosition> points)"
  desc: "Get Data For Points\n\n```java\nasyncClient.getDataForPoints(Arrays.asList(\n     new GeoPosition(-121.66853362143818, 46.84646479863713),\n     new GeoPosition(-121.68853362143818, 46.856464798637127)));\n```\n\n\\*\\*Applies to\\*\\*: S1 pricing tier.\n\nThe Get Data for Points API provides elevation data for one or more points. A point is defined in lat,long coordinate format.\n\nDue to the URL character length limit of 2048, it's not possible to pass more than 100 coordinates as a pipeline delimited string in a URL GET request. If you intend to pass more than 100 coordinates as a pipeline delimited string, use the \\[POST Data For Points\\](https://docs.microsoft.com/rest/api/maps/elevation/postdataforpoints).\n\nThe result will be in the same sequence of points listed in the request."
  returns:
    description: "the response from a successful Get Data for Bounding Box API."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.elevation.models.ElevationResult?alt=com.azure.maps.elevation.models.ElevationResult&text=ElevationResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPolyline(java.util.List<com.azure.core.models.GeoPosition>,java.lang.Integer)"
  fullName: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPolyline(List<GeoPosition> lines, Integer samples)"
  name: "getDataForPolyline(List<GeoPosition> lines, Integer samples)"
  nameWithType: "ElevationAsyncClient.getDataForPolyline(List<GeoPosition> lines, Integer samples)"
  summary: "Get Data For Polyline"
  parameters:
  - description: "The string representation of a polyline path. A polyline is defined by endpoint coordinates, with\n     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:\n     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,\n     latitude_pointN]`.\n     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.\n     The resolution of the data used to compute the elevation depends on the distance between the endpoints."
    name: "lines"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The samples parameter specifies the number of equally spaced points at which elevation values\n     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value\n     is 10."
    name: "samples"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public Mono<ElevationResult> getDataForPolyline(List<GeoPosition> lines, Integer samples)"
  desc: "Get Data For Polyline\n\n```java\nasyncClient.getDataForPolyline(Arrays.asList(\n     new GeoPosition(-121.66853362143818, 46.84646479863713),\n     new GeoPosition(-121.65853362143818, 46.85646479863713)), 5);\n```\n\n\\*\\*Applies to\\*\\*: S1 pricing tier.\n\nThe Get Data for Polyline API provides elevation data along a polyline.\n\nA polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints, customers can specify the number of sample points that will be used to divide polyline into equally spaced segments.\n\nElevation data at both start and endpoints, as well as equally spaced points along the polyline will be returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the geodesic path along the curved surface of the reference ellipsoid."
  returns:
    description: "the response from a successful Get Data for Bounding Box API."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.elevation.models.ElevationResult?alt=com.azure.maps.elevation.models.ElevationResult&text=ElevationResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPolylineWithResponse(java.util.List<com.azure.core.models.GeoPosition>,java.lang.Integer)"
  fullName: "com.azure.maps.elevation.ElevationAsyncClient.getDataForPolylineWithResponse(List<GeoPosition> lines, Integer samples)"
  name: "getDataForPolylineWithResponse(List<GeoPosition> lines, Integer samples)"
  nameWithType: "ElevationAsyncClient.getDataForPolylineWithResponse(List<GeoPosition> lines, Integer samples)"
  summary: "Get Data For Polyline"
  parameters:
  - description: "The string representation of a polyline path. A polyline is defined by endpoint coordinates, with\n     each endpoint separated by a pipe ('|') character. The polyline should be defined in the following format:\n     `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2, ..., longitude_pointN,\n     latitude_pointN]`.\n     <p>The longitude and latitude values refer to the World Geodetic System (WGS84) coordinate reference system.\n     The resolution of the data used to compute the elevation depends on the distance between the endpoints."
    name: "lines"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The samples parameter specifies the number of equally spaced points at which elevation values\n     should be provided along a polyline path. The number of samples should range from 2 to 2,000. Default value\n     is 10."
    name: "samples"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public Mono<Response<ElevationResult>> getDataForPolylineWithResponse(List<GeoPosition> lines, Integer samples)"
  desc: "Get Data For Polyline\n\n```java\nasyncClient.getDataForPolyline(Arrays.asList(\n     new GeoPosition(-121.66853362143818, 46.84646479863713),\n     new GeoPosition(-121.65853362143818, 46.85646479863713)), 5);\n```\n\n\\*\\*Applies to\\*\\*: S1 pricing tier.\n\nThe Get Data for Polyline API provides elevation data along a polyline.\n\nA polyline is defined by passing in between 2 and N endpoint coordinates separated by a pipe ('|') character. In addition to passing in endpoints, customers can specify the number of sample points that will be used to divide polyline into equally spaced segments.\n\nElevation data at both start and endpoints, as well as equally spaced points along the polyline will be returned. The results will be listed in the direction from the first endpoint towards the last endpoint. A line between two endpoints is a straight Cartesian line, the shortest line between those two points in the coordinate reference system. Note that the point is chosen based on Euclidean distance and may markedly differ from the geodesic path along the curved surface of the reference ellipsoid."
  returns:
    description: "the response from a successful Get Data for Bounding Box API."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.elevation.models.ElevationResult?alt=com.azure.maps.elevation.models.ElevationResult&text=ElevationResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous ElevationClient type. Creating an async client using a <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a client\n ElevationAsyncClient asyncClient = new ElevationClientBuilder()\n     .credential(keyCredential)\n     .elevationClientId(System.getenv(\"MAPS_CLIENT_ID\"))\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.maps.elevation"
artifact: com.azure:azure-maps-elevation:1.0.0-beta.2
