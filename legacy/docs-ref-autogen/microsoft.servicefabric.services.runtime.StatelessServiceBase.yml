### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.StatelessServiceBase()
  name: StatelessServiceBase()
  nameWithType: StatelessServiceBase.StatelessServiceBase()
  syntax: protected StatelessServiceBase()
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.StatelessServiceBase()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.createServiceInstanceListeners()
  name: createServiceInstanceListeners()
  nameWithType: StatelessServiceBase.createServiceInstanceListeners()
  returns:
    description: <p>List of ServiceInstanceListeners </p>
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.runtime.ServiceInstanceListener?alt=microsoft.servicefabric.services.communication.runtime.ServiceInstanceListener&text=ServiceInstanceListener" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Override this method to supply the communication listeners for the service instance. The endpoints returned by the communication listener's are stored as a JSON string of ListenerName, Endpoint string pairs like {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</p>

    <p></p>
  syntax: protected List<ServiceInstanceListener> createServiceInstanceListeners()
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.createServiceInstanceListeners()
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.getAddresses()
  name: getAddresses()
  nameWithType: StatelessServiceBase.getAddresses()
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Map"></xref> containing list of addresses as (ListenerName, Endpoint) key-value pair. </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets list of all the addresses for this service instances as (ListenerName, Endpoint) key-value pair.</p>

    <p></p>
  syntax: protected Map<String, String> getAddresses()
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.getAddresses()
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.getPartition()
  name: getPartition()
  nameWithType: StatelessServiceBase.getPartition()
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatelessServicePartition"></xref> that represents the partition to which this service replica belongs. </p>
    type: <xref href="system.fabric.StatelessServicePartition?alt=system.fabric.StatelessServicePartition&text=StatelessServicePartition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the service partition to which current service instance belongs.</p>

    <p></p>
  syntax: protected StatelessServicePartition getPartition()
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.getPartition()
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.getServiceContext()
  name: getServiceContext()
  nameWithType: StatelessServiceBase.getServiceContext()
  returns:
    description: <p>A <xref uid="microsoft.servicefabric.services.runtime.StatelessServiceContext" data-throw-if-not-resolved="false" data-raw-source="StatelessServiceContext"></xref> that describes the service context. </p>
    type: <xref href="microsoft.servicefabric.services.runtime.StatelessServiceContext?alt=microsoft.servicefabric.services.runtime.StatelessServiceContext&text=StatelessServiceContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the service context that this stateless service is operating under. It provides information like InstanceId, PartitionId, ServiceName etc.</p>

    <p></p>
  syntax: public StatelessServiceContext getServiceContext()
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.getServiceContext()
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.onAbort()
  name: onAbort()
  nameWithType: StatelessServiceBase.onAbort()
  summary: <p>Notification that the service is being aborted. RunAsync MAY be running concurrently with the execution of this method, as cancellation is not awaited on the abort path. </p>
  syntax: protected void onAbort()
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.onAbort()
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.onCloseAsync(CancellationToken cancellationToken)
  name: onCloseAsync(CancellationToken cancellationToken)
  nameWithType: StatelessServiceBase.onCloseAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called as the final step of closing the service. Override this method to be notified that Close has completed for this instance's internal components.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onCloseAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.onCloseAsync(CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.onOpenAsync(CancellationToken cancellationToken)
  name: onOpenAsync(CancellationToken cancellationToken)
  nameWithType: StatelessServiceBase.onOpenAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called as the final step of opening the service. Override this method to be notified that Open has completed for this instance's internal components.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onOpenAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.onOpenAsync(CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.runAsync(CancellationToken cancellationToken)
  name: runAsync(CancellationToken cancellationToken)
  nameWithType: StatelessServiceBase.runAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Services that want to implement a background task which runs when it is opened, just override this method with their logic.</p>

    <p></p>
  syntax: protected CompletableFuture<?> runAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.runAsync(CancellationToken)
- fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase.setAddresses(Map<String, String> addresses)
  name: setAddresses(Map<String, String> addresses)
  nameWithType: StatelessServiceBase.setAddresses(Map<String, String> addresses)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Map"></xref> containing list of addresses as (ListenerName, Endpoint) key-value pair. </p>
    name: addresses
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets list of all the addresses for this service instance as (ListenerName, Endpoint) key-value pair.</p>

    <p></p>
  syntax: protected void setAddresses(Map<String, String> addresses)
  uid: microsoft.servicefabric.services.runtime.StatelessServiceBase.setAddresses(Map<String, String>)
nameWithType: StatelessServiceBase
syntax: public class StatelessServiceBase
type: class
uid: microsoft.servicefabric.services.runtime.StatelessServiceBase
fullName: microsoft.servicefabric.services.runtime.StatelessServiceBase
name: StatelessServiceBase
package: microsoft.servicefabric.services.runtime
summary: <p>Represents base class for Microsoft Service Fabric based stateless reliable service. </p>
metadata: {}
