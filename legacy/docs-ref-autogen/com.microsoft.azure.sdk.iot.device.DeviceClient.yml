### YamlMime:JavaType
constructors:
- com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient()
- com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol)
- com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,SSLContext)
- com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,String,boolean,String,boolean)
- com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,TransportClient)
fields:
- com.microsoft.azure.sdk.iot.device.DeviceClient.CONNECTION_STRING_CHARSET
- com.microsoft.azure.sdk.iot.device.DeviceClient.DEVICE_ID_ATTRIBUTE
- com.microsoft.azure.sdk.iot.device.DeviceClient.HOSTNAME_ATTRIBUTE
- com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS
- com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_AMQPS
- com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_HTTPS
- com.microsoft.azure.sdk.iot.device.DeviceClient.RECEIVE_PERIOD_MILLIS_MQTT
- com.microsoft.azure.sdk.iot.device.DeviceClient.SEND_PERIOD_MILLIS
- com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_KEY_ATTRIBUTE
- com.microsoft.azure.sdk.iot.device.DeviceClient.SHARED_ACCESS_TOKEN_ATTRIBUTE
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.device.InternalClient?alt=com.microsoft.azure.sdk.iot.device.InternalClient&text=InternalClient" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
- com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
- com.microsoft.azure.sdk.iot.device.InternalClient.registerConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message,IotHubEventCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendReportedProperties(Set<Property>,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
- com.microsoft.azure.sdk.iot.device.InternalClient.setProxySettings(ProxySettings)
- com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(Map<Property, Pair<PropertyCallBack<String, Object>, Object>>)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToTwinDesiredProperties(Map<Property, Pair<TwinPropertyCallBack, Object>>)
methods:
- com.microsoft.azure.sdk.iot.device.DeviceClient.close()
- com.microsoft.azure.sdk.iot.device.DeviceClient.closeNow()
- com.microsoft.azure.sdk.iot.device.DeviceClient.createFromSecurityProvider(String,String,SecurityProvider,IotHubClientProtocol)
- com.microsoft.azure.sdk.iot.device.DeviceClient.getDeviceTwin()
- com.microsoft.azure.sdk.iot.device.DeviceClient.open()
- com.microsoft.azure.sdk.iot.device.DeviceClient.registerConnectionStateCallback(IotHubConnectionStateCallback,Object)
- com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback(MessageCallback,Object)
- com.microsoft.azure.sdk.iot.device.DeviceClient.setOption(String,Object)
- com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback,Object,PropertyCallBack,Object)
- com.microsoft.azure.sdk.iot.device.DeviceClient.startDeviceTwin(IotHubEventCallback,Object,TwinPropertyCallBack,Object)
- com.microsoft.azure.sdk.iot.device.DeviceClient.subscribeToDeviceMethod(DeviceMethodCallback,Object,IotHubEventCallback,Object)
- com.microsoft.azure.sdk.iot.device.DeviceClient.uploadToBlobAsync(String,InputStream,long,IotHubEventCallback,Object)
nameWithType: DeviceClient
syntax: public class DeviceClient extends InternalClient
type: class
uid: com.microsoft.azure.sdk.iot.device.DeviceClient
fullName: com.microsoft.azure.sdk.iot.device.DeviceClient
name: DeviceClient
package: com.microsoft.azure.sdk.iot.device
summary: >-
  <p>The public-facing API. Allows a single logical or physical device to connect to an IoT Hub. The IoT Hub client supports sending events to and receiving messages from an IoT Hub. </p>

  <p>To support these workflows, the client library will provide the following abstractions: a message, with its payload and associated properties; and a client, which sends and receives messages. </p>

  <p>The client buffers messages while the network is down, and re-sends them when the network comes back online. It also batches messages to improve communication efficiency (HTTPS only). </p>

  <p>The client supports HTTPS 1.1 and AMQPS 1.0 transports. </p>
metadata: {}
