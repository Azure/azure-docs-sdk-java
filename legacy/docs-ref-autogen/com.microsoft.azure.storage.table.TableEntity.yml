### YamlMime:JavaType
methods:
- com.microsoft.azure.storage.table.TableEntity.getEtag()
- com.microsoft.azure.storage.table.TableEntity.getPartitionKey()
- com.microsoft.azure.storage.table.TableEntity.getRowKey()
- com.microsoft.azure.storage.table.TableEntity.getTimestamp()
- com.microsoft.azure.storage.table.TableEntity.readEntity(HashMap<String, EntityProperty>,OperationContext)
- com.microsoft.azure.storage.table.TableEntity.setEtag(String)
- com.microsoft.azure.storage.table.TableEntity.setPartitionKey(String)
- com.microsoft.azure.storage.table.TableEntity.setRowKey(String)
- com.microsoft.azure.storage.table.TableEntity.setTimestamp(Date)
- com.microsoft.azure.storage.table.TableEntity.writeEntity(OperationContext)
nameWithType: TableEntity
syntax: public interface TableEntity
type: interface
uid: com.microsoft.azure.storage.table.TableEntity
fullName: com.microsoft.azure.storage.table.TableEntity
name: TableEntity
package: com.microsoft.azure.storage.table
summary: >-
  <p>An interface required for table entity types. The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> interface declares getter and setter methods for the common entity properties, and  and  methods for serialization and deserialization of all entity properties using a property map. Create classes implementing <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> to customize property storage, retrieval, serialization and deserialization, and to provide additional custom logic for a table entity. </p>

  <p>The Storage client library includes two implementations of <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> that provide for simple property access and serialization: </p>

  <p>

    <xref uid="com.microsoft.azure.storage.table.DynamicTableEntity" data-throw-if-not-resolved="false">DynamicTableEntity</xref> implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> and provides a simple property map to store and retrieve properties. Use a <xref uid="com.microsoft.azure.storage.table.DynamicTableEntity" data-throw-if-not-resolved="false">DynamicTableEntity</xref> for simple access to entity properties when only a subset of properties are returned (for example, by a select clause in a query), or for when your query can return multiple entity types with different properties. You can also use this type to perform bulk table updates of heterogeneous entities without losing property information. </p>

  <p>

    <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> is an implementation of <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> that uses reflection-based serialization and deserialization behavior in its  and  methods. <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref>-derived classes with methods that follow a convention for types and naming are serialized and deserialized automatically. </p>

  <p>Any class that implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> can take advantage of the automatic reflection-based serialization and deserialization behavior in <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> by invoking the static methods  in  and  in . The class must provide methods that follow the type and naming convention to be serialized and deserialized automatically. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. The reflection code looks for getter and setter methods in pairs of the form </p>

  <p></p>

  <p>and </p>

  <p></p>

  <p>where <em>PropertyName</em> is a property name for the table entity, and <em>type</em> is a Java type compatible with the EDM data type of the property. See the table in the class description for <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> for a map of property types to their Java equivalents. The <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false">StoreAs</xref> annotation may be applied with a  attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the  attribute of <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false">StoreAs</xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid="com.microsoft.azure.storage.table.Ignore" data-throw-if-not-resolved="false">Ignore</xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names "PartitionKey", "RowKey", "Timestamp", and "Etag" are reserved and will be ignored if set with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false">StoreAs</xref> annotation in a subclass that uses the reflection methods. </p>

  <p></p>
metadata: {}
