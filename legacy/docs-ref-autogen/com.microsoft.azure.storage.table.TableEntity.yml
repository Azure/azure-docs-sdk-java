### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.storage.table.TableEntity.getEtag()
  name: getEtag()
  nameWithType: TableEntity.getEtag()
  returns:
    description: <p>A <code>String</code> which represents the ETag for the entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the ETag value to verify for the entity. This value is used to determine if the table entity has changed since it was last read from Microsoft Azure storage. The client cannot update this value on the service.</p>

    <p></p>
  syntax: public String getEtag()
  uid: com.microsoft.azure.storage.table.TableEntity.getEtag()
- fullName: com.microsoft.azure.storage.table.TableEntity.getPartitionKey()
  name: getPartitionKey()
  nameWithType: TableEntity.getPartitionKey()
  returns:
    description: <p>A <code>String</code> which represents the PartitionKey value for the entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the PartitionKey value for the entity.</p>

    <p></p>
  syntax: public String getPartitionKey()
  uid: com.microsoft.azure.storage.table.TableEntity.getPartitionKey()
- fullName: com.microsoft.azure.storage.table.TableEntity.getRowKey()
  name: getRowKey()
  nameWithType: TableEntity.getRowKey()
  returns:
    description: <p>A <code>String</code> which represents the RowKey value for the entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the RowKey value for the entity.</p>

    <p></p>
  syntax: public String getRowKey()
  uid: com.microsoft.azure.storage.table.TableEntity.getRowKey()
- fullName: com.microsoft.azure.storage.table.TableEntity.getTimestamp()
  name: getTimestamp()
  nameWithType: TableEntity.getTimestamp()
  returns:
    description: <p>A <code>java.util.Date</code> object which represents the Timestamp value for the entity. </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Timestamp for the entity. The server manages the value of Timestamp, which cannot be modified.</p>

    <p></p>
  syntax: public Date getTimestamp()
  uid: com.microsoft.azure.storage.table.TableEntity.getTimestamp()
- fullName: com.microsoft.azure.storage.table.TableEntity.readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)
  name: readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)
  nameWithType: TableEntity.readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)
  parameters:
  - description: <p>The <code>java.util.HashMap</code> of <code>String</code> to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values to use to populate the table entity instance. </p>
    name: properties
    type: HashMap&lt;String, <xref href="com.microsoft.azure.storage.table.EntityProperty?alt=com.microsoft.azure.storage.table.EntityProperty&text=EntityProperty" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object used to track the execution of the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If an error occurs during the operation. </p>
  summary: >-
    <p>Populates an instance of the object implementing <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> using the specified properties parameter, which represents a map of  property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values.</p>

    <p></p>
  syntax: public void readEntity(HashMap<String, EntityProperty> properties, OperationContext opContext)
  uid: com.microsoft.azure.storage.table.TableEntity.readEntity(HashMap<String, EntityProperty>,OperationContext)
- fullName: com.microsoft.azure.storage.table.TableEntity.setEtag(String etag)
  name: setEtag(String etag)
  nameWithType: TableEntity.setEtag(String etag)
  parameters:
  - description: <p>A <code>String</code> which specifies the ETag to set for the entity. </p>
    name: etag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the ETag value to verify for the entity. This value is used to determine if the table entity has changed since it was last read from Microsoft Azure storage. The client cannot update this value on the service.</p>

    <p></p>
  syntax: public void setEtag(String etag)
  uid: com.microsoft.azure.storage.table.TableEntity.setEtag(String)
- fullName: com.microsoft.azure.storage.table.TableEntity.setPartitionKey(String partitionKey)
  name: setPartitionKey(String partitionKey)
  nameWithType: TableEntity.setPartitionKey(String partitionKey)
  parameters:
  - description: <p>A <code>String</code> which specifies the PartitionKey value to set for the entity. </p>
    name: partitionKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the PartitionKey value for the entity.</p>

    <p></p>
  syntax: public void setPartitionKey(String partitionKey)
  uid: com.microsoft.azure.storage.table.TableEntity.setPartitionKey(String)
- fullName: com.microsoft.azure.storage.table.TableEntity.setRowKey(String rowKey)
  name: setRowKey(String rowKey)
  nameWithType: TableEntity.setRowKey(String rowKey)
  parameters:
  - description: <p>A <code>String</code> which specifies the RowKey value to set for the entity. </p>
    name: rowKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the RowKey value for the entity.</p>

    <p></p>
  syntax: public void setRowKey(String rowKey)
  uid: com.microsoft.azure.storage.table.TableEntity.setRowKey(String)
- fullName: com.microsoft.azure.storage.table.TableEntity.setTimestamp(Date timeStamp)
  name: setTimestamp(Date timeStamp)
  nameWithType: TableEntity.setTimestamp(Date timeStamp)
  parameters:
  - description: <p>A <code>java.util.Date</code> which specifies the Timestamp value to set for the entity. </p>
    name: timeStamp
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the Timestamp value for the entity. Note that timestamp is a read-only property on the service and should not be set by the user.</p>

    <p></p>
  syntax: public void setTimestamp(Date timeStamp)
  uid: com.microsoft.azure.storage.table.TableEntity.setTimestamp(Date)
- fullName: com.microsoft.azure.storage.table.TableEntity.writeEntity(OperationContext opContext)
  name: writeEntity(OperationContext opContext)
  nameWithType: TableEntity.writeEntity(OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object used to track the execution of the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If an error occurs during the operation. </p>
  returns:
    description: <p>A <code>java.util.HashMap</code> of <code>String</code> property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values representing the properties of the table entity.</p>
    type: HashMap&lt;String, <xref href="com.microsoft.azure.storage.table.EntityProperty?alt=com.microsoft.azure.storage.table.EntityProperty&text=EntityProperty" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a map of  property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values that represents the serialized content of the table entity instance.</p>

    <p></p>
  syntax: public HashMap<String, EntityProperty> writeEntity(OperationContext opContext)
  uid: com.microsoft.azure.storage.table.TableEntity.writeEntity(OperationContext)
nameWithType: TableEntity
syntax: public interface TableEntity
type: interface
uid: com.microsoft.azure.storage.table.TableEntity
fullName: com.microsoft.azure.storage.table.TableEntity
name: TableEntity
package: com.microsoft.azure.storage.table
summary: >-
  <p>An interface required for table entity types. The <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> interface declares getter and setter methods for the common entity properties, and  and  methods for serialization and deserialization of all entity properties using a property map. Create classes implementing <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to customize property storage, retrieval, serialization and deserialization, and to provide additional custom logic for a table entity. </p>

  <p>The Storage client library includes two implementations of <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> that provide for simple property access and serialization: </p>

  <p>

    <xref uid="com.microsoft.azure.storage.table.DynamicTableEntity" data-throw-if-not-resolved="false" data-raw-source="DynamicTableEntity"></xref> implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> and provides a simple property map to store and retrieve properties. Use a <xref uid="com.microsoft.azure.storage.table.DynamicTableEntity" data-throw-if-not-resolved="false" data-raw-source="DynamicTableEntity"></xref> for simple access to entity properties when only a subset of properties are returned (for example, by a select clause in a query), or for when your query can return multiple entity types with different properties. You can also use this type to perform bulk table updates of heterogeneous entities without losing property information. </p>

  <p>

    <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> is an implementation of <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> that uses reflection-based serialization and deserialization behavior in its  and  methods. <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref>-derived classes with methods that follow a convention for types and naming are serialized and deserialized automatically. </p>

  <p>Any class that implements <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> can take advantage of the automatic reflection-based serialization and deserialization behavior in <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> by invoking the static methods  in  and  in . The class must provide methods that follow the type and naming convention to be serialized and deserialized automatically. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. The reflection code looks for getter and setter methods in pairs of the form </p>

  <p></p>

  <p>and </p>

  <p></p>

  <p>where <em>PropertyName</em> is a property name for the table entity, and <em>type</em> is a Java type compatible with the EDM data type of the property. See the table in the class description for <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> for a map of property types to their Java equivalents. The <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation may be applied with a  attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the  attribute of <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid="com.microsoft.azure.storage.table.Ignore" data-throw-if-not-resolved="false" data-raw-source="Ignore"></xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names "PartitionKey", "RowKey", "Timestamp", and "Etag" are reserved and will be ignored if set with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation in a subclass that uses the reflection methods. </p>

  <p></p>
metadata: {}
