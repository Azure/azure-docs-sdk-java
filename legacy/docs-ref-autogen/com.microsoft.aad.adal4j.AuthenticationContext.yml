### YamlMime:JavaType
constructors:
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.AuthenticationContext(final String authority, final boolean validateAuthority, final ExecutorService service)
  name: AuthenticationContext(final String authority, final boolean validateAuthority, final ExecutorService service)
  nameWithType: AuthenticationContext.AuthenticationContext(final String authority, final boolean validateAuthority, final ExecutorService service)
  parameters:
  - description: <p>URL of the authenticating authority </p>
    name: authority
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>flag to enable/disable authority validation. </p>
    name: validateAuthority
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>ExecutorService to be used to execute the requests. Developer is responsible for maintaining the lifetime of the ExecutorService. </p>
    name: service
    type: <xref href="final+ExecutorService?alt=final+ExecutorService&text=final+ExecutorService" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="MalformedURLException?alt=MalformedURLException&text=MalformedURLException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if URL is invalid </p>
  summary: >-
    <p>Constructor to create the context with the address of the authority.</p>

    <p></p>
  syntax: public AuthenticationContext(final String authority, final boolean validateAuthority, final ExecutorService service)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.AuthenticationContext(final String,final boolean,final ExecutorService)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireDeviceCode(final String clientId, final String resource, final AuthenticationCallback<DeviceCode> callback)
  name: acquireDeviceCode(final String clientId, final String resource, final AuthenticationCallback<DeviceCode> callback)
  nameWithType: AuthenticationContext.acquireDeviceCode(final String clientId, final String resource, final AuthenticationCallback<DeviceCode> callback)
  parameters:
  - description: <p>Identifier of the client requesting the token </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.aad.adal4j.DeviceCode?alt=com.microsoft.aad.adal4j.DeviceCode&text=DeviceCode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the device code is not acquired successfully </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.DeviceCode" data-throw-if-not-resolved="false" data-raw-source="DeviceCode"></xref> of the call. It contains device code, user code, its expiration date, message which should be displayed to the user. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.DeviceCode?alt=com.microsoft.aad.adal4j.DeviceCode&text=DeviceCode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a device code from the authority</p>

    <p></p>
  syntax: public Future<DeviceCode> acquireDeviceCode(final String clientId, final String resource, final AuthenticationCallback<DeviceCode> callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireDeviceCode(final String,final String,final AuthenticationCallback<DeviceCode>)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String resource, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  name: acquireToken(final String resource, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>object representing Private Key to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.AsymmetricKeyCredential?alt=com.microsoft.aad.adal4j.AsymmetricKeyCredential&text=AsymmetricKeyCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>

        <xref uid="com.microsoft.aad.adal4j.AuthenticationException" data-throw-if-not-resolved="false" data-raw-source="AuthenticationException"></xref>

      </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireToken(final String resource, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String,final AsymmetricKeyCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String resource, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  name: acquireToken(final String resource, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  parameters:
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client assertion to use for client authentication. </p>
    name: clientAssertion
    type: final <xref href="com.microsoft.aad.adal4j.ClientAssertion?alt=com.microsoft.aad.adal4j.ClientAssertion&text=ClientAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireToken(final String resource, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String,final ClientAssertion,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String resource, final ClientCredential credential, final AuthenticationCallback callback)
  name: acquireToken(final String resource, final ClientCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final ClientCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client credential to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.ClientCredential?alt=com.microsoft.aad.adal4j.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireToken(final String resource, final ClientCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String,final ClientCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String resource, final String clientId, final String username, final String password, final AuthenticationCallback callback)
  name: acquireToken(final String resource, final String clientId, final String username, final String password, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final String clientId, final String username, final String password, final AuthenticationCallback callback)
  parameters:
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Name or ID of the client requesting the token. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Username of the managed or federated user. </p>
    name: username
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Password of the managed or federated user. If null, integrated authentication will be used. </p>
    name: password
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a username/password flow.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireToken(final String resource, final String clientId, final String username, final String password, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String,final String,final String,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String resource, final UserAssertion userAssertion, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  name: acquireToken(final String resource, final UserAssertion userAssertion, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final UserAssertion userAssertion, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>userAssertion to use as Authorization grant </p>
    name: userAssertion
    type: final <xref href="com.microsoft.aad.adal4j.UserAssertion?alt=com.microsoft.aad.adal4j.UserAssertion&text=UserAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>The certificate based client credential to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.AsymmetricKeyCredential?alt=com.microsoft.aad.adal4j.AsymmetricKeyCredential&text=AsymmetricKeyCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>

        <xref uid="com.microsoft.aad.adal4j.AuthenticationException" data-throw-if-not-resolved="false" data-raw-source="AuthenticationException"></xref>

      </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires an access token from the authority on behalf of a user. It requires using a user token previously received. Uses certificate to authenticate client.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireToken(final String resource, final UserAssertion userAssertion, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String,final UserAssertion,final AsymmetricKeyCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String resource, final UserAssertion userAssertion, final ClientCredential credential, final AuthenticationCallback callback)
  name: acquireToken(final String resource, final UserAssertion userAssertion, final ClientCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireToken(final String resource, final UserAssertion userAssertion, final ClientCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>userAssertion to use as Authorization grant </p>
    name: userAssertion
    type: final <xref href="com.microsoft.aad.adal4j.UserAssertion?alt=com.microsoft.aad.adal4j.UserAssertion&text=UserAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>The client credential to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.ClientCredential?alt=com.microsoft.aad.adal4j.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>

        <xref uid="com.microsoft.aad.adal4j.AuthenticationException" data-throw-if-not-resolved="false" data-raw-source="AuthenticationException"></xref>

      </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token and the Access Token's expiration time. Refresh Token property will be null for this overload. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires an access token from the authority on behalf of a user. It requires using a user token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireToken(final String resource, final UserAssertion userAssertion, final ClientCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireToken(final String,final UserAssertion,final ClientCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final String resource, final String clientId, final URI redirectUri, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final String resource, final String clientId, final URI redirectUri, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final String resource, final String clientId, final URI redirectUri, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client assertion to use for token acquisition endpoint. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final String resource, final String clientId, final URI redirectUri, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final String,final String,final URI,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization endpoint. </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>object representing Private Key to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.AsymmetricKeyCredential?alt=com.microsoft.aad.adal4j.AsymmetricKeyCredential&text=AsymmetricKeyCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if <xref uid="com.microsoft.aad.adal4j.AsymmetricKeyCredential" data-throw-if-not-resolved="false" data-raw-source="AsymmetricKeyCredential"></xref> fails to sign the JWT token. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final URI,final AsymmetricKeyCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization endpoint. </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>object representing Private Key to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.AsymmetricKeyCredential?alt=com.microsoft.aad.adal4j.AsymmetricKeyCredential&text=AsymmetricKeyCredential" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if <xref uid="com.microsoft.aad.adal4j.AsymmetricKeyCredential" data-throw-if-not-resolved="false" data-raw-source="AsymmetricKeyCredential"></xref> fails to sign the JWT token. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final URI,final AsymmetricKeyCredential,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization endpoint. </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>The client assertion to use for client authentication. </p>
    name: clientAssertion
    type: final <xref href="com.microsoft.aad.adal4j.ClientAssertion?alt=com.microsoft.aad.adal4j.ClientAssertion&text=ClientAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final URI,final ClientAssertion,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization endpoint. </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>The client assertion to use for client authentication. </p>
    name: clientAssertion
    type: final <xref href="com.microsoft.aad.adal4j.ClientAssertion?alt=com.microsoft.aad.adal4j.ClientAssertion&text=ClientAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final URI,final ClientAssertion,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization endpoint. </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>The client credential to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.ClientCredential?alt=com.microsoft.aad.adal4j.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final URI,final ClientCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>The authorization code received from service authorization endpoint. </p>
    name: authorizationCode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect address used for obtaining authorization code. </p>
    name: redirectUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>The client credential to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.ClientCredential?alt=com.microsoft.aad.adal4j.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. It can be null if provided earlier to acquire authorizationCode. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an authorization code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByAuthorizationCode(final String authorizationCode, final URI redirectUri, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByAuthorizationCode(final String,final URI,final ClientCredential,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByDeviceCode(final DeviceCode deviceCode, final AuthenticationCallback callback)
  name: acquireTokenByDeviceCode(final DeviceCode deviceCode, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByDeviceCode(final DeviceCode deviceCode, final AuthenticationCallback callback)
  parameters:
  - description: <p>The device code result received from calling acquireDeviceCode. </p>
    name: deviceCode
    type: final <xref href="com.microsoft.aad.adal4j.DeviceCode?alt=com.microsoft.aad.adal4j.DeviceCode&text=DeviceCode" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if authorization is pending or another error occurred. If the errorCode of the exception is AdalErrorCode.AUTHORIZATION_PENDING, the call needs to be retried until the AccessToken is returned. DeviceCode.interval - The minimum amount of time in seconds that the client SHOULD wait between polling requests to the token endpoin </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains AccessToken, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires security token from the authority using an device code previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByDeviceCode(final DeviceCode deviceCode, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByDeviceCode(final DeviceCode,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>object representing Private Key to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.AsymmetricKeyCredential?alt=com.microsoft.aad.adal4j.AsymmetricKeyCredential&text=AsymmetricKeyCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if <xref uid="com.microsoft.aad.adal4j.AsymmetricKeyCredential" data-throw-if-not-resolved="false" data-raw-source="AsymmetricKeyCredential"></xref> fails to sign the JWT token. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final AsymmetricKeyCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>object representing Private Key to use for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.AsymmetricKeyCredential?alt=com.microsoft.aad.adal4j.AsymmetricKeyCredential&text=AsymmetricKeyCredential" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for. If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if <xref uid="com.microsoft.aad.adal4j.AsymmetricKeyCredential" data-throw-if-not-resolved="false" data-raw-source="AsymmetricKeyCredential"></xref> fails to sign the JWT token. </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final AsymmetricKeyCredential credential, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final AsymmetricKeyCredential,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client credential used for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.ClientCredential?alt=com.microsoft.aad.adal4j.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final ClientCredential,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client credential used for token acquisition. </p>
    name: credential
    type: final <xref href="com.microsoft.aad.adal4j.ClientCredential?alt=com.microsoft.aad.adal4j.ClientCredential&text=ClientCredential" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for. If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final ClientCredential credential, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final ClientCredential,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final String clientId, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Name or ID of the client requesting the token. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the access token is not refreshed successfully </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received. This method is suitable for the daemon OAuth2 flow when a client secret is not possible.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final String clientId, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Name or ID of the client requesting the token. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client assertion to use for client authentication. </p>
    name: clientAssertion
    type: final <xref href="com.microsoft.aad.adal4j.ClientAssertion?alt=com.microsoft.aad.adal4j.ClientAssertion&text=ClientAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final String,final ClientAssertion,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Name or ID of the client requesting the token. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The client assertion to use for client authentication. </p>
    name: clientAssertion
    type: final <xref href="com.microsoft.aad.adal4j.ClientAssertion?alt=com.microsoft.aad.adal4j.ClientAssertion&text=ClientAssertion" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for. If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final String clientId, final ClientAssertion clientAssertion, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final String,final ClientAssertion,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final String resource, final AuthenticationCallback callback)
  name: acquireTokenByRefreshToken(final String refreshToken, final String clientId, final String resource, final AuthenticationCallback callback)
  nameWithType: AuthenticationContext.acquireTokenByRefreshToken(final String refreshToken, final String clientId, final String resource, final AuthenticationCallback callback)
  parameters:
  - description: <p>Refresh Token to use in the refresh flow. </p>
    name: refreshToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Name or ID of the client requesting the token. </p>
    name: clientId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token. If null, token is requested for the same resource refresh token was originally issued for. If passed, resource should match the original resource used to acquire refresh token unless token service supports refresh token for multiple resources. </p>
    name: resource
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>optional callback object for non-blocking execution. </p>
    name: callback
    type: final <xref href="com.microsoft.aad.adal4j.AuthenticationCallback?alt=com.microsoft.aad.adal4j.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="AuthenticationException?alt=AuthenticationException&text=AuthenticationException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the access token is not refreshed successfully </p>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Future"></xref> object representing the <xref uid="com.microsoft.aad.adal4j.AuthenticationResult" data-throw-if-not-resolved="false" data-raw-source="AuthenticationResult"></xref> of the call. It contains Access Token, Refresh Token and the Access Token's expiration time. </p>
    type: Future&lt;<xref href="com.microsoft.aad.adal4j.AuthenticationResult?alt=com.microsoft.aad.adal4j.AuthenticationResult&text=AuthenticationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Acquires a security token from the authority using a Refresh Token previously received. This method is suitable for the daemon OAuth2 flow when a client secret is not possible.</p>

    <p></p>
  syntax: public Future<AuthenticationResult> acquireTokenByRefreshToken(final String refreshToken, final String clientId, final String resource, final AuthenticationCallback callback)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.acquireTokenByRefreshToken(final String,final String,final String,final AuthenticationCallback)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.getAuthority()
  name: getAuthority()
  nameWithType: AuthenticationContext.getAuthority()
  returns:
    description: <p>String value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Authority associated with the context instance</p>

    <p></p>
  syntax: public String getAuthority()
  uid: com.microsoft.aad.adal4j.AuthenticationContext.getAuthority()
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.getCorrelationId()
  name: getCorrelationId()
  nameWithType: AuthenticationContext.getCorrelationId()
  returns:
    description: <p>String value of the correlation id </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the correlation id configured by the user. It does not return the id automatically generated by the API in case the user does not provide one.</p>

    <p></p>
  syntax: public String getCorrelationId()
  uid: com.microsoft.aad.adal4j.AuthenticationContext.getCorrelationId()
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.getProxy()
  name: getProxy()
  nameWithType: AuthenticationContext.getProxy()
  returns:
    description: <p>Proxy Object </p>
    type: <xref href="Proxy?alt=Proxy&text=Proxy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns Proxy configuration</p>

    <p></p>
  syntax: public Proxy getProxy()
  uid: com.microsoft.aad.adal4j.AuthenticationContext.getProxy()
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.getSslSocketFactory()
  name: getSslSocketFactory()
  nameWithType: AuthenticationContext.getSslSocketFactory()
  returns:
    description: <p>SSLSocketFactory object </p>
    type: <xref href="SSLSocketFactory?alt=SSLSocketFactory&text=SSLSocketFactory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns SSLSocketFactory configuration object.</p>

    <p></p>
  syntax: public SSLSocketFactory getSslSocketFactory()
  uid: com.microsoft.aad.adal4j.AuthenticationContext.getSslSocketFactory()
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.isLogPii()
  name: isLogPii()
  nameWithType: AuthenticationContext.isLogPii()
  returns:
    description: <p>boolean value of logPii </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns logPii - boolean value, which determines whether Pii (personally identifiable information) will be logged in</p>

    <p></p>
  syntax: public boolean isLogPii()
  uid: com.microsoft.aad.adal4j.AuthenticationContext.isLogPii()
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.setCorrelationId(final String correlationId)
  name: setCorrelationId(final String correlationId)
  nameWithType: AuthenticationContext.setCorrelationId(final String correlationId)
  parameters:
  - description: <p>String value </p>
    name: correlationId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set optional correlation id to be used by the API. If not provided, the API generates a random id.</p>

    <p></p>
  syntax: public void setCorrelationId(final String correlationId)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.setCorrelationId(final String)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.setLogPii(boolean logPii)
  name: setLogPii(boolean logPii)
  nameWithType: AuthenticationContext.setLogPii(boolean logPii)
  parameters:
  - description: <p>boolean value </p>
    name: logPii
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set logPii - boolean value, which determines whether Pii (personally identifiable information) will be logged in</p>

    <p></p>
  syntax: public void setLogPii(boolean logPii)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.setLogPii(boolean)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.setProxy(Proxy proxy)
  name: setProxy(Proxy proxy)
  nameWithType: AuthenticationContext.setProxy(Proxy proxy)
  parameters:
  - description: <p>Proxy configuration object </p>
    name: proxy
    type: <xref href="Proxy?alt=Proxy&text=Proxy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets Proxy configuration to be used by the context for all network communication. Default is null and system defined properties if any, would be used.</p>

    <p></p>
  syntax: public void setProxy(Proxy proxy)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.setProxy(Proxy)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.setSslSocketFactory(SSLSocketFactory sslSocketFactory)
  name: setSslSocketFactory(SSLSocketFactory sslSocketFactory)
  nameWithType: AuthenticationContext.setSslSocketFactory(SSLSocketFactory sslSocketFactory)
  parameters:
  - description: <p>The SSL factory object to set </p>
    name: sslSocketFactory
    type: <xref href="SSLSocketFactory?alt=SSLSocketFactory&text=SSLSocketFactory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets SSLSocketFactory object to be used by the context.</p>

    <p></p>
  syntax: public void setSslSocketFactory(SSLSocketFactory sslSocketFactory)
  uid: com.microsoft.aad.adal4j.AuthenticationContext.setSslSocketFactory(SSLSocketFactory)
- fullName: com.microsoft.aad.adal4j.AuthenticationContext.shouldValidateAuthority()
  name: shouldValidateAuthority()
  nameWithType: AuthenticationContext.shouldValidateAuthority()
  returns:
    description: <p>boolean value </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns validateAuthority boolean value passed as a constructor parameter.</p>

    <p></p>
  syntax: public boolean shouldValidateAuthority()
  uid: com.microsoft.aad.adal4j.AuthenticationContext.shouldValidateAuthority()
nameWithType: AuthenticationContext
syntax: public class AuthenticationContext
type: class
uid: com.microsoft.aad.adal4j.AuthenticationContext
fullName: com.microsoft.aad.adal4j.AuthenticationContext
name: AuthenticationContext
package: com.microsoft.aad.adal4j
summary: <p>The main class representing the authority issuing tokens for resources. It provides several ways to request access token, namely via Authorization Code, Confidential Client and Client Certificate. </p>
metadata: {}
