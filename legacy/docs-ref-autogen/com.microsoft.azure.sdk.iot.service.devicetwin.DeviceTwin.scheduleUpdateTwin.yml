### YamlMime:JavaMember
nameWithType: DeviceTwin.scheduleUpdateTwin
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  name: scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  nameWithType: DeviceTwin.scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  parameters:
  - description: >-
      <p>Query condition to evaluate which devices to run the job on. It can be<code>nullÂ 

          </code> or empty </p>
    name: queryCondition
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Twin object to use for the update </p>
    name: updateTwin
    type: <xref href="com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice?alt=com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwinDevice&text=DeviceTwinDevice" data-throw-if-not-resolved="False"/>
  - description: <p>Date time in Utc to start the job </p>
    name: startTimeUtc
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  - description: <p>Max execution time in seconds, i.e., ttl duration the job can run </p>
    name: maxExecutionTimeInSeconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if the function contains invalid parameters </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>if the http request failed </p>
  returns:
    description: <p>a Job class that represent this job on IotHub </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.devicetwin.Job?alt=com.microsoft.azure.sdk.iot.service.devicetwin.Job&text=Job" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new Job to update twin tags and desired properties on one or multiple devices</p>

    <p></p>
  syntax: public Job scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
  uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin(String,DeviceTwinDevice,Date,long)
uid: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin*
fullName: com.microsoft.azure.sdk.iot.service.devicetwin.DeviceTwin.scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
name: scheduleUpdateTwin(String queryCondition, DeviceTwinDevice updateTwin, Date startTimeUtc, long maxExecutionTimeInSeconds)
package: com.microsoft.azure.sdk.iot.service.devicetwin
metadata: {}
