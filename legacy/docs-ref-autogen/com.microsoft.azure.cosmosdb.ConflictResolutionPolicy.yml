### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.ConflictResolutionPolicy(String jsonString)
  name: ConflictResolutionPolicy(String jsonString)
  nameWithType: ConflictResolutionPolicy.ConflictResolutionPolicy(String jsonString)
  parameters:
  - name: jsonString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public ConflictResolutionPolicy(String jsonString)
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.ConflictResolutionPolicy(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.cosmosdb.JsonSerializable?alt=com.microsoft.azure.cosmosdb.JsonSerializable&text=JsonSerializable" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.cosmosdb.JsonSerializable.get(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getBoolean(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getCollection(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getDouble(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getHashMap()
- com.microsoft.azure.cosmosdb.JsonSerializable.getInt(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getLogger()
- com.microsoft.azure.cosmosdb.JsonSerializable.getLong(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getMapper()
- com.microsoft.azure.cosmosdb.JsonSerializable.getObject(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.getObjectByPath(List<String>)
- com.microsoft.azure.cosmosdb.JsonSerializable.getString(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.has(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.JsonSerializable()
- com.microsoft.azure.cosmosdb.JsonSerializable.JsonSerializable(String,ObjectMapper)
- com.microsoft.azure.cosmosdb.JsonSerializable.JsonSerializable(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.remove(String)
- com.microsoft.azure.cosmosdb.JsonSerializable.toJson()
- com.microsoft.azure.cosmosdb.JsonSerializable.toJson(SerializationFormattingPolicy)
- com.microsoft.azure.cosmosdb.JsonSerializable.toString()
methods:
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createCustomPolicy()
  name: createCustomPolicy()
  nameWithType: ConflictResolutionPolicy.createCustomPolicy()
  returns:
    description: <p>ConflictResolutionPolicy. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy?alt=com.microsoft.azure.cosmosdb.ConflictResolutionPolicy&text=ConflictResolutionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a Custom <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionPolicy"></xref> without any <xref uid="com.microsoft.azure.cosmosdb.StoredProcedure" data-throw-if-not-resolved="false" data-raw-source="StoredProcedure"></xref>. User manually should resolve conflicts.</p>

    <p>The conflicts will be registered in the conflicts feed and the user should manually resolve them.</p>

    <p></p>
  syntax: public static ConflictResolutionPolicy createCustomPolicy()
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createCustomPolicy()
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createCustomPolicy(String conflictResolutionSprocName)
  name: createCustomPolicy(String conflictResolutionSprocName)
  nameWithType: ConflictResolutionPolicy.createCustomPolicy(String conflictResolutionSprocName)
  parameters:
  - description: <p>stored procedure to perform conflict resolution. </p>
    name: conflictResolutionSprocName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>ConflictResolutionPolicy. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy?alt=com.microsoft.azure.cosmosdb.ConflictResolutionPolicy&text=ConflictResolutionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a Custom <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionPolicy"></xref> which uses the specified stored procedure to perform conflict resolution</p>

    <p>This stored procedure may be created after the <xref uid="com.microsoft.azure.cosmosdb.DocumentCollection" data-throw-if-not-resolved="false" data-raw-source="DocumentCollection"></xref> is created and can be changed as required.</p>

    <p>

      <ul>

        <li>

          <p>In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed </p>

        </li>

        <li>

          <p>The user can provide the stored procedure </p>

        </li>

      </ul>

    </p>
  syntax: public static ConflictResolutionPolicy createCustomPolicy(String conflictResolutionSprocName)
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createCustomPolicy(String)
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createLastWriterWinsPolicy()
  name: createLastWriterWinsPolicy()
  nameWithType: ConflictResolutionPolicy.createLastWriterWinsPolicy()
  returns:
    description: <p>ConflictResolutionPolicy. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy?alt=com.microsoft.azure.cosmosdb.ConflictResolutionPolicy&text=ConflictResolutionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a LastWriterWins <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionPolicy"></xref> with "/_ts" as the resolution path.</p>

    <p>In case of a conflict occurring on a document, the document with the higher integer value in the default path <xref uid="com.microsoft.azure.cosmosdb.Resource.getTimestamp()" data-throw-if-not-resolved="false" data-raw-source="Resource#getTimestamp()"></xref>, i.e., "/_ts" will be used.</p>

    <p></p>
  syntax: public static ConflictResolutionPolicy createLastWriterWinsPolicy()
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createLastWriterWinsPolicy()
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createLastWriterWinsPolicy(String conflictResolutionPath)
  name: createLastWriterWinsPolicy(String conflictResolutionPath)
  nameWithType: ConflictResolutionPolicy.createLastWriterWinsPolicy(String conflictResolutionPath)
  parameters:
  - description: <p>The path to check values for last-writer wins conflict resolution. That path is a rooted path of the property in the document, such as "/name/first". </p>
    name: conflictResolutionPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>ConflictResolutionPolicy. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy?alt=com.microsoft.azure.cosmosdb.ConflictResolutionPolicy&text=ConflictResolutionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a LastWriterWins <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionPolicy" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionPolicy"></xref> with path as the resolution path.</p>

    <p>The specified path must be present in each document and must be an integer value. In case of a conflict occurring on a document, the document with the higher integer value in the specified path will be picked.</p>

    <p></p>
  syntax: public static ConflictResolutionPolicy createLastWriterWinsPolicy(String conflictResolutionPath)
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.createLastWriterWinsPolicy(String)
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionMode()
  name: getConflictResolutionMode()
  nameWithType: ConflictResolutionPolicy.getConflictResolutionMode()
  returns:
    description: <p>ConflictResolutionMode. </p>
    type: <xref href="com.microsoft.azure.cosmosdb.ConflictResolutionMode?alt=com.microsoft.azure.cosmosdb.ConflictResolutionMode&text=ConflictResolutionMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionMode" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionMode"></xref> in the Azure Cosmos DB service. By default it is <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionMode.LastWriterWins" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionMode#LastWriterWins"></xref>.</p>

    <p></p>
  syntax: public ConflictResolutionMode getConflictResolutionMode()
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionMode()
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionPath()
  name: getConflictResolutionPath()
  nameWithType: ConflictResolutionPolicy.getConflictResolutionPath()
  returns:
    description: <p>The path to check values for last-writer wins conflict resolution. That path is a rooted path of the property in the document, such as "/name/first". </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path which is present in each document in the Azure Cosmos DB service for last writer wins conflict-resolution. This path must be present in each document and must be an integer value. In case of a conflict occurring on a document, the document with the higher integer value in the specified path will be picked. If the path is unspecified, by default the <xref uid="com.microsoft.azure.cosmosdb.Resource.getTimestamp()" data-throw-if-not-resolved="false" data-raw-source="Resource#getTimestamp()"></xref> path will be used.</p>

    <p>This value should only be set when using <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionMode.LastWriterWins" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionMode#LastWriterWins"></xref></p>

    <p></p>
  syntax: public String getConflictResolutionPath()
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionPath()
- fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionProcedure()
  name: getConflictResolutionProcedure()
  nameWithType: ConflictResolutionPolicy.getConflictResolutionProcedure()
  returns:
    description: <p>the stored procedure to perform conflict resolution.] </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="com.microsoft.azure.cosmosdb.StoredProcedure" data-throw-if-not-resolved="false" data-raw-source="StoredProcedure"></xref> which is used for conflict resolution in the Azure Cosmos DB service. This stored procedure may be created after the <xref uid="com.microsoft.azure.cosmosdb.DocumentCollection" data-throw-if-not-resolved="false" data-raw-source="DocumentCollection"></xref> is created and can be changed as required.</p>

    <p>

      <ul>

        <li>

          <p>This value should only be set when using <xref uid="com.microsoft.azure.cosmosdb.ConflictResolutionMode.Custom" data-throw-if-not-resolved="false" data-raw-source="ConflictResolutionMode#Custom"></xref></p>

        </li>

        <li>

          <p>In case the stored procedure fails or throws an exception, the conflict resolution will default to registering conflicts in the conflicts feed </p>

        </li>

        <li>

          <p>The user can provide the stored procedure </p>

        </li>

      </ul>

    </p>

    <p></p>
  syntax: public String getConflictResolutionProcedure()
  uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy.getConflictResolutionProcedure()
nameWithType: ConflictResolutionPolicy
syntax: public class ConflictResolutionPolicy extends JsonSerializable
type: class
uid: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy
fullName: com.microsoft.azure.cosmosdb.ConflictResolutionPolicy
name: ConflictResolutionPolicy
package: com.microsoft.azure.cosmosdb
summary: "<p>Represents the conflict resolution policy configuration for specifying how to resolve conflicts in case writes from different regions result in conflicts on documents in the collection in the Azure Cosmos DB service.</p>\r\n<p>A collection with custom conflict resolution with no user-registered stored procedure. <pre><code>DocumentCollection collectionSpec = new DocumentCollection();\r\n    collectionSpec.setId(\"Multi-master collection\");\r\n    \r\n    ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy();\r\n    collectionSpec.setConflictResolutionPolicy(policy);\r\n    \r\n    DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\r\n            .toBlocking().single().getResource();\r\n    </code></pre></p>\r\n<p>A collection with custom conflict resolution with a user-registered stored procedure. <pre><code>DocumentCollection collectionSpec = new DocumentCollection();\r\n    collectionSpec.setId(\"Multi-master collection\");\r\n    \r\n    ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy(conflictResolutionSprocName);\r\n    collectionSpec.setConflictResolutionPolicy(policy);\r\n    \r\n    DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\r\n            .toBlocking().single().getResource();\r\n    </code></pre></p>\r\n<p>A collection with last writer wins conflict resolution, based on a path in the conflicting documents. A collection with custom conflict resolution with a user-registered stored procedure. <pre><code>DocumentCollection collectionSpec = new DocumentCollection();\r\n    collectionSpec.setId(\"Multi-master collection\");\r\n    \r\n    ConflictResolutionPolicy policy = ConflictResolutionPolicy.createLastWriterWinsPolicy(\"/path/for/conflict/resolution\");\r\n    collectionSpec.setConflictResolutionPolicy(policy);\r\n    \r\n    DocumentCollection collection = client.createCollection(databaseLink, collectionSpec, null)\r\n            .toBlocking().single().getResource();\r\n    </code></pre></p>"
metadata: {}
