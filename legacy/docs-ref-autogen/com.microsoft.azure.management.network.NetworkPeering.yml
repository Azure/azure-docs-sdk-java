### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.network.NetworkPeering.checkAccessBetweenNetworks()
  name: checkAccessBetweenNetworks()
  nameWithType: NetworkPeering.checkAccessBetweenNetworks()
  returns:
    description: <p>true if the peering enables IP addresses within the peered networks to be accessible from both networks, otherwise false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

    (Note this method makes a separate call to Azure.) </p>
  syntax: public boolean checkAccessBetweenNetworks()
  uid: com.microsoft.azure.management.network.NetworkPeering.checkAccessBetweenNetworks()
- fullName: com.microsoft.azure.management.network.NetworkPeering.gatewayUse()
  name: gatewayUse()
  nameWithType: NetworkPeering.gatewayUse()
  returns:
    description: <p>the type of gateway use enabled for this network </p>
    type: <xref href="com.microsoft.azure.management.network.NetworkPeeringGatewayUse?alt=com.microsoft.azure.management.network.NetworkPeeringGatewayUse&text=NetworkPeeringGatewayUse" data-throw-if-not-resolved="False"/>
  syntax: public NetworkPeeringGatewayUse gatewayUse()
  uid: com.microsoft.azure.management.network.NetworkPeering.gatewayUse()
- fullName: com.microsoft.azure.management.network.NetworkPeering.getRemoteNetwork()
  name: getRemoteNetwork()
  nameWithType: NetworkPeering.getRemoteNetwork()
  returns:
    description: <p>the remote network if it is in the same subscription, otherwise null. </p>
    type: <xref href="com.microsoft.azure.management.network.Network?alt=com.microsoft.azure.management.network.Network&text=Network" data-throw-if-not-resolved="False"/>
  syntax: public Network getRemoteNetwork()
  uid: com.microsoft.azure.management.network.NetworkPeering.getRemoteNetwork()
- fullName: com.microsoft.azure.management.network.NetworkPeering.getRemoteNetworkAsync()
  name: getRemoteNetworkAsync()
  nameWithType: NetworkPeering.getRemoteNetworkAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.network.Network?alt=com.microsoft.azure.management.network.Network&text=Network" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Gets the remote network associated with this peering asynchronously. </p>
  syntax: public Observable<Network> getRemoteNetworkAsync()
  uid: com.microsoft.azure.management.network.NetworkPeering.getRemoteNetworkAsync()
- fullName: com.microsoft.azure.management.network.NetworkPeering.getRemotePeering()
  name: getRemotePeering()
  nameWithType: NetworkPeering.getRemotePeering()
  returns:
    description: <p>the associated matching peering on the remote network if it is in the same subscription, otherwise this future computation will evaluate to null. </p>
    type: <xref href="com.microsoft.azure.management.network.NetworkPeering?alt=com.microsoft.azure.management.network.NetworkPeering&text=NetworkPeering" data-throw-if-not-resolved="False"/>
  syntax: public NetworkPeering getRemotePeering()
  uid: com.microsoft.azure.management.network.NetworkPeering.getRemotePeering()
- fullName: com.microsoft.azure.management.network.NetworkPeering.getRemotePeeringAsync()
  name: getRemotePeeringAsync()
  nameWithType: NetworkPeering.getRemotePeeringAsync()
  returns:
    description: <p>a representation of the future computation of this call. </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.network.NetworkPeering?alt=com.microsoft.azure.management.network.NetworkPeering&text=NetworkPeering" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Gets the associated matching peering on the remote network if it is in the same subscription. </p>
  syntax: public Observable<NetworkPeering> getRemotePeeringAsync()
  uid: com.microsoft.azure.management.network.NetworkPeering.getRemotePeeringAsync()
- fullName: com.microsoft.azure.management.network.NetworkPeering.isSameSubscription()
  name: isSameSubscription()
  nameWithType: NetworkPeering.isSameSubscription()
  returns:
    description: <p>true if the peered networks are in the same subscription, otherwise false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isSameSubscription()
  uid: com.microsoft.azure.management.network.NetworkPeering.isSameSubscription()
- fullName: com.microsoft.azure.management.network.NetworkPeering.isTrafficForwardingFromRemoteNetworkAllowed()
  name: isTrafficForwardingFromRemoteNetworkAllowed()
  nameWithType: NetworkPeering.isTrafficForwardingFromRemoteNetworkAllowed()
  returns:
    description: <p>true if traffic forwarding from the remote network is allowed into this network </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isTrafficForwardingFromRemoteNetworkAllowed()
  uid: com.microsoft.azure.management.network.NetworkPeering.isTrafficForwardingFromRemoteNetworkAllowed()
- fullName: com.microsoft.azure.management.network.NetworkPeering.networkId()
  name: networkId()
  nameWithType: NetworkPeering.networkId()
  returns:
    description: <p>the local virtual network's ID </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String networkId()
  uid: com.microsoft.azure.management.network.NetworkPeering.networkId()
- fullName: com.microsoft.azure.management.network.NetworkPeering.remoteNetworkId()
  name: remoteNetworkId()
  nameWithType: NetworkPeering.remoteNetworkId()
  returns:
    description: <p>the associated remote virtual network's ID </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String remoteNetworkId()
  uid: com.microsoft.azure.management.network.NetworkPeering.remoteNetworkId()
- fullName: com.microsoft.azure.management.network.NetworkPeering.state()
  name: state()
  nameWithType: NetworkPeering.state()
  returns:
    description: <p>the state of the peering between the two networks </p>
    type: <xref href="com.microsoft.azure.management.network.VirtualNetworkPeeringState?alt=com.microsoft.azure.management.network.VirtualNetworkPeeringState&text=VirtualNetworkPeeringState" data-throw-if-not-resolved="False"/>
  syntax: public VirtualNetworkPeeringState state()
  uid: com.microsoft.azure.management.network.NetworkPeering.state()
nameWithType: NetworkPeering
syntax: public interface NetworkPeering extends IndependentChild<NetworkManager>,HasInner<VirtualNetworkPeeringInner>,Refreshable<NetworkPeering>,Updatable<NetworkPeering.Update>
type: interface
uid: com.microsoft.azure.management.network.NetworkPeering
fullName: com.microsoft.azure.management.network.NetworkPeering
name: NetworkPeering
package: com.microsoft.azure.management.network
summary: <p>An client-side representation of a network peering. </p>
metadata: {}
