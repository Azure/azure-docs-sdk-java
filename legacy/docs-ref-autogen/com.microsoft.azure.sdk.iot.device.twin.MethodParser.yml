### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.MethodParser()
  name: MethodParser()
  nameWithType: MethodParser.MethodParser()
  summary: <p>CONSTRUCTOR Create a MethodParser instance with provided values. </p>
  syntax: public MethodParser()
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.MethodParser()
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.MethodParser(JsonElement payload)
  name: MethodParser(JsonElement payload)
  nameWithType: MethodParser.MethodParser(JsonElement payload)
  parameters:
  - description: >-
      <p>- Object that contains the payload defined by the user. It can be<code>null 

          </code> . </p>
    name: payload
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>CONSTRUCTOR Create a MethodParser instance with provided values.</p>

    <p></p>
  syntax: public MethodParser(JsonElement payload)
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.MethodParser(JsonElement)
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.MethodParser(String name, Long responseTimeout, Long connectTimeout, JsonElement payload)
  name: MethodParser(String name, Long responseTimeout, Long connectTimeout, JsonElement payload)
  nameWithType: MethodParser.MethodParser(String name, Long responseTimeout, Long connectTimeout, JsonElement payload)
  parameters:
  - description: <p>- method name [required]. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>- maximum interval of time, in seconds, that the Direct Method will wait for answer. It can be<code>null 

          </code> . </p>
    name: responseTimeout
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>- maximum interval of time, in seconds, that the Direct Method will wait for the connection. It can be<code>null 

          </code> . </p>
    name: connectTimeout
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>- Object that contains the payload defined by the user. It can be<code>null 

          </code> . </p>
    name: payload
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the one of the provided information do not fits the requirements. </p>
  summary: >-
    <p>CONSTRUCTOR Create a MethodParser instance with provided values.</p>

    <p></p>
  syntax: public MethodParser(String name, Long responseTimeout, Long connectTimeout, JsonElement payload)
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.MethodParser(String,Long,Long,JsonElement)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.fromJson(String json)
  name: fromJson(String json)
  nameWithType: MethodParser.fromJson(String json)
  parameters:
  - description: <p>- Json with the information to change the collection.<ul><li><p>If contains `methodName`, it is a full method including `methodName`, `responseTimeoutInSeconds`, `connectTimeoutInSeconds`, and `payload`.</p></li><li><p>If contains `status`, it is a response with `status` and `payload`.</p></li><li><p>Otherwise, it is only `payload`. </p></li></ul></p>
    name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the one of the provided information do not fits the requirements. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the Method collection with the provided information in the json.</p>

    <p></p>
  syntax: public synchronized void fromJson(String json)
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.fromJson(String)
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.getPayload()
  name: getPayload()
  nameWithType: MethodParser.getPayload()
  returns:
    description: >-
      <p>An Object with the payload. It can be<code>null 

          </code> . </p>
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Return an Object with the payload.</p>

    <p></p>
  syntax: public JsonElement getPayload()
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.getPayload()
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.getPayloadFromJson(String json)
  name: getPayloadFromJson(String json)
  nameWithType: MethodParser.getPayloadFromJson(String json)
  parameters:
  - name: json
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  syntax: public JsonElement getPayloadFromJson(String json)
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.getPayloadFromJson(String)
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.toJson()
  name: toJson()
  nameWithType: MethodParser.toJson()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the one of the provided information do not fits the requirements. </p>
  returns:
    description: <p>String with the json content. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a String with a json content that represents all the information in the method collection.</p>

    <p></p>
  syntax: public String toJson()
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.toJson()
- fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser.toJsonElement()
  name: toJsonElement()
  nameWithType: MethodParser.toJsonElement()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the one of the provided information do not fits the requirements. </p>
  returns:
    description: <p>JsonElement with the content. </p>
    type: <xref href="JsonElement?alt=JsonElement&text=JsonElement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a JsonElement with a content that represents all the information in the method collection.</p>

    <p></p>
  syntax: public JsonElement toJsonElement()
  uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser.toJsonElement()
nameWithType: MethodParser
syntax: public class MethodParser
type: class
uid: com.microsoft.azure.sdk.iot.device.twin.MethodParser
fullName: com.microsoft.azure.sdk.iot.device.twin.MethodParser
name: MethodParser
package: com.microsoft.azure.sdk.iot.device.twin
summary: <p>Representation of a single Direct Method Access collection with a Json serializer and deserializer. </p>
metadata: {}
