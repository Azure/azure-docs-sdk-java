### YamlMime:JavaMember
nameWithType: ProxyBase.getReturnValue
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)
  name: getReturnValue(int interfaceId, int methodId, Object responseBody)
  nameWithType: ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)
  parameters:
  - description: <p>Interface Id for the actor interface. </p>
    name: interfaceId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Method Id for the actor method. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Response body. </p>
    name: responseBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Return value of method call as <xref uid="" data-throw-if-not-resolved="false">Object</xref>. </p>
    type: <xref href="abstract+Object?alt=abstract Object&text=abstract+Object" data-throw-if-not-resolved="False"/>
  summary: <p>Implemented by the derived class to type cast the response body and extract the value from it. </p>
  syntax: protected abstract Object getReturnValue(int interfaceId, int methodId, Object responseBody)
  uid: microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int,int,Object)
uid: microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue*
fullName: microsoft.servicefabric.services.remoting.builder.ProxyBase.getReturnValue(int interfaceId, int methodId, Object responseBody)
name: getReturnValue(int interfaceId, int methodId, Object responseBody)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
