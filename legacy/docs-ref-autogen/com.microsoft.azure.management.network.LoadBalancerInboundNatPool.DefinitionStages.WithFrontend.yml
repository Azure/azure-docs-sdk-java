### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontend
  id: WithFrontend
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontend.yml
  langs:
  - java
  name: LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>
  type: Interface
  source:
    remote:
      path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/LoadBalancerInboundNatPool.java
      branch: v1.3.0
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/LoadBalancerInboundNatPool.java
    startLine: 74
  package: com.microsoft.azure.management.network
  summary: "<p>The stage of an inbound NAT pool definition allowing to specify the frontend for the inbound NAT rules in the pool to apply to. </p>"
  syntax:
    content: public interface WithFrontend<ParentT> extends HasFrontend.DefinitionStages.WithFrontend<WithFrontendPortRange<ParentT>>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
  inheritedMembers:
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(PublicIPAddress)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Network,String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(String,String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Subnet)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromFrontend(String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(Creatable<PublicIPAddress>)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress()
references:
- uid: 18a275b1
  spec.java:
  - name: ParentT
    fullName: ParentT
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(PublicIPAddress)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  type: Method
  summary: "<p>Specifies an existing public IP address to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
    parameters:
    - id: publicIPAddress
      type: com.microsoft.azure.management.network.PublicIPAddress
      description: <p>an existing public IP address </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingPublicIPAddress(String resourceId)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)
  type: Method
  summary: "<p>Specifies an existing public IP address to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingPublicIPAddress(String resourceId)
    parameters:
    - id: resourceId
      type: "26831127"
      description: <p>the resource ID of an existing public IP address </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Network,String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingSubnet(Network network, String subnetName)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)
  type: Method
  summary: "<p>Specifies an existing private subnet to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingSubnet(Network network, String subnetName)
    parameters:
    - id: network
      type: com.microsoft.azure.management.network.Network
      description: <p>an existing network </p>
    - id: subnetName
      type: "26831127"
      description: <p>the name of an existing subnet within the specified network </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(String,String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingSubnet(String networkResourceId, String subnetName)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)
  type: Method
  summary: "<p>Specifies an existing private subnet to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingSubnet(String networkResourceId, String subnetName)
    parameters:
    - id: networkResourceId
      type: "26831127"
      description: <p>the resource ID of an existing network </p>
    - id: subnetName
      type: "26831127"
      description: <p>the name of an existing subnet within the specified network </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Subnet)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingSubnet(Subnet subnet)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)
  type: Method
  summary: "<p>Specifies an existing private subnet to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingSubnet(Subnet subnet)
    parameters:
    - id: subnet
      type: com.microsoft.azure.management.network.Subnet
      description: <p>an existing subnet </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromFrontend(String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromFrontend(String frontendName)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)
  type: Method
  summary: "<p>Specifies the frontend to receive network traffic from. </p>"
  syntax:
    content: public ReturnT fromFrontend(String frontendName)
    parameters:
    - id: frontendName
      type: "26831127"
      description: <p>an existing frontend name on this load balancer </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromNewPublicIPAddress(String leafDnsLabel)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(String leafDnsLabel)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(String leafDnsLabel)
  type: Method
  summary: "<p>Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer in the same region and resource group but under the provided leaf DNS label, assuming it is available. </p>\r\n<p>A new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address, so make sure to use a unique DNS label. </p>"
  syntax:
    content: public ReturnT fromNewPublicIPAddress(String leafDnsLabel)
    parameters:
    - id: leafDnsLabel
      type: "26831127"
      description: <p>a unique leaf DNS label to create the public IP address under </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(Creatable<PublicIPAddress>)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
  type: Method
  summary: "<p>Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer based on the provided definition. </p>\r\n<p>A new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address. </p>"
  syntax:
    content: public ReturnT fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
    parameters:
    - id: pipDefinition
      type: com.microsoft.azure.management.resources.fluentcore.model.Creatable78504a52com.microsoft.azure.management.network.PublicIPAddressa08ddfce
      description: <p>a definition for the new public IP </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress()
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromNewPublicIPAddress()
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress()
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress()
  type: Method
  summary: "<p>Specifies that network traffic should be received on a new public IP address that is to be automatically created woth default settings along with the load balancer. </p>\r\n<p>A new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address. </p>"
  syntax:
    content: public ReturnT fromNewPublicIPAddress()
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  parent: com.microsoft.azure.management.network.model
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: HasFrontend.DefinitionStages.WithFrontend<ReturnT>
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>
  type: Interface
  summary: "<p>The stage of a definition allowing to specify a load balancer frontend. </p>"
  syntax:
    content: public interface WithFrontend<ReturnT>
    typeParameters:
    - id: ReturnT
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.Definition
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.Definition.yml
  name: LoadBalancerInboundNatPool.Definition<ParentT>
  nameWithType: LoadBalancerInboundNatPool.Definition<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.Definition<ParentT>
  type: Interface
  summary: "<p>The entirety of an inbound NAT pool definition. </p>"
  syntax:
    content: public interface Definition<ParentT> extends LoadBalancerInboundNatPool.DefinitionStages.Blank<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithAttach<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithProtocol<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
