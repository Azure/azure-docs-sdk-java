### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.applicationPackageReferences()
  name: applicationPackageReferences()
  nameWithType: PoolUpdatePropertiesParameter.applicationPackageReferences()
  returns:
    description: <p>the applicationPackageReferences value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.</p>

    <p></p>
  syntax: public List<ApplicationPackageReference> applicationPackageReferences()
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.applicationPackageReferences()
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.certificateReferences()
  name: certificateReferences()
  nameWithType: PoolUpdatePropertiesParameter.certificateReferences()
  returns:
    description: <p>the certificateReferences value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get this list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p>

    <p></p>
  syntax: public List<CertificateReference> certificateReferences()
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.certificateReferences()
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.metadata()
  name: metadata()
  nameWithType: PoolUpdatePropertiesParameter.metadata()
  returns:
    description: <p>the metadata value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get this list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.</p>

    <p></p>
  syntax: public List<MetadataItem> metadata()
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.metadata()
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.startTask()
  name: startTask()
  nameWithType: PoolUpdatePropertiesParameter.startTask()
  returns:
    description: <p>the startTask value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if this element is present, it overwrites any existing start task. If omitted, any existing start task is removed from the pool.</p>

    <p></p>
  syntax: public StartTask startTask()
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.startTask()
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  name: withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  nameWithType: PoolUpdatePropertiesParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  parameters:
  - description: <p>the applicationPackageReferences value to set </p>
    name: applicationPackageReferences
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the PoolUpdatePropertiesParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the list replaces any existing application package references on the pool. Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. If omitted, or if you specify an empty collection, any existing application packages references are removed from the pool.</p>

    <p></p>
  syntax: public PoolUpdatePropertiesParameter withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withApplicationPackageReferences(List<ApplicationPackageReference>)
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withCertificateReferences(List<CertificateReference> certificateReferences)
  name: withCertificateReferences(List<CertificateReference> certificateReferences)
  nameWithType: PoolUpdatePropertiesParameter.withCertificateReferences(List<CertificateReference> certificateReferences)
  parameters:
  - description: <p>the certificateReferences value to set </p>
    name: certificateReferences
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CertificateReference?alt=com.microsoft.azure.batch.protocol.models.CertificateReference&text=CertificateReference" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the PoolUpdatePropertiesParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this list replaces any existing certificate references configured on the pool. If you specify an empty collection, any existing certificate references are removed from the pool. For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.</p>

    <p></p>
  syntax: public PoolUpdatePropertiesParameter withCertificateReferences(List<CertificateReference> certificateReferences)
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withCertificateReferences(List<CertificateReference>)
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withMetadata(List<MetadataItem> metadata)
  name: withMetadata(List<MetadataItem> metadata)
  nameWithType: PoolUpdatePropertiesParameter.withMetadata(List<MetadataItem> metadata)
  parameters:
  - description: <p>the metadata value to set </p>
    name: metadata
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the PoolUpdatePropertiesParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this list replaces any existing metadata configured on the pool. If omitted, or if you specify an empty collection, any existing metadata is removed from the pool.</p>

    <p></p>
  syntax: public PoolUpdatePropertiesParameter withMetadata(List<MetadataItem> metadata)
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withMetadata(List<MetadataItem>)
- fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withStartTask(StartTask startTask)
  name: withStartTask(StartTask startTask)
  nameWithType: PoolUpdatePropertiesParameter.withStartTask(StartTask startTask)
  parameters:
  - description: <p>the startTask value to set </p>
    name: startTask
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PoolUpdatePropertiesParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter?alt=com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter&text=PoolUpdatePropertiesParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if this element is present, it overwrites any existing start task. If omitted, any existing start task is removed from the pool.</p>

    <p></p>
  syntax: public PoolUpdatePropertiesParameter withStartTask(StartTask startTask)
  uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter.withStartTask(StartTask)
nameWithType: PoolUpdatePropertiesParameter
syntax: public class PoolUpdatePropertiesParameter
type: class
uid: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter
fullName: com.microsoft.azure.batch.protocol.models.PoolUpdatePropertiesParameter
name: PoolUpdatePropertiesParameter
package: com.microsoft.azure.batch.protocol.models
summary: <p>The set of changes to be made to a pool. </p>
metadata: {}
