### YamlMime:JavaMember
nameWithType: Pools.addAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool)
  name: addAsync(PoolAddParameter pool)
  nameWithType: Pools.addAsync(PoolAddParameter pool)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(PoolAddParameter pool)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  name: addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(PoolAddParameter pool, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  name: addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  nameWithType: Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddOptions?alt=com.microsoft.azure.batch.protocol.models.PoolAddOptions&text=PoolAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter,PoolAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  name: addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Pools.addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The pool to be added. </p>
    name: pool
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddParameter?alt=com.microsoft.azure.batch.protocol.models.PoolAddParameter&text=PoolAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: poolAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolAddOptions?alt=com.microsoft.azure.batch.protocol.models.PoolAddOptions&text=PoolAddOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pool to the specified account. When naming pools, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(PoolAddParameter pool, PoolAddOptions poolAddOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Pools.addAsync(PoolAddParameter,PoolAddOptions,final ServiceCallback<Void>)
uid: com.microsoft.azure.batch.protocol.Pools.addAsync*
fullName: com.microsoft.azure.batch.protocol.Pools.addAsync
name: addAsync(PoolAddParameter pool)
package: com.microsoft.azure.batch.protocol
metadata: {}
