### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String connectionString)
  name: RegistryClient(String connectionString)
  nameWithType: RegistryClient.RegistryClient(String connectionString)
  parameters:
  - description: <p>The iot hub connection string </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructor to create instance from connection string</p>

    <p></p>
  syntax: public RegistryClient(String connectionString)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String hostName, AzureSasCredential azureSasCredential)
  name: RegistryClient(String hostName, AzureSasCredential azureSasCredential)
  nameWithType: RegistryClient.RegistryClient(String hostName, AzureSasCredential azureSasCredential)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token provider that will be used for authentication. </p>
    name: azureSasCredential
    type: <xref href="AzureSasCredential?alt=AzureSasCredential&text=AzureSasCredential" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new RegistryClient instance.</p>

    <p></p>
  syntax: public RegistryClient(String hostName, AzureSasCredential azureSasCredential)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String,AzureSasCredential)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String hostName, AzureSasCredential azureSasCredential, RegistryClientOptions options)
  name: RegistryClient(String hostName, AzureSasCredential azureSasCredential, RegistryClientOptions options)
  nameWithType: RegistryClient.RegistryClient(String hostName, AzureSasCredential azureSasCredential, RegistryClientOptions options)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The SAS token provider that will be used for authentication. </p>
    name: azureSasCredential
    type: <xref href="AzureSasCredential?alt=AzureSasCredential&text=AzureSasCredential" data-throw-if-not-resolved="False"/>
  - description: <p>The connection options to use when connecting to the service. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryClientOptions?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryClientOptions&text=RegistryClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new RegistryClient instance.</p>

    <p></p>
  syntax: public RegistryClient(String hostName, AzureSasCredential azureSasCredential, RegistryClientOptions options)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String,AzureSasCredential,RegistryClientOptions)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String connectionString, RegistryClientOptions options)
  name: RegistryClient(String connectionString, RegistryClientOptions options)
  nameWithType: RegistryClient.RegistryClient(String connectionString, RegistryClientOptions options)
  parameters:
  - description: <p>The iot hub connection string </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The connection options to use when connecting to the service. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryClientOptions?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryClientOptions&text=RegistryClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructor to create instance from connection string</p>

    <p></p>
  syntax: public RegistryClient(String connectionString, RegistryClientOptions options)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String,RegistryClientOptions)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String hostName, TokenCredential credential)
  name: RegistryClient(String hostName, TokenCredential credential)
  nameWithType: RegistryClient.RegistryClient(String hostName, TokenCredential credential)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The custom <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TokenCredential"></xref> that will provide authentication tokens to this library when they are needed. The provided tokens must be Json Web Tokens. </p>
    name: credential
    type: <xref href="TokenCredential?alt=TokenCredential&text=TokenCredential" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new RegistryClient instance.</p>

    <p></p>
  syntax: public RegistryClient(String hostName, TokenCredential credential)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String,TokenCredential)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String hostName, TokenCredential credential, RegistryClientOptions options)
  name: RegistryClient(String hostName, TokenCredential credential, RegistryClientOptions options)
  nameWithType: RegistryClient.RegistryClient(String hostName, TokenCredential credential, RegistryClientOptions options)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The custom <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TokenCredential"></xref> that will provide authentication tokens to this library when they are needed. The provided tokens must be Json Web Tokens. </p>
    name: credential
    type: <xref href="TokenCredential?alt=TokenCredential&text=TokenCredential" data-throw-if-not-resolved="False"/>
  - description: <p>The connection options to use when connecting to the service. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryClientOptions?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryClientOptions&text=RegistryClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new RegistryClient instance.</p>

    <p></p>
  syntax: public RegistryClient(String hostName, TokenCredential credential, RegistryClientOptions options)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.RegistryClient(String,TokenCredential,RegistryClientOptions)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.addDevice(Device device)
  name: addDevice(Device device)
  nameWithType: RegistryClient.addDevice(Device device)
  parameters:
  - description: <p>The device object to add </p>
    name: device
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Device?alt=com.microsoft.azure.sdk.iot.service.registry.Device&text=Device" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The future object for the requested operation </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Device?alt=com.microsoft.azure.sdk.iot.service.registry.Device&text=Device" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add device using the given Device object Return with the response device object from IotHub</p>

    <p></p>
  syntax: public Device addDevice(Device device)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.addDevice(Device)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.addModule(Module module)
  name: addModule(Module module)
  nameWithType: RegistryClient.addModule(Module module)
  parameters:
  - description: <p>The module object to add </p>
    name: module
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The module object for the requested operation </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add module using the given Module object Return with the response module object from IotHub</p>

    <p></p>
  syntax: public Module addModule(Module module)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.addModule(Module)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.exportDevices(RegistryJob exportDevicesParameters)
  name: exportDevices(RegistryJob exportDevicesParameters)
  nameWithType: RegistryClient.exportDevices(RegistryJob exportDevicesParameters)
  parameters:
  - description: <p>A RegistryJob object containing input parameters for export Devices job This API also supports identity based storage authentication, identity authentication support is currently available in limited regions. If a user wishes to try it out, they will need to set an Environment Variable of "EnabledStorageIdentity" and set it to "1" otherwise default key based authentication is used for storage <a href="https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support">More details here </a></p>
    name: exportDevicesParameters
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>A RegistryJob object for the newly created bulk export job</p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a bulk export job.</p>

    <p></p>
  syntax: public RegistryJob exportDevices(RegistryJob exportDevicesParameters)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.exportDevices(RegistryJob)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.exportDevices(String exportBlobContainerUri, boolean excludeKeys)
  name: exportDevices(String exportBlobContainerUri, boolean excludeKeys)
  nameWithType: RegistryClient.exportDevices(String exportBlobContainerUri, boolean excludeKeys)
  parameters:
  - description: <p>URI containing SAS token to a blob container where export data will be placed </p>
    name: exportBlobContainerUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Whether the devices keys should be excluded from the exported data or not</p>
    name: excludeKeys
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>A RegistryJob object for the newly created bulk export job</p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a bulk export job.</p>

    <p></p>
  syntax: public RegistryJob exportDevices(String exportBlobContainerUri, boolean excludeKeys)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.exportDevices(String,boolean)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getDevice(String deviceId)
  name: getDevice(String deviceId)
  nameWithType: RegistryClient.getDevice(String deviceId)
  parameters:
  - description: <p>The id of requested device </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The device object of requested device </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Device?alt=com.microsoft.azure.sdk.iot.service.registry.Device&text=Device" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get device data by device Id from IotHub</p>

    <p></p>
  syntax: public Device getDevice(String deviceId)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getDevice(String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getJob(String jobId)
  name: getJob(String jobId)
  nameWithType: RegistryClient.getJob(String jobId)
  parameters:
  - description: <p>The id of the import/export job to be retrieved.</p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>A RegistryJob object for the requested job id</p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the properties of an existing job.</p>

    <p></p>
  syntax: public RegistryJob getJob(String jobId)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getJob(String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getModule(String deviceId, String moduleId)
  name: getModule(String deviceId, String moduleId)
  nameWithType: RegistryClient.getModule(String deviceId, String moduleId)
  parameters:
  - description: <p>The id of requested device </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The id of requested module </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The module object of requested module on the specific device </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get module data by device Id and module Id from IotHub</p>

    <p></p>
  syntax: public Module getModule(String deviceId, String moduleId)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getModule(String,String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getModulesOnDevice(String deviceId)
  name: getModulesOnDevice(String deviceId)
  nameWithType: RegistryClient.getModulesOnDevice(String deviceId)
  parameters:
  - description: <p>The id of requested device </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The module objects on the specific device </p>
    type: List&lt;<xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get modules data by device Id from IotHub</p>

    <p></p>
  syntax: public List<Module> getModulesOnDevice(String deviceId)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getModulesOnDevice(String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getStatistics()
  name: getStatistics()
  nameWithType: RegistryClient.getStatistics()
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>RegistryStatistics object containing the requested data </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryStatistics?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryStatistics&text=RegistryStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get device statistics</p>

    <p></p>
  syntax: public RegistryStatistics getStatistics()
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.getStatistics()
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.importDevices(RegistryJob importDevicesParameters)
  name: importDevices(RegistryJob importDevicesParameters)
  nameWithType: RegistryClient.importDevices(RegistryJob importDevicesParameters)
  parameters:
  - description: <p>A RegistryJob object containing input parameters for import Devices job This API also supports identity based storage authentication, identity authentication support is currently available in limited regions. If a user wishes to try it out, they will need to set an Environment Variable of "EnabledStorageIdentity" and set it to "1" otherwise default key based authentication is used for storage <a href="https://docs.microsoft.com/en-us/azure/iot-hub/virtual-network-support">More details here </a></p>
    name: importDevicesParameters
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>A RegistryJob object for the newly created bulk import job</p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a bulk import job.</p>

    <p></p>
  syntax: public RegistryJob importDevices(RegistryJob importDevicesParameters)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.importDevices(RegistryJob)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.importDevices(String importBlobContainerUri, String outputBlobContainerUri)
  name: importDevices(String importBlobContainerUri, String outputBlobContainerUri)
  nameWithType: RegistryClient.importDevices(String importBlobContainerUri, String outputBlobContainerUri)
  parameters:
  - description: <p>URI containing SAS token to a blob container that contains registry data to sync </p>
    name: importBlobContainerUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>URI containing SAS token to a blob container where the result of the bulk import operation will be placed</p>
    name: outputBlobContainerUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>A RegistryJob object for the newly created bulk import job</p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.RegistryJob?alt=com.microsoft.azure.sdk.iot.service.registry.RegistryJob&text=RegistryJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a bulk import job.</p>

    <p></p>
  syntax: public RegistryJob importDevices(String importBlobContainerUri, String outputBlobContainerUri)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.importDevices(String,String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeDevice(Device device)
  name: removeDevice(Device device)
  nameWithType: RegistryClient.removeDevice(Device device)
  parameters:
  - description: <p>The device name to remove </p>
    name: device
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Device?alt=com.microsoft.azure.sdk.iot.service.registry.Device&text=Device" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  summary: >-
    <p>Remove device</p>

    <p></p>
  syntax: public void removeDevice(Device device)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeDevice(Device)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeDevice(String deviceId)
  name: removeDevice(String deviceId)
  nameWithType: RegistryClient.removeDevice(String deviceId)
  parameters:
  - description: <p>The device name to remove </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  summary: >-
    <p>Remove device</p>

    <p></p>
  syntax: public void removeDevice(String deviceId)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeDevice(String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeModule(Module module)
  name: removeModule(Module module)
  nameWithType: RegistryClient.removeModule(Module module)
  parameters:
  - description: <p>The module to be removed </p>
    name: module
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  summary: >-
    <p>Remove module</p>

    <p></p>
  syntax: public void removeModule(Module module)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeModule(Module)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeModule(String deviceId, String moduleId)
  name: removeModule(String deviceId, String moduleId)
  nameWithType: RegistryClient.removeModule(String deviceId, String moduleId)
  parameters:
  - description: <p>The device name associated with the module to be removed </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The module name to be removed </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  summary: >-
    <p>Remove module</p>

    <p></p>
  syntax: public void removeModule(String deviceId, String moduleId)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.removeModule(String,String)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.updateDevice(Device device)
  name: updateDevice(Device device)
  nameWithType: RegistryClient.updateDevice(Device device)
  parameters:
  - description: <p>The device object containing updated data </p>
    name: device
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Device?alt=com.microsoft.azure.sdk.iot.service.registry.Device&text=Device" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The updated device object </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Device?alt=com.microsoft.azure.sdk.iot.service.registry.Device&text=Device" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update device not forced</p>

    <p></p>
  syntax: public Device updateDevice(Device device)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.updateDevice(Device)
- fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.updateModule(Module module)
  name: updateModule(Module module)
  nameWithType: RegistryClient.updateModule(Module module)
  parameters:
  - description: <p>The module object containing updated data </p>
    name: module
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the IO operation failed </p>
  - type: <xref href="IotHubException?alt=IotHubException&text=IotHubException" data-throw-if-not-resolved="False"/>
    description: <p>This exception is thrown if the response verification failed </p>
  returns:
    description: <p>The updated module object </p>
    type: <xref href="com.microsoft.azure.sdk.iot.service.registry.Module?alt=com.microsoft.azure.sdk.iot.service.registry.Module&text=Module" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update module not forced</p>

    <p></p>
  syntax: public Module updateModule(Module module)
  uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient.updateModule(Module)
nameWithType: RegistryClient
syntax: public class RegistryClient
type: class
uid: com.microsoft.azure.sdk.iot.service.registry.RegistryClient
fullName: com.microsoft.azure.sdk.iot.service.registry.RegistryClient
name: RegistryClient
package: com.microsoft.azure.sdk.iot.service.registry
summary: <p>Use the RegistryClient to manage the identity registry in IoT hubs. To access twins, use the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TwinClient"></xref>. </p>
metadata: {}
