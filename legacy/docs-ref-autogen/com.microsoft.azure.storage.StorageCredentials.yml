### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.StorageCredentials.getAccountName()
  name: getAccountName()
  nameWithType: StorageCredentials.getAccountName()
  returns:
    description: <p>A <code>String</code> that represents the associated account name for the credentials </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the associated account name for the credentials. This is null for anonymous and shared access signature credentials.</p>

    <p></p>
  syntax: public String getAccountName()
  uid: com.microsoft.azure.storage.StorageCredentials.getAccountName()
- fullName: com.microsoft.azure.storage.StorageCredentials.isHttpsOnly()
  name: isHttpsOnly()
  nameWithType: StorageCredentials.isHttpsOnly()
  returns:
    description: <p>A <code>boolean</code> representing whether this <code>StorageCredentials</code> object only allows access via HTTPS. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets whether this  object only allows access via HTTPS.</p>

    <p></p>
  syntax: public boolean isHttpsOnly()
  uid: com.microsoft.azure.storage.StorageCredentials.isHttpsOnly()
- fullName: com.microsoft.azure.storage.StorageCredentials.setHttpsOnly(boolean httpsOnly)
  name: setHttpsOnly(boolean httpsOnly)
  nameWithType: StorageCredentials.setHttpsOnly(boolean httpsOnly)
  parameters:
  - description: <p>A <code>boolean</code> representing whether this <code>StorageCredentials</code> object only allows access via HTTPS. </p>
    name: httpsOnly
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Sets whether this  object only allows access via HTTPS. </p>
  syntax: protected void setHttpsOnly(boolean httpsOnly)
  uid: com.microsoft.azure.storage.StorageCredentials.setHttpsOnly(boolean)
- fullName: com.microsoft.azure.storage.StorageCredentials.toString(boolean exportSecrets)
  name: toString(boolean exportSecrets)
  nameWithType: StorageCredentials.toString(boolean exportSecrets)
  parameters:
  - description: >-
      <p>

        <code>true</code> to include sensitive data in the return string; otherwise, <code>false</code>. </p>
    name: exportSecrets
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents this object, optionally including sensitive data. </p>
    type: <xref href="abstract+String?alt=abstract+String&text=abstract+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  that represents this instance.</p>

    <p></p>
  syntax: public abstract String toString(boolean exportSecrets)
  uid: com.microsoft.azure.storage.StorageCredentials.toString(boolean)
- fullName: com.microsoft.azure.storage.StorageCredentials.transformUri(final URI resourceUri)
  name: transformUri(final URI resourceUri)
  nameWithType: StorageCredentials.transformUri(final URI resourceUri)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the resource URI to be transformed.</p>
    name: resourceUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is not properly formatted. </p>
  returns:
    description: <p>A <code>java.net.URI</code> object that represents the signature, including the resource URI and the shared access token.</p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Transforms a resource URI into a shared access signature URI, by appending a shared access token.</p>

    <p></p>
  syntax: public URI transformUri(final URI resourceUri)
  uid: com.microsoft.azure.storage.StorageCredentials.transformUri(final URI)
- fullName: com.microsoft.azure.storage.StorageCredentials.transformUri(StorageUri resourceUri)
  name: transformUri(StorageUri resourceUri)
  nameWithType: StorageCredentials.transformUri(StorageUri resourceUri)
  parameters:
  - description: <p>A <code>StorageUri</code> object that represents the resource URI to be transformed.</p>
    name: resourceUri
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is not properly formatted. </p>
  returns:
    description: <p>A <code>StorageUri</code> object that represents the signature, including the resource URI and the shared access token.</p>
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Transforms a resource URI into a shared access signature URI, by appending a shared access token.</p>

    <p></p>
  syntax: public StorageUri transformUri(StorageUri resourceUri)
  uid: com.microsoft.azure.storage.StorageCredentials.transformUri(StorageUri)
- fullName: com.microsoft.azure.storage.StorageCredentials.transformUri(StorageUri resourceUri, OperationContext opContext)
  name: transformUri(StorageUri resourceUri, OperationContext opContext)
  nameWithType: StorageCredentials.transformUri(StorageUri resourceUri, OperationContext opContext)
  parameters:
  - description: <p>A <code>StorageUri</code> object that represents the resource URI to be transformed. </p>
    name: resourceUri
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is not properly formatted. </p>
  returns:
    description: <p>A <code>StorageUri</code> object that represents the signature, including the resource URI and the shared access token.</p>
    type: abstract <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Transforms a resource URI into a shared access signature URI, by appending a shared access token and using the specified operation context.</p>

    <p></p>
  syntax: public abstract StorageUri transformUri(StorageUri resourceUri, OperationContext opContext)
  uid: com.microsoft.azure.storage.StorageCredentials.transformUri(StorageUri,OperationContext)
- fullName: com.microsoft.azure.storage.StorageCredentials.transformUri(URI resourceUri, OperationContext opContext)
  name: transformUri(URI resourceUri, OperationContext opContext)
  nameWithType: StorageCredentials.transformUri(URI resourceUri, OperationContext opContext)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the resource URI to be transformed. </p>
    name: resourceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is not properly formatted. </p>
  returns:
    description: <p>A <code>java.net.URI</code> object that represents the signature, including the resource URI and the shared access token.</p>
    type: <xref href="abstract+URI?alt=abstract+URI&text=abstract+URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Transforms a resource URI into a shared access signature URI, by appending a shared access token and using the specified operation context.</p>

    <p></p>
  syntax: public abstract URI transformUri(URI resourceUri, OperationContext opContext)
  uid: com.microsoft.azure.storage.StorageCredentials.transformUri(URI,OperationContext)
- fullName: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final Map<String, String> settings)
  name: tryParseCredentials(final Map<String, String> settings)
  nameWithType: StorageCredentials.tryParseCredentials(final Map<String, String> settings)
  parameters:
  - description: <p>A <code>Map</code> object of the name/value pairs that represent the settings to use to configure the credentials. </p>
    name: settings
    type: <xref href="final+Map%3CString%2C+String%3E?alt=final+Map%3CString%2C+String%3E&text=final+Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the key value specified for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.ACCOUNT_KEY_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#ACCOUNT_KEY_NAME"></xref> is not a valid Base64-encoded string. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object representing the storage credentials determined from the name/value pairs.</p>
    type: <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to determine the storage credentials from a collection of name/value pairs.</p>

    <p>

    Either include an account name with an account key (specifying values for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.ACCOUNT_NAME_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#ACCOUNT_NAME_NAME"></xref> and <xref uid="com.microsoft.azure.storage.CloudStorageAccount.ACCOUNT_KEY_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#ACCOUNT_KEY_NAME"></xref> ), or a shared access signature (specifying a value for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.SHARED_ACCESS_SIGNATURE_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#SHARED_ACCESS_SIGNATURE_NAME"></xref> ). If you use an account name and account key, do not include a shared access signature, and vice versa.</p>

    <p></p>
  syntax: protected static StorageCredentials tryParseCredentials(final Map<String, String> settings)
  uid: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final Map<String, String>)
- fullName: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final String connectionString)
  name: tryParseCredentials(final String connectionString)
  nameWithType: StorageCredentials.tryParseCredentials(final String connectionString)
  parameters:
  - description: <p>A <code>String</code> that contains the key/value pairs that represent the storage credentials.</p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the account key specified in <code>connectionString</code> is not valid. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object representing the storage credentials determined from the connection string.</p>
    type: <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to determine the storage credentials from a connection string. </p>

    <p>The format for the connection string is in the pattern "&lt;i&gt;keyname=value&lt;/i&gt;". Multiple key/value pairs can be separated by a semi-colon, for example, "&lt;i&gt;keyname1=value1;keyname2=value2&lt;/i&gt;". Either include an account name with an account key or a shared access signature. If you use an account name and account key, do not include a shared access signature, and vice versa. </p>

    <p>The same connection string can be used as for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.parse(final String)" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#parse(String)"></xref> but here only the account name, account key, and sas key/value pairs will be examined.</p>

    <p></p>
  syntax: public static StorageCredentials tryParseCredentials(final String connectionString)
  uid: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final String)
nameWithType: StorageCredentials
syntax: public class StorageCredentials
type: class
uid: com.microsoft.azure.storage.StorageCredentials
fullName: com.microsoft.azure.storage.StorageCredentials
name: StorageCredentials
package: com.microsoft.azure.storage
summary: <p>Represents a set of credentials used to authenticate access to a Microsoft Azure storage account. This is the base class for the <xref uid="com.microsoft.azure.storage.StorageCredentialsAccountAndKey" data-throw-if-not-resolved="false" data-raw-source="StorageCredentialsAccountAndKey"></xref>, <xref uid="com.microsoft.azure.storage.StorageCredentialsToken" data-throw-if-not-resolved="false" data-raw-source="StorageCredentialsToken"></xref>, and <xref uid="com.microsoft.azure.storage.StorageCredentialsSharedAccessSignature" data-throw-if-not-resolved="false" data-raw-source="StorageCredentialsSharedAccessSignature"></xref> classes. </p>
metadata: {}
