### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.allowLowPriorityNode()
  name: allowLowPriorityNode()
  nameWithType: JobManagerTask.allowLowPriorityNode()
  returns:
    description: <p>the allowLowPriorityNode value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the default value is true.</p>

    <p></p>
  syntax: public Boolean allowLowPriorityNode()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.allowLowPriorityNode()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.applicationPackageReferences()
  name: applicationPackageReferences()
  nameWithType: JobManagerTask.applicationPackageReferences()
  returns:
    description: <p>the applicationPackageReferences value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.</p>

    <p></p>
  syntax: public List<ApplicationPackageReference> applicationPackageReferences()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.applicationPackageReferences()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.authenticationTokenSettings()
  name: authenticationTokenSettings()
  nameWithType: JobManagerTask.authenticationTokenSettings()
  returns:
    description: <p>the authenticationTokenSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.</p>

    <p></p>
  syntax: public AuthenticationTokenSettings authenticationTokenSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.authenticationTokenSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.commandLine()
  name: commandLine()
  nameWithType: JobManagerTask.commandLine()
  returns:
    description: <p>the commandLine value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public String commandLine()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.commandLine()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.constraints()
  name: constraints()
  nameWithType: JobManagerTask.constraints()
  returns:
    description: <p>the constraints value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the constraints value.</p>

    <p></p>
  syntax: public TaskConstraints constraints()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.constraints()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.containerSettings()
  name: containerSettings()
  nameWithType: JobManagerTask.containerSettings()
  returns:
    description: <p>the containerSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskContainerSettings containerSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.containerSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.displayName()
  name: displayName()
  nameWithType: JobManagerTask.displayName()
  returns:
    description: <p>the displayName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get it need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public String displayName()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.displayName()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.environmentSettings()
  name: environmentSettings()
  nameWithType: JobManagerTask.environmentSettings()
  returns:
    description: <p>the environmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the environmentSettings value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> environmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.environmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.id()
  name: id()
  nameWithType: JobManagerTask.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.id()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.killJobOnCompletion()
  name: killJobOnCompletion()
  nameWithType: JobManagerTask.killJobOnCompletion()
  returns:
    description: <p>the killJobOnCompletion value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.</p>

    <p></p>
  syntax: public Boolean killJobOnCompletion()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.killJobOnCompletion()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.outputFiles()
  name: outputFiles()
  nameWithType: JobManagerTask.outputFiles()
  returns:
    description: <p>the outputFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get for multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.</p>

    <p></p>
  syntax: public List<OutputFile> outputFiles()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.outputFiles()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.resourceFiles()
  name: resourceFiles()
  nameWithType: JobManagerTask.resourceFiles()
  returns:
    description: <p>the resourceFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public List<ResourceFile> resourceFiles()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.resourceFiles()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.runExclusive()
  name: runExclusive()
  nameWithType: JobManagerTask.runExclusive()
  returns:
    description: <p>the runExclusive value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.</p>

    <p></p>
  syntax: public Boolean runExclusive()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.runExclusive()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.userIdentity()
  name: userIdentity()
  nameWithType: JobManagerTask.userIdentity()
  returns:
    description: <p>the userIdentity value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public UserIdentity userIdentity()
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.userIdentity()
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withAllowLowPriorityNode(Boolean allowLowPriorityNode)
  name: withAllowLowPriorityNode(Boolean allowLowPriorityNode)
  nameWithType: JobManagerTask.withAllowLowPriorityNode(Boolean allowLowPriorityNode)
  parameters:
  - description: <p>the allowLowPriorityNode value to set </p>
    name: allowLowPriorityNode
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the default value is true.</p>

    <p></p>
  syntax: public JobManagerTask withAllowLowPriorityNode(Boolean allowLowPriorityNode)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withAllowLowPriorityNode(Boolean)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  name: withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  nameWithType: JobManagerTask.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  parameters:
  - description: <p>the applicationPackageReferences value to set </p>
    name: applicationPackageReferences
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.</p>

    <p></p>
  syntax: public JobManagerTask withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withApplicationPackageReferences(List<ApplicationPackageReference>)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  name: withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  nameWithType: JobManagerTask.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  parameters:
  - description: <p>the authenticationTokenSettings value to set </p>
    name: authenticationTokenSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.</p>

    <p></p>
  syntax: public JobManagerTask withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withAuthenticationTokenSettings(AuthenticationTokenSettings)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withCommandLine(String commandLine)
  name: withCommandLine(String commandLine)
  nameWithType: JobManagerTask.withCommandLine(String commandLine)
  parameters:
  - description: <p>the commandLine value to set </p>
    name: commandLine
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public JobManagerTask withCommandLine(String commandLine)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withCommandLine(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withConstraints(TaskConstraints constraints)
  name: withConstraints(TaskConstraints constraints)
  nameWithType: JobManagerTask.withConstraints(TaskConstraints constraints)
  parameters:
  - description: <p>the constraints value to set </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the constraints value.</p>

    <p></p>
  syntax: public JobManagerTask withConstraints(TaskConstraints constraints)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withConstraints(TaskConstraints)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withContainerSettings(TaskContainerSettings containerSettings)
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: JobManagerTask.withContainerSettings(TaskContainerSettings containerSettings)
  parameters:
  - description: <p>the containerSettings value to set </p>
    name: containerSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public JobManagerTask withContainerSettings(TaskContainerSettings containerSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withContainerSettings(TaskContainerSettings)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withDisplayName(String displayName)
  name: withDisplayName(String displayName)
  nameWithType: JobManagerTask.withDisplayName(String displayName)
  parameters:
  - description: <p>the displayName value to set </p>
    name: displayName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set it need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public JobManagerTask withDisplayName(String displayName)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withDisplayName(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: JobManagerTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  parameters:
  - description: <p>the environmentSettings value to set </p>
    name: environmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the environmentSettings value.</p>

    <p></p>
  syntax: public JobManagerTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withId(String id)
  name: withId(String id)
  nameWithType: JobManagerTask.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters.</p>

    <p></p>
  syntax: public JobManagerTask withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withKillJobOnCompletion(Boolean killJobOnCompletion)
  name: withKillJobOnCompletion(Boolean killJobOnCompletion)
  nameWithType: JobManagerTask.withKillJobOnCompletion(Boolean killJobOnCompletion)
  parameters:
  - description: <p>the killJobOnCompletion value to set </p>
    name: killJobOnCompletion
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if true, when the Job Manager task completes, the Batch service marks the job as complete. If any tasks are still running at this time (other than Job Release), those tasks are terminated. If false, the completion of the Job Manager task does not affect the job status. In this case, you should either use the onAllTasksComplete attribute to terminate the job, or have a client or user terminate the job explicitly. An example of this is if the Job Manager creates a set of tasks but then takes no further role in their execution. The default value is true. If you are using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using the Job Manager task only to create the tasks for the job (not to monitor progress), then it is important to set killJobOnCompletion to false.</p>

    <p></p>
  syntax: public JobManagerTask withKillJobOnCompletion(Boolean killJobOnCompletion)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withKillJobOnCompletion(Boolean)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withOutputFiles(List<OutputFile> outputFiles)
  name: withOutputFiles(List<OutputFile> outputFiles)
  nameWithType: JobManagerTask.withOutputFiles(List<OutputFile> outputFiles)
  parameters:
  - description: <p>the outputFiles value to set </p>
    name: outputFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.</p>

    <p></p>
  syntax: public JobManagerTask withOutputFiles(List<OutputFile> outputFiles)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withOutputFiles(List<OutputFile>)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withResourceFiles(List<ResourceFile> resourceFiles)
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: JobManagerTask.withResourceFiles(List<ResourceFile> resourceFiles)
  parameters:
  - description: <p>the resourceFiles value to set </p>
    name: resourceFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public JobManagerTask withResourceFiles(List<ResourceFile> resourceFiles)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withResourceFiles(List<ResourceFile>)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withRunExclusive(Boolean runExclusive)
  name: withRunExclusive(Boolean runExclusive)
  nameWithType: JobManagerTask.withRunExclusive(Boolean runExclusive)
  parameters:
  - description: <p>the runExclusive value to set </p>
    name: runExclusive
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if true, no other tasks will run on the same compute node for as long as the Job Manager is running. If false, other tasks can run simultaneously with the Job Manager on a compute node. The Job Manager task counts normally against the node's concurrent task limit, so this is only relevant if the node allows multiple concurrent tasks. The default value is true.</p>

    <p></p>
  syntax: public JobManagerTask withRunExclusive(Boolean runExclusive)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withRunExclusive(Boolean)
- fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask.withUserIdentity(UserIdentity userIdentity)
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: JobManagerTask.withUserIdentity(UserIdentity userIdentity)
  parameters:
  - description: <p>the userIdentity value to set </p>
    name: userIdentity
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobManagerTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public JobManagerTask withUserIdentity(UserIdentity userIdentity)
  uid: com.microsoft.azure.batch.protocol.models.JobManagerTask.withUserIdentity(UserIdentity)
nameWithType: JobManagerTask
syntax: public class JobManagerTask
type: class
uid: com.microsoft.azure.batch.protocol.models.JobManagerTask
fullName: com.microsoft.azure.batch.protocol.models.JobManagerTask
name: JobManagerTask
package: com.microsoft.azure.batch.protocol.models
summary: <p>Specifies details of a Job Manager task. The Job Manager task is automatically started when the job is created. The Batch service tries to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle nodes available, the system may terminate one of the running tasks in the pool and return it to the queue in order to make room for the Job Manager task to restart. Note that a Job Manager task in one job does not have priority over tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1 job. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>
metadata: {}
