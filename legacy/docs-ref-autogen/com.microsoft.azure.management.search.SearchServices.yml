### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.search.SearchServices.checkNameAvailability(String name)
  name: checkNameAvailability(String name)
  nameWithType: SearchServices.checkNameAvailability(String name)
  parameters:
  - description: <p>the Search service name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>whether the name is available and other info if not </p>
    type: <xref href="com.microsoft.azure.management.search.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.search.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if the specified Search service name is valid and available.</p>

    <p></p>
  syntax: public CheckNameAvailabilityResult checkNameAvailability(String name)
  uid: com.microsoft.azure.management.search.SearchServices.checkNameAvailability(String)
- fullName: com.microsoft.azure.management.search.SearchServices.checkNameAvailabilityAsync(String name)
  name: checkNameAvailabilityAsync(String name)
  nameWithType: SearchServices.checkNameAvailabilityAsync(String name)
  parameters:
  - description: <p>the Search service name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call, returning whether the name is available or other info if not </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.search.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.search.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks if Search service name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.search.SearchServices.checkNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.search.SearchServices.checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  name: checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  nameWithType: SearchServices.checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  parameters:
  - description: <p>the Search service name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.search.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.search.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.search.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.search.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks if Search service name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  uid: com.microsoft.azure.management.search.SearchServices.checkNameAvailabilityAsync(String,ServiceCallback<CheckNameAvailabilityResult>)
- fullName: com.microsoft.azure.management.search.SearchServices.createQueryKey(String resourceGroupName, String searchServiceName, String name)
  name: createQueryKey(String resourceGroupName, String searchServiceName, String name)
  nameWithType: SearchServices.createQueryKey(String resourceGroupName, String searchServiceName, String name)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the new query API key. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the QueryKey object if successful. </p>
    type: <xref href="com.microsoft.azure.management.search.QueryKey?alt=com.microsoft.azure.management.search.QueryKey&text=QueryKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.</p>

    <p></p>
  syntax: public QueryKey createQueryKey(String resourceGroupName, String searchServiceName, String name)
  uid: com.microsoft.azure.management.search.SearchServices.createQueryKey(String,String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.createQueryKeyAsync(String resourceGroupName, String searchServiceName, String name)
  name: createQueryKeyAsync(String resourceGroupName, String searchServiceName, String name)
  nameWithType: SearchServices.createQueryKeyAsync(String resourceGroupName, String searchServiceName, String name)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the new query API key. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.search.QueryKey?alt=com.microsoft.azure.management.search.QueryKey&text=QueryKey" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.</p>

    <p></p>
  syntax: public Observable<QueryKey> createQueryKeyAsync(String resourceGroupName, String searchServiceName, String name)
  uid: com.microsoft.azure.management.search.SearchServices.createQueryKeyAsync(String,String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.deleteQueryKey(String resourceGroupName, String searchServiceName, String key)
  name: deleteQueryKey(String resourceGroupName, String searchServiceName, String key)
  nameWithType: SearchServices.deleteQueryKey(String resourceGroupName, String searchServiceName, String key)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The query key to be deleted. Query keys are identified by value, not by name. </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified query key. Unlike admin keys, query keys are not regenerated. The process for regenerating a query key is to delete and then recreate it.</p>

    <p></p>
  syntax: public void deleteQueryKey(String resourceGroupName, String searchServiceName, String key)
  uid: com.microsoft.azure.management.search.SearchServices.deleteQueryKey(String,String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.deleteQueryKeyAsync(String resourceGroupName, String searchServiceName, String key)
  name: deleteQueryKeyAsync(String resourceGroupName, String searchServiceName, String key)
  nameWithType: SearchServices.deleteQueryKeyAsync(String resourceGroupName, String searchServiceName, String key)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The query key to be deleted. Query keys are identified by value, not by name. </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified query key. Unlike admin keys, query keys are not regenerated. The process for regenerating a query key is to delete and then recreate it.</p>

    <p></p>
  syntax: public Completable deleteQueryKeyAsync(String resourceGroupName, String searchServiceName, String key)
  uid: com.microsoft.azure.management.search.SearchServices.deleteQueryKeyAsync(String,String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.getAdminKeys(String resourceGroupName, String searchServiceName)
  name: getAdminKeys(String resourceGroupName, String searchServiceName)
  nameWithType: SearchServices.getAdminKeys(String resourceGroupName, String searchServiceName)
  parameters:
  - description: <p>The name of the resource group within the current subscription; you can obtain this value from the Azure Resource Manager API or the portal </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the AdminKeys object if successful </p>
    type: <xref href="com.microsoft.azure.management.search.AdminKeys?alt=com.microsoft.azure.management.search.AdminKeys&text=AdminKeys" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the primary and secondary admin API keys for the specified Azure Search service.</p>

    <p></p>
  syntax: public AdminKeys getAdminKeys(String resourceGroupName, String searchServiceName)
  uid: com.microsoft.azure.management.search.SearchServices.getAdminKeys(String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.getAdminKeysAsync(String resourceGroupName, String searchServiceName)
  name: getAdminKeysAsync(String resourceGroupName, String searchServiceName)
  nameWithType: SearchServices.getAdminKeysAsync(String resourceGroupName, String searchServiceName)
  parameters:
  - description: <p>The name of the resource group within the current subscription; you can obtain this value from the Azure Resource Manager API or the portal </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.search.AdminKeys?alt=com.microsoft.azure.management.search.AdminKeys&text=AdminKeys" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the primary and secondary admin API keys for the specified Azure Search service.</p>

    <p></p>
  syntax: public Observable<AdminKeys> getAdminKeysAsync(String resourceGroupName, String searchServiceName)
  uid: com.microsoft.azure.management.search.SearchServices.getAdminKeysAsync(String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.listQueryKeys(String resourceGroupName, String searchServiceName)
  name: listQueryKeys(String resourceGroupName, String searchServiceName)
  nameWithType: SearchServices.listQueryKeys(String resourceGroupName, String searchServiceName)
  parameters:
  - description: <p>The name of the resource group within the current subscription; you can obtain this value from the Azure Resource Manager API or the portal </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;QueryKey&gt; object if successful </p>
    type: List&lt;<xref href="com.microsoft.azure.management.search.QueryKey?alt=com.microsoft.azure.management.search.QueryKey&text=QueryKey" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns the list of query API keys for the given Azure Search service.</p>

    <p></p>
  syntax: public List<QueryKey> listQueryKeys(String resourceGroupName, String searchServiceName)
  uid: com.microsoft.azure.management.search.SearchServices.listQueryKeys(String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.listQueryKeysAsync(String resourceGroupName, String searchServiceName)
  name: listQueryKeysAsync(String resourceGroupName, String searchServiceName)
  nameWithType: SearchServices.listQueryKeysAsync(String resourceGroupName, String searchServiceName)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.search.QueryKey?alt=com.microsoft.azure.management.search.QueryKey&text=QueryKey" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns the list of query API keys for the given Azure Search service.</p>

    <p></p>
  syntax: public Observable<QueryKey> listQueryKeysAsync(String resourceGroupName, String searchServiceName)
  uid: com.microsoft.azure.management.search.SearchServices.listQueryKeysAsync(String,String)
- fullName: com.microsoft.azure.management.search.SearchServices.regenerateAdminKeys(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  name: regenerateAdminKeys(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  nameWithType: SearchServices.regenerateAdminKeys(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>Specifies which key to regenerate. Valid values include 'primary' and 'secondary'. Possible values include: 'primary', 'secondary' </p>"
    name: keyKind
    type: <xref href="com.microsoft.azure.management.search.AdminKeyKind?alt=com.microsoft.azure.management.search.AdminKeyKind&text=AdminKeyKind" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the AdminKeys object if successful. </p>
    type: <xref href="com.microsoft.azure.management.search.AdminKeys?alt=com.microsoft.azure.management.search.AdminKeys&text=AdminKeys" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.</p>

    <p></p>
  syntax: public AdminKeys regenerateAdminKeys(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  uid: com.microsoft.azure.management.search.SearchServices.regenerateAdminKeys(String,String,AdminKeyKind)
- fullName: com.microsoft.azure.management.search.SearchServices.regenerateAdminKeysAsync(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  name: regenerateAdminKeysAsync(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  nameWithType: SearchServices.regenerateAdminKeysAsync(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  parameters:
  - description: <p>The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Azure Search service associated with the specified resource group. </p>
    name: searchServiceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>Specifies which key to regenerate. Valid values include 'primary' and 'secondary'. Possible values include: 'primary', 'secondary' </p>"
    name: keyKind
    type: <xref href="com.microsoft.azure.management.search.AdminKeyKind?alt=com.microsoft.azure.management.search.AdminKeyKind&text=AdminKeyKind" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the AdminKeyResultInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.search.AdminKeys?alt=com.microsoft.azure.management.search.AdminKeys&text=AdminKeys" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.</p>

    <p></p>
  syntax: public Observable<AdminKeys> regenerateAdminKeysAsync(String resourceGroupName, String searchServiceName, AdminKeyKind keyKind)
  uid: com.microsoft.azure.management.search.SearchServices.regenerateAdminKeysAsync(String,String,AdminKeyKind)
nameWithType: SearchServices
syntax: public interface SearchServices extends SupportsCreating<SearchService.DefinitionStages.Blank>,SupportsListing<SearchService>,SupportsListingByResourceGroup<SearchService>,SupportsGettingByResourceGroup<SearchService>,SupportsGettingById<SearchService>,SupportsDeletingById,SupportsDeletingByResourceGroup,SupportsBatchCreation<SearchService>,HasManager<SearchServiceManager>,HasInner<ServicesInner>
type: interface
uid: com.microsoft.azure.management.search.SearchServices
fullName: com.microsoft.azure.management.search.SearchServices
name: SearchServices
package: com.microsoft.azure.management.search
summary: <p>Entry point to Search service management API in Azure. </p>
metadata: {}
