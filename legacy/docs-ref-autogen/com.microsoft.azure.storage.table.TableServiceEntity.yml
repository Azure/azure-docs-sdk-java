### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity()
  name: TableServiceEntity()
  nameWithType: TableServiceEntity.TableServiceEntity()
  summary: <p>Initializes an empty <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> instance. </p>
  syntax: public TableServiceEntity()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity(String partitionKey, String rowKey)
  name: TableServiceEntity(String partitionKey, String rowKey)
  nameWithType: TableServiceEntity.TableServiceEntity(String partitionKey, String rowKey)
  parameters:
  - description: <p>A <code>String</code> which represents the partition key of the <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> to be initialized. </p>
    name: partitionKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which represents the row key of the <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> to be initialized. </p>
    name: rowKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> class with the specified partition key and row key.</p>

    <p></p>
  syntax: public TableServiceEntity(String partitionKey, String rowKey)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity(String,String)
fields:
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.table.TableServiceEntity.etag
  name: etag
  nameWithType: TableServiceEntity.etag
  summary: <p>Reserved for internal use. The value of the ETag for the entity. </p>
  syntax: protected String etag= null
  uid: com.microsoft.azure.storage.table.TableServiceEntity.etag
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.table.TableServiceEntity.partitionKey
  name: partitionKey
  nameWithType: TableServiceEntity.partitionKey
  summary: <p>Reserved for internal use. The value of the partition key in the entity. </p>
  syntax: protected String partitionKey= null
  uid: com.microsoft.azure.storage.table.TableServiceEntity.partitionKey
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.table.TableServiceEntity.rowKey
  name: rowKey
  nameWithType: TableServiceEntity.rowKey
  summary: <p>Reserved for internal use. The value of the row key in the entity. </p>
  syntax: protected String rowKey= null
  uid: com.microsoft.azure.storage.table.TableServiceEntity.rowKey
- field:
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.table.TableServiceEntity.timeStamp
  name: timeStamp
  nameWithType: TableServiceEntity.timeStamp
  summary: <p>Reserved for internal use. The value of the Timestamp in the entity. </p>
  syntax: protected Date timeStamp= new Date()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.timeStamp
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.getEtag()
  name: getEtag()
  nameWithType: TableServiceEntity.getEtag()
  overridden: com.microsoft.azure.storage.table.TableEntity.getEtag()
  returns:
    description: <p>A <code>String</code> containing the ETag for the entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the ETag value to verify for the entity. This value is used to determine if the table entity has changed since it was last read from Microsoft Azure storage. The client cannot update this value on the service.</p>

    <p></p>
  syntax: public String getEtag()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.getEtag()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()
  name: getPartitionKey()
  nameWithType: TableServiceEntity.getPartitionKey()
  overridden: com.microsoft.azure.storage.table.TableEntity.getPartitionKey()
  returns:
    description: <p>A <code>String</code> containing the PartitionKey value for the entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the PartitionKey value for the entity.</p>

    <p></p>
  syntax: public String getPartitionKey()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache()
  name: getReflectedEntityCache()
  nameWithType: TableServiceEntity.getReflectedEntityCache()
  returns:
    description: <p>The <code>ConcurrentHashMap&lt;Class&lt;?&gt;, HashMap&lt;String, PropertyPair&gt;&gt;</code> representing the known entity types and their reflected entity dictionaries </p>
    type: <xref href="ConcurrentHashMap%3CClass%3C%3F%3E%2C+HashMap%3CString%2C+PropertyPair%3E%3E?alt=ConcurrentHashMap%3CClass%3C%3F%3E%2C+HashMap%3CString%2C+PropertyPair%3E%3E&text=ConcurrentHashMap%3CClass%3C%3F%3E%2C+HashMap%3CString%2C+PropertyPair%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The reflected entity cache caches known entity types and their respective reflected entity dictionaries when entities are deserialized and the payload does not include JSON metadata.</p>

    <p></p>
  syntax: protected static ConcurrentHashMap<Class<?>, HashMap<String, PropertyPair>> getReflectedEntityCache()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()
  name: getRowKey()
  nameWithType: TableServiceEntity.getRowKey()
  overridden: com.microsoft.azure.storage.table.TableEntity.getRowKey()
  returns:
    description: <p>A <code>String</code> containing the RowKey value for the entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the RowKey value for the entity.</p>

    <p></p>
  syntax: public String getRowKey()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()
  name: getTimestamp()
  nameWithType: TableServiceEntity.getTimestamp()
  overridden: com.microsoft.azure.storage.table.TableEntity.getTimestamp()
  returns:
    description: <p>A <code>java.util.Date</code> object which represents the Timestamp value for the entity. </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Timestamp for the entity. The server manages the value of Timestamp, which cannot be modified.</p>

    <p></p>
  syntax: public Date getTimestamp()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled()
  name: isReflectedEntityCacheDisabled()
  nameWithType: TableServiceEntity.isReflectedEntityCacheDisabled()
  returns:
    description: >-
      <p>

        <code>true</code> if the reflected entity cache is disabled; otherwise, <code>false</code>. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a value indicating whether or not the reflected entity cache is disabled. For most scenarios, disabling the reflected entity cache is not recommended due to its effect on performance.</p>

    <p>The reflected entity cache stores known entity types and their respective reflected entity dictionaries. Rather than using reflection on a known entity type, the values from the dictionary are used instead.</p>

    <p></p>
  syntax: public static boolean isReflectedEntityCacheDisabled()
  uid: com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled()
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  name: readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  nameWithType: TableServiceEntity.readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  overridden: com.microsoft.azure.storage.table.TableEntity.readEntity(HashMap<String, EntityProperty>,OperationContext)
  parameters:
  - description: <p>The <code>java.util.HashMap</code> of <code>String</code> property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data values to deserialize and store in this table entity instance. </p>
    name: properties
    type: final HashMap&lt;String, <xref href="com.microsoft.azure.storage.table.EntityProperty?alt=com.microsoft.azure.storage.table.EntityProperty&text=EntityProperty" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object used to track the execution of the operation. </p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>if an error occurs during the deserialization. </p>
  summary: >-
    <p>Populates this table entity instance using the map of property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values. </p>

    <p>This method invokes <xref uid="com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(final Object,final HashMap&lt;String, EntityProperty&gt;,final OperationContext)" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity#readEntityWithReflection"></xref> to populate the table entity instance the method is called on using reflection. Table entity classes that extend <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> can take advantage of this behavior by implementing getter and setter methods for the particular properties of the table entity in Microsoft Azure storage the class represents. </p>

    <p>Override this method in classes that extend <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> to invoke custom serialization code.</p>

    <p></p>
  syntax: public void readEntity(final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.readEntity(final HashMap<String, EntityProperty>,final OperationContext)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  name: readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  nameWithType: TableServiceEntity.readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  parameters:
  - description: <p>An <code>Object</code> reference to an instance of a class implementing <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to deserialize the table entity data into. </p>
    name: instance
    type: <xref href="final+Object?alt=final+Object&text=final+Object" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.util.HashMap</code> object which maps <code>String</code> property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> objects containing typed data values to deserialize into the instance parameter object. </p>
    name: properties
    type: final HashMap&lt;String, <xref href="com.microsoft.azure.storage.table.EntityProperty?alt=com.microsoft.azure.storage.table.EntityProperty&text=EntityProperty" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation.</p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the table entity response received is invalid or improperly formatted. </p>
  - type: <xref href="IllegalAccessException?alt=IllegalAccessException&text=IllegalAccessException" data-throw-if-not-resolved="False"/>
    description: <p>if the table entity threw an exception during deserialization. </p>
  - type: <xref href="InvocationTargetException?alt=InvocationTargetException&text=InvocationTargetException" data-throw-if-not-resolved="False"/>
    description: <p>if a method invoked on the instance parameter threw an exception during deserialization. </p>
  summary: >-
    <p>Deserializes the table entity property map into the specified object instance using reflection. </p>

    <p>This static method takes an object instance that represents a table entity type and uses reflection on its class type to find methods to deserialize the data from the property map into the instance. </p>

    <p>Each property name and data type in the properties map is compared with the methods in the class type for a pair of getter and setter methods to use for serialization and deserialization. The class is scanned for methods with names that match the property name with "get" and "set" prepended, or with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation set with the property name. The methods must have return types or parameter data types that match the data type of the corresponding <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> value. If such a pair is found, the data is copied into the instance object by invoking the setter method on the instance. Properties that do not match a method pair by name and data type are not copied.</p>

    <p></p>
  syntax: public static void readEntityWithReflection(final Object instance, final HashMap<String, EntityProperty> properties, final OperationContext opContext)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(final Object,final HashMap<String, EntityProperty>,final OperationContext)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.setEtag(final String etag)
  name: setEtag(final String etag)
  nameWithType: TableServiceEntity.setEtag(final String etag)
  overridden: com.microsoft.azure.storage.table.TableEntity.setEtag(String)
  parameters:
  - description: <p>A <code>String</code> containing the ETag for the entity. </p>
    name: etag
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the ETag value to verify for the entity. This value is used to determine if the table entity has changed since it was last read from Microsoft Azure storage. The client cannot update this value on the service.</p>

    <p></p>
  syntax: public void setEtag(final String etag)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.setEtag(final String)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(final String partitionKey)
  name: setPartitionKey(final String partitionKey)
  nameWithType: TableServiceEntity.setPartitionKey(final String partitionKey)
  overridden: com.microsoft.azure.storage.table.TableEntity.setPartitionKey(String)
  parameters:
  - description: <p>A <code>String</code> containing the PartitionKey value for the entity. </p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the PartitionKey value for the entity.</p>

    <p></p>
  syntax: public void setPartitionKey(final String partitionKey)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(final String)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)
  name: setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)
  nameWithType: TableServiceEntity.setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)
  parameters:
  - description: >-
      <p>

        <code>true</code> to disable the reflected entity cache; otherwise, <code>false</code>. </p>
    name: disableReflectedEntityCache
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a boolean representing whether or not the reflected entity cache is disabled. For most scenarios, disabling the reflected entity cache is not recommended due to its effect on performance.</p>

    <p>The reflected entity cache stores known entity types and their respective reflected entity dictionaries. Rather than using reflection on a known entity type, the values from the dictionary are used instead.</p>

    <p></p>
  syntax: public static void setReflectedEntityCacheDisabled(boolean disableReflectedEntityCache)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled(boolean)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(final String rowKey)
  name: setRowKey(final String rowKey)
  nameWithType: TableServiceEntity.setRowKey(final String rowKey)
  overridden: com.microsoft.azure.storage.table.TableEntity.setRowKey(String)
  parameters:
  - description: <p>A <code>String</code> containing the RowKey value for the entity. </p>
    name: rowKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the RowKey value for the entity.</p>

    <p></p>
  syntax: public void setRowKey(final String rowKey)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(final String)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(final Date timeStamp)
  name: setTimestamp(final Date timeStamp)
  nameWithType: TableServiceEntity.setTimestamp(final Date timeStamp)
  overridden: com.microsoft.azure.storage.table.TableEntity.setTimestamp(Date)
  parameters:
  - description: <p>A <code>java.util.Date</code> containing the <code>timeStamp</code> value for the entity. </p>
    name: timeStamp
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the  value for the entity. Note that the timestamp property is a read-only property, set by the service only.</p>

    <p></p>
  syntax: public void setTimestamp(final Date timeStamp)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(final Date)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(final OperationContext opContext)
  name: writeEntity(final OperationContext opContext)
  nameWithType: TableServiceEntity.writeEntity(final OperationContext opContext)
  overridden: com.microsoft.azure.storage.table.TableEntity.writeEntity(OperationContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object used to track the execution of the operation. </p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>if an error occurs during the serialization. </p>
  returns:
    description: <p>A <code>java.util.HashMap</code> of <code>String</code> property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values representing the properties serialized from this table entity instance. </p>
    type: HashMap&lt;String, <xref href="com.microsoft.azure.storage.table.EntityProperty?alt=com.microsoft.azure.storage.table.EntityProperty&text=EntityProperty" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a map of property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> data typed values created by serializing this table entity instance. </p>

    <p>This method invokes <xref uid="com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(final Object)" data-throw-if-not-resolved="false" data-raw-source="writeEntityWithReflection"></xref> to serialize the table entity instance the method is called on using reflection. Table entity classes that extend <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> can take advantage of this behavior by implementing getter and setter methods for the particular properties of the table entity in Microsoft Azure storage the class represents. Note that the property names "PartitionKey", "RowKey", and "Timestamp" are reserved and will be ignored if set on other methods with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation. </p>

    <p>Override this method in classes that extend <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> to invoke custom serialization code.</p>

    <p></p>
  syntax: public HashMap<String, EntityProperty> writeEntity(final OperationContext opContext)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(final OperationContext)
- fullName: com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(final Object instance)
  name: writeEntityWithReflection(final Object instance)
  nameWithType: TableServiceEntity.writeEntityWithReflection(final Object instance)
  parameters:
  - description: <p>An <code>Object</code> reference to an instance of a class implementing <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> to serialize the table entity data from. </p>
    name: instance
    type: <xref href="final+Object?alt=final+Object&text=final+Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the table entity is invalid or improperly formatted. </p>
  - type: <xref href="IllegalAccessException?alt=IllegalAccessException&text=IllegalAccessException" data-throw-if-not-resolved="False"/>
    description: <p>if the table entity threw an exception during serialization. </p>
  - type: <xref href="InvocationTargetException?alt=InvocationTargetException&text=InvocationTargetException" data-throw-if-not-resolved="False"/>
    description: <p>if a method invoked on the instance parameter threw an exception during serialization. </p>
  returns:
    description: <p>A <code>java.util.HashMap</code> object which maps <code>String</code> property names to <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> objects containing typed data values serialized from the instance parameter object.</p>
    type: HashMap&lt;String, <xref href="com.microsoft.azure.storage.table.EntityProperty?alt=com.microsoft.azure.storage.table.EntityProperty&text=EntityProperty" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Serializes the property data from a table entity instance into a property map using reflection. </p>

    <p>This static method takes an object instance that represents a table entity type and uses reflection on its class type to find methods to serialize the data from the instance into the property map. </p>

    <p>Each property name and data type in the properties map is compared with the methods in the class type for a pair of getter and setter methods to use for serialization and deserialization. The class is scanned for methods with names that match the property name with "get" and "set" prepended, or with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation set with the property name. The methods must have return types or parameter data types that match the data type of the corresponding <xref uid="com.microsoft.azure.storage.table.EntityProperty" data-throw-if-not-resolved="false" data-raw-source="EntityProperty"></xref> value. If such a pair is found, the data is copied from the instance object by invoking the getter method on the instance. Properties that do not have a method pair with matching name and data type are not copied.</p>

    <p></p>
  syntax: public static HashMap<String, EntityProperty> writeEntityWithReflection(final Object instance)
  uid: com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(final Object)
nameWithType: TableServiceEntity
syntax: public class TableServiceEntity implements TableEntity
type: class
uid: com.microsoft.azure.storage.table.TableServiceEntity
fullName: com.microsoft.azure.storage.table.TableServiceEntity
name: TableServiceEntity
package: com.microsoft.azure.storage.table
summary: >-
  <p>The <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> class represents the base object type for a table entity in the Storage service. <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> provides a base implementation for the <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> interface that provides  and  methods that by default serialize and deserialize all properties via reflection. A table entity class may extend this class and override the  and  methods to provide customized or more performant serialization logic. </p>

  <p>The use of reflection allows subclasses of <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false" data-raw-source="TableServiceEntity"></xref> to be serialized and deserialized without having to implement the serialization code themselves. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. To take advantage of the automatic serialization code, your table entity classes should provide getter and setter methods for each property in the corresponding table entity in Microsoft Azure table storage. The reflection code looks for getter and setter methods in pairs of the form </p>

  <p></p>

  <p>and </p>

  <p></p>

  <p>where <em>PropertyName</em> is a property name for the table entity, and <em>type</em> is a Java type compatible with the EDM data type of the property. See the table below for a map of property types to their Java equivalents. The <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation may be applied with a  attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the  attribute of <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid="com.microsoft.azure.storage.table.Ignore" data-throw-if-not-resolved="false" data-raw-source="Ignore"></xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names "PartitionKey", "RowKey", "Timestamp", and "Etag" are reserved and will be ignored if set with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false" data-raw-source="StoreAs"></xref> annotation in a subclass. </p>

  <p>The following table shows the supported property data types in Microsoft Azure storage and the corresponding Java types when deserialized. <table rows="9" cols="4"><caption>Supported property data types in Microsoft Azure storage</caption><row><entry thead="yes"><p>Storage Type </p></entry><entry thead="yes"><p>EdmType Value </p></entry><entry thead="yes"><p>Java Type </p></entry><entry thead="yes"><p>Description  </p></entry></row><row><entry thead="no"><p><b>Edm.Binary</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.BINARY" data-throw-if-not-resolved="false" data-raw-source="EdmType#BINARY"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>An array of bytes up to 64 KB in size.  </p></entry></row><row><entry thead="no"><p><b>Edm.Boolean</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.BOOLEAN" data-throw-if-not-resolved="false" data-raw-source="EdmType#BOOLEAN"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A Boolean value.  </p></entry></row><row><entry thead="no"><p><b>Edm.DateTime</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.DATE_TIME" data-throw-if-not-resolved="false" data-raw-source="EdmType#DATE_TIME"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 64-bit value expressed as Coordinated Universal Time (UTC). The supported range begins from 12:00 midnight, January 1, 1601 A.D. (C.E.), UTC. The range ends at December 31, 9999.  </p></entry></row><row><entry thead="no"><p><b>Edm.Double</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.DOUBLE" data-throw-if-not-resolved="false" data-raw-source="EdmType#DOUBLE"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 64-bit double-precision floating point value.  </p></entry></row><row><entry thead="no"><p><b>Edm.Guid</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.GUID" data-throw-if-not-resolved="false" data-raw-source="EdmType#GUID"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 128-bit globally unique identifier.  </p></entry></row><row><entry thead="no"><p><b>Edm.Int32</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.INT32" data-throw-if-not-resolved="false" data-raw-source="EdmType#INT32"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 32-bit integer value.  </p></entry></row><row><entry thead="no"><p><b>Edm.Int64</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.INT64" data-throw-if-not-resolved="false" data-raw-source="EdmType#INT64"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 64-bit integer value.  </p></entry></row><row><entry thead="no"><p><b>Edm.String</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.STRING" data-throw-if-not-resolved="false" data-raw-source="EdmType#STRING"></xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A UTF-16-encoded value. String values may be up to 64 KB in size.  </p></entry></row></table></p>

  <p>See the MSDN topic <a href="http://msdn.microsoft.com//library/azure/dd179338.aspx">Understanding the Table Service Data Model</a> for an overview of tables, entities, and properties as used in the Microsoft Azure Storage service. </p>

  <p>For an overview of the available EDM primitive data types and names, see the</p>

  <p>

    <a href="http://www.odata.org/developers/protocols/overview#AbstractTypeSystem">Primitive Data Types</a> section of the <a href="http://www.odata.org/developers/protocols/overview">OData Protocol Overview</a>. </p>

  <p></p>
metadata: {}
