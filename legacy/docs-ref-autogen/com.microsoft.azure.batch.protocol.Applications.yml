### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.Applications.get(String applicationId)
  name: get(String applicationId)
  nameWithType: Applications.get(String applicationId)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ApplicationSummary get(String applicationId)
  uid: com.microsoft.azure.batch.protocol.Applications.get(String)
- fullName: com.microsoft.azure.batch.protocol.Applications.get(String applicationId, ApplicationGetOptions applicationGetOptions)
  name: get(String applicationId, ApplicationGetOptions applicationGetOptions)
  nameWithType: Applications.get(String applicationId, ApplicationGetOptions applicationGetOptions)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ApplicationGetOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationGetOptions&text=ApplicationGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ApplicationSummary get(String applicationId, ApplicationGetOptions applicationGetOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.get(String,ApplicationGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.getAsync(String applicationId)
  name: getAsync(String applicationId)
  nameWithType: Applications.getAsync(String applicationId)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ApplicationSummary> getAsync(String applicationId)
  uid: com.microsoft.azure.batch.protocol.Applications.getAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Applications.getAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  name: getAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  nameWithType: Applications.getAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ApplicationGetOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationGetOptions&text=ApplicationGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ApplicationSummary> getAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.getAsync(String,ApplicationGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.getAsync(String applicationId, ApplicationGetOptions applicationGetOptions, final ServiceCallback<ApplicationSummary> serviceCallback)
  name: getAsync(String applicationId, ApplicationGetOptions applicationGetOptions, final ServiceCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.getAsync(String applicationId, ApplicationGetOptions applicationGetOptions, final ServiceCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ApplicationGetOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationGetOptions&text=ApplicationGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationSummary> getAsync(String applicationId, ApplicationGetOptions applicationGetOptions, final ServiceCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.getAsync(String,ApplicationGetOptions,final ServiceCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.getAsync(String applicationId, final ServiceCallback<ApplicationSummary> serviceCallback)
  name: getAsync(String applicationId, final ServiceCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.getAsync(String applicationId, final ServiceCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationSummary> getAsync(String applicationId, final ServiceCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.getAsync(String,final ServiceCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.getWithServiceResponseAsync(String applicationId)
  name: getWithServiceResponseAsync(String applicationId)
  nameWithType: Applications.getWithServiceResponseAsync(String applicationId)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationSummary object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ApplicationGetHeaders?alt=com.microsoft.azure.batch.protocol.models.ApplicationGetHeaders&text=ApplicationGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<ApplicationSummary, ApplicationGetHeaders>> getWithServiceResponseAsync(String applicationId)
  uid: com.microsoft.azure.batch.protocol.Applications.getWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Applications.getWithServiceResponseAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  name: getWithServiceResponseAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  nameWithType: Applications.getWithServiceResponseAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  parameters:
  - description: <p>The ID of the application. </p>
    name: applicationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ApplicationGetOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationGetOptions&text=ApplicationGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationSummary object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ApplicationGetHeaders?alt=com.microsoft.azure.batch.protocol.models.ApplicationGetHeaders&text=ApplicationGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified application. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<ApplicationSummary, ApplicationGetHeaders>> getWithServiceResponseAsync(String applicationId, ApplicationGetOptions applicationGetOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.getWithServiceResponseAsync(String,ApplicationGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.list()
  name: list()
  nameWithType: Applications.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationSummary&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public PagedList<ApplicationSummary> list()
  uid: com.microsoft.azure.batch.protocol.Applications.list()
- fullName: com.microsoft.azure.batch.protocol.Applications.list(final ApplicationListOptions applicationListOptions)
  name: list(final ApplicationListOptions applicationListOptions)
  nameWithType: Applications.list(final ApplicationListOptions applicationListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: applicationListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListOptions&text=ApplicationListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationSummary&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public PagedList<ApplicationSummary> list(final ApplicationListOptions applicationListOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.list(final ApplicationListOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync()
  name: listAsync()
  nameWithType: Applications.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationSummary>> listAsync()
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync()
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions applicationListOptions)
  name: listAsync(final ApplicationListOptions applicationListOptions)
  nameWithType: Applications.listAsync(final ApplicationListOptions applicationListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: applicationListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListOptions&text=ApplicationListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationSummary>> listAsync(final ApplicationListOptions applicationListOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  name: listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: applicationListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListOptions&text=ApplicationListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationSummary>> listAsync(final ApplicationListOptions applicationListOptions, final ListOperationCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync(final ApplicationListOptions,final ListOperationCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  name: listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationSummary>> listAsync(final ListOperationCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.listAsync(final ListOperationCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Applications.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationSummary&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public PagedList<ApplicationSummary> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Applications.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNext(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  name: listNext(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  nameWithType: Applications.listNext(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions&text=ApplicationListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationSummary&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public PagedList<ApplicationSummary> listNext(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.listNext(final String,final ApplicationListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Applications.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationSummary>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  name: listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  nameWithType: Applications.listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions&text=ApplicationListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationSummary>> listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String,final ApplicationListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions&text=ApplicationListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationSummary>> listNextAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String,final ApplicationListNextOptions,final ServiceFuture<List<ApplicationSummary>>,final ListOperationCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  nameWithType: Applications.listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationSummary>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationSummary>> serviceFuture, final ListOperationCallback<ApplicationSummary> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Applications.listNextAsync(final String,final ServiceFuture<List<ApplicationSummary>>,final ListOperationCallback<ApplicationSummary>)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Applications.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListHeaders?alt=com.microsoft.azure.batch.protocol.models.ApplicationListHeaders&text=ApplicationListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ApplicationSummary>, ApplicationListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Applications.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Applications.listNextWithServiceResponseAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  nameWithType: Applications.listNextWithServiceResponseAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: applicationListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListNextOptions&text=ApplicationListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListHeaders?alt=com.microsoft.azure.batch.protocol.models.ApplicationListHeaders&text=ApplicationListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ApplicationSummary>, ApplicationListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final ApplicationListNextOptions applicationListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.listNextWithServiceResponseAsync(final String,final ApplicationListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Applications.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: Applications.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListHeaders?alt=com.microsoft.azure.batch.protocol.models.ApplicationListHeaders&text=ApplicationListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ApplicationSummary>, ApplicationListHeaders>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Applications.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Applications.listWithServiceResponseAsync(final ApplicationListOptions applicationListOptions)
  name: listWithServiceResponseAsync(final ApplicationListOptions applicationListOptions)
  nameWithType: Applications.listWithServiceResponseAsync(final ApplicationListOptions applicationListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: applicationListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListOptions?alt=com.microsoft.azure.batch.protocol.models.ApplicationListOptions&text=ApplicationListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationSummary&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationSummary?alt=com.microsoft.azure.batch.protocol.models.ApplicationSummary&text=ApplicationSummary" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ApplicationListHeaders?alt=com.microsoft.azure.batch.protocol.models.ApplicationListHeaders&text=ApplicationListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications available in the specified account. This operation returns only applications and versions that are available for use on compute nodes; that is, that can be used in an application package reference. For administrator information about applications and versions that are not yet available to compute nodes, use the Azure portal or the Azure Resource Manager API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ApplicationSummary>, ApplicationListHeaders>> listWithServiceResponseAsync(final ApplicationListOptions applicationListOptions)
  uid: com.microsoft.azure.batch.protocol.Applications.listWithServiceResponseAsync(final ApplicationListOptions)
nameWithType: Applications
syntax: public interface Applications
type: interface
uid: com.microsoft.azure.batch.protocol.Applications
fullName: com.microsoft.azure.batch.protocol.Applications
name: Applications
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in Applications. </p>
metadata: {}
