### YamlMime:JavaType
constructors:
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.ConversationTranslator()
  name: ConversationTranslator()
  nameWithType: ConversationTranslator.ConversationTranslator()
  summary: <p>Creates a new instance of the Conversation Translator using the default microphone input. </p>
  syntax: public ConversationTranslator()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.ConversationTranslator()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.ConversationTranslator(AudioConfig audioConfig)
  name: ConversationTranslator(AudioConfig audioConfig)
  nameWithType: ConversationTranslator.ConversationTranslator(AudioConfig audioConfig)
  parameters:
  - description: <p>Audio configuration. </p>
    name: audioConfig
    type: <xref href="com.microsoft.cognitiveservices.speech.audio.AudioConfig?alt=com.microsoft.cognitiveservices.speech.audio.AudioConfig&text=AudioConfig" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new instance of the Conversation Translator.</p>

    <p></p>
  syntax: public ConversationTranslator(AudioConfig audioConfig)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.ConversationTranslator(AudioConfig)
fields:
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationCanceledEventArgs?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationCanceledEventArgs&text=ConversationTranslationCanceledEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.canceled
  name: canceled
  nameWithType: ConversationTranslator.canceled
  summary: <p>Event that signals an error with the conversation translation, or the end of the audio stream has been reached. </p>
  syntax: >-
    public final EventHandlerImpl<ConversationTranslationCanceledEventArgs> canceled=
                new EventHandlerImpl<ConversationTranslationCanceledEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.canceled
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationExpirationEventArgs?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationExpirationEventArgs&text=ConversationExpirationEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.conversationExpiration
  name: conversationExpiration
  nameWithType: ConversationTranslator.conversationExpiration
  summary: <p>Event that signals how many more minutes are left before the conversation expires. </p>
  syntax: >-
    public final EventHandlerImpl<ConversationExpirationEventArgs> conversationExpiration=
                new EventHandlerImpl<ConversationExpirationEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.conversationExpiration
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationParticipantsChangedEventArgs?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationParticipantsChangedEventArgs&text=ConversationParticipantsChangedEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.participantsChanged
  name: participantsChanged
  nameWithType: ConversationTranslator.participantsChanged
  summary: <p>Event that signals participants in the room have changed (e.g. a new participant joined). </p>
  syntax: >-
    public final EventHandlerImpl<ConversationParticipantsChangedEventArgs> participantsChanged=
                new EventHandlerImpl<ConversationParticipantsChangedEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.participantsChanged
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SessionEventArgs?alt=com.microsoft.cognitiveservices.speech.SessionEventArgs&text=SessionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.sessionStarted
  name: sessionStarted
  nameWithType: ConversationTranslator.sessionStarted
  summary: <p>Event that signals the start of a conversation translation session. </p>
  syntax: >-
    public final EventHandlerImpl<SessionEventArgs> sessionStarted=
                new EventHandlerImpl<SessionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.sessionStarted
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.SessionEventArgs?alt=com.microsoft.cognitiveservices.speech.SessionEventArgs&text=SessionEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.sessionStopped
  name: sessionStopped
  nameWithType: ConversationTranslator.sessionStopped
  summary: <p>Event that signals the end of a conversation translation session. </p>
  syntax: >-
    public final EventHandlerImpl<SessionEventArgs> sessionStopped=
                new EventHandlerImpl<SessionEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.sessionStopped
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationEventArgs?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationEventArgs&text=ConversationTranslationEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.textMessageReceived
  name: textMessageReceived
  nameWithType: ConversationTranslator.textMessageReceived
  summary: <p>Event that signals a translated text message from a conversation participant. </p>
  syntax: >-
    public final EventHandlerImpl<ConversationTranslationEventArgs> textMessageReceived=
                new EventHandlerImpl<ConversationTranslationEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.textMessageReceived
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationEventArgs?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationEventArgs&text=ConversationTranslationEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.transcribed
  name: transcribed
  nameWithType: ConversationTranslator.transcribed
  summary: <p>Event that signals a final conversation translation result is available for a conversation participant. </p>
  syntax: >-
    public final EventHandlerImpl<ConversationTranslationEventArgs> transcribed=
                new EventHandlerImpl<ConversationTranslationEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.transcribed
- field:
    type: final EventHandlerImpl&lt;<xref href="com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationEventArgs?alt=com.microsoft.cognitiveservices.speech.transcription.ConversationTranslationEventArgs&text=ConversationTranslationEventArgs" data-throw-if-not-resolved="False"/>&gt;
  fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.transcribing
  name: transcribing
  nameWithType: ConversationTranslator.transcribing
  summary: <p>Event that signals an intermediate conversation translation result is available for a conversation participant. </p>
  syntax: >-
    public final EventHandlerImpl<ConversationTranslationEventArgs> transcribing=
                new EventHandlerImpl<ConversationTranslationEventArgs>(eventCounter)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.transcribing
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.close()
  name: close()
  nameWithType: ConversationTranslator.close()
  summary: '<p>Dispose of associated resources. Note: close() must be called in order to relinquish underlying resources held by the object. </p>'
  syntax: public void close()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.close()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.getAuthorizationToken()
  name: getAuthorizationToken()
  nameWithType: ConversationTranslator.getAuthorizationToken()
  returns:
    description: <p>The authorization token </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the Cognitive Speech authorization token. </p>
  syntax: public String getAuthorizationToken()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.getAuthorizationToken()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.getProperties()
  name: getProperties()
  nameWithType: ConversationTranslator.getProperties()
  returns:
    description: <p>The collection or properties and their values defined for this ConversationTranslator. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.PropertyCollection?alt=com.microsoft.cognitiveservices.speech.PropertyCollection&text=PropertyCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The collection or properties and their values defined for this ConversationTranslator.</p>

    <p></p>
  syntax: public PropertyCollection getProperties()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.getProperties()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.getSpeechRecognitionLanguage()
  name: getSpeechRecognitionLanguage()
  nameWithType: ConversationTranslator.getSpeechRecognitionLanguage()
  returns:
    description: <p>The language name that is used for recognition. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the language name that is used for recognition.</p>

    <p></p>
  syntax: public String getSpeechRecognitionLanguage()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.getSpeechRecognitionLanguage()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(Conversation conversation, final String nickname)
  name: joinConversationAsync(Conversation conversation, final String nickname)
  nameWithType: ConversationTranslator.joinConversationAsync(Conversation conversation, final String nickname)
  parameters:
  - description: <p>The Conversation to join. </p>
    name: conversation
    type: <xref href="com.microsoft.cognitiveservices.speech.transcription.Conversation?alt=com.microsoft.cognitiveservices.speech.transcription.Conversation&text=Conversation" data-throw-if-not-resolved="False"/>
  - description: <p>The display name to use for the current participant. </p>
    name: nickname
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the join operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Joins an existing conversation. You should use this method if you have created a conversation using CreateConversationAsync(SpeechConfig, String).</p>

    <p></p>
  syntax: public Future<Void> joinConversationAsync(Conversation conversation, final String nickname)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(Conversation,final String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(final String conversationId, final String nickname, final String language)
  name: joinConversationAsync(final String conversationId, final String nickname, final String language)
  nameWithType: ConversationTranslator.joinConversationAsync(final String conversationId, final String nickname, final String language)
  parameters:
  - description: <p>The unique identifier for the conversation to join. </p>
    name: conversationId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The display name to use for the current participant. </p>
    name: nickname
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The speech language to use for the current participant. </p>
    name: language
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the join operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Joins an existing conversation. You should use this method if you have created a conversation using CreateConversationAsync(SpeechConfig, String).</p>

    <p></p>
  syntax: public Future<Void> joinConversationAsync(final String conversationId, final String nickname, final String language)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.joinConversationAsync(final String,final String,final String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.leaveConversationAsync()
  name: leaveConversationAsync()
  nameWithType: ConversationTranslator.leaveConversationAsync()
  returns:
    description: <p>A task representing the leave operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Leave the current conversation. After this is called, you will no longer receive any events.</p>

    <p></p>
  syntax: public Future<Void> leaveConversationAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.leaveConversationAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.sendTextMessageAsync(final String message)
  name: sendTextMessageAsync(final String message)
  nameWithType: ConversationTranslator.sendTextMessageAsync(final String message)
  parameters:
  - description: <p>The message to send. </p>
    name: message
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task representing the send message operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends an instant message to all participants in the conversation. This instant message will be translated into each participant's text language.</p>

    <p></p>
  syntax: public Future<Void> sendTextMessageAsync(final String message)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.sendTextMessageAsync(final String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.setAuthorizationToken(final String authToken, final String region)
  name: setAuthorizationToken(final String authToken, final String region)
  nameWithType: ConversationTranslator.setAuthorizationToken(final String authToken, final String region)
  parameters:
  - description: <p>The authorization token. </p>
    name: authToken
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure region for this token. </p>
    name: region
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the Cognitive Speech authorization token that will be used for connecting to the server. </p>
  syntax: public void setAuthorizationToken(final String authToken, final String region)
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.setAuthorizationToken(final String,final String)
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.startTranscribingAsync()
  name: startTranscribingAsync()
  nameWithType: ConversationTranslator.startTranscribingAsync()
  returns:
    description: <p>A task representing the transcribe operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Starts sending audio to the conversation service for speech recognition and translation. You should subscribe to the Transcribing, and Transcribed events to receive conversation translation results for yourself, and other participants in the conversation. </p>
  syntax: public Future<Void> startTranscribingAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.startTranscribingAsync()
- fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.stopTranscribingAsync()
  name: stopTranscribingAsync()
  nameWithType: ConversationTranslator.stopTranscribingAsync()
  returns:
    description: <p>A task representing the transcribe operation </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Stops sending audio to the conversation service. You will still receive Transcribing, and Transcribed events for other participants in the conversation. </p>
  syntax: public Future<Void> stopTranscribingAsync()
  uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator.stopTranscribingAsync()
nameWithType: ConversationTranslator
syntax: public class ConversationTranslator
type: class
uid: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator
fullName: com.microsoft.cognitiveservices.speech.transcription.ConversationTranslator
name: ConversationTranslator
package: com.microsoft.cognitiveservices.speech.transcription
summary: "<p>A conversation translator that enables a connected experience where participants can use their own devices to see everyone else's recognitions and IMs in their own languages. Participants can also speak and send IMs to others. Note: close() must be called in order to release underlying resources held by the object. Added in version 1.12.0 </p>"
metadata: {}
