### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.affinityInfo()
  name: affinityInfo()
  nameWithType: TaskAddParameter.affinityInfo()
  returns:
    description: <p>the affinityInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AffinityInformation?alt=com.microsoft.azure.batch.protocol.models.AffinityInformation&text=AffinityInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the affinityInfo value.</p>

    <p></p>
  syntax: public AffinityInformation affinityInfo()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.affinityInfo()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.applicationPackageReferences()
  name: applicationPackageReferences()
  nameWithType: TaskAddParameter.applicationPackageReferences()
  returns:
    description: <p>the applicationPackageReferences value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.</p>

    <p></p>
  syntax: public List<ApplicationPackageReference> applicationPackageReferences()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.applicationPackageReferences()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.authenticationTokenSettings()
  name: authenticationTokenSettings()
  nameWithType: TaskAddParameter.authenticationTokenSettings()
  returns:
    description: <p>the authenticationTokenSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.</p>

    <p></p>
  syntax: public AuthenticationTokenSettings authenticationTokenSettings()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.authenticationTokenSettings()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.commandLine()
  name: commandLine()
  nameWithType: TaskAddParameter.commandLine()
  returns:
    description: <p>the commandLine value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get for multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public String commandLine()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.commandLine()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.constraints()
  name: constraints()
  nameWithType: TaskAddParameter.constraints()
  returns:
    description: <p>the constraints value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the job, the maxWallClockTime is infinite, and the retentionTime is 7 days.</p>

    <p></p>
  syntax: public TaskConstraints constraints()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.constraints()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.containerSettings()
  name: containerSettings()
  nameWithType: TaskAddParameter.containerSettings()
  returns:
    description: <p>the containerSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskContainerSettings containerSettings()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.containerSettings()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.dependsOn()
  name: dependsOn()
  nameWithType: TaskAddParameter.dependsOn()
  returns:
    description: <p>the dependsOn value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDependencies?alt=com.microsoft.azure.batch.protocol.models.TaskDependencies&text=TaskDependencies" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled. If the job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.</p>

    <p></p>
  syntax: public TaskDependencies dependsOn()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.dependsOn()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.displayName()
  name: displayName()
  nameWithType: TaskAddParameter.displayName()
  returns:
    description: <p>the displayName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public String displayName()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.displayName()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.environmentSettings()
  name: environmentSettings()
  nameWithType: TaskAddParameter.environmentSettings()
  returns:
    description: <p>the environmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the environmentSettings value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> environmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.environmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.exitConditions()
  name: exitConditions()
  nameWithType: TaskAddParameter.exitConditions()
  returns:
    description: <p>the exitConditions value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ExitConditions?alt=com.microsoft.azure.batch.protocol.models.ExitConditions&text=ExitConditions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get how the Batch service should respond when the task completes.</p>

    <p></p>
  syntax: public ExitConditions exitConditions()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.exitConditions()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.id()
  name: id()
  nameWithType: TaskAddParameter.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.id()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.multiInstanceSettings()
  name: multiInstanceSettings()
  nameWithType: TaskAddParameter.multiInstanceSettings()
  returns:
    description: <p>the multiInstanceSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.MultiInstanceSettings?alt=com.microsoft.azure.batch.protocol.models.MultiInstanceSettings&text=MultiInstanceSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the multiInstanceSettings value.</p>

    <p></p>
  syntax: public MultiInstanceSettings multiInstanceSettings()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.multiInstanceSettings()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.outputFiles()
  name: outputFiles()
  nameWithType: TaskAddParameter.outputFiles()
  returns:
    description: <p>the outputFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get for multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.</p>

    <p></p>
  syntax: public List<OutputFile> outputFiles()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.outputFiles()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.resourceFiles()
  name: resourceFiles()
  nameWithType: TaskAddParameter.resourceFiles()
  returns:
    description: <p>the resourceFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get for multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public List<ResourceFile> resourceFiles()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.resourceFiles()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.userIdentity()
  name: userIdentity()
  nameWithType: TaskAddParameter.userIdentity()
  returns:
    description: <p>the userIdentity value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public UserIdentity userIdentity()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.userIdentity()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withAffinityInfo(AffinityInformation affinityInfo)
  name: withAffinityInfo(AffinityInformation affinityInfo)
  nameWithType: TaskAddParameter.withAffinityInfo(AffinityInformation affinityInfo)
  parameters:
  - description: <p>the affinityInfo value to set </p>
    name: affinityInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.AffinityInformation?alt=com.microsoft.azure.batch.protocol.models.AffinityInformation&text=AffinityInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the affinityInfo value.</p>

    <p></p>
  syntax: public TaskAddParameter withAffinityInfo(AffinityInformation affinityInfo)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withAffinityInfo(AffinityInformation)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  name: withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  nameWithType: TaskAddParameter.withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  parameters:
  - description: <p>the applicationPackageReferences value to set </p>
    name: applicationPackageReferences
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ApplicationPackageReference?alt=com.microsoft.azure.batch.protocol.models.ApplicationPackageReference&text=ApplicationPackageReference" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set application packages are downloaded and deployed to a shared directory, not the task working directory. Therefore, if a referenced package is already on the compute node, and is up to date, then it is not re-downloaded; the existing copy on the compute node is used. If a referenced application package cannot be installed, for example because the package has been deleted or because download failed, the task fails.</p>

    <p></p>
  syntax: public TaskAddParameter withApplicationPackageReferences(List<ApplicationPackageReference> applicationPackageReferences)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withApplicationPackageReferences(List<ApplicationPackageReference>)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  name: withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  nameWithType: TaskAddParameter.withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  parameters:
  - description: <p>the authenticationTokenSettings value to set </p>
    name: authenticationTokenSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings?alt=com.microsoft.azure.batch.protocol.models.AuthenticationTokenSettings&text=AuthenticationTokenSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if this property is set, the Batch service provides the task with an authentication token which can be used to authenticate Batch service operations without requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the task can carry out using the token depend on the settings. For example, a task can request job permissions in order to add other tasks to the job, or check the status of the job or of other tasks under the job.</p>

    <p></p>
  syntax: public TaskAddParameter withAuthenticationTokenSettings(AuthenticationTokenSettings authenticationTokenSettings)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withAuthenticationTokenSettings(AuthenticationTokenSettings)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withCommandLine(String commandLine)
  name: withCommandLine(String commandLine)
  nameWithType: TaskAddParameter.withCommandLine(String commandLine)
  parameters:
  - description: <p>the commandLine value to set </p>
    name: commandLine
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the command line is executed as the primary task, after the primary task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public TaskAddParameter withCommandLine(String commandLine)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withCommandLine(String)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withConstraints(TaskConstraints constraints)
  name: withConstraints(TaskConstraints constraints)
  nameWithType: TaskAddParameter.withConstraints(TaskConstraints constraints)
  parameters:
  - description: <p>the constraints value to set </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if you do not specify constraints, the maxTaskRetryCount is the maxTaskRetryCount specified for the job, the maxWallClockTime is infinite, and the retentionTime is 7 days.</p>

    <p></p>
  syntax: public TaskAddParameter withConstraints(TaskConstraints constraints)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withConstraints(TaskConstraints)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withContainerSettings(TaskContainerSettings containerSettings)
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: TaskAddParameter.withContainerSettings(TaskContainerSettings containerSettings)
  parameters:
  - description: <p>the containerSettings value to set </p>
    name: containerSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the pool that will run this task has containerConfiguration set, this must be set as well. If the pool that will run this task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskAddParameter withContainerSettings(TaskContainerSettings containerSettings)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withContainerSettings(TaskContainerSettings)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withDependsOn(TaskDependencies dependsOn)
  name: withDependsOn(TaskDependencies dependsOn)
  nameWithType: TaskAddParameter.withDependsOn(TaskDependencies dependsOn)
  parameters:
  - description: <p>the dependsOn value to set </p>
    name: dependsOn
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDependencies?alt=com.microsoft.azure.batch.protocol.models.TaskDependencies&text=TaskDependencies" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this task will not be scheduled until all tasks that it depends on have completed successfully. If any of those tasks fail and exhaust their retry counts, this task will never be scheduled. If the job does not have usesTaskDependencies set to true, and this element is present, the request fails with error code TaskDependenciesNotSpecifiedOnJob.</p>

    <p></p>
  syntax: public TaskAddParameter withDependsOn(TaskDependencies dependsOn)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withDependsOn(TaskDependencies)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withDisplayName(String displayName)
  name: withDisplayName(String displayName)
  nameWithType: TaskAddParameter.withDisplayName(String displayName)
  parameters:
  - description: <p>the displayName value to set </p>
    name: displayName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public TaskAddParameter withDisplayName(String displayName)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withDisplayName(String)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: TaskAddParameter.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  parameters:
  - description: <p>the environmentSettings value to set </p>
    name: environmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the environmentSettings value.</p>

    <p></p>
  syntax: public TaskAddParameter withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withExitConditions(ExitConditions exitConditions)
  name: withExitConditions(ExitConditions exitConditions)
  nameWithType: TaskAddParameter.withExitConditions(ExitConditions exitConditions)
  parameters:
  - description: <p>the exitConditions value to set </p>
    name: exitConditions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ExitConditions?alt=com.microsoft.azure.batch.protocol.models.ExitConditions&text=ExitConditions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set how the Batch service should respond when the task completes.</p>

    <p></p>
  syntax: public TaskAddParameter withExitConditions(ExitConditions exitConditions)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withExitConditions(ExitConditions)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withId(String id)
  name: withId(String id)
  nameWithType: TaskAddParameter.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within a job that differ only by case).</p>

    <p></p>
  syntax: public TaskAddParameter withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  name: withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  nameWithType: TaskAddParameter.withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  parameters:
  - description: <p>the multiInstanceSettings value to set </p>
    name: multiInstanceSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.MultiInstanceSettings?alt=com.microsoft.azure.batch.protocol.models.MultiInstanceSettings&text=MultiInstanceSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the multiInstanceSettings value.</p>

    <p></p>
  syntax: public TaskAddParameter withMultiInstanceSettings(MultiInstanceSettings multiInstanceSettings)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withMultiInstanceSettings(MultiInstanceSettings)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withOutputFiles(List<OutputFile> outputFiles)
  name: withOutputFiles(List<OutputFile> outputFiles)
  nameWithType: TaskAddParameter.withOutputFiles(List<OutputFile> outputFiles)
  parameters:
  - description: <p>the outputFiles value to set </p>
    name: outputFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.OutputFile?alt=com.microsoft.azure.batch.protocol.models.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the files will only be uploaded from the compute node on which the primary task is executed.</p>

    <p></p>
  syntax: public TaskAddParameter withOutputFiles(List<OutputFile> outputFiles)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withOutputFiles(List<OutputFile>)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withResourceFiles(List<ResourceFile> resourceFiles)
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: TaskAddParameter.withResourceFiles(List<ResourceFile> resourceFiles)
  parameters:
  - description: <p>the resourceFiles value to set </p>
    name: resourceFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set for multi-instance tasks, the resource files will only be downloaded to the compute node on which the primary task is executed. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public TaskAddParameter withResourceFiles(List<ResourceFile> resourceFiles)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withResourceFiles(List<ResourceFile>)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withUserIdentity(UserIdentity userIdentity)
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: TaskAddParameter.withUserIdentity(UserIdentity userIdentity)
  parameters:
  - description: <p>the userIdentity value to set </p>
    name: userIdentity
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public TaskAddParameter withUserIdentity(UserIdentity userIdentity)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter.withUserIdentity(UserIdentity)
nameWithType: TaskAddParameter
syntax: public class TaskAddParameter
type: class
uid: com.microsoft.azure.batch.protocol.models.TaskAddParameter
fullName: com.microsoft.azure.batch.protocol.models.TaskAddParameter
name: TaskAddParameter
package: com.microsoft.azure.batch.protocol.models
summary: <p>An Azure Batch task to add. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>
metadata: {}
