### YamlMime:JavaMember
nameWithType: ActorNameFormat.getFabricServiceName
type: method
members:
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  name: getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  nameWithType: ActorNameFormat.getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class<?>&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Name of service hosting the actor type. If this value is null then service name is constructed using the actorInterfaceType. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Service Fabric service name hosting the actor type. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets name of service which hosts the actor type in Service Fabric cluster.</p>

    <p></p>
  syntax: public static String getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceName(Class<?>,String)
uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceName*
fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
name: getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
package: microsoft.servicefabric.actors
metadata: {}
