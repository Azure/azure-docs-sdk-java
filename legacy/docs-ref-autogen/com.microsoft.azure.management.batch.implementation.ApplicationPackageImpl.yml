### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.ApplicationPackageImpl(String name, ApplicationImpl parent, ApplicationPackageInner inner, ApplicationPackagesInner client)
  name: ApplicationPackageImpl(String name, ApplicationImpl parent, ApplicationPackageInner inner, ApplicationPackagesInner client)
  nameWithType: ApplicationPackageImpl.ApplicationPackageImpl(String name, ApplicationImpl parent, ApplicationPackageInner inner, ApplicationPackagesInner client)
  parameters:
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: parent
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationImpl?alt=com.microsoft.azure.management.batch.implementation.ApplicationImpl&text=ApplicationImpl" data-throw-if-not-resolved="False"/>
  - name: inner
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>
  - name: client
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner&text=ApplicationPackagesInner" data-throw-if-not-resolved="False"/>
  syntax: protected ApplicationPackageImpl(String name, ApplicationImpl parent, ApplicationPackageInner inner, ApplicationPackagesInner client)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.ApplicationPackageImpl(String,ApplicationImpl,ApplicationPackageInner,ApplicationPackagesInner)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl&lt;ApplicationPackage, ApplicationPackageInner, ApplicationImpl, Application&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasParent.parent()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
methods:
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.activate(String format)
  name: activate(String format)
  nameWithType: ApplicationPackageImpl.activate(String format)
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.activate(String)
  parameters:
  - description: <p>the format of the uploaded Batch application package, either "zip" or "tar" </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Activates the application package.</p>

    <p></p>
  syntax: public void activate(String format)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.activate(String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.activateAsync(String format)
  name: activateAsync(String format)
  nameWithType: ApplicationPackageImpl.activateAsync(String format)
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.activateAsync(String)
  parameters:
  - description: <p>the format of the uploaded Batch application package, either "zip" or "tar" </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Activates the application package asynchronously.</p>

    <p></p>
  syntax: public Completable activateAsync(String format)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.activateAsync(String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.activateAsync(String format, ServiceCallback<Void> callback)
  name: activateAsync(String format, ServiceCallback<Void> callback)
  nameWithType: ApplicationPackageImpl.activateAsync(String format, ServiceCallback<Void> callback)
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.activateAsync(String,ServiceCallback<Void>)
  parameters:
  - description: <p>the format of the uploaded Batch application package, either "zip" or "tar" </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Activates the application package asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> activateAsync(String format, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.activateAsync(String,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.createResourceAsync()
  name: createResourceAsync()
  nameWithType: ApplicationPackageImpl.createResourceAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.ApplicationPackage?alt=com.microsoft.azure.management.batch.ApplicationPackage&text=ApplicationPackage" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<ApplicationPackage> createResourceAsync()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.createResourceAsync()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.delete()
  name: delete()
  nameWithType: ApplicationPackageImpl.delete()
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.delete()
  summary: <p>Deletes the application package. </p>
  syntax: public void delete()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.delete()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.deleteResourceAsync()
  name: deleteResourceAsync()
  nameWithType: ApplicationPackageImpl.deleteResourceAsync()
  returns:
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public Observable<Void> deleteResourceAsync()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.deleteResourceAsync()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.format()
  name: format()
  nameWithType: ApplicationPackageImpl.format()
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.format()
  returns:
    description: <p>the format of the application package </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String format()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.format()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.getInnerAsync()
  name: getInnerAsync()
  nameWithType: ApplicationPackageImpl.getInnerAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  syntax: protected Observable<ApplicationPackageInner> getInnerAsync()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.getInnerAsync()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.id()
  name: id()
  nameWithType: ApplicationPackageImpl.id()
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource.id()
  returns:
    description: <p>the id of the external child resource </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String id()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.id()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.lastActivationTime()
  name: lastActivationTime()
  nameWithType: ApplicationPackageImpl.lastActivationTime()
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.lastActivationTime()
  returns:
    description: <p>the last time this application package was activated </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime lastActivationTime()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.lastActivationTime()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.newApplicationPackage(String name, ApplicationImpl parent, ApplicationPackagesInner client)
  name: newApplicationPackage(String name, ApplicationImpl parent, ApplicationPackagesInner client)
  nameWithType: ApplicationPackageImpl.newApplicationPackage(String name, ApplicationImpl parent, ApplicationPackagesInner client)
  parameters:
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: parent
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationImpl?alt=com.microsoft.azure.management.batch.implementation.ApplicationImpl&text=ApplicationImpl" data-throw-if-not-resolved="False"/>
  - name: client
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner&text=ApplicationPackagesInner" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl&text=ApplicationPackageImpl" data-throw-if-not-resolved="False"/>
  syntax: protected static ApplicationPackageImpl newApplicationPackage(String name, ApplicationImpl parent, ApplicationPackagesInner client)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.newApplicationPackage(String,ApplicationImpl,ApplicationPackagesInner)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.state()
  name: state()
  nameWithType: ApplicationPackageImpl.state()
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.state()
  returns:
    description: <p>the state of the application package </p>
    type: <xref href="com.microsoft.azure.management.batch.PackageState?alt=com.microsoft.azure.management.batch.PackageState&text=PackageState" data-throw-if-not-resolved="False"/>
  syntax: public PackageState state()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.state()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.storageUrl()
  name: storageUrl()
  nameWithType: ApplicationPackageImpl.storageUrl()
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.storageUrl()
  returns:
    description: <p>the storage URL of the application package where teh application should be uploaded </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String storageUrl()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.storageUrl()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.storageUrlExpiry()
  name: storageUrlExpiry()
  nameWithType: ApplicationPackageImpl.storageUrlExpiry()
  overridden: com.microsoft.azure.management.batch.ApplicationPackage.storageUrlExpiry()
  returns:
    description: <p>the expiry of the storage URL for the application package </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime storageUrlExpiry()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.storageUrlExpiry()
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.updateResourceAsync()
  name: updateResourceAsync()
  nameWithType: ApplicationPackageImpl.updateResourceAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.ApplicationPackage?alt=com.microsoft.azure.management.batch.ApplicationPackage&text=ApplicationPackage" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<ApplicationPackage> updateResourceAsync()
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl.updateResourceAsync()
nameWithType: ApplicationPackageImpl
syntax: public class ApplicationPackageImpl implements ApplicationPackage
type: class
uid: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl
fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackageImpl
name: ApplicationPackageImpl
package: com.microsoft.azure.management.batch.implementation
summary: <p>Implementation for BatchAccount Application Package and its parent interfaces. </p>
metadata: {}
