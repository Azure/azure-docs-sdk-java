### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdate(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  name: createOrUpdate(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  nameWithType: TrustedIdProviders.createOrUpdate(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or replace the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TrustedIdProvider object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider.</p>

    <p></p>
  syntax: public TrustedIdProvider createOrUpdate(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdate(String,String,String,TrustedIdProvider)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  name: createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  nameWithType: TrustedIdProviders.createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or replace the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider.</p>

    <p></p>
  syntax: public Observable<TrustedIdProvider> createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdateAsync(String,String,String,TrustedIdProvider)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  name: createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  nameWithType: TrustedIdProviders.createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or replace the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider.</p>

    <p></p>
  syntax: public ServiceFuture<TrustedIdProvider> createOrUpdateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdateAsync(String,String,String,TrustedIdProvider,final ServiceCallback<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  name: createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  nameWithType: TrustedIdProviders.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to add or replace the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or replace the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates or updates the specified trusted identity provider. During update, the trusted identity provider with the specified name will be replaced with this new provider.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TrustedIdProvider>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, TrustedIdProvider parameters)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.createOrUpdateWithServiceResponseAsync(String,String,String,TrustedIdProvider)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.delete(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: delete(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.delete(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to delete. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified trusted identity provider from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.delete(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to delete. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified trusted identity provider from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<Void> serviceCallback)
  nameWithType: TrustedIdProviders.deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to delete. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified trusted identity provider from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to delete the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to delete. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified trusted identity provider from the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.get(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: get(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.get(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to retrieve. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TrustedIdProvider object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Data Lake Store trusted identity provider.</p>

    <p></p>
  syntax: public TrustedIdProvider get(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.get(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.getAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: getAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.getAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to retrieve. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store trusted identity provider.</p>

    <p></p>
  syntax: public Observable<TrustedIdProvider> getAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.getAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  nameWithType: TrustedIdProviders.getAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to retrieve. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Store trusted identity provider.</p>

    <p></p>
  syntax: public ServiceFuture<TrustedIdProvider> getAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.getAsync(String,String,String,final ServiceCallback<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.getWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.getWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider to retrieve. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Data Lake Store trusted identity provider.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TrustedIdProvider>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccount(final String resourceGroupName, final String accountName)
  name: listByAccount(final String resourceGroupName, final String accountName)
  nameWithType: TrustedIdProviders.listByAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity providers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;TrustedIdProvider&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public PagedList<TrustedIdProvider> listByAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccount(final String,final String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountAsync(final String resourceGroupName, final String accountName)
  name: listByAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: TrustedIdProviders.listByAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity providers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TrustedIdProvider&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Page<TrustedIdProvider>> listByAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  nameWithType: TrustedIdProviders.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity providers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<List<TrustedIdProvider>> listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountAsync(final String,final String,final ListOperationCallback<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNext(final String nextPageLink)
  name: listByAccountNext(final String nextPageLink)
  nameWithType: TrustedIdProviders.listByAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;TrustedIdProvider&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public PagedList<TrustedIdProvider> listByAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNext(final String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNextAsync(final String nextPageLink)
  name: listByAccountNextAsync(final String nextPageLink)
  nameWithType: TrustedIdProviders.listByAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TrustedIdProvider&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<Page<TrustedIdProvider>> listByAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<TrustedIdProvider>> serviceFuture, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  name: listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<TrustedIdProvider>> serviceFuture, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  nameWithType: TrustedIdProviders.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<TrustedIdProvider>> serviceFuture, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public ServiceFuture<List<TrustedIdProvider>> listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<TrustedIdProvider>> serviceFuture, final ListOperationCallback<TrustedIdProvider> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNextAsync(final String,final ServiceFuture<List<TrustedIdProvider>>,final ListOperationCallback<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: TrustedIdProviders.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TrustedIdProvider&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<TrustedIdProvider>>> listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: TrustedIdProviders.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account from which to get the trusted identity providers. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TrustedIdProvider&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Store trusted identity providers within the specified Data Lake Store account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<TrustedIdProvider>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.listByAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.update(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: update(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.update(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TrustedIdProvider object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public TrustedIdProvider update(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.update(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.update(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  name: update(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  nameWithType: TrustedIdProviders.update(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters&text=UpdateTrustedIdProviderParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TrustedIdProvider object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public TrustedIdProvider update(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.update(String,String,String,UpdateTrustedIdProviderParameters)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public Observable<TrustedIdProvider> updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  nameWithType: TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public ServiceFuture<TrustedIdProvider> updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, final ServiceCallback<TrustedIdProvider> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String,String,String,final ServiceCallback<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  name: updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  nameWithType: TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters&text=UpdateTrustedIdProviderParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public Observable<TrustedIdProvider> updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String,String,String,UpdateTrustedIdProviderParameters)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  nameWithType: TrustedIdProviders.updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters&text=UpdateTrustedIdProviderParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public ServiceFuture<TrustedIdProvider> updateAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters, final ServiceCallback<TrustedIdProvider> serviceCallback)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateAsync(String,String,String,UpdateTrustedIdProviderParameters,final ServiceCallback<TrustedIdProvider>)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  nameWithType: TrustedIdProviders.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TrustedIdProvider>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  nameWithType: TrustedIdProviders.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Store account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Store account to which to update the trusted identity provider. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the trusted identity provider. This is used for differentiation of providers in the account. </p>
    name: trustedIdProviderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the trusted identity provider. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters?alt=com.microsoft.azure.management.datalake.store.models.UpdateTrustedIdProviderParameters&text=UpdateTrustedIdProviderParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrustedIdProvider object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.store.models.TrustedIdProvider?alt=com.microsoft.azure.management.datalake.store.models.TrustedIdProvider&text=TrustedIdProvider" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified trusted identity provider.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TrustedIdProvider>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String trustedIdProviderName, UpdateTrustedIdProviderParameters parameters)
  uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders.updateWithServiceResponseAsync(String,String,String,UpdateTrustedIdProviderParameters)
nameWithType: TrustedIdProviders
syntax: public interface TrustedIdProviders
type: interface
uid: com.microsoft.azure.management.datalake.store.TrustedIdProviders
fullName: com.microsoft.azure.management.datalake.store.TrustedIdProviders
name: TrustedIdProviders
package: com.microsoft.azure.management.datalake.store
summary: <p>An instance of this class provides access to all the operations defined in TrustedIdProviders. </p>
metadata: {}
