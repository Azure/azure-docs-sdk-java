### YamlMime:JavaMember
nameWithType: ClientFactory.createTransferMessageSenderFromEntityPath
type: method
members:
- fullName: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  name: createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  nameWithType: ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which sender needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of the final destination of the message. </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The initial destination of the message. </p>
    name: viaEntityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: <p>IMessageSender instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a transfer message sender. This sender sends message to destination entity via another entity.</p>

    <p>This is mainly to be used when sending messages in a transaction. When messages need to be sent across entities in a single transaction, this can be used to ensure all the messages land initially in the same entity/partition for local transactions, and then let service bus handle transferring the message to the actual destination. </p>
  syntax: public static IMessageSender createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory,String,String)
uid: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPath*
fullName: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
name: createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
package: com.microsoft.azure.servicebus
metadata: {}
