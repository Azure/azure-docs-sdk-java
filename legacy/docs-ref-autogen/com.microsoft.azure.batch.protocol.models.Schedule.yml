### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.Schedule
  id: Schedule
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()
  - com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()
  - com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
  - com.microsoft.azure.batch.protocol.models.Schedule.startWindow()
  - com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(DateTime)
  - com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(DateTime)
  - com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(Period)
  - com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(Period)
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: Schedule
  nameWithType: Schedule
  fullName: com.microsoft.azure.batch.protocol.models.Schedule
  type: Class
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
      branch: master
      repo: https://github.com/Azure/azure-batch-sdk-for-java
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 17
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>The schedule according to which jobs will be created. </p>"
  syntax: &o1
    content: public class Schedule
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()
  id: doNotRunAfter()
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: doNotRunAfter()
  nameWithType: Schedule.doNotRunAfter()
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()
  overload: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 103
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get if you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.</p>\r\n<p></p>"
  syntax:
    content: public DateTime doNotRunAfter()
    return:
      type: 230df18c
      description: <p>the doNotRunAfter value </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()
  id: doNotRunUntil()
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: doNotRunUntil()
  nameWithType: Schedule.doNotRunUntil()
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()
  overload: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 83
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get if you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.</p>\r\n<p></p>"
  syntax:
    content: public DateTime doNotRunUntil()
    return:
      type: 230df18c
      description: <p>the doNotRunUntil value </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
  id: recurrenceInterval()
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: recurrenceInterval()
  nameWithType: Schedule.recurrenceInterval()
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
  overload: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 143
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>\r\n<p></p>"
  syntax:
    content: public Period recurrenceInterval()
    return:
      type: "6e600119"
      description: <p>the recurrenceInterval value </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.startWindow()
  id: startWindow()
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: startWindow()
  nameWithType: Schedule.startWindow()
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.startWindow()
  overload: com.microsoft.azure.batch.protocol.models.Schedule.startWindow*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 123
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get if a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>\r\n<p></p>"
  syntax:
    content: public Period startWindow()
    return:
      type: "6e600119"
      description: <p>the startWindow value </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(DateTime)
  id: withDoNotRunAfter(DateTime)
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: withDoNotRunAfter(DateTime doNotRunAfter)
  nameWithType: Schedule.withDoNotRunAfter(DateTime doNotRunAfter)
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(DateTime doNotRunAfter)
  overload: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 113
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set if you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.</p>\r\n<p></p>"
  syntax:
    content: public Schedule withDoNotRunAfter(DateTime doNotRunAfter)
    parameters:
    - id: doNotRunAfter
      type: 230df18c
      description: <p>the doNotRunAfter value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.Schedule
      description: <p>the Schedule object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(DateTime)
  id: withDoNotRunUntil(DateTime)
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: withDoNotRunUntil(DateTime doNotRunUntil)
  nameWithType: Schedule.withDoNotRunUntil(DateTime doNotRunUntil)
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(DateTime doNotRunUntil)
  overload: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 93
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set if you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.</p>\r\n<p></p>"
  syntax:
    content: public Schedule withDoNotRunUntil(DateTime doNotRunUntil)
    parameters:
    - id: doNotRunUntil
      type: 230df18c
      description: <p>the doNotRunUntil value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.Schedule
      description: <p>the Schedule object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(Period)
  id: withRecurrenceInterval(Period)
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: withRecurrenceInterval(Period recurrenceInterval)
  nameWithType: Schedule.withRecurrenceInterval(Period recurrenceInterval)
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(Period recurrenceInterval)
  overload: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 153
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>\r\n<p></p>"
  syntax:
    content: public Schedule withRecurrenceInterval(Period recurrenceInterval)
    parameters:
    - id: recurrenceInterval
      type: "6e600119"
      description: <p>the recurrenceInterval value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.Schedule
      description: <p>the Schedule object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(Period)
  id: withStartWindow(Period)
  parent: com.microsoft.azure.batch.protocol.models.Schedule
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  langs:
  - java
  name: withStartWindow(Period startWindow)
  nameWithType: Schedule.withStartWindow(Period startWindow)
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(Period startWindow)
  overload: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/Schedule.java
    startLine: 133
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set if a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>\r\n<p></p>"
  syntax:
    content: public Schedule withStartWindow(Period startWindow)
    parameters:
    - id: startWindow
      type: "6e600119"
      description: <p>the startWindow value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.Schedule
      description: <p>the Schedule object itself. </p>
references:
- uid: 230df18c
  spec.java:
  - name: DateTime
    fullName: DateTime
- uid: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil*
  name: doNotRunUntil
  nameWithType: Schedule.doNotRunUntil
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil*
  name: withDoNotRunUntil
  nameWithType: Schedule.withDoNotRunUntil
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter*
  name: doNotRunAfter
  nameWithType: Schedule.doNotRunAfter
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter*
  name: withDoNotRunAfter
  nameWithType: Schedule.withDoNotRunAfter
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter
  package: com.microsoft.azure.batch.protocol.models
- uid: "6e600119"
  spec.java:
  - name: Period
    fullName: Period
- uid: com.microsoft.azure.batch.protocol.models.Schedule.startWindow*
  name: startWindow
  nameWithType: Schedule.startWindow
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.startWindow
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow*
  name: withStartWindow
  nameWithType: Schedule.withStartWindow
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval*
  name: recurrenceInterval
  nameWithType: Schedule.recurrenceInterval
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval*
  name: withRecurrenceInterval
  nameWithType: Schedule.withRecurrenceInterval
  fullName: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.Schedule
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.Schedule.yml
  name: Schedule
  nameWithType: Schedule
  fullName: com.microsoft.azure.batch.protocol.models.Schedule
  type: Class
  summary: "<p>The schedule according to which jobs will be created. </p>"
  syntax: *o1
