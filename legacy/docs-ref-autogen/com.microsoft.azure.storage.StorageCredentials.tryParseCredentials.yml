### YamlMime:JavaMember
nameWithType: StorageCredentials.tryParseCredentials
type: method
members:
- fullName: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final Map<String, String> settings)
  name: tryParseCredentials(final Map<String, String> settings)
  nameWithType: StorageCredentials.tryParseCredentials(final Map<String, String> settings)
  parameters:
  - description: <p>A <code>Map</code> object of the name/value pairs that represent the settings to use to configure the credentials. </p>
    name: settings
    type: <xref href="final+Map%3CString%2C+String%3E?alt=final+Map%3CString%2C+String%3E&text=final+Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the key value specified for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.ACCOUNT_KEY_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#ACCOUNT_KEY_NAME"></xref> is not a valid Base64-encoded string. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object representing the storage credentials determined from the name/value pairs.</p>
    type: <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to determine the storage credentials from a collection of name/value pairs.</p>

    <p>

    Either include an account name with an account key (specifying values for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.ACCOUNT_NAME_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#ACCOUNT_NAME_NAME"></xref> and <xref uid="com.microsoft.azure.storage.CloudStorageAccount.ACCOUNT_KEY_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#ACCOUNT_KEY_NAME"></xref> ), or a shared access signature (specifying a value for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.SHARED_ACCESS_SIGNATURE_NAME" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#SHARED_ACCESS_SIGNATURE_NAME"></xref> ). If you use an account name and account key, do not include a shared access signature, and vice versa.</p>

    <p></p>
  syntax: protected static StorageCredentials tryParseCredentials(final Map<String, String> settings)
  uid: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final Map<String, String>)
- fullName: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final String connectionString)
  name: tryParseCredentials(final String connectionString)
  nameWithType: StorageCredentials.tryParseCredentials(final String connectionString)
  parameters:
  - description: <p>A <code>String</code> that contains the key/value pairs that represent the storage credentials.</p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the account key specified in <code>connectionString</code> is not valid. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object representing the storage credentials determined from the connection string.</p>
    type: <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to determine the storage credentials from a connection string. </p>

    <p>The format for the connection string is in the pattern "&lt;i&gt;keyname=value&lt;/i&gt;". Multiple key/value pairs can be separated by a semi-colon, for example, "&lt;i&gt;keyname1=value1;keyname2=value2&lt;/i&gt;". Either include an account name with an account key or a shared access signature. If you use an account name and account key, do not include a shared access signature, and vice versa. </p>

    <p>The same connection string can be used as for <xref uid="com.microsoft.azure.storage.CloudStorageAccount.parse(final String)" data-throw-if-not-resolved="false" data-raw-source="CloudStorageAccount#parse(String)"></xref> but here only the account name, account key, and sas key/value pairs will be examined.</p>

    <p></p>
  syntax: public static StorageCredentials tryParseCredentials(final String connectionString)
  uid: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final String)
uid: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials*
fullName: com.microsoft.azure.storage.StorageCredentials.tryParseCredentials
name: tryParseCredentials(final Map<String, String> settings)
package: com.microsoft.azure.storage
metadata: {}
