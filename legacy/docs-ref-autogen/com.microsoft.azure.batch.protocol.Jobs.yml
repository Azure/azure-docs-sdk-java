### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.Jobs.add(JobAddParameter job)
  name: add(JobAddParameter job)
  nameWithType: Jobs.add(JobAddParameter job)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public void add(JobAddParameter job)
  uid: com.microsoft.azure.batch.protocol.Jobs.add(JobAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.add(JobAddParameter job, JobAddOptions jobAddOptions)
  name: add(JobAddParameter job, JobAddOptions jobAddOptions)
  nameWithType: Jobs.add(JobAddParameter job, JobAddOptions jobAddOptions)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobAddOptions&text=JobAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public void add(JobAddParameter job, JobAddOptions jobAddOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.add(JobAddParameter,JobAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter job)
  name: addAsync(JobAddParameter job)
  nameWithType: Jobs.addAsync(JobAddParameter job)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(JobAddParameter job)
  uid: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter job, final ServiceCallback<Void> serviceCallback)
  name: addAsync(JobAddParameter job, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.addAsync(JobAddParameter job, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(JobAddParameter job, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  name: addAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  nameWithType: Jobs.addAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobAddOptions&text=JobAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter,JobAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter job, JobAddOptions jobAddOptions, final ServiceCallback<Void> serviceCallback)
  name: addAsync(JobAddParameter job, JobAddOptions jobAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.addAsync(JobAddParameter job, JobAddOptions jobAddOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobAddOptions&text=JobAddOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(JobAddParameter job, JobAddOptions jobAddOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.addAsync(JobAddParameter,JobAddOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.addWithServiceResponseAsync(JobAddParameter job)
  name: addWithServiceResponseAsync(JobAddParameter job)
  nameWithType: Jobs.addWithServiceResponseAsync(JobAddParameter job)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobAddHeaders?alt=com.microsoft.azure.batch.protocol.models.JobAddHeaders&text=JobAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobAddHeaders>> addWithServiceResponseAsync(JobAddParameter job)
  uid: com.microsoft.azure.batch.protocol.Jobs.addWithServiceResponseAsync(JobAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.addWithServiceResponseAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  name: addWithServiceResponseAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  nameWithType: Jobs.addWithServiceResponseAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  parameters:
  - description: <p>The job to be added. </p>
    name: job
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobAddOptions&text=JobAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobAddHeaders?alt=com.microsoft.azure.batch.protocol.models.JobAddHeaders&text=JobAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a job to the specified account. The Batch service supports two ways to control the work done as part of a job. In the first approach, the user specifies a Job Manager task. The Batch service launches this task when it is ready to start the job. The Job Manager task controls all other tasks that run under this job, by using the Task APIs. In the second approach, the user directly controls the execution of tasks under an active job, by using the Task APIs. Also note: when naming jobs, avoid including sensitive information such as user names or secret project names. This information may appear in telemetry logs accessible to Microsoft Support engineers.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobAddHeaders>> addWithServiceResponseAsync(JobAddParameter job, JobAddOptions jobAddOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.addWithServiceResponseAsync(JobAddParameter,JobAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.delete(String jobId)
  name: delete(String jobId)
  nameWithType: Jobs.delete(String jobId)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public void delete(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.delete(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.delete(String jobId, JobDeleteOptions jobDeleteOptions)
  name: delete(String jobId, JobDeleteOptions jobDeleteOptions)
  nameWithType: Jobs.delete(String jobId, JobDeleteOptions jobDeleteOptions)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobDeleteOptions&text=JobDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public void delete(String jobId, JobDeleteOptions jobDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.delete(String,JobDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String jobId)
  name: deleteAsync(String jobId)
  nameWithType: Jobs.deleteAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.deleteAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  name: deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  nameWithType: Jobs.deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobDeleteOptions&text=JobDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String,JobDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobDeleteOptions&text=JobDeleteOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String jobId, JobDeleteOptions jobDeleteOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.deleteAsync(String,JobDeleteOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.deleteWithServiceResponseAsync(String jobId)
  name: deleteWithServiceResponseAsync(String jobId)
  nameWithType: Jobs.deleteWithServiceResponseAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.JobDeleteHeaders&text=JobDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobDeleteHeaders>> deleteWithServiceResponseAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.deleteWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.deleteWithServiceResponseAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  name: deleteWithServiceResponseAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  nameWithType: Jobs.deleteWithServiceResponseAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  parameters:
  - description: <p>The ID of the job to delete. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobDeleteOptions&text=JobDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.JobDeleteHeaders&text=JobDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a job. Deleting a job also deletes all tasks that are part of that job, and all job statistics. This also overrides the retention period for task data; that is, if the job contains tasks which are still retained on compute nodes, the Batch services deletes those tasks' working directories and all their contents. When a Delete Job request is received, the Batch service sets the job to the deleting state. All update operations on a job that is in deleting state will fail with status code 409 (Conflict), with additional information indicating that the job is being deleted.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, JobDeleteOptions jobDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.deleteWithServiceResponseAsync(String,JobDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disable(String jobId, DisableJobOption disableTasks)
  name: disable(String jobId, DisableJobOption disableTasks)
  nameWithType: Jobs.disable(String jobId, DisableJobOption disableTasks)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public void disable(String jobId, DisableJobOption disableTasks)
  uid: com.microsoft.azure.batch.protocol.Jobs.disable(String,DisableJobOption)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disable(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  name: disable(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  nameWithType: Jobs.disable(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobDisableOptions&text=JobDisableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public void disable(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.disable(String,DisableJobOption,JobDisableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String jobId, DisableJobOption disableTasks)
  name: disableAsync(String jobId, DisableJobOption disableTasks)
  nameWithType: Jobs.disableAsync(String jobId, DisableJobOption disableTasks)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public Observable<Void> disableAsync(String jobId, DisableJobOption disableTasks)
  uid: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String,DisableJobOption)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String jobId, DisableJobOption disableTasks, final ServiceCallback<Void> serviceCallback)
  name: disableAsync(String jobId, DisableJobOption disableTasks, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.disableAsync(String jobId, DisableJobOption disableTasks, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableAsync(String jobId, DisableJobOption disableTasks, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String,DisableJobOption,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  name: disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  nameWithType: Jobs.disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobDisableOptions&text=JobDisableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public Observable<Void> disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String,DisableJobOption,JobDisableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions, final ServiceCallback<Void> serviceCallback)
  name: disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobDisableOptions&text=JobDisableOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.disableAsync(String,DisableJobOption,JobDisableOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks)
  name: disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks)
  nameWithType: Jobs.disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobDisableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobDisableHeaders&text=JobDisableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobDisableHeaders>> disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks)
  uid: com.microsoft.azure.batch.protocol.Jobs.disableWithServiceResponseAsync(String,DisableJobOption)
- fullName: com.microsoft.azure.batch.protocol.Jobs.disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  name: disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  nameWithType: Jobs.disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  parameters:
  - description: <p>The ID of the job to disable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with active tasks associated with the job. Possible values include: 'requeue', 'terminate', 'wait' </p>"
    name: disableTasks
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableJobOption?alt=com.microsoft.azure.batch.protocol.models.DisableJobOption&text=DisableJobOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobDisableOptions&text=JobDisableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobDisableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobDisableHeaders&text=JobDisableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables the specified job, preventing new tasks from running. The Batch Service immediately moves the job to the disabling state. Batch then uses the disableTasks parameter to determine what to do with the currently running tasks of the job. The job remains in the disabling state until the disable operation is completed and all tasks have been dealt with according to the disableTasks option; the job then moves to the disabled state. No new tasks are started under the job until it moves back to active state. If you try to disable a job that is in any state other than active, disabling, or disabled, the request fails with status code 409.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobDisableHeaders>> disableWithServiceResponseAsync(String jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.disableWithServiceResponseAsync(String,DisableJobOption,JobDisableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enable(String jobId)
  name: enable(String jobId)
  nameWithType: Jobs.enable(String jobId)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public void enable(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.enable(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enable(String jobId, JobEnableOptions jobEnableOptions)
  name: enable(String jobId, JobEnableOptions jobEnableOptions)
  nameWithType: Jobs.enable(String jobId, JobEnableOptions jobEnableOptions)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobEnableOptions&text=JobEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public void enable(String jobId, JobEnableOptions jobEnableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.enable(String,JobEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId)
  name: enableAsync(String jobId)
  nameWithType: Jobs.enableAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public Observable<Void> enableAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  name: enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  name: enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  nameWithType: Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobEnableOptions&text=JobEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public Observable<Void> enableAsync(String jobId, JobEnableOptions jobEnableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String,JobEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  name: enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobEnableOptions&text=JobEnableOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAsync(String jobId, JobEnableOptions jobEnableOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableAsync(String,JobEnableOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableWithServiceResponseAsync(String jobId)
  name: enableWithServiceResponseAsync(String jobId)
  nameWithType: Jobs.enableWithServiceResponseAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobEnableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobEnableHeaders&text=JobEnableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobEnableHeaders>> enableWithServiceResponseAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.enableWithServiceResponseAsync(String jobId, JobEnableOptions jobEnableOptions)
  name: enableWithServiceResponseAsync(String jobId, JobEnableOptions jobEnableOptions)
  nameWithType: Jobs.enableWithServiceResponseAsync(String jobId, JobEnableOptions jobEnableOptions)
  parameters:
  - description: <p>The ID of the job to enable. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobEnableOptions&text=JobEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobEnableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobEnableHeaders&text=JobEnableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables the specified job, allowing new tasks to run. When you call this API, the Batch service sets a disabled job to the enabling state. After the this operation is completed, the job moves to the active state, and scheduling of new tasks under the job resumes. The Batch service does not allow a task to remain in the active state for more than 180 days. Therefore, if you enable a job containing active tasks which were added more than 180 days ago, those tasks will not run.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobEnableHeaders>> enableWithServiceResponseAsync(String jobId, JobEnableOptions jobEnableOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.enableWithServiceResponseAsync(String,JobEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.get(String jobId)
  name: get(String jobId)
  nameWithType: Jobs.get(String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudJob object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public CloudJob get(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.get(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.get(String jobId, JobGetOptions jobGetOptions)
  name: get(String jobId, JobGetOptions jobGetOptions)
  nameWithType: Jobs.get(String jobId, JobGetOptions jobGetOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetOptions&text=JobGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudJob object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public CloudJob get(String jobId, JobGetOptions jobGetOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.get(String,JobGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatistics()
  name: getAllLifetimeStatistics()
  nameWithType: Jobs.getAllLifetimeStatistics()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobStatistics object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public JobStatistics getAllLifetimeStatistics()
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatistics()
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  name: getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  nameWithType: Jobs.getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions&text=JobGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobStatistics object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public JobStatistics getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync()
  name: getAllLifetimeStatisticsAsync()
  nameWithType: Jobs.getAllLifetimeStatisticsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobStatistics object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<JobStatistics> getAllLifetimeStatisticsAsync()
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync()
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync(final ServiceCallback<JobStatistics> serviceCallback)
  name: getAllLifetimeStatisticsAsync(final ServiceCallback<JobStatistics> serviceCallback)
  nameWithType: Jobs.getAllLifetimeStatisticsAsync(final ServiceCallback<JobStatistics> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public ServiceFuture<JobStatistics> getAllLifetimeStatisticsAsync(final ServiceCallback<JobStatistics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync(final ServiceCallback<JobStatistics>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  name: getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  nameWithType: Jobs.getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions&text=JobGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobStatistics object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<JobStatistics> getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions, final ServiceCallback<JobStatistics> serviceCallback)
  name: getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions, final ServiceCallback<JobStatistics> serviceCallback)
  nameWithType: Jobs.getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions, final ServiceCallback<JobStatistics> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions&text=JobGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public ServiceFuture<JobStatistics> getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions, final ServiceCallback<JobStatistics> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsAsync(JobGetAllLifetimeStatisticsOptions,final ServiceCallback<JobStatistics>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsWithServiceResponseAsync()
  name: getAllLifetimeStatisticsWithServiceResponseAsync()
  nameWithType: Jobs.getAllLifetimeStatisticsWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobStatistics object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsHeaders?alt=com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsHeaders&text=JobGetAllLifetimeStatisticsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<JobStatistics, JobGetAllLifetimeStatisticsHeaders>> getAllLifetimeStatisticsWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsWithServiceResponseAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  name: getAllLifetimeStatisticsWithServiceResponseAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  nameWithType: Jobs.getAllLifetimeStatisticsWithServiceResponseAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobGetAllLifetimeStatisticsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsOptions&text=JobGetAllLifetimeStatisticsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobStatistics object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobStatistics?alt=com.microsoft.azure.batch.protocol.models.JobStatistics&text=JobStatistics" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsHeaders?alt=com.microsoft.azure.batch.protocol.models.JobGetAllLifetimeStatisticsHeaders&text=JobGetAllLifetimeStatisticsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets lifetime summary statistics for all of the jobs in the specified account. Statistics are aggregated across all jobs that have ever existed in the account, from account creation to the last update time of the statistics. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<JobStatistics, JobGetAllLifetimeStatisticsHeaders>> getAllLifetimeStatisticsWithServiceResponseAsync(JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAllLifetimeStatisticsWithServiceResponseAsync(JobGetAllLifetimeStatisticsOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAsync(String jobId)
  name: getAsync(String jobId)
  nameWithType: Jobs.getAsync(String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJob object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public Observable<CloudJob> getAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAsync(String jobId, final ServiceCallback<CloudJob> serviceCallback)
  name: getAsync(String jobId, final ServiceCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.getAsync(String jobId, final ServiceCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public ServiceFuture<CloudJob> getAsync(String jobId, final ServiceCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAsync(String,final ServiceCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAsync(String jobId, JobGetOptions jobGetOptions)
  name: getAsync(String jobId, JobGetOptions jobGetOptions)
  nameWithType: Jobs.getAsync(String jobId, JobGetOptions jobGetOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetOptions&text=JobGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJob object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public Observable<CloudJob> getAsync(String jobId, JobGetOptions jobGetOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAsync(String,JobGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getAsync(String jobId, JobGetOptions jobGetOptions, final ServiceCallback<CloudJob> serviceCallback)
  name: getAsync(String jobId, JobGetOptions jobGetOptions, final ServiceCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.getAsync(String jobId, JobGetOptions jobGetOptions, final ServiceCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetOptions&text=JobGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public ServiceFuture<CloudJob> getAsync(String jobId, JobGetOptions jobGetOptions, final ServiceCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.getAsync(String,JobGetOptions,final ServiceCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCounts(String jobId)
  name: getTaskCounts(String jobId)
  nameWithType: Jobs.getTaskCounts(String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskCounts object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public TaskCounts getTaskCounts(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCounts(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCounts(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  name: getTaskCounts(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  nameWithType: Jobs.getTaskCounts(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetTaskCountsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions&text=JobGetTaskCountsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskCounts object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public TaskCounts getTaskCounts(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCounts(String,JobGetTaskCountsOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId)
  name: getTaskCountsAsync(String jobId)
  nameWithType: Jobs.getTaskCountsAsync(String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskCounts object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public Observable<TaskCounts> getTaskCountsAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId, final ServiceCallback<TaskCounts> serviceCallback)
  name: getTaskCountsAsync(String jobId, final ServiceCallback<TaskCounts> serviceCallback)
  nameWithType: Jobs.getTaskCountsAsync(String jobId, final ServiceCallback<TaskCounts> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public ServiceFuture<TaskCounts> getTaskCountsAsync(String jobId, final ServiceCallback<TaskCounts> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String,final ServiceCallback<TaskCounts>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  name: getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  nameWithType: Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetTaskCountsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions&text=JobGetTaskCountsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskCounts object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public Observable<TaskCounts> getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String,JobGetTaskCountsOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, final ServiceCallback<TaskCounts> serviceCallback)
  name: getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, final ServiceCallback<TaskCounts> serviceCallback)
  nameWithType: Jobs.getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, final ServiceCallback<TaskCounts> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetTaskCountsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions&text=JobGetTaskCountsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public ServiceFuture<TaskCounts> getTaskCountsAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions, final ServiceCallback<TaskCounts> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsAsync(String,JobGetTaskCountsOptions,final ServiceCallback<TaskCounts>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsWithServiceResponseAsync(String jobId)
  name: getTaskCountsWithServiceResponseAsync(String jobId)
  nameWithType: Jobs.getTaskCountsWithServiceResponseAsync(String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskCounts object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobGetTaskCountsHeaders?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsHeaders&text=JobGetTaskCountsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<TaskCounts, JobGetTaskCountsHeaders>> getTaskCountsWithServiceResponseAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsWithServiceResponseAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  name: getTaskCountsWithServiceResponseAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  nameWithType: Jobs.getTaskCountsWithServiceResponseAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetTaskCountsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsOptions&text=JobGetTaskCountsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskCounts object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskCounts?alt=com.microsoft.azure.batch.protocol.models.TaskCounts&text=TaskCounts" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobGetTaskCountsHeaders?alt=com.microsoft.azure.batch.protocol.models.JobGetTaskCountsHeaders&text=JobGetTaskCountsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the task counts for the specified job. Task counts provide a count of the tasks by active, running or completed task state, and a count of tasks which succeeded or failed. Tasks in the preparing state are counted as running.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<TaskCounts, JobGetTaskCountsHeaders>> getTaskCountsWithServiceResponseAsync(String jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getTaskCountsWithServiceResponseAsync(String,JobGetTaskCountsOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getWithServiceResponseAsync(String jobId)
  name: getWithServiceResponseAsync(String jobId)
  nameWithType: Jobs.getWithServiceResponseAsync(String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJob object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobGetHeaders?alt=com.microsoft.azure.batch.protocol.models.JobGetHeaders&text=JobGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudJob, JobGetHeaders>> getWithServiceResponseAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.getWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.getWithServiceResponseAsync(String jobId, JobGetOptions jobGetOptions)
  name: getWithServiceResponseAsync(String jobId, JobGetOptions jobGetOptions)
  nameWithType: Jobs.getWithServiceResponseAsync(String jobId, JobGetOptions jobGetOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobGetOptions&text=JobGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJob object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobGetHeaders?alt=com.microsoft.azure.batch.protocol.models.JobGetHeaders&text=JobGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified job.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudJob, JobGetHeaders>> getWithServiceResponseAsync(String jobId, JobGetOptions jobGetOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.getWithServiceResponseAsync(String,JobGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.list()
  name: list()
  nameWithType: Jobs.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJob> list()
  uid: com.microsoft.azure.batch.protocol.Jobs.list()
- fullName: com.microsoft.azure.batch.protocol.Jobs.list(final JobListOptions jobListOptions)
  name: list(final JobListOptions jobListOptions)
  nameWithType: Jobs.list(final JobListOptions jobListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListOptions?alt=com.microsoft.azure.batch.protocol.models.JobListOptions&text=JobListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJob> list(final JobListOptions jobListOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.list(final JobListOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listAsync()
  name: listAsync()
  nameWithType: Jobs.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listAsync()
  uid: com.microsoft.azure.batch.protocol.Jobs.listAsync()
- fullName: com.microsoft.azure.batch.protocol.Jobs.listAsync(final JobListOptions jobListOptions)
  name: listAsync(final JobListOptions jobListOptions)
  nameWithType: Jobs.listAsync(final JobListOptions jobListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListOptions?alt=com.microsoft.azure.batch.protocol.models.JobListOptions&text=JobListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listAsync(final JobListOptions jobListOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listAsync(final JobListOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listAsync(final JobListOptions jobListOptions, final ListOperationCallback<CloudJob> serviceCallback)
  name: listAsync(final JobListOptions jobListOptions, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listAsync(final JobListOptions jobListOptions, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListOptions?alt=com.microsoft.azure.batch.protocol.models.JobListOptions&text=JobListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listAsync(final JobListOptions jobListOptions, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listAsync(final JobListOptions,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listAsync(final ListOperationCallback<CloudJob> serviceCallback)
  name: listAsync(final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listAsync(final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listAsync(final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listAsync(final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobSchedule(final String jobScheduleId)
  name: listFromJobSchedule(final String jobScheduleId)
  nameWithType: Jobs.listFromJobSchedule(final String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public PagedList<CloudJob> listFromJobSchedule(final String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobSchedule(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobSchedule(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  name: listFromJobSchedule(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  nameWithType: Jobs.listFromJobSchedule(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions&text=JobListFromJobScheduleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public PagedList<CloudJob> listFromJobSchedule(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobSchedule(final String,final JobListFromJobScheduleOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId)
  name: listFromJobScheduleAsync(final String jobScheduleId)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  name: listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions&text=JobListFromJobScheduleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String,final JobListFromJobScheduleOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  name: listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions&text=JobListFromJobScheduleOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String,final JobListFromJobScheduleOptions,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  name: listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listFromJobScheduleAsync(final String jobScheduleId, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleAsync(final String,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNext(final String nextPageLink)
  name: listFromJobScheduleNext(final String nextPageLink)
  nameWithType: Jobs.listFromJobScheduleNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public PagedList<CloudJob> listFromJobScheduleNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNext(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  name: listFromJobScheduleNext(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  nameWithType: Jobs.listFromJobScheduleNext(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions&text=JobListFromJobScheduleNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public PagedList<CloudJob> listFromJobScheduleNext(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNext(final String,final JobListFromJobScheduleNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String nextPageLink)
  name: listFromJobScheduleNextAsync(final String nextPageLink)
  nameWithType: Jobs.listFromJobScheduleNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listFromJobScheduleNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  name: listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  nameWithType: Jobs.listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions&text=JobListFromJobScheduleNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String,final JobListFromJobScheduleNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  name: listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions&text=JobListFromJobScheduleNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listFromJobScheduleNextAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String,final JobListFromJobScheduleNextOptions,final ServiceFuture<List<CloudJob>>,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  name: listFromJobScheduleNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listFromJobScheduleNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listFromJobScheduleNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextAsync(final String,final ServiceFuture<List<CloudJob>>,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink)
  name: listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Jobs.listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders&text=JobListFromJobScheduleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListFromJobScheduleHeaders>> listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  name: listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  nameWithType: Jobs.listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleNextOptions&text=JobListFromJobScheduleNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders&text=JobListFromJobScheduleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListFromJobScheduleHeaders>> listFromJobScheduleNextWithServiceResponseAsync(final String nextPageLink, final JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleNextWithServiceResponseAsync(final String,final JobListFromJobScheduleNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId)
  name: listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId)
  nameWithType: Jobs.listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders&text=JobListFromJobScheduleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListFromJobScheduleHeaders>> listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  name: listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  nameWithType: Jobs.listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  parameters:
  - description: <p>The ID of the job schedule from which you want to get a list of jobs. </p>
    name: jobScheduleId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListFromJobScheduleOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleOptions&text=JobListFromJobScheduleOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListFromJobScheduleHeaders&text=JobListFromJobScheduleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the jobs that have been created under the specified job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListFromJobScheduleHeaders>> listFromJobScheduleWithServiceResponseAsync(final String jobScheduleId, final JobListFromJobScheduleOptions jobListFromJobScheduleOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listFromJobScheduleWithServiceResponseAsync(final String,final JobListFromJobScheduleOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Jobs.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJob> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNext(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  name: listNext(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  nameWithType: Jobs.listNext(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListNextOptions&text=JobListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJob&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJob> listNext(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNext(final String,final JobListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Jobs.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  name: listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  nameWithType: Jobs.listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListNextOptions&text=JobListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJob>> listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String,final JobListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  name: listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListNextOptions&text=JobListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listNextAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String,final JobListNextOptions,final ServiceFuture<List<CloudJob>>,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  nameWithType: Jobs.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJob>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJob>> serviceFuture, final ListOperationCallback<CloudJob> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNextAsync(final String,final ServiceFuture<List<CloudJob>>,final ListOperationCallback<CloudJob>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Jobs.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListHeaders&text=JobListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listNextWithServiceResponseAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  nameWithType: Jobs.listNextWithServiceResponseAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListNextOptions&text=JobListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListHeaders&text=JobListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final JobListNextOptions jobListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listNextWithServiceResponseAsync(final String,final JobListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatus(final String jobId)
  name: listPreparationAndReleaseTaskStatus(final String jobId)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatus(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public PagedList<JobPreparationAndReleaseTaskExecutionInformation> listPreparationAndReleaseTaskStatus(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatus(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatus(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  name: listPreparationAndReleaseTaskStatus(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatus(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions&text=JobListPreparationAndReleaseTaskStatusOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public PagedList<JobPreparationAndReleaseTaskExecutionInformation> listPreparationAndReleaseTaskStatus(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatus(final String,final JobListPreparationAndReleaseTaskStatusOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId)
  name: listPreparationAndReleaseTaskStatusAsync(final String jobId)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<Page<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusAsync(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  name: listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions&text=JobListPreparationAndReleaseTaskStatusOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<Page<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String,final JobListPreparationAndReleaseTaskStatusOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  name: listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions&text=JobListPreparationAndReleaseTaskStatusOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String,final JobListPreparationAndReleaseTaskStatusOptions,final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  name: listPreparationAndReleaseTaskStatusAsync(final String jobId, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusAsync(final String jobId, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusAsync(final String jobId, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusAsync(final String,final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNext(final String nextPageLink)
  name: listPreparationAndReleaseTaskStatusNext(final String nextPageLink)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public PagedList<JobPreparationAndReleaseTaskExecutionInformation> listPreparationAndReleaseTaskStatusNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNext(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  name: listPreparationAndReleaseTaskStatusNext(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNext(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions&text=JobListPreparationAndReleaseTaskStatusNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public PagedList<JobPreparationAndReleaseTaskExecutionInformation> listPreparationAndReleaseTaskStatusNext(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNext(final String,final JobListPreparationAndReleaseTaskStatusNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink)
  name: listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<Page<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  name: listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions&text=JobListPreparationAndReleaseTaskStatusNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<Page<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String,final JobListPreparationAndReleaseTaskStatusNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  name: listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions&text=JobListPreparationAndReleaseTaskStatusNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String,final JobListPreparationAndReleaseTaskStatusNextOptions,final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>>,final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  name: listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> listPreparationAndReleaseTaskStatusNextAsync(final String nextPageLink, final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>> serviceFuture, final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextAsync(final String,final ServiceFuture<List<JobPreparationAndReleaseTaskExecutionInformation>>,final ListOperationCallback<JobPreparationAndReleaseTaskExecutionInformation>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink)
  name: listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders&text=JobListPreparationAndReleaseTaskStatusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<JobPreparationAndReleaseTaskExecutionInformation>, JobListPreparationAndReleaseTaskStatusHeaders>> listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  name: listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusNextOptions&text=JobListPreparationAndReleaseTaskStatusNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders&text=JobListPreparationAndReleaseTaskStatusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<JobPreparationAndReleaseTaskExecutionInformation>, JobListPreparationAndReleaseTaskStatusHeaders>> listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String nextPageLink, final JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusNextWithServiceResponseAsync(final String,final JobListPreparationAndReleaseTaskStatusNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId)
  name: listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders&text=JobListPreparationAndReleaseTaskStatusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<JobPreparationAndReleaseTaskExecutionInformation>, JobListPreparationAndReleaseTaskStatusHeaders>> listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  name: listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  nameWithType: Jobs.listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobListPreparationAndReleaseTaskStatusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusOptions&text=JobListPreparationAndReleaseTaskStatusOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPreparationAndReleaseTaskExecutionInformation&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.JobPreparationAndReleaseTaskExecutionInformation&text=JobPreparationAndReleaseTaskExecutionInformation" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListPreparationAndReleaseTaskStatusHeaders&text=JobListPreparationAndReleaseTaskStatusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the execution status of the Job Preparation and Job Release task for the specified job across the compute nodes where the job has run. This API returns the Job Preparation and Job Release task status on all compute nodes that have run the Job Preparation or Job Release task. This includes nodes which have since been removed from the pool. If this API is invoked on a job which has no Job Preparation or Job Release task, the Batch service returns HTTP status code 409 (Conflict) with an error code of JobPreparationTaskNotSpecified.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<JobPreparationAndReleaseTaskExecutionInformation>, JobListPreparationAndReleaseTaskStatusHeaders>> listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String jobId, final JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listPreparationAndReleaseTaskStatusWithServiceResponseAsync(final String,final JobListPreparationAndReleaseTaskStatusOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: Jobs.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListHeaders&text=JobListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListHeaders>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Jobs.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Jobs.listWithServiceResponseAsync(final JobListOptions jobListOptions)
  name: listWithServiceResponseAsync(final JobListOptions jobListOptions)
  nameWithType: Jobs.listWithServiceResponseAsync(final JobListOptions jobListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobListOptions?alt=com.microsoft.azure.batch.protocol.models.JobListOptions&text=JobListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJob&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJob?alt=com.microsoft.azure.batch.protocol.models.CloudJob&text=CloudJob" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobListHeaders&text=JobListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the jobs in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJob>, JobListHeaders>> listWithServiceResponseAsync(final JobListOptions jobListOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.listWithServiceResponseAsync(final JobListOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patch(String jobId, JobPatchParameter jobPatchParameter)
  name: patch(String jobId, JobPatchParameter jobPatchParameter)
  nameWithType: Jobs.patch(String jobId, JobPatchParameter jobPatchParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public void patch(String jobId, JobPatchParameter jobPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.patch(String,JobPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patch(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  name: patch(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  nameWithType: Jobs.patch(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobPatchOptions&text=JobPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public void patch(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.patch(String,JobPatchParameter,JobPatchOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter)
  name: patchAsync(String jobId, JobPatchParameter jobPatchParameter)
  nameWithType: Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public Observable<Void> patchAsync(String jobId, JobPatchParameter jobPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String,JobPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter, final ServiceCallback<Void> serviceCallback)
  name: patchAsync(String jobId, JobPatchParameter jobPatchParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public ServiceFuture<Void> patchAsync(String jobId, JobPatchParameter jobPatchParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String,JobPatchParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  name: patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  nameWithType: Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobPatchOptions&text=JobPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public Observable<Void> patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String,JobPatchParameter,JobPatchOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions, final ServiceCallback<Void> serviceCallback)
  name: patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobPatchOptions&text=JobPatchOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public ServiceFuture<Void> patchAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchAsync(String,JobPatchParameter,JobPatchOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  name: patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  nameWithType: Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobPatchHeaders?alt=com.microsoft.azure.batch.protocol.models.JobPatchHeaders&text=JobPatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobPatchHeaders>> patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String,JobPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  name: patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  nameWithType: Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobPatchOptions&text=JobPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobPatchHeaders?alt=com.microsoft.azure.batch.protocol.models.JobPatchHeaders&text=JobPatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobPatchHeaders>> patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String,JobPatchParameter,JobPatchOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminate(String jobId)
  name: terminate(String jobId)
  nameWithType: Jobs.terminate(String jobId)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public void terminate(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminate(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminate(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  name: terminate(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  nameWithType: Jobs.terminate(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'. </p>
    name: terminateReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobTerminateOptions&text=JobTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public void terminate(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminate(String,String,JobTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String jobId)
  name: terminateAsync(String jobId)
  nameWithType: Jobs.terminateAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public Observable<Void> terminateAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  name: terminateAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.terminateAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public ServiceFuture<Void> terminateAsync(String jobId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  name: terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  nameWithType: Jobs.terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'. </p>
    name: terminateReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobTerminateOptions&text=JobTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public Observable<Void> terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String,String,JobTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions, final ServiceCallback<Void> serviceCallback)
  name: terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'. </p>
    name: terminateReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobTerminateOptions&text=JobTerminateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public ServiceFuture<Void> terminateAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateAsync(String,String,JobTerminateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String jobId)
  name: terminateWithServiceResponseAsync(String jobId)
  nameWithType: Jobs.terminateWithServiceResponseAsync(String jobId)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobTerminateHeaders&text=JobTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobTerminateHeaders>> terminateWithServiceResponseAsync(String jobId)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  name: terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  nameWithType: Jobs.terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  parameters:
  - description: <p>The ID of the job to terminate. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'. </p>
    name: terminateReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobTerminateOptions&text=JobTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobTerminateHeaders&text=JobTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates the specified job, marking it as completed. When a Terminate Job request is received, the Batch service sets the job to the terminating state. The Batch service then terminates any running tasks associated with the job and runs any required job release tasks. Then the job moves into the completed state. If there are any tasks in the job in the active state, they will remain in the active state. Once a job is terminated, new tasks cannot be added and any remaining active tasks will not be scheduled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String terminateReason, JobTerminateOptions jobTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.terminateWithServiceResponseAsync(String,String,JobTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.update(String jobId, JobUpdateParameter jobUpdateParameter)
  name: update(String jobId, JobUpdateParameter jobUpdateParameter)
  nameWithType: Jobs.update(String jobId, JobUpdateParameter jobUpdateParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public void update(String jobId, JobUpdateParameter jobUpdateParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.update(String,JobUpdateParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.update(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  name: update(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  nameWithType: Jobs.update(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobUpdateOptions&text=JobUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public void update(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.update(String,JobUpdateParameter,JobUpdateOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  name: updateAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  nameWithType: Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String,JobUpdateParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String,JobUpdateParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  name: updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  nameWithType: Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobUpdateOptions&text=JobUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String,JobUpdateParameter,JobUpdateOptions)
- fullName: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Jobs.updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobUpdateOptions&text=JobUpdateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Jobs.updateAsync(String,JobUpdateParameter,JobUpdateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Jobs.updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  name: updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  nameWithType: Jobs.updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobUpdateHeaders&text=JobUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobUpdateHeaders>> updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.updateWithServiceResponseAsync(String,JobUpdateParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  name: updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  nameWithType: Jobs.updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobUpdateParameter&text=JobUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobUpdateOptions&text=JobUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobUpdateHeaders&text=JobUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job. This fully replaces all the updatable properties of the job. For example, if the job has constraints associated with it and if constraints is not specified with this request, then the Batch service will remove the existing constraints.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobUpdateHeaders>> updateWithServiceResponseAsync(String jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.updateWithServiceResponseAsync(String,JobUpdateParameter,JobUpdateOptions)
nameWithType: Jobs
syntax: public interface Jobs
type: interface
uid: com.microsoft.azure.batch.protocol.Jobs
fullName: com.microsoft.azure.batch.protocol.Jobs
name: Jobs
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in Jobs. </p>
metadata: {}
