### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.StartTask
  id: StartTask
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  - com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  - com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  - com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  - com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  - com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  - com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  - com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(String)
  - com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(TaskContainerSettings)
  - com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting>)
  - com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(Integer)
  - com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(List<ResourceFile>)
  - com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(UserIdentity)
  - com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(Boolean)
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: StartTask
  nameWithType: StartTask
  fullName: com.microsoft.azure.batch.protocol.models.StartTask
  type: Class
  source:
    remote: &o0
      path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
      branch: master
      repo: https://github.com/Azure/azure-batch-sdk-for-java
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 27
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>"
  syntax: &o1
    content: public class StartTask
  inheritance:
  - java.lang.Object
- uid: com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  id: commandLine()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: commandLine()
  nameWithType: StartTask.commandLine()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.commandLine*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 117
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href=\"https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables\">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>\r\n<p></p>"
  syntax:
    content: public String commandLine()
    return:
      type: "26831127"
      description: <p>the commandLine value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  id: containerSettings()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: containerSettings()
  nameWithType: StartTask.containerSettings()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 137
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>\r\n<p></p>"
  syntax:
    content: public TaskContainerSettings containerSettings()
    return:
      type: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
      description: <p>the containerSettings value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  id: environmentSettings()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: environmentSettings()
  nameWithType: StartTask.environmentSettings()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 177
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get the environmentSettings value.</p>\r\n<p></p>"
  syntax:
    content: public List<EnvironmentSetting> environmentSettings()
    return:
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.EnvironmentSettinga08ddfce
      description: <p>the environmentSettings value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  id: maxTaskRetryCount()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: maxTaskRetryCount()
  nameWithType: StartTask.maxTaskRetryCount()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 217
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get the Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p>\r\n<p></p>"
  syntax:
    content: public Integer maxTaskRetryCount()
    return:
      type: 08effaa0
      description: <p>the maxTaskRetryCount value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  id: resourceFiles()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: resourceFiles()
  nameWithType: StartTask.resourceFiles()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 157
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get files listed under this element are located in the task's working directory.</p>\r\n<p></p>"
  syntax:
    content: public List<ResourceFile> resourceFiles()
    return:
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.ResourceFilea08ddfce
      description: <p>the resourceFiles value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  id: userIdentity()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: userIdentity()
  nameWithType: StartTask.userIdentity()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 197
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get if omitted, the task runs as a non-administrative user unique to the task.</p>\r\n<p></p>"
  syntax:
    content: public UserIdentity userIdentity()
    return:
      type: com.microsoft.azure.batch.protocol.models.UserIdentity
      description: <p>the userIdentity value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  id: waitForSuccess()
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: waitForSuccess()
  nameWithType: StartTask.waitForSuccess()
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  overload: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 237
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Get if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.</p>\r\n<p></p>"
  syntax:
    content: public Boolean waitForSuccess()
    return:
      type: 866c2227
      description: <p>the waitForSuccess value </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(String)
  id: withCommandLine(String)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withCommandLine(String commandLine)
  nameWithType: StartTask.withCommandLine(String commandLine)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(String commandLine)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 127
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href=\"https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables\">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>\r\n<p></p>"
  syntax:
    content: public StartTask withCommandLine(String commandLine)
    parameters:
    - id: commandLine
      type: "26831127"
      description: <p>the commandLine value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(TaskContainerSettings)
  id: withContainerSettings(TaskContainerSettings)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: StartTask.withContainerSettings(TaskContainerSettings containerSettings)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(TaskContainerSettings containerSettings)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 147
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>\r\n<p></p>"
  syntax:
    content: public StartTask withContainerSettings(TaskContainerSettings containerSettings)
    parameters:
    - id: containerSettings
      type: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
      description: <p>the containerSettings value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting>)
  id: withEnvironmentSettings(List<EnvironmentSetting>)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 187
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set the environmentSettings value.</p>\r\n<p></p>"
  syntax:
    content: public StartTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
    parameters:
    - id: environmentSettings
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.EnvironmentSettinga08ddfce
      description: <p>the environmentSettings value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(Integer)
  id: withMaxTaskRetryCount(Integer)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withMaxTaskRetryCount(Integer maxTaskRetryCount)
  nameWithType: StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 227
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set the Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p>\r\n<p></p>"
  syntax:
    content: public StartTask withMaxTaskRetryCount(Integer maxTaskRetryCount)
    parameters:
    - id: maxTaskRetryCount
      type: 08effaa0
      description: <p>the maxTaskRetryCount value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(List<ResourceFile>)
  id: withResourceFiles(List<ResourceFile>)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: StartTask.withResourceFiles(List<ResourceFile> resourceFiles)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(List<ResourceFile> resourceFiles)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 167
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set files listed under this element are located in the task's working directory.</p>\r\n<p></p>"
  syntax:
    content: public StartTask withResourceFiles(List<ResourceFile> resourceFiles)
    parameters:
    - id: resourceFiles
      type: 5618da2dcom.microsoft.azure.batch.protocol.models.ResourceFilea08ddfce
      description: <p>the resourceFiles value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(UserIdentity)
  id: withUserIdentity(UserIdentity)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: StartTask.withUserIdentity(UserIdentity userIdentity)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(UserIdentity userIdentity)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 207
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set if omitted, the task runs as a non-administrative user unique to the task.</p>\r\n<p></p>"
  syntax:
    content: public StartTask withUserIdentity(UserIdentity userIdentity)
    parameters:
    - id: userIdentity
      type: com.microsoft.azure.batch.protocol.models.UserIdentity
      description: <p>the userIdentity value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(Boolean)
  id: withWaitForSuccess(Boolean)
  parent: com.microsoft.azure.batch.protocol.models.StartTask
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  langs:
  - java
  name: withWaitForSuccess(Boolean waitForSuccess)
  nameWithType: StartTask.withWaitForSuccess(Boolean waitForSuccess)
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(Boolean waitForSuccess)
  overload: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess*
  type: Method
  source:
    remote: *o0
    path: src/main/java/com/microsoft/azure/batch/protocol/models/StartTask.java
    startLine: 247
  package: com.microsoft.azure.batch.protocol.models
  summary: "<p>Set if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.</p>\r\n<p></p>"
  syntax:
    content: public StartTask withWaitForSuccess(Boolean waitForSuccess)
    parameters:
    - id: waitForSuccess
      type: 866c2227
      description: <p>the waitForSuccess value to set </p>
    return:
      type: com.microsoft.azure.batch.protocol.models.StartTask
      description: <p>the StartTask object itself. </p>
references:
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.microsoft.azure.batch.protocol.models.StartTask.commandLine*
  name: commandLine
  nameWithType: StartTask.commandLine
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.commandLine
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine*
  name: withCommandLine
  nameWithType: StartTask.withCommandLine
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings*
  name: containerSettings
  nameWithType: StartTask.containerSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings*
  name: withContainerSettings
  nameWithType: StartTask.withContainerSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: 5618da2dcom.microsoft.azure.batch.protocol.models.ResourceFilea08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: com.microsoft.azure.batch.protocol.models.ResourceFile
    name: ResourceFile
    fullName: com.microsoft.azure.batch.protocol.models.ResourceFile
    href: com.microsoft.azure.batch.protocol.models.ResourceFile.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles*
  name: resourceFiles
  nameWithType: StartTask.resourceFiles
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles*
  name: withResourceFiles
  nameWithType: StartTask.withResourceFiles
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles
  package: com.microsoft.azure.batch.protocol.models
- uid: 5618da2dcom.microsoft.azure.batch.protocol.models.EnvironmentSettinga08ddfce
  spec.java:
  - name: List<
    fullName: List<
  - uid: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
    name: EnvironmentSetting
    fullName: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
    href: com.microsoft.azure.batch.protocol.models.EnvironmentSetting.yml
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings*
  name: environmentSettings
  nameWithType: StartTask.environmentSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings*
  name: withEnvironmentSettings
  nameWithType: StartTask.withEnvironmentSettings
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity*
  name: userIdentity
  nameWithType: StartTask.userIdentity
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity*
  name: withUserIdentity
  nameWithType: StartTask.withUserIdentity
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity
  package: com.microsoft.azure.batch.protocol.models
- uid: 08effaa0
  spec.java:
  - name: Integer
    fullName: Integer
- uid: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount*
  name: maxTaskRetryCount
  nameWithType: StartTask.maxTaskRetryCount
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount*
  name: withMaxTaskRetryCount
  nameWithType: StartTask.withMaxTaskRetryCount
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount
  package: com.microsoft.azure.batch.protocol.models
- uid: 866c2227
  spec.java:
  - name: Boolean
    fullName: Boolean
- uid: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess*
  name: waitForSuccess
  nameWithType: StartTask.waitForSuccess
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess*
  name: withWaitForSuccess
  nameWithType: StartTask.withWaitForSuccess
  fullName: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.TaskContainerSettings.yml
  name: TaskContainerSettings
  nameWithType: TaskContainerSettings
  fullName: com.microsoft.azure.batch.protocol.models.TaskContainerSettings
  type: Class
  summary: "<p>The container settings for a task. </p>"
  syntax:
    content: public class TaskContainerSettings
- uid: com.microsoft.azure.batch.protocol.models.ResourceFile
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.ResourceFile.yml
  name: ResourceFile
  nameWithType: ResourceFile
  fullName: com.microsoft.azure.batch.protocol.models.ResourceFile
  type: Class
  summary: "<p>A single file or multiple files to be downloaded to a compute node. </p>"
  syntax:
    content: public class ResourceFile
- uid: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.EnvironmentSetting.yml
  name: EnvironmentSetting
  nameWithType: EnvironmentSetting
  fullName: com.microsoft.azure.batch.protocol.models.EnvironmentSetting
  type: Class
  summary: "<p>An environment variable to be set on a task process. </p>"
  syntax:
    content: public class EnvironmentSetting
- uid: com.microsoft.azure.batch.protocol.models.UserIdentity
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.UserIdentity.yml
  name: UserIdentity
  nameWithType: UserIdentity
  fullName: com.microsoft.azure.batch.protocol.models.UserIdentity
  type: Class
  summary: "<p>The definition of the user identity under which the task is run. Specify either the userName or autoUser property, but not both. </p>"
  syntax:
    content: public class UserIdentity
- uid: com.microsoft.azure.batch.protocol.models.StartTask
  parent: com.microsoft.azure.batch.protocol.models
  href: com.microsoft.azure.batch.protocol.models.StartTask.yml
  name: StartTask
  nameWithType: StartTask
  fullName: com.microsoft.azure.batch.protocol.models.StartTask
  type: Class
  summary: "<p>A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>"
  syntax: *o1
