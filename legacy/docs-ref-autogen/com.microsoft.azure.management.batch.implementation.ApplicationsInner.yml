### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.ApplicationsInner(Retrofit retrofit, BatchManagementClientImpl client)
  name: ApplicationsInner(Retrofit retrofit, BatchManagementClientImpl client)
  nameWithType: ApplicationsInner.ApplicationsInner(Retrofit retrofit, BatchManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl?alt=com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl&text=BatchManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of ApplicationsInner.</p>

    <p></p>
  syntax: public ApplicationsInner(Retrofit retrofit, BatchManagementClientImpl client)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.ApplicationsInner(Retrofit,BatchManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.create(String resourceGroupName, String accountName, String applicationName)
  name: create(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.create(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public ApplicationInner create(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.create(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.create(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  name: create(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  nameWithType: ApplicationsInner.create(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public ApplicationInner create(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.create(String,String,String,ApplicationInner)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName)
  name: createAsync(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public Observable<ApplicationInner> createAsync(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  name: createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  nameWithType: ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public Observable<ApplicationInner> createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String,String,String,ApplicationInner)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationInner> createAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String,String,String,ApplicationInner,final ServiceCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.createAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationInner> createAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createAsync(String,String,String,final ServiceCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationInner>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  nameWithType: ApplicationsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds an application to the specified Batch account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationInner>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.createWithServiceResponseAsync(String,String,String,ApplicationInner)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.delete(String resourceGroupName, String accountName, String applicationName)
  name: delete(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.delete(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.delete(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.deleteAsync(String resourceGroupName, String accountName, String applicationName)
  name: deleteAsync(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.deleteAsync(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.deleteAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ApplicationsInner.deleteAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.get(String resourceGroupName, String accountName, String applicationName)
  name: get(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.get(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified application.</p>

    <p></p>
  syntax: public ApplicationInner get(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.get(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.getAsync(String resourceGroupName, String accountName, String applicationName)
  name: getAsync(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.getAsync(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application.</p>

    <p></p>
  syntax: public Observable<ApplicationInner> getAsync(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.getAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.getAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationInner> getAsync(String resourceGroupName, String accountName, String applicationName, final ServiceCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.getAsync(String,String,String,final ServiceCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  nameWithType: ApplicationsInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.list(final String resourceGroupName, final String accountName)
  name: list(final String resourceGroupName, final String accountName)
  nameWithType: ApplicationsInner.list(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public PagedList<ApplicationInner> list(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.list(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.list(final String resourceGroupName, final String accountName, final Integer maxresults)
  name: list(final String resourceGroupName, final String accountName, final Integer maxresults)
  nameWithType: ApplicationsInner.list(final String resourceGroupName, final String accountName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public PagedList<ApplicationInner> list(final String resourceGroupName, final String accountName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.list(final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String resourceGroupName, final String accountName)
  name: listAsync(final String resourceGroupName, final String accountName)
  nameWithType: ApplicationsInner.listAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationInner>> listAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  name: listAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  nameWithType: ApplicationsInner.listAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationInner>> listAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final ListOperationCallback<ApplicationInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final ListOperationCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.listAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final ListOperationCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationInner>> listAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final ListOperationCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String,final String,final Integer,final ListOperationCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ApplicationInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.listAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationInner>> listAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listAsync(final String,final String,final ListOperationCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: ApplicationsInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public PagedList<ApplicationInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNext(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: ApplicationsInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationInner>> serviceFuture, final ListOperationCallback<ApplicationInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationInner>> serviceFuture, final ListOperationCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationInner>> serviceFuture, final ListOperationCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationInner>> serviceFuture, final ListOperationCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextAsync(final String,final ServiceFuture<List<ApplicationInner>>,final ListOperationCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: ApplicationsInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ApplicationInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p>ServiceResponse&lt;PageImpl&lt;ApplicationInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<ApplicationInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: ApplicationsInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listSinglePageAsync(final String resourceGroupName, final String accountName)
  name: listSinglePageAsync(final String resourceGroupName, final String accountName)
  nameWithType: ApplicationsInner.listSinglePageAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ApplicationInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationInner>>> listSinglePageAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  name: listSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  nameWithType: ApplicationsInner.listSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. ServiceResponse&lt;PageImpl&lt;ApplicationInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. ServiceResponse&lt;PageImpl&lt;ApplicationInner&gt;&gt; * </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ApplicationInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p>ServiceResponse&lt;PageImpl&lt;ApplicationInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<ApplicationInner>>> listSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listSinglePageAsync(final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: ApplicationsInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  nameWithType: ApplicationsInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the applications in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.listWithServiceResponseAsync(final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.update(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  name: update(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  nameWithType: ApplicationsInner.update(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates settings for the specified application.</p>

    <p></p>
  syntax: public ApplicationInner update(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.update(String,String,String,ApplicationInner)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  name: updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  nameWithType: ApplicationsInner.updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates settings for the specified application.</p>

    <p></p>
  syntax: public Observable<ApplicationInner> updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.updateAsync(String,String,String,ApplicationInner)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  nameWithType: ApplicationsInner.updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates settings for the specified application.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationInner> updateAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters, final ServiceCallback<ApplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.updateAsync(String,String,String,ApplicationInner,final ServiceCallback<ApplicationInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  nameWithType: ApplicationsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationInner&text=ApplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates settings for the specified application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationInner>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, ApplicationInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner.updateWithServiceResponseAsync(String,String,String,ApplicationInner)
nameWithType: ApplicationsInner
syntax: public class ApplicationsInner
type: class
uid: com.microsoft.azure.management.batch.implementation.ApplicationsInner
fullName: com.microsoft.azure.management.batch.implementation.ApplicationsInner
name: ApplicationsInner
package: com.microsoft.azure.management.batch.implementation
summary: <p>An instance of this class provides access to all the operations defined in Applications. </p>
metadata: {}
