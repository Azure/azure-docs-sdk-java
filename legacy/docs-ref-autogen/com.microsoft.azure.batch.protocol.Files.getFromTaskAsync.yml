### YamlMime:JavaMember
nameWithType: Files.getFromTaskAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  name: getFromTaskAsync(String jobId, String taskId, String filePath)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose file you want to retrieve. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the task file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath)
  uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose file you want to retrieve. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the task file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileGetFromTaskOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax: public Observable<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions)
  uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  name: getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose file you want to retrieve. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the task file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: fileGetFromTaskOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions?alt=com.microsoft.azure.batch.protocol.models.FileGetFromTaskOptions&text=FileGetFromTaskOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CInputStream%3E?alt=final+ServiceCallback%3CInputStream%3E&text=final+ServiceCallback%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CInputStream%3E?alt=ServiceFuture%3CInputStream%3E&text=ServiceFuture%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, FileGetFromTaskOptions fileGetFromTaskOptions, final ServiceCallback<InputStream> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,FileGetFromTaskOptions,final ServiceCallback<InputStream>)
- fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  name: getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: Files.getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task whose file you want to retrieve. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The path to the task file that you want to get the content of. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CInputStream%3E?alt=final+ServiceCallback%3CInputStream%3E&text=final+ServiceCallback%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CInputStream%3E?alt=ServiceFuture%3CInputStream%3E&text=ServiceFuture%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the content of the specified task file.</p>

    <p></p>
  syntax: public ServiceFuture<InputStream> getFromTaskAsync(String jobId, String taskId, String filePath, final ServiceCallback<InputStream> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync(String,String,String,final ServiceCallback<InputStream>)
uid: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync*
fullName: com.microsoft.azure.batch.protocol.Files.getFromTaskAsync
name: getFromTaskAsync(String jobId, String taskId, String filePath)
package: com.microsoft.azure.batch.protocol
metadata: {}
