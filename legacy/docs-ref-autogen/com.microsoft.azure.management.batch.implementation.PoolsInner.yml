### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.PoolsInner(Retrofit retrofit, BatchManagementClientImpl client)
  name: PoolsInner(Retrofit retrofit, BatchManagementClientImpl client)
  nameWithType: PoolsInner.PoolsInner(Retrofit retrofit, BatchManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl?alt=com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl&text=BatchManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of PoolsInner.</p>

    <p></p>
  syntax: public PoolsInner(Retrofit retrofit, BatchManagementClientImpl client)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.PoolsInner(Retrofit,BatchManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDelete(String resourceGroupName, String accountName, String poolName)
  name: beginDelete(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.beginDelete(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDelete(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDeleteAsync(String resourceGroupName, String accountName, String poolName)
  name: beginDeleteAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.beginDeleteAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDeleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDeleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  nameWithType: PoolsInner.beginDeleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDeleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.management.batch.PoolDeleteHeaders?alt=com.microsoft.azure.management.batch.PoolDeleteHeaders&text=PoolDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.beginDeleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.create(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: create(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.create(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public PoolInner create(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.create(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.create(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  name: create(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  nameWithType: PoolsInner.create(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public PoolInner create(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.create(String,String,String,PoolInner,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public Observable<PoolInner> createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String,String,String,PoolInner,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  name: createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  nameWithType: PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public Observable<PoolInner> createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String,String,String,PoolInner,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<PoolInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> createAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.createAsync(String,String,String,PoolInner,String,String,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolCreateHeaders?alt=com.microsoft.azure.management.batch.PoolCreateHeaders&text=PoolCreateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolCreateHeaders>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.createWithServiceResponseAsync(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  nameWithType: PoolsInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for pool creation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. A value of "*" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored. </p>
    name: ifNoneMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolCreateHeaders?alt=com.microsoft.azure.management.batch.PoolCreateHeaders&text=PoolCreateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a new pool inside the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolCreateHeaders>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, String ifNoneMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.createWithServiceResponseAsync(String,String,String,PoolInner,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.delete(String resourceGroupName, String accountName, String poolName)
  name: delete(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.delete(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.delete(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.deleteAsync(String resourceGroupName, String accountName, String poolName)
  name: deleteAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.deleteAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.deleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  nameWithType: PoolsInner.deleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.management.batch.PoolDeleteHeaders?alt=com.microsoft.azure.management.batch.PoolDeleteHeaders&text=PoolDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, PoolDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScale(String resourceGroupName, String accountName, String poolName)
  name: disableAutoScale(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.disableAutoScale(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public PoolInner disableAutoScale(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScale(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName)
  name: disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public Observable<PoolInner> disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScaleAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  name: disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> disableAutoScaleAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScaleAsync(String,String,String,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScaleWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  name: disableAutoScaleWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.disableAutoScaleWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolDisableAutoScaleHeaders?alt=com.microsoft.azure.management.batch.PoolDisableAutoScaleHeaders&text=PoolDisableAutoScaleHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables automatic scaling for a pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolDisableAutoScaleHeaders>> disableAutoScaleWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.disableAutoScaleWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.get(String resourceGroupName, String accountName, String poolName)
  name: get(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.get(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public PoolInner get(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.get(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.getAsync(String resourceGroupName, String accountName, String poolName)
  name: getAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.getAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public Observable<PoolInner> getAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.getAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.getAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> getAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.getAsync(String,String,String,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolGetHeaders?alt=com.microsoft.azure.management.batch.PoolGetHeaders&text=PoolGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccount(final String resourceGroupName, final String accountName)
  name: listByBatchAccount(final String resourceGroupName, final String accountName)
  nameWithType: PoolsInner.listByBatchAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<PoolInner> listByBatchAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccount(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: PoolsInner.listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: '<p>OData filter expression. Valid properties for filtering are: name properties/allocationState properties/allocationStateTransitionTime properties/creationTime properties/provisioningState properties/provisioningStateTransitionTime properties/lastModified properties/vmSize properties/interNodeCommunication properties/scaleSettings/autoScale properties/scaleSettings/fixedScale </p>'
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<PoolInner> listByBatchAccount(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccount(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<PoolInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: '<p>OData filter expression. Valid properties for filtering are: name properties/allocationState properties/allocationStateTransitionTime properties/creationTime properties/provisioningState properties/provisioningStateTransitionTime properties/lastModified properties/vmSize properties/interNodeCommunication properties/scaleSettings/autoScale properties/scaleSettings/fixedScale </p>'
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<PoolInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<PoolInner> serviceCallback)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: '<p>OData filter expression. Valid properties for filtering are: name properties/allocationState properties/allocationStateTransitionTime properties/creationTime properties/provisioningState properties/provisioningStateTransitionTime properties/lastModified properties/vmSize properties/interNodeCommunication properties/scaleSettings/autoScale properties/scaleSettings/fixedScale </p>'
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter, final ListOperationCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String,final String,final Integer,final String,final String,final ListOperationCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<PoolInner> serviceCallback)
  name: listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolInner>> listByBatchAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountAsync(final String,final String,final ListOperationCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNext(final String nextPageLink)
  name: listByBatchAccountNext(final String nextPageLink)
  nameWithType: PoolsInner.listByBatchAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public PagedList<PoolInner> listByBatchAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNext(final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextAsync(final String nextPageLink)
  name: listByBatchAccountNextAsync(final String nextPageLink)
  nameWithType: PoolsInner.listByBatchAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<PoolInner>> listByBatchAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<PoolInner>> serviceFuture, final ListOperationCallback<PoolInner> serviceCallback)
  name: listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<PoolInner>> serviceFuture, final ListOperationCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<PoolInner>> serviceFuture, final ListOperationCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolInner>> listByBatchAccountNextAsync(final String nextPageLink, final ServiceFuture<List<PoolInner>> serviceFuture, final ListOperationCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextAsync(final String,final ServiceFuture<List<PoolInner>>,final ListOperationCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  name: listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  nameWithType: PoolsInner.listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;PoolInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p>ServiceResponse&lt;PageImpl&lt;PoolInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<PoolInner>>> listByBatchAccountNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: PoolsInner.listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<PoolInner>>> listByBatchAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  name: listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  nameWithType: PoolsInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;PoolInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<PoolInner>>> listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: PoolsInner.listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. ServiceResponse&lt;PageImpl&lt;PoolInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. ServiceResponse&lt;PageImpl&lt;PoolInner&gt;&gt; * </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. ServiceResponse&lt;PageImpl&lt;PoolInner&gt;&gt; * </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. ServiceResponse&lt;PageImpl&lt;PoolInner&gt;&gt; * </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: '<p>OData filter expression. Valid properties for filtering are: name properties/allocationState properties/allocationStateTransitionTime properties/creationTime properties/provisioningState properties/provisioningStateTransitionTime properties/lastModified properties/vmSize properties/interNodeCommunication properties/scaleSettings/autoScale properties/scaleSettings/fixedScale </p>'
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;PoolInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p>ServiceResponse&lt;PageImpl&lt;PoolInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<PoolInner>>> listByBatchAccountSinglePageAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountSinglePageAsync(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: PoolsInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<PoolInner>>> listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  name: listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  nameWithType: PoolsInner.listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Comma separated list of properties that should be returned. e.g. "properties/provisioningState". Only top level properties under properties/ are valid for selection. </p>
    name: select
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: '<p>OData filter expression. Valid properties for filtering are: name properties/allocationState properties/allocationStateTransitionTime properties/creationTime properties/provisioningState properties/provisioningStateTransitionTime properties/lastModified properties/vmSize properties/interNodeCommunication properties/scaleSettings/autoScale properties/scaleSettings/fixedScale </p>'
    name: filter
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the pools in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<PoolInner>>> listByBatchAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName, final Integer maxresults, final String select, final String filter)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.listByBatchAccountWithServiceResponseAsync(final String,final String,final Integer,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResize(String resourceGroupName, String accountName, String poolName)
  name: stopResize(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.stopResize(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public PoolInner stopResize(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResize(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeAsync(String resourceGroupName, String accountName, String poolName)
  name: stopResizeAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.stopResizeAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<PoolInner> stopResizeAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  name: stopResizeAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.stopResizeAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> stopResizeAsync(String resourceGroupName, String accountName, String poolName, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeAsync(String,String,String,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  name: stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  nameWithType: PoolsInner.stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolStopResizeHeaders?alt=com.microsoft.azure.management.batch.PoolStopResizeHeaders&text=PoolStopResizeHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Stops an ongoing resize operation on the pool. This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolStopResizeHeaders>> stopResizeWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.stopResizeWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.update(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: update(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.update(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public PoolInner update(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.update(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.update(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  name: update(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  nameWithType: PoolsInner.update(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PoolInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public PoolInner update(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.update(String,String,String,PoolInner,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public Observable<PoolInner> updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String,String,String,PoolInner,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  name: updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  nameWithType: PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public Observable<PoolInner> updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String,String,String,PoolInner,String)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, final ServiceCallback<PoolInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, final ServiceCallback<PoolInner> serviceCallback)
  nameWithType: PoolsInner.updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, final ServiceCallback<PoolInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public ServiceFuture<PoolInner> updateAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch, final ServiceCallback<PoolInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateAsync(String,String,String,PoolInner,String,final ServiceCallback<PoolInner>)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  nameWithType: PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolUpdateHeaders?alt=com.microsoft.azure.management.batch.PoolUpdateHeaders&text=PoolUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String,String,String,PoolInner)
- fullName: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  nameWithType: PoolsInner.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pool name. This must be unique within the account. </p>
    name: poolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>
  - description: <p>The entity state (ETag) version of the pool to update. This value can be omitted or set to "*" to apply the operation unconditionally. </p>
    name: ifMatch
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PoolInner object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.management.batch.implementation.PoolInner?alt=com.microsoft.azure.management.batch.implementation.PoolInner&text=PoolInner" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.management.batch.PoolUpdateHeaders?alt=com.microsoft.azure.management.batch.PoolUpdateHeaders&text=PoolUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of an existing pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<PoolInner, PoolUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String poolName, PoolInner parameters, String ifMatch)
  uid: com.microsoft.azure.management.batch.implementation.PoolsInner.updateWithServiceResponseAsync(String,String,String,PoolInner,String)
nameWithType: PoolsInner
syntax: public class PoolsInner
type: class
uid: com.microsoft.azure.management.batch.implementation.PoolsInner
fullName: com.microsoft.azure.management.batch.implementation.PoolsInner
name: PoolsInner
package: com.microsoft.azure.management.batch.implementation
summary: <p>An instance of this class provides access to all the operations defined in Pools. </p>
metadata: {}
