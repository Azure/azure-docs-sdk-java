### YamlMime:JavaMember
nameWithType: QueueClient.send
type: method
members:
- fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message)
  name: send(IMessage message)
  nameWithType: QueueClient.send(IMessage message)
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling <code>sendAsync(message).get()</code>. For better performance, use async methods.</p>

    <p></p>
  syntax: public void send(IMessage message)
  uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage)
- fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message, TransactionContext transaction)
  name: send(IMessage message, TransactionContext transaction)
  nameWithType: QueueClient.send(IMessage message, TransactionContext transaction)
  overridden: com.microsoft.azure.servicebus.IMessageSender.send(IMessage,TransactionContext)
  parameters:
  - description: <p>message to be sent to the entity </p>
    name: message
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false">TransactionContext</xref> which this operation should enlist to. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if message couldn't be sent to the entity </p>
  summary: >-
    <p>Sends a message to the Azure Service Bus entity this sender is connected to. This method blocks until the message is sent to the entity. Calling this method is equivalent to calling <code>sendAsync(message).get()</code>. For better performance, use async methods.</p>

    <p></p>
  syntax: public void send(IMessage message, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.QueueClient.send(IMessage,TransactionContext)
uid: com.microsoft.azure.servicebus.QueueClient.send*
fullName: com.microsoft.azure.servicebus.QueueClient.send(IMessage message)
name: send(IMessage message)
package: com.microsoft.azure.servicebus
metadata: {}
