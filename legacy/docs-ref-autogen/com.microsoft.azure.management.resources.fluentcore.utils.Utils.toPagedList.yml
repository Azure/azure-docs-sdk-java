### YamlMime:JavaMember
nameWithType: Utils.toPagedList
type: method
members:
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  name: toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  nameWithType: Utils.toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  parameters:
  - description: <p>the list to convert to paged list </p>
    name: list
    type: <xref href="List%3CInT%3E?alt=List<InT>&text=List%3CInT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the mapper to map type in input list to output list </p>
    name: mapper
    type: <xref href="final+Func1%3CInT%2C+OutT%3E?alt=final Func1<InT, OutT>&text=final+Func1%3CInT%2C+OutT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the paged list </p>
    type: <xref href="static%3COutT%2C+InT%3E+PagedList%3COutT%3E?alt=static<OutT, InT> PagedList<OutT>&text=static%3COutT%2C+InT%3E+PagedList%3COutT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts the given list of a type to paged list of a different type.</p>

    <p></p>
  syntax: public static static<OutT, InT> PagedList<OutT> toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPagedList(List<InT>,final Func1<InT, OutT>)
uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPagedList*
fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
name: toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
package: com.microsoft.azure.management.resources.fluentcore.utils
metadata: {}
