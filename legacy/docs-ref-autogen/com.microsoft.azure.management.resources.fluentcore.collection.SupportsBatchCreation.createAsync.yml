### YamlMime:JavaMember
nameWithType: SupportsBatchCreation<ResourceT>.createAsync
type: method
members:
- fullName: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation<ResourceT extends Indexable>.createAsync(Creatable<ResourceT>... creatables)
  name: createAsync(Creatable<ResourceT>... creatables)
  nameWithType: SupportsBatchCreation<ResourceT>.createAsync(Creatable<ResourceT>... creatables)
  parameters:
  - description: <p>the creatables in the batch </p>
    name: creatables
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;...
  returns:
    description: <p>an observable for the resources </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Puts the requests to create a batch of resources into the queue and allow the HTTP client to execute it when system resources are available.</p>

    <p></p>
  syntax: public Observable<Indexable> createAsync(Creatable<ResourceT>... creatables)
  uid: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- fullName: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation<ResourceT extends Indexable>.createAsync(final ServiceCallback<CreatedResources<ResourceT>> callback, List<Creatable<ResourceT>> creatables)
  name: createAsync(final ServiceCallback<CreatedResources<ResourceT>> callback, List<Creatable<ResourceT>> creatables)
  nameWithType: SupportsBatchCreation<ResourceT>.createAsync(final ServiceCallback<CreatedResources<ResourceT>> callback, List<Creatable<ResourceT>> creatables)
  parameters:
  - description: <p>the callback to handle success and failure </p>
    name: callback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.CreatedResources?alt=com.microsoft.azure.management.resources.fluentcore.model.CreatedResources&text=CreatedResources" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;&gt;
  - description: <p>the list of creatables in the batch </p>
    name: creatables
    type: List&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.CreatedResources?alt=com.microsoft.azure.management.resources.fluentcore.model.CreatedResources&text=CreatedResources" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;&gt;
  summary: >-
    <p>Puts the requests to create a batch of resources into the queue and allow the HTTP client to execute it when system resources are available.</p>

    <p></p>
  syntax: public ServiceFuture<CreatedResources<ResourceT>> createAsync(final ServiceCallback<CreatedResources<ResourceT>> callback, List<Creatable<ResourceT>> creatables)
  uid: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- fullName: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation<ResourceT extends Indexable>.createAsync(List<Creatable<ResourceT>> creatables)
  name: createAsync(List<Creatable<ResourceT>> creatables)
  nameWithType: SupportsBatchCreation<ResourceT>.createAsync(List<Creatable<ResourceT>> creatables)
  parameters:
  - description: <p>the list of creatables in the batch </p>
    name: creatables
    type: List&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;&gt;
  returns:
    description: <p>an observable for the resources </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Puts the requests to create a batch of resources into the queue and allow the HTTP client to execute it when system resources are available.</p>

    <p></p>
  syntax: public Observable<Indexable> createAsync(List<Creatable<ResourceT>> creatables)
  uid: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- fullName: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation<ResourceT extends Indexable>.createAsync(ServiceCallback<CreatedResources<ResourceT>> callback, Creatable<ResourceT>... creatables)
  name: createAsync(ServiceCallback<CreatedResources<ResourceT>> callback, Creatable<ResourceT>... creatables)
  nameWithType: SupportsBatchCreation<ResourceT>.createAsync(ServiceCallback<CreatedResources<ResourceT>> callback, Creatable<ResourceT>... creatables)
  parameters:
  - description: <p>the callback to handle success and failure </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.CreatedResources?alt=com.microsoft.azure.management.resources.fluentcore.model.CreatedResources&text=CreatedResources" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;&gt;
  - description: <p>the creatables in the batch </p>
    name: creatables
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;...
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.CreatedResources?alt=com.microsoft.azure.management.resources.fluentcore.model.CreatedResources&text=CreatedResources" data-throw-if-not-resolved="False"/>&lt;ResourceT&gt;&gt;
  summary: >-
    <p>Puts the requests to create a batch of resources into the queue and allow the HTTP client to execute it when system resources are available.</p>

    <p></p>
  syntax: public ServiceFuture<CreatedResources<ResourceT>> createAsync(ServiceCallback<CreatedResources<ResourceT>> callback, Creatable<ResourceT>... creatables)
  uid: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
uid: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync*
fullName: com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation<ResourceT extends Indexable>.createAsync(Creatable<ResourceT>... creatables)
name: createAsync(Creatable<ResourceT>... creatables)
package: com.microsoft.azure.management.resources.fluentcore.collection
metadata: {}
