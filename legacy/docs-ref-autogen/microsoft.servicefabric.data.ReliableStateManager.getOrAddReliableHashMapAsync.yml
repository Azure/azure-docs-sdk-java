### YamlMime:JavaMember
nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync
type: method
members:
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String name)
  name: getOrAddReliableHashMapAsync(String name)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(String name)
  parameters:
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String)
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String name, Duration timeout)
  name: getOrAddReliableHashMapAsync(String name, Duration timeout)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(String name, Duration timeout)
  parameters:
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout in seconds to complete the operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(String name, Duration timeout)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String,Duration)
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name)
  name: getOrAddReliableHashMapAsync(Transaction tx, String name)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: tx
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(Transaction tx, String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction,String)
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  name: getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: tx
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout in seconds to complete the operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction,String,Duration)
uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync*
fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String name)
name: getOrAddReliableHashMapAsync(String name)
package: microsoft.servicefabric.data
metadata: {}
