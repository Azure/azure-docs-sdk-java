### YamlMime:JavaMember
nameWithType: SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom
type: method
members:
- fullName: com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(StorageAccount storageAccount, String containerName, String fileName)
  name: importFrom(StorageAccount storageAccount, String containerName, String fileName)
  nameWithType: SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(StorageAccount storageAccount, String containerName, String fileName)
  parameters:
  - description: <p>an existing storage account to be used </p>
    name: storageAccount
    type: <xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the container name within the storage account to use </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the exported database file name </p>
    name: fileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword" data-throw-if-not-resolved="False"/>
  syntax: public SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword importFrom(StorageAccount storageAccount, String containerName, String fileName)
  uid: com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(StorageAccount,String,String)
- fullName: com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(String storageUri)
  name: importFrom(String storageUri)
  nameWithType: SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(String storageUri)
  parameters:
  - description: <p>the storage URI to use </p>
    name: storageUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>next definition stage </p>
    type: <xref href="SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey?alt=SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey&text=SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey" data-throw-if-not-resolved="False"/>
  syntax: public SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey importFrom(String storageUri)
  uid: com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(String)
uid: com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom*
fullName: com.microsoft.azure.management.sql.SqlDatabaseImportRequest.DefinitionStages.ImportFrom.importFrom(StorageAccount storageAccount, String containerName, String fileName)
name: importFrom(StorageAccount storageAccount, String containerName, String fileName)
package: com.microsoft.azure.management.sql
metadata: {}
