### YamlMime:JavaMember
nameWithType: DeviceClient.DeviceClient
type: constructor
members:
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient()
  name: DeviceClient()
  nameWithType: DeviceClient.DeviceClient()
  syntax: protected DeviceClient()
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient()
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol)
  name: DeviceClient(String connString, IotHubClientProtocol protocol)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol)
  parameters:
  - description: >-
      <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

          </code> ,<code>DeviceId 

          </code> , and<code>SharedAccessKey 

          </code> . </p>
    name: connString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the communication protocol used (i.e. HTTPS).</p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if any of<code>connString 

          </code> or <code>protocol 

          </code> are<code>null 

          </code> ; or if<code>connString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connString 

          </code> is for an x509 authenticated device </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>if the hostname in the connection string is not a valid URI </p>
  summary: >-
    <p>Constructor that takes a connection string as an argument.</p>

    <p></p>
  syntax: public DeviceClient(String connString, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  name: DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  parameters:
  - description: '<p>the connection string for the device. May be an x509 connection string (format: "HostName=...;DeviceId=...;x509=true") and it may be a SAS connection string (format: "HostName=...;DeviceId=...;SharedAccessKey=..."). If this connection string is an x509 connection string, the client will use the provided SSLContext for authentication. </p>'
    name: connString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the protocol to use when communicating with IotHub </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>the ssl context that will be used during authentication. If the provided connection string does not contain SAS based credentials, then the sslContext will be used for x509 authentication. If the provided connection string does contain SAS based credentials, the sslContext will still be used during SSL negotiation. </p>
    name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>if the hostname in the connection string is not a valid URI </p>
  summary: <p>Creates a device client that uses the provided SSLContext for SSL negotiation </p>
  syntax: public DeviceClient(String connString, IotHubClientProtocol protocol, SSLContext sslContext)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,SSLContext)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  name: DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  nameWithType: DeviceClient.DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  parameters:
  - description: '<p>the connection string for the x509 device to connect as (format: "HostName=...;DeviceId=...;x509=true") </p>'
    name: connString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the protocol to use when communicating with IotHub </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: '<p>the PEM formatted public key certificate or the path to a PEM formatted public key certificate file. Append if there is any intermediate or chained certificates to the end of the public certificate file in the following format: <mdash></mdash><ndash></ndash>BEGIN CERTIFICATE<mdash></mdash><ndash></ndash> (Primary SSL certificate) <mdash></mdash><ndash></ndash>END CERTIFICATE<mdash></mdash><ndash></ndash><mdash></mdash>-BEGIN CERTIFICATE<mdash></mdash><ndash></ndash> (Intermediate certificate) <mdash></mdash><ndash></ndash>END CERTIFICATE<mdash></mdash><ndash></ndash><mdash></mdash><ndash></ndash>BEGIN CERTIFICATE<mdash></mdash><ndash></ndash> (Root certificate) <mdash></mdash><ndash></ndash>END CERTIFICATE<mdash></mdash><ndash></ndash></p>'
    name: publicKeyCertificate
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>if the provided publicKeyCertificate is a path to a file containing the PEM formatted public key certificate </p>
    name: isCertificatePath
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>the PEM formatted private key or the path to a PEM formatted private key file </p>
    name: privateKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>if the provided privateKey is a path to a file containing the PEM formatted private key </p>
    name: isPrivateKeyPath
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>if the hostname in the connection string is not a valid URI </p>
  summary: >-
    <p>Constructor that uses x509 authentication for communicating with IotHub</p>

    <p></p>
  syntax: public DeviceClient(String connString, IotHubClientProtocol protocol, String publicKeyCertificate, boolean isCertificatePath, String privateKey, boolean isPrivateKeyPath)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,String,boolean,String,boolean)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connString, TransportClient transportClient)
  name: DeviceClient(String connString, TransportClient transportClient)
  nameWithType: DeviceClient.DeviceClient(String connString, TransportClient transportClient)
  parameters:
  - description: >-
      <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

          </code> ,<code>DeviceId 

          </code> , and<code>SharedAccessKey 

          </code> .</p>
    name: connString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the transport client to use by the device client.</p>
    name: transportClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.TransportClient?alt=com.microsoft.azure.sdk.iot.device.TransportClient&text=TransportClient" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if<code>connString 

          </code> or if<code>connString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connString 

          </code> is for an x509 authenticated device </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>if the hostname in the connection string is not a valid URI </p>
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if the connection string belongs to a module rather than a device </p>
  summary: >-
    <p>Constructor that takes a connection string and a transport client as an argument.</p>

    <p></p>
  syntax: public DeviceClient(String connString, TransportClient transportClient)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,TransportClient)
uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient*
fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient
name: DeviceClient
package: com.microsoft.azure.sdk.iot.device
metadata: {}
