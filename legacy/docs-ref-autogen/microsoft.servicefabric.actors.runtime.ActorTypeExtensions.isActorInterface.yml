### YamlMime:JavaMember
nameWithType: ActorTypeExtensions.isActorInterface
type: method
members:
- fullName: microsoft.servicefabric.actors.runtime.ActorTypeExtensions.isActorInterface(Class<?> actorInterfaceClass)
  name: isActorInterface(Class<?> actorInterfaceClass)
  nameWithType: ActorTypeExtensions.isActorInterface(Class<?> actorInterfaceClass)
  parameters:
  - description: <p>The interface type of the actor. </p>
    name: actorInterfaceClass
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true, if the actorInterfaceClass is an interface only implements <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.Actor"></xref> or <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.Actor"></xref> and <xref uid="microsoft.servicefabric.actors.ActorEventPublisher" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.ActorEventPublisher"></xref>; otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Indicates whether the interface type is an actor interface. </p>
  syntax: public static boolean isActorInterface(Class<?> actorInterfaceClass)
  uid: microsoft.servicefabric.actors.runtime.ActorTypeExtensions.isActorInterface(Class<?>)
uid: microsoft.servicefabric.actors.runtime.ActorTypeExtensions.isActorInterface*
fullName: microsoft.servicefabric.actors.runtime.ActorTypeExtensions.isActorInterface
name: isActorInterface(Class<?> actorInterfaceClass)
package: microsoft.servicefabric.actors.runtime
metadata: {}
