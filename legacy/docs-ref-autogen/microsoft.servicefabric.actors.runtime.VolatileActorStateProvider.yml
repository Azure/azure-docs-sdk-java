### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider()
  name: VolatileActorStateProvider()
  nameWithType: VolatileActorStateProvider.VolatileActorStateProvider()
  summary: <p>Creates an instance of <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public VolatileActorStateProvider()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  name: VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  nameWithType: VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReplicatorSettings"></xref> object that describes replicator settings. </p>
    name: replicatorSettings
    type: <xref href="system.fabric.ReplicatorSettings?alt=system.fabric.ReplicatorSettings&text=ReplicatorSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref> with specified replicator settings.</p>

    <p></p>
  syntax: public VolatileActorStateProvider(ReplicatorSettings replicatorSettings)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.VolatileActorStateProvider(ReplicatorSettings)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.data.StateProviderReplica" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.actors.runtime.ActorStateProvider?alt=microsoft.servicefabric.actors.runtime.ActorStateProvider&text=ActorStateProvider" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.abort()
  name: abort()
  nameWithType: VolatileActorStateProvider.abort()
  overridden: microsoft.servicefabric.data.StateProviderReplica.abort()
  summary: >-
    <p>Forcefully abort the state provider replica. </p>

    <p>

      <b>Remarks:</b>This generally occurs when a permanent fault is detected on the node, or when Service Fabric cannot reliably manage the replica's life-cycle due to internal failures. </p>
  syntax: public void abort()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.abort()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  name: actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.actorActivatedAsync(ActorId,CancellationToken)
  parameters:
  - description: <p>Id of the actor that is activated. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous Actor activation notification processing. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is invoked as part of the activation process of the actor with the specified Id.</p>

    <p></p>
  syntax: public CompletableFuture<?> actorActivatedAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.actorActivatedAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: VolatileActorStateProvider.backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.data.BackupOption" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.data.BackupOption"></xref> for the callback </p>
    name: option
    type: <xref href="microsoft.servicefabric.data.BackupOption?alt=microsoft.servicefabric.data.BackupOption&text=BackupOption" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref> that describes timeout for the backup </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  - description: <p>BackupCallbackCallback to be called when the backup folder has been created locally and is ready to be moved out of the node. </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of state managed by this actor state provider</p>

    <p>

      <b>Remarks:</b>Backup/restore is not supported by <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public CompletableFuture<?> backupAsync(BackupOption option, Duration timeout, CancellationToken cancellationToken, BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BackupOption,Duration,CancellationToken,BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  name: backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  nameWithType: VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  overridden: microsoft.servicefabric.data.StateProviderReplica.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>BackupCallbackCallback to be called when the backup folder has been created locally and is ready to be moved out of the node. </p>
    name: backupCallback
    type: BiFunction&lt;<xref href="microsoft.servicefabric.data.BackupInfo?alt=microsoft.servicefabric.data.BackupInfo&text=BackupInfo" data-throw-if-not-resolved="False"/>, <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous backup operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs a full backup of state managed by this actor state provider</p>

    <p>

      <b>Remarks:</b>Backup/restore is not supported by <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public CompletableFuture<?> backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>> backupCallback)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.backupAsync(BiFunction<BackupInfo, CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  name: changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.changeRoleAsync(ReplicaRole,CancellationToken)
  parameters:
  - description: <p>The new <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReplicaRole"></xref>, such as primary or secondary. </p>
    name: newRole
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous change role operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Notify the state provider replica that its role is changing, for example to Primary or Secondary.</p>

    <p></p>
  syntax: public CompletableFuture<?> changeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.changeRoleAsync(ReplicaRole,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.closeAsync(CancellationToken cancellationToken)
  name: closeAsync(CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.closeAsync(CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.closeAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous close operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gracefully close the state provider replica.</p>

    <p>

      <b>Remarks:</b>This generally occurs when the replica's code is being upgrade, the replica is being moved due to load balancing, or a transient fault is detected. </p>
  syntax: public CompletableFuture<?> closeAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.closeAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  name: containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.containsStateAsync(ActorId,String,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to check state existence. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the actor state to check for existence. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous check operation. The value of TResult parameter is true if state with specified name exists otherwise false. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether actor state provider contains an actor state with specified state name.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> containsStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.containsStateAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.currentReplicaRole()
  name: currentReplicaRole()
  nameWithType: VolatileActorStateProvider.currentReplicaRole()
  returns:
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  syntax: public ReplicaRole currentReplicaRole()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.currentReplicaRole()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  name: deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteReminderAsync(ActorId,String,CancellationToken)
  parameters:
  - description: <p>ID of the actor to delete the reminder. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the reminder to delete. </p>
    name: reminderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous delete operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified actor reminder if it exists.</p>

    <p></p>
  syntax: public CompletableFuture<?> deleteReminderAsync(ActorId actorId, String reminderName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteReminderAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  name: deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
  parameters:
  - description: <p>The set of reminders to delete </p>
    name: reminderNames
    type: Map&lt;<xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>, Collection&lt;String&gt;&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous delete operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified set of reminders</p>

    <p></p>
  syntax: public CompletableFuture<?> deleteRemindersAsync(Map<ActorId, Collection<String>> reminderNames, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.deleteRemindersAsync(Map<ActorId, Collection<String>>,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  name: enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.enumerateStateNamesAsync(ActorId,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to create enumerable. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous enumeration operation. The value of TResult parameter is an enumerable of all state names associated with specified actor. </p>
    type: <xref href="CompletableFuture%3CList%3CString%3E%3E?alt=CompletableFuture%3CList%3CString%3E%3E&text=CompletableFuture%3CList%3CString%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an enumerable of all the state names associated with specified actor.</p>

    <p>

      <b>Remarks:</b>The enumerator returned from actor state provider is safe to use concurrently with reads and writes to the state provider. It represents a snapshot consistent view of the state provider. </p>
  syntax: public CompletableFuture<List<String>> enumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.enumerateStateNamesAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  name: getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.getActorsAsync(int,ContinuationToken,CancellationToken)
  parameters:
  - description: <p>Number of items requested to be returned. </p>
    name: itemsCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    name: continuationToken
    type: <xref href="microsoft.servicefabric.actors.ContinuationToken?alt=microsoft.servicefabric.actors.ContinuationToken&text=ContinuationToken" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of call to server. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.PagedResult?alt=microsoft.servicefabric.actors.PagedResult&text=PagedResult" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets ActorIds from the State Provider.</p>

    <p>

      <b>Remarks:</b> The </p>
  syntax: public CompletableFuture<PagedResult<ActorId>> getActorsAsync(int itemsCount, ContinuationToken continuationToken, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getActorsAsync(int,ContinuationToken,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyContext()
  name: getCopyContext()
  nameWithType: VolatileActorStateProvider.getCopyContext()
  overridden: system.fabric.StateProvider.getCopyContext()
  returns:
    description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref>. </p>
    type: <xref href="system.fabric.OperationDataStream?alt=system.fabric.OperationDataStream&text=OperationDataStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>

    <p>

      <b>Remarks:</b>The Primary replica analyzes the context and sends back state via <xref uid="system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyState(SequenceNumber, OperationDataStream)"></xref>. <xref uid="system.fabric.StateProvider.getCopyContext()" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyContext()"></xref> is called on newly created, idle Secondary replicas and provides a mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> objects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back. See <xref uid="system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyState(SequenceNumber, OperationDataStream)"></xref> at the Primary replica for the other half of the exchange. For in-memory services, the <xref uid="system.fabric.StateProvider.getCopyContext()" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyContext()"></xref> method is not called, as the state of the Secondary replicas is known (they are empty and will require all of the state). </p>
  syntax: public OperationDataStream getCopyContext()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyContext()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  name: getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  nameWithType: VolatileActorStateProvider.getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  overridden: system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)
  parameters:
  - description: <p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref uid="system.fabric.StateReplicator.getCopyStream()" data-throw-if-not-resolved="false" data-raw-source="StateReplicator#getCopyStream()"></xref> method. LSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref uid="system.fabric.StateReplicator.getReplicationStream()" data-throw-if-not-resolved="false" data-raw-source="StateReplicator#getReplicationStream()"></xref> method. </p>
    name: upToSequenceNumber
    type: <xref href="system.fabric.SequenceNumber?alt=system.fabric.SequenceNumber&text=SequenceNumber" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref> that contains the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> objects that are created by the Secondary replica. requires to catch up to the provided </p>
    name: copyContext
    type: <xref href="system.fabric.OperationDataStream?alt=system.fabric.OperationDataStream&text=OperationDataStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref>. </p>
    type: <xref href="system.fabric.OperationDataStream?alt=system.fabric.OperationDataStream&text=OperationDataStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>

    <p>

      <b>Remarks:</b>Just as <xref uid="system.fabric.StateProvider.getCopyContext()" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyContext()"></xref> enables the Secondary replica to send context to the Primary replica via an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref>, <xref uid="system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false" data-raw-source="StateProvider#getCopyState(SequenceNumber, OperationDataStream)"></xref> enables the Primary replica to respond with an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref>. The stream contains objects that are delivered to the Secondary replica via the <xref uid="system.fabric.StateReplicator.getCopyStream()" data-throw-if-not-resolved="false" data-raw-source="StateReplicator#getCopyStream()"></xref> method of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricReplicator"></xref> class. The objects implement <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Operation"></xref> and contain the specified data. When the Primary replica receives this call, it should create and return another <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationDataStream"></xref> that contains <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref>. <xref uid="" data-throw-if-not-resolved="false" data-raw-source="OperationData"></xref> represents the data/state that the Secondary replica </p>
  syntax: public OperationDataStream getCopyState(SequenceNumber upToSequenceNumber, OperationDataStream copyContext)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getCopyState(SequenceNumber,OperationDataStream)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getLastCommittedSequenceNumber()
  name: getLastCommittedSequenceNumber()
  nameWithType: VolatileActorStateProvider.getLastCommittedSequenceNumber()
  overridden: system.fabric.StateProvider.getLastCommittedSequenceNumber()
  returns:
    description: <p>Returns long. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Obtains the last sequence number that the service has committed.</p>

    <p>

      <b>Remarks:</b>This method is called on a service when it first starts up, in case it has any persistent state, and when data loss is suspected. When a stateful service replica starts up, it has the option to restore any data that might have persisted from previous updates. If it restores some state in this manner, its current progress is the last written sequence number for that data. A volatile service can simply return 0. Note that this method is not called to determine a new primary election during fail-over, because the current committed progress is already known by the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricReplicator"></xref> class at that time. </p>
  syntax: public long getLastCommittedSequenceNumber()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.getLastCommittedSequenceNumber()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  name: initialize(ActorTypeInformation actorTypeInformation)
  nameWithType: VolatileActorStateProvider.initialize(ActorTypeInformation actorTypeInformation)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.initialize(ActorTypeInformation)
  parameters:
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.runtime.ActorTypeInformation" data-throw-if-not-resolved="false" data-raw-source="ActorTypeInformation"></xref> Type information of the actor class. </p>
    name: actorTypeInformation
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes the actor state provider with type information of the actor type associated with it.</p>

    <p></p>
  syntax: public void initialize(ActorTypeInformation actorTypeInformation)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize(ActorTypeInformation)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
  name: initialize(StatefulServiceInitializationParameters initializationParameters)
  nameWithType: VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters initializationParameters)
  overridden: microsoft.servicefabric.data.StateProviderReplica.initialize(StatefulServiceInitializationParameters)
  parameters:
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceInitializationParameters"></xref> such as service name, partition id, replica id, and code package information. </p>
    name: initializationParameters
    type: <xref href="system.fabric.StatefulServiceInitializationParameters?alt=system.fabric.StatefulServiceInitializationParameters&text=StatefulServiceInitializationParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initialize the state provider replica using the service initialization information.</p>

    <p>

      <b>Remarks:</b>No complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync. </p>
  syntax: public void initialize(StatefulServiceInitializationParameters initializationParameters)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.initialize(StatefulServiceInitializationParameters)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  name: loadRemindersAsync(CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.loadRemindersAsync(CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadRemindersAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous load operation. The value of TResult parameter is a collection of all actor reminders contained in the actor state provider. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorReminderCollection?alt=microsoft.servicefabric.actors.runtime.ActorReminderCollection&text=ActorReminderCollection" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Loads all the reminders contained in the actor state provider.</p>

    <p></p>
  syntax: public CompletableFuture<ActorReminderCollection> loadRemindersAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadRemindersAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  name: loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.loadStateAsync(ActorId,String,CancellationToken)
  parameters:
  - description: <p>Id of the actor that is activated. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>StateName. </p>
    name: stateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="FabricKeyNotFoundException?alt=FabricKeyNotFoundException&text=FabricKeyNotFoundException" data-throw-if-not-resolved="False"/>
    description: <p>If Actor state associated with specified state name does not exist. </p>
  returns:
    description: <p>A task that represents the asynchronous load operation. The value of TResult parameter contains value of actor state associated with given state name. </p>
    type: <xref href="%3CT%3E+CompletableFuture%3CT%3E?alt=%3CT%3E+CompletableFuture%3CT%3E&text=%3CT%3E+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Loads the actor state associated with the specified state name.</p>

    <p></p>
  syntax: public <T> CompletableFuture<T> loadStateAsync(ActorId actorId, String stateName, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.loadStateAsync(ActorId,String,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
  name: onDataLossAsync(CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.onDataLossAsync(CancellationToken cancellationToken)
  overridden: system.fabric.StateProvider.onDataLossAsync(CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.Boolean"></xref>, that indicates whether state changed. When it changed, the method returns true or when it did not change, the method returns false. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates that a write quorum of replicas in this replica set has been lost, and that therefore data loss might have occurred. The replica set consists of a majority of replicas, which includes the Primary replica.</p>

    <p>

      <b>Remarks:</b>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, it elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss can choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state, it should return false from this method, which indicates that no state change has been made. If it has restored or altered its state, such as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect. Therefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them. </p>
  syntax: public CompletableFuture<Boolean> onDataLossAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onDataLossAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onSnapshotAsync(Duration currentLogicalTime)
  name: onSnapshotAsync(Duration currentLogicalTime)
  nameWithType: VolatileActorStateProvider.onSnapshotAsync(Duration currentLogicalTime)
  parameters:
  - name: currentLogicalTime
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<?> onSnapshotAsync(Duration currentLogicalTime)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.onSnapshotAsync(Duration)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  name: openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
  parameters:
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReplicaOpenMode"></xref> that indicates whether this is a new or existing replica. </p>
    name: openMode
    type: <xref href="system.fabric.ReplicaOpenMode?alt=system.fabric.ReplicaOpenMode&text=ReplicaOpenMode" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StatefulServicePartition"></xref> partition the replica belongs to. </p>
    name: partition
    type: <xref href="system.fabric.StatefulServicePartition?alt=system.fabric.StatefulServicePartition&text=StatefulServicePartition" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous open operation. The result contains the replicator responsible for replicating state between other state provider replicas in the partition. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.Replicator?alt=system.fabric.Replicator&text=Replicator" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Open the state provider replica for use.</p>

    <p>

      <b>Remarks:</b>Extended state provider initialization tasks can be started at this time. </p>
  syntax: public CompletableFuture<Replicator> openAsync(ReplicaOpenMode openMode, StatefulServicePartition partition, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.openAsync(ReplicaOpenMode,StatefulServicePartition,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  name: reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
  parameters:
  - description: <p>ID of the actor which own reminder </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Actor reminder that completed successfully. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous reminder callback completed notification processing. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Invoked when a reminder fires and finishes executing its callback <xref uid="microsoft.servicefabric.actors.runtime.Remindable.receiveReminderAsync(String,byte [],Duration,Duration)" data-throw-if-not-resolved="false" data-raw-source="Remindable#receiveReminderAsync"></xref> successfully </p>
  syntax: public CompletableFuture<?> reminderCallbackCompletedAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.reminderCallbackCompletedAsync(ActorId,ActorReminder,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  name: removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.removeActorAsync(ActorId,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to remove state. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous remove operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes all the existing states and reminders associated with specified actor atomically.</p>

    <p></p>
  syntax: public CompletableFuture<?> removeActorAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.removeActorAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync(String backupFolderPath)
  name: restoreAsync(String backupFolderPath)
  nameWithType: VolatileActorStateProvider.restoreAsync(String backupFolderPath)
  overridden: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String)
  parameters:
  - description: <p>Directory from where replica will be restored from. </p>
    name: backupFolderPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous restore operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Restore a backup taken by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.data.StateProviderReplica#backupAsync(BiFunction)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.data.StateProviderReplica#backupAsync(BackupOption, Duration, CancellationToken, BiFunction)"></xref><b>Remarks:</b>Backup/restore is not supported by <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public CompletableFuture<?> restoreAsync(String backupFolderPath)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync(String)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  name: restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.data.StateProviderReplica.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
  parameters:
  - description: <p>Directory from where replica will be restored from. </p>
    name: backupFolderPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RestorePolicy"></xref>. </p>
    name: restorePolicy
    type: <xref href="microsoft.servicefabric.data.RestorePolicy?alt=microsoft.servicefabric.data.RestorePolicy&text=RestorePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>The timeout for this operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Task that represents the asynchronous restore operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Restore a backup taken by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.data.StateProviderReplica#backupAsync(BiFunction)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.data.StateProviderReplica#backupAsync(BackupOption, Duration, CancellationToken, BiFunction)"></xref><b>Remarks:</b>Backup/restore is not supported by <xref uid="microsoft.servicefabric.actors.runtime.VolatileActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="VolatileActorStateProvider"></xref>. </p>
  syntax: public CompletableFuture<?> restoreAsync(String backupFolderPath, RestorePolicy restorePolicy, Duration timeout, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.restoreAsync(String,RestorePolicy,Duration,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  name: saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
  parameters:
  - description: <p>ID of actor for which to save reminder. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Actor reminder to save. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified actor reminder. If an actor reminder with given name does not exist, it adds the actor reminder otherwise existing actor reminder with same name is updated.</p>

    <p></p>
  syntax: public CompletableFuture<?> saveReminderAsync(ActorId actorId, ActorReminder reminder, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveReminderAsync(ActorId,ActorReminder,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  name: saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.runtime.ActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
  parameters:
  - description: <p>ID of the actor for which to save the state changes. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: <p>Collection of state changes to save. </p>
    name: stateChanges
    type: List&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorStateChange?alt=microsoft.servicefabric.actors.runtime.ActorStateChange&text=ActorStateChange" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous save operation. The collection of state changes should contain only one item for a given state name. The save operation will fail on trying to add an actor state which already exists or update/remove an actor state which does not exist. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves the specified set of actor state changes atomically.</p>

    <p></p>
  syntax: public CompletableFuture<?> saveStateAsync(ActorId actorId, List<ActorStateChange> stateChanges, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.saveStateAsync(ActorId,List<ActorStateChange>,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  name: setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  nameWithType: VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  overridden: microsoft.servicefabric.data.StateProviderReplica.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
  parameters:
  - description: <p>TODO. Function called as part of suspected data loss processing. Function takes in CancellationToken and returns a CompletableFuture that represents the asynchronous processing of the event. Returning true, indicates that the replica's state has been restored. False indicates that the replica's state has not been changed. </p>
    name: onDataLossAsync
    type: Function&lt;<xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>, CompletableFuture&lt;Boolean&gt;&gt;
  summary: >-
    <p>Function called during suspected data-loss</p>

    <p></p>
  syntax: public void setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>> onDataLossAsync)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.setOnDataLossCallback(Function<CancellationToken, CompletableFuture<Boolean>>)
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceId()
  name: traceId()
  nameWithType: VolatileActorStateProvider.traceId()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String traceId()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceId()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceType()
  name: traceType()
  nameWithType: VolatileActorStateProvider.traceType()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String traceType()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.traceType()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.transientErrorRetryDelay()
  name: transientErrorRetryDelay()
  nameWithType: VolatileActorStateProvider.transientErrorRetryDelay()
  returns:
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public Duration transientErrorRetryDelay()
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.transientErrorRetryDelay()
- fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  name: updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  nameWithType: VolatileActorStateProvider.updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  overridden: system.fabric.StateProvider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
  parameters:
  - description: <p>The new <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Epoch"></xref>. </p>
    name: epoch
    type: <xref href="system.fabric.Epoch?alt=system.fabric.Epoch&text=Epoch" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum sequence number (LSN) that should have been observed in the previous epoch. </p>
    name: previousEpochLastSequenceNumber
    type: <xref href="system.fabric.SequenceNumber?alt=system.fabric.SequenceNumber&text=SequenceNumber" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns Task. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. The change occurs due to failure or load balancing of the previous Primary replica. Epoch changes act as a barrier by segmenting operations into the exact configuration periods in which they were sent by a specific Primary replica.</p>

    <p>

      <b>Remarks:</b>This method is called because the Primary replica of the replica set has changed, or a change was attempted. Secondary replicas receive this method either when they are about to become the new Primary replica, or, if they are not the new Primary replica, they receive it when they attempt to get the first operation from the new Primary replica from the replication stream. Primary replicas might occasionally receive this method if there is an attempt to swap the Primary replica, which fails. The information in the <xref uid="system.fabric.StateProvider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="StateProvider#updateEpochAsync(Epoch, SequenceNumber, CancellationToken)"></xref> method enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation to describe how far the operation has progressed. Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. False progress means that an LSN in a previous epoch was greater than the LSN that the Primary replica receives. </p>
  syntax: public CompletableFuture<?> updateEpochAsync(Epoch epoch, SequenceNumber previousEpochLastSequenceNumber, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider.updateEpochAsync(Epoch,SequenceNumber,CancellationToken)
nameWithType: VolatileActorStateProvider
syntax: public class VolatileActorStateProvider implements ActorStateProvider,StateProvider
type: class
uid: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider
fullName: microsoft.servicefabric.actors.runtime.VolatileActorStateProvider
name: VolatileActorStateProvider
package: microsoft.servicefabric.actors.runtime
summary: <p>ActorStateProvider implementation for Volatile persistence i.e Actor state is kept in-memory only. </p>
metadata: {}
