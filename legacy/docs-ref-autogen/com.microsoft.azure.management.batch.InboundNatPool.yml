### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batch.InboundNatPool.backendPort()
  name: backendPort()
  nameWithType: InboundNatPool.backendPort()
  returns:
    description: <p>the backendPort value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public int backendPort()
  uid: com.microsoft.azure.management.batch.InboundNatPool.backendPort()
- fullName: com.microsoft.azure.management.batch.InboundNatPool.frontendPortRangeEnd()
  name: frontendPortRangeEnd()
  nameWithType: InboundNatPool.frontendPortRangeEnd()
  returns:
    description: <p>the frontendPortRangeEnd value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public int frontendPortRangeEnd()
  uid: com.microsoft.azure.management.batch.InboundNatPool.frontendPortRangeEnd()
- fullName: com.microsoft.azure.management.batch.InboundNatPool.frontendPortRangeStart()
  name: frontendPortRangeStart()
  nameWithType: InboundNatPool.frontendPortRangeStart()
  returns:
    description: <p>the frontendPortRangeStart value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public int frontendPortRangeStart()
  uid: com.microsoft.azure.management.batch.InboundNatPool.frontendPortRangeStart()
- fullName: com.microsoft.azure.management.batch.InboundNatPool.name()
  name: name()
  nameWithType: InboundNatPool.name()
  returns:
    description: <p>the name value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. If any invalid values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.management.batch.InboundNatPool.name()
- fullName: com.microsoft.azure.management.batch.InboundNatPool.networkSecurityGroupRules()
  name: networkSecurityGroupRules()
  nameWithType: InboundNatPool.networkSecurityGroupRules()
  returns:
    description: <p>the networkSecurityGroupRules value </p>
    type: List&lt;<xref href="com.microsoft.azure.management.batch.NetworkSecurityGroupRule?alt=com.microsoft.azure.management.batch.NetworkSecurityGroupRule&text=NetworkSecurityGroupRule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public List<NetworkSecurityGroupRule> networkSecurityGroupRules()
  uid: com.microsoft.azure.management.batch.InboundNatPool.networkSecurityGroupRules()
- fullName: com.microsoft.azure.management.batch.InboundNatPool.protocol()
  name: protocol()
  nameWithType: InboundNatPool.protocol()
  returns:
    description: <p>the protocol value </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundEndpointProtocol?alt=com.microsoft.azure.management.batch.InboundEndpointProtocol&text=InboundEndpointProtocol" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'TCP', 'UDP'.</p>

    <p></p>
  syntax: public InboundEndpointProtocol protocol()
  uid: com.microsoft.azure.management.batch.InboundNatPool.protocol()
- fullName: com.microsoft.azure.management.batch.InboundNatPool.withBackendPort(int backendPort)
  name: withBackendPort(int backendPort)
  nameWithType: InboundNatPool.withBackendPort(int backendPort)
  parameters:
  - description: <p>the backendPort value to set </p>
    name: backendPort
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundNatPool object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundNatPool?alt=com.microsoft.azure.management.batch.InboundNatPool&text=InboundNatPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public InboundNatPool withBackendPort(int backendPort)
  uid: com.microsoft.azure.management.batch.InboundNatPool.withBackendPort(int)
- fullName: com.microsoft.azure.management.batch.InboundNatPool.withFrontendPortRangeEnd(int frontendPortRangeEnd)
  name: withFrontendPortRangeEnd(int frontendPortRangeEnd)
  nameWithType: InboundNatPool.withFrontendPortRangeEnd(int frontendPortRangeEnd)
  parameters:
  - description: <p>the frontendPortRangeEnd value to set </p>
    name: frontendPortRangeEnd
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundNatPool object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundNatPool?alt=com.microsoft.azure.management.batch.InboundNatPool&text=InboundNatPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public InboundNatPool withFrontendPortRangeEnd(int frontendPortRangeEnd)
  uid: com.microsoft.azure.management.batch.InboundNatPool.withFrontendPortRangeEnd(int)
- fullName: com.microsoft.azure.management.batch.InboundNatPool.withFrontendPortRangeStart(int frontendPortRangeStart)
  name: withFrontendPortRangeStart(int frontendPortRangeStart)
  nameWithType: InboundNatPool.withFrontendPortRangeStart(int frontendPortRangeStart)
  parameters:
  - description: <p>the frontendPortRangeStart value to set </p>
    name: frontendPortRangeStart
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundNatPool object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundNatPool?alt=com.microsoft.azure.management.batch.InboundNatPool&text=InboundNatPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public InboundNatPool withFrontendPortRangeStart(int frontendPortRangeStart)
  uid: com.microsoft.azure.management.batch.InboundNatPool.withFrontendPortRangeStart(int)
- fullName: com.microsoft.azure.management.batch.InboundNatPool.withName(String name)
  name: withName(String name)
  nameWithType: InboundNatPool.withName(String name)
  parameters:
  - description: <p>the name value to set </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundNatPool object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundNatPool?alt=com.microsoft.azure.management.batch.InboundNatPool&text=InboundNatPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters. If any invalid values are provided the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public InboundNatPool withName(String name)
  uid: com.microsoft.azure.management.batch.InboundNatPool.withName(String)
- fullName: com.microsoft.azure.management.batch.InboundNatPool.withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  name: withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  nameWithType: InboundNatPool.withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  parameters:
  - description: <p>the networkSecurityGroupRules value to set </p>
    name: networkSecurityGroupRules
    type: List&lt;<xref href="com.microsoft.azure.management.batch.NetworkSecurityGroupRule?alt=com.microsoft.azure.management.batch.NetworkSecurityGroupRule&text=NetworkSecurityGroupRule" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the InboundNatPool object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundNatPool?alt=com.microsoft.azure.management.batch.InboundNatPool&text=InboundNatPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.</p>

    <p></p>
  syntax: public InboundNatPool withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule> networkSecurityGroupRules)
  uid: com.microsoft.azure.management.batch.InboundNatPool.withNetworkSecurityGroupRules(List<NetworkSecurityGroupRule>)
- fullName: com.microsoft.azure.management.batch.InboundNatPool.withProtocol(InboundEndpointProtocol protocol)
  name: withProtocol(InboundEndpointProtocol protocol)
  nameWithType: InboundNatPool.withProtocol(InboundEndpointProtocol protocol)
  parameters:
  - description: <p>the protocol value to set </p>
    name: protocol
    type: <xref href="com.microsoft.azure.management.batch.InboundEndpointProtocol?alt=com.microsoft.azure.management.batch.InboundEndpointProtocol&text=InboundEndpointProtocol" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundNatPool object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.InboundNatPool?alt=com.microsoft.azure.management.batch.InboundNatPool&text=InboundNatPool" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'TCP', 'UDP'.</p>

    <p></p>
  syntax: public InboundNatPool withProtocol(InboundEndpointProtocol protocol)
  uid: com.microsoft.azure.management.batch.InboundNatPool.withProtocol(InboundEndpointProtocol)
nameWithType: InboundNatPool
syntax: public class InboundNatPool
type: class
uid: com.microsoft.azure.management.batch.InboundNatPool
fullName: com.microsoft.azure.management.batch.InboundNatPool
name: InboundNatPool
package: com.microsoft.azure.management.batch
summary: <p>A inbound NAT pool that can be used to address specific ports on compute nodes in a Batch pool externally. </p>
metadata: {}
