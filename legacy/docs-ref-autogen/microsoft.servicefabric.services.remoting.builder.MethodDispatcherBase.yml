### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.MethodDispatcher?alt=microsoft.servicefabric.services.remoting.MethodDispatcher&text=MethodDispatcher" data-throw-if-not-resolved="False"/>
methods:
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWith(CompletableFuture<?>)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult(int,CompletableFuture<TRetval>)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseBody(int,Object)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.createResponseMessageBody(Object)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatch(Object,int,Object)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.dispatchAsync(Object,int,Object,CancellationToken)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getInterfaceId()
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getMethodName(int)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.getRequestMessageBodyValue(Object)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.initialize(int,Map<Integer, String>)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch(int,Object,Object)
- microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatchAsync(int,Object,Object,CancellationToken)
nameWithType: MethodDispatcherBase
syntax: public class MethodDispatcherBase implements MethodDispatcher
type: class
uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase
name: MethodDispatcherBase
package: microsoft.servicefabric.services.remoting.builder
summary: <p>The base class used by remoting code generator to generate the type that dispatches requests from the client to the right interface and method of the remoted object. </p>
metadata: {}
