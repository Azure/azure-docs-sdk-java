### YamlMime:JavaMember
nameWithType: CloudFile.openWriteNew
type: method
members:
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long length)
  name: openWriteNew(final long length)
  nameWithType: CloudFile.openWriteNew(final long length)
  parameters:
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream to create.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file. The file does not yet exist and will be created with the length specified. If the file already exists on the service, it will be overwritten. </p>

    <p>To avoid overwriting and instead throw an error, please use the <xref uid="com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long,AccessCondition,FileRequestOptions,OperationContext)" data-throw-if-not-resolved="false" data-raw-source="openWriteNew(long, AccessCondition, FileRequestOptions, OperationContext)"></xref> overload with the appropriate <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref>.</p>

    <p></p>
  syntax: public FileOutputStream openWriteNew(final long length)
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long)
- fullName: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFile.openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream to create. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the file. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileOutputStream" data-throw-if-not-resolved="false" data-raw-source="FileOutputStream"></xref> object used to write data to the file.</p>
    type: <xref href="com.microsoft.azure.storage.file.FileOutputStream?alt=com.microsoft.azure.storage.file.FileOutputStream&text=FileOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the file, using the specified lease ID, request options and operation context. The file does not need to yet exist and will be created with the length specified. If the file already exists on the service, it will be overwritten. </p>

    <p>To avoid overwriting and instead throw an error, please pass in an <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> generated using <xref uid="com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()" data-throw-if-not-resolved="false" data-raw-source="AccessCondition#generateIfNotExistsCondition()"></xref>.</p>

    <p></p>
  syntax: public FileOutputStream openWriteNew(final long length, AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFile.openWriteNew(final long,AccessCondition,FileRequestOptions,OperationContext)
uid: com.microsoft.azure.storage.file.CloudFile.openWriteNew*
fullName: com.microsoft.azure.storage.file.CloudFile.openWriteNew
name: openWriteNew(final long length)
package: com.microsoft.azure.storage.file
metadata: {}
