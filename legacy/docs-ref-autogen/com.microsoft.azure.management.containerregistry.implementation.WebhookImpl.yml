### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.ExternalChildResourceImpl&lt;Webhook, WebhookInner, RegistryImpl, Registry&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasParent.parent()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.apply()
  name: apply()
  nameWithType: WebhookImpl.apply()
  overridden: com.microsoft.azure.management.resources.fluentcore.model.Appliable.apply()
  returns:
    description: <p>the updated resource </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute the update request.</p>

    <p></p>
  syntax: public Webhook apply()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.apply()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.applyAsync()
  name: applyAsync()
  nameWithType: WebhookImpl.applyAsync()
  overridden: com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync()
  returns:
    description: <p>the handle to the REST call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Execute the update request asynchronously.</p>

    <p></p>
  syntax: public Observable<Webhook> applyAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.applyAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.applyAsync(ServiceCallback<Webhook> callback)
  name: applyAsync(ServiceCallback<Webhook> callback)
  nameWithType: WebhookImpl.applyAsync(ServiceCallback<Webhook> callback)
  parameters:
  - name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook" data-throw-if-not-resolved="False"/>&gt;
  returns:
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook" data-throw-if-not-resolved="False"/>&gt;
  syntax: public ServiceFuture<Webhook> applyAsync(ServiceCallback<Webhook> callback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.applyAsync(ServiceCallback<Webhook>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.attach()
  name: attach()
  nameWithType: WebhookImpl.attach()
  returns:
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  syntax: public RegistryImpl attach()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.attach()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.createResourceAsync()
  name: createResourceAsync()
  nameWithType: WebhookImpl.createResourceAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<Webhook> createResourceAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.createResourceAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.customHeaders()
  name: customHeaders()
  nameWithType: WebhookImpl.customHeaders()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.customHeaders()
  returns:
    description: <p>the Custom headers that will be added to the webhook notifications </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  syntax: public Map<String, String> customHeaders()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.customHeaders()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.deleteResourceAsync()
  name: deleteResourceAsync()
  nameWithType: WebhookImpl.deleteResourceAsync()
  returns:
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public Observable<Void> deleteResourceAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.deleteResourceAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.disable()
  name: disable()
  nameWithType: WebhookImpl.disable()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.disable()
  summary: <p>Changes the status of the webhook to "disabled". </p>
  syntax: public void disable()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.disable()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.disableAsync()
  name: disableAsync()
  nameWithType: WebhookImpl.disableAsync()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.disableAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the status of the webhook to "disabled".</p>

    <p></p>
  syntax: public Completable disableAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.disableAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.enable()
  name: enable()
  nameWithType: WebhookImpl.enable()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.enable()
  summary: <p>Changes the status of the webhook to "enabled". </p>
  syntax: public void enable()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.enable()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.enableAsync()
  name: enableAsync()
  nameWithType: WebhookImpl.enableAsync()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.enableAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the status of the webhook to "enabled".</p>

    <p></p>
  syntax: public Completable enableAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.enableAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.enabled(boolean defaultStatus)
  name: enabled(boolean defaultStatus)
  nameWithType: WebhookImpl.enabled(boolean defaultStatus)
  overridden: com.microsoft.azure.management.containerregistry.Webhook.UpdateStages.WithDefaultStatus.enabled(boolean)
  parameters:
  - description: <p>indicates whether the webhook is enabled or disabled after being created </p>
    name: defaultStatus
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the default status of the webhook; default is "enabled".</p>

    <p></p>
  syntax: public WebhookImpl enabled(boolean defaultStatus)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.enabled(boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.getInnerAsync()
  name: getInnerAsync()
  nameWithType: WebhookImpl.getInnerAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  syntax: protected Observable<WebhookInner> getInnerAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.getInnerAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.id()
  name: id()
  nameWithType: WebhookImpl.id()
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource.id()
  returns:
    description: <p>the id of the external child resource </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String id()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.id()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.isEnabled()
  name: isEnabled()
  nameWithType: WebhookImpl.isEnabled()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.isEnabled()
  returns:
    description: <p>the status of the webhook </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isEnabled()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.isEnabled()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.listEvents()
  name: listEvents()
  nameWithType: WebhookImpl.listEvents()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.listEvents()
  returns:
    description: <p>the list of event info object </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookEventInfo?alt=com.microsoft.azure.management.containerregistry.WebhookEventInfo&text=WebhookEventInfo" data-throw-if-not-resolved="False"/>&gt;
  syntax: public PagedList<WebhookEventInfo> listEvents()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.listEvents()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.listEventsAsync()
  name: listEventsAsync()
  nameWithType: WebhookImpl.listEventsAsync()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.listEventsAsync()
  returns:
    description: <p>a representation of the future computation of this call, returning the list of event info object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookEventInfo?alt=com.microsoft.azure.management.containerregistry.WebhookEventInfo&text=WebhookEventInfo" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<WebhookEventInfo> listEventsAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.listEventsAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.parentId()
  name: parentId()
  nameWithType: WebhookImpl.parentId()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.parentId()
  returns:
    description: <p>the webhook parent ID </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String parentId()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.parentId()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.ping()
  name: ping()
  nameWithType: WebhookImpl.ping()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.ping()
  returns:
    description: <p>the id on an event info resource </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String ping()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.ping()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.pingAsync()
  name: pingAsync()
  nameWithType: WebhookImpl.pingAsync()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.pingAsync()
  returns:
    description: <p>a representation of the future computation of this call, returning the id on an event info resource </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Observable<String> pingAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.pingAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.provisioningState()
  name: provisioningState()
  nameWithType: WebhookImpl.provisioningState()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.provisioningState()
  returns:
    description: <p>the provisioning state of the webhook </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.ProvisioningState?alt=com.microsoft.azure.management.containerregistry.ProvisioningState&text=ProvisioningState" data-throw-if-not-resolved="False"/>
  syntax: public ProvisioningState provisioningState()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.provisioningState()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.region()
  name: region()
  nameWithType: WebhookImpl.region()
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
  returns:
    description: <p>the region the resource is in </p>
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region" data-throw-if-not-resolved="False"/>
  syntax: public Region region()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.region()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.regionName()
  name: regionName()
  nameWithType: WebhookImpl.regionName()
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
  returns:
    description: <p>the name of the region the resource is in </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String regionName()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.regionName()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.scope()
  name: scope()
  nameWithType: WebhookImpl.scope()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.scope()
  returns:
    description: <p>the scope of repositories where the event can be triggered </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

    For example:<ul><li><p>'foo:*' means events for all tags under repository 'foo'</p></li><li><p>'foo:bar' means events for 'foo:bar' only</p></li><li><p>'foo' is equivalent to 'foo:latest'</p></li><li><p>empty means all events </p></li></ul></p>
  syntax: public String scope()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.scope()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.serviceUri()
  name: serviceUri()
  nameWithType: WebhookImpl.serviceUri()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.serviceUri()
  returns:
    description: <p>the service URI for the webhook to post notifications </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String serviceUri()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.serviceUri()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.tags()
  name: tags()
  nameWithType: WebhookImpl.tags()
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
  returns:
    description: <p>the tags for the resource </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  syntax: public Map<String, String> tags()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.tags()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.triggers()
  name: triggers()
  nameWithType: WebhookImpl.triggers()
  overridden: com.microsoft.azure.management.containerregistry.Webhook.triggers()
  returns:
    description: <p>the list of actions that trigger the webhook to post notifications </p>
    type: Collection&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookAction?alt=com.microsoft.azure.management.containerregistry.WebhookAction&text=WebhookAction" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Collection<WebhookAction> triggers()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.triggers()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.type()
  name: type()
  nameWithType: WebhookImpl.type()
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
  returns:
    description: <p>the type of the resource </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String type()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.type()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.update()
  name: update()
  nameWithType: WebhookImpl.update()
  overridden: com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
  returns:
    description: <p>the stage of new resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins an update for a new resource. </p>

    <p>This is the beginning of the builder pattern used to update top level resources in Azure. The final method completing the definition and starting the actual resource creation process in Azure is <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Appliable.apply()" data-throw-if-not-resolved="false" data-raw-source="Appliable#apply()"></xref>.</p>

    <p></p>
  syntax: public WebhookImpl update()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.update()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.updateResourceAsync()
  name: updateResourceAsync()
  nameWithType: WebhookImpl.updateResourceAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.Webhook?alt=com.microsoft.azure.management.containerregistry.Webhook&text=Webhook" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<Webhook> updateResourceAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.updateResourceAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withCustomHeader(String name, String value)
  name: withCustomHeader(String name, String value)
  nameWithType: WebhookImpl.withCustomHeader(String name, String value)
  overridden: com.microsoft.azure.management.containerregistry.Webhook.UpdateStages.WithCustomHeaders.withCustomHeader(String,String)
  parameters:
  - description: <p>of the optional header </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>of the optional header </p>
    name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies a custom header that will be added to notifications. </p>

    <p>Consecutive calls to this method will add additional headers.</p>

    <p></p>
  syntax: public WebhookImpl withCustomHeader(String name, String value)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withCustomHeader(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withCustomHeaders(Map<String, String> customHeaders)
  name: withCustomHeaders(Map<String, String> customHeaders)
  nameWithType: WebhookImpl.withCustomHeaders(Map<String, String> customHeaders)
  overridden: com.microsoft.azure.management.containerregistry.Webhook.UpdateStages.WithCustomHeaders.withCustomHeaders(Map<String, String>)
  parameters:
  - description: <p>the "Name=Value" custom headers. </p>
    name: customHeaders
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies custom headers that will be added to the notifications.</p>

    <p></p>
  syntax: public WebhookImpl withCustomHeaders(Map<String, String> customHeaders)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withCustomHeaders(Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withoutTag(String key)
  name: withoutTag(String key)
  nameWithType: WebhookImpl.withoutTag(String key)
  parameters:
  - name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  syntax: public WebhookImpl withoutTag(String key)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withoutTag(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withRepositoriesScope(String repositoriesScope)
  name: withRepositoriesScope(String repositoriesScope)
  nameWithType: WebhookImpl.withRepositoriesScope(String repositoriesScope)
  overridden: com.microsoft.azure.management.containerregistry.Webhook.UpdateStages.WithRepositoriesScope.withRepositoriesScope(String)
  parameters:
  - description: <p>the scope of repositories where the event can be triggered; empty means all events </p>
    name: repositoriesScope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the scope of repositories where the event can be triggered. </p>

    <p>For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest', empty means all events.</p>

    <p></p>
  syntax: public WebhookImpl withRepositoriesScope(String repositoriesScope)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withRepositoriesScope(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withServiceUri(String serviceUri)
  name: withServiceUri(String serviceUri)
  nameWithType: WebhookImpl.withServiceUri(String serviceUri)
  overridden: com.microsoft.azure.management.containerregistry.Webhook.UpdateStages.WithServiceUri.withServiceUri(String)
  parameters:
  - description: <p>the service URI for the post notifications </p>
    name: serviceUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the service URI for post notifications.</p>

    <p></p>
  syntax: public WebhookImpl withServiceUri(String serviceUri)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withServiceUri(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withTag(String key, String value)
  name: withTag(String key, String value)
  nameWithType: WebhookImpl.withTag(String key, String value)
  parameters:
  - name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  syntax: public WebhookImpl withTag(String key, String value)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withTag(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withTags(Map<String, String> tags)
  name: withTags(Map<String, String> tags)
  nameWithType: WebhookImpl.withTags(Map<String, String> tags)
  parameters:
  - name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  syntax: public WebhookImpl withTags(Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withTags(Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withTriggerWhen(WebhookAction... webhookActions)
  name: withTriggerWhen(WebhookAction... webhookActions)
  nameWithType: WebhookImpl.withTriggerWhen(WebhookAction... webhookActions)
  overridden: com.microsoft.azure.management.containerregistry.Webhook.UpdateStages.WithTriggerWhen.withTriggerWhen(WebhookAction...)
  parameters:
  - description: <p>the webhook actions </p>
    name: webhookActions
    type: <xref href="WebhookAction...?alt=WebhookAction...&text=WebhookAction..." data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the actions that will trigger the webhook notifications.</p>

    <p></p>
  syntax: public WebhookImpl withTriggerWhen(WebhookAction... webhookActions)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl.withTriggerWhen(WebhookAction...)
nameWithType: WebhookImpl
syntax: public class WebhookImpl implements Webhook,Webhook.WebhookDefinition<Registry.DefinitionStages.WithCreate>,Webhook.UpdateDefinition<Registry.Update>,Webhook.UpdateResource<Registry.Update>,Webhook.Update
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl
fullName: com.microsoft.azure.management.containerregistry.implementation.WebhookImpl
name: WebhookImpl
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>Implementation for Webhook. </p>
metadata: {}
