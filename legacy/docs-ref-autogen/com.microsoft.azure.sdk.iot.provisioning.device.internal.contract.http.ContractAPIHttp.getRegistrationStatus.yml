### YamlMime:JavaMember
nameWithType: ContractAPIHttp.getRegistrationStatus
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.http.ContractAPIHttp.getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  name: getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  nameWithType: ContractAPIHttp.getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  parameters:
  - description: >-
      <p>A non<code>null 

          </code> value with all the request data </p>
    name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>A non<code>null 

          </code> value for the callback </p>
    name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>An object for context. Can be<code>null 

          </code></p>
    name: dpsAuthorizationCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>If any of the parameters are invalid (<code>null 

          </code> or empty) </p>
  - type: <xref href="ProvisioningDeviceTransportException?alt=ProvisioningDeviceTransportException&text=ProvisioningDeviceTransportException" data-throw-if-not-resolved="False"/>
    description: <p>If any of the API calls to transport fail </p>
  - type: <xref href="ProvisioningDeviceHubException?alt=ProvisioningDeviceHubException&text=ProvisioningDeviceHubException" data-throw-if-not-resolved="False"/>
    description: <p>If hub responds back with status other than 300 or less. </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the registration status over HTTP </p>
  syntax: public synchronized void getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.http.ContractAPIHttp.getRegistrationStatus(RequestData,ResponseCallback,Object)
uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.http.ContractAPIHttp.getRegistrationStatus*
fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.http.ContractAPIHttp.getRegistrationStatus
name: getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object dpsAuthorizationCallbackContext)
package: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.http
metadata: {}
