### YamlMime:JavaMember
nameWithType: InternalClient.getTwinAsync
type: method
members:
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  name: getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  nameWithType: InternalClient.getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  parameters:
  - description: <p>The callback to be executed once the twin is received from the service. </p>
    name: twinCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.GetTwinCallback?alt=com.microsoft.azure.sdk.iot.device.twin.GetTwinCallback&text=GetTwinCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in the callback of twinCallback. May be null. </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  summary: >-
    <p>Get the twin for this client asynchronously. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public void getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  name: getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  nameWithType: InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  parameters:
  - description: <p>The callback to be executed once the state of the getTwin request message has changed. This provides context on when the message is queued, sent, acknowledged, etc. </p>
    name: twinCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.GetTwinCorrelatingMessageCallback?alt=com.microsoft.azure.sdk.iot.device.twin.GetTwinCorrelatingMessageCallback&text=GetTwinCorrelatingMessageCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in each callback of twinCallback. May be null. </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  summary: >-
    <p>Get the twin for this client asynchronously. This client must have subscribed to desired properties before this method can be called.</p>

    <p>This overload utilizes a more verbose callback than <xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback,Object)" data-throw-if-not-resolved="false" data-raw-source="getTwinAsync(GetTwinCallback, Object)"></xref> and is only intended for users who need insight on the state of this process every step of the way. </p>

    <p></p>
  syntax: public void getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback,Object)
uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync*
fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync
name: getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
package: com.microsoft.azure.sdk.iot.device
metadata: {}
