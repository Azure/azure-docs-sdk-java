### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.checkpointDocumentCount()
  name: checkpointDocumentCount()
  nameWithType: CosmosDBTrigger.checkpointDocumentCount()
  returns:
    description: <p>CheckpointDocumentCount </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the amount of documents between lease checkpoints. Default is always after a Function call.</p>

    <p></p>
  syntax: public int checkpointDocumentCount() default -1
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.checkpointDocumentCount()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.checkpointInterval()
  name: checkpointInterval()
  nameWithType: CosmosDBTrigger.checkpointInterval()
  returns:
    description: <p>checkpointInterval </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the amount of milliseconds between lease checkpoints. Default is always after a Function call.</p>

    <p></p>
  syntax: public int checkpointInterval() default -1
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.checkpointInterval()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.collectionName()
  name: collectionName()
  nameWithType: CosmosDBTrigger.collectionName()
  returns:
    description: <p>The collection name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the collection name of the CosmosDB to which to bind.</p>

    <p></p>
  syntax: public String collectionName()
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.collectionName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.connectionStringSetting()
  name: connectionStringSetting()
  nameWithType: CosmosDBTrigger.connectionStringSetting()
  returns:
    description: <p>The app setting name of the connection string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the app setting name that contains the CosmosDB connection string.</p>

    <p></p>
  syntax: public String connectionStringSetting()
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.connectionStringSetting()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.createLeaseCollectionIfNotExists()
  name: createLeaseCollectionIfNotExists()
  nameWithType: CosmosDBTrigger.createLeaseCollectionIfNotExists()
  returns:
    description: <p>configuration whether to create a new lease collection if not exists. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines whether to create a new lease collection if not exists.</p>

    <p></p>
  syntax: public boolean createLeaseCollectionIfNotExists() default false
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.createLeaseCollectionIfNotExists()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.databaseName()
  name: databaseName()
  nameWithType: CosmosDBTrigger.databaseName()
  returns:
    description: <p>The database name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the database name of the CosmosDB to which to bind.</p>

    <p></p>
  syntax: public String databaseName()
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.databaseName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.dataType()
  name: dataType()
  nameWithType: CosmosDBTrigger.dataType()
  returns:
    description: <p>The dataType which will be used by the Functions runtime. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how Functions runtime should treat the parameter value. Possible values are: </p>

    <p>

      <ul>

        <li>

          <p>"": get the value as a string, and try to deserialize to actual parameter type like POJO </p>

        </li>

        <li>

          <p>string: always get the value as a string </p>

        </li>

        <li>

          <p>binary: get the value as a binary data, and try to deserialize to actual parameter type byte[] </p>

        </li>

      </ul>

    </p>

    <p></p>
  syntax: public String dataType() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.dataType()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.feedPollDelay()
  name: feedPollDelay()
  nameWithType: CosmosDBTrigger.feedPollDelay()
  returns:
    description: <p>feedPollDelay </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the delay in milliseconds in between polling a partition for new changes on the feed, after all current changes are drained. Default is 5000 (5 seconds).</p>

    <p></p>
  syntax: public int feedPollDelay() default 5000
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.feedPollDelay()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseAcquireInterval()
  name: leaseAcquireInterval()
  nameWithType: CosmosDBTrigger.leaseAcquireInterval()
  returns:
    description: <p>interval in milliseconds </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the interval in milliseconds to kick off a task to compute if partitions are distributed evenly among known host instances. Default is 13000 (13 seconds).</p>

    <p></p>
  syntax: public int leaseAcquireInterval() default 13000
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseAcquireInterval()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseCollectionName()
  name: leaseCollectionName()
  nameWithType: CosmosDBTrigger.leaseCollectionName()
  returns:
    description: <p>The lease collection name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the lease collection name of the CosmosDB to which to bind.</p>

    <p></p>
  syntax: public String leaseCollectionName() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseCollectionName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseCollectionPrefix()
  name: leaseCollectionPrefix()
  nameWithType: CosmosDBTrigger.leaseCollectionPrefix()
  returns:
    description: <p>LeaseCollectionPrefix </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines a prefix to be used within a Leases collection for this Trigger. Useful when sharing the same Lease collection among multiple Triggers.</p>

    <p></p>
  syntax: public String leaseCollectionPrefix() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseCollectionPrefix()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseConnectionStringSetting()
  name: leaseConnectionStringSetting()
  nameWithType: CosmosDBTrigger.leaseConnectionStringSetting()
  returns:
    description: <p>Connection string for the lease collection. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines Connection string for the service containing the lease collection.</p>

    <p></p>
  syntax: public String leaseConnectionStringSetting() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseConnectionStringSetting()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseDatabaseName()
  name: leaseDatabaseName()
  nameWithType: CosmosDBTrigger.leaseDatabaseName()
  returns:
    description: <p>Name of the database for lease collection. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines Name of the database containing the lease collection.</p>

    <p></p>
  syntax: public String leaseDatabaseName() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseDatabaseName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseExpirationInterval()
  name: leaseExpirationInterval()
  nameWithType: CosmosDBTrigger.leaseExpirationInterval()
  returns:
    description: <p>interval in milliseconds for which the lease is taken </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the interval in milliseconds for which the lease is taken on a lease representing a partition. If the lease is not renewed within this interval, it will cause it to expire and ownership of the partition will move to another Trigger instance. Default is 60000 (60 seconds).</p>

    <p></p>
  syntax: public int leaseExpirationInterval() default 60000
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseExpirationInterval()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseRenewInterval()
  name: leaseRenewInterval()
  nameWithType: CosmosDBTrigger.leaseRenewInterval()
  returns:
    description: <p>renew interval in milliseconds for all leases </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the renew interval in milliseconds for all leases for partitions currently held by the Trigger. Default is 17000 (17 seconds).</p>

    <p></p>
  syntax: public int leaseRenewInterval() default 17000
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leaseRenewInterval()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leasesCollectionThroughput()
  name: leasesCollectionThroughput()
  nameWithType: CosmosDBTrigger.leasesCollectionThroughput()
  returns:
    description: <p>throughput </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>defines the throughput of the created collection..</p>

    <p></p>
  syntax: public int leasesCollectionThroughput() default -1
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.leasesCollectionThroughput()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.maxItemsPerInvocation()
  name: maxItemsPerInvocation()
  nameWithType: CosmosDBTrigger.maxItemsPerInvocation()
  returns:
    description: <p>maximum amount of items received </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Customizes the maximum amount of items received in an invocation</p>

    <p></p>
  syntax: public int maxItemsPerInvocation() default -1
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.maxItemsPerInvocation()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.name()
  name: name()
  nameWithType: CosmosDBTrigger.name()
  returns:
    description: <p>The variable name used in function.json. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The variable name used in function.json.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.name()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.preferredLocations()
  name: preferredLocations()
  nameWithType: CosmosDBTrigger.preferredLocations()
  returns:
    description: <p>preferred locations (regions) for geo-replicated database accounts </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines preferred locations (regions) for geo-replicated database accounts in the Azure Cosmos DB service. Values should be comma-separated. example, PreferredLocations = "East US,South

    Central US,North Europe"</p>

    <p></p>
  syntax: public String preferredLocations() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.preferredLocations()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger.startFromBeginning()
  name: startFromBeginning()
  nameWithType: CosmosDBTrigger.startFromBeginning()
  returns:
    description: <p>Configuration whether change feed should start from beginning </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets or sets whether change feed in the Azure Cosmos DB service should start from beginning (true) or from current (false). By default it's start from current (false).</p>

    <p></p>
  syntax: public boolean startFromBeginning() default false
  uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger.startFromBeginning()
nameWithType: CosmosDBTrigger
syntax: public interface CosmosDBTrigger
type: interface
uid: com.microsoft.azure.functions.annotation.CosmosDBTrigger
fullName: com.microsoft.azure.functions.annotation.CosmosDBTrigger
name: CosmosDBTrigger
package: com.microsoft.azure.functions.annotation
summary: >-
  <p>CosmosDBTrigger(name = "database", databaseName = "ToDoList", collectionName = "Items", leaseCollectionName = "leases", createLeaseCollectionIfNotExists = true, connectionStringSetting = "AzureCosmosDBConnection") List&lt;Map&lt;String, String&gt;&gt; items, final ExecutionContext context ) { context.getLogger().info(items.size() + " item(s) is/are inserted."); if (!items.isEmpty()) { context.getLogger().info("The ID of the first item is: " + items.get(0).get("id")); } } </p>

  <p></p>
metadata: {}
