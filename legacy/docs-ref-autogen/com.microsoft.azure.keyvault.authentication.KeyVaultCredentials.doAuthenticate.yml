### YamlMime:JavaMember
nameWithType: KeyVaultCredentials.doAuthenticate
type: method
members:
- fullName: com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
  name: doAuthenticate(String authorization, String resource, String scope)
  nameWithType: KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
  parameters:
  - description: <p>Identifier of the authority, a URL. </p>
    name: authorization
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Identifier of the target resource that is the recipient of the requested token, a URL. </p>
    name: resource
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The scope of the authentication request.</p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The access token</p>
    type: <xref href="abstract+String?alt=abstract String&text=abstract+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Abstract method to be implemented.</p>

    <p>

    Answers a server challenge with a token header. </p>

    <p>Implementations typically use ADAL to get a token, as performed in the sample below: </p>

    <p>

      <pre>

    &amp;#064;Override

    public String doAuthenticate(String authorization, String resource, String scope) {

        String clientId = ...; // client GUID as shown in Azure portal.

        String clientKey = ...; // client key as provided by Azure portal.

        AuthenticationResult token = getAccessTokenFromClientCredentials(authorization, resource, clientId, clientKey);

        return token.getAccessToken();;

    }</pre>

    </p>

    <p>

      <pre>private static AuthenticationResult getAccessTokenFromClientCredentials(String authorization, String resource, String clientId, String clientKey) {

        AuthenticationContext context = null;

        AuthenticationResult result = null;

        ExecutorService service = null;

        try {

            service = Executors.newFixedThreadPool(1);

            context = new AuthenticationContext(authorization, false, service);

            ClientCredential credentials = new ClientCredential(clientId, clientKey);

            Future&lt;AuthenticationResult&gt; future = context.acquireToken(resource, credentials, null);

            result = future.get();

        } catch (Exception e) {

            throw new RuntimeException(e);

        } finally {

            service.shutdown();

        }</pre>

    </p>

    <p>

      <pre>    if (result == null) {

            throw new RuntimeException("authentication result was null");

        }

        return result;

    }

            </pre>

    </p>

    <p>

      <b>Note: The client key must be securely stored. It's advised to use two client applications - one for development and other for production - managed by separate parties.</b>

    </p>
  syntax: public abstract String doAuthenticate(String authorization, String resource, String scope)
  uid: com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate(String,String,String)
uid: com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate*
fullName: com.microsoft.azure.keyvault.authentication.KeyVaultCredentials.doAuthenticate(String authorization, String resource, String scope)
name: doAuthenticate(String authorization, String resource, String scope)
package: com.microsoft.azure.keyvault.authentication
metadata: {}
