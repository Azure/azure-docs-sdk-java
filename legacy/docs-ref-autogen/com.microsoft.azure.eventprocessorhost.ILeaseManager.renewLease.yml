### YamlMime:JavaMember
nameWithType: ILeaseManager.renewLease
type: method
members:
- fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease(CompleteLease lease)
  name: renewLease(CompleteLease lease)
  nameWithType: ILeaseManager.renewLease(CompleteLease lease)
  parameters:
  - description: <p>Lease to be renewed </p>
    name: lease
    type: <xref href="com.microsoft.azure.eventprocessorhost.CompleteLease?alt=com.microsoft.azure.eventprocessorhost.CompleteLease&text=CompleteLease" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if the lease was renewed, false as described above, completes exceptionally on error. </p>
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture<Boolean>&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renew a lease currently held by this host instance. </p>

    <p>If the lease has been taken by another host instance (either stolen or after expiration) or explicitly released, renewLease must return false. With the Azure Storage-based implementation, it IS possible to renew an expired lease that has not been taken by another host, so your implementation can allow that or not, whichever is convenient. If it does not, renewLease should return false.</p>

    <p></p>
  syntax: public CompletableFuture<Boolean> renewLease(CompleteLease lease)
  uid: com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease(CompleteLease)
uid: com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease*
fullName: com.microsoft.azure.eventprocessorhost.ILeaseManager.renewLease(CompleteLease lease)
name: renewLease(CompleteLease lease)
package: com.microsoft.azure.eventprocessorhost
metadata: {}
