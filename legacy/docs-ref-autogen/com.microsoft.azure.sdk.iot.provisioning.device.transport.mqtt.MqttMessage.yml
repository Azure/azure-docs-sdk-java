### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.MqttMessage(String topic)
  name: MqttMessage(String topic)
  nameWithType: MqttMessage.MqttMessage(String topic)
  parameters:
  - description: <p>The topic of the message </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor that takes the topic of the Message </p>
  syntax: public MqttMessage(String topic)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.MqttMessage(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.MqttMessage(String topic, byte[] payload)
  name: MqttMessage(String topic, byte[] payload)
  nameWithType: MqttMessage.MqttMessage(String topic, byte[] payload)
  parameters:
  - description: <p>The topic of the message </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The payload of the message </p>
    name: payload
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor that takes the topic of the Message and payload </p>
  syntax: public MqttMessage(String topic, byte[] payload)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.MqttMessage(String,byte [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.MqttMessage(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  name: MqttMessage(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  nameWithType: MqttMessage.MqttMessage(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  parameters:
  - description: <p>The topic of the message </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The mqtt message </p>
    name: mqttMessage
    type: <xref href="org.eclipse.paho.client.mqttv3.MqttMessage?alt=org.eclipse.paho.client.mqttv3.MqttMessage&text=org.eclipse.paho.client.mqttv3.MqttMessage" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor that takes the topic of the Message and a PAHO MqttMessage </p>
  syntax: public MqttMessage(String topic, org.eclipse.paho.client.mqttv3.MqttMessage mqttMessage)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.MqttMessage(String,org.eclipse.paho.client.mqttv3.MqttMessage)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getMqttMessage()
  name: getMqttMessage()
  nameWithType: MqttMessage.getMqttMessage()
  returns:
    description: <p>the mqtt message </p>
    type: <xref href="org.eclipse.paho.client.mqttv3.MqttMessage?alt=org.eclipse.paho.client.mqttv3.MqttMessage&text=org.eclipse.paho.client.mqttv3.MqttMessage" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the PAHO MqttMessage from an existing message </p>
  syntax: public org.eclipse.paho.client.mqttv3.MqttMessage getMqttMessage()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getMqttMessage()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getPayload()
  name: getPayload()
  nameWithType: MqttMessage.getPayload()
  returns:
    description: <p>the message in byte[] </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Returns the Message Payload </p>
  syntax: public byte [] getPayload()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getPayload()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getQos()
  name: getQos()
  nameWithType: MqttMessage.getQos()
  returns:
    description: <p>the quality of service </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos&text=MqttQos" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the Qos value of the Message </p>
  syntax: public MqttQos getQos()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getQos()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getTopic()
  name: getTopic()
  nameWithType: MqttMessage.getTopic()
  returns:
    description: <p>Topic represented as a string </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the topic of the message </p>
  syntax: public String getTopic()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.getTopic()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.retrieveQosValue(MqttQos qos)
  name: retrieveQosValue(MqttQos qos)
  nameWithType: MqttMessage.retrieveQosValue(MqttQos qos)
  parameters:
  - description: <p>MqttQos value </p>
    name: qos
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos&text=MqttQos" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the qos value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Converts the MqttQOS value to a integer representation </p>
  syntax: public static int retrieveQosValue(MqttQos qos)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.retrieveQosValue(MqttQos)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.setPayload(byte[] payload)
  name: setPayload(byte[] payload)
  nameWithType: MqttMessage.setPayload(byte[] payload)
  parameters:
  - description: <p>the message in byte[] </p>
    name: payload
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the Message Payload </p>
  syntax: public void setPayload(byte[] payload)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.setPayload(byte [])
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.setQos(MqttQos qos)
  name: setQos(MqttQos qos)
  nameWithType: MqttMessage.setQos(MqttQos qos)
  parameters:
  - description: <p>the quality of service </p>
    name: qos
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttQos&text=MqttQos" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the Qos value of the Message </p>
  syntax: public void setQos(MqttQos qos)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.setQos(MqttQos)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.setTopic(String topic)
  name: setTopic(String topic)
  nameWithType: MqttMessage.setTopic(String topic)
  parameters:
  - description: <p>The topic of the message </p>
    name: topic
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the topic of the message </p>
  syntax: public void setTopic(String topic)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage.setTopic(String)
nameWithType: MqttMessage
syntax: public class MqttMessage
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage
fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage
name: MqttMessage
package: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt
metadata: {}
