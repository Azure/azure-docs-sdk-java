### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task)
  name: add(String jobId, TaskAddParameter task)
  nameWithType: Tasks.add(String jobId, TaskAddParameter task)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public void add(String jobId, TaskAddParameter task)
  uid: com.microsoft.azure.batch.protocol.Tasks.add(String,TaskAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  name: add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public void add(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.add(String,TaskAddParameter,TaskAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task)
  name: addAsync(String jobId, TaskAddParameter task)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(String jobId, TaskAddParameter task)
  uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  name: addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  name: addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,TaskAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  name: addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.addAsync(String,TaskAddParameter,TaskAddOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value)
  name: addCollection(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollection(String jobId, List<TaskAddParameter> value)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskAddCollectionResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollection(String,List<TaskAddParameter>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  name: addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Additional parameters for the operation </p>
    name: taskAddCollectionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskAddCollectionResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public TaskAddCollectionResult addCollection(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollection(String,List<TaskAddParameter>,TaskAddCollectionOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskAddCollectionResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,final ServiceCallback<TaskAddCollectionResult>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Additional parameters for the operation </p>
    name: taskAddCollectionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskAddCollectionResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  name: addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  nameWithType: Tasks.addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Additional parameters for the operation </p>
    name: taskAddCollectionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public ServiceFuture<TaskAddCollectionResult> addCollectionAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions, final ServiceCallback<TaskAddCollectionResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions,final ServiceCallback<TaskAddCollectionResult>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  name: addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  nameWithType: Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskAddCollectionResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders&text=TaskAddCollectionHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<TaskAddCollectionResult, TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  name: addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  nameWithType: Tasks.addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  parameters:
  - description: <p>The ID of the job to which the task collection is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The collection of tasks to add. The maximum count of tasks is 100. The total serialized size of this collection must be less than 1MB. If it is greater than 1MB (for example if each task has 100's of resource files or environment variables), the request will fail with code 'RequestBodyTooLarge' and should be retried again with fewer tasks. </p>
    name: value
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Additional parameters for the operation </p>
    name: taskAddCollectionOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionOptions&text=TaskAddCollectionOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskAddCollectionResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionResult&text=TaskAddCollectionResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddCollectionHeaders&text=TaskAddCollectionHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a collection of tasks to the specified job. Note that each task must have a unique ID. The Batch service may not return the results for each task in the same order the tasks were submitted in this request. If the server times out or the connection is closed during the request, the request may have been partially or fully processed, or not at all. In such cases, the user should re-issue the request. Note that it is up to the user to correctly handle failures when re-issuing a request. For example, you should use the same task IDs during a retry so that if the prior operation succeeded, the retry will not create extra tasks unexpectedly. If the response contains any tasks which failed to add, a client can retry the request. In a retry, it is most efficient to resubmit only tasks that failed to add, and to omit tasks that were successfully added on the first attempt. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<TaskAddCollectionResult, TaskAddCollectionHeaders>> addCollectionWithServiceResponseAsync(String jobId, List<TaskAddParameter> value, TaskAddCollectionOptions taskAddCollectionOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.addCollectionWithServiceResponseAsync(String,List<TaskAddParameter>,TaskAddCollectionOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  name: addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  nameWithType: Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskAddHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddHeaders&text=TaskAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task)
  uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String,TaskAddParameter)
- fullName: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  name: addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  nameWithType: Tasks.addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  parameters:
  - description: <p>The ID of the job to which the task is to be added. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The task to be added. </p>
    name: task
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddParameter?alt=com.microsoft.azure.batch.protocol.models.TaskAddParameter&text=TaskAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddOptions?alt=com.microsoft.azure.batch.protocol.models.TaskAddOptions&text=TaskAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskAddHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskAddHeaders&text=TaskAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a task to the specified job. The maximum lifetime of a task from addition to completion is 180 days. If a task has not completed within 180 days of being added it will be terminated by the Batch service and left in whatever state it was in at that time.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskAddHeaders>> addWithServiceResponseAsync(String jobId, TaskAddParameter task, TaskAddOptions taskAddOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.addWithServiceResponseAsync(String,TaskAddParameter,TaskAddOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId)
  name: delete(String jobId, String taskId)
  nameWithType: Tasks.delete(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public void delete(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.delete(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  name: delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public void delete(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.delete(String,String,TaskDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId)
  name: deleteAsync(String jobId, String taskId)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  name: deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,TaskDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.deleteAsync(String,String,TaskDeleteOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)
  name: deleteWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.deleteWithServiceResponseAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders&text=TaskDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  name: deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  nameWithType: Tasks.deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  parameters:
  - description: <p>The ID of the job from which to delete the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to delete. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteOptions&text=TaskDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskDeleteHeaders&text=TaskDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a task from the specified job. When a task is deleted, all of the files in its directory on the compute node where it ran are also deleted (regardless of the retention time). For multi-instance tasks, the delete task operation applies synchronously to the primary task; subtasks and their files are then deleted asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskDeleteHeaders>> deleteWithServiceResponseAsync(String jobId, String taskId, TaskDeleteOptions taskDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.deleteWithServiceResponseAsync(String,String,TaskDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId)
  name: get(String jobId, String taskId)
  nameWithType: Tasks.get(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudTask object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public CloudTask get(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.get(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  name: get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudTask object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public CloudTask get(String jobId, String taskId, TaskGetOptions taskGetOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.get(String,String,TaskGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId)
  name: getAsync(String jobId, String taskId)
  nameWithType: Tasks.getAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTask object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<CloudTask> getAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  name: getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<CloudTask> getAsync(String jobId, String taskId, final ServiceCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,final ServiceCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  name: getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTask object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,TaskGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  name: getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<CloudTask> getAsync(String jobId, String taskId, TaskGetOptions taskGetOptions, final ServiceCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.getAsync(String,String,TaskGetOptions,final ServiceCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId)
  name: getWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.getWithServiceResponseAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTask object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.TaskGetHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskGetHeaders&text=TaskGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudTask, TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  name: getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  nameWithType: Tasks.getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  parameters:
  - description: <p>The ID of the job that contains the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to get information about. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskGetOptions?alt=com.microsoft.azure.batch.protocol.models.TaskGetOptions&text=TaskGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTask object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.TaskGetHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskGetHeaders&text=TaskGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified task. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudTask, TaskGetHeaders>> getWithServiceResponseAsync(String jobId, String taskId, TaskGetOptions taskGetOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.getWithServiceResponseAsync(String,String,TaskGetOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.list(final String jobId)
  name: list(final String jobId)
  nameWithType: Tasks.list(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public PagedList<CloudTask> list(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Tasks.list(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.list(final String jobId, final TaskListOptions taskListOptions)
  name: list(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.list(final String jobId, final TaskListOptions taskListOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public PagedList<CloudTask> list(final String jobId, final TaskListOptions taskListOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.list(final String,final TaskListOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId)
  name: listAsync(final String jobId)
  nameWithType: Tasks.listAsync(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<Page<CloudTask>> listAsync(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  name: listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudTask>> listAsync(final String jobId, final ListOperationCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final ListOperationCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions)
  name: listAsync(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<Page<CloudTask>> listAsync(final String jobId, final TaskListOptions taskListOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  name: listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudTask>> listAsync(final String jobId, final TaskListOptions taskListOptions, final ListOperationCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listAsync(final String,final TaskListOptions,final ListOperationCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Tasks.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public PagedList<CloudTask> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  name: listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudTask&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public PagedList<CloudTask> listNext(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNext(final String,final TaskListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Tasks.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<Page<CloudTask>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudTask>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  name: listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<Page<CloudTask>> listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final TaskListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  name: listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  nameWithType: Tasks.listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudTask>> listNextAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions, final ServiceFuture<List<CloudTask>> serviceFuture, final ListOperationCallback<CloudTask> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNextAsync(final String,final TaskListNextOptions,final ServiceFuture<List<CloudTask>>,final ListOperationCallback<CloudTask>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Tasks.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  nameWithType: Tasks.listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListNextOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListNextOptions&text=TaskListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final TaskListNextOptions taskListNextOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listNextWithServiceResponseAsync(final String,final TaskListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId)
  name: listSubtasks(String jobId, String taskId)
  nameWithType: Tasks.listSubtasks(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudTaskListSubtasksResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  name: listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListSubtasksOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudTaskListSubtasksResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public CloudTaskListSubtasksResult listSubtasks(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasks(String,String,TaskListSubtasksOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId)
  name: listSubtasksAsync(String jobId, String taskId)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTaskListSubtasksResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  name: listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,final ServiceCallback<CloudTaskListSubtasksResult>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  name: listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListSubtasksOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTaskListSubtasksResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public Observable<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,TaskListSubtasksOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  name: listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  nameWithType: Tasks.listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListSubtasksOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public ServiceFuture<CloudTaskListSubtasksResult> listSubtasksAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions, final ServiceCallback<CloudTaskListSubtasksResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksAsync(String,String,TaskListSubtasksOptions,final ServiceCallback<CloudTaskListSubtasksResult>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  name: listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTaskListSubtasksResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders&text=TaskListSubtasksHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult, TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  name: listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  nameWithType: Tasks.listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListSubtasksOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksOptions&text=TaskListSubtasksOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudTaskListSubtasksResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult?alt=com.microsoft.azure.batch.protocol.models.CloudTaskListSubtasksResult&text=CloudTaskListSubtasksResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListSubtasksHeaders&text=TaskListSubtasksHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the subtasks that are associated with the specified multi-instance task. If the task is not a multi-instance task then this returns an empty collection.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudTaskListSubtasksResult, TaskListSubtasksHeaders>> listSubtasksWithServiceResponseAsync(String jobId, String taskId, TaskListSubtasksOptions taskListSubtasksOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listSubtasksWithServiceResponseAsync(String,String,TaskListSubtasksOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String jobId)
  name: listWithServiceResponseAsync(final String jobId)
  nameWithType: Tasks.listWithServiceResponseAsync(final String jobId)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listWithServiceResponseAsync(final String jobId)
  uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  name: listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  nameWithType: Tasks.listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  parameters:
  - description: <p>The ID of the job. </p>
    name: jobId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.TaskListOptions?alt=com.microsoft.azure.batch.protocol.models.TaskListOptions&text=TaskListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudTask&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudTask?alt=com.microsoft.azure.batch.protocol.models.CloudTask&text=CloudTask" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.TaskListHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskListHeaders&text=TaskListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the tasks that are associated with the specified job. For multi-instance tasks, information such as affinityId, executionInfo and nodeInfo refer to the primary task. Use the list subtasks API to retrieve information about subtasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudTask>, TaskListHeaders>> listWithServiceResponseAsync(final String jobId, final TaskListOptions taskListOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.listWithServiceResponseAsync(final String,final TaskListOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId)
  name: reactivate(String jobId, String taskId)
  nameWithType: Tasks.reactivate(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public void reactivate(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivate(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  name: reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskReactivateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public void reactivate(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivate(String,String,TaskReactivateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId)
  name: reactivateAsync(String jobId, String taskId)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public Observable<Void> reactivateAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  name: reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public ServiceFuture<Void> reactivateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  name: reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskReactivateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public Observable<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,TaskReactivateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  name: reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskReactivateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public ServiceFuture<Void> reactivateAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivateAsync(String,String,TaskReactivateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)
  name: reactivateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders&text=TaskReactivateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  name: reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  nameWithType: Tasks.reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to reactivate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskReactivateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskReactivateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateOptions&text=TaskReactivateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskReactivateHeaders&text=TaskReactivateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Reactivates a task, allowing it to run again even if its retry count has been exhausted. Reactivation makes a task eligible to be retried again up to its maximum retry count. The task's state is changed to active. As the task is no longer in the completed state, any previous exit code or failure information is no longer available after reactivation. Each time a task is reactivated, its retry count is reset to 0. Reactivation will fail for tasks that are not completed or that previously completed successfully (with an exit code of 0). Additionally, it will fail if the job has completed (or is terminating or deleting).</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskReactivateHeaders>> reactivateWithServiceResponseAsync(String jobId, String taskId, TaskReactivateOptions taskReactivateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.reactivateWithServiceResponseAsync(String,String,TaskReactivateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId)
  name: terminate(String jobId, String taskId)
  nameWithType: Tasks.terminate(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public void terminate(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminate(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  name: terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public void terminate(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminate(String,String,TaskTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId)
  name: terminateAsync(String jobId, String taskId)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<Void> terminateAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  name: terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public ServiceFuture<Void> terminateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  name: terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,TaskTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  name: terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public ServiceFuture<Void> terminateAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminateAsync(String,String,TaskTerminateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)
  name: terminateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.terminateWithServiceResponseAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders&text=TaskTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  name: terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  nameWithType: Tasks.terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to terminate. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateOptions&text=TaskTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskTerminateHeaders&text=TaskTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates the specified task. When the task has been terminated, it moves to the completed state. For multi-instance tasks, the terminate task operation applies synchronously to the primary task; subtasks are then terminated asynchronously in the background.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskTerminateHeaders>> terminateWithServiceResponseAsync(String jobId, String taskId, TaskTerminateOptions taskTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.terminateWithServiceResponseAsync(String,String,TaskTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId)
  name: update(String jobId, String taskId)
  nameWithType: Tasks.update(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public void update(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.update(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  name: update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public void update(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.update(String,String,TaskConstraints,TaskUpdateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId)
  name: updateAsync(String jobId, String taskId)
  nameWithType: Tasks.updateAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String jobId, String taskId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  name: updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,TaskConstraints,TaskUpdateOptions)
- fullName: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: Tasks.updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Tasks.updateAsync(String,String,TaskConstraints,TaskUpdateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId)
  name: updateWithServiceResponseAsync(String jobId, String taskId)
  nameWithType: Tasks.updateWithServiceResponseAsync(String jobId, String taskId)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders&text=TaskUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId)
  uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  name: updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  nameWithType: Tasks.updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  parameters:
  - description: <p>The ID of the job containing the task. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the task to update. </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Constraints that apply to this task. If omitted, the task is given the default constraints. For multi-instance tasks, updating the retention time applies only to the primary task and not subtasks. </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: taskUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateOptions&text=TaskUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.TaskUpdateHeaders&text=TaskUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified task.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, TaskUpdateHeaders>> updateWithServiceResponseAsync(String jobId, String taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.Tasks.updateWithServiceResponseAsync(String,String,TaskConstraints,TaskUpdateOptions)
nameWithType: Tasks
syntax: public interface Tasks
type: interface
uid: com.microsoft.azure.batch.protocol.Tasks
fullName: com.microsoft.azure.batch.protocol.Tasks
name: Tasks
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in Tasks. </p>
metadata: {}
