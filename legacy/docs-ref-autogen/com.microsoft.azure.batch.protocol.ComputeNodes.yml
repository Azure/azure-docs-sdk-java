### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user)
  name: addUser(String poolId, String nodeId, ComputeNodeUser user)
  nameWithType: ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public void addUser(String poolId, String nodeId, ComputeNodeUser user)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUser(String,String,ComputeNodeUser)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  name: addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  nameWithType: ComputeNodes.addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeAddUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public void addUser(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUser(String,String,ComputeNodeUser,ComputeNodeAddUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user)
  name: addUserAsync(String poolId, String nodeId, ComputeNodeUser user)
  nameWithType: ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String,String,ComputeNodeUser)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  name: addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  nameWithType: ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeAddUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String,String,ComputeNodeUser,ComputeNodeAddUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, final ServiceCallback<Void> serviceCallback)
  name: addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeAddUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String,String,ComputeNodeUser,ComputeNodeAddUserOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, final ServiceCallback<Void> serviceCallback)
  name: addUserAsync(String poolId, String nodeId, ComputeNodeUser user, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.addUserAsync(String poolId, String nodeId, ComputeNodeUser user, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addUserAsync(String poolId, String nodeId, ComputeNodeUser user, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUserAsync(String,String,ComputeNodeUser,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)
  name: addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)
  nameWithType: ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders&text=ComputeNodeAddUserHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeAddUserHeaders>> addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(String,String,ComputeNodeUser)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  name: addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  nameWithType: ComputeNodes.addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to create a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The user account to be created. </p>
    name: user
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUser?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUser&text=ComputeNodeUser" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeAddUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserOptions&text=ComputeNodeAddUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeAddUserHeaders&text=ComputeNodeAddUserHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a user account to the specified compute node. You can add a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeAddUserHeaders>> addUserWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeUser user, ComputeNodeAddUserOptions computeNodeAddUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.addUserWithServiceResponseAsync(String,String,ComputeNodeUser,ComputeNodeAddUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(String poolId, String nodeId, String userName)
  name: deleteUser(String poolId, String nodeId, String userName)
  nameWithType: ComputeNodes.deleteUser(String poolId, String nodeId, String userName)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public void deleteUser(String poolId, String nodeId, String userName)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(String,String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  name: deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  nameWithType: ComputeNodes.deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDeleteUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public void deleteUser(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUser(String,String,String,ComputeNodeDeleteUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName)
  name: deleteUserAsync(String poolId, String nodeId, String userName)
  nameWithType: ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> deleteUserAsync(String poolId, String nodeId, String userName)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String,String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  name: deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  nameWithType: ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDeleteUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String,String,String,ComputeNodeDeleteUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDeleteUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteUserAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String,String,String,ComputeNodeDeleteUserOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, final ServiceCallback<Void> serviceCallback)
  name: deleteUserAsync(String poolId, String nodeId, String userName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.deleteUserAsync(String poolId, String nodeId, String userName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteUserAsync(String poolId, String nodeId, String userName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)
  name: deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)
  nameWithType: ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders&text=ComputeNodeDeleteUserHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeDeleteUserHeaders>> deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  name: deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  nameWithType: ComputeNodes.deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to delete a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to delete. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDeleteUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserOptions&text=ComputeNodeDeleteUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDeleteUserHeaders&text=ComputeNodeDeleteUserHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a user account from the specified compute node. You can delete a user account to a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeDeleteUserHeaders>> deleteUserWithServiceResponseAsync(String poolId, String nodeId, String userName, ComputeNodeDeleteUserOptions computeNodeDeleteUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.deleteUserWithServiceResponseAsync(String,String,String,ComputeNodeDeleteUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(String poolId, String nodeId)
  name: disableScheduling(String poolId, String nodeId)
  nameWithType: ComputeNodes.disableScheduling(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public void disableScheduling(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  name: disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  nameWithType: ComputeNodes.disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion' </p>"
    name: nodeDisableSchedulingOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDisableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public void disableScheduling(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableScheduling(String,String,DisableComputeNodeSchedulingOption,ComputeNodeDisableSchedulingOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId)
  name: disableSchedulingAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.disableSchedulingAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public Observable<Void> disableSchedulingAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  name: disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  nameWithType: ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion' </p>"
    name: nodeDisableSchedulingOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDisableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public Observable<Void> disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String,String,DisableComputeNodeSchedulingOption,ComputeNodeDisableSchedulingOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  name: disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion' </p>"
    name: nodeDisableSchedulingOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDisableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableSchedulingAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String,String,DisableComputeNodeSchedulingOption,ComputeNodeDisableSchedulingOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  name: disableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.disableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  name: disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders&text=ComputeNodeDisableSchedulingHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeDisableSchedulingHeaders>> disableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  name: disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  nameWithType: ComputeNodes.disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to disable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>What to do with currently running tasks when disabling task scheduling on the compute node. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion' </p>"
    name: nodeDisableSchedulingOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption?alt=com.microsoft.azure.batch.protocol.models.DisableComputeNodeSchedulingOption&text=DisableComputeNodeSchedulingOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeDisableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingOptions&text=ComputeNodeDisableSchedulingOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeDisableSchedulingHeaders&text=ComputeNodeDisableSchedulingHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables task scheduling on the specified compute node. You can disable task scheduling on a node only if its current scheduling state is enabled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeDisableSchedulingHeaders>> disableSchedulingWithServiceResponseAsync(String poolId, String nodeId, DisableComputeNodeSchedulingOption nodeDisableSchedulingOption, ComputeNodeDisableSchedulingOptions computeNodeDisableSchedulingOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.disableSchedulingWithServiceResponseAsync(String,String,DisableComputeNodeSchedulingOption,ComputeNodeDisableSchedulingOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(String poolId, String nodeId)
  name: enableScheduling(String poolId, String nodeId)
  nameWithType: ComputeNodes.enableScheduling(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public void enableScheduling(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  name: enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  nameWithType: ComputeNodes.enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeEnableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public void enableScheduling(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableScheduling(String,String,ComputeNodeEnableSchedulingOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId)
  name: enableSchedulingAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.enableSchedulingAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public Observable<Void> enableSchedulingAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  name: enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  nameWithType: ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeEnableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public Observable<Void> enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String,String,ComputeNodeEnableSchedulingOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  name: enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeEnableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableSchedulingAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String,String,ComputeNodeEnableSchedulingOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  name: enableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.enableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableSchedulingAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  name: enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders&text=ComputeNodeEnableSchedulingHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeEnableSchedulingHeaders>> enableSchedulingWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  name: enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  nameWithType: ComputeNodes.enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node on which you want to enable task scheduling. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeEnableSchedulingOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingOptions&text=ComputeNodeEnableSchedulingOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeEnableSchedulingHeaders&text=ComputeNodeEnableSchedulingHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables task scheduling on the specified compute node. You can enable task scheduling on a node only if its current scheduling state is disabled.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeEnableSchedulingHeaders>> enableSchedulingWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeEnableSchedulingOptions computeNodeEnableSchedulingOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.enableSchedulingWithServiceResponseAsync(String,String,ComputeNodeEnableSchedulingOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.get(String poolId, String nodeId)
  name: get(String poolId, String nodeId)
  nameWithType: ComputeNodes.get(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputeNode object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public ComputeNode get(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.get(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  name: get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  nameWithType: ComputeNodes.get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputeNode object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public ComputeNode get(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.get(String,String,ComputeNodeGetOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId)
  name: getAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.getAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNode object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public Observable<ComputeNode> getAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  name: getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  nameWithType: ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNode object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public Observable<ComputeNode> getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String,String,ComputeNodeGetOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, final ServiceCallback<ComputeNode> serviceCallback)
  name: getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, final ServiceCallback<ComputeNode> serviceCallback)
  nameWithType: ComputeNodes.getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, final ServiceCallback<ComputeNode> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public ServiceFuture<ComputeNode> getAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions, final ServiceCallback<ComputeNode> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String,String,ComputeNodeGetOptions,final ServiceCallback<ComputeNode>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String poolId, String nodeId, final ServiceCallback<ComputeNode> serviceCallback)
  name: getAsync(String poolId, String nodeId, final ServiceCallback<ComputeNode> serviceCallback)
  nameWithType: ComputeNodes.getAsync(String poolId, String nodeId, final ServiceCallback<ComputeNode> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public ServiceFuture<ComputeNode> getAsync(String poolId, String nodeId, final ServiceCallback<ComputeNode> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getAsync(String,String,final ServiceCallback<ComputeNode>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)
  name: getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)
  nameWithType: ComputeNodes.getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteDesktopOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions" data-throw-if-not-resolved="False"/>
  - description: <p>The OutputStream object which data will be written to if successful. </p>
    name: outputStream
    type: <xref href="OutputStream?alt=OutputStream&text=OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: <p>Gets the Remote Desktop Protocol file for the specified compute node. </p>
  syntax: public void getRemoteDesktop(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, OutputStream outputStream)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String,String,ComputeNodeGetRemoteDesktopOptions,OutputStream)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)
  name: getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)
  nameWithType: ComputeNodes.getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The OutputStream object which data will be written to if successful. </p>
    name: outputStream
    type: <xref href="OutputStream?alt=OutputStream&text=OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  syntax: public void getRemoteDesktop(String poolId, String nodeId, OutputStream outputStream)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktop(String,String,OutputStream)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId)
  name: getRemoteDesktopAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Remote Desktop Protocol file for the specified compute node. Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.</p>

    <p></p>
  syntax: public Observable<InputStream> getRemoteDesktopAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  name: getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  nameWithType: ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteDesktopOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: <xref href="Observable%3CInputStream%3E?alt=Observable%3CInputStream%3E&text=Observable%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Remote Desktop Protocol file for the specified compute node. Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.</p>

    <p></p>
  syntax: public Observable<InputStream> getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String,String,ComputeNodeGetRemoteDesktopOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, final ServiceCallback<InputStream> serviceCallback)
  name: getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, final ServiceCallback<InputStream> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteDesktopOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CInputStream%3E?alt=final+ServiceCallback%3CInputStream%3E&text=final+ServiceCallback%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CInputStream%3E?alt=ServiceFuture%3CInputStream%3E&text=ServiceFuture%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Remote Desktop Protocol file for the specified compute node. Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.</p>

    <p></p>
  syntax: public ServiceFuture<InputStream> getRemoteDesktopAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions, final ServiceCallback<InputStream> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String,String,ComputeNodeGetRemoteDesktopOptions,final ServiceCallback<InputStream>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, final ServiceCallback<InputStream> serviceCallback)
  name: getRemoteDesktopAsync(String poolId, String nodeId, final ServiceCallback<InputStream> serviceCallback)
  nameWithType: ComputeNodes.getRemoteDesktopAsync(String poolId, String nodeId, final ServiceCallback<InputStream> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CInputStream%3E?alt=final+ServiceCallback%3CInputStream%3E&text=final+ServiceCallback%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CInputStream%3E?alt=ServiceFuture%3CInputStream%3E&text=ServiceFuture%3CInputStream%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Remote Desktop Protocol file for the specified compute node. Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.</p>

    <p></p>
  syntax: public ServiceFuture<InputStream> getRemoteDesktopAsync(String poolId, String nodeId, final ServiceCallback<InputStream> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopAsync(String,String,final ServiceCallback<InputStream>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)
  name: getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;InputStream, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders&text=ComputeNodeGetRemoteDesktopHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the Remote Desktop Protocol file for the specified compute node. Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<InputStream, ComputeNodeGetRemoteDesktopHeaders>> getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  name: getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  nameWithType: ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which you want to get the Remote Desktop Protocol file. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteDesktopOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopOptions&text=ComputeNodeGetRemoteDesktopOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the InputStream object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;InputStream, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteDesktopHeaders&text=ComputeNodeGetRemoteDesktopHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the Remote Desktop Protocol file for the specified compute node. Before you can access a node by using the RDP file, you must create a user account on the node. This API can only be invoked on pools created with a cloud service configuration. For pools created with a virtual machine configuration, see the GetRemoteLoginSettings API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<InputStream, ComputeNodeGetRemoteDesktopHeaders>> getRemoteDesktopWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteDesktopOptions computeNodeGetRemoteDesktopOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteDesktopWithServiceResponseAsync(String,String,ComputeNodeGetRemoteDesktopOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId)
  name: getRemoteLoginSettings(String poolId, String nodeId)
  nameWithType: ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputeNodeGetRemoteLoginSettingsResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public ComputeNodeGetRemoteLoginSettingsResult getRemoteLoginSettings(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  name: getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  nameWithType: ComputeNodes.getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteLoginSettingsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputeNodeGetRemoteLoginSettingsResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public ComputeNodeGetRemoteLoginSettingsResult getRemoteLoginSettings(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettings(String,String,ComputeNodeGetRemoteLoginSettingsOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId)
  name: getRemoteLoginSettingsAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNodeGetRemoteLoginSettingsResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public Observable<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  name: getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  nameWithType: ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteLoginSettingsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNodeGetRemoteLoginSettingsResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public Observable<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String,String,ComputeNodeGetRemoteLoginSettingsOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  name: getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  nameWithType: ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteLoginSettingsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public ServiceFuture<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String,String,ComputeNodeGetRemoteLoginSettingsOptions,final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  name: getRemoteLoginSettingsAsync(String poolId, String nodeId, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  nameWithType: ComputeNodes.getRemoteLoginSettingsAsync(String poolId, String nodeId, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public ServiceFuture<ComputeNodeGetRemoteLoginSettingsResult> getRemoteLoginSettingsAsync(String poolId, String nodeId, final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsAsync(String,String,final ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)
  name: getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNodeGetRemoteLoginSettingsResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders&text=ComputeNodeGetRemoteLoginSettingsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<ComputeNodeGetRemoteLoginSettingsResult, ComputeNodeGetRemoteLoginSettingsHeaders>> getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  name: getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  nameWithType: ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node for which to obtain the remote login settings. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetRemoteLoginSettingsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsOptions&text=ComputeNodeGetRemoteLoginSettingsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNodeGetRemoteLoginSettingsResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsResult&text=ComputeNodeGetRemoteLoginSettingsResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetRemoteLoginSettingsHeaders&text=ComputeNodeGetRemoteLoginSettingsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the settings required for remote login to a compute node. Before you can remotely login to a node using the remote login settings, you must create a user account on the node. This API can be invoked only on pools created with the virtual machine configuration property. For pools created with a cloud service configuration, see the GetRemoteDesktop API.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<ComputeNodeGetRemoteLoginSettingsResult, ComputeNodeGetRemoteLoginSettingsHeaders>> getRemoteLoginSettingsWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetRemoteLoginSettingsOptions computeNodeGetRemoteLoginSettingsOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getRemoteLoginSettingsWithServiceResponseAsync(String,String,ComputeNodeGetRemoteLoginSettingsOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId)
  name: getWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNode object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders&text=ComputeNodeGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<ComputeNode, ComputeNodeGetHeaders>> getWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  name: getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  nameWithType: ComputeNodes.getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to get information about. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetOptions&text=ComputeNodeGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputeNode object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeGetHeaders&text=ComputeNodeGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified compute node.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<ComputeNode, ComputeNodeGetHeaders>> getWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeGetOptions computeNodeGetOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.getWithServiceResponseAsync(String,String,ComputeNodeGetOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.list(final String poolId)
  name: list(final String poolId)
  nameWithType: ComputeNodes.list(final String poolId)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ComputeNode&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public PagedList<ComputeNode> list(final String poolId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.list(final String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.list(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  name: list(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  nameWithType: ComputeNodes.list(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ComputeNode&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public PagedList<ComputeNode> list(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.list(final String,final ComputeNodeListOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String poolId)
  name: listAsync(final String poolId)
  nameWithType: ComputeNodes.listAsync(final String poolId)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<Page<ComputeNode>> listAsync(final String poolId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  name: listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  nameWithType: ComputeNodes.listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<Page<ComputeNode>> listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String,final ComputeNodeListOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions, final ListOperationCallback<ComputeNode> serviceCallback)
  name: listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions, final ListOperationCallback<ComputeNode> serviceCallback)
  nameWithType: ComputeNodes.listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions, final ListOperationCallback<ComputeNode> serviceCallback)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<ComputeNode>> listAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions, final ListOperationCallback<ComputeNode> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String,final ComputeNodeListOptions,final ListOperationCallback<ComputeNode>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String poolId, final ListOperationCallback<ComputeNode> serviceCallback)
  name: listAsync(final String poolId, final ListOperationCallback<ComputeNode> serviceCallback)
  nameWithType: ComputeNodes.listAsync(final String poolId, final ListOperationCallback<ComputeNode> serviceCallback)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<ComputeNode>> listAsync(final String poolId, final ListOperationCallback<ComputeNode> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listAsync(final String,final ListOperationCallback<ComputeNode>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: ComputeNodes.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ComputeNode&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public PagedList<ComputeNode> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNext(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  name: listNext(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  nameWithType: ComputeNodes.listNext(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ComputeNode&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public PagedList<ComputeNode> listNext(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNext(final String,final ComputeNodeListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: ComputeNodes.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<Page<ComputeNode>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  name: listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  nameWithType: ComputeNodes.listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<Page<ComputeNode>> listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String,final ComputeNodeListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  nameWithType: ComputeNodes.listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<ComputeNode>> listNextAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String,final ComputeNodeListNextOptions,final ServiceFuture<List<ComputeNode>>,final ListOperationCallback<ComputeNode>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String nextPageLink, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  nameWithType: ComputeNodes.listNextAsync(final String nextPageLink, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<ComputeNode>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ComputeNode>> serviceFuture, final ListOperationCallback<ComputeNode> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNextAsync(final String,final ServiceFuture<List<ComputeNode>>,final ListOperationCallback<ComputeNode>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: ComputeNodes.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ComputeNode>, ComputeNodeListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  nameWithType: ComputeNodes.listNextWithServiceResponseAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListNextOptions&text=ComputeNodeListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ComputeNode>, ComputeNodeListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final ComputeNodeListNextOptions computeNodeListNextOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listNextWithServiceResponseAsync(final String,final ComputeNodeListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(final String poolId)
  name: listWithServiceResponseAsync(final String poolId)
  nameWithType: ComputeNodes.listWithServiceResponseAsync(final String poolId)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ComputeNode>, ComputeNodeListHeaders>> listWithServiceResponseAsync(final String poolId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  name: listWithServiceResponseAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  nameWithType: ComputeNodes.listWithServiceResponseAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  parameters:
  - description: <p>The ID of the pool from which you want to list nodes. </p>
    name: poolId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListOptions&text=ComputeNodeListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputeNode&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.ComputeNode?alt=com.microsoft.azure.batch.protocol.models.ComputeNode&text=ComputeNode" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeListHeaders&text=ComputeNodeListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the compute nodes in the specified pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<ComputeNode>, ComputeNodeListHeaders>> listWithServiceResponseAsync(final String poolId, final ComputeNodeListOptions computeNodeListOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.listWithServiceResponseAsync(final String,final ComputeNodeListOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reboot(String poolId, String nodeId)
  name: reboot(String poolId, String nodeId)
  nameWithType: ComputeNodes.reboot(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public void reboot(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reboot(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  name: reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  nameWithType: ComputeNodes.reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeRebootOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeRebootOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public void reboot(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reboot(String,String,ComputeNodeRebootOption,ComputeNodeRebootOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId)
  name: rebootAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.rebootAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> rebootAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  name: rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  nameWithType: ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeRebootOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeRebootOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String,String,ComputeNodeRebootOption,ComputeNodeRebootOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, final ServiceCallback<Void> serviceCallback)
  name: rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeRebootOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeRebootOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> rebootAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String,String,ComputeNodeRebootOption,ComputeNodeRebootOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  name: rebootAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.rebootAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> rebootAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.rebootAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId)
  name: rebootWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders&text=ComputeNodeRebootHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeRebootHeaders>> rebootWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  name: rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  nameWithType: ComputeNodes.rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reboot the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeRebootOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOption&text=ComputeNodeRebootOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeRebootOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootOptions&text=ComputeNodeRebootOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeRebootHeaders&text=ComputeNodeRebootHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Restarts the specified compute node. You can restart a node only if it is in an idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeRebootHeaders>> rebootWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeRebootOption nodeRebootOption, ComputeNodeRebootOptions computeNodeRebootOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.rebootWithServiceResponseAsync(String,String,ComputeNodeRebootOption,ComputeNodeRebootOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimage(String poolId, String nodeId)
  name: reimage(String poolId, String nodeId)
  nameWithType: ComputeNodes.reimage(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public void reimage(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimage(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  name: reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  nameWithType: ComputeNodes.reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeReimageOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeReimageOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public void reimage(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimage(String,String,ComputeNodeReimageOption,ComputeNodeReimageOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId)
  name: reimageAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.reimageAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public Observable<Void> reimageAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  name: reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  nameWithType: ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeReimageOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeReimageOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public Observable<Void> reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String,String,ComputeNodeReimageOption,ComputeNodeReimageOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, final ServiceCallback<Void> serviceCallback)
  name: reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeReimageOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeReimageOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public ServiceFuture<Void> reimageAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String,String,ComputeNodeReimageOption,ComputeNodeReimageOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  name: reimageAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.reimageAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public ServiceFuture<Void> reimageAsync(String poolId, String nodeId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimageAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId)
  name: reimageWithServiceResponseAsync(String poolId, String nodeId)
  nameWithType: ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders&text=ComputeNodeReimageHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeReimageHeaders>> reimageWithServiceResponseAsync(String poolId, String nodeId)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  name: reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  nameWithType: ComputeNodes.reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node that you want to restart. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>When to reimage the compute node and what to do with currently running tasks. The default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData' </p>"
    name: nodeReimageOption
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOption&text=ComputeNodeReimageOption" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeReimageOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageOptions&text=ComputeNodeReimageOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeReimageHeaders&text=ComputeNodeReimageHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Reinstalls the operating system on the specified compute node. You can reinstall the operating system on a node only if it is in an idle or running state. This API can be invoked only on pools created with the cloud service configuration property.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeReimageHeaders>> reimageWithServiceResponseAsync(String poolId, String nodeId, ComputeNodeReimageOption nodeReimageOption, ComputeNodeReimageOptions computeNodeReimageOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.reimageWithServiceResponseAsync(String,String,ComputeNodeReimageOption,ComputeNodeReimageOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  name: updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  nameWithType: ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public void updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(String,String,String,NodeUpdateUserParameter)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  name: updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  nameWithType: ComputeNodes.updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUpdateUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public void updateUser(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUser(String,String,String,NodeUpdateUserParameter,ComputeNodeUpdateUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  name: updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  nameWithType: ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String,String,String,NodeUpdateUserParameter)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  name: updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  nameWithType: ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUpdateUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String,String,String,NodeUpdateUserParameter,ComputeNodeUpdateUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, final ServiceCallback<Void> serviceCallback)
  name: updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUpdateUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String,String,String,NodeUpdateUserParameter,ComputeNodeUpdateUserOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, final ServiceCallback<Void> serviceCallback)
  name: updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputeNodes.updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateUserAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserAsync(String,String,String,NodeUpdateUserParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  name: updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  nameWithType: ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders&text=ComputeNodeUpdateUserHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeUpdateUserHeaders>> updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(String,String,String,NodeUpdateUserParameter)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  name: updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  nameWithType: ComputeNodes.updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the machine on which you want to update a user account. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the user account to update. </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: nodeUpdateUserParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter?alt=com.microsoft.azure.batch.protocol.models.NodeUpdateUserParameter&text=NodeUpdateUserParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUpdateUserOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserOptions&text=ComputeNodeUpdateUserOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUpdateUserHeaders&text=ComputeNodeUpdateUserHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the password and expiration time of a user account on the specified compute node. This operation replaces of all the updatable properties of the account. For example, if the expiryTime element is not specified, the current value is replaced with the default value, not left unmodified. You can update a user account on a node only when it is in the idle or running state.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, ComputeNodeUpdateUserHeaders>> updateUserWithServiceResponseAsync(String poolId, String nodeId, String userName, NodeUpdateUserParameter nodeUpdateUserParameter, ComputeNodeUpdateUserOptions computeNodeUpdateUserOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.updateUserWithServiceResponseAsync(String,String,String,NodeUpdateUserParameter,ComputeNodeUpdateUserOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  name: uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  nameWithType: ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UploadBatchServiceLogsResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public UploadBatchServiceLogsResult uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(String,String,UploadBatchServiceLogsConfiguration)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  name: uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  nameWithType: ComputeNodes.uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUploadBatchServiceLogsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the UploadBatchServiceLogsResult object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public UploadBatchServiceLogsResult uploadBatchServiceLogs(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogs(String,String,UploadBatchServiceLogsConfiguration,ComputeNodeUploadBatchServiceLogsOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  name: uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  nameWithType: ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UploadBatchServiceLogsResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public Observable<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String,String,UploadBatchServiceLogsConfiguration)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  name: uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  nameWithType: ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUploadBatchServiceLogsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UploadBatchServiceLogsResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public Observable<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String,String,UploadBatchServiceLogsConfiguration,ComputeNodeUploadBatchServiceLogsOptions)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  name: uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  nameWithType: ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUploadBatchServiceLogsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public ServiceFuture<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String,String,UploadBatchServiceLogsConfiguration,ComputeNodeUploadBatchServiceLogsOptions,final ServiceCallback<UploadBatchServiceLogsResult>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  name: uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  nameWithType: ComputeNodes.uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public ServiceFuture<UploadBatchServiceLogsResult> uploadBatchServiceLogsAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, final ServiceCallback<UploadBatchServiceLogsResult> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsAsync(String,String,UploadBatchServiceLogsConfiguration,final ServiceCallback<UploadBatchServiceLogsResult>)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  name: uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  nameWithType: ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UploadBatchServiceLogsResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders&text=ComputeNodeUploadBatchServiceLogsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult, ComputeNodeUploadBatchServiceLogsHeaders>> uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String,String,UploadBatchServiceLogsConfiguration)
- fullName: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  name: uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  nameWithType: ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  parameters:
  - description: <p>The ID of the pool that contains the compute node. </p>
    name: poolId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The ID of the compute node from which you want to upload the Azure Batch service log files. </p>
    name: nodeId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Azure Batch service log files upload configuration. </p>
    name: uploadBatchServiceLogsConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsConfiguration&text=UploadBatchServiceLogsConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: computeNodeUploadBatchServiceLogsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsOptions&text=ComputeNodeUploadBatchServiceLogsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the UploadBatchServiceLogsResult object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult?alt=com.microsoft.azure.batch.protocol.models.UploadBatchServiceLogsResult&text=UploadBatchServiceLogsResult" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders?alt=com.microsoft.azure.batch.protocol.models.ComputeNodeUploadBatchServiceLogsHeaders&text=ComputeNodeUploadBatchServiceLogsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Upload Azure Batch service log files from the specified compute node to Azure Blob Storage. This is for gathering Azure Batch service log files in an automated fashion from nodes if you are experiencing an error and wish to escalate to Azure support. The Azure Batch service log files should be shared with Azure support to aid in debugging issues with the Batch service.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<UploadBatchServiceLogsResult, ComputeNodeUploadBatchServiceLogsHeaders>> uploadBatchServiceLogsWithServiceResponseAsync(String poolId, String nodeId, UploadBatchServiceLogsConfiguration uploadBatchServiceLogsConfiguration, ComputeNodeUploadBatchServiceLogsOptions computeNodeUploadBatchServiceLogsOptions)
  uid: com.microsoft.azure.batch.protocol.ComputeNodes.uploadBatchServiceLogsWithServiceResponseAsync(String,String,UploadBatchServiceLogsConfiguration,ComputeNodeUploadBatchServiceLogsOptions)
nameWithType: ComputeNodes
syntax: public interface ComputeNodes
type: interface
uid: com.microsoft.azure.batch.protocol.ComputeNodes
fullName: com.microsoft.azure.batch.protocol.ComputeNodes
name: ComputeNodes
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in ComputeNodes. </p>
metadata: {}
