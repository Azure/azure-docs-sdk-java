### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.canReadData(long bytesRequested)
  name: canReadData(long bytesRequested)
  nameWithType: AudioDataStream.canReadData(long bytesRequested)
  parameters:
  - description: <p>The requested data size in bytes. </p>
    name: bytesRequested
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A bool indicating the result. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Check whether the stream has enough data to be read. </p>
  syntax: public boolean canReadData(long bytesRequested)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.canReadData(long)
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.canReadData(long pos, long bytesRequested)
  name: canReadData(long pos, long bytesRequested)
  nameWithType: AudioDataStream.canReadData(long pos, long bytesRequested)
  parameters:
  - description: <p>The position to start with. </p>
    name: pos
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The requested data size in bytes. </p>
    name: bytesRequested
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A bool indicating the result. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Check whether the stream has enough data to be read, starting from the specified position. </p>
  syntax: public boolean canReadData(long pos, long bytesRequested)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.canReadData(long,long)
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.close()
  name: close()
  nameWithType: AudioDataStream.close()
  summary: <p>Dispose of associated resources. </p>
  syntax: public void close()
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.close()
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.detachInput()
  name: detachInput()
  nameWithType: AudioDataStream.detachInput()
  summary: <p>Stops any more data from getting to the stream. </p>
  syntax: public void detachInput()
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.detachInput()
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.fromResult(KeywordRecognitionResult result)
  name: fromResult(KeywordRecognitionResult result)
  nameWithType: AudioDataStream.fromResult(KeywordRecognitionResult result)
  parameters:
  - description: <p>The keyword recognition result. </p>
    name: result
    type: <xref href="com.microsoft.cognitiveservices.speech.KeywordRecognitionResult?alt=com.microsoft.cognitiveservices.speech.KeywordRecognitionResult&text=KeywordRecognitionResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An audio stream with the input to the KeywordRecognizer starting from right before the Keyword. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.AudioDataStream?alt=com.microsoft.cognitiveservices.speech.AudioDataStream&text=AudioDataStream" data-throw-if-not-resolved="False"/>
  summary: <p>Obtains the memory backed AudioDataStream associated with a given KeywordRecognition result. </p>
  syntax: public static AudioDataStream fromResult(KeywordRecognitionResult result)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.fromResult(KeywordRecognitionResult)
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.fromResult(SpeechSynthesisResult result)
  name: fromResult(SpeechSynthesisResult result)
  nameWithType: AudioDataStream.fromResult(SpeechSynthesisResult result)
  parameters:
  - description: <p>The speech synthesis result. </p>
    name: result
    type: <xref href="com.microsoft.cognitiveservices.speech.SpeechSynthesisResult?alt=com.microsoft.cognitiveservices.speech.SpeechSynthesisResult&text=SpeechSynthesisResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The audio data stream being created. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.AudioDataStream?alt=com.microsoft.cognitiveservices.speech.AudioDataStream&text=AudioDataStream" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a memory backed AudioDataStream from given speech synthesis result. </p>
  syntax: public static AudioDataStream fromResult(SpeechSynthesisResult result)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.fromResult(SpeechSynthesisResult)
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.getPosition()
  name: getPosition()
  nameWithType: AudioDataStream.getPosition()
  returns:
    description: <p>Current position. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Get current position of the audio data stream. </p>
  syntax: public long getPosition()
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.getPosition()
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.getProperties()
  name: getProperties()
  nameWithType: AudioDataStream.getProperties()
  returns:
    description: <p>The collection of properties and their values defined for this audio data stream. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.PropertyCollection?alt=com.microsoft.cognitiveservices.speech.PropertyCollection&text=PropertyCollection" data-throw-if-not-resolved="False"/>
  summary: <p>The collection of properties and their values defined for this audio data stream. </p>
  syntax: public PropertyCollection getProperties()
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.getProperties()
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.getStatus()
  name: getStatus()
  nameWithType: AudioDataStream.getStatus()
  returns:
    description: <p>Current status. </p>
    type: <xref href="com.microsoft.cognitiveservices.speech.StreamStatus?alt=com.microsoft.cognitiveservices.speech.StreamStatus&text=StreamStatus" data-throw-if-not-resolved="False"/>
  summary: <p>Get current status of the audio data stream. </p>
  syntax: public StreamStatus getStatus()
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.getStatus()
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.readData(byte[] dataBuffer)
  name: readData(byte[] dataBuffer)
  nameWithType: AudioDataStream.readData(byte[] dataBuffer)
  parameters:
  - description: <p>The audio buffer of which this function will make a copy to. </p>
    name: dataBuffer
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The number of bytes filled, or 0 in case the stream hits its end and there is no more data available. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Reads the audio data specified by making an internal copy of the data. The maximal number of bytes to be read is determined by the size of dataBuffer. If there is no data immediately available, read() blocks until the next data becomes available. </p>
  syntax: public long readData(byte[] dataBuffer)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.readData(byte [])
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.readData(long pos, byte[] dataBuffer)
  name: readData(long pos, byte[] dataBuffer)
  nameWithType: AudioDataStream.readData(long pos, byte[] dataBuffer)
  parameters:
  - description: <p>The position to start with. </p>
    name: pos
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The audio buffer of which this function will make a copy to. </p>
    name: dataBuffer
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The number of bytes filled, or 0 in case the stream hits its end and there is no more data available. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Reads the audio data specified by making an internal copy of the data, starting from the specified position. The maximal number of bytes to be read is determined by the size of dataBuffer. If there is no data immediately available, read() blocks until the next data becomes available. </p>
  syntax: public long readData(long pos, byte[] dataBuffer)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.readData(long,byte [])
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.saveToWavFile(String fileName)
  name: saveToWavFile(String fileName)
  nameWithType: AudioDataStream.saveToWavFile(String fileName)
  parameters:
  - description: <p>The file name with full path. </p>
    name: fileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Save the audio data to a file, synchronously. </p>
  syntax: public void saveToWavFile(String fileName)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.saveToWavFile(String)
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.saveToWavFileAsync(String fileName)
  name: saveToWavFileAsync(String fileName)
  nameWithType: AudioDataStream.saveToWavFileAsync(String fileName)
  parameters:
  - description: <p>The file name with full path. </p>
    name: fileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An asynchronous operation representing the saving. </p>
    type: <xref href="Future%3CVoid%3E?alt=Future%3CVoid%3E&text=Future%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Save the audio data to a file, asynchronously. </p>
  syntax: public Future<Void> saveToWavFileAsync(String fileName)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.saveToWavFileAsync(String)
- fullName: com.microsoft.cognitiveservices.speech.AudioDataStream.setPosition(long pos)
  name: setPosition(long pos)
  nameWithType: AudioDataStream.setPosition(long pos)
  parameters:
  - description: <p>Position to be set. </p>
    name: pos
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Set current position of the audio data stream. </p>
  syntax: public void setPosition(long pos)
  uid: com.microsoft.cognitiveservices.speech.AudioDataStream.setPosition(long)
nameWithType: AudioDataStream
syntax: public class AudioDataStream
type: class
uid: com.microsoft.cognitiveservices.speech.AudioDataStream
fullName: com.microsoft.cognitiveservices.speech.AudioDataStream
name: AudioDataStream
package: com.microsoft.cognitiveservices.speech
summary: '<p>Represents audio data stream used for operating audio data as a stream. Note: close() must be called in order to release underlying resources held by the object. Added in version 1.7.0 </p>'
metadata: {}
