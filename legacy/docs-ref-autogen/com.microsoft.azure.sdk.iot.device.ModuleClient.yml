### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol)
  parameters:
  - description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol to use when communicating with the module </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if using any protocol besides MQTT, if the connection string is missing the "moduleId" field, or if the connection string uses x509 </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided connection string is null or empty, or if the provided protocol is null </p>
  summary: "<p>Constructor for a ModuleClient instance. \r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>"
  syntax: public ModuleClient(String connectionString, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  name: ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  parameters:
  - description: <p>The connection string for the edge module to connect to. Must be in format HostName=xxxx;deviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;</p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol to use when communicating with the module </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The options that allow configuration of the module client instance during initialization </p>
    name: clientOptions
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if using any protocol besides MQTT, if the connection string is missing the "moduleId" field, or if the connection string uses x509 </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided connection string is null or empty, or if the provided protocol is null </p>
  summary: "<p>Constructor for a ModuleClient instance. \r\nor</p>\r\n<p>HostName=xxxx;DeviceId=xxxx;SharedAccessKey= xxxx;moduleId=xxxx;HostNameGateway=xxxx </p>"
  syntax: public ModuleClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,IotHubClientProtocol,ClientOptions)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  name: ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  nameWithType: ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  parameters:
  - description: <p>The host name of the IoT hub that this client will connect to. </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the device containing the module that the connection will identify as. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the module that the connection will identify as. </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The provider of all SAS tokens that are used during authentication. </p>
    name: sasTokenProvider
    type: <xref href="com.microsoft.azure.sdk.iot.device.SasTokenProvider?alt=com.microsoft.azure.sdk.iot.device.SasTokenProvider&text=SasTokenProvider" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will connect over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructor that allows for the client's SAS token generation to be controlled by the user. Note that options in this client such as setting the SAS token expiry time will throw <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnsupportedOperationException"></xref> since the SDK no longer controls that when this constructor is used.</p>

    <p></p>
  syntax: public ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,String,String,SasTokenProvider,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  name: ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  parameters:
  - description: <p>The host name of the IoT hub that this client will connect to. </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the device containing the module that the connection will identify as. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the module that the connection will identify as. </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The provider of all SAS tokens that are used during authentication. </p>
    name: sasTokenProvider
    type: <xref href="com.microsoft.azure.sdk.iot.device.SasTokenProvider?alt=com.microsoft.azure.sdk.iot.device.SasTokenProvider&text=SasTokenProvider" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will connect over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The options that allow configuration of the module client instance during initialization. </p>
    name: clientOptions
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructor that allows for the client's SAS token generation to be controlled by the user. Note that options in this client such as setting the SAS token expiry time will throw <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnsupportedOperationException"></xref> since the SDK no longer controls that when this constructor is used.</p>

    <p></p>
  syntax: public ModuleClient(String hostName, String deviceId, String moduleId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.ModuleClient(String,String,String,SasTokenProvider,IotHubClientProtocol,ClientOptions)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.device.InternalClient?alt=com.microsoft.azure.sdk.iot.device.InternalClient&text=InternalClient" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.device.InternalClient.close()
- com.microsoft.azure.sdk.iot.device.InternalClient.DEFAULT_TIMEOUT_MILLISECONDS
- com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
- com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwin()
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwin(int)
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.open(boolean)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message>)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message>,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEventsAsync(List<Message>,MessagesSentCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
- com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback,Object,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback,Object,SubscriptionAcknowledgedCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback,Object,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethodsAsync(MethodCallback,Object,SubscriptionAcknowledgedCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesUpdateCorrelatingMessageCallback,Object)
methods:
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel)
  name: createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel)
  nameWithType: ModuleClient.createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel)
  parameters:
  - description: <p>the implementation of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnixDomainSocketChannel"></xref> interface that will be used if any unix domain socket communication is required. May be null if no unix domain socket communication is required. If this argument is null and unix domain socket communication is required, this method will through an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IllegalArgumentException"></xref>. To check if unix domain socket communication is required for your Edge runtime, check its "IOTEDGE_WORKLOADURI" environment variable. If it is not present, or its value is prefixed with "HTTP" or "HTTPS", then no unix domain socket communication is required, and this argument can be set to null. If its value is present and is prefixed with "unix", then unix domain socket communication will be required, and this argument must not be null. </p>
    name: unixDomainSocketChannel
    type: <xref href="com.microsoft.azure.sdk.iot.device.hsm.UnixDomainSocketChannel?alt=com.microsoft.azure.sdk.iot.device.hsm.UnixDomainSocketChannel&text=UnixDomainSocketChannel" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the module client cannot be created </p>
  returns:
    description: <p>the created module client instance </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: <p>Create a module client instance from your environment variables </p>
  syntax: public static ModuleClient createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(UnixDomainSocketChannel)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol)
  name: createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol)
  nameWithType: ModuleClient.createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol)
  parameters:
  - description: <p>the implementation of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnixDomainSocketChannel"></xref> interface that will be used if any unix domain socket communication is required. May be null if no unix domain socket communication is required. If this argument is null and unix domain socket communication is required, this method will through an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IllegalArgumentException"></xref>. To check if unix domain socket communication is required for your Edge runtime, check its "IOTEDGE_WORKLOADURI" environment variable. If it is not present, or its value is prefixed with "HTTP" or "HTTPS", then no unix domain socket communication is required, and this argument can be set to null. If its value is present and is prefixed with "unix", then unix domain socket communication will be required, and this argument must not be null. </p>
    name: unixDomainSocketChannel
    type: <xref href="com.microsoft.azure.sdk.iot.device.hsm.UnixDomainSocketChannel?alt=com.microsoft.azure.sdk.iot.device.hsm.UnixDomainSocketChannel&text=UnixDomainSocketChannel" data-throw-if-not-resolved="False"/>
  - description: <p>the protocol the module client instance will use </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the module client cannot be created </p>
  returns:
    description: <p>the created module client instance </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: <p>Create a module client instance from your environment variables </p>
  syntax: public static ModuleClient createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(UnixDomainSocketChannel,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol, ClientOptions clientOptions)
  name: createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: ModuleClient.createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol, ClientOptions clientOptions)
  parameters:
  - description: <p>the implementation of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnixDomainSocketChannel"></xref> interface that will be used if any unix domain socket communication is required. May be null if no unix domain socket communication is required. If this argument is null and unix domain socket communication is required, this method will through an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IllegalArgumentException"></xref>. To check if unix domain socket communication is required for your Edge runtime, check its "IOTEDGE_WORKLOADURI" environment variable. If it is not present, or its value is prefixed with "HTTP" or "HTTPS", then no unix domain socket communication is required, and this argument can be set to null. If its value is present and is prefixed with "unix", then unix domain socket communication will be required, and this argument must not be null. </p>
    name: unixDomainSocketChannel
    type: <xref href="com.microsoft.azure.sdk.iot.device.hsm.UnixDomainSocketChannel?alt=com.microsoft.azure.sdk.iot.device.hsm.UnixDomainSocketChannel&text=UnixDomainSocketChannel" data-throw-if-not-resolved="False"/>
  - description: <p>the protocol the module client instance will use </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The options that allow configuration of the module client instance during initialization </p>
    name: clientOptions
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the module client cannot be created </p>
  returns:
    description: <p>the created module client instance </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: <p>Create a module client instance from your environment variables </p>
  syntax: public static ModuleClient createFromEnvironment(UnixDomainSocketChannel unixDomainSocketChannel, IotHubClientProtocol protocol, ClientOptions clientOptions)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.createFromEnvironment(UnixDomainSocketChannel,IotHubClientProtocol,ClientOptions)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, DirectMethodRequest directMethodRequest)
  name: invokeMethod(String deviceId, DirectMethodRequest directMethodRequest)
  nameWithType: ModuleClient.invokeMethod(String deviceId, DirectMethodRequest directMethodRequest)
  parameters:
  - description: <p>the device to invoke a method on </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the request containing the method to invoke on the device </p>
    name: directMethodRequest
    type: <xref href="com.microsoft.azure.sdk.iot.device.edge.DirectMethodRequest?alt=com.microsoft.azure.sdk.iot.device.edge.DirectMethodRequest&text=DirectMethodRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the method cannot be invoked </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if deviceId is null or empty </p>
  returns:
    description: <p>the result of the method call </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.edge.DirectMethodResponse?alt=com.microsoft.azure.sdk.iot.device.edge.DirectMethodResponse&text=DirectMethodResponse" data-throw-if-not-resolved="False"/>
  summary: <p>Invoke a method on a device </p>
  syntax: public DirectMethodResponse invokeMethod(String deviceId, DirectMethodRequest directMethodRequest)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String,DirectMethodRequest)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String deviceId, String moduleId, DirectMethodRequest directMethodRequest)
  name: invokeMethod(String deviceId, String moduleId, DirectMethodRequest directMethodRequest)
  nameWithType: ModuleClient.invokeMethod(String deviceId, String moduleId, DirectMethodRequest directMethodRequest)
  parameters:
  - description: <p>the device the module belongs to </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the module to invoke the method on </p>
    name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the request containing the method to invoke on the device </p>
    name: directMethodRequest
    type: <xref href="com.microsoft.azure.sdk.iot.device.edge.DirectMethodRequest?alt=com.microsoft.azure.sdk.iot.device.edge.DirectMethodRequest&text=DirectMethodRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the method cannot be invoked </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if deviceId is null or empty, or if moduleId is null or empty </p>
  returns:
    description: <p>the result of the method call </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.edge.DirectMethodResponse?alt=com.microsoft.azure.sdk.iot.device.edge.DirectMethodResponse&text=DirectMethodResponse" data-throw-if-not-resolved="False"/>
  summary: <p>Invoke a method on a module </p>
  syntax: public DirectMethodResponse invokeMethod(String deviceId, String moduleId, DirectMethodRequest directMethodRequest)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.invokeMethod(String,String,DirectMethodRequest)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message message)
  name: sendEvent(Message message)
  nameWithType: ModuleClient.sendEvent(Message message)
  parameters:
  - name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  syntax: public void sendEvent(Message message)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message message, String outputName)
  name: sendEvent(Message message, String outputName)
  nameWithType: ModuleClient.sendEvent(Message message, String outputName)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>the outputName to route the message to</p>
    name: outputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Synchronously sends a message to to a particular outputName.</p>

    <p></p>
  syntax: public void sendEvent(Message message, String outputName)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message,String)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message message, String outputName, int timeoutMilliseconds)
  name: sendEvent(Message message, String outputName, int timeoutMilliseconds)
  nameWithType: ModuleClient.sendEvent(Message message, String outputName, int timeoutMilliseconds)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>the outputName to route the message to </p>
    name: outputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of milliseconds to wait for the service to acknowledge this message. If 0, then it will wait indefinitely.</p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Synchronously sends a message to to a particular outputName.</p>

    <p></p>
  syntax: public void sendEvent(Message message, String outputName, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEvent(Message,String,int)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  name: sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  nameWithType: ModuleClient.sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  parameters:
  - name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageSentCallback?alt=com.microsoft.azure.sdk.iot.device.MessageSentCallback&text=MessageSentCallback" data-throw-if-not-resolved="False"/>
  - name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: public void sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message,MessageSentCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext, String outputName)
  name: sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext, String outputName)
  nameWithType: ModuleClient.sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext, String outputName)
  parameters:
  - description: <p>the message to send </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to be fired when the message is acknowledged by the service </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageSentCallback?alt=com.microsoft.azure.sdk.iot.device.MessageSentCallback&text=MessageSentCallback" data-throw-if-not-resolved="False"/>
  - description: <p>the context to be included in the callback when fired </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>the outputName to route the message to </p>
    name: outputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  summary: >-
    <p>Sends a message to a particular outputName asynchronously</p>

    <p></p>
  syntax: public void sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext, String outputName)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.sendEventAsync(Message,MessageSentCallback,Object,String)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  name: setMessageCallback(MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(MessageCallback callback, Object context)
  parameters:
  - description: >-
      <p>the message callback. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the context to be passed to the callback. Can be<code>null 

          </code> .</p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the callback is<code>null 

          </code> but a context is passed in. </p>
  returns:
    description: <p>itself, for fluent setting.</p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the message callback.</p>

    <p></p>
  syntax: public ModuleClient setMessageCallback(MessageCallback callback, Object context)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(MessageCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  name: setMessageCallback(String inputName, MessageCallback callback, Object context)
  nameWithType: ModuleClient.setMessageCallback(String inputName, MessageCallback callback, Object context)
  parameters:
  - description: <p>the input name channel to listen for. </p>
    name: inputName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the message callback. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the context to be passed to the callback. Can be<code>null 

          </code> .</p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>this object, for fluent setting </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ModuleClient?alt=com.microsoft.azure.sdk.iot.device.ModuleClient&text=ModuleClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the message callback to be fired when a telemetry message arrives on the specified input channel. All other messages will trigger the default message callback in setMessageCallback(MessageCallback callback, Object context). Any message that triggers this callback will not also trigger the default callback.</p>

    <p></p>
  syntax: public ModuleClient setMessageCallback(String inputName, MessageCallback callback, Object context)
  uid: com.microsoft.azure.sdk.iot.device.ModuleClient.setMessageCallback(String,MessageCallback,Object)
nameWithType: ModuleClient
syntax: public class ModuleClient extends InternalClient
type: class
uid: com.microsoft.azure.sdk.iot.device.ModuleClient
fullName: com.microsoft.azure.sdk.iot.device.ModuleClient
name: ModuleClient
package: com.microsoft.azure.sdk.iot.device
summary: <p>Public API for communicating from Edge Modules. A ModuleClient can be used to send messages from an Edge module to an EdgeHub or an IotHub. It can also send twin updates and listen for method calls from an EdgeHub or IotHub as well </p>
metadata: {}
