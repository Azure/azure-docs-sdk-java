### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess
  id: WithAccess
  parent: com.microsoft.azure.management.network
  children:
  - com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks()
  - com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork()
  href: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.yml
  langs:
  - java
  name: NetworkPeering.UpdateStages.WithAccess
  nameWithType: NetworkPeering.UpdateStages.WithAccess
  fullName: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess
  type: Interface
  source:
    remote: &o0
      path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkPeering.java
      branch: v1.3.0
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkPeering.java
    startLine: 377
  package: com.microsoft.azure.management.network
  summary: "<p>The stage of a network peering update allowing to control access from and to the remote network. </p>"
  syntax:
    content: public interface WithAccess
- uid: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks()
  id: withAccessBetweenBothNetworks()
  parent: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess
  href: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.yml
  langs:
  - java
  name: withAccessBetweenBothNetworks()
  nameWithType: NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks()
  fullName: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks()
  overload: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkPeering.java
    startLine: 385
  package: com.microsoft.azure.management.network
  summary: "<p>Enables access to either peered virtual network from the other. </p>\r\n<p>This setting will have effect on the remote network only if the remote network is in the same subscription. Otherwise, it will be ignored and you need to change the corresponding access setting on the remote network's matching peering explicitly. </p>"
  syntax:
    content: public Update withAccessBetweenBothNetworks()
    return:
      type: com.microsoft.azure.management.network.NetworkPeering.Update
      description: <p>the next stage of the update </p>
- uid: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork()
  id: withoutAccessFromEitherNetwork()
  parent: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess
  href: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.yml
  langs:
  - java
  name: withoutAccessFromEitherNetwork()
  nameWithType: NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork()
  fullName: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork()
  overload: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork*
  type: Method
  source:
    remote: *o0
    path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/NetworkPeering.java
    startLine: 394
  package: com.microsoft.azure.management.network
  summary: "<p>Disallows access to either peered network from the other. </p>\r\n<p>This setting will have effect on the remote network only if the remote network is in the same subscription. Otherwise, it will be ignored and you need to change the corresponding access setting on the remote network's matching peering explicitly. </p>"
  syntax:
    content: public Update withoutAccessFromEitherNetwork()
    return:
      type: com.microsoft.azure.management.network.NetworkPeering.Update
      description: <p>the next stage of the update </p>
references:
- uid: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks*
  name: withAccessBetweenBothNetworks
  nameWithType: NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks
  fullName: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withAccessBetweenBothNetworks
  package: com.microsoft.azure.management.network
- uid: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork*
  name: withoutAccessFromEitherNetwork
  nameWithType: NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork
  fullName: com.microsoft.azure.management.network.NetworkPeering.UpdateStages.WithAccess.withoutAccessFromEitherNetwork
  package: com.microsoft.azure.management.network
- uid: com.microsoft.azure.management.network.NetworkPeering.Update
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.NetworkPeering.Update.yml
  name: NetworkPeering.Update
  nameWithType: NetworkPeering.Update
  fullName: com.microsoft.azure.management.network.NetworkPeering.Update
  type: Interface
  summary: "<p>The template for a load balancer update operation, containing all the settings that can be modified. </p>"
  syntax:
    content: public interface Update extends Appliable<NetworkPeering>,NetworkPeering.UpdateStages.WithTrafficForwarding,NetworkPeering.UpdateStages.WithAccess,NetworkPeering.UpdateStages.WithGatewayUse
