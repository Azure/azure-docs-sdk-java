### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.Definition
  id: Definition
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.Definition.yml
  langs:
  - java
  name: LoadBalancerInboundNatPool.Definition<ParentT>
  nameWithType: LoadBalancerInboundNatPool.Definition<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.Definition<ParentT>
  type: Interface
  source:
    remote:
      path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/LoadBalancerInboundNatPool.java
      branch: v1.3.0
      repo: https://github.com/Azure/azure-sdk-for-java
    path: azure-mgmt-network/src/main/java/com/microsoft/azure/management/network/LoadBalancerInboundNatPool.java
    startLine: 105
  package: com.microsoft.azure.management.network
  summary: "<p>The entirety of an inbound NAT pool definition. </p>"
  syntax:
    content: public interface Definition<ParentT> extends LoadBalancerInboundNatPool.DefinitionStages.Blank<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithAttach<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithProtocol<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>,LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
  inheritedMembers:
  - com.microsoft.azure.management.resources.fluentcore.model.Attachable.InDefinition.attach()
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(PublicIPAddress)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Network,String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(String,String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Subnet)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromFrontend(String)
  - com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange.fromFrontendPortRange(int,int)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(String)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(Creatable<PublicIPAddress>)
  - com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress()
  - com.microsoft.azure.management.network.model.HasBackendPort.DefinitionStages.WithBackendPort.toBackendPort(int)
  - com.microsoft.azure.management.network.model.HasProtocol.DefinitionStages.WithProtocol.withProtocol(ProtocolT)
references:
- uid: 18a275b1
  spec.java:
  - name: ParentT
    fullName: ParentT
- uid: com.microsoft.azure.management.resources.fluentcore.model.Attachable.InDefinition.attach()
  parent: com.microsoft.azure.management.resources.fluentcore.model.Attachable.InDefinition
  href: com.microsoft.azure.management.resources.fluentcore.model.Attachable.InDefinition.yml
  name: attach()
  nameWithType: Attachable.InDefinition<ParentT>.attach()
  fullName: ParentT com.microsoft.azure.management.resources.fluentcore.model.Attachable<ParentT>.InDefinition<ParentT>.attach()
  type: Method
  summary: "<p>Attaches the child definition to the parent resource definiton. </p>"
  syntax:
    content: public ParentT attach()
    return:
      type: 18a275b1
      description: <p>the next stage of the parent definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(PublicIPAddress)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
  type: Method
  summary: "<p>Specifies an existing public IP address to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingPublicIPAddress(PublicIPAddress publicIPAddress)
    parameters:
    - id: publicIPAddress
      type: com.microsoft.azure.management.network.PublicIPAddress
      description: <p>an existing public IP address </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingPublicIPAddress(String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingPublicIPAddress(String resourceId)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingPublicIPAddress(String resourceId)
  type: Method
  summary: "<p>Specifies an existing public IP address to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this public IP address, that is the frontend that will be used. Else, an automatically named new public frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingPublicIPAddress(String resourceId)
    parameters:
    - id: resourceId
      type: "26831127"
      description: <p>the resource ID of an existing public IP address </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Network,String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingSubnet(Network network, String subnetName)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Network network, String subnetName)
  type: Method
  summary: "<p>Specifies an existing private subnet to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingSubnet(Network network, String subnetName)
    parameters:
    - id: network
      type: com.microsoft.azure.management.network.Network
      description: <p>an existing network </p>
    - id: subnetName
      type: "26831127"
      description: <p>the name of an existing subnet within the specified network </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(String,String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingSubnet(String networkResourceId, String subnetName)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(String networkResourceId, String subnetName)
  type: Method
  summary: "<p>Specifies an existing private subnet to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingSubnet(String networkResourceId, String subnetName)
    parameters:
    - id: networkResourceId
      type: "26831127"
      description: <p>the resource ID of an existing network </p>
    - id: subnetName
      type: "26831127"
      description: <p>the name of an existing subnet within the specified network </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromExistingSubnet(Subnet)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromExistingSubnet(Subnet subnet)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromExistingSubnet(Subnet subnet)
  type: Method
  summary: "<p>Specifies an existing private subnet to receive network traffic from. </p>\r\n<p>If this load balancer already has a frontend referencing this subnet, that is the frontend that will be used. Else, an automatically named new private frontend will be created implicitly on the load balancer. </p>"
  syntax:
    content: public ReturnT fromExistingSubnet(Subnet subnet)
    parameters:
    - id: subnet
      type: com.microsoft.azure.management.network.Subnet
      description: <p>an existing subnet </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromFrontend(String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromFrontend(String frontendName)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromFrontend(String frontendName)
  type: Method
  summary: "<p>Specifies the frontend to receive network traffic from. </p>"
  syntax:
    content: public ReturnT fromFrontend(String frontendName)
    parameters:
    - id: frontendName
      type: "26831127"
      description: <p>an existing frontend name on this load balancer </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange.fromFrontendPortRange(int,int)
  parent: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange.yml
  name: fromFrontendPortRange(int from, int to)
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>.fromFrontendPortRange(int from, int to)
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>.fromFrontendPortRange(int from, int to)
  type: Method
  summary: "<p>Specifies the frontend port range to receive network traffic from. </p>"
  syntax:
    content: public WithBackendPort<ParentT> fromFrontendPortRange(int from, int to)
    parameters:
    - id: from
      type: f75371fa
      description: <p>the starting port number, between 1 and 65534 </p>
    - id: to
      type: f75371fa
      description: <p>the ending port number, greater than the starting port number and no more than 65534 </p>
    return:
      type: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithBackendPortda8a2936
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(String)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromNewPublicIPAddress(String leafDnsLabel)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(String leafDnsLabel)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(String leafDnsLabel)
  type: Method
  summary: "<p>Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer in the same region and resource group but under the provided leaf DNS label, assuming it is available. </p>\r\n<p>A new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address, so make sure to use a unique DNS label. </p>"
  syntax:
    content: public ReturnT fromNewPublicIPAddress(String leafDnsLabel)
    parameters:
    - id: leafDnsLabel
      type: "26831127"
      description: <p>a unique leaf DNS label to create the public IP address under </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress(Creatable<PublicIPAddress>)
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
  type: Method
  summary: "<p>Specifies that network traffic should be received on a new public IP address that is to be created along with the load balancer based on the provided definition. </p>\r\n<p>A new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address. </p>"
  syntax:
    content: public ReturnT fromNewPublicIPAddress(Creatable<PublicIPAddress> pipDefinition)
    parameters:
    - id: pipDefinition
      type: com.microsoft.azure.management.resources.fluentcore.model.Creatable78504a52com.microsoft.azure.management.network.PublicIPAddressa08ddfce
      description: <p>a definition for the new public IP </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.fromNewPublicIPAddress()
  parent: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend
  href: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend.yml
  name: fromNewPublicIPAddress()
  nameWithType: HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress()
  fullName: com.microsoft.azure.management.network.model.HasFrontend.DefinitionStages.WithFrontend<ReturnT>.fromNewPublicIPAddress()
  type: Method
  summary: "<p>Specifies that network traffic should be received on a new public IP address that is to be automatically created woth default settings along with the load balancer. </p>\r\n<p>A new automatically-named public frontend will be implicitly created on this load balancer for each such new public IP address. </p>"
  syntax:
    content: public ReturnT fromNewPublicIPAddress()
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasBackendPort.DefinitionStages.WithBackendPort.toBackendPort(int)
  parent: com.microsoft.azure.management.network.model.HasBackendPort.DefinitionStages.WithBackendPort
  href: com.microsoft.azure.management.network.model.HasBackendPort.DefinitionStages.WithBackendPort.yml
  name: toBackendPort(int port)
  nameWithType: HasBackendPort.DefinitionStages.WithBackendPort<ReturnT>.toBackendPort(int port)
  fullName: com.microsoft.azure.management.network.model.HasBackendPort.DefinitionStages.WithBackendPort<ReturnT>.toBackendPort(int port)
  type: Method
  summary: "<p>Specifies a backend port to send network traffic to. </p>\r\n<p>If not specified, the same backend port number is assumed as that used by the frontend. </p>"
  syntax:
    content: public ReturnT toBackendPort(int port)
    parameters:
    - id: port
      type: f75371fa
      description: <p>a port number </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.model.HasProtocol.DefinitionStages.WithProtocol.withProtocol(ProtocolT)
  parent: com.microsoft.azure.management.network.model.HasProtocol.DefinitionStages.WithProtocol
  href: com.microsoft.azure.management.network.model.HasProtocol.DefinitionStages.WithProtocol.yml
  name: withProtocol(ProtocolT protocol)
  nameWithType: HasProtocol.DefinitionStages.WithProtocol<ReturnT,ProtocolT>.withProtocol(ProtocolT protocol)
  fullName: ReturnT com.microsoft.azure.management.network.model.HasProtocol<ProtocolT>.DefinitionStages.WithProtocol<ReturnT, ProtocolT>.withProtocol(ProtocolT protocol)
  type: Method
  summary: "<p>Specifies the transport protocol. </p>"
  syntax:
    content: public ReturnT withProtocol(ProtocolT protocol)
    parameters:
    - id: protocol
      type: b528dcf3
      description: <p>a transport protocol </p>
    return:
      type: c1a5ebc4
      description: <p>the next stage of the definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.Blank
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.Blank.yml
  name: LoadBalancerInboundNatPool.DefinitionStages.Blank<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.Blank<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.Blank<ParentT>
  type: Interface
  summary: "<p>The first stage of the inbound NAT pool definition. </p>"
  syntax:
    content: public interface Blank<ParentT> extends LoadBalancerInboundNatPool.DefinitionStages.WithProtocol<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithAttach
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithAttach.yml
  name: LoadBalancerInboundNatPool.DefinitionStages.WithAttach<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithAttach<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithAttach<ParentT>
  type: Interface
  summary: "<p>The final stage of the inbound NAT pool definition. </p>\r\n<p>At this stage, any remaining optional settings can be specified, or the inbound NAT pool definition can be attached to the parent load balancer definition. </p>"
  syntax:
    content: public interface WithAttach<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithProtocol
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithProtocol.yml
  name: LoadBalancerInboundNatPool.DefinitionStages.WithProtocol<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithProtocol<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithProtocol<ParentT>
  type: Interface
  summary: "<p>The stage of an inbound NAT pool definition allowing to specify the transport protocol for the pool to apply to. </p>"
  syntax:
    content: public interface WithProtocol<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontend
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontend.yml
  name: LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontend<ParentT>
  type: Interface
  summary: "<p>The stage of an inbound NAT pool definition allowing to specify the frontend for the inbound NAT rules in the pool to apply to. </p>"
  syntax:
    content: public interface WithFrontend<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange.yml
  name: LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithFrontendPortRange<ParentT>
  type: Interface
  summary: "<p>The stage of an inbound NAT pool definition allowing to specify the frontend port range. </p>"
  syntax:
    content: public interface WithFrontendPortRange<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
- uid: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort
  parent: com.microsoft.azure.management.network
  href: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort.yml
  name: LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort<ParentT>
  nameWithType: LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort<ParentT>
  fullName: com.microsoft.azure.management.network.LoadBalancerInboundNatPool.DefinitionStages.WithBackendPort<ParentT>
  type: Interface
  summary: "<p>The stage of an inbound NAT pool definition allowing to specify the backend port. </p>"
  syntax:
    content: public interface WithBackendPort<ParentT>
    typeParameters:
    - id: ParentT
      type: 18a275b1
      description: <p>the stage of the parent definition to return to after attaching this definition </p>
