### YamlMime:JavaMember
nameWithType: ReliableHashMap<K,V>.keysAsync
type: method
members:
- fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.keysAsync(Transaction txn)
  name: keysAsync(Transaction txn)
  nameWithType: ReliableHashMap<K,V>.keysAsync(Transaction txn)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: txn
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if txn is null. </p>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false">CompletableFuture</xref> with an enumeration of the keys in this Map. The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false">FabricException</xref> for fabric related failures. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.data.utilities.AsyncEnumeration?alt=microsoft.servicefabric.data.utilities.AsyncEnumeration&text=AsyncEnumeration" data-throw-if-not-resolved="False"/>&lt;K&gt;&gt;
  summary: >-
    <p>Returns an enumeration of the keys in this table.</p>

    <p></p>
  syntax: public CompletableFuture<AsyncEnumeration<K>> keysAsync(Transaction txn)
  uid: microsoft.servicefabric.data.collections.ReliableHashMap.keysAsync(Transaction)
uid: microsoft.servicefabric.data.collections.ReliableHashMap.keysAsync*
fullName: microsoft.servicefabric.data.collections.ReliableHashMap<K extends String, V>.keysAsync(Transaction txn)
name: keysAsync(Transaction txn)
package: microsoft.servicefabric.data.collections
metadata: {}
