### YamlMime:JavaMember
nameWithType: MethodDispatcherBase.continueWithResult
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult(int methodId, CompletableFuture<TRetval> future)
  name: continueWithResult(int methodId, CompletableFuture<TRetval> future)
  nameWithType: MethodDispatcherBase.continueWithResult(int methodId, CompletableFuture<TRetval> future)
  parameters:
  - description: <p>method id </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>continuation future </p>
    name: future
    type: <xref href="CompletableFuture%3CTRetval%3E?alt=CompletableFuture<TRetval>&text=CompletableFuture%3CTRetval%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> that represents outstanding operation. </p>
    type: <xref href="%3CTRetval%3E+CompletableFuture%3CObject%3E?alt=<TRetval> CompletableFuture<Object>&text=%3CTRetval%3E+CompletableFuture%3CObject%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Internal - used by Service remoting</p>

    <p></p>
  syntax: protected <TRetval> CompletableFuture<Object> continueWithResult(int methodId, CompletableFuture<TRetval> future)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult(int,CompletableFuture<TRetval>)
uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult*
fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.continueWithResult(int methodId, CompletableFuture<TRetval> future)
name: continueWithResult(int methodId, CompletableFuture<TRetval> future)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
