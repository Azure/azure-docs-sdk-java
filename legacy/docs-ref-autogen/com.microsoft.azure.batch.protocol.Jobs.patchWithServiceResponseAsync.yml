### YamlMime:JavaMember
nameWithType: Jobs.patchWithServiceResponseAsync
type: method
members:
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  name: patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  nameWithType: Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobPatchHeaders?alt=com.microsoft.azure.batch.protocol.models.JobPatchHeaders&text=JobPatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobPatchHeaders>> patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String,JobPatchParameter)
- fullName: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  name: patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  nameWithType: Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  parameters:
  - description: <p>The ID of the job whose properties you want to update. </p>
    name: jobId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobPatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobPatchParameter&text=JobPatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobPatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobPatchOptions&text=JobPatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobPatchHeaders?alt=com.microsoft.azure.batch.protocol.models.JobPatchHeaders&text=JobPatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job. This replaces only the job properties specified in the request. For example, if the job has constraints, and a request does not specify the constraints element, then the job keeps the existing constraints.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobPatchHeaders>> patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions)
  uid: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String,JobPatchParameter,JobPatchOptions)
uid: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync*
fullName: com.microsoft.azure.batch.protocol.Jobs.patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
name: patchWithServiceResponseAsync(String jobId, JobPatchParameter jobPatchParameter)
package: com.microsoft.azure.batch.protocol
metadata: {}
