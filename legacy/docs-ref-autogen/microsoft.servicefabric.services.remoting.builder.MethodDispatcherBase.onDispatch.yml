### YamlMime:JavaMember
nameWithType: MethodDispatcherBase.onDispatch
type: method
members:
- fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch(int methodId, Object remotedObject, Object requestBody)
  name: onDispatch(int methodId, Object remotedObject, Object requestBody)
  nameWithType: MethodDispatcherBase.onDispatch(int methodId, Object remotedObject, Object requestBody)
  parameters:
  - description: <p>Id of the method. </p>
    name: methodId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The remoted object instance. </p>
    name: remotedObject
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>message body </p>
    name: requestBody
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract void&text=abstract+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is implemented by the generated method dispatcher to dispatch one way messages to the specified methodId of the interface implemented by the remoted object.</p>

    <p></p>
  syntax: protected abstract void onDispatch(int methodId, Object remotedObject, Object requestBody)
  uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch(int,Object,Object)
uid: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch*
fullName: microsoft.servicefabric.services.remoting.builder.MethodDispatcherBase.onDispatch(int methodId, Object remotedObject, Object requestBody)
name: onDispatch(int methodId, Object remotedObject, Object requestBody)
package: microsoft.servicefabric.services.remoting.builder
metadata: {}
