### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey()
  name: WrappedContentKey()
  nameWithType: WrappedContentKey.WrappedContentKey()
  summary: <p>Initializes a new instance of the <xref uid="com.microsoft.azure.storage.core.WrappedContentKey" data-throw-if-not-resolved="false" data-raw-source="WrappedContentKey"></xref> class. </p>
  syntax: public WrappedContentKey()
  uid: com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey()
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)
  name: WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)
  nameWithType: WrappedContentKey.WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)
  parameters:
  - description: <p>The key identifier string. </p>
    name: keyId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The encrypted content encryption key. </p>
    name: encryptedKey
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The algorithm used for wrapping. </p>
    name: algorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="com.microsoft.azure.storage.core.WrappedContentKey" data-throw-if-not-resolved="false" data-raw-source="WrappedContentKey"></xref> class using the specified key id, encrypted key and the algorithm.</p>

    <p></p>
  syntax: public WrappedContentKey(String keyId, byte[] encryptedKey, String algorithm)
  uid: com.microsoft.azure.storage.core.WrappedContentKey.WrappedContentKey(String,byte [],String)
fields:
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.core.WrappedContentKey.algorithm
  name: algorithm
  nameWithType: WrappedContentKey.algorithm
  summary: <p>The algorithm used for wrapping. </p>
  syntax: public String algorithm
  uid: com.microsoft.azure.storage.core.WrappedContentKey.algorithm
- field:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.core.WrappedContentKey.encryptedKey
  name: encryptedKey
  nameWithType: WrappedContentKey.encryptedKey
  summary: <p>The encrypted content encryption key. </p>
  syntax: public byte [] encryptedKey
  uid: com.microsoft.azure.storage.core.WrappedContentKey.encryptedKey
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.core.WrappedContentKey.keyId
  name: keyId
  nameWithType: WrappedContentKey.keyId
  summary: <p>The key identifier string. </p>
  syntax: public String keyId
  uid: com.microsoft.azure.storage.core.WrappedContentKey.keyId
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.deserialize(JsonParser parser)
  name: deserialize(JsonParser parser)
  nameWithType: WrappedContentKey.deserialize(JsonParser parser)
  parameters:
  - name: parser
    type: <xref href="JsonParser?alt=JsonParser&text=JsonParser" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.storage.core.WrappedContentKey?alt=com.microsoft.azure.storage.core.WrappedContentKey&text=WrappedContentKey" data-throw-if-not-resolved="False"/>
  syntax: public static WrappedContentKey deserialize(JsonParser parser)
  uid: com.microsoft.azure.storage.core.WrappedContentKey.deserialize(JsonParser)
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm()
  name: getAlgorithm()
  nameWithType: WrappedContentKey.getAlgorithm()
  returns:
    description: <p>The algorithm used for wrapping. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the algorithm used for wrapping.</p>

    <p></p>
  syntax: public String getAlgorithm()
  uid: com.microsoft.azure.storage.core.WrappedContentKey.getAlgorithm()
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey()
  name: getEncryptedKey()
  nameWithType: WrappedContentKey.getEncryptedKey()
  returns:
    description: <p>The encrypted content encryption key. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the encrypted content encryption key.</p>

    <p></p>
  syntax: public byte [] getEncryptedKey()
  uid: com.microsoft.azure.storage.core.WrappedContentKey.getEncryptedKey()
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.getKeyId()
  name: getKeyId()
  nameWithType: WrappedContentKey.getKeyId()
  returns:
    description: <p>The key identifier string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the key identifier. This identifier is used to identify the key that is used to wrap/unwrap the content encryption key.</p>

    <p></p>
  syntax: public String getKeyId()
  uid: com.microsoft.azure.storage.core.WrappedContentKey.getKeyId()
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.serialize(JsonGenerator generator)
  name: serialize(JsonGenerator generator)
  nameWithType: WrappedContentKey.serialize(JsonGenerator generator)
  parameters:
  - name: generator
    type: <xref href="JsonGenerator?alt=JsonGenerator&text=JsonGenerator" data-throw-if-not-resolved="False"/>
  syntax: public void serialize(JsonGenerator generator)
  uid: com.microsoft.azure.storage.core.WrappedContentKey.serialize(JsonGenerator)
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm(String algorithm)
  name: setAlgorithm(String algorithm)
  nameWithType: WrappedContentKey.setAlgorithm(String algorithm)
  parameters:
  - description: <p>The algorithm used for wrapping. </p>
    name: algorithm
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the algorithm used for wrapping.</p>

    <p></p>
  syntax: public void setAlgorithm(String algorithm)
  uid: com.microsoft.azure.storage.core.WrappedContentKey.setAlgorithm(String)
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey(byte[] encryptedKey)
  name: setEncryptedKey(byte[] encryptedKey)
  nameWithType: WrappedContentKey.setEncryptedKey(byte[] encryptedKey)
  parameters:
  - description: <p>The encrypted content encryption key. </p>
    name: encryptedKey
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the encrypted content encryption key.</p>

    <p></p>
  syntax: public void setEncryptedKey(byte[] encryptedKey)
  uid: com.microsoft.azure.storage.core.WrappedContentKey.setEncryptedKey(byte [])
- fullName: com.microsoft.azure.storage.core.WrappedContentKey.setKeyId(String keyId)
  name: setKeyId(String keyId)
  nameWithType: WrappedContentKey.setKeyId(String keyId)
  parameters:
  - description: <p>The key identifier string. </p>
    name: keyId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the key identifier. This identifier is used to identify the key that is used to wrap/unwrap the content encryption key.</p>

    <p></p>
  syntax: public void setKeyId(String keyId)
  uid: com.microsoft.azure.storage.core.WrappedContentKey.setKeyId(String)
nameWithType: WrappedContentKey
syntax: public class WrappedContentKey
type: class
uid: com.microsoft.azure.storage.core.WrappedContentKey
fullName: com.microsoft.azure.storage.core.WrappedContentKey
name: WrappedContentKey
package: com.microsoft.azure.storage.core
summary: <p>RESERVED FOR INTERNAL USE. Represents the envelope key details stored on the service. </p>
metadata: {}
