### YamlMime:JavaType
methods:
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy.getServiceInterfaceType()
  name: getServiceInterfaceType()
  nameWithType: ServiceProxy.getServiceInterfaceType()
  returns:
    description: <p>Service interface type </p>
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The interface type that is being remoted.</p>

    <p></p>
  syntax: public Class<?> getServiceInterfaceType()
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxy.getServiceInterfaceType()
- fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy.getServicePartitionClient()
  name: getServicePartitionClient()
  nameWithType: ServiceProxy.getServicePartitionClient()
  returns:
    description: <p>ServicePartitionClient used by the ServiceProxy </p>
    type: <xref href="microsoft.servicefabric.services.remoting.client.ServiceRemotingPartitionClient?alt=microsoft.servicefabric.services.remoting.client.ServiceRemotingPartitionClient&text=ServiceRemotingPartitionClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The service partition client used to send requests to the service.</p>

    <p></p>
  syntax: public ServiceRemotingPartitionClient getServicePartitionClient()
  uid: microsoft.servicefabric.services.remoting.client.ServiceProxy.getServicePartitionClient()
nameWithType: ServiceProxy
syntax: public interface ServiceProxy
type: interface
uid: microsoft.servicefabric.services.remoting.client.ServiceProxy
fullName: microsoft.servicefabric.services.remoting.client.ServiceProxy
name: ServiceProxy
package: microsoft.servicefabric.services.remoting.client
summary: <p>This is the base Client side interface for Remoting. The framework provides the Remoting infrastructure for all the service contracts inheriting from IService through ServiceRemotingListener and ServiceProxy. </p>
metadata: {}
