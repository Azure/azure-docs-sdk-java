### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.add(JobScheduleAddParameter cloudJobSchedule)
  name: add(JobScheduleAddParameter cloudJobSchedule)
  nameWithType: JobSchedules.add(JobScheduleAddParameter cloudJobSchedule)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public void add(JobScheduleAddParameter cloudJobSchedule)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.add(JobScheduleAddParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.add(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  name: add(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  nameWithType: JobSchedules.add(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions&text=JobScheduleAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public void add(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.add(JobScheduleAddParameter,JobScheduleAddOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule)
  name: addAsync(JobScheduleAddParameter cloudJobSchedule)
  nameWithType: JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(JobScheduleAddParameter cloudJobSchedule)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule, final ServiceCallback<Void> serviceCallback)
  name: addAsync(JobScheduleAddParameter cloudJobSchedule, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(JobScheduleAddParameter cloudJobSchedule, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  name: addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  nameWithType: JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions&text=JobScheduleAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public Observable<Void> addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter,JobScheduleAddOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions, final ServiceCallback<Void> serviceCallback)
  name: addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions&text=JobScheduleAddOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> addAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.addAsync(JobScheduleAddParameter,JobScheduleAddOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule)
  name: addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule)
  nameWithType: JobSchedules.addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddHeaders&text=JobScheduleAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleAddHeaders>> addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.addWithServiceResponseAsync(JobScheduleAddParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  name: addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  nameWithType: JobSchedules.addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  parameters:
  - description: <p>The job schedule to be added. </p>
    name: cloudJobSchedule
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddParameter&text=JobScheduleAddParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleAddOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddOptions&text=JobScheduleAddOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleAddHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleAddHeaders&text=JobScheduleAddHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a job schedule to the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleAddHeaders>> addWithServiceResponseAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.addWithServiceResponseAsync(JobScheduleAddParameter,JobScheduleAddOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.delete(String jobScheduleId)
  name: delete(String jobScheduleId)
  nameWithType: JobSchedules.delete(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public void delete(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.delete(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.delete(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  name: delete(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  nameWithType: JobSchedules.delete(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions&text=JobScheduleDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public void delete(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.delete(String,JobScheduleDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String jobScheduleId)
  name: deleteAsync(String jobScheduleId)
  nameWithType: JobSchedules.deleteAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.deleteAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  name: deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  nameWithType: JobSchedules.deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions&text=JobScheduleDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String,JobScheduleDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions&text=JobScheduleDeleteOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.deleteAsync(String,JobScheduleDeleteOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.deleteWithServiceResponseAsync(String jobScheduleId)
  name: deleteWithServiceResponseAsync(String jobScheduleId)
  nameWithType: JobSchedules.deleteWithServiceResponseAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDeleteHeaders&text=JobScheduleDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleDeleteHeaders>> deleteWithServiceResponseAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.deleteWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.deleteWithServiceResponseAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  name: deleteWithServiceResponseAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  nameWithType: JobSchedules.deleteWithServiceResponseAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  parameters:
  - description: <p>The ID of the job schedule to delete. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDeleteOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDeleteOptions&text=JobScheduleDeleteOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDeleteHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDeleteHeaders&text=JobScheduleDeleteHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Deletes a job schedule from the specified account. When you delete a job schedule, this also deletes all jobs and tasks under that schedule. When tasks are deleted, all the files in their working directories on the compute nodes are also deleted (the retention period is ignored). The job schedule statistics are no longer accessible once the job schedule is deleted, though they are still counted towards account lifetime statistics.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleDeleteHeaders>> deleteWithServiceResponseAsync(String jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.deleteWithServiceResponseAsync(String,JobScheduleDeleteOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disable(String jobScheduleId)
  name: disable(String jobScheduleId)
  nameWithType: JobSchedules.disable(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public void disable(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disable(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disable(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  name: disable(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  nameWithType: JobSchedules.disable(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions&text=JobScheduleDisableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public void disable(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disable(String,JobScheduleDisableOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String jobScheduleId)
  name: disableAsync(String jobScheduleId)
  nameWithType: JobSchedules.disableAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public Observable<Void> disableAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  name: disableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.disableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  name: disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  nameWithType: JobSchedules.disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions&text=JobScheduleDisableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public Observable<Void> disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String,JobScheduleDisableOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions, final ServiceCallback<Void> serviceCallback)
  name: disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions&text=JobScheduleDisableOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public ServiceFuture<Void> disableAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disableAsync(String,JobScheduleDisableOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disableWithServiceResponseAsync(String jobScheduleId)
  name: disableWithServiceResponseAsync(String jobScheduleId)
  nameWithType: JobSchedules.disableWithServiceResponseAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDisableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDisableHeaders&text=JobScheduleDisableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleDisableHeaders>> disableWithServiceResponseAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disableWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.disableWithServiceResponseAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  name: disableWithServiceResponseAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  nameWithType: JobSchedules.disableWithServiceResponseAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  parameters:
  - description: <p>The ID of the job schedule to disable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleDisableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDisableOptions&text=JobScheduleDisableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleDisableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleDisableHeaders&text=JobScheduleDisableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Disables a job schedule. No new jobs will be created until the job schedule is enabled again.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleDisableHeaders>> disableWithServiceResponseAsync(String jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.disableWithServiceResponseAsync(String,JobScheduleDisableOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enable(String jobScheduleId)
  name: enable(String jobScheduleId)
  nameWithType: JobSchedules.enable(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public void enable(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enable(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enable(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  name: enable(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  nameWithType: JobSchedules.enable(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions&text=JobScheduleEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public void enable(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enable(String,JobScheduleEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String jobScheduleId)
  name: enableAsync(String jobScheduleId)
  nameWithType: JobSchedules.enableAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public Observable<Void> enableAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  name: enableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.enableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  name: enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  nameWithType: JobSchedules.enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions&text=JobScheduleEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public Observable<Void> enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String,JobScheduleEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions, final ServiceCallback<Void> serviceCallback)
  name: enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions&text=JobScheduleEnableOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<Void> enableAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enableAsync(String,JobScheduleEnableOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enableWithServiceResponseAsync(String jobScheduleId)
  name: enableWithServiceResponseAsync(String jobScheduleId)
  nameWithType: JobSchedules.enableWithServiceResponseAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleEnableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleEnableHeaders&text=JobScheduleEnableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleEnableHeaders>> enableWithServiceResponseAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enableWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.enableWithServiceResponseAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  name: enableWithServiceResponseAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  nameWithType: JobSchedules.enableWithServiceResponseAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  parameters:
  - description: <p>The ID of the job schedule to enable. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleEnableOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleEnableOptions&text=JobScheduleEnableOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleEnableHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleEnableHeaders&text=JobScheduleEnableHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Enables a job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleEnableHeaders>> enableWithServiceResponseAsync(String jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.enableWithServiceResponseAsync(String,JobScheduleEnableOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.exists(String jobScheduleId)
  name: exists(String jobScheduleId)
  nameWithType: JobSchedules.exists(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the boolean object if successful. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public boolean exists(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.exists(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.exists(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  name: exists(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  nameWithType: JobSchedules.exists(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions&text=JobScheduleExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the boolean object if successful. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public boolean exists(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.exists(String,JobScheduleExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String jobScheduleId)
  name: existsAsync(String jobScheduleId)
  nameWithType: JobSchedules.existsAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public Observable<Boolean> existsAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String jobScheduleId, final ServiceCallback<Boolean> serviceCallback)
  name: existsAsync(String jobScheduleId, final ServiceCallback<Boolean> serviceCallback)
  nameWithType: JobSchedules.existsAsync(String jobScheduleId, final ServiceCallback<Boolean> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CBoolean%3E?alt=final+ServiceCallback%3CBoolean%3E&text=final+ServiceCallback%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CBoolean%3E?alt=ServiceFuture%3CBoolean%3E&text=ServiceFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public ServiceFuture<Boolean> existsAsync(String jobScheduleId, final ServiceCallback<Boolean> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String,final ServiceCallback<Boolean>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  name: existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  nameWithType: JobSchedules.existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions&text=JobScheduleExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public Observable<Boolean> existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String,JobScheduleExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  name: existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  nameWithType: JobSchedules.existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions&text=JobScheduleExistsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CBoolean%3E?alt=final+ServiceCallback%3CBoolean%3E&text=final+ServiceCallback%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CBoolean%3E?alt=ServiceFuture%3CBoolean%3E&text=ServiceFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public ServiceFuture<Boolean> existsAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions, final ServiceCallback<Boolean> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.existsAsync(String,JobScheduleExistsOptions,final ServiceCallback<Boolean>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.existsWithServiceResponseAsync(String jobScheduleId)
  name: existsWithServiceResponseAsync(String jobScheduleId)
  nameWithType: JobSchedules.existsWithServiceResponseAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Boolean, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleExistsHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleExistsHeaders&text=JobScheduleExistsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Boolean, JobScheduleExistsHeaders>> existsWithServiceResponseAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.existsWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.existsWithServiceResponseAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  name: existsWithServiceResponseAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  nameWithType: JobSchedules.existsWithServiceResponseAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  parameters:
  - description: <p>The ID of the job schedule which you want to check. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleExistsOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleExistsOptions&text=JobScheduleExistsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Boolean, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleExistsHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleExistsHeaders&text=JobScheduleExistsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Checks the specified job schedule exists.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Boolean, JobScheduleExistsHeaders>> existsWithServiceResponseAsync(String jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.existsWithServiceResponseAsync(String,JobScheduleExistsOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.get(String jobScheduleId)
  name: get(String jobScheduleId)
  nameWithType: JobSchedules.get(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudJobSchedule object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public CloudJobSchedule get(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.get(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.get(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  name: get(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  nameWithType: JobSchedules.get(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions&text=JobScheduleGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CloudJobSchedule object if successful. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public CloudJobSchedule get(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.get(String,JobScheduleGetOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String jobScheduleId)
  name: getAsync(String jobScheduleId)
  nameWithType: JobSchedules.getAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJobSchedule object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public Observable<CloudJobSchedule> getAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String jobScheduleId, final ServiceCallback<CloudJobSchedule> serviceCallback)
  name: getAsync(String jobScheduleId, final ServiceCallback<CloudJobSchedule> serviceCallback)
  nameWithType: JobSchedules.getAsync(String jobScheduleId, final ServiceCallback<CloudJobSchedule> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<CloudJobSchedule> getAsync(String jobScheduleId, final ServiceCallback<CloudJobSchedule> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String,final ServiceCallback<CloudJobSchedule>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  name: getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  nameWithType: JobSchedules.getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions&text=JobScheduleGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJobSchedule object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public Observable<CloudJobSchedule> getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String,JobScheduleGetOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions, final ServiceCallback<CloudJobSchedule> serviceCallback)
  name: getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions, final ServiceCallback<CloudJobSchedule> serviceCallback)
  nameWithType: JobSchedules.getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions, final ServiceCallback<CloudJobSchedule> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions&text=JobScheduleGetOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<CloudJobSchedule> getAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions, final ServiceCallback<CloudJobSchedule> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.getAsync(String,JobScheduleGetOptions,final ServiceCallback<CloudJobSchedule>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.getWithServiceResponseAsync(String jobScheduleId)
  name: getWithServiceResponseAsync(String jobScheduleId)
  nameWithType: JobSchedules.getWithServiceResponseAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJobSchedule object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleGetHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleGetHeaders&text=JobScheduleGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudJobSchedule, JobScheduleGetHeaders>> getWithServiceResponseAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.getWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.getWithServiceResponseAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  name: getWithServiceResponseAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  nameWithType: JobSchedules.getWithServiceResponseAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  parameters:
  - description: <p>The ID of the job schedule to get. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleGetOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleGetOptions&text=JobScheduleGetOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CloudJobSchedule object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleGetHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleGetHeaders&text=JobScheduleGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<CloudJobSchedule, JobScheduleGetHeaders>> getWithServiceResponseAsync(String jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.getWithServiceResponseAsync(String,JobScheduleGetOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.list()
  name: list()
  nameWithType: JobSchedules.list()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJobSchedule&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJobSchedule> list()
  uid: com.microsoft.azure.batch.protocol.JobSchedules.list()
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.list(final JobScheduleListOptions jobScheduleListOptions)
  name: list(final JobScheduleListOptions jobScheduleListOptions)
  nameWithType: JobSchedules.list(final JobScheduleListOptions jobScheduleListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListOptions&text=JobScheduleListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJobSchedule&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJobSchedule> list(final JobScheduleListOptions jobScheduleListOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.list(final JobScheduleListOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listAsync()
  name: listAsync()
  nameWithType: JobSchedules.listAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJobSchedule>> listAsync()
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listAsync()
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listAsync(final JobScheduleListOptions jobScheduleListOptions)
  name: listAsync(final JobScheduleListOptions jobScheduleListOptions)
  nameWithType: JobSchedules.listAsync(final JobScheduleListOptions jobScheduleListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListOptions&text=JobScheduleListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJobSchedule>> listAsync(final JobScheduleListOptions jobScheduleListOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listAsync(final JobScheduleListOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listAsync(final JobScheduleListOptions jobScheduleListOptions, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  name: listAsync(final JobScheduleListOptions jobScheduleListOptions, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  nameWithType: JobSchedules.listAsync(final JobScheduleListOptions jobScheduleListOptions, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListOptions&text=JobScheduleListOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJobSchedule>> listAsync(final JobScheduleListOptions jobScheduleListOptions, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listAsync(final JobScheduleListOptions,final ListOperationCallback<CloudJobSchedule>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listAsync(final ListOperationCallback<CloudJobSchedule> serviceCallback)
  name: listAsync(final ListOperationCallback<CloudJobSchedule> serviceCallback)
  nameWithType: JobSchedules.listAsync(final ListOperationCallback<CloudJobSchedule> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJobSchedule>> listAsync(final ListOperationCallback<CloudJobSchedule> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listAsync(final ListOperationCallback<CloudJobSchedule>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: JobSchedules.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJobSchedule&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJobSchedule> listNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNext(final String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNext(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  name: listNext(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  nameWithType: JobSchedules.listNext(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions&text=JobScheduleListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;CloudJobSchedule&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public PagedList<CloudJobSchedule> listNext(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNext(final String,final JobScheduleListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: JobSchedules.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJobSchedule>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  name: listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  nameWithType: JobSchedules.listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions&text=JobScheduleListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<Page<CloudJobSchedule>> listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String,final JobScheduleListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  name: listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  nameWithType: JobSchedules.listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions&text=JobScheduleListNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJobSchedule>> listNextAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String,final JobScheduleListNextOptions,final ServiceFuture<List<CloudJobSchedule>>,final ListOperationCallback<CloudJobSchedule>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  nameWithType: JobSchedules.listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public ServiceFuture<List<CloudJobSchedule>> listNextAsync(final String nextPageLink, final ServiceFuture<List<CloudJobSchedule>> serviceFuture, final ListOperationCallback<CloudJobSchedule> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNextAsync(final String,final ServiceFuture<List<CloudJobSchedule>>,final ListOperationCallback<CloudJobSchedule>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: JobSchedules.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders&text=JobScheduleListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJobSchedule>, JobScheduleListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listNextWithServiceResponseAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  name: listNextWithServiceResponseAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  nameWithType: JobSchedules.listNextWithServiceResponseAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListNextOptions&text=JobScheduleListNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders&text=JobScheduleListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJobSchedule>, JobScheduleListHeaders>> listNextWithServiceResponseAsync(final String nextPageLink, final JobScheduleListNextOptions jobScheduleListNextOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listNextWithServiceResponseAsync(final String,final JobScheduleListNextOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: JobSchedules.listWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders&text=JobScheduleListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJobSchedule>, JobScheduleListHeaders>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.listWithServiceResponseAsync(final JobScheduleListOptions jobScheduleListOptions)
  name: listWithServiceResponseAsync(final JobScheduleListOptions jobScheduleListOptions)
  nameWithType: JobSchedules.listWithServiceResponseAsync(final JobScheduleListOptions jobScheduleListOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleListOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListOptions&text=JobScheduleListOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;CloudJobSchedule&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.CloudJobSchedule?alt=com.microsoft.azure.batch.protocol.models.CloudJobSchedule&text=CloudJobSchedule" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleListHeaders&text=JobScheduleListHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the job schedules in the specified account.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<CloudJobSchedule>, JobScheduleListHeaders>> listWithServiceResponseAsync(final JobScheduleListOptions jobScheduleListOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.listWithServiceResponseAsync(final JobScheduleListOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  name: patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  nameWithType: JobSchedules.patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public void patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patch(String,JobSchedulePatchParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  name: patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  nameWithType: JobSchedules.patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobSchedulePatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions&text=JobSchedulePatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public void patch(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patch(String,JobSchedulePatchParameter,JobSchedulePatchOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  name: patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  nameWithType: JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<Void> patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String,JobSchedulePatchParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, final ServiceCallback<Void> serviceCallback)
  name: patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public ServiceFuture<Void> patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String,JobSchedulePatchParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  name: patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  nameWithType: JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobSchedulePatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions&text=JobSchedulePatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<Void> patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String,JobSchedulePatchParameter,JobSchedulePatchOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions, final ServiceCallback<Void> serviceCallback)
  name: patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobSchedulePatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions&text=JobSchedulePatchOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public ServiceFuture<Void> patchAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patchAsync(String,JobSchedulePatchParameter,JobSchedulePatchOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  name: patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  nameWithType: JobSchedules.patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchHeaders?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchHeaders&text=JobSchedulePatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobSchedulePatchHeaders>> patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patchWithServiceResponseAsync(String,JobSchedulePatchParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  name: patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  nameWithType: JobSchedules.patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobSchedulePatchParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchParameter&text=JobSchedulePatchParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobSchedulePatchOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchOptions&text=JobSchedulePatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobSchedulePatchHeaders?alt=com.microsoft.azure.batch.protocol.models.JobSchedulePatchHeaders&text=JobSchedulePatchHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job schedule. This replaces only the job schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobSchedulePatchHeaders>> patchWithServiceResponseAsync(String jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.patchWithServiceResponseAsync(String,JobSchedulePatchParameter,JobSchedulePatchOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminate(String jobScheduleId)
  name: terminate(String jobScheduleId)
  nameWithType: JobSchedules.terminate(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public void terminate(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminate(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminate(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  name: terminate(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  nameWithType: JobSchedules.terminate(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions&text=JobScheduleTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public void terminate(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminate(String,JobScheduleTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String jobScheduleId)
  name: terminateAsync(String jobScheduleId)
  nameWithType: JobSchedules.terminateAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public Observable<Void> terminateAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  name: terminateAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.terminateAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<Void> terminateAsync(String jobScheduleId, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  name: terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  nameWithType: JobSchedules.terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions&text=JobScheduleTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public Observable<Void> terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String,JobScheduleTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions, final ServiceCallback<Void> serviceCallback)
  name: terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions&text=JobScheduleTerminateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public ServiceFuture<Void> terminateAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminateAsync(String,JobScheduleTerminateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminateWithServiceResponseAsync(String jobScheduleId)
  name: terminateWithServiceResponseAsync(String jobScheduleId)
  nameWithType: JobSchedules.terminateWithServiceResponseAsync(String jobScheduleId)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleTerminateHeaders&text=JobScheduleTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleTerminateHeaders>> terminateWithServiceResponseAsync(String jobScheduleId)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminateWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.terminateWithServiceResponseAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  name: terminateWithServiceResponseAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  nameWithType: JobSchedules.terminateWithServiceResponseAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  parameters:
  - description: <p>The ID of the job schedule to terminates. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleTerminateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleTerminateOptions&text=JobScheduleTerminateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleTerminateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleTerminateHeaders&text=JobScheduleTerminateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Terminates a job schedule.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleTerminateHeaders>> terminateWithServiceResponseAsync(String jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.terminateWithServiceResponseAsync(String,JobScheduleTerminateOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  name: update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  nameWithType: JobSchedules.update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public void update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.update(String,JobScheduleUpdateParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  name: update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  nameWithType: JobSchedules.update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions&text=JobScheduleUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public void update(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.update(String,JobScheduleUpdateParameter,JobScheduleUpdateOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  name: updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  nameWithType: JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String,JobScheduleUpdateParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String,JobScheduleUpdateParameter,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  name: updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  nameWithType: JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions&text=JobScheduleUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String,JobScheduleUpdateParameter,JobScheduleUpdateOptions)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions, final ServiceCallback<Void> serviceCallback)
  name: updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions, final ServiceCallback<Void> serviceCallback)
  nameWithType: JobSchedules.updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions&text=JobScheduleUpdateOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public ServiceFuture<Void> updateAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.updateAsync(String,JobScheduleUpdateParameter,JobScheduleUpdateOptions,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  name: updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  nameWithType: JobSchedules.updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateHeaders&text=JobScheduleUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleUpdateHeaders>> updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.updateWithServiceResponseAsync(String,JobScheduleUpdateParameter)
- fullName: com.microsoft.azure.batch.protocol.JobSchedules.updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  name: updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  nameWithType: JobSchedules.updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  parameters:
  - description: <p>The ID of the job schedule to update. </p>
    name: jobScheduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for the request. </p>
    name: jobScheduleUpdateParameter
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateParameter&text=JobScheduleUpdateParameter" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: jobScheduleUpdateOptions
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateOptions&text=JobScheduleUpdateOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponseWithHeaders"></xref> object if successful. </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.batch.protocol.models.JobScheduleUpdateHeaders?alt=com.microsoft.azure.batch.protocol.models.JobScheduleUpdateHeaders&text=JobScheduleUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the properties of the specified job schedule. This fully replaces all the updatable properties of the job schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a job schedule only impact jobs created by the schedule after the update has taken place; currently running jobs are unaffected.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Void, JobScheduleUpdateHeaders>> updateWithServiceResponseAsync(String jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
  uid: com.microsoft.azure.batch.protocol.JobSchedules.updateWithServiceResponseAsync(String,JobScheduleUpdateParameter,JobScheduleUpdateOptions)
nameWithType: JobSchedules
syntax: public interface JobSchedules
type: interface
uid: com.microsoft.azure.batch.protocol.JobSchedules
fullName: com.microsoft.azure.batch.protocol.JobSchedules
name: JobSchedules
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in JobSchedules. </p>
metadata: {}
