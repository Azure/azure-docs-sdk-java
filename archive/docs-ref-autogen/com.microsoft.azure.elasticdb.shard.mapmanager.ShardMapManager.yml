### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior)
  name: ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior)
  nameWithType: ShardMapManager.ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior)
  parameters:
  - description: <p>credentials for performing ShardMapManager operations. </p>
    name: credentials
    type: <xref href="SqlShardMapManagerCredentials?alt=SqlShardMapManagerCredentials&text=SqlShardMapManagerCredentials" data-throw-if-not-resolved="False"/>
  - description: <p>Factory for store connections. </p>
    name: storeConnectionFactory
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.IStoreConnectionFactory?alt=com.microsoft.azure.elasticdb.shard.store.IStoreConnectionFactory&text=IStoreConnectionFactory" data-throw-if-not-resolved="False"/>
  - description: <p>Factory for store operations. </p>
    name: storeOperationFactory
    type: <xref href="IStoreOperationFactory?alt=IStoreOperationFactory&text=IStoreOperationFactory" data-throw-if-not-resolved="False"/>
  - description: <p>Cache store. </p>
    name: cacheStore
    type: <xref href="ICacheStore?alt=ICacheStore&text=ICacheStore" data-throw-if-not-resolved="False"/>
  - description: <p>Initialization policy. </p>
    name: loadPolicy
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManagerLoadPolicy?alt=com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManagerLoadPolicy&text=ShardMapManagerLoadPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>Policy for performing retries on connections to shard map manager database. </p>
    name: retryPolicy
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>Policy for detecting transient errors. </p>
    name: retryBehavior
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior&text=RetryBehavior" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given the connection string, opens up the corresponding data source and obtains the ShardMapManager.</p>

    <p></p>
  syntax: public ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.ShardMapManager(SqlShardMapManagerCredentials,IStoreConnectionFactory,IStoreOperationFactory,ICacheStore,ShardMapManagerLoadPolicy,RetryPolicy,RetryBehavior)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior, EventHandler<RetryingEventArgs> retryEventHandler)
  name: ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior, EventHandler<RetryingEventArgs> retryEventHandler)
  nameWithType: ShardMapManager.ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior, EventHandler<RetryingEventArgs> retryEventHandler)
  parameters:
  - description: <p>credentials for performing ShardMapManager operations. </p>
    name: credentials
    type: <xref href="SqlShardMapManagerCredentials?alt=SqlShardMapManagerCredentials&text=SqlShardMapManagerCredentials" data-throw-if-not-resolved="False"/>
  - description: <p>Factory for store connections. </p>
    name: storeConnectionFactory
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.IStoreConnectionFactory?alt=com.microsoft.azure.elasticdb.shard.store.IStoreConnectionFactory&text=IStoreConnectionFactory" data-throw-if-not-resolved="False"/>
  - description: <p>Factory for store operations. </p>
    name: storeOperationFactory
    type: <xref href="IStoreOperationFactory?alt=IStoreOperationFactory&text=IStoreOperationFactory" data-throw-if-not-resolved="False"/>
  - description: <p>Cache store. </p>
    name: cacheStore
    type: <xref href="ICacheStore?alt=ICacheStore&text=ICacheStore" data-throw-if-not-resolved="False"/>
  - description: <p>Initialization policy. </p>
    name: loadPolicy
    type: <xref href="com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManagerLoadPolicy?alt=com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManagerLoadPolicy&text=ShardMapManagerLoadPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>Policy for performing retries on connections to shard map manager database. </p>
    name: retryPolicy
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>Policy for detecting transient errors. </p>
    name: retryBehavior
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior&text=RetryBehavior" data-throw-if-not-resolved="False"/>
  - description: <p>Event handler for store operation retry events. </p>
    name: retryEventHandler
    type: EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs&text=RetryingEventArgs" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Given the connection string, opens up the corresponding data source and obtains the ShardMapManager.</p>

    <p></p>
  syntax: public ShardMapManager(SqlShardMapManagerCredentials credentials, IStoreConnectionFactory storeConnectionFactory, IStoreOperationFactory storeOperationFactory, ICacheStore cacheStore, ShardMapManagerLoadPolicy loadPolicy, RetryPolicy retryPolicy, RetryBehavior retryBehavior, EventHandler<RetryingEventArgs> retryEventHandler)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.ShardMapManager(SqlShardMapManagerCredentials,IStoreConnectionFactory,IStoreOperationFactory,ICacheStore,ShardMapManagerLoadPolicy,RetryPolicy,RetryBehavior,EventHandler<RetryingEventArgs>)
fields:
- field:
    type: Event&lt;EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs&text=RetryingEventArgs" data-throw-if-not-resolved="False"/>&gt;&gt;
  fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.shardMapManagerRetrying
  name: shardMapManagerRetrying
  nameWithType: ShardMapManager.shardMapManagerRetrying
  summary: <p>Event to be raised on Shard Map Manager store retries. </p>
  syntax: public Event<EventHandler<RetryingEventArgs>> shardMapManagerRetrying
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.shardMapManagerRetrying
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.createListShardMap(String shardMapName, ShardKeyType keyType)
  name: createListShardMap(String shardMapName, ShardKeyType keyType)
  nameWithType: ShardMapManager.createListShardMap(String shardMapName, ShardKeyType keyType)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>List shard map with the specified name. </p>
    type: '&lt;KeyT&gt; <xref href="com.microsoft.azure.elasticdb.shard.map.ListShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ListShardMap&text=ListShardMap" data-throw-if-not-resolved="False"/>&lt;KeyT&gt;'
  summary: >-
    <p>Creates a list based ListShardMap&lt;KeyT&gt;. </p>

    <p></p>
  syntax: public <KeyT> ListShardMap<KeyT> createListShardMap(String shardMapName, ShardKeyType keyType)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.createListShardMap(String,ShardKeyType)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.createRangeShardMap(String shardMapName, ShardKeyType keyType)
  name: createRangeShardMap(String shardMapName, ShardKeyType keyType)
  nameWithType: ShardMapManager.createRangeShardMap(String shardMapName, ShardKeyType keyType)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Range shard map with the specified name. </p>
    type: '&lt;KeyT&gt; <xref href="com.microsoft.azure.elasticdb.shard.map.RangeShardMap?alt=com.microsoft.azure.elasticdb.shard.map.RangeShardMap&text=RangeShardMap" data-throw-if-not-resolved="False"/>&lt;KeyT&gt;'
  summary: >-
    <p>Create a range based RangeShardMap&lt;KeyT&gt;. </p>

    <p></p>
  syntax: public <KeyT> RangeShardMap<KeyT> createRangeShardMap(String shardMapName, ShardKeyType keyType)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.createRangeShardMap(String,ShardKeyType)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.deleteShardMap(ShardMap shardMap)
  name: deleteShardMap(ShardMap shardMap)
  nameWithType: ShardMapManager.deleteShardMap(ShardMap shardMap)
  parameters:
  - description: <p>ShardMap to be removed. </p>
    name: shardMap
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes the specified shard map.</p>

    <p></p>
  syntax: public void deleteShardMap(ShardMap shardMap)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.deleteShardMap(ShardMap)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getCache()
  name: getCache()
  nameWithType: ShardMapManager.getCache()
  returns:
    type: <xref href="ICacheStore?alt=ICacheStore&text=ICacheStore" data-throw-if-not-resolved="False"/>
  syntax: public ICacheStore getCache()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getCache()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getCredentials()
  name: getCredentials()
  nameWithType: ShardMapManager.getCredentials()
  returns:
    type: <xref href="SqlShardMapManagerCredentials?alt=SqlShardMapManagerCredentials&text=SqlShardMapManagerCredentials" data-throw-if-not-resolved="False"/>
  syntax: public SqlShardMapManagerCredentials getCredentials()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getCredentials()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getDistinctShardLocations()
  name: getDistinctShardLocations()
  nameWithType: ShardMapManager.getDistinctShardLocations()
  returns:
    description: <p>Collection of shard locations associated with the shard map manager. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.base.ShardLocation?alt=com.microsoft.azure.elasticdb.shard.base.ShardLocation&text=ShardLocation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Obtains distinct shard locations from the shard map manager.</p>

    <p></p>
  syntax: public List<ShardLocation> getDistinctShardLocations()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getDistinctShardLocations()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getListShardMap(String shardMapName, ShardKeyType keyType)
  name: getListShardMap(String shardMapName, ShardKeyType keyType)
  nameWithType: ShardMapManager.getListShardMap(String shardMapName, ShardKeyType keyType)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Resulting ShardMap. </p>
    type: '&lt;KeyT&gt; <xref href="com.microsoft.azure.elasticdb.shard.map.ListShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ListShardMap&text=ListShardMap" data-throw-if-not-resolved="False"/>&lt;KeyT&gt;'
  summary: >-
    <p>Obtains a ListShardMap&lt;KeyT&gt; given the name. </p>

    <p></p>
  syntax: public <KeyT> ListShardMap<KeyT> getListShardMap(String shardMapName, ShardKeyType keyType)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getListShardMap(String,ShardKeyType)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getRangeShardMap(String shardMapName, ShardKeyType keyType)
  name: getRangeShardMap(String shardMapName, ShardKeyType keyType)
  nameWithType: ShardMapManager.getRangeShardMap(String shardMapName, ShardKeyType keyType)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Resulting ShardMap. </p>
    type: '&lt;KeyT&gt; <xref href="com.microsoft.azure.elasticdb.shard.map.RangeShardMap?alt=com.microsoft.azure.elasticdb.shard.map.RangeShardMap&text=RangeShardMap" data-throw-if-not-resolved="False"/>&lt;KeyT&gt;'
  summary: >-
    <p>Obtains a RangeShardMap&lt;KeyT&gt; given the name. </p>

    <p></p>
  syntax: public <KeyT> RangeShardMap<KeyT> getRangeShardMap(String shardMapName, ShardKeyType keyType)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getRangeShardMap(String,ShardKeyType)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getRecoveryManager()
  name: getRecoveryManager()
  nameWithType: ShardMapManager.getRecoveryManager()
  returns:
    description: <p>Recovery manager for the shard map manager. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.recovery.RecoveryManager?alt=com.microsoft.azure.elasticdb.shard.recovery.RecoveryManager&text=RecoveryManager" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Obtains the recovery manager for the current shard map manager instance.</p>

    <p></p>
  syntax: public RecoveryManager getRecoveryManager()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getRecoveryManager()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getRetryPolicy()
  name: getRetryPolicy()
  nameWithType: ShardMapManager.getRetryPolicy()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  syntax: public RetryPolicy getRetryPolicy()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getRetryPolicy()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getSchemaInfoCollection()
  name: getSchemaInfoCollection()
  nameWithType: ShardMapManager.getSchemaInfoCollection()
  returns:
    description: <p>schema info collection for shard map manager. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.schema.SchemaInfoCollection?alt=com.microsoft.azure.elasticdb.shard.schema.SchemaInfoCollection&text=SchemaInfoCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Obtains the schema info collection object for the current shard map manager instance.</p>

    <p></p>
  syntax: public SchemaInfoCollection getSchemaInfoCollection()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getSchemaInfoCollection()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getShardMap(String shardMapName)
  name: getShardMap(String shardMapName)
  nameWithType: ShardMapManager.getShardMap(String shardMapName)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>ShardMap with the specificed name. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Obtains a ShardMap given the name.</p>

    <p></p>
  syntax: public ShardMap getShardMap(String shardMapName)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getShardMap(String)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getShardMaps()
  name: getShardMaps()
  nameWithType: ShardMapManager.getShardMaps()
  returns:
    description: <p>Collection of shard maps associated with the shard map manager. </p>
    type: List&lt;<xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Obtains all shard maps associated with the shard map manager.</p>

    <p></p>
  syntax: public List<ShardMap> getShardMaps()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getShardMaps()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getStoreConnectionFactory()
  name: getStoreConnectionFactory()
  nameWithType: ShardMapManager.getStoreConnectionFactory()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.IStoreConnectionFactory?alt=com.microsoft.azure.elasticdb.shard.store.IStoreConnectionFactory&text=IStoreConnectionFactory" data-throw-if-not-resolved="False"/>
  syntax: public IStoreConnectionFactory getStoreConnectionFactory()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getStoreConnectionFactory()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getStoreOperationFactory()
  name: getStoreOperationFactory()
  nameWithType: ShardMapManager.getStoreOperationFactory()
  returns:
    type: <xref href="IStoreOperationFactory?alt=IStoreOperationFactory&text=IStoreOperationFactory" data-throw-if-not-resolved="False"/>
  syntax: public IStoreOperationFactory getStoreOperationFactory()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.getStoreOperationFactory()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.lookupShardMapByName(String operationName, String shardMapName, boolean lookInCacheFirst)
  name: lookupShardMapByName(String operationName, String shardMapName, boolean lookInCacheFirst)
  nameWithType: ShardMapManager.lookupShardMapByName(String operationName, String shardMapName, boolean lookInCacheFirst)
  parameters:
  - description: <p>Operation name, useful for diagnostics. </p>
    name: operationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Whether to skip first lookup in cache. </p>
    name: lookInCacheFirst
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Shard map object corresponding to one being searched. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Finds a shard map from cache if requested and if necessary from global shard map.</p>

    <p></p>
  syntax: public ShardMap lookupShardMapByName(String operationName, String shardMapName, boolean lookInCacheFirst)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.lookupShardMapByName(String,String,boolean)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.onShardMapManagerRetryingEvent(RetryingEventArgs arg)
  name: onShardMapManagerRetryingEvent(RetryingEventArgs arg)
  nameWithType: ShardMapManager.onShardMapManagerRetryingEvent(RetryingEventArgs arg)
  parameters:
  - description: <p>Event argument. </p>
    name: arg
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs&text=RetryingEventArgs" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Publisher for ShardMapManagerRetryingEvent event.</p>

    <p></p>
  syntax: public void onShardMapManagerRetryingEvent(RetryingEventArgs arg)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.onShardMapManagerRetryingEvent(RetryingEventArgs)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.shardMapManagerRetryingEventHandler(Object sender, RetryingEventArgs arg)
  name: shardMapManagerRetryingEventHandler(Object sender, RetryingEventArgs arg)
  nameWithType: ShardMapManager.shardMapManagerRetryingEventHandler(Object sender, RetryingEventArgs arg)
  parameters:
  - description: <p>Sender object (RetryPolicy) </p>
    name: sender
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>Event argument. </p>
    name: arg
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryingEventArgs&text=RetryingEventArgs" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Subscriber function to RetryPolicy.retrying event.</p>

    <p></p>
  syntax: public void shardMapManagerRetryingEventHandler(Object sender, RetryingEventArgs arg)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.shardMapManagerRetryingEventHandler(Object,RetryingEventArgs)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.tryGetListShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ListShardMap<KeyT>> shardMap)
  name: tryGetListShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ListShardMap<KeyT>> shardMap)
  nameWithType: ShardMapManager.tryGetListShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ListShardMap<KeyT>> shardMap)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  - name: shardMap
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.map.ListShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ListShardMap&text=ListShardMap" data-throw-if-not-resolved="False"/>&lt;KeyT&gt;&gt;
  returns:
    description: <p>ListShardMap </p>
    type: <xref href="%3CKeyT%3E+boolean?alt=%3CKeyT%3E+boolean&text=%3CKeyT%3E+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to obtains a ListShardMap&lt;KeyT&gt; given the name. </p>

    <p></p>
  syntax: public <KeyT> boolean tryGetListShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ListShardMap<KeyT>> shardMap)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.tryGetListShardMap(String,ShardKeyType,ReferenceObjectHelper<ListShardMap<KeyT>>)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.tryGetRangeShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<RangeShardMap<KeyT>> shardMap)
  name: tryGetRangeShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<RangeShardMap<KeyT>> shardMap)
  nameWithType: ShardMapManager.tryGetRangeShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<RangeShardMap<KeyT>> shardMap)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  - name: shardMap
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.map.RangeShardMap?alt=com.microsoft.azure.elasticdb.shard.map.RangeShardMap&text=RangeShardMap" data-throw-if-not-resolved="False"/>&lt;KeyT&gt;&gt;
  returns:
    description: <p>RangeShardMap </p>
    type: <xref href="%3CKeyT%3E+boolean?alt=%3CKeyT%3E+boolean&text=%3CKeyT%3E+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to obtains a RangeShardMap&lt;KeyT&gt; given the name.</p>

    <p></p>
  syntax: public <KeyT> boolean tryGetRangeShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<RangeShardMap<KeyT>> shardMap)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.tryGetRangeShardMap(String,ShardKeyType,ReferenceObjectHelper<RangeShardMap<KeyT>>)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.tryGetShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ShardMap> shardMap)
  name: tryGetShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ShardMap> shardMap)
  nameWithType: ShardMapManager.tryGetShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ShardMap> shardMap)
  parameters:
  - description: <p>Name of shard map. </p>
    name: shardMapName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  - description: <p>Shard map with the specified name. </p>
    name: shardMap
    type: ReferenceObjectHelper&lt;<xref href="com.microsoft.azure.elasticdb.shard.map.ShardMap?alt=com.microsoft.azure.elasticdb.shard.map.ShardMap&text=ShardMap" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: >-
      <p>

        <code>true</code> if shard map with the specified name was found, <code>false</code> otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Tries to obtains a ShardMap given the name.</p>

    <p></p>
  syntax: public boolean tryGetShardMap(String shardMapName, ShardKeyType keyType, ReferenceObjectHelper<ShardMap> shardMap)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.tryGetShardMap(String,ShardKeyType,ReferenceObjectHelper<ShardMap>)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeGlobalStore()
  name: upgradeGlobalStore()
  nameWithType: ShardMapManager.upgradeGlobalStore()
  summary: <p>Upgrades store hosting global shard map to the latest version supported by library. </p>
  syntax: public void upgradeGlobalStore()
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeGlobalStore()
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeGlobalStore(Version targetVersion)
  name: upgradeGlobalStore(Version targetVersion)
  nameWithType: ShardMapManager.upgradeGlobalStore(Version targetVersion)
  parameters:
  - description: <p>Target store version to deploy. </p>
    name: targetVersion
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.Version?alt=com.microsoft.azure.elasticdb.shard.store.Version&text=Version" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Upgrades store hosting global shard map to specified version. This will be used for upgrade testing.</p>

    <p></p>
  syntax: public void upgradeGlobalStore(Version targetVersion)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeGlobalStore(Version)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeLocalStore(ShardLocation location)
  name: upgradeLocalStore(ShardLocation location)
  nameWithType: ShardMapManager.upgradeLocalStore(ShardLocation location)
  parameters:
  - description: <p>Shard location to upgrade. </p>
    name: location
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardLocation?alt=com.microsoft.azure.elasticdb.shard.base.ShardLocation&text=ShardLocation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Upgrades store location to the latest version supported by library.</p>

    <p></p>
  syntax: public void upgradeLocalStore(ShardLocation location)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeLocalStore(ShardLocation)
- fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeLocalStore(ShardLocation location, Version targetVersion)
  name: upgradeLocalStore(ShardLocation location, Version targetVersion)
  nameWithType: ShardMapManager.upgradeLocalStore(ShardLocation location, Version targetVersion)
  parameters:
  - description: <p>Shard location to upgrade. </p>
    name: location
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardLocation?alt=com.microsoft.azure.elasticdb.shard.base.ShardLocation&text=ShardLocation" data-throw-if-not-resolved="False"/>
  - description: <p>Target store version to deploy. </p>
    name: targetVersion
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.Version?alt=com.microsoft.azure.elasticdb.shard.store.Version&text=Version" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Upgrades store location to the specified version. This will be used for upgrade testing.</p>

    <p></p>
  syntax: public void upgradeLocalStore(ShardLocation location, Version targetVersion)
  uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager.upgradeLocalStore(ShardLocation,Version)
nameWithType: ShardMapManager
syntax: public class ShardMapManager
type: class
uid: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager
fullName: com.microsoft.azure.elasticdb.shard.mapmanager.ShardMapManager
name: ShardMapManager
package: com.microsoft.azure.elasticdb.shard.mapmanager
summary: <p>Serves as the entry point for creation, management and lookup operations over shard maps. </p>
metadata: {}
