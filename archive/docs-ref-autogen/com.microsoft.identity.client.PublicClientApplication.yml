### YamlMime:JavaType
constructors:
- fullName: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final PublicClientApplicationConfiguration configFile)
  name: PublicClientApplication(@NonNull final PublicClientApplicationConfiguration configFile)
  nameWithType: PublicClientApplication.PublicClientApplication(@NonNull final PublicClientApplicationConfiguration configFile)
  parameters:
  - name: configFile
    type: '@NonNull final <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>'
  syntax: protected PublicClientApplication(@NonNull final PublicClientApplicationConfiguration configFile)
  uid: com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final PublicClientApplicationConfiguration)
fields:
- field:
    type: <xref href="com.microsoft.identity.client.PublicClientApplication.AccountMatcher?alt=com.microsoft.identity.client.PublicClientApplication.AccountMatcher&text=PublicClientApplication.AccountMatcher" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.PublicClientApplication.homeAccountMatcher
  name: homeAccountMatcher
  nameWithType: PublicClientApplication.homeAccountMatcher
  syntax: >-
    protected AccountMatcher homeAccountMatcher= new AccountMatcher() {
            @Override
            boolean matches(@NonNull final String homeAccountId,
                            @NonNull final IAccount account) {
                return homeAccountId.contains(account.getId());
            }
        }
  uid: com.microsoft.identity.client.PublicClientApplication.homeAccountMatcher
- field:
    type: <xref href="com.microsoft.identity.client.PublicClientApplication.AccountMatcher?alt=com.microsoft.identity.client.PublicClientApplication.AccountMatcher&text=PublicClientApplication.AccountMatcher" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.PublicClientApplication.localAccountMatcher
  name: localAccountMatcher
  nameWithType: PublicClientApplication.localAccountMatcher
  syntax: "protected AccountMatcher localAccountMatcher= new AccountMatcher() {\n        @Override\n        boolean matches(@NonNull final String localAccountId,\n                        @NonNull final IAccount account) {\n            \n            if (localAccountId.contains(account.getId())) {\n                return true;\n            } else if (account instanceof MultiTenantAccount) {\n                \n                final MultiTenantAccount multiTenantAccount = (MultiTenantAccount) account;\n                final Map<String, ITenantProfile> tenantProfiles = multiTenantAccount.getTenantProfiles();\n\n                if (null != tenantProfiles && !tenantProfiles.isEmpty()) {\n                    for (final Map.Entry<String, ITenantProfile> profileEntry : tenantProfiles.entrySet()) {\n                        if (!TextUtils.isEmpty(profileEntry.getValue().getId()) &&\n                                localAccountId.contains(profileEntry.getValue().getId())) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n    }"
  uid: com.microsoft.identity.client.PublicClientApplication.localAccountMatcher
- field:
    type: <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.PublicClientApplication.mPublicClientConfiguration
  name: mPublicClientConfiguration
  nameWithType: PublicClientApplication.mPublicClientConfiguration
  syntax: protected PublicClientApplicationConfiguration mPublicClientConfiguration
  uid: com.microsoft.identity.client.PublicClientApplication.mPublicClientConfiguration
- field:
    type: <xref href="TokenShareUtility?alt=TokenShareUtility&text=TokenShareUtility" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.PublicClientApplication.mTokenShareUtility
  name: mTokenShareUtility
  nameWithType: PublicClientApplication.mTokenShareUtility
  syntax: protected TokenShareUtility mTokenShareUtility
  uid: com.microsoft.identity.client.PublicClientApplication.mTokenShareUtility
- field:
    type: <xref href="com.microsoft.identity.client.PublicClientApplication.AccountMatcher?alt=com.microsoft.identity.client.PublicClientApplication.AccountMatcher&text=PublicClientApplication.AccountMatcher" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.identity.client.PublicClientApplication.usernameMatcher
  name: usernameMatcher
  nameWithType: PublicClientApplication.usernameMatcher
  syntax: protected AccountMatcher usernameMatcher
  uid: com.microsoft.identity.client.PublicClientApplication.usernameMatcher
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.IPublicClientApplication?alt=com.microsoft.identity.client.IPublicClientApplication&text=IPublicClientApplication" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.identity.client.IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String [],@NonNull final DeviceCodeFlowCallback)
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshTokenWithMetadata(String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshToken(String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshTokenWithMetadata(String)
- com.microsoft.identity.client.ITokenShare.saveMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.ITokenShare.saveOrgIdFamilyRefreshToken(String)
methods:
- fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  name: acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
  parameters:
  - name: acquireTokenParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenParameters?alt=com.microsoft.identity.client.AcquireTokenParameters&text=AcquireTokenParameters" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid="com.microsoft.identity.client.Prompt" data-throw-if-not-resolved="false" data-raw-source="Prompt"></xref> is <xref uid="com.microsoft.identity.client.Prompt.SELECT_ACCOUNT" data-throw-if-not-resolved="false" data-raw-source="Prompt#SELECT_ACCOUNT"></xref>. </p>

    <p>Convey parameters via the AquireTokenParameters object</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final AcquireTokenParameters acquireTokenParameters)
  uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
- fullName: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  nameWithType: PublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that is used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onCancel()"></xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(MsalException)"></xref>. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup. Default value for <xref uid="com.microsoft.identity.client.Prompt" data-throw-if-not-resolved="false" data-raw-source="Prompt"></xref> is <xref uid="com.microsoft.identity.client.Prompt.SELECT_ACCOUNT" data-throw-if-not-resolved="false" data-raw-source="Prompt#SELECT_ACCOUNT"></xref>.</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilent( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  name: acquireTokenSilent( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  nameWithType: PublicClientApplication.acquireTokenSilent( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
  parameters:
  - name: acquireTokenSilentParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="com.microsoft.identity.client.IAuthenticationResult?alt=com.microsoft.identity.client.IAuthenticationResult&text=IAuthenticationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public IAuthenticationResult acquireTokenSilent( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  uid: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
- fullName: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  name: acquireTokenSilentAsync( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  nameWithType: PublicClientApplication.acquireTokenSilentAsync( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
  parameters:
  - name: acquireTokenSilentParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public void acquireTokenSilentAsync( @NonNull final AcquireTokenSilentParameters acquireTokenSilentParameters)
  uid: com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
- fullName: com.microsoft.identity.client.PublicClientApplication.acquireTokenWithDeviceCode(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  name: acquireTokenWithDeviceCode(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  nameWithType: PublicClientApplication.acquireTokenWithDeviceCode(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  parameters:
  - name: scopes
    type: <xref href="%40Nullable+String+%5B%5D?alt=%40Nullable+String+%5B%5D&text=%40Nullable+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.DeviceCodeFlowCallback?alt=com.microsoft.identity.client.IPublicClientApplication.DeviceCodeFlowCallback&text=IPublicClientApplication.DeviceCodeFlowCallback" data-throw-if-not-resolved="False"/>'
  syntax: public void acquireTokenWithDeviceCode(@Nullable String[] scopes, @NonNull final DeviceCodeFlowCallback callback)
  uid: com.microsoft.identity.client.PublicClientApplication.acquireTokenWithDeviceCode(@Nullable String [],@NonNull final DeviceCodeFlowCallback)
- fullName: com.microsoft.identity.client.PublicClientApplication.buildAcquireTokenSilentParameters(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, final boolean forceRefresh, @Nullable final ClaimsRequest claimsRequest, @NonNull final SilentAuthenticationCallback callback)
  name: buildAcquireTokenSilentParameters(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, final boolean forceRefresh, @Nullable final ClaimsRequest claimsRequest, @NonNull final SilentAuthenticationCallback callback)
  nameWithType: PublicClientApplication.buildAcquireTokenSilentParameters(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, final boolean forceRefresh, @Nullable final ClaimsRequest claimsRequest, @NonNull final SilentAuthenticationCallback callback)
  parameters:
  - name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: account
    type: '@NonNull final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - name: authority
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - name: forceRefresh
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - name: claimsRequest
    type: '@Nullable final <xref href="com.microsoft.identity.client.claims.ClaimsRequest?alt=com.microsoft.identity.client.claims.ClaimsRequest&text=ClaimsRequest" data-throw-if-not-resolved="False"/>'
  - name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>
  syntax: protected AcquireTokenSilentParameters buildAcquireTokenSilentParameters(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, final boolean forceRefresh, @Nullable final ClaimsRequest claimsRequest, @NonNull final SilentAuthenticationCallback callback)
  uid: com.microsoft.identity.client.PublicClientApplication.buildAcquireTokenSilentParameters(@NonNull final String [],@NonNull final IAccount,@NonNull final String,final boolean,@Nullable final ClaimsRequest,@NonNull final SilentAuthenticationCallback)
- fullName: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context context, @NonNull final File configFile, @NonNull final ApplicationCreatedListener listener)
  name: create(@NonNull final Context context, @NonNull final File configFile, @NonNull final ApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.create(@NonNull final Context context, @NonNull final File configFile, @NonNull final ApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The file containing the JSON configuration for the PublicClientApplication. Cannot be null. </p>
    name: configFile
    type: <xref href="%40NonNull+final+File?alt=%40NonNull+final+File&text=%40NonNull+final+File" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.ApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.ApplicationCreatedListener&text=IPublicClientApplication.ApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#create(Context, File, ApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the specified file.</p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL configuration file, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static void create(@NonNull final Context context, @NonNull final File configFile, @NonNull final ApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final File,@NonNull final ApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context context, @NonNull final String clientId, @Nullable final String authority, @NonNull final String redirectUri, @NonNull final ApplicationCreatedListener listener)
  name: create(@NonNull final Context context, @NonNull final String clientId, @Nullable final String authority, @NonNull final String redirectUri, @NonNull final ApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.create(@NonNull final Context context, @NonNull final String clientId, @Nullable final String authority, @NonNull final String redirectUri, @NonNull final ApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The application client id. Cannot be null. </p>
    name: clientId
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The default authority to be used for the authority. If this is null, the default authority will be used. </p>
    name: authority
    type: <xref href="%40Nullable+final+String?alt=%40Nullable+final+String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The redirect URI of the application. </p>
    name: redirectUri
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.ApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.ApplicationCreatedListener&text=IPublicClientApplication.ApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#create(Context, String, String, ApplicationCreatedListener)"></xref> allows the client id and authority to be passed instead of providing them through metadata.</p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of an running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p></p>
  syntax: public static void create(@NonNull final Context context, @NonNull final String clientId, @Nullable final String authority, @NonNull final String redirectUri, @NonNull final ApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final String,@Nullable final String,@NonNull final String,@NonNull final ApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context context, final int configFileResourceId)
  name: create(@NonNull final Context context, final int configFileResourceId)
  nameWithType: PublicClientApplication.create(@NonNull final Context context, final int configFileResourceId)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication </p>
    name: configFileResourceId
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is invoked on the main thread. </p>
  returns:
    description: <p>An instance of IPublicClientApplication. </p>
    type: <xref href="com.microsoft.identity.client.IPublicClientApplication?alt=com.microsoft.identity.client.IPublicClientApplication&text=IPublicClientApplication" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#create(Context, int, ApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the file included in your application's resources.</p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static IPublicClientApplication create(@NonNull final Context context, final int configFileResourceId)
  uid: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int)
- fullName: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context context, final int configFileResourceId, @NonNull final ApplicationCreatedListener listener)
  name: create(@NonNull final Context context, final int configFileResourceId, @NonNull final ApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.create(@NonNull final Context context, final int configFileResourceId, @NonNull final ApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication. </p>
    name: configFileResourceId
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.ApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.ApplicationCreatedListener&text=IPublicClientApplication.ApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#create(Context, int, ApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the file included in your application resources.</p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static void create(@NonNull final Context context, final int configFileResourceId, @NonNull final ApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int,@NonNull final ApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile)
  name: createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile)
  nameWithType: PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The file containing the JSON configuration for the PublicClientApplication. Cannot be null. </p>
    name: configFile
    type: <xref href="%40NonNull+final+File?alt=%40NonNull+final+File&text=%40NonNull+final+File" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is invoked on the main thread. </p>
  returns:
    type: <xref href="com.microsoft.identity.client.IMultipleAccountPublicClientApplication?alt=com.microsoft.identity.client.IMultipleAccountPublicClientApplication&text=IMultipleAccountPublicClientApplication" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createMultipleAccountPublicClientApplication(Context, File)"></xref> will read the client id and other configuration settings from the file included in your application resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="com.microsoft.identity.client.IMultipleAccountPublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="IMultipleAccountPublicClientApplication"></xref>. For example, when the device is marked as 'shared' (<xref uid="com.microsoft.identity.client.PublicClientApplication.isSharedDevice()" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#isSharedDevice()"></xref> is set to true) </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL configuration file, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static IMultipleAccountPublicClientApplication createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile)
  uid: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File)
- fullName: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  name: createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The file containing the JSON configuration for the PublicClientApplication. Cannot be null. </p>
    name: configFile
    type: <xref href="%40NonNull+final+File?alt=%40NonNull+final+File&text=%40NonNull+final+File" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.IMultipleAccountApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.IMultipleAccountApplicationCreatedListener&text=IPublicClientApplication.IMultipleAccountApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createMultipleAccountPublicClientApplication(Context, File, IMultipleAccountApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the file included in your application resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="com.microsoft.identity.client.IMultipleAccountPublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="IMultipleAccountPublicClientApplication"></xref>. For example, when the device is marked as 'shared' (<xref uid="com.microsoft.identity.client.PublicClientApplication.isSharedDevice()" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#isSharedDevice()"></xref> is set to true) </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static void createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final IMultipleAccountApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final int configFileResourceId)
  name: createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final int configFileResourceId)
  nameWithType: PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final int configFileResourceId)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication. </p>
    name: configFileResourceId
    type: <xref href="%40NonNull+final+int?alt=%40NonNull+final+int&text=%40NonNull+final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is invoked on the main thread. </p>
  returns:
    description: <p>An instance of IMultipleAccountPublicClientApplication. </p>
    type: <xref href="com.microsoft.identity.client.IMultipleAccountPublicClientApplication?alt=com.microsoft.identity.client.IMultipleAccountPublicClientApplication&text=IMultipleAccountPublicClientApplication" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createMultipleAccountPublicClientApplication(Context, int)"></xref> will read the client id and other configuration settings from the file included in your application's resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="com.microsoft.identity.client.IMultipleAccountPublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="IMultipleAccountPublicClientApplication"></xref>. For example, when the device is marked as 'shared' (<xref uid="com.microsoft.identity.client.PublicClientApplication.isSharedDevice()" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#isSharedDevice()"></xref> is set to true) </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static IMultipleAccountPublicClientApplication createMultipleAccountPublicClientApplication(@NonNull final Context context, @NonNull final int configFileResourceId)
  uid: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final int)
- fullName: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  name: createMultipleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication. </p>
    name: configFileResourceId
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.IMultipleAccountApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.IMultipleAccountApplicationCreatedListener&text=IPublicClientApplication.IMultipleAccountApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createMultipleAccountPublicClientApplication(Context, int, IMultipleAccountApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the file included in your application's resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="com.microsoft.identity.client.IMultipleAccountPublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="IMultipleAccountPublicClientApplication"></xref>. For example, when the device is marked as 'shared' (<xref uid="com.microsoft.identity.client.PublicClientApplication.isSharedDevice()" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#isSharedDevice()"></xref> is set to true) </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static void createMultipleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final IMultipleAccountApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final IMultipleAccountApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final ISingleAccountApplicationCreatedListener listener)
  name: createSingleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final ISingleAccountApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final ISingleAccountApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The file containing the JSON configuration for the PublicClientApplication. Cannot be null. </p>
    name: configFile
    type: <xref href="%40NonNull+final+File?alt=%40NonNull+final+File&text=%40NonNull+final+File" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.ISingleAccountApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.ISingleAccountApplicationCreatedListener&text=IPublicClientApplication.ISingleAccountApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createSingleAccountPublicClientApplication(Context, int, ISingleAccountApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the file included in your application resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ISingleAccountApplicationCreatedListener"></xref>. For example, AccountMode in configuration is not set to single. </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL configuration file, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static void createSingleAccountPublicClientApplication(@NonNull final Context context, @NonNull final File configFile, @NonNull final ISingleAccountApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final ISingleAccountApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication( @NonNull final Context context, @Nullable final File configFile)
  name: createSingleAccountPublicClientApplication( @NonNull final Context context, @Nullable final File configFile)
  nameWithType: PublicClientApplication.createSingleAccountPublicClientApplication( @NonNull final Context context, @Nullable final File configFile)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The file containing the JSON configuration for the PublicClientApplication. Cannot be null. </p>
    name: configFile
    type: <xref href="%40Nullable+final+File?alt=%40Nullable+final+File&text=%40Nullable+final+File" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is invoked on the main thread. </p>
  returns:
    description: <p>An instance of ISingleAccountPublicClientApplication. </p>
    type: <xref href="com.microsoft.identity.client.ISingleAccountPublicClientApplication?alt=com.microsoft.identity.client.ISingleAccountPublicClientApplication&text=ISingleAccountPublicClientApplication" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createSingleAccountPublicClientApplication(Context, int)"></xref> will read the client id and other configuration settings from the file included in your applications resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ISingleAccountApplicationCreatedListener"></xref>. For example, AccountMode in configuration is not set to single. </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL configuration file, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static ISingleAccountPublicClientApplication createSingleAccountPublicClientApplication( @NonNull final Context context, @Nullable final File configFile)
  uid: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@Nullable final File)
- fullName: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication( @NonNull final Context context, final int configFileResourceId)
  name: createSingleAccountPublicClientApplication( @NonNull final Context context, final int configFileResourceId)
  nameWithType: PublicClientApplication.createSingleAccountPublicClientApplication( @NonNull final Context context, final int configFileResourceId)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication. </p>
    name: configFileResourceId
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this function is invoked on the main thread. </p>
  returns:
    description: <p>An instance of ISingleAccountPublicClientApplication. </p>
    type: <xref href="com.microsoft.identity.client.ISingleAccountPublicClientApplication?alt=com.microsoft.identity.client.ISingleAccountPublicClientApplication&text=ISingleAccountPublicClientApplication" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createSingleAccountPublicClientApplication(Context, int)"></xref> will read the client id and other configuration settings from the file included in your application's resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ISingleAccountApplicationCreatedListener"></xref>. For example, AccountMode in configuration is not set to single. </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static ISingleAccountPublicClientApplication createSingleAccountPublicClientApplication( @NonNull final Context context, final int configFileResourceId)
  uid: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int)
- fullName: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final ISingleAccountApplicationCreatedListener listener)
  name: createSingleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final ISingleAccountApplicationCreatedListener listener)
  nameWithType: PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final ISingleAccountApplicationCreatedListener listener)
  parameters:
  - description: <p>Application's <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref>. The sdk requires the application context to be passed in <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref>. Cannot be null. </p>
    name: context
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - description: <p>The resource ID of the raw file containing the JSON configuration for the PublicClientApplication. </p>
    name: configFileResourceId
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>a callback to be invoked when the object is successfully created. Cannot be null. </p>
    name: listener
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.ISingleAccountApplicationCreatedListener?alt=com.microsoft.identity.client.IPublicClientApplication.ISingleAccountApplicationCreatedListener&text=IPublicClientApplication.ISingleAccountApplicationCreatedListener" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication#createSingleAccountPublicClientApplication(Context, int, ISingleAccountApplicationCreatedListener)"></xref> will read the client id and other configuration settings from the file included in your application's resources.</p>

    <p>This function will pass back an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MsalClientException"></xref> object if it is unable to return <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ISingleAccountApplicationCreatedListener"></xref>. For example, AccountMode in configuration is not set to single. </p>

    <p>

    Note: The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Context"></xref> should be the application context instead of the running activity's context, which could potentially make the sdk hold a strong reference to the activity, thus preventing correct garbage collection and causing bugs. </p>

    <p>

    For more information on the schema of the MSAL config json, please see <a href="https://developer.android.com/guide/topics/resources/providing-resources">Android app resource overview</a> and <a href="https://github.com/AzureAD/microsoft-authentication-library-for-android/wiki">MSAL Github Wiki</a></p>

    <p></p>
  syntax: public static void createSingleAccountPublicClientApplication(@NonNull final Context context, final int configFileResourceId, @NonNull final ISingleAccountApplicationCreatedListener listener)
  uid: com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final ISingleAccountApplicationCreatedListener)
- fullName: com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  name: generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  nameWithType: PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  overridden: com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme)
  parameters:
  - description: <p>The account for whom signing shall occur. </p>
    name: account
    type: '@NonNull final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - description: <p>The input parameters. </p>
    name: popParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.PoPAuthenticationScheme?alt=com.microsoft.identity.client.PoPAuthenticationScheme&text=PoPAuthenticationScheme" data-throw-if-not-resolved="False"/>'
  returns:
    description: <p>The resulting SHR. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs the provided <xref uid="com.microsoft.identity.client.PoPAuthenticationScheme" data-throw-if-not-resolved="false" data-raw-source="PoPAuthenticationScheme"></xref> parameters into a JWT on behalf of the provided <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref>. </p>

    <p>Important: Use of this API requires setting the minimum_required_broker_protocol_version to "6.0" or higher.</p>

    <p></p>
  syntax: public String generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters)
  uid: com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme)
- fullName: com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  name: generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  nameWithType: PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  overridden: com.microsoft.identity.client.IPublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme,@NonNull final SignedHttpRequestRequestCallback)
  parameters:
  - description: <p>The account for whom signing shall occur. </p>
    name: account
    type: '@NonNull final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - description: <p>The input parameters. </p>
    name: popParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.PoPAuthenticationScheme?alt=com.microsoft.identity.client.PoPAuthenticationScheme&text=PoPAuthenticationScheme" data-throw-if-not-resolved="False"/>'
  - description: <p>The callback object to receive the result (or error). </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.SignedHttpRequestRequestCallback?alt=com.microsoft.identity.client.IPublicClientApplication.SignedHttpRequestRequestCallback&text=IPublicClientApplication.SignedHttpRequestRequestCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Signs the provided <xref uid="com.microsoft.identity.client.PoPAuthenticationScheme" data-throw-if-not-resolved="false" data-raw-source="PoPAuthenticationScheme"></xref> parameters into a JWT on behalf of the provided <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref>. </p>

    <p>Important: Use of this API requires setting the minimum_required_broker_protocol_version to "6.0" or higher.</p>

    <p></p>
  syntax: public void generateSignedHttpRequest(@NonNull final IAccount account, @NonNull final PoPAuthenticationScheme popParameters, @NonNull final SignedHttpRequestRequestCallback callback)
  uid: com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme,@NonNull final SignedHttpRequestRequestCallback)
- fullName: com.microsoft.identity.client.PublicClientApplication.getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  name: getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  nameWithType: PublicClientApplication.getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  parameters:
  - name: authenticationCallback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  - name: tokenParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.TokenParameters?alt=com.microsoft.identity.client.TokenParameters&text=TokenParameters" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="CommandCallback?alt=CommandCallback&text=CommandCallback" data-throw-if-not-resolved="False"/>
  syntax: protected CommandCallback getCommandCallback( @NonNull final SilentAuthenticationCallback authenticationCallback, @NonNull final TokenParameters tokenParameters)
  uid: com.microsoft.identity.client.PublicClientApplication.getCommandCallback(@NonNull final SilentAuthenticationCallback,@NonNull final TokenParameters)
- fullName: com.microsoft.identity.client.PublicClientApplication.getConfiguration()
  name: getConfiguration()
  nameWithType: PublicClientApplication.getConfiguration()
  overridden: com.microsoft.identity.client.IPublicClientApplication.getConfiguration()
  returns:
    description: <p>The PublicClientApplicationConfiguration. </p>
    type: <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the PublicClientConfiguration for this instance of PublicClientApplication.</p>

    <p></p>
  syntax: public PublicClientApplicationConfiguration getConfiguration()
  uid: com.microsoft.identity.client.PublicClientApplication.getConfiguration()
- fullName: com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshToken(@NonNull final String identifier)
  name: getMsaFamilyRefreshToken(@NonNull final String identifier)
  nameWithType: PublicClientApplication.getMsaFamilyRefreshToken(@NonNull final String identifier)
  parameters:
  - name: identifier
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getMsaFamilyRefreshToken(@NonNull final String identifier)
  uid: com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshToken(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  name: getMsaFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  nameWithType: PublicClientApplication.getMsaFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  parameters:
  - name: identifier
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.identity.client.TokenShareResult?alt=com.microsoft.identity.client.TokenShareResult&text=TokenShareResult" data-throw-if-not-resolved="False"/>
  syntax: public TokenShareResult getMsaFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  uid: com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshTokenWithMetadata(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshToken(@NonNull final String identifier)
  name: getOrgIdFamilyRefreshToken(@NonNull final String identifier)
  nameWithType: PublicClientApplication.getOrgIdFamilyRefreshToken(@NonNull final String identifier)
  parameters:
  - name: identifier
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getOrgIdFamilyRefreshToken(@NonNull final String identifier)
  uid: com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshToken(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  name: getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  nameWithType: PublicClientApplication.getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  parameters:
  - name: identifier
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.identity.client.TokenShareResult?alt=com.microsoft.identity.client.TokenShareResult&text=TokenShareResult" data-throw-if-not-resolved="False"/>
  syntax: public TokenShareResult getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String identifier)
  uid: com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
  name: getSdkVersion()
  nameWithType: PublicClientApplication.getSdkVersion()
  returns:
    description: <p>The current version for the sdk. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public static String getSdkVersion()
  uid: com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
- fullName: com.microsoft.identity.client.PublicClientApplication.isSharedDevice()
  name: isSharedDevice()
  nameWithType: PublicClientApplication.isSharedDevice()
  overridden: com.microsoft.identity.client.IPublicClientApplication.isSharedDevice()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns whether the application is being run on a device that is marked as a shared. Only SingleAccountPublicClientApplications may be used on shared devices</p>

    <p></p>
  syntax: public boolean isSharedDevice()
  uid: com.microsoft.identity.client.PublicClientApplication.isSharedDevice()
- fullName: com.microsoft.identity.client.PublicClientApplication.postAuthResult(@NonNull final ILocalAuthenticationResult localAuthenticationResult, @NonNull final TokenParameters requestParameters, @NonNull final SilentAuthenticationCallback authenticationCallback)
  name: postAuthResult(@NonNull final ILocalAuthenticationResult localAuthenticationResult, @NonNull final TokenParameters requestParameters, @NonNull final SilentAuthenticationCallback authenticationCallback)
  nameWithType: PublicClientApplication.postAuthResult(@NonNull final ILocalAuthenticationResult localAuthenticationResult, @NonNull final TokenParameters requestParameters, @NonNull final SilentAuthenticationCallback authenticationCallback)
  parameters:
  - name: localAuthenticationResult
    type: <xref href="%40NonNull+final+ILocalAuthenticationResult?alt=%40NonNull+final+ILocalAuthenticationResult&text=%40NonNull+final+ILocalAuthenticationResult" data-throw-if-not-resolved="False"/>
  - name: requestParameters
    type: '@NonNull final <xref href="com.microsoft.identity.client.TokenParameters?alt=com.microsoft.identity.client.TokenParameters&text=TokenParameters" data-throw-if-not-resolved="False"/>'
  - name: authenticationCallback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: <p>Helper method to post authentication result. </p>
  syntax: protected void postAuthResult(@NonNull final ILocalAuthenticationResult localAuthenticationResult, @NonNull final TokenParameters requestParameters, @NonNull final SilentAuthenticationCallback authenticationCallback)
  uid: com.microsoft.identity.client.PublicClientApplication.postAuthResult(@NonNull final ILocalAuthenticationResult,@NonNull final TokenParameters,@NonNull final SilentAuthenticationCallback)
- fullName: com.microsoft.identity.client.PublicClientApplication.saveMsaFamilyRefreshToken(@NonNull final String refreshToken)
  name: saveMsaFamilyRefreshToken(@NonNull final String refreshToken)
  nameWithType: PublicClientApplication.saveMsaFamilyRefreshToken(@NonNull final String refreshToken)
  parameters:
  - name: refreshToken
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  syntax: public void saveMsaFamilyRefreshToken(@NonNull final String refreshToken)
  uid: com.microsoft.identity.client.PublicClientApplication.saveMsaFamilyRefreshToken(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplication.saveOrgIdFamilyRefreshToken(@NonNull final String ssoStateSerializerBlob)
  name: saveOrgIdFamilyRefreshToken(@NonNull final String ssoStateSerializerBlob)
  nameWithType: PublicClientApplication.saveOrgIdFamilyRefreshToken(@NonNull final String ssoStateSerializerBlob)
  parameters:
  - name: ssoStateSerializerBlob
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  syntax: public void saveOrgIdFamilyRefreshToken(@NonNull final String ssoStateSerializerBlob)
  uid: com.microsoft.identity.client.PublicClientApplication.saveOrgIdFamilyRefreshToken(@NonNull final String)
- fullName: com.microsoft.identity.client.PublicClientApplication.showExpectedMsalRedirectUriInfo(Activity activity)
  name: showExpectedMsalRedirectUriInfo(Activity activity)
  nameWithType: PublicClientApplication.showExpectedMsalRedirectUriInfo(Activity activity)
  parameters:
  - name: activity
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Presents an activity that includes the package name, signature, redirect URI and manifest entry required for your application</p>

    <p></p>
  syntax: public static void showExpectedMsalRedirectUriInfo(Activity activity)
  uid: com.microsoft.identity.client.PublicClientApplication.showExpectedMsalRedirectUriInfo(Activity)
- fullName: com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenParameters(AcquireTokenParameters parameters)
  name: validateAcquireTokenParameters(AcquireTokenParameters parameters)
  nameWithType: PublicClientApplication.validateAcquireTokenParameters(AcquireTokenParameters parameters)
  parameters:
  - name: parameters
    type: <xref href="com.microsoft.identity.client.AcquireTokenParameters?alt=com.microsoft.identity.client.AcquireTokenParameters&text=AcquireTokenParameters" data-throw-if-not-resolved="False"/>
  syntax: protected void validateAcquireTokenParameters(AcquireTokenParameters parameters)
  uid: com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenParameters(AcquireTokenParameters)
- fullName: com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenSilentParameters(AcquireTokenSilentParameters parameters)
  name: validateAcquireTokenSilentParameters(AcquireTokenSilentParameters parameters)
  nameWithType: PublicClientApplication.validateAcquireTokenSilentParameters(AcquireTokenSilentParameters parameters)
  parameters:
  - name: parameters
    type: <xref href="com.microsoft.identity.client.AcquireTokenSilentParameters?alt=com.microsoft.identity.client.AcquireTokenSilentParameters&text=AcquireTokenSilentParameters" data-throw-if-not-resolved="False"/>
  syntax: protected void validateAcquireTokenSilentParameters(AcquireTokenSilentParameters parameters)
  uid: com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenSilentParameters(AcquireTokenSilentParameters)
nameWithType: PublicClientApplication
syntax: public class PublicClientApplication implements IPublicClientApplication,ITokenShare
type: class
uid: com.microsoft.identity.client.PublicClientApplication
fullName: com.microsoft.identity.client.PublicClientApplication
name: PublicClientApplication
package: com.microsoft.identity.client
summary: >-
  <p>This is the entry point for developer to create public native applications and make API calls to acquire tokens. </p>

  <p>

    <b>Client ID:</b> The clientID of your application is a unique identifier which can be obtained from the app registration portal.</p>

  <p>

    <b>AuthorityMetadata:</b> A URL indicating a directory that MSAL can use to obtain tokens. In Azure AD it is of the form <a href="https://">https://</a>&lt;[nstance]/[tenant], where [instance] is the directory host (e.g. <a href="https://login.microsoftonline.com">https://login.microsoftonline.com</a>) and [tenant] is an identifier within the directory itself (e.g. a domain associated to the tenant, such as contoso.onmicrosoft.com, or the GUID representing the TenantID property of the directory) </p>

  <p>For B2C, it is of the form <a href="https://">https://</a>[instance]/tfp/[tenant]/[policy] where instance and tenant are same as Azure AD, and [policy] is a string like signup</p>

  <p>MSAL <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref> provides three constructors allowing the client id to be set either via AndroidManifest.xml metadata or using constructor parameters. Similarly, if developer chooses not to use the default authority <a href="https://login.microsoftonline.com,">https://login.microsoftonline.com,</a> an alternate can also be configured using the manifest, constructor parameters, or in acquire token calls. </p>

  <p>Redirect is auto-generated in the library in the format of msal&lt;client-id&gt;://auth, and it cannot be overridden. </p>

  <p>Developer <b>MUST</b> have <xref uid="com.microsoft.identity.client.BrowserTabActivity" data-throw-if-not-resolved="false" data-raw-source="BrowserTabActivity"></xref> declared in their manifest, which must have the correct intent-filter configured. If the wrong scheme and host is provided, the sdk will fail the <xref uid="com.microsoft.identity.client.PublicClientApplication" data-throw-if-not-resolved="false" data-raw-source="PublicClientApplication"></xref> creation. </p>

  <p>Expected format will be: <pre>

  &lt;activity

      android:name="com.microsoft.identity.client.BrowserTabActivity"&gt;

      &lt;intent-filter&gt;

          &lt;action android:name="android.intent.action.VIEW" /&gt;

          &lt;category android:name="android.intent.category.DEFAULT" /&gt;

          &lt;category android:name="android.intent.category.BROWSABLE" /&gt;

          &lt;data android:scheme="msal&amp;lt;AppClientId&amp;gt;"

               android:host="auth" /&gt;

      &lt;/intent-filter&gt;

  &lt;/activity&gt;

  </pre></p>

  <p>Other Terminology:</p>

  <p>

    <b>Scopes:</b>Permissions that the developers wants included in the access token received . Not all scopes are guaranteed to be included in the access token returned. </p>

  <p>

    <b>Login Hint:</b> Usually an email, to pass to the service at the beginning of the interactive authentication flow. </p>

  <p>

    <b>Extra Scopes to Consent:</b> Permissions you want the user to consent to in the same authentication flow, but won't be included in the returned access token. </p>
metadata: {}
