### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Iterable&lt;Map.Entry&lt;StorageRequest&lt;C, P, R&gt;, P&gt;&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.BatchOperation<C extends ServiceClient, P, R>.addSubOperation(final StorageRequest<C, P, R> request, final P parent)
  name: addSubOperation(final StorageRequest<C, P, R> request, final P parent)
  nameWithType: BatchOperation<C,P,R>.addSubOperation(final StorageRequest<C, P, R> request, final P parent)
  parameters:
  - description: <p>The request to add.</p>
    name: request
    type: final <xref href="com.microsoft.azure.storage.core.StorageRequest?alt=com.microsoft.azure.storage.core.StorageRequest&text=StorageRequest" data-throw-if-not-resolved="False"/>&lt;C, P, R&gt;
  - name: parent
    type: <xref href="final+P?alt=final+P&text=final+P" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>Throws if this batch is already at max subOperations size. See <xref uid="com.microsoft.azure.storage.Constants.BATCH_MAX_REQUESTS" data-throw-if-not-resolved="false" data-raw-source="Constants#BATCH_MAX_REQUESTS"></xref>. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds an operation to the subOperations collection.</p>

    <p></p>
  syntax: protected final void addSubOperation(final StorageRequest<C, P, R> request, final P parent)
  uid: com.microsoft.azure.storage.BatchOperation.addSubOperation(final StorageRequest<C, P, R>,final P)
- fullName: com.microsoft.azure.storage.BatchOperation<C extends ServiceClient, P, R>.batchImpl(C client, final RequestOptions requestOptions)
  name: batchImpl(C client, final RequestOptions requestOptions)
  nameWithType: BatchOperation<C,P,R>.batchImpl(C client, final RequestOptions requestOptions)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.ServiceClient" data-throw-if-not-resolved="false" data-raw-source="ServiceClient"></xref> making this request. </p>
    name: client
    type: <xref href="C?alt=C&text=C" data-throw-if-not-resolved="False"/>
  - description: <p>Request options for this request.</p>
    name: requestOptions
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The built request. </p>
    type: <xref href="com.microsoft.azure.storage.core.StorageRequest?alt=com.microsoft.azure.storage.core.StorageRequest&text=StorageRequest" data-throw-if-not-resolved="False"/>&lt;C, <xref href="com.microsoft.azure.storage.BatchOperation?alt=com.microsoft.azure.storage.BatchOperation&text=BatchOperation" data-throw-if-not-resolved="False"/>&lt;C, P, R&gt;, Map&lt;P, R&gt;&gt;
  summary: >-
    <p>Creates a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="StorageRequest"></xref> for a batch operation based on this object's collected requests to make.</p>

    <p></p>
  syntax: protected StorageRequest<C, BatchOperation<C, P, R>, Map<P, R>> batchImpl(C client, final RequestOptions requestOptions)
  uid: com.microsoft.azure.storage.BatchOperation.batchImpl(C,final RequestOptions)
- fullName: com.microsoft.azure.storage.BatchOperation<C extends ServiceClient, P, R>.convertResponse(BatchSubResponse response)
  name: convertResponse(BatchSubResponse response)
  nameWithType: BatchOperation<C,P,R>.convertResponse(BatchSubResponse response)
  parameters:
  - description: <p>Object model of the HTTP response.</p>
    name: response
    type: <xref href="com.microsoft.azure.storage.BatchSubResponse?alt=com.microsoft.azure.storage.BatchSubResponse&text=BatchSubResponse" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Parsed response. </p>
    type: <xref href="abstract+R?alt=abstract+R&text=abstract+R" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts a batch sub-response from it's basic HTTP form to the response type of the operation being batched.</p>

    <p></p>
  syntax: protected abstract R convertResponse(BatchSubResponse response)
  uid: com.microsoft.azure.storage.BatchOperation.convertResponse(BatchSubResponse)
- fullName: com.microsoft.azure.storage.BatchOperation<C extends ServiceClient, P, R>.getBatchId()
  name: getBatchId()
  nameWithType: BatchOperation<C,P,R>.getBatchId()
  returns:
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public UUID getBatchId()
  uid: com.microsoft.azure.storage.BatchOperation.getBatchId()
- fullName: com.microsoft.azure.storage.BatchOperation<C extends ServiceClient, P, R>.iterator()
  name: iterator()
  nameWithType: BatchOperation<C,P,R>.iterator()
  returns:
    type: Iterator&lt;Map.Entry&lt;<xref href="com.microsoft.azure.storage.core.StorageRequest?alt=com.microsoft.azure.storage.core.StorageRequest&text=StorageRequest" data-throw-if-not-resolved="False"/>&lt;C, P, R&gt;, P&gt;&gt;
  syntax: public Iterator<Map.Entry<StorageRequest<C, P, R>, P>> iterator()
  uid: com.microsoft.azure.storage.BatchOperation.iterator()
nameWithType: BatchOperation<C,P,R>
syntax: public class BatchOperation<C extends ServiceClient,P,R>
type: class
typeParameters:
- description: <p>The ServiceClient type of the Storage service this batch targets. </p>
  name: C
- description: <p>The type of the parent object making the REST call. </p>
  name: P
- description: <p>The return type of the individual requests on the batch. </p>
  name: R
uid: com.microsoft.azure.storage.BatchOperation
fullName: com.microsoft.azure.storage.BatchOperation<C,P,R>
name: BatchOperation<C,P,R>
package: com.microsoft.azure.storage
summary: >-
  <p>A collection of operations to be sent as a batch request. Maintains the order of requests as added to the batch.</p>

  <p></p>
metadata: {}
