### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.RegistriesImpl(final ContainerRegistryManager manager, final StorageManager storageManager)
  name: RegistriesImpl(final ContainerRegistryManager manager, final StorageManager storageManager)
  nameWithType: RegistriesImpl.RegistriesImpl(final ContainerRegistryManager manager, final StorageManager storageManager)
  parameters:
  - name: manager
    type: final <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManager?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManager&text=ContainerRegistryManager" data-throw-if-not-resolved="False"/>
  - name: storageManager
    type: <xref href="final+StorageManager?alt=final+StorageManager&text=final+StorageManager" data-throw-if-not-resolved="False"/>
  syntax: protected RegistriesImpl(final ContainerRegistryManager manager, final StorageManager storageManager)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.RegistriesImpl(final ContainerRegistryManager,final StorageManager)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.arm.collection.implementation.GroupableResourcesImpl&lt;Registry, RegistryImpl, RegistryInner, RegistriesInner, ContainerRegistryManager&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.checkNameAvailability(String name)
  name: checkNameAvailability(String name)
  nameWithType: RegistriesImpl.checkNameAvailability(String name)
  overridden: com.microsoft.azure.management.containerregistry.Registries.checkNameAvailability(String)
  parameters:
  - description: <p>the container registry name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>whether the name is available and other info if not </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks if the specified container registry name is valid and available.</p>

    <p></p>
  syntax: public CheckNameAvailabilityResult checkNameAvailability(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.checkNameAvailability(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.checkNameAvailabilityAsync(String name)
  name: checkNameAvailabilityAsync(String name)
  nameWithType: RegistriesImpl.checkNameAvailabilityAsync(String name)
  overridden: com.microsoft.azure.management.containerregistry.Registries.checkNameAvailabilityAsync(String)
  parameters:
  - description: <p>the container registry name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning whether the name is available or other info if not </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.containerregistry.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks if container registry name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.checkNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.define(String name)
  name: define(String name)
  nameWithType: RegistriesImpl.define(String name)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
  parameters:
  - description: <p>the name of the new resource </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the first stage of the new resource definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins a definition for a new resource. </p>

    <p>This is the beginning of the builder pattern used to create top level resources in Azure. The final method completing the definition and starting the actual resource creation process in Azure is <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()" data-throw-if-not-resolved="false" data-raw-source="Creatable#create()"></xref>. </p>

    <p>Note that the <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()" data-throw-if-not-resolved="false" data-raw-source="Creatable#create()"></xref> method is only available at the stage of the resource definition that has the minimum set of input parameters specified. If you do not see <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()" data-throw-if-not-resolved="false" data-raw-source="Creatable#create()"></xref> among the available methods, it means you have not yet specified all the required input settings. Input settings generally begin with the word "with", for example:  and return the next stage of the resource definition, as an interface in the "fluent interface" style. </p>
  syntax: public RegistryImpl define(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.define(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.deleteInnerAsync(String groupName, String name)
  name: deleteInnerAsync(String groupName, String name)
  nameWithType: RegistriesImpl.deleteInnerAsync(String groupName, String name)
  parameters:
  - name: groupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  syntax: protected Completable deleteInnerAsync(String groupName, String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.deleteInnerAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getBuildSourceUploadUrl(String rgName, String acrName)
  name: getBuildSourceUploadUrl(String rgName, String acrName)
  nameWithType: RegistriesImpl.getBuildSourceUploadUrl(String rgName, String acrName)
  overridden: com.microsoft.azure.management.containerregistry.Registries.getBuildSourceUploadUrl(String,String)
  parameters:
  - description: <p>the name of the resource group. </p>
    name: rgName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the container. </p>
    name: acrName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the URL of the build source upload. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.SourceUploadDefinition?alt=com.microsoft.azure.management.containerregistry.SourceUploadDefinition&text=SourceUploadDefinition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The function that gets the URL of the build source upload.</p>

    <p></p>
  syntax: public SourceUploadDefinition getBuildSourceUploadUrl(String rgName, String acrName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getBuildSourceUploadUrl(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getBuildSourceUploadUrlAsync(String rgName, String acrName)
  name: getBuildSourceUploadUrlAsync(String rgName, String acrName)
  nameWithType: RegistriesImpl.getBuildSourceUploadUrlAsync(String rgName, String acrName)
  overridden: com.microsoft.azure.management.containerregistry.Registries.getBuildSourceUploadUrlAsync(String,String)
  parameters:
  - description: <p>the name of the resource group. </p>
    name: rgName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the container. </p>
    name: acrName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the URL of the build source upload. </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.SourceUploadDefinition?alt=com.microsoft.azure.management.containerregistry.SourceUploadDefinition&text=SourceUploadDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>The function that gets the URL of the build source upload ashnchronously.</p>

    <p></p>
  syntax: public Observable<SourceUploadDefinition> getBuildSourceUploadUrlAsync(String rgName, String acrName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getBuildSourceUploadUrlAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getCredentials(String resourceGroupName, String registryName)
  name: getCredentials(String resourceGroupName, String registryName)
  nameWithType: RegistriesImpl.getCredentials(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.containerregistry.Registries.getCredentials(String,String)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the container registry's login credentials </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public RegistryCredentials getCredentials(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getCredentials(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getCredentialsAsync(String resourceGroupName, String registryName)
  name: getCredentialsAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesImpl.getCredentialsAsync(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.containerregistry.Registries.getCredentialsAsync(String,String)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the container registry's login credentials </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryCredentials> getCredentialsAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getCredentialsAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getInnerAsync(String resourceGroupName, String name)
  name: getInnerAsync(String resourceGroupName, String name)
  nameWithType: RegistriesImpl.getInnerAsync(String resourceGroupName, String name)
  parameters:
  - name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  syntax: protected Observable<RegistryInner> getInnerAsync(String resourceGroupName, String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.getInnerAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.list()
  name: list()
  nameWithType: RegistriesImpl.list()
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
  returns:
    description: <p>list of resources </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.Registry?alt=com.microsoft.azure.management.containerregistry.Registry&text=Registry" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the resources of the specified type in the currently selected subscription.</p>

    <p></p>
  syntax: public PagedList<Registry> list()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.list()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listAsync()
  name: listAsync()
  nameWithType: RegistriesImpl.listAsync()
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
  returns:
    description: <p>list of resources </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.Registry?alt=com.microsoft.azure.management.containerregistry.Registry&text=Registry" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the resources of the specified type in the currently selected subscription.</p>

    <p></p>
  syntax: public Observable<Registry> listAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listByResourceGroup(String groupName)
  name: listByResourceGroup(String groupName)
  nameWithType: RegistriesImpl.listByResourceGroup(String groupName)
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
  parameters:
  - description: <p>the name of the resource group to list the resources from </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of resources </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.Registry?alt=com.microsoft.azure.management.containerregistry.Registry&text=Registry" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists resources of the specified type in the specified resource group.</p>

    <p></p>
  syntax: public PagedList<Registry> listByResourceGroup(String groupName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listByResourceGroup(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listByResourceGroupAsync(String resourceGroupName)
  name: listByResourceGroupAsync(String resourceGroupName)
  nameWithType: RegistriesImpl.listByResourceGroupAsync(String resourceGroupName)
  overridden: com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
  parameters:
  - description: <p>the name of the resource group to list the resources from </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of resources </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.Registry?alt=com.microsoft.azure.management.containerregistry.Registry&text=Registry" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists resources of the specified type in the specified resource group.</p>

    <p></p>
  syntax: public Observable<Registry> listByResourceGroupAsync(String resourceGroupName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listByResourceGroupAsync(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listQuotaUsages(String resourceGroupName, String registryName)
  name: listQuotaUsages(String resourceGroupName, String registryName)
  nameWithType: RegistriesImpl.listQuotaUsages(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.containerregistry.Registries.listQuotaUsages(String,String)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of container registry's quota usages </p>
    type: Collection&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryUsage?alt=com.microsoft.azure.management.containerregistry.RegistryUsage&text=RegistryUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Collection<RegistryUsage> listQuotaUsages(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listQuotaUsages(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listQuotaUsagesAsync(String resourceGroupName, String registryName)
  name: listQuotaUsagesAsync(String resourceGroupName, String registryName)
  nameWithType: RegistriesImpl.listQuotaUsagesAsync(String resourceGroupName, String registryName)
  overridden: com.microsoft.azure.management.containerregistry.Registries.listQuotaUsagesAsync(String,String)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the list of container registry's quota usages </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryUsage?alt=com.microsoft.azure.management.containerregistry.RegistryUsage&text=RegistryUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryUsage> listQuotaUsagesAsync(String resourceGroupName, String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.listQuotaUsagesAsync(String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  name: regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  nameWithType: RegistriesImpl.regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  overridden: com.microsoft.azure.management.containerregistry.Registries.regenerateCredential(String,String,AccessKeyType)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the admin user access key name to regenerate the value for </p>
    name: accessKeyType
    type: <xref href="com.microsoft.azure.management.containerregistry.AccessKeyType?alt=com.microsoft.azure.management.containerregistry.AccessKeyType&text=AccessKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the container registry's login credentials </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates the value for one of the admin user access key for the specified container registry.</p>

    <p></p>
  syntax: public RegistryCredentials regenerateCredential(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.regenerateCredential(String,String,AccessKeyType)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  name: regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  nameWithType: RegistriesImpl.regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  overridden: com.microsoft.azure.management.containerregistry.Registries.regenerateCredentialAsync(String,String,AccessKeyType)
  parameters:
  - description: <p>the resource group name </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the registry name </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the admin user access key name to regenerate the value for </p>
    name: accessKeyType
    type: <xref href="com.microsoft.azure.management.containerregistry.AccessKeyType?alt=com.microsoft.azure.management.containerregistry.AccessKeyType&text=AccessKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, returning the container registry's login credentials </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates the value for one of the admin user access key for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryCredentials> regenerateCredentialAsync(String resourceGroupName, String registryName, AccessKeyType accessKeyType)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.regenerateCredentialAsync(String,String,AccessKeyType)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.webhooks()
  name: webhooks()
  nameWithType: RegistriesImpl.webhooks()
  overridden: com.microsoft.azure.management.containerregistry.Registries.webhooks()
  returns:
    description: <p>returns entry point to manage container registry webhooks. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.Registries.WebhooksClient?alt=com.microsoft.azure.management.containerregistry.Registries.WebhooksClient&text=Registries.WebhooksClient" data-throw-if-not-resolved="False"/>
  syntax: public WebhooksClient webhooks()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.webhooks()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.wrapModel(RegistryInner containerServiceInner)
  name: wrapModel(RegistryInner containerServiceInner)
  nameWithType: RegistriesImpl.wrapModel(RegistryInner containerServiceInner)
  parameters:
  - name: containerServiceInner
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  syntax: protected RegistryImpl wrapModel(RegistryInner containerServiceInner)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.wrapModel(RegistryInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.wrapModel(String name)
  name: wrapModel(String name)
  nameWithType: RegistriesImpl.wrapModel(String name)
  parameters:
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  syntax: protected RegistryImpl wrapModel(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl.wrapModel(String)
nameWithType: RegistriesImpl
syntax: public class RegistriesImpl implements Registries
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl
fullName: com.microsoft.azure.management.containerregistry.implementation.RegistriesImpl
name: RegistriesImpl
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>Implementation for Registries. </p>
metadata: {}
