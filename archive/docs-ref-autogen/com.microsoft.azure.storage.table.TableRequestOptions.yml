### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions()
  name: TableRequestOptions()
  nameWithType: TableRequestOptions.TableRequestOptions()
  summary: <p>Creates an instance of the </p>
  syntax: public TableRequestOptions()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions(final TableRequestOptions other)
  name: TableRequestOptions(final TableRequestOptions other)
  nameWithType: TableRequestOptions.TableRequestOptions(final TableRequestOptions other)
  parameters:
  - description: <p>A <code>TableRequestOptions</code> object that represents the request options to copy. </p>
    name: other
    type: final <xref href="com.microsoft.azure.storage.table.TableRequestOptions?alt=com.microsoft.azure.storage.table.TableRequestOptions&text=TableRequestOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class by copying values from another  instance.</p>

    <p></p>
  syntax: public TableRequestOptions(final TableRequestOptions other)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.TableRequestOptions(final TableRequestOptions)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.storage.RequestOptions.applyBaseDefaultsInternal(final RequestOptions)
- com.microsoft.azure.storage.RequestOptions.disableHttpsSocketKeepAlive()
- com.microsoft.azure.storage.RequestOptions.getLocationMode()
- com.microsoft.azure.storage.RequestOptions.getMaximumExecutionTimeInMs()
- com.microsoft.azure.storage.RequestOptions.getOperationExpiryTimeInMs()
- com.microsoft.azure.storage.RequestOptions.getRetryPolicyFactory()
- com.microsoft.azure.storage.RequestOptions.getTimeoutIntervalInMs()
- com.microsoft.azure.storage.RequestOptions.populateRequestOptions(RequestOptions,final RequestOptions,final boolean)
- com.microsoft.azure.storage.RequestOptions.RequestOptions()
- com.microsoft.azure.storage.RequestOptions.RequestOptions(final RequestOptions)
- com.microsoft.azure.storage.RequestOptions.requireEncryption()
- com.microsoft.azure.storage.RequestOptions.setDisableHttpsSocketKeepAlive(Boolean)
- com.microsoft.azure.storage.RequestOptions.setLocationMode(final LocationMode)
- com.microsoft.azure.storage.RequestOptions.setMaximumExecutionTimeInMs(Integer)
- com.microsoft.azure.storage.RequestOptions.setRequireEncryption(Boolean)
- com.microsoft.azure.storage.RequestOptions.setRetryPolicyFactory(final RetryPolicyFactory)
- com.microsoft.azure.storage.RequestOptions.setTimeoutIntervalInMs(final Integer)
methods:
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults(final TableRequestOptions modifiedOptions)
  name: applyDefaults(final TableRequestOptions modifiedOptions)
  nameWithType: TableRequestOptions.applyDefaults(final TableRequestOptions modifiedOptions)
  parameters:
  - description: <p>The options to apply defaults to. </p>
    name: modifiedOptions
    type: final <xref href="com.microsoft.azure.storage.table.TableRequestOptions?alt=com.microsoft.azure.storage.table.TableRequestOptions&text=TableRequestOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Applies defaults to the options passed in.</p>

    <p></p>
  syntax: protected static void applyDefaults(final TableRequestOptions modifiedOptions)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.applyDefaults(final TableRequestOptions)
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()
  name: assertNoEncryptionPolicyOrStrictMode()
  nameWithType: TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()
  summary: <p>Assert that if validation is on, an encryption policy is not specified. </p>
  syntax: protected void assertNoEncryptionPolicyOrStrictMode()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.assertNoEncryptionPolicyOrStrictMode()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired()
  name: assertPolicyIfRequired()
  nameWithType: TableRequestOptions.assertPolicyIfRequired()
  summary: <p>Assert that if strict mode is on, an encryption policy is specified. </p>
  syntax: protected void assertPolicyIfRequired()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.assertPolicyIfRequired()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption()
  name: clearEncryption()
  nameWithType: TableRequestOptions.clearEncryption()
  summary: <p>Clears the encryption properties on this TableRequestOptions object. Useful for operations for which encryption does not make sense, such as CreateTable. </p>
  syntax: protected void clearEncryption()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.clearEncryption()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility()
  name: getDateBackwardCompatibility()
  nameWithType: TableRequestOptions.getDateBackwardCompatibility()
  returns:
    description: >-
      <p>

        <code>true</code> if <code>dateBackwardCompatibility</code> is enabled; otherwise, <code>false</code></p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets whether the client should look to correct Date values stored on a <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> that may have been written using versions of this library prior to 2.0.0, see <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(Boolean)" data-throw-if-not-resolved="false" data-raw-source="setDateBackwardCompatibility(Boolean)"></xref>. </p>

    <p>See <a href="http://go.microsoft.com/fwlink/?LinkId=523753">here</a> for more details.</p>

    <p></p>
  syntax: public Boolean getDateBackwardCompatibility()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.getDateBackwardCompatibility()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy()
  name: getEncryptionPolicy()
  nameWithType: TableRequestOptions.getEncryptionPolicy()
  returns:
    description: <p>An <xref uid="com.microsoft.azure.storage.table.TableEncryptionPolicy" data-throw-if-not-resolved="false" data-raw-source="TableEncryptionPolicy"></xref> object that represents the current encryption policy. </p>
    type: <xref href="com.microsoft.azure.storage.table.TableEncryptionPolicy?alt=com.microsoft.azure.storage.table.TableEncryptionPolicy&text=TableEncryptionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the encryption policy to use for this request. For more information about the encryption policy defaults, see <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(TableEncryptionPolicy)" data-throw-if-not-resolved="false" data-raw-source="setEncryptionPolicy(TableEncryptionPolicy)"></xref>.</p>

    <p></p>
  syntax: public TableEncryptionPolicy getEncryptionPolicy()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionPolicy()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver()
  name: getEncryptionResolver()
  nameWithType: TableRequestOptions.getEncryptionResolver()
  returns:
    description: <p>The current <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref> object. </p>
    type: <xref href="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver?alt=com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver&text=TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the interface that contains a function which is used to get the value indicating whether a property should be encrypted or not given the partition key, row key, and the property name. For more information about the <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="false" data-raw-source="EncryptionResolver"></xref> defaults, see <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver(EncryptionResolver)" data-throw-if-not-resolved="false" data-raw-source="setEncryptionResolver(EncryptionResolver)"></xref>.</p>

    <p></p>
  syntax: public EncryptionResolver getEncryptionResolver()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.getEncryptionResolver()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver()
  name: getPropertyResolver()
  nameWithType: TableRequestOptions.getPropertyResolver()
  returns:
    description: <p>The current <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref> object. </p>
    type: <xref href="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver?alt=com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver&text=TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the interface that contains a function which is used to get the <xref uid="com.microsoft.azure.storage.table.EdmType" data-throw-if-not-resolved="false" data-raw-source="EdmType"></xref> for an entity property given the partition key, row, key, and the property name. For more information about the <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref> defaults, see <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver(PropertyResolver)" data-throw-if-not-resolved="false" data-raw-source="setPropertyResolver(PropertyResolver)"></xref>.</p>

    <p></p>
  syntax: public PropertyResolver getPropertyResolver()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.getPropertyResolver()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat()
  name: getTablePayloadFormat()
  nameWithType: TableRequestOptions.getTablePayloadFormat()
  returns:
    description: <p>The <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> used by this <xref uid="" data-throw-if-not-resolved="false" data-raw-source="TableRequest"></xref>. </p>
    type: <xref href="com.microsoft.azure.storage.table.TablePayloadFormat?alt=com.microsoft.azure.storage.table.TablePayloadFormat&text=TablePayloadFormat" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> to be used. For more information about <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> defaults, see <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(TablePayloadFormat)" data-throw-if-not-resolved="false" data-raw-source="setTablePayloadFormat(TablePayloadFormat)"></xref>.</p>

    <p></p>
  syntax: public TablePayloadFormat getTablePayloadFormat()
  uid: com.microsoft.azure.storage.table.TableRequestOptions.getTablePayloadFormat()
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults(final TableRequestOptions options, final CloudTableClient client)
  name: populateAndApplyDefaults(final TableRequestOptions options, final CloudTableClient client)
  nameWithType: TableRequestOptions.populateAndApplyDefaults(final TableRequestOptions options, final CloudTableClient client)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.table.TableRequestOptions" data-throw-if-not-resolved="false" data-raw-source="TableRequestOptions"></xref> object which represents the input options to copy from when applying defaults. </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.table.TableRequestOptions?alt=com.microsoft.azure.storage.table.TableRequestOptions&text=TableRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.table.CloudTableClient" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient"></xref> object from which to copy the timeout and retry policy.</p>
    name: client
    type: final <xref href="com.microsoft.azure.storage.table.CloudTableClient?alt=com.microsoft.azure.storage.table.CloudTableClient&text=CloudTableClient" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.table.TableRequestOptions" data-throw-if-not-resolved="false" data-raw-source="TableRequestOptions"></xref> object. </p>
    type: final <xref href="com.microsoft.azure.storage.table.TableRequestOptions?alt=com.microsoft.azure.storage.table.TableRequestOptions&text=TableRequestOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes the values for this  instance, if they are currently , using the values specified in the <xref uid="com.microsoft.azure.storage.table.CloudTableClient" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient"></xref> parameter.</p>

    <p></p>
  syntax: protected static final TableRequestOptions populateAndApplyDefaults(final TableRequestOptions options, final CloudTableClient client)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.populateAndApplyDefaults(final TableRequestOptions,final CloudTableClient)
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(Boolean dateBackwardCompatibility)
  name: setDateBackwardCompatibility(Boolean dateBackwardCompatibility)
  nameWithType: TableRequestOptions.setDateBackwardCompatibility(Boolean dateBackwardCompatibility)
  parameters:
  - description: >-
      <p>

        <code>true</code> to enable <code>dateBackwardCompatibility</code>; otherwise, <code>false</code></p>
    name: dateBackwardCompatibility
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets whether the client should look to correct Date values stored on a <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false" data-raw-source="TableEntity"></xref> that may have been written using versions of this library prior to 2.0.0. </p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="dateBackwardCompatibility"></xref> is by default , indicating a post 2.0.0 version or mixed- platform usage. You can change the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="dateBackwardCompatibility"></xref> on this request by setting this property. You can also change the value on the <xref uid="com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient#getDefaultRequestOptions()"></xref> object so that all subsequent requests made via the service client will use that <xref uid="" data-throw-if-not-resolved="false" data-raw-source="dateBackwardCompatibility"></xref>. </p>

    <p>See <a href="http://go.microsoft.com/fwlink/?LinkId=523753">here</a> for more details.</p>

    <p></p>
  syntax: public void setDateBackwardCompatibility(Boolean dateBackwardCompatibility)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.setDateBackwardCompatibility(Boolean)
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)
  name: setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)
  nameWithType: TableRequestOptions.setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)
  parameters:
  - description: <p>the TableEncryptionPolicy object to use when making service requests. </p>
    name: encryptionPolicy
    type: <xref href="com.microsoft.azure.storage.table.TableEncryptionPolicy?alt=com.microsoft.azure.storage.table.TableEncryptionPolicy&text=TableEncryptionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the TableEncryptionPolicy object to use for this request. </p>

    <p>The default TableEncryptionPolicy is set in the client and is by default null, indicating no encryption. You can change the TableEncryptionPolicy on this request by setting this property. You can also change the value on the <xref uid="com.microsoft.azure.storage.ServiceClient.getDefaultRequestOptions()" data-throw-if-not-resolved="false" data-raw-source="ServiceClient#getDefaultRequestOptions()"></xref> object so that all subsequent requests made via the service client will use that TableEncryptionPolicy.</p>

    <p></p>
  syntax: public void setEncryptionPolicy(TableEncryptionPolicy encryptionPolicy)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionPolicy(TableEncryptionPolicy)
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver(EncryptionResolver encryptionResolver)
  name: setEncryptionResolver(EncryptionResolver encryptionResolver)
  nameWithType: TableRequestOptions.setEncryptionResolver(EncryptionResolver encryptionResolver)
  parameters:
  - description: <p>Specifies the <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="false" data-raw-source="EncryptionResolver"></xref> to set. </p>
    name: encryptionResolver
    type: <xref href="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver?alt=com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver&text=TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the interface that contains a function which is used to get the value indicating whether a property should be encrypted or not given the partition key, row key, and the property name. A <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="false" data-raw-source="EncryptionResolver"></xref> is required if a <xref uid="com.microsoft.azure.storage.table.TableEncryptionPolicy" data-throw-if-not-resolved="false" data-raw-source="TableEncryptionPolicy"></xref> is specified. </p>

    <p>You can change the <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="false" data-raw-source="EncryptionResolver"></xref> on this request by setting this property. You can also change the value on the <xref uid="com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient#getDefaultRequestOptions()"></xref> object so that all subsequent requests made via the service client will use that <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.EncryptionResolver" data-throw-if-not-resolved="false" data-raw-source="EncryptionResolver"></xref>.</p>

    <p></p>
  syntax: public void setEncryptionResolver(EncryptionResolver encryptionResolver)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.setEncryptionResolver(EncryptionResolver)
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver(PropertyResolver propertyResolver)
  name: setPropertyResolver(PropertyResolver propertyResolver)
  nameWithType: TableRequestOptions.setPropertyResolver(PropertyResolver propertyResolver)
  parameters:
  - description: <p>Specifies the <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref> to set. </p>
    name: propertyResolver
    type: <xref href="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver?alt=com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver&text=TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the interface that contains a function which is used to get the <xref uid="com.microsoft.azure.storage.table.EdmType" data-throw-if-not-resolved="false" data-raw-source="EdmType"></xref> for an entity property given the partition key, row, key, and the property name. </p>

    <p>The default <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref> is set in the client and is by default null, indicating not to use a property resolver. You can change the <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref> on this request by setting this property. You can also change the value on the <xref uid="com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient#getDefaultRequestOptions()"></xref> object so that all subsequent requests made via the service client will use that <xref uid="com.microsoft.azure.storage.table.TableRequestOptions.PropertyResolver" data-throw-if-not-resolved="false" data-raw-source="PropertyResolver"></xref>.</p>

    <p></p>
  syntax: public void setPropertyResolver(PropertyResolver propertyResolver)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.setPropertyResolver(PropertyResolver)
- fullName: com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(TablePayloadFormat payloadFormat)
  name: setTablePayloadFormat(TablePayloadFormat payloadFormat)
  nameWithType: TableRequestOptions.setTablePayloadFormat(TablePayloadFormat payloadFormat)
  parameters:
  - description: <p>Specifies the <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> to set. </p>
    name: payloadFormat
    type: <xref href="com.microsoft.azure.storage.table.TablePayloadFormat?alt=com.microsoft.azure.storage.table.TablePayloadFormat&text=TablePayloadFormat" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> to be used. </p>

    <p>The default <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> is set in the client and is by default <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat.Json" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat#Json"></xref>. You can change the <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref> on this request by setting this property. You can also change the value on the <xref uid="com.microsoft.azure.storage.table.CloudTableClient.getDefaultRequestOptions()" data-throw-if-not-resolved="false" data-raw-source="CloudTableClient#getDefaultRequestOptions()"></xref> object so that all subsequent requests made via the service client will use that <xref uid="com.microsoft.azure.storage.table.TablePayloadFormat" data-throw-if-not-resolved="false" data-raw-source="TablePayloadFormat"></xref>.</p>

    <p></p>
  syntax: public void setTablePayloadFormat(TablePayloadFormat payloadFormat)
  uid: com.microsoft.azure.storage.table.TableRequestOptions.setTablePayloadFormat(TablePayloadFormat)
nameWithType: TableRequestOptions
syntax: public class TableRequestOptions extends RequestOptions
type: class
uid: com.microsoft.azure.storage.table.TableRequestOptions
fullName: com.microsoft.azure.storage.table.TableRequestOptions
name: TableRequestOptions
package: com.microsoft.azure.storage.table
summary: <p>Represents a set of timeout, payload format, and retry policy options that may be specified for a table operation request. </p>
metadata: {}
