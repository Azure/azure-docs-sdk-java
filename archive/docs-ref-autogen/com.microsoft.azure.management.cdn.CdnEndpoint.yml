### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasParent.parent()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
methods:
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.contentTypesToCompress()
  name: contentTypesToCompress()
  nameWithType: CdnEndpoint.contentTypesToCompress()
  returns:
    description: <p>content types to be compressed </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Set<String> contentTypesToCompress()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.contentTypesToCompress()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.customDomains()
  name: customDomains()
  nameWithType: CdnEndpoint.customDomains()
  returns:
    description: <p>custom domains associated with this endpoint </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Set<String> customDomains()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.customDomains()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.geoFilters()
  name: geoFilters()
  nameWithType: CdnEndpoint.geoFilters()
  returns:
    description: <p>list of Geo filters </p>
    type: List&lt;<xref href="com.microsoft.azure.management.cdn.GeoFilter?alt=com.microsoft.azure.management.cdn.GeoFilter&text=GeoFilter" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<GeoFilter> geoFilters()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.geoFilters()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.hostName()
  name: hostName()
  nameWithType: CdnEndpoint.hostName()
  returns:
    description: <p>endpoint host name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String hostName()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.hostName()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.httpPort()
  name: httpPort()
  nameWithType: CdnEndpoint.httpPort()
  returns:
    description: <p>HTTP port value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int httpPort()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.httpPort()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.httpsPort()
  name: httpsPort()
  nameWithType: CdnEndpoint.httpsPort()
  returns:
    description: <p>HTTPS port value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int httpsPort()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.httpsPort()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.isCompressionEnabled()
  name: isCompressionEnabled()
  nameWithType: CdnEndpoint.isCompressionEnabled()
  returns:
    description: <p>true if content compression is enabled, otherwise false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isCompressionEnabled()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.isCompressionEnabled()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.isHttpAllowed()
  name: isHttpAllowed()
  nameWithType: CdnEndpoint.isHttpAllowed()
  returns:
    description: <p>true if HTTP traffic is allowed, otherwise false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isHttpAllowed()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.isHttpAllowed()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.isHttpsAllowed()
  name: isHttpsAllowed()
  nameWithType: CdnEndpoint.isHttpsAllowed()
  returns:
    description: <p>true if HTTPS traffic is allowed, otherwise false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isHttpsAllowed()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.isHttpsAllowed()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.listResourceUsage()
  name: listResourceUsage()
  nameWithType: CdnEndpoint.listResourceUsage()
  returns:
    description: <p>list of quotas and usages of geo filters and custom domains under the current endpoint </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.cdn.ResourceUsage?alt=com.microsoft.azure.management.cdn.ResourceUsage&text=ResourceUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks the quota and usage of geo filters and custom domains under the current endpoint.</p>

    <p></p>
  syntax: public PagedList<ResourceUsage> listResourceUsage()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.listResourceUsage()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.loadContent(Set<String> contentPaths)
  name: loadContent(Set<String> contentPaths)
  nameWithType: CdnEndpoint.loadContent(Set<String> contentPaths)
  parameters:
  - description: <p>the file paths to the content to be loaded </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly preloads the content of the CDN endpoint. </p>

    <p>Note: this is supported for Verizon profiles only.</p>

    <p></p>
  syntax: public void loadContent(Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.loadContent(Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.loadContentAsync(Set<String> contentPaths)
  name: loadContentAsync(Set<String> contentPaths)
  nameWithType: CdnEndpoint.loadContentAsync(Set<String> contentPaths)
  parameters:
  - description: <p>the file paths to the content to be loaded </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly preloads the content of the CDN endpoint asynchronously. </p>

    <p>Note: this is supported for Verizon profiles only.</p>

    <p></p>
  syntax: public Completable loadContentAsync(Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.loadContentAsync(Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.loadContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  name: loadContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  nameWithType: CdnEndpoint.loadContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  parameters:
  - description: <p>the file paths to the content to be loaded </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly preloads the content of the CDN endpoint asynchronously. </p>

    <p>Note: this is supported for Verizon profiles only.</p>

    <p></p>
  syntax: public ServiceFuture<Void> loadContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.loadContentAsync(Set<String>,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.optimizationType()
  name: optimizationType()
  nameWithType: CdnEndpoint.optimizationType()
  returns:
    description: <p>optimization type </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String optimizationType()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.optimizationType()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.originHostHeader()
  name: originHostHeader()
  nameWithType: CdnEndpoint.originHostHeader()
  returns:
    description: <p>origin host header </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String originHostHeader()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.originHostHeader()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.originHostName()
  name: originHostName()
  nameWithType: CdnEndpoint.originHostName()
  returns:
    description: <p>origin host name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String originHostName()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.originHostName()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.originPath()
  name: originPath()
  nameWithType: CdnEndpoint.originPath()
  returns:
    description: <p>origin path </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String originPath()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.originPath()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.provisioningState()
  name: provisioningState()
  nameWithType: CdnEndpoint.provisioningState()
  returns:
    description: <p>endpoint provisioning state </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String provisioningState()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.provisioningState()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.purgeContent(Set<String> contentPaths)
  name: purgeContent(Set<String> contentPaths)
  nameWithType: CdnEndpoint.purgeContent(Set<String> contentPaths)
  parameters:
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards. </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly purges the content of the CDN endpoint.</p>

    <p></p>
  syntax: public void purgeContent(Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.purgeContent(Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.purgeContentAsync(Set<String> contentPaths)
  name: purgeContentAsync(Set<String> contentPaths)
  nameWithType: CdnEndpoint.purgeContentAsync(Set<String> contentPaths)
  parameters:
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards. </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly purges the content of the CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public Completable purgeContentAsync(Set<String> contentPaths)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.purgeContentAsync(Set<String>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.purgeContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  name: purgeContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  nameWithType: CdnEndpoint.purgeContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  parameters:
  - description: <p>the paths to the content to be purged, which can be file paths or directory wild cards. </p>
    name: contentPaths
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Forcibly purges the content of the CDN endpoint asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<Void> purgeContentAsync(Set<String> contentPaths, ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.purgeContentAsync(Set<String>,ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.queryStringCachingBehavior()
  name: queryStringCachingBehavior()
  nameWithType: CdnEndpoint.queryStringCachingBehavior()
  returns:
    description: <p>query string caching behavior </p>
    type: <xref href="com.microsoft.azure.management.cdn.QueryStringCachingBehavior?alt=com.microsoft.azure.management.cdn.QueryStringCachingBehavior&text=QueryStringCachingBehavior" data-throw-if-not-resolved="False"/>
  syntax: public QueryStringCachingBehavior queryStringCachingBehavior()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.queryStringCachingBehavior()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.resourceState()
  name: resourceState()
  nameWithType: CdnEndpoint.resourceState()
  returns:
    description: <p>endpoint state </p>
    type: <xref href="com.microsoft.azure.management.cdn.EndpointResourceState?alt=com.microsoft.azure.management.cdn.EndpointResourceState&text=EndpointResourceState" data-throw-if-not-resolved="False"/>
  syntax: public EndpointResourceState resourceState()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.resourceState()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.start()
  name: start()
  nameWithType: CdnEndpoint.start()
  summary: <p>Starts the CDN endpoint, if it is stopped. </p>
  syntax: public void start()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.start()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.startAsync()
  name: startAsync()
  nameWithType: CdnEndpoint.startAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts the CDN endpoint asynchronously, if it is stopped.</p>

    <p></p>
  syntax: public Completable startAsync()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.startAsync()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.startAsync(ServiceCallback<Void> callback)
  name: startAsync(ServiceCallback<Void> callback)
  nameWithType: CdnEndpoint.startAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Starts the CDN endpoint asynchronously, if it is stopped.</p>

    <p></p>
  syntax: public ServiceFuture<Void> startAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.startAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.stop()
  name: stop()
  nameWithType: CdnEndpoint.stop()
  summary: <p>Stops the CDN endpoint, if it is running. </p>
  syntax: public void stop()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.stop()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.stopAsync()
  name: stopAsync()
  nameWithType: CdnEndpoint.stopAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops the CDN endpoint asynchronously, if it is running.</p>

    <p></p>
  syntax: public Completable stopAsync()
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.stopAsync()
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.stopAsync(ServiceCallback<Void> callback)
  name: stopAsync(ServiceCallback<Void> callback)
  nameWithType: CdnEndpoint.stopAsync(ServiceCallback<Void> callback)
  parameters:
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: <xref href="ServiceCallback%3CVoid%3E?alt=ServiceCallback%3CVoid%3E&text=ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a handle to cancel the request </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Stops the CDN endpoint asynchronously, if it is running.</p>

    <p></p>
  syntax: public ServiceFuture<Void> stopAsync(ServiceCallback<Void> callback)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.stopAsync(ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.validateCustomDomain(String hostName)
  name: validateCustomDomain(String hostName)
  nameWithType: CdnEndpoint.validateCustomDomain(String hostName)
  parameters:
  - description: <p>the host name, which must be a domain name, of the custom domain </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the result of the action, if successful. </p>
    type: <xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS for current endpoint.</p>

    <p></p>
  syntax: public CustomDomainValidationResult validateCustomDomain(String hostName)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.validateCustomDomain(String)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.validateCustomDomainAsync(String hostName)
  name: validateCustomDomainAsync(String hostName)
  nameWithType: CdnEndpoint.validateCustomDomainAsync(String hostName)
  parameters:
  - description: <p>the host name, which must be a domain name, of the custom domain </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an observable of the result </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS for current endpoint asynchronously.</p>

    <p></p>
  syntax: public Observable<CustomDomainValidationResult> validateCustomDomainAsync(String hostName)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.validateCustomDomainAsync(String)
- fullName: com.microsoft.azure.management.cdn.CdnEndpoint.validateCustomDomainAsync(String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  name: validateCustomDomainAsync(String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  nameWithType: CdnEndpoint.validateCustomDomainAsync(String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  parameters:
  - description: <p>the host name, which must be a domain name, of the custom domain </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.cdn.CustomDomainValidationResult?alt=com.microsoft.azure.management.cdn.CustomDomainValidationResult&text=CustomDomainValidationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Validates a custom domain mapping to ensure it maps to the correct CNAME in DNS for current endpoint asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<CustomDomainValidationResult> validateCustomDomainAsync(String hostName, ServiceCallback<CustomDomainValidationResult> callback)
  uid: com.microsoft.azure.management.cdn.CdnEndpoint.validateCustomDomainAsync(String,ServiceCallback<CustomDomainValidationResult>)
nameWithType: CdnEndpoint
syntax: public interface CdnEndpoint extends ExternalChildResource<CdnEndpoint, CdnProfile>,HasInner<EndpointInner>
type: interface
uid: com.microsoft.azure.management.cdn.CdnEndpoint
fullName: com.microsoft.azure.management.cdn.CdnEndpoint
name: CdnEndpoint
package: com.microsoft.azure.management.cdn
summary: <p>An immutable client-side representation of an Azure CDN endpoint. </p>
metadata: {}
