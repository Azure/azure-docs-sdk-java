### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.servicebus.IMessage.createCopy()
  name: createCopy()
  nameWithType: IMessage.createCopy()
  returns:
    description: <p>copy of this message </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a shallow copy of this message. </p>
  syntax: public IMessage createCopy()
  uid: com.microsoft.azure.servicebus.IMessage.createCopy()
- fullName: com.microsoft.azure.servicebus.IMessage.getBody()
  name: getBody()
  nameWithType: IMessage.getBody()
  returns:
    description: <p>body of this message </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the body of this message as a byte array. It is up to client applications to decode the bytes.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000025">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>Message body need not just a byte array. Replaced by <xref uid="com.microsoft.azure.servicebus.IMessage.getMessageBody()" data-throw-if-not-resolved="false" data-raw-source="getMessageBody()"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public byte [] getBody()
  uid: com.microsoft.azure.servicebus.IMessage.getBody()
- fullName: com.microsoft.azure.servicebus.IMessage.getContentType()
  name: getContentType()
  nameWithType: IMessage.getContentType()
  returns:
    description: <p>content type of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the content type of this message.</p>

    <p>Optionally describes the payload of the message, with a descriptor following the format of RFC2045, Section 5, for example "application/json". Note that content type is not same as message body type.</p>

    <p></p>
  syntax: public String getContentType()
  uid: com.microsoft.azure.servicebus.IMessage.getContentType()
- fullName: com.microsoft.azure.servicebus.IMessage.getCorrelationId()
  name: getCorrelationId()
  nameWithType: IMessage.getCorrelationId()
  returns:
    description: <p>correlation Id of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a correlation identifier.</p>

    <p>Allows an application to specify a context for the message for the purposes of correlation, for example reflecting the MessageId of a message that is being replied to.</p>

    <p></p>
  syntax: public String getCorrelationId()
  uid: com.microsoft.azure.servicebus.IMessage.getCorrelationId()
- fullName: com.microsoft.azure.servicebus.IMessage.getDeadLetterSource()
  name: getDeadLetterSource()
  nameWithType: IMessage.getDeadLetterSource()
  returns:
    description: <p>dead letter source of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the queue or subscription that this message was enqueued on, before it was deadlettered.</p>

    <p>This value is only set in messages that have been dead-lettered and subsequently auto-forwarded from the dead-letter queue to another entity. Indicates the entity in which the message was dead-lettered. This property is read-only.</p>

    <p></p>
  syntax: public String getDeadLetterSource()
  uid: com.microsoft.azure.servicebus.IMessage.getDeadLetterSource()
- fullName: com.microsoft.azure.servicebus.IMessage.getDeliveryCount()
  name: getDeliveryCount()
  nameWithType: IMessage.getDeliveryCount()
  returns:
    description: <p>delivery count of this message. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of the times this message was delivered to clients.</p>

    <p>The count is incremented when a message lock expires, or the message is explicitly abandoned by the receiver. This property is read-only.</p>

    <p></p>
  syntax: public long getDeliveryCount()
  uid: com.microsoft.azure.servicebus.IMessage.getDeliveryCount()
- fullName: com.microsoft.azure.servicebus.IMessage.getEnqueuedTimeUtc()
  name: getEnqueuedTimeUtc()
  nameWithType: IMessage.getEnqueuedTimeUtc()
  returns:
    description: <p>the instant at which the message was enqueued in Azure Service Bus </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the instant at which this message was enqueued in Azure Service Bus.</p>

    <p>The UTC instant at which the message has been accepted and stored in the entity. For scheduled messages, this reflects the time when the message was activated. This value can be used as an authoritative and neutral arrival time indicator when the receiver does not want to trust the sender's clock. This property is read-only.</p>

    <p></p>
  syntax: public Instant getEnqueuedTimeUtc()
  uid: com.microsoft.azure.servicebus.IMessage.getEnqueuedTimeUtc()
- fullName: com.microsoft.azure.servicebus.IMessage.getExpiresAtUtc()
  name: getExpiresAtUtc()
  nameWithType: IMessage.getExpiresAtUtc()
  returns:
    description: <p>instant at which this message expires </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the instant at which this message will expire.</p>

    <p>The value is the UTC instant for when the message is scheduled for removal and will no longer available for retrieval from the entity due to expiration. Expiry is controlled by the <xref uid="com.microsoft.azure.servicebus.IMessage.getTimeToLive()" data-throw-if-not-resolved="false" data-raw-source="TimeToLive"></xref> property. This property is computed from <xref uid="com.microsoft.azure.servicebus.IMessage.getEnqueuedTimeUtc()" data-throw-if-not-resolved="false" data-raw-source="EnqueuedTimeUtc"></xref>+<xref uid="com.microsoft.azure.servicebus.IMessage.getTimeToLive()" data-throw-if-not-resolved="false" data-raw-source="TimeToLive"></xref>.</p>

    <p></p>
  syntax: public Instant getExpiresAtUtc()
  uid: com.microsoft.azure.servicebus.IMessage.getExpiresAtUtc()
- fullName: com.microsoft.azure.servicebus.IMessage.getLabel()
  name: getLabel()
  nameWithType: IMessage.getLabel()
  returns:
    description: <p>Label property value of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the application specific message label.</p>

    <p>This property enables the application to indicate the purpose of the message to the receiver in a standardized fashion, similar to an email subject line. The mapped AMQP property is "subject".</p>

    <p></p>
  syntax: public String getLabel()
  uid: com.microsoft.azure.servicebus.IMessage.getLabel()
- fullName: com.microsoft.azure.servicebus.IMessage.getLockedUntilUtc()
  name: getLockedUntilUtc()
  nameWithType: IMessage.getLockedUntilUtc()
  returns:
    description: <p>the instant at which the lock of this message expires if the message is received using PEEKLOCK mode. Otherwise it returns null. </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the instant at which the lock of this message expires.</p>

    <p>For messages retrieved under a lock (peek-lock receive mode, not pre-settled) this property reflects the UTC instant until which the message is held locked in the queue/subscription. When the lock expires, the <xref uid="com.microsoft.azure.servicebus.IMessage.getDeliveryCount()" data-throw-if-not-resolved="false" data-raw-source="DeliveryCount"></xref> is incremented and the message is again available for retrieval. This property is read-only.</p>

    <p></p>
  syntax: public Instant getLockedUntilUtc()
  uid: com.microsoft.azure.servicebus.IMessage.getLockedUntilUtc()
- fullName: com.microsoft.azure.servicebus.IMessage.getLockToken()
  name: getLockToken()
  nameWithType: IMessage.getLockToken()
  returns:
    description: <p>lock token of this message. </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the lock token for the current message.</p>

    <p>The lock token is a reference to the lock that is being held by the broker in PEEKLOCK mode. Locks are used to explicitly settle messages as explained in the <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement">product documentation in more detail</a>. The token can also be used to pin the lock permanently through the <a href="https://docs.microsoft.com/azure/service-bus-messaging/message-deferral">Deferral API</a> and, with that, take the message out of the regular delivery state flow. This property is read-only.</p>

    <p></p>
  syntax: public UUID getLockToken()
  uid: com.microsoft.azure.servicebus.IMessage.getLockToken()
- fullName: com.microsoft.azure.servicebus.IMessage.getMessageBody()
  name: getMessageBody()
  nameWithType: IMessage.getMessageBody()
  returns:
    description: <p>body of this message </p>
    type: <xref href="com.microsoft.azure.servicebus.MessageBody?alt=com.microsoft.azure.servicebus.MessageBody&text=MessageBody" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the body of this message. Client applications should extract message content based on body type.</p>

    <p></p>
  syntax: public MessageBody getMessageBody()
  uid: com.microsoft.azure.servicebus.IMessage.getMessageBody()
- fullName: com.microsoft.azure.servicebus.IMessage.getMessageId()
  name: getMessageId()
  nameWithType: IMessage.getMessageId()
  returns:
    description: <p>Id of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Id of this message.</p>

    <p>The message identifier is an application-defined value that uniquely identifies the message and its payload. The identifier is a free-form string and can reflect a GUID or an identifier derived from the application context. If enabled, the <a href="https://docs.microsoft.com/azure/service-bus-messaging/duplicate-detection">duplicate detection</a> feature identifies and removes second and further submissions of messages with the same MessageId.</p>

    <p></p>
  syntax: public String getMessageId()
  uid: com.microsoft.azure.servicebus.IMessage.getMessageId()
- fullName: com.microsoft.azure.servicebus.IMessage.getPartitionKey()
  name: getPartitionKey()
  nameWithType: IMessage.getPartitionKey()
  returns:
    description: <p>partition key of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the partition key for sending a message to a partitioned entity.</p>

    <p>For <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-partitioning">partitioned entities</a>, setting this value enables assigning related messages to the same internal partition, so that submission sequence order is correctly recorded. The partition is chosen by a hash function over this value and cannot be chosen directly. For session-aware entities, the <xref uid="com.microsoft.azure.servicebus.IMessage.getSessionId()" data-throw-if-not-resolved="false" data-raw-source="SessionId "></xref> property overrides this value.</p>

    <p></p>
  syntax: public String getPartitionKey()
  uid: com.microsoft.azure.servicebus.IMessage.getPartitionKey()
- fullName: com.microsoft.azure.servicebus.IMessage.getProperties()
  name: getProperties()
  nameWithType: IMessage.getProperties()
  returns:
    description: <p>the map of user application properties of this message </p>
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the map of user application properties of this message. Client applications can set user properties (headers) on the message using this map.</p>

    <p></p>
  syntax: public Map<String, Object> getProperties()
  uid: com.microsoft.azure.servicebus.IMessage.getProperties()
- fullName: com.microsoft.azure.servicebus.IMessage.getReplyTo()
  name: getReplyTo()
  nameWithType: IMessage.getReplyTo()
  returns:
    description: <p>ReplyTo property value of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the address of an entity to send replies to.</p>

    <p>This optional and application-defined value is a standard way to express a reply path to the receiver of the message. When a sender expects a reply, it sets the value to the absolute or relative path of the queue or topic it expects the reply to be sent to.</p>

    <p></p>
  syntax: public String getReplyTo()
  uid: com.microsoft.azure.servicebus.IMessage.getReplyTo()
- fullName: com.microsoft.azure.servicebus.IMessage.getReplyToSessionId()
  name: getReplyToSessionId()
  nameWithType: IMessage.getReplyToSessionId()
  returns:
    description: <p>ReplyToSessionId property value of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets or sets a session identifier augmenting the <xref uid="com.microsoft.azure.servicebus.IMessage.getReplyTo()" data-throw-if-not-resolved="false" data-raw-source="ReplyTo"></xref> address.</p>

    <p>This value augments the ReplyTo information and specifies which SessionId should be set for the reply when sent to the reply entity.</p>

    <p></p>
  syntax: public String getReplyToSessionId()
  uid: com.microsoft.azure.servicebus.IMessage.getReplyToSessionId()
- fullName: com.microsoft.azure.servicebus.IMessage.getScheduledEnqueuedTimeUtc()
  name: getScheduledEnqueuedTimeUtc()
  nameWithType: IMessage.getScheduledEnqueuedTimeUtc()
  returns:
    description: <p>the instant at which the message will be enqueued in Azure Service Bus </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the scheduled enqueue time of this message.</p>

    <p>This value is used for delayed message availability. The message is safely added to the queue, but is not considered active and therefore not retrievable until the scheduled enqueue time. Mind that the message may not be activated (enqueued) at the exact given instant; the actual activation time depends on the queue's workload and its state.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000023">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>Replaced by <xref uid="com.microsoft.azure.servicebus.IMessage.getScheduledEnqueueTimeUtc()" data-throw-if-not-resolved="false" data-raw-source="getScheduledEnqueueTimeUtc()"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public Instant getScheduledEnqueuedTimeUtc()
  uid: com.microsoft.azure.servicebus.IMessage.getScheduledEnqueuedTimeUtc()
- fullName: com.microsoft.azure.servicebus.IMessage.getScheduledEnqueueTimeUtc()
  name: getScheduledEnqueueTimeUtc()
  nameWithType: IMessage.getScheduledEnqueueTimeUtc()
  returns:
    description: <p>the instant at which the message will be enqueued in Azure Service Bus </p>
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the scheduled enqueue time of this message.</p>

    <p>This value is used for delayed message availability. The message is safely added to the queue, but is not considered active and therefore not retrievable until the scheduled enqueue time. Mind that the message may not be activated (enqueued) at the exact given instant; the actual activation time depends on the queue's workload and its state.</p>

    <p></p>
  syntax: public Instant getScheduledEnqueueTimeUtc()
  uid: com.microsoft.azure.servicebus.IMessage.getScheduledEnqueueTimeUtc()
- fullName: com.microsoft.azure.servicebus.IMessage.getSequenceNumber()
  name: getSequenceNumber()
  nameWithType: IMessage.getSequenceNumber()
  returns:
    description: <p>sequence number of this message </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the unique number assigned to a message by Service Bus.</p>

    <p>The sequence number is a unique 64-bit integer assigned to a message as it is accepted and stored by the broker and functions as its true identifier. For partitioned entities, the topmost 16 bits reflect the partition identifier. Sequence numbers monotonically increase and are gapless. They roll over to 0 when the 48-64 bit range is exhausted. This property is read-only.</p>

    <p></p>
  syntax: public long getSequenceNumber()
  uid: com.microsoft.azure.servicebus.IMessage.getSequenceNumber()
- fullName: com.microsoft.azure.servicebus.IMessage.getSessionId()
  name: getSessionId()
  nameWithType: IMessage.getSessionId()
  returns:
    description: <p>session id of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the session identifier for a session-aware entity.</p>

    <p>For session-aware entities, this application-defined value specifies the session affiliation of the message. Messages with the same session identifier are subject to summary locking and enable exact in-order processing and demultiplexing. For session-unaware entities, this value is ignored.</p>

    <p></p>
  syntax: public String getSessionId()
  uid: com.microsoft.azure.servicebus.IMessage.getSessionId()
- fullName: com.microsoft.azure.servicebus.IMessage.getTimeToLive()
  name: getTimeToLive()
  nameWithType: IMessage.getTimeToLive()
  returns:
    description: <p>Time to Live duration of this message </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the duration before this message expires.</p>

    <p>This value is the relative duration after which the message expires, starting from the instant the message has been accepted and stored by the broker, as captured in <xref uid="com.microsoft.azure.servicebus.IMessage.getEnqueuedTimeUtc()" data-throw-if-not-resolved="false" data-raw-source="getEnqueuedTimeUtc"></xref>. When not set explicitly, the assumed value is the DefaultTimeToLive set for the respective queue or topic. A message-level TimeToLive value cannot be longer than the entity's DefaultTimeToLive setting and it is silently adjusted if it does.</p>

    <p></p>
  syntax: public Duration getTimeToLive()
  uid: com.microsoft.azure.servicebus.IMessage.getTimeToLive()
- fullName: com.microsoft.azure.servicebus.IMessage.getTo()
  name: getTo()
  nameWithType: IMessage.getTo()
  returns:
    description: <p>To property value of this message </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the "to" address.</p>

    <p></p>
  syntax: public String getTo()
  uid: com.microsoft.azure.servicebus.IMessage.getTo()
- fullName: com.microsoft.azure.servicebus.IMessage.getViaPartitionKey()
  name: getViaPartitionKey()
  nameWithType: IMessage.getViaPartitionKey()
  returns:
    description: <p>partition key on the via queue. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the partition key for sending a message to a entity via another partitioned transfer entity.</p>

    <p>If a message is sent via a transfer queue in the scope of a transaction, this value selects the transfer queue partition: This is functionally equivalent to <xref uid="com.microsoft.azure.servicebus.IMessage.getPartitionKey()" data-throw-if-not-resolved="false" data-raw-source="getPartitionKey()"></xref> and ensures that messages are kept together and in order as they are transferred.</p>

    <p></p>
  syntax: public String getViaPartitionKey()
  uid: com.microsoft.azure.servicebus.IMessage.getViaPartitionKey()
- fullName: com.microsoft.azure.servicebus.IMessage.setBody(byte[] body)
  name: setBody(byte[] body)
  nameWithType: IMessage.setBody(byte[] body)
  parameters:
  - description: <p>body of this message </p>
    name: body
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the body of this message as a byte array.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000026">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>Message body need not just a byte array. Replaced by <xref uid="com.microsoft.azure.servicebus.IMessage.setMessageBody(MessageBody)" data-throw-if-not-resolved="false" data-raw-source="setMessageBody(MessageBody)"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public void setBody(byte[] body)
  uid: com.microsoft.azure.servicebus.IMessage.setBody(byte [])
- fullName: com.microsoft.azure.servicebus.IMessage.setContentType(String contentType)
  name: setContentType(String contentType)
  nameWithType: IMessage.setContentType(String contentType)
  parameters:
  - description: <p>content type of this message </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the content type of this message.</p>

    <p></p>
  syntax: public void setContentType(String contentType)
  uid: com.microsoft.azure.servicebus.IMessage.setContentType(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setCorrelationId(String correlationId)
  name: setCorrelationId(String correlationId)
  nameWithType: IMessage.setCorrelationId(String correlationId)
  parameters:
  - description: <p>correlation Id of this message </p>
    name: correlationId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a correlation identifier.</p>

    <p></p>
  syntax: public void setCorrelationId(String correlationId)
  uid: com.microsoft.azure.servicebus.IMessage.setCorrelationId(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setLabel(String label)
  name: setLabel(String label)
  nameWithType: IMessage.setLabel(String label)
  parameters:
  - description: <p>Label property value of this message </p>
    name: label
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets an application specific message label.</p>

    <p></p>
  syntax: public void setLabel(String label)
  uid: com.microsoft.azure.servicebus.IMessage.setLabel(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setMessageBody(MessageBody body)
  name: setMessageBody(MessageBody body)
  nameWithType: IMessage.setMessageBody(MessageBody body)
  parameters:
  - description: <p>body of this message </p>
    name: body
    type: <xref href="com.microsoft.azure.servicebus.MessageBody?alt=com.microsoft.azure.servicebus.MessageBody&text=MessageBody" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the body of this message.</p>

    <p></p>
  syntax: public void setMessageBody(MessageBody body)
  uid: com.microsoft.azure.servicebus.IMessage.setMessageBody(MessageBody)
- fullName: com.microsoft.azure.servicebus.IMessage.setMessageId(String messageId)
  name: setMessageId(String messageId)
  nameWithType: IMessage.setMessageId(String messageId)
  parameters:
  - description: <p>Id of this message </p>
    name: messageId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the Id of this message. </p>
  syntax: public void setMessageId(String messageId)
  uid: com.microsoft.azure.servicebus.IMessage.setMessageId(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setPartitionKey(String partitionKey)
  name: setPartitionKey(String partitionKey)
  nameWithType: IMessage.setPartitionKey(String partitionKey)
  parameters:
  - description: <p>partition key of this message </p>
    name: partitionKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a partition key for sending a message to a partitioned entity</p>

    <p></p>
  syntax: public void setPartitionKey(String partitionKey)
  uid: com.microsoft.azure.servicebus.IMessage.setPartitionKey(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setProperties(Map<String, Object> properties)
  name: setProperties(Map<String, Object> properties)
  nameWithType: IMessage.setProperties(Map<String, Object> properties)
  parameters:
  - description: <p>the map of user application properties of this message </p>
    name: properties
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the map of user application properties of this message. Client applications can set user properties on the message using this map.</p>

    <p></p>
  syntax: public void setProperties(Map<String, Object> properties)
  uid: com.microsoft.azure.servicebus.IMessage.setProperties(Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.IMessage.setReplyTo(String replyTo)
  name: setReplyTo(String replyTo)
  nameWithType: IMessage.setReplyTo(String replyTo)
  parameters:
  - description: <p>ReplyTo property value of this message </p>
    name: replyTo
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the address of an entity to send replies to.</p>

    <p></p>
  syntax: public void setReplyTo(String replyTo)
  uid: com.microsoft.azure.servicebus.IMessage.setReplyTo(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setReplyToSessionId(String replyToSessionId)
  name: setReplyToSessionId(String replyToSessionId)
  nameWithType: IMessage.setReplyToSessionId(String replyToSessionId)
  parameters:
  - description: <p>ReplyToSessionId property value of this message </p>
    name: replyToSessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets or sets a session identifier augmenting the <xref uid="com.microsoft.azure.servicebus.IMessage.getReplyTo()" data-throw-if-not-resolved="false" data-raw-source="ReplyTo"></xref> address.</p>

    <p></p>
  syntax: public void setReplyToSessionId(String replyToSessionId)
  uid: com.microsoft.azure.servicebus.IMessage.setReplyToSessionId(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setScheduledEnqueuedTimeUtc(Instant scheduledEnqueueTimeUtc)
  name: setScheduledEnqueuedTimeUtc(Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessage.setScheduledEnqueuedTimeUtc(Instant scheduledEnqueueTimeUtc)
  parameters:
  - description: <p>the instant at which this message should be enqueued in Azure Service Bus </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the scheduled enqueue time of this message.</p>

    <p>

      <xrefsect id="deprecated_1_deprecated000024">

        <xreftitle>Deprecated</xreftitle>

        <xrefdescription>

          <p>Replaced by <xref uid="com.microsoft.azure.servicebus.IMessage.setScheduledEnqueueTimeUtc(Instant)" data-throw-if-not-resolved="false" data-raw-source="setScheduledEnqueueTimeUtc(Instant)"></xref></p>

        </xrefdescription>

      </xrefsect>

    </p>
  syntax: public void setScheduledEnqueuedTimeUtc(Instant scheduledEnqueueTimeUtc)
  uid: com.microsoft.azure.servicebus.IMessage.setScheduledEnqueuedTimeUtc(Instant)
- fullName: com.microsoft.azure.servicebus.IMessage.setScheduledEnqueueTimeUtc(Instant scheduledEnqueueTimeUtc)
  name: setScheduledEnqueueTimeUtc(Instant scheduledEnqueueTimeUtc)
  nameWithType: IMessage.setScheduledEnqueueTimeUtc(Instant scheduledEnqueueTimeUtc)
  parameters:
  - description: <p>the instant at which this message should be enqueued in Azure Service Bus </p>
    name: scheduledEnqueueTimeUtc
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the scheduled enqueue time of this message.</p>

    <p></p>
  syntax: public void setScheduledEnqueueTimeUtc(Instant scheduledEnqueueTimeUtc)
  uid: com.microsoft.azure.servicebus.IMessage.setScheduledEnqueueTimeUtc(Instant)
- fullName: com.microsoft.azure.servicebus.IMessage.setSessionId(String sessionId)
  name: setSessionId(String sessionId)
  nameWithType: IMessage.setSessionId(String sessionId)
  parameters:
  - description: <p>session id of this message </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the session identifier for a session-aware entity.</p>

    <p></p>
  syntax: public void setSessionId(String sessionId)
  uid: com.microsoft.azure.servicebus.IMessage.setSessionId(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setTimeToLive(Duration timeToLive)
  name: setTimeToLive(Duration timeToLive)
  nameWithType: IMessage.setTimeToLive(Duration timeToLive)
  parameters:
  - description: <p>Time to Live duration of this message </p>
    name: timeToLive
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the duration of time before this message expires.</p>

    <p></p>
  syntax: public void setTimeToLive(Duration timeToLive)
  uid: com.microsoft.azure.servicebus.IMessage.setTimeToLive(Duration)
- fullName: com.microsoft.azure.servicebus.IMessage.setTo(String to)
  name: setTo(String to)
  nameWithType: IMessage.setTo(String to)
  parameters:
  - description: <p>To property value of this message </p>
    name: to
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the "to" address.</p>

    <p>This property is reserved for future use in routing scenarios and presently ignored by the broker itself. Applications can use this value in rule-driven <a href="https://docs.microsoft.com/azure/service-bus-messaging/service-bus-auto-forwarding">auto-forward chaining</a> scenarios to indicate the intended logical destination of the message.</p>

    <p></p>
  syntax: public void setTo(String to)
  uid: com.microsoft.azure.servicebus.IMessage.setTo(String)
- fullName: com.microsoft.azure.servicebus.IMessage.setViaPartitionKey(String viaPartitionKey)
  name: setViaPartitionKey(String viaPartitionKey)
  nameWithType: IMessage.setViaPartitionKey(String viaPartitionKey)
  parameters:
  - description: <p>via-partition key of this message </p>
    name: viaPartitionKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a via-partition key for sending a message to a destination entity via another partitioned entity</p>

    <p></p>
  syntax: public void setViaPartitionKey(String viaPartitionKey)
  uid: com.microsoft.azure.servicebus.IMessage.setViaPartitionKey(String)
nameWithType: IMessage
syntax: public interface IMessage
type: interface
uid: com.microsoft.azure.servicebus.IMessage
fullName: com.microsoft.azure.servicebus.IMessage
name: IMessage
package: com.microsoft.azure.servicebus
summary: >-
  <p>Represents the message that is exchanged between Azure Service Bus and its clients.</p>

  <p></p>
metadata: {}
