### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.CommunicationClientFactoryBase()
  name: CommunicationClientFactoryBase()
  nameWithType: CommunicationClientFactoryBase<T>.CommunicationClientFactoryBase()
  summary: <p>Initializes a new instance of the communication client factory. </p>
  syntax: protected CommunicationClientFactoryBase()
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.CommunicationClientFactoryBase()
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers)
  name: CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers)
  nameWithType: CommunicationClientFactoryBase<T>.CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers)
  parameters:
  - description: <p>Optional ServicePartitionResolver </p>
    name: servicePartitionResolver
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
  - description: <p>Optional Custom exception handlers for the exceptions on the Client to Service communication channel </p>
    name: exceptionHandlers
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.client.ExceptionHandler?alt=microsoft.servicefabric.services.communication.client.ExceptionHandler&text=ExceptionHandler" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Initializes a new instance of the communication client factory.</p>

    <p></p>
  syntax: protected CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.CommunicationClientFactoryBase(ServicePartitionResolver,List<ExceptionHandler>)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  name: CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  nameWithType: CommunicationClientFactoryBase<T>.CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  parameters:
  - description: <p>Optional ServicePartitionResolver </p>
    name: servicePartitionResolver
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
  - description: <p>Optional Custom exception handlers for the exceptions on the Client to Service communication channel </p>
    name: exceptionHandlers
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.client.ExceptionHandler?alt=microsoft.servicefabric.services.communication.client.ExceptionHandler&text=ExceptionHandler" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>Id to use in diagnostics traces from this component. </p>
    name: traceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the communication client factory.</p>

    <p></p>
  syntax: protected CommunicationClientFactoryBase(ServicePartitionResolver servicePartitionResolver, List<ExceptionHandler> exceptionHandlers, String traceId)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.CommunicationClientFactoryBase(ServicePartitionResolver,List<ExceptionHandler>,String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.communication.client.CommunicationClientFactory?alt=microsoft.servicefabric.services.communication.client.CommunicationClientFactory&text=CommunicationClientFactory%3CTCommunicationClient%3E" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.communication.client.CommunicationClientFactory.reportOperationExceptionAsync(TCommunicationClient,ExceptionInformation,OperationRetrySettings)
methods:
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.abortClient(T client)
  name: abortClient(T client)
  nameWithType: CommunicationClientFactoryBase<T>.abortClient(T client)
  parameters:
  - description: <p>Communication client </p>
    name: client
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Aborts the given client</p>

    <p></p>
  syntax: protected abstract void abortClient(T client)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.abortClient(T)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.createClientAsync(String endpoint)
  name: createClientAsync(String endpoint)
  nameWithType: CommunicationClientFactoryBase<T>.createClientAsync(String endpoint)
  parameters:
  - name: endpoint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+CompletableFuture%3CT%3E?alt=abstract+CompletableFuture%3CT%3E&text=abstract+CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  syntax: protected abstract CompletableFuture<T> createClientAsync(String endpoint)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.createClientAsync(String)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  name: getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  nameWithType: CommunicationClientFactoryBase<T>.getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  parameters:
  - description: <p>previous <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ResolvedServicePartition"></xref></p>
    name: previousRsp
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.services.communication.client.TargetReplicaSelector" data-throw-if-not-resolved="false" data-raw-source="TargetReplicaSelector"></xref>

      </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>Listener name </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>retry settings </p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A CompletableFuture that represents outstanding operation. The result of the Task is the CommunicationClient(<xref uid="microsoft.servicefabric.services.communication.client.CommunicationClient" data-throw-if-not-resolved="false" data-raw-source="CommunicationClient"></xref>) object. </p>
    type: <xref href="CompletableFuture%3CT%3E?alt=CompletableFuture%3CT%3E&text=CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate to the endpoint corresponding to the given listenerName. The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</p>

    <p></p>
  syntax: public CompletableFuture<T> getClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.getClientAsync(ResolvedServicePartition,TargetReplicaSelector,String,OperationRetrySettings)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  name: getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  nameWithType: CommunicationClientFactoryBase<T>.getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  parameters:
  - description: <p>Uri of the service to resolve </p>
    name: serviceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Key that identifies the partition to resolve </p>
    name: partitionKey
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionKey?alt=microsoft.servicefabric.services.client.ServicePartitionKey&text=ServicePartitionKey" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.services.communication.client.TargetReplicaSelector" data-throw-if-not-resolved="false" data-raw-source="TargetReplicaSelector"></xref>

      </p>
    name: targetReplicaSelector
    type: <xref href="microsoft.servicefabric.services.communication.client.TargetReplicaSelector?alt=microsoft.servicefabric.services.communication.client.TargetReplicaSelector&text=TargetReplicaSelector" data-throw-if-not-resolved="False"/>
  - description: <p>Listener name </p>
    name: listenerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>retry settings </p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A CompletableFuture that represents outstanding operation. The result of the Task is the CommunicationClient(<xref uid="microsoft.servicefabric.services.communication.client.CommunicationClient" data-throw-if-not-resolved="false" data-raw-source="CommunicationClient"></xref>) object. </p>
    type: <xref href="CompletableFuture%3CT%3E?alt=CompletableFuture%3CT%3E&text=CompletableFuture%3CT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate to the endpoint corresponding to the given listenerName. The endpoint of the service is of the form - {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}}</p>

    <p></p>
  syntax: public CompletableFuture<T> getClientAsync(URI serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, String listenerName, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.getClientAsync(URI,ServicePartitionKey,TargetReplicaSelector,String,OperationRetrySettings)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.getExceptionHandlers()
  name: getExceptionHandlers()
  nameWithType: CommunicationClientFactoryBase<T>.getExceptionHandlers()
  returns:
    description: <p>List of Exception handlers </p>
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.client.ExceptionHandler?alt=microsoft.servicefabric.services.communication.client.ExceptionHandler&text=ExceptionHandler" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the custom exception handlers for handling exceptions on the client to service communication channel.</p>

    <p></p>
  syntax: public List<ExceptionHandler> getExceptionHandlers()
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.getExceptionHandlers()
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.getServiceResolver()
  name: getServiceResolver()
  nameWithType: CommunicationClientFactoryBase<T>.getServiceResolver()
  returns:
    description: <p>ServicePartitionResolver </p>
    type: <xref href="microsoft.servicefabric.services.client.ServicePartitionResolver?alt=microsoft.servicefabric.services.client.ServicePartitionResolver&text=ServicePartitionResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the ServicePartitionResolver used by the client factory for resolving the service endpoint.</p>

    <p></p>
  syntax: public ServicePartitionResolver getServiceResolver()
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.getServiceResolver()
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.getTraceId()
  name: getTraceId()
  nameWithType: CommunicationClientFactoryBase<T>.getTraceId()
  returns:
    description: <p>Trace identifier </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the trace identifier that is used to identify an instance of the CommunicationClientFactory. This is used as a correlation identifier for tracing/logging.</p>

    <p></p>
  syntax: protected String getTraceId()
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.getTraceId()
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.reportOperationExceptionAsync(T client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  name: reportOperationExceptionAsync(T client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  nameWithType: CommunicationClientFactoryBase<T>.reportOperationExceptionAsync(T client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  parameters:
  - description: <p>Communication client </p>
    name: client
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  - description: <p>exception info </p>
    name: exceptionInformation
    type: <xref href="microsoft.servicefabric.services.communication.client.ExceptionInformation?alt=microsoft.servicefabric.services.communication.client.ExceptionInformation&text=ExceptionInformation" data-throw-if-not-resolved="False"/>
  - description: <p>retry settings </p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A CompletableFuture that represents outstanding operation. The result of the Task is a <xref uid="microsoft.servicefabric.services.communication.client.OperationRetryControl" data-throw-if-not-resolved="false" data-raw-source="OperationRetryControl"></xref> object that determines how the retry policy for this exception. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.services.communication.client.OperationRetryControl?alt=microsoft.servicefabric.services.communication.client.OperationRetryControl&text=OperationRetryControl" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Handles the exceptions that occur in the CommunicationClient when sending a message to the Service</p>

    <p></p>
  syntax: public CompletableFuture<OperationRetryControl> reportOperationExceptionAsync(T client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.reportOperationExceptionAsync(T,ExceptionInformation,OperationRetrySettings)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.validateClient(String endpoint, T client)
  name: validateClient(String endpoint, T client)
  nameWithType: CommunicationClientFactoryBase<T>.validateClient(String endpoint, T client)
  parameters:
  - description: <p>the endpoint </p>
    name: endpoint
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the communication client </p>
    name: client
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if the client is valid, false otherwise </p>
    type: <xref href="abstract+boolean?alt=abstract+boolean&text=abstract+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns true if the client is still valid and connected to the endpoint specified in the parameter.</p>

    <p></p>
  syntax: protected abstract boolean validateClient(String endpoint, T client)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.validateClient(String,T)
- fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T extends CommunicationClient>.validateClient(T client)
  name: validateClient(T client)
  nameWithType: CommunicationClientFactoryBase<T>.validateClient(T client)
  parameters:
  - description: <p>the communication client </p>
    name: client
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if the client is valid, false otherwise </p>
    type: <xref href="abstract+boolean?alt=abstract+boolean&text=abstract+boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns true if the client is still valid. Connection oriented transports can use this method to indicate that the client is no longer connected to the service.</p>

    <p></p>
  syntax: protected abstract boolean validateClient(T client)
  uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase.validateClient(T)
nameWithType: CommunicationClientFactoryBase<T>
syntax: public class CommunicationClientFactoryBase<T extends CommunicationClient> implements CommunicationClientFactory<T>
type: class
typeParameters:
- description: <p>The type of communication client </p>
  name: T
uid: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase
fullName: microsoft.servicefabric.services.communication.client.CommunicationClientFactoryBase<T>
name: CommunicationClientFactoryBase<T>
package: microsoft.servicefabric.services.communication.client
summary: >-
  <p>Provides the base implementation of CommunicationClientFactory for creating communication clients to talk to service fabric services. Extend the CommunicationClientFactoryBase class to create communication clients for custom transport implementations. This class maintains a cache of communication clients and attempts to reuse the clients for requests to the same service endpoint.</p>

  <p></p>
metadata: {}
