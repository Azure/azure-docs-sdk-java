### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.QueueDescription(String path)
  name: QueueDescription(String path)
  nameWithType: QueueDescription.QueueDescription(String path)
  parameters:
  - description: "<p>- Path of the topic. Max length is 260 chars. Cannot start or end with a slash. Cannot have restricted characters: '@','?','#','*' </p>"
    name: path
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Initializes a new instance of QueueDescription with the specified relative path. </p>
  syntax: public QueueDescription(String path)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.QueueDescription(String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.equals(Object o)
  name: equals(Object o)
  nameWithType: QueueDescription.equals(Object o)
  parameters:
  - name: o
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean equals(Object o)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.equals(Object)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getAuthorizationRules()
  name: getAuthorizationRules()
  nameWithType: QueueDescription.getAuthorizationRules()
  returns:
    description: <p>The <xref uid="com.microsoft.azure.servicebus.management.AuthorizationRule" data-throw-if-not-resolved="false" data-raw-source="AuthorizationRule"></xref> on the queue to control user access at entity level. </p>
    type: List&lt;<xref href="com.microsoft.azure.servicebus.management.AuthorizationRule?alt=com.microsoft.azure.servicebus.management.AuthorizationRule&text=AuthorizationRule" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<AuthorizationRule> getAuthorizationRules()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getAuthorizationRules()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getAutoDeleteOnIdle()
  name: getAutoDeleteOnIdle()
  nameWithType: QueueDescription.getAutoDeleteOnIdle()
  returns:
    description: <p>The idle interval after which the queue is automatically deleted. Default value is <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ManagementClientConstants#MAX_DURATION"></xref></p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public Duration getAutoDeleteOnIdle()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getAutoDeleteOnIdle()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getDefaultMessageTimeToLive()
  name: getDefaultMessageTimeToLive()
  nameWithType: QueueDescription.getDefaultMessageTimeToLive()
  returns:
    description: <p>The default time to live value for the messages. Default value is <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ManagementClientConstants#MAX_DURATION"></xref></p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Time-To-Live is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when <xref uid="com.microsoft.azure.servicebus.IMessage.getTimeToLive()" data-throw-if-not-resolved="false" data-raw-source="IMessage#getTimeToLive()"></xref> is not set on a message itself. Messages older than their TimeToLive value will expire and no longer be retained in the message store. Subscribers will be unable to receive expired messages. </p>
  syntax: public Duration getDefaultMessageTimeToLive()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getDefaultMessageTimeToLive()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getDuplicationDetectionHistoryTimeWindow()
  name: getDuplicationDetectionHistoryTimeWindow()
  nameWithType: QueueDescription.getDuplicationDetectionHistoryTimeWindow()
  returns:
    description: <p>The duration of duplicate detection history that is maintained by the service. The default value is 1 minute. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public Duration getDuplicationDetectionHistoryTimeWindow()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getDuplicationDetectionHistoryTimeWindow()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getEntityStatus()
  name: getEntityStatus()
  nameWithType: QueueDescription.getEntityStatus()
  returns:
    description: <p>The current status of the queue (Enabled / Disabled). The default value is Enabled. </p>
    type: <xref href="com.microsoft.azure.servicebus.management.EntityStatus?alt=com.microsoft.azure.servicebus.management.EntityStatus&text=EntityStatus" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the status of the entity. When an entity is disabled, that entity cannot send or receive messages. </p>
  syntax: public EntityStatus getEntityStatus()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getEntityStatus()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getForwardDeadLetteredMessagesTo()
  name: getForwardDeadLetteredMessagesTo()
  nameWithType: QueueDescription.getForwardDeadLetteredMessagesTo()
  returns:
    description: <p>The path of the recipient entity to which all the dead-lettered messages of this queue are forwarded to. If set, user cannot manually receive dead-lettered messages from this queue. The destination entity must already exist. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getForwardDeadLetteredMessagesTo()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getForwardDeadLetteredMessagesTo()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getForwardTo()
  name: getForwardTo()
  nameWithType: QueueDescription.getForwardTo()
  returns:
    description: <p>The path of the recipient entity to which all the messages sent to the queue are forwarded to. If set, user cannot manually receive messages from this queue. The destination entity must be an already existing entity. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getForwardTo()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getForwardTo()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getLockDuration()
  name: getLockDuration()
  nameWithType: QueueDescription.getLockDuration()
  returns:
    description: <p>The duration of a peek lock. Default value is 60 seconds. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>The amount of time that the message is locked by a given receiver so that no other receiver receives the same message. </p>
  syntax: public Duration getLockDuration()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getLockDuration()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getMaxDeliveryCount()
  name: getMaxDeliveryCount()
  nameWithType: QueueDescription.getMaxDeliveryCount()
  returns:
    description: <p>Default value is 10. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>The maximum delivery count of a message before it is dead-lettered. The delivery count is increased when a message is received in <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.servicebus.ReceiveMode#PEEKLOCK"></xref> mode and didn't complete the message before the message lock expired. </p>
  syntax: public int getMaxDeliveryCount()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getMaxDeliveryCount()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getMaxSizeInMB()
  name: getMaxSizeInMB()
  nameWithType: QueueDescription.getMaxSizeInMB()
  returns:
    description: <p>the maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default value is 1024. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long getMaxSizeInMB()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getMaxSizeInMB()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getPath()
  name: getPath()
  nameWithType: QueueDescription.getPath()
  returns:
    description: <p>The path of the queue. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getPath()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getPath()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.getUserMetadata()
  name: getUserMetadata()
  nameWithType: QueueDescription.getUserMetadata()
  returns:
    description: <p>Custom metdata that user can associate with the description. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getUserMetadata()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.getUserMetadata()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.hashCode()
  name: hashCode()
  nameWithType: QueueDescription.hashCode()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int hashCode()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.hashCode()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.isEnableBatchedOperations()
  name: isEnableBatchedOperations()
  nameWithType: QueueDescription.isEnableBatchedOperations()
  returns:
    description: <p>Indicates whether server-side batched operations are enabled. Defaults to true. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isEnableBatchedOperations()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.isEnableBatchedOperations()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.isEnableDeadLetteringOnMessageExpiration()
  name: isEnableDeadLetteringOnMessageExpiration()
  nameWithType: QueueDescription.isEnableDeadLetteringOnMessageExpiration()
  returns:
    description: <p>If true, the expired messages are moved to dead-letter sub-queue. Default value is false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Indicates whether this queue has dead letter support when a message expires. </p>
  syntax: public boolean isEnableDeadLetteringOnMessageExpiration()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.isEnableDeadLetteringOnMessageExpiration()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.isEnablePartitioning()
  name: isEnablePartitioning()
  nameWithType: QueueDescription.isEnablePartitioning()
  returns:
    description: <p>boolean indicating whether the queue is to be partitioned across multiple message brokers. Defaults to false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isEnablePartitioning()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.isEnablePartitioning()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.isRequiresDuplicateDetection()
  name: isRequiresDuplicateDetection()
  nameWithType: QueueDescription.isRequiresDuplicateDetection()
  returns:
    description: <p>value indicating if the queue requires guard against duplicate messages. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>If enabled, duplicate messages having same <xref uid="com.microsoft.azure.servicebus.IMessage.getMessageId()" data-throw-if-not-resolved="false" data-raw-source="IMessage#getMessageId()"></xref> and sent to queue within duration of <xref uid="com.microsoft.azure.servicebus.management.QueueDescription.getDuplicationDetectionHistoryTimeWindow()" data-throw-if-not-resolved="false" data-raw-source="getDuplicationDetectionHistoryTimeWindow"></xref> will be discarded. </p>
  syntax: public boolean isRequiresDuplicateDetection()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.isRequiresDuplicateDetection()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.isRequiresSession()
  name: isRequiresSession()
  nameWithType: QueueDescription.isRequiresSession()
  returns:
    description: <p>boolean that indicates whether the queue supports the concept of session. Sessionful-messages follow FIFO ordering. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isRequiresSession()
  uid: com.microsoft.azure.servicebus.management.QueueDescription.isRequiresSession()
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setAuthorizationRules(List<AuthorizationRule> authorizationRules)
  name: setAuthorizationRules(List<AuthorizationRule> authorizationRules)
  nameWithType: QueueDescription.setAuthorizationRules(List<AuthorizationRule> authorizationRules)
  parameters:
  - description: <p>- The <xref uid="com.microsoft.azure.servicebus.management.AuthorizationRule" data-throw-if-not-resolved="false" data-raw-source="AuthorizationRule"></xref> on the queue to control user access at entity level. </p>
    name: authorizationRules
    type: List&lt;<xref href="com.microsoft.azure.servicebus.management.AuthorizationRule?alt=com.microsoft.azure.servicebus.management.AuthorizationRule&text=AuthorizationRule" data-throw-if-not-resolved="False"/>&gt;
  syntax: public void setAuthorizationRules(List<AuthorizationRule> authorizationRules)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setAuthorizationRules(List<AuthorizationRule>)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setAutoDeleteOnIdle(Duration autoDeleteOnIdle)
  name: setAutoDeleteOnIdle(Duration autoDeleteOnIdle)
  nameWithType: QueueDescription.setAutoDeleteOnIdle(Duration autoDeleteOnIdle)
  parameters:
  - description: <p>- The idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes. </p>
    name: autoDeleteOnIdle
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public void setAutoDeleteOnIdle(Duration autoDeleteOnIdle)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setAutoDeleteOnIdle(Duration)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive)
  name: setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive)
  nameWithType: QueueDescription.setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive)
  parameters:
  - description: <p>- The default message time to live value. Value cannot be lower than 1 second. See <xref uid="com.microsoft.azure.servicebus.management.QueueDescription.getDefaultMessageTimeToLive()" data-throw-if-not-resolved="false" data-raw-source="getDefaultMessageTimeToLive()"></xref></p>
    name: defaultMessageTimeToLive
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public void setDefaultMessageTimeToLive(Duration defaultMessageTimeToLive)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setDefaultMessageTimeToLive(Duration)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setDuplicationDetectionHistoryTimeWindow(Duration duplicationDetectionHistoryTimeWindow)
  name: setDuplicationDetectionHistoryTimeWindow(Duration duplicationDetectionHistoryTimeWindow)
  nameWithType: QueueDescription.setDuplicationDetectionHistoryTimeWindow(Duration duplicationDetectionHistoryTimeWindow)
  parameters:
  - description: <p>- The duration of duplicate detection history that is maintained by the service. Max value is 1 day and minimum is 20 seconds. </p>
    name: duplicationDetectionHistoryTimeWindow
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public void setDuplicationDetectionHistoryTimeWindow(Duration duplicationDetectionHistoryTimeWindow)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setDuplicationDetectionHistoryTimeWindow(Duration)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setEnableBatchedOperations(boolean enableBatchedOperations)
  name: setEnableBatchedOperations(boolean enableBatchedOperations)
  nameWithType: QueueDescription.setEnableBatchedOperations(boolean enableBatchedOperations)
  parameters:
  - description: <p>- Indicates whether server-side batched operations are enabled. </p>
    name: enableBatchedOperations
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setEnableBatchedOperations(boolean enableBatchedOperations)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setEnableBatchedOperations(boolean)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setEnableDeadLetteringOnMessageExpiration(boolean enableDeadLetteringOnMessageExpiration)
  name: setEnableDeadLetteringOnMessageExpiration(boolean enableDeadLetteringOnMessageExpiration)
  nameWithType: QueueDescription.setEnableDeadLetteringOnMessageExpiration(boolean enableDeadLetteringOnMessageExpiration)
  parameters:
  - description: <p>- True if messages should be dead-lettered on expiration. See <xref uid="com.microsoft.azure.servicebus.management.QueueDescription.isEnableDeadLetteringOnMessageExpiration()" data-throw-if-not-resolved="false" data-raw-source="isEnableDeadLetteringOnMessageExpiration()"></xref></p>
    name: enableDeadLetteringOnMessageExpiration
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setEnableDeadLetteringOnMessageExpiration(boolean enableDeadLetteringOnMessageExpiration)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setEnableDeadLetteringOnMessageExpiration(boolean)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setEnablePartitioning(boolean enablePartitioning)
  name: setEnablePartitioning(boolean enablePartitioning)
  nameWithType: QueueDescription.setEnablePartitioning(boolean enablePartitioning)
  parameters:
  - description: <p>- true if queue is to be partitioned across multiple message brokers. </p>
    name: enablePartitioning
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setEnablePartitioning(boolean enablePartitioning)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setEnablePartitioning(boolean)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setEntityStatus(EntityStatus status)
  name: setEntityStatus(EntityStatus status)
  nameWithType: QueueDescription.setEntityStatus(EntityStatus status)
  parameters:
  - description: <p>- the status of the queue (Enabled / Disabled). When an entity is disabled, that entity cannot send or receive messages. </p>
    name: status
    type: <xref href="com.microsoft.azure.servicebus.management.EntityStatus?alt=com.microsoft.azure.servicebus.management.EntityStatus&text=EntityStatus" data-throw-if-not-resolved="False"/>
  syntax: public void setEntityStatus(EntityStatus status)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setEntityStatus(EntityStatus)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo)
  name: setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo)
  nameWithType: QueueDescription.setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo)
  parameters:
  - description: <p>- The path of the recipient entity to which all the dead-lettered messages of this queue are forwarded to. If set, user cannot manually receive dead-lettered messages from this queue. The destination entity must already exist. </p>
    name: forwardDeadLetteredMessagesTo
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setForwardDeadLetteredMessagesTo(String forwardDeadLetteredMessagesTo)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setForwardDeadLetteredMessagesTo(String)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setForwardTo(String forwardTo)
  name: setForwardTo(String forwardTo)
  nameWithType: QueueDescription.setForwardTo(String forwardTo)
  parameters:
  - description: <p>- The path of the recipient entity to which all the messages sent to the queue are forwarded to. If set, user cannot manually receive messages from this queue. The destination entity must be an already existing entity. </p>
    name: forwardTo
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setForwardTo(String forwardTo)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setForwardTo(String)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setLockDuration(Duration lockDuration)
  name: setLockDuration(Duration lockDuration)
  nameWithType: QueueDescription.setLockDuration(Duration lockDuration)
  parameters:
  - description: <p>- The duration of a peek lock. Max value is 5 minutes. </p>
    name: lockDuration
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Sets The amount of time that the message is locked by a given receiver so that no other receiver receives the same message. </p>
  syntax: public void setLockDuration(Duration lockDuration)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setLockDuration(Duration)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setMaxDeliveryCount(int maxDeliveryCount)
  name: setMaxDeliveryCount(int maxDeliveryCount)
  nameWithType: QueueDescription.setMaxDeliveryCount(int maxDeliveryCount)
  parameters:
  - description: <p>- Minimum value is 1. </p>
    name: maxDeliveryCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>The maximum delivery count of a message before it is dead-lettered. The delivery count is increased when a message is received in <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.servicebus.ReceiveMode#PEEKLOCK"></xref> mode and didn't complete the message before the message lock expired. </p>
  syntax: public void setMaxDeliveryCount(int maxDeliveryCount)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setMaxDeliveryCount(int)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setMaxSizeInMB(long maxSize)
  name: setMaxSizeInMB(long maxSize)
  nameWithType: QueueDescription.setMaxSizeInMB(long maxSize)
  parameters:
  - description: <p>- Maximum size of the queue in megabytes, which is the size of memory allocated for the queue. </p>
    name: maxSize
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public void setMaxSizeInMB(long maxSize)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setMaxSizeInMB(long)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setRequiresDuplicateDetection(boolean requiresDuplicateDetection)
  name: setRequiresDuplicateDetection(boolean requiresDuplicateDetection)
  nameWithType: QueueDescription.setRequiresDuplicateDetection(boolean requiresDuplicateDetection)
  parameters:
  - description: <p>- True if duplicate detection needs to be enabled. See also - <xref uid="com.microsoft.azure.servicebus.management.QueueDescription.isRequiresDuplicateDetection()" data-throw-if-not-resolved="false" data-raw-source="isRequiresDuplicateDetection()"></xref></p>
    name: requiresDuplicateDetection
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setRequiresDuplicateDetection(boolean requiresDuplicateDetection)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setRequiresDuplicateDetection(boolean)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setRequiresSession(boolean requiresSession)
  name: setRequiresSession(boolean requiresSession)
  nameWithType: QueueDescription.setRequiresSession(boolean requiresSession)
  parameters:
  - description: <p>- True if queue should support sessions. </p>
    name: requiresSession
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setRequiresSession(boolean requiresSession)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setRequiresSession(boolean)
- fullName: com.microsoft.azure.servicebus.management.QueueDescription.setUserMetadata(String userMetadata)
  name: setUserMetadata(String userMetadata)
  nameWithType: QueueDescription.setUserMetadata(String userMetadata)
  parameters:
  - description: <p>- Custom metdata that user can associate with the description. Cannot be null. Max length is 1024 chars </p>
    name: userMetadata
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setUserMetadata(String userMetadata)
  uid: com.microsoft.azure.servicebus.management.QueueDescription.setUserMetadata(String)
nameWithType: QueueDescription
syntax: public class QueueDescription
type: class
uid: com.microsoft.azure.servicebus.management.QueueDescription
fullName: com.microsoft.azure.servicebus.management.QueueDescription
name: QueueDescription
package: com.microsoft.azure.servicebus.management
summary: <p>Represents the metadata description of the queue. </p>
metadata: {}
