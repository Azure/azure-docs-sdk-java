### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getBatchAcknowledgementInterval()
  name: getBatchAcknowledgementInterval()
  nameWithType: ReliableStateManagerReplicatorSettings.getBatchAcknowledgementInterval()
  returns:
    description: <p>The batch acknowledgment interval. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. The default value is 5 milliseconds.</p>

    <p></p>
  syntax: public Duration getBatchAcknowledgementInterval()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getBatchAcknowledgementInterval()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getCheckpointThresholdInMB()
  name: getCheckpointThresholdInMB()
  nameWithType: ReliableStateManagerReplicatorSettings.getCheckpointThresholdInMB()
  returns:
    description: <p>The checkpoint threshold. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the checkpoint threshold. A checkpoint will be initiated when the log usage exceeds this value. Default value is 50. The unit is MB.</p>

    <p></p>
  syntax: public Integer getCheckpointThresholdInMB()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getCheckpointThresholdInMB()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getInitialCopyQueueSize()
  name: getInitialCopyQueueSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getInitialCopyQueueSize()
  returns:
    description: <p>The initial copy queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the initial size of the copy operation queue inside the replicator, which contains copy operations. Default value is 64. The value is the number of operations in the copy operation queue. Must be a power of 2.</p>

    <p></p>
  syntax: public Long getInitialCopyQueueSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getInitialCopyQueueSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  name: getInitialPrimaryReplicationQueueSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getInitialPrimaryReplicationQueueSize()
  returns:
    description: <p>The initial primary replication queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the initial primary replication queue size. Default value is 64. The value is the number of operations in the primary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public Long getInitialPrimaryReplicationQueueSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getInitialPrimaryReplicationQueueSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  name: getInitialSecondaryReplicationQueueSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getInitialSecondaryReplicationQueueSize()
  returns:
    description: <p>The initial secondary replication queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the initial secondary replication queue size. Default value is 64. The value is the number of operations in the secondary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public Long getInitialSecondaryReplicationQueueSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getInitialSecondaryReplicationQueueSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxAccumulatedBackupLogSizeInMB()
  name: getMaxAccumulatedBackupLogSizeInMB()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxAccumulatedBackupLogSizeInMB()
  returns:
    description: <p>The max accumulated backup log size in MB. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the max size for an accumulated backup log across backups. An incremental backup requests will fail if the backup logs generated by the request causes the total amount of logs accumulated including the last full backup to be greater than MaxAccumulatedBackupLogSizeInMB. In such cases, user is required to take a full backup. Default value is 800. The unit is MB.</p>

    <p></p>
  syntax: public Integer getMaxAccumulatedBackupLogSizeInMB()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxAccumulatedBackupLogSizeInMB()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxCopyQueueSize()
  name: getMaxCopyQueueSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxCopyQueueSize()
  returns:
    description: <p>The max copy queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum size of the copy operation queue inside replicator, which contains copy operations. Default value is 1024. The value is the max number of operations in the copy operation queue. Must be a power of 2.</p>

    <p></p>
  syntax: public Long getMaxCopyQueueSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxCopyQueueSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxMetadataSizeInKB()
  name: getMaxMetadataSizeInKB()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxMetadataSizeInKB()
  returns:
    description: <p>The max metadata size. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the amount of extra persistent storage space reserved for the replicator specified in kilobytes that is associated with this replica. This value must be a multiple of 4. The default value is 4. The unit is KB.</p>

    <p></p>
  syntax: public Integer getMaxMetadataSizeInKB()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxMetadataSizeInKB()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  name: getMaxPrimaryReplicationQueueMemorySize()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
  returns:
    description: <p>The max primary replication queue memory size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the max primary replication queue memory size. Default value is 0, which implies there is no memory limitation. The unit is Bytes.</p>

    <p></p>
  syntax: public Long getMaxPrimaryReplicationQueueMemorySize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxPrimaryReplicationQueueMemorySize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  name: getMaxPrimaryReplicationQueueSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxPrimaryReplicationQueueSize()
  returns:
    description: <p>The max primary replication queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the max primary replication queue size. Default value is 1024. The value is the max number of operations in the primary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public Long getMaxPrimaryReplicationQueueSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxPrimaryReplicationQueueSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxRecordSizeInKB()
  name: getMaxRecordSizeInKB()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxRecordSizeInKB()
  returns:
    description: <p>The max record size. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the largest record size which the replicator may write specified in kilobytes for the log that is associated with this replica. This value must be a multiple of 4 and greater than or equal to 128. The default value is 1024. The unit is KB.</p>

    <p></p>
  syntax: public Integer getMaxRecordSizeInKB()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxRecordSizeInKB()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxReplicationMessageSize()
  name: getMaxReplicationMessageSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxReplicationMessageSize()
  returns:
    description: <p>The max replication message size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the max replication message size. Default value is 50MB. The unit is Bytes.</p>

    <p></p>
  syntax: public Long getMaxReplicationMessageSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxReplicationMessageSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  name: getMaxSecondaryReplicationQueueMemorySize()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
  returns:
    description: <p>The max secondary replication queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the max secondary replication queue memory size. Default value is 0, which implies there is no memory limitation. The unit is Bytes.</p>

    <p></p>
  syntax: public Long getMaxSecondaryReplicationQueueMemorySize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxSecondaryReplicationQueueMemorySize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  name: getMaxSecondaryReplicationQueueSize()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxSecondaryReplicationQueueSize()
  returns:
    description: <p>The initial secondary replication queue size. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the initial secondary replication queue size. Default value is 64. The value is the number of operations in the secondary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public Long getMaxSecondaryReplicationQueueSize()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxSecondaryReplicationQueueSize()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxWriteQueueDepthInKB()
  name: getMaxWriteQueueDepthInKB()
  nameWithType: ReliableStateManagerReplicatorSettings.getMaxWriteQueueDepthInKB()
  returns:
    description: <p>The max write queue depth. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum write queue depth that the core logger can use as specified in kilobytes for the log that is associated with this replica. This value is the maximum number of bytes that can be outstanding during core logger updates. It may be 0 for the core logger to compute an appropriate value or a multiple of 4. The default value is 0. The unit is KB.</p>

    <p></p>
  syntax: public Integer getMaxWriteQueueDepthInKB()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMaxWriteQueueDepthInKB()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMinLogSizeInMB()
  name: getMinLogSizeInMB()
  nameWithType: ReliableStateManagerReplicatorSettings.getMinLogSizeInMB()
  returns:
    description: <p>The minimum log size. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the minimum log size. A truncation will not be initiated if it would reduce the size of the log to below this value. Default value is 0.</p>

    <p></p>
  syntax: public Integer getMinLogSizeInMB()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getMinLogSizeInMB()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getOptimizeLogForLowerDiskUsage()
  name: getOptimizeLogForLowerDiskUsage()
  nameWithType: ReliableStateManagerReplicatorSettings.getOptimizeLogForLowerDiskUsage()
  returns:
    description: <p>If the OptimizeLogForLowerDiskUsage option is enabled. </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a flag, when true indicates the log should optimize in a way where less disk space is used for the log at the cost of IO performance. If false, the log will use more disk space but have better IO performance. Default value is true.</p>

    <p></p>
  syntax: public Boolean getOptimizeLogForLowerDiskUsage()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getOptimizeLogForLowerDiskUsage()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getReplicatorAddress()
  name: getReplicatorAddress()
  nameWithType: ReliableStateManagerReplicatorSettings.getReplicatorAddress()
  returns:
    description: <p>The replicator address. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the address in {ip}:{port} format that this replicator will use when communicating with other replicators. The default value is "localhost:0", which picks a dynamic port number in runtime. If replicator is running inside a container, you should try setting up <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReliableStateManagerReplicatorSettings#replicatorListenAddress"></xref> and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReliableStateManagerReplicatorSettings#replicatorPublishAddress"></xref>.</p>

    <p></p>
  syntax: public String getReplicatorAddress()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getReplicatorAddress()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getReplicatorListenAddress()
  name: getReplicatorListenAddress()
  nameWithType: ReliableStateManagerReplicatorSettings.getReplicatorListenAddress()
  returns:
    description: <p>The replicator address. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the address in {ip}:{port} format that this replicator will use to receive information from other replicators. The default value is "localhost:0", which picks a dynamic port number in runtime. {ip} part of the listen address can be obtained from <xref uid="system.fabric.CodePackageActivationContext.getServiceListenAddress()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getServiceListenAddress()"></xref>.</p>

    <p></p>
  syntax: public String getReplicatorListenAddress()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getReplicatorListenAddress()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getReplicatorPublishAddress()
  name: getReplicatorPublishAddress()
  nameWithType: ReliableStateManagerReplicatorSettings.getReplicatorPublishAddress()
  returns:
    description: <p>The replicator address. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the address in {ip}:{port} format that this replicator will use to send information to other replicators. The default value is "localhost:0", which picks a dynamic port number in runtime. {ip} part of the publish address can be obtained from <xref uid="system.fabric.CodePackageActivationContext.getServicePublishAddress()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getServicePublishAddress()"></xref>.</p>

    <p></p>
  syntax: public String getReplicatorPublishAddress()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getReplicatorPublishAddress()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getRetryInterval()
  name: getRetryInterval()
  nameWithType: ReliableStateManagerReplicatorSettings.getRetryInterval()
  returns:
    description: <p>retryInterval </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Gets how long the replicator waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message. The default value is 5 seconds. </p>
  syntax: public Duration getRetryInterval()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getRetryInterval()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSecondaryClearAcknowledgedOperations()
  name: getSecondaryClearAcknowledgedOperations()
  nameWithType: ReliableStateManagerReplicatorSettings.getSecondaryClearAcknowledgedOperations()
  returns:
    description: <p>If the SecondaryClearAcknowledgedOperations option is enabled. </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a flag, when true indicates the secondary replicator should clear the in-memory queue after acknowledging the operations to the primary (After the operations are flushed to disk). Default value is false. Settings this to "TRUE" can result in additional disk reads on the new primary, while catching up replicas after a failover.</p>

    <p></p>
  syntax: public Boolean getSecondaryClearAcknowledgedOperations()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSecondaryClearAcknowledgedOperations()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSecurityCredentials()
  name: getSecurityCredentials()
  nameWithType: ReliableStateManagerReplicatorSettings.getSecurityCredentials()
  returns:
    description: <p>The security credentials. </p>
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the security credentials for securing the traffic between replicators.</p>

    <p></p>
  syntax: public SecurityCredentials getSecurityCredentials()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSecurityCredentials()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSharedLogId()
  name: getSharedLogId()
  nameWithType: ReliableStateManagerReplicatorSettings.getSharedLogId()
  returns:
    description: <p>The shared log id. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the GUID identifier for the log container that is shared by a number of replicas on the windows fabric node including this one. Default value is "" which causes the replicator to use the global shared log for the node.</p>

    <p></p>
  syntax: public String getSharedLogId()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSharedLogId()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSharedLogPath()
  name: getSharedLogPath()
  nameWithType: ReliableStateManagerReplicatorSettings.getSharedLogPath()
  returns:
    description: <p>The shared log path. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the full pathname to the log container that is shared by a number of replicas on the node including this one. Default value is "" which causes the replicator to use the global shared log for the node.</p>

    <p></p>
  syntax: public String getSharedLogPath()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSharedLogPath()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSlowApiMonitoringDuration()
  name: getSlowApiMonitoringDuration()
  nameWithType: ReliableStateManagerReplicatorSettings.getSlowApiMonitoringDuration()
  returns:
    description: <p>SlowApiMonitoringDuration </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the interval after which the replicator sends a warning health report that the API is slow and is taking longer than expected duration. Default value is 5 minutes. </p>
  syntax: public Duration getSlowApiMonitoringDuration()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getSlowApiMonitoringDuration()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getThrottlingThresholdFactor()
  name: getThrottlingThresholdFactor()
  nameWithType: ReliableStateManagerReplicatorSettings.getThrottlingThresholdFactor()
  returns:
    description: <p>The throttling threshold. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the throttling threshold factor. Throttling will be initiated when the log usage exceeds this value times MinLogSizeInMB. Default value is 3.</p>

    <p></p>
  syntax: public Integer getThrottlingThresholdFactor()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getThrottlingThresholdFactor()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getTruncationThresholdFactor()
  name: getTruncationThresholdFactor()
  nameWithType: ReliableStateManagerReplicatorSettings.getTruncationThresholdFactor()
  returns:
    description: <p>The truncation threshold. </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the truncation threshold factor. A truncation will be initiated when the log usage exceeds this value times MinLogSizeInMB. Default value is 2.</p>

    <p></p>
  syntax: public Integer getTruncationThresholdFactor()
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.getTruncationThresholdFactor()
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  name: setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  nameWithType: ReliableStateManagerReplicatorSettings.setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  parameters:
  - description: <p>The batch acknowledgment interval. </p>
    name: batchAcknowledgementInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. The default value is 5 milliseconds.</p>

    <p></p>
  syntax: public void setBatchAcknowledgementInterval(Duration batchAcknowledgementInterval)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setBatchAcknowledgementInterval(Duration)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setCheckpointThresholdInMB(Integer checkpointThresholdInMB)
  name: setCheckpointThresholdInMB(Integer checkpointThresholdInMB)
  nameWithType: ReliableStateManagerReplicatorSettings.setCheckpointThresholdInMB(Integer checkpointThresholdInMB)
  parameters:
  - description: <p>The checkpoint threshold. </p>
    name: checkpointThresholdInMB
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the checkpoint threshold. A checkpoint will be initiated when the log usage exceeds this value. Default value is 50. The unit is MB.</p>

    <p></p>
  syntax: public void setCheckpointThresholdInMB(Integer checkpointThresholdInMB)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setCheckpointThresholdInMB(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setInitialCopyQueueSize(Long initialCopyQueueSize)
  name: setInitialCopyQueueSize(Long initialCopyQueueSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setInitialCopyQueueSize(Long initialCopyQueueSize)
  parameters:
  - description: <p>The initial copy queue size. </p>
    name: initialCopyQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the initial size of the copy operation queue inside the replicator, which contains copy operations. Default value is 64. The value is the number of operations in the copy operation queue. Must be a power of 2.</p>

    <p></p>
  syntax: public void setInitialCopyQueueSize(Long initialCopyQueueSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setInitialCopyQueueSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setInitialPrimaryReplicationQueueSize(Long initialPrimaryReplicationQueueSize)
  name: setInitialPrimaryReplicationQueueSize(Long initialPrimaryReplicationQueueSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setInitialPrimaryReplicationQueueSize(Long initialPrimaryReplicationQueueSize)
  parameters:
  - description: <p>The initial primary replication queue size. </p>
    name: initialPrimaryReplicationQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the initial primary replication queue size. Default value is 64. The value is the number of operations in the primary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public void setInitialPrimaryReplicationQueueSize(Long initialPrimaryReplicationQueueSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setInitialPrimaryReplicationQueueSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setInitialSecondaryReplicationQueueSize(Long initialSecondaryReplicationQueueSize)
  name: setInitialSecondaryReplicationQueueSize(Long initialSecondaryReplicationQueueSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setInitialSecondaryReplicationQueueSize(Long initialSecondaryReplicationQueueSize)
  parameters:
  - description: <p>The initial secondary replication queue size. </p>
    name: initialSecondaryReplicationQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the initial secondary replication queue size. Default value is 64. The value is the number of operations in the secondary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public void setInitialSecondaryReplicationQueueSize(Long initialSecondaryReplicationQueueSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setInitialSecondaryReplicationQueueSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxAccumulatedBackupLogSizeInMB(Integer maxAccumulatedBackupLogSizeInMB)
  name: setMaxAccumulatedBackupLogSizeInMB(Integer maxAccumulatedBackupLogSizeInMB)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxAccumulatedBackupLogSizeInMB(Integer maxAccumulatedBackupLogSizeInMB)
  parameters:
  - description: <p>The max accumulated backup log size in MB. </p>
    name: maxAccumulatedBackupLogSizeInMB
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the max size for an accumulated backup log across backups. An incremental backup requests will fail if the backup logs generated by the request causes the total amount of logs accumulated including the last full backup to be greater than MaxAccumulatedBackupLogSizeInMB. In such cases, user is required to take a full backup. Default value is 800. The unit is MB.</p>

    <p></p>
  syntax: public void setMaxAccumulatedBackupLogSizeInMB(Integer maxAccumulatedBackupLogSizeInMB)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxAccumulatedBackupLogSizeInMB(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxCopyQueueSize(Long maxCopyQueueSize)
  name: setMaxCopyQueueSize(Long maxCopyQueueSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxCopyQueueSize(Long maxCopyQueueSize)
  parameters:
  - description: <p>The max copy queue size. </p>
    name: maxCopyQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum size of the copy operation queue inside replicator, which contains copy operations. Default value is 1024. The value is the max number of operations in the copy operation queue. Must be a power of 2.</p>

    <p></p>
  syntax: public void setMaxCopyQueueSize(Long maxCopyQueueSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxCopyQueueSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxMetadataSizeInKB(Integer maxMetadataSizeInKB)
  name: setMaxMetadataSizeInKB(Integer maxMetadataSizeInKB)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxMetadataSizeInKB(Integer maxMetadataSizeInKB)
  parameters:
  - description: <p>The max metadata size. </p>
    name: maxMetadataSizeInKB
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the amount of extra persistent storage space reserved for the replicator specified in kilobytes that is associated with this replica. This value must be a multiple of 4. The default value is 4. The unit is KB.</p>

    <p></p>
  syntax: public void setMaxMetadataSizeInKB(Integer maxMetadataSizeInKB)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxMetadataSizeInKB(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(Long maxPrimaryReplicationQueueMemorySize)
  name: setMaxPrimaryReplicationQueueMemorySize(Long maxPrimaryReplicationQueueMemorySize)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(Long maxPrimaryReplicationQueueMemorySize)
  parameters:
  - description: <p>The max primary replication queue memory size. </p>
    name: maxPrimaryReplicationQueueMemorySize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the max primary replication queue memory size. Default value is 0, which implies there is no memory limitation. The unit is Bytes.</p>

    <p></p>
  syntax: public void setMaxPrimaryReplicationQueueMemorySize(Long maxPrimaryReplicationQueueMemorySize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxPrimaryReplicationQueueMemorySize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxPrimaryReplicationQueueSize(Long maxPrimaryReplicationQueueSize)
  name: setMaxPrimaryReplicationQueueSize(Long maxPrimaryReplicationQueueSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxPrimaryReplicationQueueSize(Long maxPrimaryReplicationQueueSize)
  parameters:
  - description: <p>The max primary replication queue size. </p>
    name: maxPrimaryReplicationQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the max primary replication queue size. Default value is 1024. The value is the max number of operations in the primary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public void setMaxPrimaryReplicationQueueSize(Long maxPrimaryReplicationQueueSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxPrimaryReplicationQueueSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxRecordSizeInKB(Integer maxRecordSizeInKB)
  name: setMaxRecordSizeInKB(Integer maxRecordSizeInKB)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxRecordSizeInKB(Integer maxRecordSizeInKB)
  parameters:
  - description: <p>The max record size. </p>
    name: maxRecordSizeInKB
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the largest record size which the replicator may write specified in kilobytes for the log that is associated with this replica. This value must be a multiple of 4 and greater than or equal to 128. The default value is 1024. The unit is KB.</p>

    <p></p>
  syntax: public void setMaxRecordSizeInKB(Integer maxRecordSizeInKB)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxRecordSizeInKB(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxReplicationMessageSize(Long maxReplicationMessageSize)
  name: setMaxReplicationMessageSize(Long maxReplicationMessageSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxReplicationMessageSize(Long maxReplicationMessageSize)
  parameters:
  - description: <p>The max replication message size. </p>
    name: maxReplicationMessageSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the max replication message size. Default value is 50MB. The unit is Bytes.</p>

    <p></p>
  syntax: public void setMaxReplicationMessageSize(Long maxReplicationMessageSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxReplicationMessageSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(Long maxSecondaryReplicationQueueMemorySize)
  name: setMaxSecondaryReplicationQueueMemorySize(Long maxSecondaryReplicationQueueMemorySize)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(Long maxSecondaryReplicationQueueMemorySize)
  parameters:
  - description: <p>The max secondary replication queue size. </p>
    name: maxSecondaryReplicationQueueMemorySize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the max secondary replication queue memory size. Default value is 0, which implies there is no memory limitation. The unit is Bytes.</p>

    <p></p>
  syntax: public void setMaxSecondaryReplicationQueueMemorySize(Long maxSecondaryReplicationQueueMemorySize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxSecondaryReplicationQueueMemorySize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxSecondaryReplicationQueueSize(Long maxSecondaryReplicationQueueSize)
  name: setMaxSecondaryReplicationQueueSize(Long maxSecondaryReplicationQueueSize)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxSecondaryReplicationQueueSize(Long maxSecondaryReplicationQueueSize)
  parameters:
  - description: <p>The initial secondary replication queue size. </p>
    name: maxSecondaryReplicationQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the initial secondary replication queue size. Default value is 64. The value is the number of operations in the secondary replication queue. Must be a power of 2.</p>

    <p></p>
  syntax: public void setMaxSecondaryReplicationQueueSize(Long maxSecondaryReplicationQueueSize)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxSecondaryReplicationQueueSize(Long)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxWriteQueueDepthInKB(Integer maxWriteQueueDepthInKB)
  name: setMaxWriteQueueDepthInKB(Integer maxWriteQueueDepthInKB)
  nameWithType: ReliableStateManagerReplicatorSettings.setMaxWriteQueueDepthInKB(Integer maxWriteQueueDepthInKB)
  parameters:
  - description: <p>The max write queue depth. </p>
    name: maxWriteQueueDepthInKB
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum write queue depth that the core logger can use as specified in kilobytes for the log that is associated with this replica. This value is the maximum number of bytes that can be outstanding during core logger updates. It may be 0 for the core logger to compute an appropriate value or a multiple of 4. The default value is 0. The unit is KB.</p>

    <p></p>
  syntax: public void setMaxWriteQueueDepthInKB(Integer maxWriteQueueDepthInKB)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMaxWriteQueueDepthInKB(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMinLogSizeInMB(Integer minLogSizeInMB)
  name: setMinLogSizeInMB(Integer minLogSizeInMB)
  nameWithType: ReliableStateManagerReplicatorSettings.setMinLogSizeInMB(Integer minLogSizeInMB)
  parameters:
  - description: <p>The minimum log size. </p>
    name: minLogSizeInMB
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the minimum log size. A truncation will not be initiated if it would reduce the size of the log to below this value. Default value is 0.</p>

    <p></p>
  syntax: public void setMinLogSizeInMB(Integer minLogSizeInMB)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setMinLogSizeInMB(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setOptimizeLogForLowerDiskUsage(Boolean optimizeLogForLowerDiskUsage)
  name: setOptimizeLogForLowerDiskUsage(Boolean optimizeLogForLowerDiskUsage)
  nameWithType: ReliableStateManagerReplicatorSettings.setOptimizeLogForLowerDiskUsage(Boolean optimizeLogForLowerDiskUsage)
  parameters:
  - description: <p>If the OptimizeLogForLowerDiskUsage option is enabled. </p>
    name: optimizeLogForLowerDiskUsage
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a flag, when true indicates the log should optimize in a way where less disk space is used for the log at the cost of IO performance. If false, the log will use more disk space but have better IO performance. Default value is true.</p>

    <p></p>
  syntax: public void setOptimizeLogForLowerDiskUsage(Boolean optimizeLogForLowerDiskUsage)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setOptimizeLogForLowerDiskUsage(Boolean)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setReplicatorAddress(String replicatorAddress)
  name: setReplicatorAddress(String replicatorAddress)
  nameWithType: ReliableStateManagerReplicatorSettings.setReplicatorAddress(String replicatorAddress)
  parameters:
  - description: <p>The replicator address. </p>
    name: replicatorAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the address in {ip}:{port} format that this replicator will use when communicating with other replicators. The default value is "localhost:0", which picks a dynamic port number in runtime. If replicator is running inside a container, you should try setting up <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReliableStateManagerReplicatorSettings#replicatorListenAddress"></xref> and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ReliableStateManagerReplicatorSettings#replicatorPublishAddress"></xref>.</p>

    <p></p>
  syntax: public void setReplicatorAddress(String replicatorAddress)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setReplicatorAddress(String)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setReplicatorListenAddress(String replicatorListenAddress)
  name: setReplicatorListenAddress(String replicatorListenAddress)
  nameWithType: ReliableStateManagerReplicatorSettings.setReplicatorListenAddress(String replicatorListenAddress)
  parameters:
  - description: <p>The replicator address. </p>
    name: replicatorListenAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the address in {ip}:{port} format that this replicator will use to receive information from other replicators. The default value is "localhost:0", which picks a dynamic port number in runtime. {ip} part of the listen address can be obtained from <xref uid="system.fabric.CodePackageActivationContext.getServiceListenAddress()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getServiceListenAddress()"></xref>.</p>

    <p></p>
  syntax: public void setReplicatorListenAddress(String replicatorListenAddress)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setReplicatorListenAddress(String)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setReplicatorPublishAddress(String replicatorPublishAddress)
  name: setReplicatorPublishAddress(String replicatorPublishAddress)
  nameWithType: ReliableStateManagerReplicatorSettings.setReplicatorPublishAddress(String replicatorPublishAddress)
  parameters:
  - description: <p>The replicator address. </p>
    name: replicatorPublishAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the address in {ip}:{port} format that this replicator will use to send information to other replicators. The default value is "localhost:0", which picks a dynamic port number in runtime. {ip} part of the publish address can be obtained from <xref uid="system.fabric.CodePackageActivationContext.getServicePublishAddress()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getServicePublishAddress()"></xref>.</p>

    <p></p>
  syntax: public void setReplicatorPublishAddress(String replicatorPublishAddress)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setReplicatorPublishAddress(String)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setRetryInterval(Duration retryInterval)
  name: setRetryInterval(Duration retryInterval)
  nameWithType: ReliableStateManagerReplicatorSettings.setRetryInterval(Duration retryInterval)
  parameters:
  - description: <p>Retry interval </p>
    name: retryInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Sets how long the replicator waits after it transmits a message from the primary to the secondary for the secondary to acknowledge that it has received the message. The default value is 5 seconds. </p>
  syntax: public void setRetryInterval(Duration retryInterval)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setRetryInterval(Duration)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSecondaryClearAcknowledgedOperations(Boolean secondaryClearAcknowledgedOperations)
  name: setSecondaryClearAcknowledgedOperations(Boolean secondaryClearAcknowledgedOperations)
  nameWithType: ReliableStateManagerReplicatorSettings.setSecondaryClearAcknowledgedOperations(Boolean secondaryClearAcknowledgedOperations)
  parameters:
  - description: <p>If the SecondaryClearAcknowledgedOperations option is enabled. </p>
    name: secondaryClearAcknowledgedOperations
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a flag, when true indicates the secondary replicator should clear the in-memory queue after acknowledging the operations to the primary (After the operations are flushed to disk). Default value is false. Settings this to "TRUE" can result in additional disk reads on the new primary, while catching up replicas after a failover.</p>

    <p></p>
  syntax: public void setSecondaryClearAcknowledgedOperations(Boolean secondaryClearAcknowledgedOperations)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSecondaryClearAcknowledgedOperations(Boolean)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  name: setSecurityCredentials(SecurityCredentials securityCredentials)
  nameWithType: ReliableStateManagerReplicatorSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  parameters:
  - description: <p>The security credentials. </p>
    name: securityCredentials
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the security credentials for securing the traffic between replicators.</p>

    <p></p>
  syntax: public void setSecurityCredentials(SecurityCredentials securityCredentials)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSecurityCredentials(SecurityCredentials)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSharedLogId(String sharedLogId)
  name: setSharedLogId(String sharedLogId)
  nameWithType: ReliableStateManagerReplicatorSettings.setSharedLogId(String sharedLogId)
  parameters:
  - description: <p>The shared log id. </p>
    name: sharedLogId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the GUID identifier for the log container that is shared by a number of replicas on the windows fabric node including this one. Default value is "" which causes the replicator to use the global shared log for the node.</p>

    <p></p>
  syntax: public void setSharedLogId(String sharedLogId)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSharedLogId(String)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSharedLogPath(String sharedLogPath)
  name: setSharedLogPath(String sharedLogPath)
  nameWithType: ReliableStateManagerReplicatorSettings.setSharedLogPath(String sharedLogPath)
  parameters:
  - description: <p>The shared log path. </p>
    name: sharedLogPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the full pathname to the log container that is shared by a number of replicas on the node including this one. Default value is "" which causes the replicator to use the global shared log for the node.</p>

    <p></p>
  syntax: public void setSharedLogPath(String sharedLogPath)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSharedLogPath(String)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSlowApiMonitoringDuration(Duration slowApiMonitoringDuration)
  name: setSlowApiMonitoringDuration(Duration slowApiMonitoringDuration)
  nameWithType: ReliableStateManagerReplicatorSettings.setSlowApiMonitoringDuration(Duration slowApiMonitoringDuration)
  parameters:
  - description: <p>SlowApiMonitoringDuration </p>
    name: slowApiMonitoringDuration
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the interval after which the replicator sends a warning health report that the API is slow and is taking longer than expected duration. Default value is 5 minutes. </p>
  syntax: public void setSlowApiMonitoringDuration(Duration slowApiMonitoringDuration)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setSlowApiMonitoringDuration(Duration)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setThrottlingThresholdFactor(Integer throttlingThresholdFactor)
  name: setThrottlingThresholdFactor(Integer throttlingThresholdFactor)
  nameWithType: ReliableStateManagerReplicatorSettings.setThrottlingThresholdFactor(Integer throttlingThresholdFactor)
  parameters:
  - description: <p>The throttling threshold. </p>
    name: throttlingThresholdFactor
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the throttling threshold factor. Throttling will be initiated when the log usage exceeds this value times MinLogSizeInMB. Default value is 3. </p>
  syntax: public void setThrottlingThresholdFactor(Integer throttlingThresholdFactor)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setThrottlingThresholdFactor(Integer)
- fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setTruncationThresholdFactor(Integer truncationThresholdFactor)
  name: setTruncationThresholdFactor(Integer truncationThresholdFactor)
  nameWithType: ReliableStateManagerReplicatorSettings.setTruncationThresholdFactor(Integer truncationThresholdFactor)
  parameters:
  - description: <p>The truncation threshold. </p>
    name: truncationThresholdFactor
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the truncation threshold factor. A truncation will be initiated when the log usage exceeds this value times MinLogSizeInMB. Default value is 2.</p>

    <p></p>
  syntax: public void setTruncationThresholdFactor(Integer truncationThresholdFactor)
  uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings.setTruncationThresholdFactor(Integer)
nameWithType: ReliableStateManagerReplicatorSettings
syntax: public class ReliableStateManagerReplicatorSettings
type: class
uid: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings
fullName: microsoft.servicefabric.replicator.ReliableStateManagerReplicatorSettings
name: ReliableStateManagerReplicatorSettings
package: microsoft.servicefabric.replicator
summary: <p>Settings that configure the replicator. </p>
metadata: {}
