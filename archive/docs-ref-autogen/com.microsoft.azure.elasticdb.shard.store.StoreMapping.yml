### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.StoreMapping()
  name: StoreMapping()
  nameWithType: StoreMapping.StoreMapping()
  syntax: public StoreMapping()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.StoreMapping()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.StoreMapping(UUID id, Shard s, byte[] minValue, byte[] maxValue, int status)
  name: StoreMapping(UUID id, Shard s, byte[] minValue, byte[] maxValue, int status)
  nameWithType: StoreMapping.StoreMapping(UUID id, Shard s, byte[] minValue, byte[] maxValue, int status)
  parameters:
  - description: <p>Identify of mapping. </p>
    name: id
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Shard being converted. </p>
    name: s
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.Shard?alt=com.microsoft.azure.elasticdb.shard.base.Shard&text=Shard" data-throw-if-not-resolved="False"/>
  - description: <p>min key value. </p>
    name: minValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>max key value. </p>
    name: maxValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Mapping status. </p>
    name: status
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs the storage representation from client side objects.</p>

    <p></p>
  syntax: public StoreMapping(UUID id, Shard s, byte[] minValue, byte[] maxValue, int status)
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.StoreMapping(UUID,Shard,byte [],byte [],int)
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.StoreMapping(UUID id, UUID shardMapId, byte[] minValue, byte[] maxValue, int status, UUID lockOwnerId, StoreShard storeShard)
  name: StoreMapping(UUID id, UUID shardMapId, byte[] minValue, byte[] maxValue, int status, UUID lockOwnerId, StoreShard storeShard)
  nameWithType: StoreMapping.StoreMapping(UUID id, UUID shardMapId, byte[] minValue, byte[] maxValue, int status, UUID lockOwnerId, StoreShard storeShard)
  parameters:
  - description: <p>Identify of mapping. </p>
    name: id
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id of parent shardMap. </p>
    name: shardMapId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>min key value. </p>
    name: minValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>max key value. </p>
    name: maxValue
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Mapping status. </p>
    name: status
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Lock owner id. </p>
    name: lockOwnerId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>StoreShard </p>
    name: storeShard
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.StoreShard?alt=com.microsoft.azure.elasticdb.shard.store.StoreShard&text=StoreShard" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs the storage representation from client side objects.</p>

    <p></p>
  syntax: public StoreMapping(UUID id, UUID shardMapId, byte[] minValue, byte[] maxValue, int status, UUID lockOwnerId, StoreShard storeShard)
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.StoreMapping(UUID,UUID,byte [],byte [],int,UUID,StoreShard)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getId()
  name: getId()
  nameWithType: StoreMapping.getId()
  returns:
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public UUID getId()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getId()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getLockOwnerId()
  name: getLockOwnerId()
  nameWithType: StoreMapping.getLockOwnerId()
  returns:
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public UUID getLockOwnerId()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getLockOwnerId()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getLockOwnerIdString()
  name: getLockOwnerIdString()
  nameWithType: StoreMapping.getLockOwnerIdString()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getLockOwnerIdString()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getLockOwnerIdString()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getMaxValue()
  name: getMaxValue()
  nameWithType: StoreMapping.getMaxValue()
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public byte [] getMaxValue()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getMaxValue()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getMinValue()
  name: getMinValue()
  nameWithType: StoreMapping.getMinValue()
  returns:
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public byte [] getMinValue()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getMinValue()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getShardMapId()
  name: getShardMapId()
  nameWithType: StoreMapping.getShardMapId()
  returns:
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public UUID getShardMapId()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getShardMapId()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getStatus()
  name: getStatus()
  nameWithType: StoreMapping.getStatus()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int getStatus()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getStatus()
- fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getStoreShard()
  name: getStoreShard()
  nameWithType: StoreMapping.getStoreShard()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.store.StoreShard?alt=com.microsoft.azure.elasticdb.shard.store.StoreShard&text=StoreShard" data-throw-if-not-resolved="False"/>
  syntax: public StoreShard getStoreShard()
  uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping.getStoreShard()
nameWithType: StoreMapping
syntax: public class StoreMapping
type: class
uid: com.microsoft.azure.elasticdb.shard.store.StoreMapping
fullName: com.microsoft.azure.elasticdb.shard.store.StoreMapping
name: StoreMapping
package: com.microsoft.azure.elasticdb.shard.store
summary: <p>Storage representation of a mapping b/w key ranges and shards. </p>
metadata: {}
