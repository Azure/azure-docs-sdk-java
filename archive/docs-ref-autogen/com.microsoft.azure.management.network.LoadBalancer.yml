### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.network.model.HasLoadBalancingRules.loadBalancingRules()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.network.LoadBalancer.backends()
  name: backends()
  nameWithType: LoadBalancer.backends()
  returns:
    description: <p>backends for this load balancer to load balance the incoming traffic among, indexed by name </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerBackend?alt=com.microsoft.azure.management.network.LoadBalancerBackend&text=LoadBalancerBackend" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerBackend> backends()
  uid: com.microsoft.azure.management.network.LoadBalancer.backends()
- fullName: com.microsoft.azure.management.network.LoadBalancer.findFrontendByPublicIPAddress(PublicIPAddress publicIPAddress)
  name: findFrontendByPublicIPAddress(PublicIPAddress publicIPAddress)
  nameWithType: LoadBalancer.findFrontendByPublicIPAddress(PublicIPAddress publicIPAddress)
  parameters:
  - description: <p>a public IP address to search by </p>
    name: publicIPAddress
    type: <xref href="com.microsoft.azure.management.network.PublicIPAddress?alt=com.microsoft.azure.management.network.PublicIPAddress&text=PublicIPAddress" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a public frontend associated with the provided public IP address </p>
    type: <xref href="com.microsoft.azure.management.network.LoadBalancerPublicFrontend?alt=com.microsoft.azure.management.network.LoadBalancerPublicFrontend&text=LoadBalancerPublicFrontend" data-throw-if-not-resolved="False"/>
  summary: <p>Searches for the public frontend that is associated with the provided public IP address, if one exists. </p>
  syntax: public LoadBalancerPublicFrontend findFrontendByPublicIPAddress(PublicIPAddress publicIPAddress)
  uid: com.microsoft.azure.management.network.LoadBalancer.findFrontendByPublicIPAddress(PublicIPAddress)
- fullName: com.microsoft.azure.management.network.LoadBalancer.findFrontendByPublicIPAddress(String publicIPAddressId)
  name: findFrontendByPublicIPAddress(String publicIPAddressId)
  nameWithType: LoadBalancer.findFrontendByPublicIPAddress(String publicIPAddressId)
  parameters:
  - description: <p>the resource ID of a public IP address to search by </p>
    name: publicIPAddressId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a public frontend associated with the provided public IP address </p>
    type: <xref href="com.microsoft.azure.management.network.LoadBalancerPublicFrontend?alt=com.microsoft.azure.management.network.LoadBalancerPublicFrontend&text=LoadBalancerPublicFrontend" data-throw-if-not-resolved="False"/>
  summary: <p>Searches for the public frontend that is associated with the provided public IP address, if one exists. </p>
  syntax: public LoadBalancerPublicFrontend findFrontendByPublicIPAddress(String publicIPAddressId)
  uid: com.microsoft.azure.management.network.LoadBalancer.findFrontendByPublicIPAddress(String)
- fullName: com.microsoft.azure.management.network.LoadBalancer.frontends()
  name: frontends()
  nameWithType: LoadBalancer.frontends()
  returns:
    description: <p>frontends for this load balancer, for the incoming traffic to come from. </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerFrontend?alt=com.microsoft.azure.management.network.LoadBalancerFrontend&text=LoadBalancerFrontend" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerFrontend> frontends()
  uid: com.microsoft.azure.management.network.LoadBalancer.frontends()
- fullName: com.microsoft.azure.management.network.LoadBalancer.httpProbes()
  name: httpProbes()
  nameWithType: LoadBalancer.httpProbes()
  returns:
    description: <p>HTTP probes of this load balancer, indexed by the name </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerHttpProbe?alt=com.microsoft.azure.management.network.LoadBalancerHttpProbe&text=LoadBalancerHttpProbe" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerHttpProbe> httpProbes()
  uid: com.microsoft.azure.management.network.LoadBalancer.httpProbes()
- fullName: com.microsoft.azure.management.network.LoadBalancer.inboundNatPools()
  name: inboundNatPools()
  nameWithType: LoadBalancer.inboundNatPools()
  returns:
    description: <p>inbound NAT pools, indexed by name </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerInboundNatPool?alt=com.microsoft.azure.management.network.LoadBalancerInboundNatPool&text=LoadBalancerInboundNatPool" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerInboundNatPool> inboundNatPools()
  uid: com.microsoft.azure.management.network.LoadBalancer.inboundNatPools()
- fullName: com.microsoft.azure.management.network.LoadBalancer.inboundNatRules()
  name: inboundNatRules()
  nameWithType: LoadBalancer.inboundNatRules()
  returns:
    description: <p>inbound NAT rules for this balancer </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerInboundNatRule?alt=com.microsoft.azure.management.network.LoadBalancerInboundNatRule&text=LoadBalancerInboundNatRule" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerInboundNatRule> inboundNatRules()
  uid: com.microsoft.azure.management.network.LoadBalancer.inboundNatRules()
- fullName: com.microsoft.azure.management.network.LoadBalancer.privateFrontends()
  name: privateFrontends()
  nameWithType: LoadBalancer.privateFrontends()
  returns:
    description: <p>private (internal) frontends </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerPrivateFrontend?alt=com.microsoft.azure.management.network.LoadBalancerPrivateFrontend&text=LoadBalancerPrivateFrontend" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerPrivateFrontend> privateFrontends()
  uid: com.microsoft.azure.management.network.LoadBalancer.privateFrontends()
- fullName: com.microsoft.azure.management.network.LoadBalancer.publicFrontends()
  name: publicFrontends()
  nameWithType: LoadBalancer.publicFrontends()
  returns:
    description: <p>public (Internet-facing) frontends </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerPublicFrontend?alt=com.microsoft.azure.management.network.LoadBalancerPublicFrontend&text=LoadBalancerPublicFrontend" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerPublicFrontend> publicFrontends()
  uid: com.microsoft.azure.management.network.LoadBalancer.publicFrontends()
- fullName: com.microsoft.azure.management.network.LoadBalancer.publicIPAddressIds()
  name: publicIPAddressIds()
  nameWithType: LoadBalancer.publicIPAddressIds()
  returns:
    description: <p>resource IDs of the public IP addresses assigned to the frontends of this load balancer </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public List<String> publicIPAddressIds()
  uid: com.microsoft.azure.management.network.LoadBalancer.publicIPAddressIds()
- fullName: com.microsoft.azure.management.network.LoadBalancer.sku()
  name: sku()
  nameWithType: LoadBalancer.sku()
  returns:
    description: <p>load balancer sku. </p>
    type: <xref href="com.microsoft.azure.management.network.LoadBalancerSkuType?alt=com.microsoft.azure.management.network.LoadBalancerSkuType&text=LoadBalancerSkuType" data-throw-if-not-resolved="False"/>
  syntax: public LoadBalancerSkuType sku()
  uid: com.microsoft.azure.management.network.LoadBalancer.sku()
- fullName: com.microsoft.azure.management.network.LoadBalancer.tcpProbes()
  name: tcpProbes()
  nameWithType: LoadBalancer.tcpProbes()
  returns:
    description: <p>TCP probes of this load balancer, indexed by the name </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.network.LoadBalancerTcpProbe?alt=com.microsoft.azure.management.network.LoadBalancerTcpProbe&text=LoadBalancerTcpProbe" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, LoadBalancerTcpProbe> tcpProbes()
  uid: com.microsoft.azure.management.network.LoadBalancer.tcpProbes()
nameWithType: LoadBalancer
syntax: public interface LoadBalancer extends GroupableResource<NetworkManager, LoadBalancerInner>,Refreshable<LoadBalancer>,Updatable<LoadBalancer.Update>,HasLoadBalancingRules
type: interface
uid: com.microsoft.azure.management.network.LoadBalancer
fullName: com.microsoft.azure.management.network.LoadBalancer
name: LoadBalancer
package: com.microsoft.azure.management.network
summary: <p>Entry point for load balancer management API in Azure. </p>
metadata: {}
