### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.creating()
  name: creating()
  nameWithType: NodeCounts.creating()
  returns:
    description: <p>the creating value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the creating value.</p>

    <p></p>
  syntax: public int creating()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.creating()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.idle()
  name: idle()
  nameWithType: NodeCounts.idle()
  returns:
    description: <p>the idle value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the idle value.</p>

    <p></p>
  syntax: public int idle()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.idle()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.leavingPool()
  name: leavingPool()
  nameWithType: NodeCounts.leavingPool()
  returns:
    description: <p>the leavingPool value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the leavingPool value.</p>

    <p></p>
  syntax: public int leavingPool()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.leavingPool()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.offline()
  name: offline()
  nameWithType: NodeCounts.offline()
  returns:
    description: <p>the offline value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the offline value.</p>

    <p></p>
  syntax: public int offline()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.offline()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.preempted()
  name: preempted()
  nameWithType: NodeCounts.preempted()
  returns:
    description: <p>the preempted value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the preempted value.</p>

    <p></p>
  syntax: public int preempted()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.preempted()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.rebooting()
  name: rebooting()
  nameWithType: NodeCounts.rebooting()
  returns:
    description: <p>the rebooting value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the rebooting value.</p>

    <p></p>
  syntax: public int rebooting()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.rebooting()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.reimaging()
  name: reimaging()
  nameWithType: NodeCounts.reimaging()
  returns:
    description: <p>the reimaging value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the reimaging value.</p>

    <p></p>
  syntax: public int reimaging()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.reimaging()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.running()
  name: running()
  nameWithType: NodeCounts.running()
  returns:
    description: <p>the running value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the running value.</p>

    <p></p>
  syntax: public int running()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.running()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.starting()
  name: starting()
  nameWithType: NodeCounts.starting()
  returns:
    description: <p>the starting value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the starting value.</p>

    <p></p>
  syntax: public int starting()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.starting()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.startTaskFailed()
  name: startTaskFailed()
  nameWithType: NodeCounts.startTaskFailed()
  returns:
    description: <p>the startTaskFailed value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the startTaskFailed value.</p>

    <p></p>
  syntax: public int startTaskFailed()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.startTaskFailed()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.total()
  name: total()
  nameWithType: NodeCounts.total()
  returns:
    description: <p>the total value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the total value.</p>

    <p></p>
  syntax: public int total()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.total()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.unknown()
  name: unknown()
  nameWithType: NodeCounts.unknown()
  returns:
    description: <p>the unknown value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the unknown value.</p>

    <p></p>
  syntax: public int unknown()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.unknown()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.unusable()
  name: unusable()
  nameWithType: NodeCounts.unusable()
  returns:
    description: <p>the unusable value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the unusable value.</p>

    <p></p>
  syntax: public int unusable()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.unusable()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.waitingForStartTask()
  name: waitingForStartTask()
  nameWithType: NodeCounts.waitingForStartTask()
  returns:
    description: <p>the waitingForStartTask value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the waitingForStartTask value.</p>

    <p></p>
  syntax: public int waitingForStartTask()
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.waitingForStartTask()
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withCreating(int creating)
  name: withCreating(int creating)
  nameWithType: NodeCounts.withCreating(int creating)
  parameters:
  - description: <p>the creating value to set </p>
    name: creating
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the creating value.</p>

    <p></p>
  syntax: public NodeCounts withCreating(int creating)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withCreating(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withIdle(int idle)
  name: withIdle(int idle)
  nameWithType: NodeCounts.withIdle(int idle)
  parameters:
  - description: <p>the idle value to set </p>
    name: idle
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the idle value.</p>

    <p></p>
  syntax: public NodeCounts withIdle(int idle)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withIdle(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withLeavingPool(int leavingPool)
  name: withLeavingPool(int leavingPool)
  nameWithType: NodeCounts.withLeavingPool(int leavingPool)
  parameters:
  - description: <p>the leavingPool value to set </p>
    name: leavingPool
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the leavingPool value.</p>

    <p></p>
  syntax: public NodeCounts withLeavingPool(int leavingPool)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withLeavingPool(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withOffline(int offline)
  name: withOffline(int offline)
  nameWithType: NodeCounts.withOffline(int offline)
  parameters:
  - description: <p>the offline value to set </p>
    name: offline
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the offline value.</p>

    <p></p>
  syntax: public NodeCounts withOffline(int offline)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withOffline(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withPreempted(int preempted)
  name: withPreempted(int preempted)
  nameWithType: NodeCounts.withPreempted(int preempted)
  parameters:
  - description: <p>the preempted value to set </p>
    name: preempted
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the preempted value.</p>

    <p></p>
  syntax: public NodeCounts withPreempted(int preempted)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withPreempted(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withRebooting(int rebooting)
  name: withRebooting(int rebooting)
  nameWithType: NodeCounts.withRebooting(int rebooting)
  parameters:
  - description: <p>the rebooting value to set </p>
    name: rebooting
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the rebooting value.</p>

    <p></p>
  syntax: public NodeCounts withRebooting(int rebooting)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withRebooting(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withReimaging(int reimaging)
  name: withReimaging(int reimaging)
  nameWithType: NodeCounts.withReimaging(int reimaging)
  parameters:
  - description: <p>the reimaging value to set </p>
    name: reimaging
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the reimaging value.</p>

    <p></p>
  syntax: public NodeCounts withReimaging(int reimaging)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withReimaging(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withRunning(int running)
  name: withRunning(int running)
  nameWithType: NodeCounts.withRunning(int running)
  parameters:
  - description: <p>the running value to set </p>
    name: running
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the running value.</p>

    <p></p>
  syntax: public NodeCounts withRunning(int running)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withRunning(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withStarting(int starting)
  name: withStarting(int starting)
  nameWithType: NodeCounts.withStarting(int starting)
  parameters:
  - description: <p>the starting value to set </p>
    name: starting
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the starting value.</p>

    <p></p>
  syntax: public NodeCounts withStarting(int starting)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withStarting(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withStartTaskFailed(int startTaskFailed)
  name: withStartTaskFailed(int startTaskFailed)
  nameWithType: NodeCounts.withStartTaskFailed(int startTaskFailed)
  parameters:
  - description: <p>the startTaskFailed value to set </p>
    name: startTaskFailed
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the startTaskFailed value.</p>

    <p></p>
  syntax: public NodeCounts withStartTaskFailed(int startTaskFailed)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withStartTaskFailed(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withTotal(int total)
  name: withTotal(int total)
  nameWithType: NodeCounts.withTotal(int total)
  parameters:
  - description: <p>the total value to set </p>
    name: total
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the total value.</p>

    <p></p>
  syntax: public NodeCounts withTotal(int total)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withTotal(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withUnknown(int unknown)
  name: withUnknown(int unknown)
  nameWithType: NodeCounts.withUnknown(int unknown)
  parameters:
  - description: <p>the unknown value to set </p>
    name: unknown
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the unknown value.</p>

    <p></p>
  syntax: public NodeCounts withUnknown(int unknown)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withUnknown(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withUnusable(int unusable)
  name: withUnusable(int unusable)
  nameWithType: NodeCounts.withUnusable(int unusable)
  parameters:
  - description: <p>the unusable value to set </p>
    name: unusable
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the unusable value.</p>

    <p></p>
  syntax: public NodeCounts withUnusable(int unusable)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withUnusable(int)
- fullName: com.microsoft.azure.batch.protocol.models.NodeCounts.withWaitingForStartTask(int waitingForStartTask)
  name: withWaitingForStartTask(int waitingForStartTask)
  nameWithType: NodeCounts.withWaitingForStartTask(int waitingForStartTask)
  parameters:
  - description: <p>the waitingForStartTask value to set </p>
    name: waitingForStartTask
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the NodeCounts object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.NodeCounts?alt=com.microsoft.azure.batch.protocol.models.NodeCounts&text=NodeCounts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the waitingForStartTask value.</p>

    <p></p>
  syntax: public NodeCounts withWaitingForStartTask(int waitingForStartTask)
  uid: com.microsoft.azure.batch.protocol.models.NodeCounts.withWaitingForStartTask(int)
nameWithType: NodeCounts
syntax: public class NodeCounts
type: class
uid: com.microsoft.azure.batch.protocol.models.NodeCounts
fullName: com.microsoft.azure.batch.protocol.models.NodeCounts
name: NodeCounts
package: com.microsoft.azure.batch.protocol.models
summary: <p>The number of nodes in each node state. </p>
metadata: {}
