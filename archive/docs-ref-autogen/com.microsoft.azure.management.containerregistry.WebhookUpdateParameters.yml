### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.actions()
  name: actions()
  nameWithType: WebhookUpdateParameters.actions()
  returns:
    description: <p>the actions value </p>
    type: List&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookAction?alt=com.microsoft.azure.management.containerregistry.WebhookAction&text=WebhookAction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the list of actions that trigger the webhook to post notifications.</p>

    <p></p>
  syntax: public List<WebhookAction> actions()
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.actions()
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.customHeaders()
  name: customHeaders()
  nameWithType: WebhookUpdateParameters.customHeaders()
  returns:
    description: <p>the customHeaders value </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get custom headers that will be added to the webhook notifications.</p>

    <p></p>
  syntax: public Map<String, String> customHeaders()
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.customHeaders()
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.scope()
  name: scope()
  nameWithType: WebhookUpdateParameters.scope()
  returns:
    description: <p>the scope value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.</p>

    <p></p>
  syntax: public String scope()
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.scope()
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.serviceUri()
  name: serviceUri()
  nameWithType: WebhookUpdateParameters.serviceUri()
  returns:
    description: <p>the serviceUri value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the service URI for the webhook to post notifications.</p>

    <p></p>
  syntax: public String serviceUri()
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.serviceUri()
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.status()
  name: status()
  nameWithType: WebhookUpdateParameters.status()
  returns:
    description: <p>the status value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookStatus?alt=com.microsoft.azure.management.containerregistry.WebhookStatus&text=WebhookStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the status of the webhook at the time the operation was called. Possible values include: 'enabled', 'disabled'.</p>

    <p></p>
  syntax: public WebhookStatus status()
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.status()
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.tags()
  name: tags()
  nameWithType: WebhookUpdateParameters.tags()
  returns:
    description: <p>the tags value </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the tags for the webhook.</p>

    <p></p>
  syntax: public Map<String, String> tags()
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.tags()
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withActions(List<WebhookAction> actions)
  name: withActions(List<WebhookAction> actions)
  nameWithType: WebhookUpdateParameters.withActions(List<WebhookAction> actions)
  parameters:
  - description: <p>the actions value to set </p>
    name: actions
    type: List&lt;<xref href="com.microsoft.azure.management.containerregistry.WebhookAction?alt=com.microsoft.azure.management.containerregistry.WebhookAction&text=WebhookAction" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the WebhookUpdateParameters object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the list of actions that trigger the webhook to post notifications.</p>

    <p></p>
  syntax: public WebhookUpdateParameters withActions(List<WebhookAction> actions)
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withActions(List<WebhookAction>)
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withCustomHeaders(Map<String, String> customHeaders)
  name: withCustomHeaders(Map<String, String> customHeaders)
  nameWithType: WebhookUpdateParameters.withCustomHeaders(Map<String, String> customHeaders)
  parameters:
  - description: <p>the customHeaders value to set </p>
    name: customHeaders
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the WebhookUpdateParameters object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set custom headers that will be added to the webhook notifications.</p>

    <p></p>
  syntax: public WebhookUpdateParameters withCustomHeaders(Map<String, String> customHeaders)
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withCustomHeaders(Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withScope(String scope)
  name: withScope(String scope)
  nameWithType: WebhookUpdateParameters.withScope(String scope)
  parameters:
  - description: <p>the scope value to set </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the WebhookUpdateParameters object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events.</p>

    <p></p>
  syntax: public WebhookUpdateParameters withScope(String scope)
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withScope(String)
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withServiceUri(String serviceUri)
  name: withServiceUri(String serviceUri)
  nameWithType: WebhookUpdateParameters.withServiceUri(String serviceUri)
  parameters:
  - description: <p>the serviceUri value to set </p>
    name: serviceUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the WebhookUpdateParameters object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the service URI for the webhook to post notifications.</p>

    <p></p>
  syntax: public WebhookUpdateParameters withServiceUri(String serviceUri)
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withServiceUri(String)
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withStatus(WebhookStatus status)
  name: withStatus(WebhookStatus status)
  nameWithType: WebhookUpdateParameters.withStatus(WebhookStatus status)
  parameters:
  - description: <p>the status value to set </p>
    name: status
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookStatus?alt=com.microsoft.azure.management.containerregistry.WebhookStatus&text=WebhookStatus" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the WebhookUpdateParameters object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the status of the webhook at the time the operation was called. Possible values include: 'enabled', 'disabled'.</p>

    <p></p>
  syntax: public WebhookUpdateParameters withStatus(WebhookStatus status)
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withStatus(WebhookStatus)
- fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withTags(Map<String, String> tags)
  name: withTags(Map<String, String> tags)
  nameWithType: WebhookUpdateParameters.withTags(Map<String, String> tags)
  parameters:
  - description: <p>the tags value to set </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the WebhookUpdateParameters object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the tags for the webhook.</p>

    <p></p>
  syntax: public WebhookUpdateParameters withTags(Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters.withTags(Map<String, String>)
nameWithType: WebhookUpdateParameters
syntax: public class WebhookUpdateParameters
type: class
uid: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters
fullName: com.microsoft.azure.management.containerregistry.WebhookUpdateParameters
name: WebhookUpdateParameters
package: com.microsoft.azure.management.containerregistry
summary: <p>The parameters for updating a webhook. </p>
metadata: {}
