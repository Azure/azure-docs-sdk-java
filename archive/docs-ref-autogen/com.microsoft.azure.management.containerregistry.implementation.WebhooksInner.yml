### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.WebhooksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  name: WebhooksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  nameWithType: WebhooksInner.WebhooksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl&text=ContainerRegistryManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of WebhooksInner.</p>

    <p></p>
  syntax: public WebhooksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.WebhooksInner(Retrofit,ContainerRegistryManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreate(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  name: beginCreate(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  nameWithType: WebhooksInner.beginCreate(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the WebhookInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public WebhookInner beginCreate(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreate(String,String,String,WebhookCreateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  name: beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  nameWithType: WebhooksInner.beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the WebhookInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<WebhookInner> beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreateAsync(String,String,String,WebhookCreateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  name: beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<WebhookInner> beginCreateAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreateAsync(String,String,String,WebhookCreateParameters,final ServiceCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  name: beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  nameWithType: WebhooksInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the WebhookInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<WebhookInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginCreateWithServiceResponseAsync(String,String,String,WebhookCreateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDelete(String resourceGroupName, String registryName, String webhookName)
  name: beginDelete(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.beginDelete(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDelete(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDeleteAsync(String resourceGroupName, String registryName, String webhookName)
  name: beginDeleteAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.beginDeleteAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDeleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDeleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  nameWithType: WebhooksInner.beginDeleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDeleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginDeleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdate(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  name: beginUpdate(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  nameWithType: WebhooksInner.beginUpdate(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the WebhookInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public WebhookInner beginUpdate(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdate(String,String,String,WebhookUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  nameWithType: WebhooksInner.beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the WebhookInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public Observable<WebhookInner> beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdateAsync(String,String,String,WebhookUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<WebhookInner> beginUpdateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdateAsync(String,String,String,WebhookUpdateParameters,final ServiceCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  nameWithType: WebhooksInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the WebhookInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<WebhookInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.beginUpdateWithServiceResponseAsync(String,String,String,WebhookUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.create(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  name: create(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  nameWithType: WebhooksInner.create(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the WebhookInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public WebhookInner create(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.create(String,String,String,WebhookCreateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  name: createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  nameWithType: WebhooksInner.createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<WebhookInner> createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.createAsync(String,String,String,WebhookCreateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  name: createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<WebhookInner> createAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.createAsync(String,String,String,WebhookCreateParameters,final ServiceCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  nameWithType: WebhooksInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a webhook. </p>
    name: webhookCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookCreateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookCreateParameters&text=WebhookCreateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a webhook for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<WebhookInner>> createWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookCreateParameters webhookCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.createWithServiceResponseAsync(String,String,String,WebhookCreateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.delete(String resourceGroupName, String registryName, String webhookName)
  name: delete(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.delete(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.delete(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.deleteAsync(String resourceGroupName, String registryName, String webhookName)
  name: deleteAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.deleteAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.deleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  nameWithType: WebhooksInner.deleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a webhook from a container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.get(String resourceGroupName, String registryName, String webhookName)
  name: get(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.get(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the WebhookInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the properties of the specified webhook.</p>

    <p></p>
  syntax: public WebhookInner get(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.get(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getAsync(String resourceGroupName, String registryName, String webhookName)
  name: getAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.getAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the WebhookInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the properties of the specified webhook.</p>

    <p></p>
  syntax: public Observable<WebhookInner> getAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<WebhookInner> serviceCallback)
  name: getAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.getAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the properties of the specified webhook.</p>

    <p></p>
  syntax: public ServiceFuture<WebhookInner> getAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getAsync(String,String,String,final ServiceCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfig(String resourceGroupName, String registryName, String webhookName)
  name: getCallbackConfig(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.getCallbackConfig(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the CallbackConfigInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner?alt=com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner&text=CallbackConfigInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the configuration of service URI and custom headers for the webhook.</p>

    <p></p>
  syntax: public CallbackConfigInner getCallbackConfig(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfig(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName)
  name: getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CallbackConfigInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner?alt=com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner&text=CallbackConfigInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the configuration of service URI and custom headers for the webhook.</p>

    <p></p>
  syntax: public Observable<CallbackConfigInner> getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfigAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<CallbackConfigInner> serviceCallback)
  name: getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<CallbackConfigInner> serviceCallback)
  nameWithType: WebhooksInner.getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<CallbackConfigInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner?alt=com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner&text=CallbackConfigInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner?alt=com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner&text=CallbackConfigInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the configuration of service URI and custom headers for the webhook.</p>

    <p></p>
  syntax: public ServiceFuture<CallbackConfigInner> getCallbackConfigAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<CallbackConfigInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfigAsync(String,String,String,final ServiceCallback<CallbackConfigInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfigWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  name: getCallbackConfigWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.getCallbackConfigWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the CallbackConfigInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner?alt=com.microsoft.azure.management.containerregistry.implementation.CallbackConfigInner&text=CallbackConfigInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the configuration of service URI and custom headers for the webhook.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<CallbackConfigInner>> getCallbackConfigWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getCallbackConfigWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  name: getWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the WebhookInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the properties of the specified webhook.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<WebhookInner>> getWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.list(final String resourceGroupName, final String registryName)
  name: list(final String resourceGroupName, final String registryName)
  nameWithType: WebhooksInner.list(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;WebhookInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public PagedList<WebhookInner> list(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.list(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listAsync(final String resourceGroupName, final String registryName)
  name: listAsync(final String resourceGroupName, final String registryName)
  nameWithType: WebhooksInner.listAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;WebhookInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public Observable<Page<WebhookInner>> listAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<WebhookInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<WebhookInner>> listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listAsync(final String,final String,final ListOperationCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEvents(final String resourceGroupName, final String registryName, final String webhookName)
  name: listEvents(final String resourceGroupName, final String registryName, final String webhookName)
  nameWithType: WebhooksInner.listEvents(final String resourceGroupName, final String registryName, final String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;EventInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public PagedList<EventInner> listEvents(final String resourceGroupName, final String registryName, final String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEvents(final String,final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName)
  name: listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName)
  nameWithType: WebhooksInner.listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;EventInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public Observable<Page<EventInner>> listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName, final ListOperationCallback<EventInner> serviceCallback)
  name: listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName, final ListOperationCallback<EventInner> serviceCallback)
  nameWithType: WebhooksInner.listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName, final ListOperationCallback<EventInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public ServiceFuture<List<EventInner>> listEventsAsync(final String resourceGroupName, final String registryName, final String webhookName, final ListOperationCallback<EventInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsAsync(final String,final String,final String,final ListOperationCallback<EventInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNext(final String nextPageLink)
  name: listEventsNext(final String nextPageLink)
  nameWithType: WebhooksInner.listEventsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;EventInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public PagedList<EventInner> listEventsNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextAsync(final String nextPageLink)
  name: listEventsNextAsync(final String nextPageLink)
  nameWithType: WebhooksInner.listEventsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;EventInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public Observable<Page<EventInner>> listEventsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextAsync(final String nextPageLink, final ServiceFuture<List<EventInner>> serviceFuture, final ListOperationCallback<EventInner> serviceCallback)
  name: listEventsNextAsync(final String nextPageLink, final ServiceFuture<List<EventInner>> serviceFuture, final ListOperationCallback<EventInner> serviceCallback)
  nameWithType: WebhooksInner.listEventsNextAsync(final String nextPageLink, final ServiceFuture<List<EventInner>> serviceFuture, final ListOperationCallback<EventInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public ServiceFuture<List<EventInner>> listEventsNextAsync(final String nextPageLink, final ServiceFuture<List<EventInner>> serviceFuture, final ListOperationCallback<EventInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextAsync(final String,final ServiceFuture<List<EventInner>>,final ListOperationCallback<EventInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextSinglePageAsync(final String nextPageLink)
  name: listEventsNextSinglePageAsync(final String nextPageLink)
  nameWithType: WebhooksInner.listEventsNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;EventInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p>ServiceResponse&lt;PageImpl&lt;EventInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<EventInner>>> listEventsNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextWithServiceResponseAsync(final String nextPageLink)
  name: listEventsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: WebhooksInner.listEventsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;EventInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<EventInner>>> listEventsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsSinglePageAsync(final String resourceGroupName, final String registryName, final String webhookName)
  name: listEventsSinglePageAsync(final String resourceGroupName, final String registryName, final String webhookName)
  nameWithType: WebhooksInner.listEventsSinglePageAsync(final String resourceGroupName, final String registryName, final String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. ServiceResponse&lt;PageImpl&lt;EventInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. ServiceResponse&lt;PageImpl&lt;EventInner&gt;&gt; * </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;EventInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p>ServiceResponse&lt;PageImpl&lt;EventInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<EventInner>>> listEventsSinglePageAsync(final String resourceGroupName, final String registryName, final String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsSinglePageAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String webhookName)
  name: listEventsWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String webhookName)
  nameWithType: WebhooksInner.listEventsWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;EventInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInner&text=EventInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists recent events for the specified webhook.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<EventInner>>> listEventsWithServiceResponseAsync(final String resourceGroupName, final String registryName, final String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listEventsWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: WebhooksInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;WebhookInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public PagedList<WebhookInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: WebhooksInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;WebhookInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public Observable<Page<WebhookInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<WebhookInner>> serviceFuture, final ListOperationCallback<WebhookInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<WebhookInner>> serviceFuture, final ListOperationCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<WebhookInner>> serviceFuture, final ListOperationCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<WebhookInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<WebhookInner>> serviceFuture, final ListOperationCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextAsync(final String,final ServiceFuture<List<WebhookInner>>,final ListOperationCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: WebhooksInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;WebhookInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;WebhookInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<WebhookInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: WebhooksInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;WebhookInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<WebhookInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  name: listSinglePageAsync(final String resourceGroupName, final String registryName)
  nameWithType: WebhooksInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. ServiceResponse&lt;PageImpl&lt;WebhookInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;WebhookInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;WebhookInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<WebhookInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  nameWithType: WebhooksInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;WebhookInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the webhooks for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<WebhookInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.listWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.ping(String resourceGroupName, String registryName, String webhookName)
  name: ping(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.ping(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EventInfoInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.EventInfoInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInfoInner&text=EventInfoInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Triggers a ping event to be sent to the webhook.</p>

    <p></p>
  syntax: public EventInfoInner ping(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.ping(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.pingAsync(String resourceGroupName, String registryName, String webhookName)
  name: pingAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.pingAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventInfoInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInfoInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInfoInner&text=EventInfoInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Triggers a ping event to be sent to the webhook.</p>

    <p></p>
  syntax: public Observable<EventInfoInner> pingAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.pingAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.pingAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<EventInfoInner> serviceCallback)
  name: pingAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<EventInfoInner> serviceCallback)
  nameWithType: WebhooksInner.pingAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<EventInfoInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInfoInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInfoInner&text=EventInfoInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInfoInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInfoInner&text=EventInfoInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Triggers a ping event to be sent to the webhook.</p>

    <p></p>
  syntax: public ServiceFuture<EventInfoInner> pingAsync(String resourceGroupName, String registryName, String webhookName, final ServiceCallback<EventInfoInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.pingAsync(String,String,String,final ServiceCallback<EventInfoInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.pingWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  name: pingWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  nameWithType: WebhooksInner.pingWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventInfoInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.EventInfoInner?alt=com.microsoft.azure.management.containerregistry.implementation.EventInfoInner&text=EventInfoInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Triggers a ping event to be sent to the webhook.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventInfoInner>> pingWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.pingWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.update(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  name: update(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  nameWithType: WebhooksInner.update(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the WebhookInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public WebhookInner update(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.update(String,String,String,WebhookUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  name: updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  nameWithType: WebhooksInner.updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public Observable<WebhookInner> updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.updateAsync(String,String,String,WebhookUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  nameWithType: WebhooksInner.updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<WebhookInner> updateAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters, final ServiceCallback<WebhookInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.updateAsync(String,String,String,WebhookUpdateParameters,final ServiceCallback<WebhookInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  nameWithType: WebhooksInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the webhook. </p>
    name: webhookName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a webhook. </p>
    name: webhookUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookUpdateParameters?alt=com.microsoft.azure.management.containerregistry.WebhookUpdateParameters&text=WebhookUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookInner?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookInner&text=WebhookInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a webhook with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<WebhookInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String webhookName, WebhookUpdateParameters webhookUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner.updateWithServiceResponseAsync(String,String,String,WebhookUpdateParameters)
nameWithType: WebhooksInner
syntax: public class WebhooksInner
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner
fullName: com.microsoft.azure.management.containerregistry.implementation.WebhooksInner
name: WebhooksInner
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>An instance of this class provides access to all the operations defined in Webhooks. </p>
metadata: {}
