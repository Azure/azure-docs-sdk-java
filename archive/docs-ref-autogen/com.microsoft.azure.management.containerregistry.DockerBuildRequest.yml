### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.containerregistry.RunRequest?alt=com.microsoft.azure.management.containerregistry.RunRequest&text=RunRequest" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.containerregistry.RunRequest.isArchiveEnabled()
- com.microsoft.azure.management.containerregistry.RunRequest.withIsArchiveEnabled(Boolean)
methods:
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.agentConfiguration()
  name: agentConfiguration()
  nameWithType: DockerBuildRequest.agentConfiguration()
  returns:
    description: <p>the agentConfiguration value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.AgentProperties?alt=com.microsoft.azure.management.containerregistry.AgentProperties&text=AgentProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the machine configuration of the run agent.</p>

    <p></p>
  syntax: public AgentProperties agentConfiguration()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.agentConfiguration()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.arguments()
  name: arguments()
  nameWithType: DockerBuildRequest.arguments()
  returns:
    description: <p>the arguments value </p>
    type: List&lt;<xref href="com.microsoft.azure.management.containerregistry.Argument?alt=com.microsoft.azure.management.containerregistry.Argument&text=Argument" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the collection of override arguments to be used when executing the run.</p>

    <p></p>
  syntax: public List<Argument> arguments()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.arguments()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.dockerFilePath()
  name: dockerFilePath()
  nameWithType: DockerBuildRequest.dockerFilePath()
  returns:
    description: <p>the dockerFilePath value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the Docker file path relative to the source location.</p>

    <p></p>
  syntax: public String dockerFilePath()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.dockerFilePath()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.imageNames()
  name: imageNames()
  nameWithType: DockerBuildRequest.imageNames()
  returns:
    description: <p>the imageNames value </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the fully qualified image names including the repository and tag.</p>

    <p></p>
  syntax: public List<String> imageNames()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.imageNames()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.isPushEnabled()
  name: isPushEnabled()
  nameWithType: DockerBuildRequest.isPushEnabled()
  returns:
    description: <p>the isPushEnabled value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the value of this property indicates whether the image built should be pushed to the registry or not.</p>

    <p></p>
  syntax: public Boolean isPushEnabled()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.isPushEnabled()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.noCache()
  name: noCache()
  nameWithType: DockerBuildRequest.noCache()
  returns:
    description: <p>the noCache value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the value of this property indicates whether the image cache is enabled or not.</p>

    <p></p>
  syntax: public Boolean noCache()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.noCache()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.platform()
  name: platform()
  nameWithType: DockerBuildRequest.platform()
  returns:
    description: <p>the platform value </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the platform properties against which the run has to happen.</p>

    <p></p>
  syntax: public PlatformProperties platform()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.platform()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.sourceLocation()
  name: sourceLocation()
  nameWithType: DockerBuildRequest.sourceLocation()
  returns:
    description: <p>the sourceLocation value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the URL(absolute or relative) of the source context. It can be an URL to a tar or git repoistory. If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.</p>

    <p></p>
  syntax: public String sourceLocation()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.sourceLocation()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.timeout()
  name: timeout()
  nameWithType: DockerBuildRequest.timeout()
  returns:
    description: <p>the timeout value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get run timeout in seconds.</p>

    <p></p>
  syntax: public Integer timeout()
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.timeout()
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withAgentConfiguration(AgentProperties agentConfiguration)
  name: withAgentConfiguration(AgentProperties agentConfiguration)
  nameWithType: DockerBuildRequest.withAgentConfiguration(AgentProperties agentConfiguration)
  parameters:
  - description: <p>the agentConfiguration value to set </p>
    name: agentConfiguration
    type: <xref href="com.microsoft.azure.management.containerregistry.AgentProperties?alt=com.microsoft.azure.management.containerregistry.AgentProperties&text=AgentProperties" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the machine configuration of the run agent.</p>

    <p></p>
  syntax: public DockerBuildRequest withAgentConfiguration(AgentProperties agentConfiguration)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withAgentConfiguration(AgentProperties)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withArguments(List<Argument> arguments)
  name: withArguments(List<Argument> arguments)
  nameWithType: DockerBuildRequest.withArguments(List<Argument> arguments)
  parameters:
  - description: <p>the arguments value to set </p>
    name: arguments
    type: List&lt;<xref href="com.microsoft.azure.management.containerregistry.Argument?alt=com.microsoft.azure.management.containerregistry.Argument&text=Argument" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the collection of override arguments to be used when executing the run.</p>

    <p></p>
  syntax: public DockerBuildRequest withArguments(List<Argument> arguments)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withArguments(List<Argument>)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withDockerFilePath(String dockerFilePath)
  name: withDockerFilePath(String dockerFilePath)
  nameWithType: DockerBuildRequest.withDockerFilePath(String dockerFilePath)
  parameters:
  - description: <p>the dockerFilePath value to set </p>
    name: dockerFilePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the Docker file path relative to the source location.</p>

    <p></p>
  syntax: public DockerBuildRequest withDockerFilePath(String dockerFilePath)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withDockerFilePath(String)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withImageNames(List<String> imageNames)
  name: withImageNames(List<String> imageNames)
  nameWithType: DockerBuildRequest.withImageNames(List<String> imageNames)
  parameters:
  - description: <p>the imageNames value to set </p>
    name: imageNames
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the fully qualified image names including the repository and tag.</p>

    <p></p>
  syntax: public DockerBuildRequest withImageNames(List<String> imageNames)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withImageNames(List<String>)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withIsPushEnabled(Boolean isPushEnabled)
  name: withIsPushEnabled(Boolean isPushEnabled)
  nameWithType: DockerBuildRequest.withIsPushEnabled(Boolean isPushEnabled)
  parameters:
  - description: <p>the isPushEnabled value to set </p>
    name: isPushEnabled
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the value of this property indicates whether the image built should be pushed to the registry or not.</p>

    <p></p>
  syntax: public DockerBuildRequest withIsPushEnabled(Boolean isPushEnabled)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withIsPushEnabled(Boolean)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withNoCache(Boolean noCache)
  name: withNoCache(Boolean noCache)
  nameWithType: DockerBuildRequest.withNoCache(Boolean noCache)
  parameters:
  - description: <p>the noCache value to set </p>
    name: noCache
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the value of this property indicates whether the image cache is enabled or not.</p>

    <p></p>
  syntax: public DockerBuildRequest withNoCache(Boolean noCache)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withNoCache(Boolean)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withPlatform(PlatformProperties platform)
  name: withPlatform(PlatformProperties platform)
  nameWithType: DockerBuildRequest.withPlatform(PlatformProperties platform)
  parameters:
  - description: <p>the platform value to set </p>
    name: platform
    type: <xref href="com.microsoft.azure.management.containerregistry.PlatformProperties?alt=com.microsoft.azure.management.containerregistry.PlatformProperties&text=PlatformProperties" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the platform properties against which the run has to happen.</p>

    <p></p>
  syntax: public DockerBuildRequest withPlatform(PlatformProperties platform)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withPlatform(PlatformProperties)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withSourceLocation(String sourceLocation)
  name: withSourceLocation(String sourceLocation)
  nameWithType: DockerBuildRequest.withSourceLocation(String sourceLocation)
  parameters:
  - description: <p>the sourceLocation value to set </p>
    name: sourceLocation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the URL(absolute or relative) of the source context. It can be an URL to a tar or git repoistory. If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.</p>

    <p></p>
  syntax: public DockerBuildRequest withSourceLocation(String sourceLocation)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withSourceLocation(String)
- fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withTimeout(Integer timeout)
  name: withTimeout(Integer timeout)
  nameWithType: DockerBuildRequest.withTimeout(Integer timeout)
  parameters:
  - description: <p>the timeout value to set </p>
    name: timeout
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the DockerBuildRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.DockerBuildRequest?alt=com.microsoft.azure.management.containerregistry.DockerBuildRequest&text=DockerBuildRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set run timeout in seconds.</p>

    <p></p>
  syntax: public DockerBuildRequest withTimeout(Integer timeout)
  uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest.withTimeout(Integer)
nameWithType: DockerBuildRequest
syntax: public class DockerBuildRequest extends RunRequest
type: class
uid: com.microsoft.azure.management.containerregistry.DockerBuildRequest
fullName: com.microsoft.azure.management.containerregistry.DockerBuildRequest
name: DockerBuildRequest
package: com.microsoft.azure.management.containerregistry
summary: <p>The parameters for a docker quick build. </p>
metadata: {}
