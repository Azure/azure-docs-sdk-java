### YamlMime:JavaType
fields:
- field:
    type: Event&lt;EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs?alt=com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs&text=ShardExecutionEventArgs" data-throw-if-not-resolved="False"/>&gt;&gt;
  fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionBegan
  name: shardExecutionBegan
  nameWithType: MultiShardStatement.shardExecutionBegan
  summary: <p>The event handler invoked when execution has begun on a given shard. </p>
  syntax: public Event<EventHandler<ShardExecutionEventArgs>> shardExecutionBegan= new Event<>()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionBegan
- field:
    type: Event&lt;EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs?alt=com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs&text=ShardExecutionEventArgs" data-throw-if-not-resolved="False"/>&gt;&gt;
  fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionCanceled
  name: shardExecutionCanceled
  nameWithType: MultiShardStatement.shardExecutionCanceled
  summary: <p>The event handler invoked when execution on a given shard is canceled, either explicitly via the provided CancellationToken or implicitly as a result of the chosen MultiShardExecutionPolicy. </p>
  syntax: public Event<EventHandler<ShardExecutionEventArgs>> shardExecutionCanceled= new Event<>()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionCanceled
- field:
    type: Event&lt;EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs?alt=com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs&text=ShardExecutionEventArgs" data-throw-if-not-resolved="False"/>&gt;&gt;
  fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionFaulted
  name: shardExecutionFaulted
  nameWithType: MultiShardStatement.shardExecutionFaulted
  summary: <p>The event handler invoked when execution on a given shard has faulted. This handler is only invoked on exceptions for which execution could not be retried further as a result of the exception's non-transience or as a result of the chosen RetryBehavior. </p>
  syntax: public Event<EventHandler<ShardExecutionEventArgs>> shardExecutionFaulted= new Event<>()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionFaulted
- field:
    type: Event&lt;EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs?alt=com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs&text=ShardExecutionEventArgs" data-throw-if-not-resolved="False"/>&gt;&gt;
  fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionReaderReturned
  name: shardExecutionReaderReturned
  nameWithType: MultiShardStatement.shardExecutionReaderReturned
  summary: <p>The event handler invoked when executeQuery on a certain shard has successfully returned a reader. This is an internal-only method, and differs from shardExecutionSucceeded in that it is invoked BEFORE the reader is added to the MultiShardResultSet; this adding is rife with side effects that are difficult to isolate. </p>
  syntax: public Event<EventHandler<ShardExecutionEventArgs>> shardExecutionReaderReturned= new Event<>()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionReaderReturned
- field:
    type: Event&lt;EventHandler&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs?alt=com.microsoft.azure.elasticdb.query.multishard.ShardExecutionEventArgs&text=ShardExecutionEventArgs" data-throw-if-not-resolved="False"/>&gt;&gt;
  fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionSucceeded
  name: shardExecutionSucceeded
  nameWithType: MultiShardStatement.shardExecutionSucceeded
  summary: <p>The event handler invoked when execution has successfully completed on a given shard or its shard-specific ResultSet has been returned. </p>
  syntax: public Event<EventHandler<ShardExecutionEventArgs>> shardExecutionSucceeded= new Event<>()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.shardExecutionSucceeded
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.cancel()
  name: cancel()
  nameWithType: MultiShardStatement.cancel()
  summary: <p>Attempts to cancel an in progress <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement" data-throw-if-not-resolved="false" data-raw-source="MultiShardStatement"></xref> and any ongoing work that is performed at the shards on behalf of the command. We don't want cancel throwing any exceptions. Just cancel. </p>
  syntax: public void cancel()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.cancel()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.close()
  name: close()
  nameWithType: MultiShardStatement.close()
  syntax: public void close()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.close()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.create(MultiShardConnection connection, String commandText)
  name: create(MultiShardConnection connection, String commandText)
  nameWithType: MultiShardStatement.create(MultiShardConnection connection, String commandText)
  parameters:
  - description: <p>The connection to shards </p>
    name: connection
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection&text=MultiShardConnection" data-throw-if-not-resolved="False"/>
  - description: <p>The command text to execute against shards </p>
    name: commandText
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An Instance of this class. </p>
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement&text=MultiShardStatement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instance constructor of this class. Default command timeout of 300 seconds is used.</p>

    <p></p>
  syntax: public static MultiShardStatement create(MultiShardConnection connection, String commandText)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.create(MultiShardConnection,String)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.create(MultiShardConnection connection, String commandText, int commandTimeout)
  name: create(MultiShardConnection connection, String commandText, int commandTimeout)
  nameWithType: MultiShardStatement.create(MultiShardConnection connection, String commandText, int commandTimeout)
  parameters:
  - description: <p>The connection to shards </p>
    name: connection
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection&text=MultiShardConnection" data-throw-if-not-resolved="False"/>
  - description: <p>The command text to execute against shards </p>
    name: commandText
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Command timeout for given commandText to be run against ALL shards </p>
    name: commandTimeout
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An Instance of this class. </p>
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement&text=MultiShardStatement" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instance constructor of this class. Default command type is text.</p>

    <p></p>
  syntax: public static MultiShardStatement create(MultiShardConnection connection, String commandText, int commandTimeout)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.create(MultiShardConnection,String,int)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.dispose(boolean disposing)
  name: dispose(boolean disposing)
  nameWithType: MultiShardStatement.dispose(boolean disposing)
  parameters:
  - name: disposing
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Dispose off any unmanaged/managed resources held. We purposely want to ignore exceptions. </p>
  syntax: protected void dispose(boolean disposing)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.dispose(boolean)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQuery()
  name: executeQuery()
  nameWithType: MultiShardStatement.executeQuery()
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the commandText is null or empty </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the CommandTimeout elapsed prior to completion </p>
  returns:
    description: <p>the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref> instance with the overall concatenated result set. </p>
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet&text=MultiShardResultSet" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The ExecuteReader methods of the MultiShardStatement execute the given command statement on each shard and return the concatenation (i.e. UNION ALL) of the individual results from the shards in a <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref>. The execution policy regarding result completeness can be controlled by setting the MultiShardExecutionPolicy. The default execution policy is to return complete results.</p>

    <p></p>
  syntax: public MultiShardResultSet executeQuery()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQuery()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQuery(CommandBehavior behavior)
  name: executeQuery(CommandBehavior behavior)
  nameWithType: MultiShardStatement.executeQuery(CommandBehavior behavior)
  parameters:
  - description: <p>specifies the CommandBehavior to use. </p>
    name: behavior
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.CommandBehavior?alt=com.microsoft.azure.elasticdb.query.logging.CommandBehavior&text=CommandBehavior" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the commandText is null or empty </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the CommandTimeout elapsed prior to completion </p>
  returns:
    description: <p>the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref> instance with the overall concatenated ResultSet. </p>
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet&text=MultiShardResultSet" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The ExecuteReader methods of the MultiShardStatement execute the given command statement on each shard and return the concatenation (i.e. UNION ALL) of the individual results from the shards in a <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref>. The execution policy regarding result completeness can be controlled by setting the MultiShardExecutionPolicy. The default execution policy is to return complete results.</p>

    <p></p>
  syntax: public MultiShardResultSet executeQuery(CommandBehavior behavior)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQuery(CommandBehavior)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQuery(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  name: executeQuery(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  nameWithType: MultiShardStatement.executeQuery(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  parameters:
  - description: <p>Command behavior to use </p>
    name: behavior
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.CommandBehavior?alt=com.microsoft.azure.elasticdb.query.logging.CommandBehavior&text=CommandBehavior" data-throw-if-not-resolved="False"/>
  - description: <p>The retry policy to use when executing commands against the shards </p>
    name: commandRetryPolicy
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>The execution policy to use </p>
    name: executionPolicy
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy?alt=com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy&text=MultiShardExecutionPolicy" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>If the commandText is null or empty </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>If the commandTimeout elapsed prior to completion </p>
  - type: <xref href="MultiShardAggregateException?alt=MultiShardAggregateException&text=MultiShardAggregateException" data-throw-if-not-resolved="False"/>
    description: <p>If one or more errors occurred while executing the query </p>
  returns:
    description: <p>MultiShardResultSet instance that encompasses results from all shards </p>
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet&text=MultiShardResultSet" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Runs the given query against all shards and returns a reader that encompasses results from them. Design Principles - Commands are executed in a parallel, non-blocking manner. - Only the calling thread is blocked until the command is complete against all shards.</p>

    <p></p>
  syntax: public MultiShardResultSet executeQuery(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQuery(CommandBehavior,RetryPolicy,MultiShardExecutionPolicy)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQueryAsync()
  name: executeQueryAsync()
  nameWithType: MultiShardStatement.executeQueryAsync()
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the commandText is null or empty, or if the specified command behavior is not supported such as CloseConnection or SingleRow. </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the commandTimeout elapsed prior to completion. </p>
  returns:
    description: <p>a task wrapping the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref> instance with the overall concatenated result set. </p>
    type: Callable&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet&text=MultiShardResultSet" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>The ExecuteReader methods of the MultiShardStatement execute the given command statement on each shard and return the concatenation (i.e. UNION ALL) of the individual results from the shards in a <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref>. The execution policy regarding result completeness can be controlled by setting the MultiShardExecutionPolicy. The default execution policy is to return complete results.</p>

    <p></p>
  syntax: public Callable<MultiShardResultSet> executeQueryAsync()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQueryAsync()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQueryAsync(CommandBehavior behavior)
  name: executeQueryAsync(CommandBehavior behavior)
  nameWithType: MultiShardStatement.executeQueryAsync(CommandBehavior behavior)
  parameters:
  - description: <p>Command behavior to use </p>
    name: behavior
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.CommandBehavior?alt=com.microsoft.azure.elasticdb.query.logging.CommandBehavior&text=CommandBehavior" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the commandText is null or empty, or if the specified command behavior is not supported such as CloseConnection or SingleRow. </p>
  - type: <xref href="TimeoutException?alt=TimeoutException&text=TimeoutException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the commandTimeout elapsed prior to completion. </p>
  returns:
    description: <p>a task wrapping the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref> instance with the overall concatenated result set. </p>
    type: Callable&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet&text=MultiShardResultSet" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>The ExecuteReader methods of the MultiShardStatement execute the given command statement on each shard and return the concatenation (i.e. UNION ALL) of the individual results from the shards in a <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref>. The execution policy regarding result completeness can be controlled by setting the MultiShardExecutionPolicy. The default execution policy is to return complete results.</p>

    <p></p>
  syntax: public Callable<MultiShardResultSet> executeQueryAsync(CommandBehavior behavior)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQueryAsync(CommandBehavior)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQueryAsync(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  name: executeQueryAsync(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  nameWithType: MultiShardStatement.executeQueryAsync(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  parameters:
  - description: <p>Command behavior to use </p>
    name: behavior
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.CommandBehavior?alt=com.microsoft.azure.elasticdb.query.logging.CommandBehavior&text=CommandBehavior" data-throw-if-not-resolved="False"/>
  - description: <p>The retry policy to use when executing commands against the shards </p>
    name: commandRetryPolicy
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>The execution policy to use </p>
    name: executionPolicy
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy?alt=com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy&text=MultiShardExecutionPolicy" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>If the commandText is null or empty </p>
  returns:
    description: <p>A task with a ResultT that encompasses results from all shards Any exceptions during command execution are conveyed via the returned Task </p>
    type: Callable&lt;<xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet&text=MultiShardResultSet" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Executes the given query against all shards asynchronously.</p>

    <p></p>
  syntax: public Callable<MultiShardResultSet> executeQueryAsync(CommandBehavior behavior, RetryPolicy commandRetryPolicy, MultiShardExecutionPolicy executionPolicy)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.executeQueryAsync(CommandBehavior,RetryPolicy,MultiShardExecutionPolicy)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getCommandText()
  name: getCommandText()
  nameWithType: MultiShardStatement.getCommandText()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the command text to execute against the set of shards. </p>
  syntax: public String getCommandText()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getCommandText()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getCommandTimeout()
  name: getCommandTimeout()
  nameWithType: MultiShardStatement.getCommandTimeout()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Time in seconds to wait for the command to be executed on ALL shards. A value of 0 indicates no wait time limit. The default is 300 seconds. </p>
  syntax: public int getCommandTimeout()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getCommandTimeout()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getCommandTimeoutPerShard()
  name: getCommandTimeoutPerShard()
  nameWithType: MultiShardStatement.getCommandTimeoutPerShard()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>This property controls the timeout for running a command against individual shards. </p>
  syntax: public int getCommandTimeoutPerShard()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getCommandTimeoutPerShard()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getConnection()
  name: getConnection()
  nameWithType: MultiShardStatement.getConnection()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection?alt=com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection&text=MultiShardConnection" data-throw-if-not-resolved="False"/>
  syntax: public MultiShardConnection getConnection()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getConnection()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getExecutionOptions()
  name: getExecutionOptions()
  nameWithType: MultiShardStatement.getExecutionOptions()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionOptions?alt=com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionOptions&text=MultiShardExecutionOptions" data-throw-if-not-resolved="False"/>
  syntax: public MultiShardExecutionOptions getExecutionOptions()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getExecutionOptions()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getExecutionPolicy()
  name: getExecutionPolicy()
  nameWithType: MultiShardStatement.getExecutionPolicy()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy?alt=com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy&text=MultiShardExecutionPolicy" data-throw-if-not-resolved="False"/>
  syntax: public MultiShardExecutionPolicy getExecutionPolicy()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getExecutionPolicy()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getRetryBehavior()
  name: getRetryBehavior()
  nameWithType: MultiShardStatement.getRetryBehavior()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior&text=RetryBehavior" data-throw-if-not-resolved="False"/>
  syntax: public RetryBehavior getRetryBehavior()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getRetryBehavior()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getRetryPolicy()
  name: getRetryPolicy()
  nameWithType: MultiShardStatement.getRetryPolicy()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  syntax: public RetryPolicy getRetryPolicy()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.getRetryPolicy()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.resetCommandTimeout()
  name: resetCommandTimeout()
  nameWithType: MultiShardStatement.resetCommandTimeout()
  summary: <p>Resets the commandTimeout property to its default value. </p>
  syntax: public void resetCommandTimeout()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.resetCommandTimeout()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.resetCommandTimeoutPerShard()
  name: resetCommandTimeoutPerShard()
  nameWithType: MultiShardStatement.resetCommandTimeoutPerShard()
  summary: <p>Resets the CommandTimeoutPerShard property to its default value. </p>
  syntax: public void resetCommandTimeoutPerShard()
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.resetCommandTimeoutPerShard()
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setCommandText(String value)
  name: setCommandText(String value)
  nameWithType: MultiShardStatement.setCommandText(String value)
  parameters:
  - name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the command text to execute against the set of shards. </p>
  syntax: public void setCommandText(String value)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setCommandText(String)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setCommandTimeout(int commandTimeout)
  name: setCommandTimeout(int commandTimeout)
  nameWithType: MultiShardStatement.setCommandTimeout(int commandTimeout)
  parameters:
  - name: commandTimeout
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public void setCommandTimeout(int commandTimeout)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setCommandTimeout(int)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setCommandTimeoutPerShard(int value)
  name: setCommandTimeoutPerShard(int value)
  nameWithType: MultiShardStatement.setCommandTimeoutPerShard(int value)
  parameters:
  - name: value
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>This property controls the timeout for running a command against individual shards. </p>
  syntax: public void setCommandTimeoutPerShard(int value)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setCommandTimeoutPerShard(int)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setExecutionOptions(MultiShardExecutionOptions value)
  name: setExecutionOptions(MultiShardExecutionOptions value)
  nameWithType: MultiShardStatement.setExecutionOptions(MultiShardExecutionOptions value)
  parameters:
  - name: value
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionOptions?alt=com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionOptions&text=MultiShardExecutionOptions" data-throw-if-not-resolved="False"/>
  syntax: public void setExecutionOptions(MultiShardExecutionOptions value)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setExecutionOptions(MultiShardExecutionOptions)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setExecutionPolicy(MultiShardExecutionPolicy value)
  name: setExecutionPolicy(MultiShardExecutionPolicy value)
  nameWithType: MultiShardStatement.setExecutionPolicy(MultiShardExecutionPolicy value)
  parameters:
  - name: value
    type: <xref href="com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy?alt=com.microsoft.azure.elasticdb.query.logging.MultiShardExecutionPolicy&text=MultiShardExecutionPolicy" data-throw-if-not-resolved="False"/>
  syntax: public void setExecutionPolicy(MultiShardExecutionPolicy value)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setExecutionPolicy(MultiShardExecutionPolicy)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setParameters(int index, int type, Object... objects)
  name: setParameters(int index, int type, Object... objects)
  nameWithType: MultiShardStatement.setParameters(int index, int type, Object... objects)
  parameters:
  - description: <p>Index of the parameter </p>
    name: index
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>SQL Type of the parameter </p>
    name: type
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>An array of objects to add as parameter </p>
    name: objects
    type: <xref href="Object...?alt=Object...&text=Object..." data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set query parameters. Currently only Table type parameter is supported.</p>

    <p></p>
  syntax: public void setParameters(int index, int type, Object... objects)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setParameters(int,int,Object...)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setRetryBehavior(RetryBehavior value)
  name: setRetryBehavior(RetryBehavior value)
  nameWithType: MultiShardStatement.setRetryBehavior(RetryBehavior value)
  parameters:
  - name: value
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryBehavior&text=RetryBehavior" data-throw-if-not-resolved="False"/>
  syntax: public void setRetryBehavior(RetryBehavior value)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setRetryBehavior(RetryBehavior)
- fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setRetryPolicy(RetryPolicy value)
  name: setRetryPolicy(RetryPolicy value)
  nameWithType: MultiShardStatement.setRetryPolicy(RetryPolicy value)
  parameters:
  - name: value
    type: <xref href="com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy?alt=com.microsoft.azure.elasticdb.core.commons.transientfaulthandling.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  syntax: public void setRetryPolicy(RetryPolicy value)
  uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement.setRetryPolicy(RetryPolicy)
nameWithType: MultiShardStatement
syntax: public class MultiShardStatement
type: class
uid: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement
fullName: com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement
name: MultiShardStatement
package: com.microsoft.azure.elasticdb.query.multishard
summary: '<p>Complements the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection" data-throw-if-not-resolved="false" data-raw-source="MultiShardConnection"></xref> with a command object similar to the triad of Connection, Statement, and ResultSet. The <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement" data-throw-if-not-resolved="false" data-raw-source="MultiShardStatement"></xref> takes a T-SQL command statement as its input and executes the command across its collection of shards specified by its corresponding <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardConnection" data-throw-if-not-resolved="false" data-raw-source="MultiShardConnection"></xref>. The results from processing the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardStatement" data-throw-if-not-resolved="false" data-raw-source="MultiShardStatement"></xref> are made available through the execute methods and the <xref uid="com.microsoft.azure.elasticdb.query.multishard.MultiShardResultSet" data-throw-if-not-resolved="false" data-raw-source="MultiShardResultSet"></xref>. Purpose: Complements the MultiShardConnection and abstracts away the work of running a given command against multiple shards Notes: This class is NOT thread-safe. Since the Sync API internally invokes the async API, connections to shards with connection string property "context connection = true" are not supported. Transaction semantics are not supported. </p>'
metadata: {}
