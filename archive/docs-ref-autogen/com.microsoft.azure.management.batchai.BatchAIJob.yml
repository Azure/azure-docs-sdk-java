### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
methods:
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.caffeSettings()
  name: caffeSettings()
  nameWithType: BatchAIJob.caffeSettings()
  returns:
    description: <p>the settings for Caffe job. </p>
    type: <xref href="com.microsoft.azure.management.batchai.CaffeSettings?alt=com.microsoft.azure.management.batchai.CaffeSettings&text=CaffeSettings" data-throw-if-not-resolved="False"/>
  syntax: public CaffeSettings caffeSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.caffeSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.chainerSettings()
  name: chainerSettings()
  nameWithType: BatchAIJob.chainerSettings()
  returns:
    description: <p>the settings for Chainer job. </p>
    type: <xref href="com.microsoft.azure.management.batchai.ChainerSettings?alt=com.microsoft.azure.management.batchai.ChainerSettings&text=ChainerSettings" data-throw-if-not-resolved="False"/>
  syntax: public ChainerSettings chainerSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.chainerSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.cluster()
  name: cluster()
  nameWithType: BatchAIJob.cluster()
  returns:
    description: <p>the Id of the cluster on which this job will run. </p>
    type: <xref href="com.microsoft.azure.management.batchai.ResourceId?alt=com.microsoft.azure.management.batchai.ResourceId&text=ResourceId" data-throw-if-not-resolved="False"/>
  syntax: public ResourceId cluster()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.cluster()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.cntkSettings()
  name: cntkSettings()
  nameWithType: BatchAIJob.cntkSettings()
  returns:
    description: <p>the settings for CNTK (aka Microsoft Cognitive Toolkit) job </p>
    type: <xref href="com.microsoft.azure.management.batchai.CNTKsettings?alt=com.microsoft.azure.management.batchai.CNTKsettings&text=CNTKsettings" data-throw-if-not-resolved="False"/>
  syntax: public CNTKsettings cntkSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.cntkSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.constraints()
  name: constraints()
  nameWithType: BatchAIJob.constraints()
  returns:
    description: <p>constraints associated with the Job. </p>
    type: <xref href="com.microsoft.azure.management.batchai.JobPropertiesConstraints?alt=com.microsoft.azure.management.batchai.JobPropertiesConstraints&text=JobPropertiesConstraints" data-throw-if-not-resolved="False"/>
  syntax: public JobPropertiesConstraints constraints()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.constraints()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.containerSettings()
  name: containerSettings()
  nameWithType: BatchAIJob.containerSettings()
  returns:
    description: <p>the settings for the container to run the job. If not provided, the job will run on the VM. </p>
    type: <xref href="com.microsoft.azure.management.batchai.ContainerSettings?alt=com.microsoft.azure.management.batchai.ContainerSettings&text=ContainerSettings" data-throw-if-not-resolved="False"/>
  syntax: public ContainerSettings containerSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.containerSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.creationTime()
  name: creationTime()
  nameWithType: BatchAIJob.creationTime()
  returns:
    description: <p>the creation time of the job </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime creationTime()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.creationTime()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.customToolkitSettings()
  name: customToolkitSettings()
  nameWithType: BatchAIJob.customToolkitSettings()
  returns:
    description: <p>the settings for custom tool kit job </p>
    type: <xref href="com.microsoft.azure.management.batchai.CustomToolkitSettings?alt=com.microsoft.azure.management.batchai.CustomToolkitSettings&text=CustomToolkitSettings" data-throw-if-not-resolved="False"/>
  syntax: public CustomToolkitSettings customToolkitSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.customToolkitSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.environmentVariables()
  name: environmentVariables()
  nameWithType: BatchAIJob.environmentVariables()
  returns:
    description: '<p>Additional environment variables to be passed to the job. Batch AI services sets the following environment variables for all jobs: AZ_BATCHAI_INPUT_id, AZ_BATCHAI_OUTPUT_id, AZ_BATCHAI_NUM_GPUS_PER_NODE, For distributed TensorFlow jobs, following additional environment variables are set by the Batch AI Service: AZ_BATCHAI_PS_HOSTS, AZ_BATCHAI_WORKER_HOSTS. </p>'
    type: List&lt;<xref href="com.microsoft.azure.management.batchai.EnvironmentVariable?alt=com.microsoft.azure.management.batchai.EnvironmentVariable&text=EnvironmentVariable" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<EnvironmentVariable> environmentVariables()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.environmentVariables()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.executionInfo()
  name: executionInfo()
  nameWithType: BatchAIJob.executionInfo()
  returns:
    description: <p>information about the execution of a job in the Azure Batch service. </p>
    type: <xref href="com.microsoft.azure.management.batchai.JobPropertiesExecutionInfo?alt=com.microsoft.azure.management.batchai.JobPropertiesExecutionInfo&text=JobPropertiesExecutionInfo" data-throw-if-not-resolved="False"/>
  syntax: public JobPropertiesExecutionInfo executionInfo()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.executionInfo()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.executionState()
  name: executionState()
  nameWithType: BatchAIJob.executionState()
  returns:
    description: <p>the current state of the job </p>
    type: <xref href="com.microsoft.azure.management.batchai.ExecutionState?alt=com.microsoft.azure.management.batchai.ExecutionState&text=ExecutionState" data-throw-if-not-resolved="False"/>
  summary: '<p>Gets the current state of the job. Possible values are: queued - The job is queued and able to run. A job enters this state when it is created, or when it is awaiting a retry after a failed run. running - The job is running on a compute cluster. This includes job-level preparation such as downloading resource files or set up container specified on the job - it does not necessarily mean that the job command line has started executing. terminating - The job is terminated by the user, the terminate operation is in progress. succeeded - The job has completed running succesfully and exited with exit code 0. failed - The job has finished unsuccessfully (failed with a non-zero exit code) and has exhausted its retry limit. A job is also marked as failed if an error occurred launching the job. </p>'
  syntax: public ExecutionState executionState()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.executionState()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.executionStateTransitionTime()
  name: executionStateTransitionTime()
  nameWithType: BatchAIJob.executionStateTransitionTime()
  returns:
    description: <p>the time at which the job entered its current execution state </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime executionStateTransitionTime()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.executionStateTransitionTime()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.experiment()
  name: experiment()
  nameWithType: BatchAIJob.experiment()
  returns:
    description: <p>the experiment information of the job. </p>
    type: <xref href="com.microsoft.azure.management.batchai.BatchAIExperiment?alt=com.microsoft.azure.management.batchai.BatchAIExperiment&text=BatchAIExperiment" data-throw-if-not-resolved="False"/>
  syntax: public BatchAIExperiment experiment()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.experiment()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.inputDirectories()
  name: inputDirectories()
  nameWithType: BatchAIJob.inputDirectories()
  returns:
    description: <p>the list of input directories for the Job </p>
    type: List&lt;<xref href="com.microsoft.azure.management.batchai.InputDirectory?alt=com.microsoft.azure.management.batchai.InputDirectory&text=InputDirectory" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<InputDirectory> inputDirectories()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.inputDirectories()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.jobOutputDirectoryPathSegment()
  name: jobOutputDirectoryPathSegment()
  nameWithType: BatchAIJob.jobOutputDirectoryPathSegment()
  returns:
    description: <p>a segment of job's output directories path created by BatchAI. Batch AI creates job's output directories under an unique path to avoid conflicts between jobs. This value contains a path segment generated by Batch AI to make the path unique and can be used to find the output directory on the node or mounted filesystem. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String jobOutputDirectoryPathSegment()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.jobOutputDirectoryPathSegment()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.jobPreparation()
  name: jobPreparation()
  nameWithType: BatchAIJob.jobPreparation()
  returns:
    description: <p>the actions to be performed before tool kit is launched. The specified actions will run on all the nodes that are part of the job. </p>
    type: <xref href="com.microsoft.azure.management.batchai.JobPreparation?alt=com.microsoft.azure.management.batchai.JobPreparation&text=JobPreparation" data-throw-if-not-resolved="False"/>
  syntax: public JobPreparation jobPreparation()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.jobPreparation()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.listFiles(String outputDirectoryId)
  name: listFiles(String outputDirectoryId)
  nameWithType: BatchAIJob.listFiles(String outputDirectoryId)
  parameters:
  - description: <p>Id of the job output directory. This is the OutputDirectory<ndash></ndash>&gt;id parameter that is given by the user during Create Job. </p>
    name: outputDirectoryId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>list of files inside the given output directory </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batchai.OutputFile?alt=com.microsoft.azure.management.batchai.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>List all files inside the given output directory (Only if the output directory is on Azure File Share or Azure Storage container). </p>
  syntax: public PagedList<OutputFile> listFiles(String outputDirectoryId)
  uid: com.microsoft.azure.management.batchai.BatchAIJob.listFiles(String)
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.listFiles(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  name: listFiles(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  nameWithType: BatchAIJob.listFiles(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  parameters:
  - description: <p>Id of the job output directory. This is the OutputDirectory<ndash></ndash>&gt;id parameter that is given by the user during Create Job. </p>
    name: outputDirectoryId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the path to the directory </p>
    name: directory
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the number of minutes after which the download link will expire </p>
    name: linkExpiryMinutes
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the maximum number of items to return in the response. A maximum of 1000 files can be returned </p>
    name: maxResults
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>list of files inside the given output directory </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batchai.OutputFile?alt=com.microsoft.azure.management.batchai.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>List all files inside the given output directory (Only if the output directory is on Azure File Share or Azure Storage container). </p>
  syntax: public PagedList<OutputFile> listFiles(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  uid: com.microsoft.azure.management.batchai.BatchAIJob.listFiles(String,String,Integer,Integer)
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.listFilesAsync(String outputDirectoryId)
  name: listFilesAsync(String outputDirectoryId)
  nameWithType: BatchAIJob.listFilesAsync(String outputDirectoryId)
  parameters:
  - description: <p>Id of the job output directory. This is the OutputDirectory<ndash></ndash>&gt;id parameter that is given by the user during Create Job. </p>
    name: outputDirectoryId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an observable that emits output file information </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batchai.OutputFile?alt=com.microsoft.azure.management.batchai.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>List all files inside the given output directory (Only if the output directory is on Azure File Share or Azure Storage container). </p>
  syntax: public Observable<OutputFile> listFilesAsync(String outputDirectoryId)
  uid: com.microsoft.azure.management.batchai.BatchAIJob.listFilesAsync(String)
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.listFilesAsync(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  name: listFilesAsync(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  nameWithType: BatchAIJob.listFilesAsync(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  parameters:
  - description: <p>Id of the job output directory. This is the OutputDirectory<ndash></ndash>&gt;id parameter that is given by the user during Create Job. </p>
    name: outputDirectoryId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the path to the directory </p>
    name: directory
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the number of minutes after which the download link will expire </p>
    name: linkExpiryMinutes
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the maximum number of items to return in the response. A maximum of 1000 files can be returned </p>
    name: maxResults
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an observable that emits output file information </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batchai.OutputFile?alt=com.microsoft.azure.management.batchai.OutputFile&text=OutputFile" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>List all files inside the given output directory (Only if the output directory is on Azure File Share or Azure Storage container). </p>
  syntax: public Observable<OutputFile> listFilesAsync(String outputDirectoryId, String directory, Integer linkExpiryMinutes, Integer maxResults)
  uid: com.microsoft.azure.management.batchai.BatchAIJob.listFilesAsync(String,String,Integer,Integer)
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.listRemoteLoginInformation()
  name: listRemoteLoginInformation()
  nameWithType: BatchAIJob.listRemoteLoginInformation()
  returns:
    description: <p>list of remote login details </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batchai.RemoteLoginInformation?alt=com.microsoft.azure.management.batchai.RemoteLoginInformation&text=RemoteLoginInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Gets a list of currently existing nodes which were used for the Job execution. The returned information contains the node ID, its public IP and SSH port. </p>
  syntax: public PagedList<RemoteLoginInformation> listRemoteLoginInformation()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.listRemoteLoginInformation()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.listRemoteLoginInformationAsync()
  name: listRemoteLoginInformationAsync()
  nameWithType: BatchAIJob.listRemoteLoginInformationAsync()
  returns:
    description: <p>an observable that emits remote login information </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batchai.RemoteLoginInformation?alt=com.microsoft.azure.management.batchai.RemoteLoginInformation&text=RemoteLoginInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Gets a list of currently existing nodes which were used for the Job execution. The returned information contains the node ID, its public IP and SSH port. </p>
  syntax: public Observable<RemoteLoginInformation> listRemoteLoginInformationAsync()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.listRemoteLoginInformationAsync()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.mountVolumes()
  name: mountVolumes()
  nameWithType: BatchAIJob.mountVolumes()
  returns:
    description: <p>information on mount volumes to be used by the job. These volumes will be mounted before the job execution and will be unmouted after the job completion. The volumes will be mounted at location specified by $AZ_BATCHAI_JOB_MOUNT_ROOT environment variable. </p>
    type: <xref href="com.microsoft.azure.management.batchai.MountVolumes?alt=com.microsoft.azure.management.batchai.MountVolumes&text=MountVolumes" data-throw-if-not-resolved="False"/>
  syntax: public MountVolumes mountVolumes()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.mountVolumes()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.nodeCount()
  name: nodeCount()
  nameWithType: BatchAIJob.nodeCount()
  returns:
    description: <p>number of compute nodes to run the job on. The job will be gang scheduled on that many compute nodes. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int nodeCount()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.nodeCount()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.outputDirectories()
  name: outputDirectories()
  nameWithType: BatchAIJob.outputDirectories()
  returns:
    description: <p>the list of output directories where the models will be created </p>
    type: List&lt;<xref href="com.microsoft.azure.management.batchai.OutputDirectory?alt=com.microsoft.azure.management.batchai.OutputDirectory&text=OutputDirectory" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<OutputDirectory> outputDirectories()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.outputDirectories()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.provisioningState()
  name: provisioningState()
  nameWithType: BatchAIJob.provisioningState()
  returns:
    description: <p>the provisioned state of the Batch AI job </p>
    type: <xref href="com.microsoft.azure.management.batchai.ProvisioningState?alt=com.microsoft.azure.management.batchai.ProvisioningState&text=ProvisioningState" data-throw-if-not-resolved="False"/>
  syntax: public ProvisioningState provisioningState()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.provisioningState()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.provisioningStateTransitionTime()
  name: provisioningStateTransitionTime()
  nameWithType: BatchAIJob.provisioningStateTransitionTime()
  returns:
    description: <p>the time at which the job entered its current provisioning state </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: <p>The time at which the job entered its current provisioning state. </p>
  syntax: public DateTime provisioningStateTransitionTime()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.provisioningStateTransitionTime()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.pyTorchSettings()
  name: pyTorchSettings()
  nameWithType: BatchAIJob.pyTorchSettings()
  returns:
    description: <p>the settings for pyTorch job </p>
    type: <xref href="com.microsoft.azure.management.batchai.PyTorchSettings?alt=com.microsoft.azure.management.batchai.PyTorchSettings&text=PyTorchSettings" data-throw-if-not-resolved="False"/>
  syntax: public PyTorchSettings pyTorchSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.pyTorchSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.schedulingPriority()
  name: schedulingPriority()
  nameWithType: BatchAIJob.schedulingPriority()
  returns:
    description: <p>priority associated with the job. Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. </p>
    type: <xref href="com.microsoft.azure.management.batchai.JobPriority?alt=com.microsoft.azure.management.batchai.JobPriority&text=JobPriority" data-throw-if-not-resolved="False"/>
  syntax: public JobPriority schedulingPriority()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.schedulingPriority()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.secrets()
  name: secrets()
  nameWithType: BatchAIJob.secrets()
  returns:
    description: <p>environment variables with secret values to set on the job. Only names are reported, server will never report values of these variables back. </p>
    type: List&lt;<xref href="com.microsoft.azure.management.batchai.EnvironmentVariableWithSecretValue?alt=com.microsoft.azure.management.batchai.EnvironmentVariableWithSecretValue&text=EnvironmentVariableWithSecretValue" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<EnvironmentVariableWithSecretValue> secrets()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.secrets()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.stdOutErrPathPrefix()
  name: stdOutErrPathPrefix()
  nameWithType: BatchAIJob.stdOutErrPathPrefix()
  returns:
    description: <p>the path where the Batch AI service will upload stdout and stderror of the job. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String stdOutErrPathPrefix()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.stdOutErrPathPrefix()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.tensorFlowSettings()
  name: tensorFlowSettings()
  nameWithType: BatchAIJob.tensorFlowSettings()
  returns:
    description: <p>the settings for Tensor Flow job </p>
    type: <xref href="com.microsoft.azure.management.batchai.TensorFlowSettings?alt=com.microsoft.azure.management.batchai.TensorFlowSettings&text=TensorFlowSettings" data-throw-if-not-resolved="False"/>
  syntax: public TensorFlowSettings tensorFlowSettings()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.tensorFlowSettings()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.terminate()
  name: terminate()
  nameWithType: BatchAIJob.terminate()
  summary: <p>Terminates a job. </p>
  syntax: public void terminate()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.terminate()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.terminateAsync()
  name: terminateAsync()
  nameWithType: BatchAIJob.terminateAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Terminates a job. </p>
  syntax: public Completable terminateAsync()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.terminateAsync()
- fullName: com.microsoft.azure.management.batchai.BatchAIJob.toolType()
  name: toolType()
  nameWithType: BatchAIJob.toolType()
  returns:
    description: <p>The toolkit type of this job </p>
    type: <xref href="com.microsoft.azure.management.batchai.ToolType?alt=com.microsoft.azure.management.batchai.ToolType&text=ToolType" data-throw-if-not-resolved="False"/>
  syntax: public ToolType toolType()
  uid: com.microsoft.azure.management.batchai.BatchAIJob.toolType()
nameWithType: BatchAIJob
syntax: public interface BatchAIJob extends HasInner<JobInner>,Indexable,HasId,HasName,Refreshable<BatchAIJob>
type: interface
uid: com.microsoft.azure.management.batchai.BatchAIJob
fullName: com.microsoft.azure.management.batchai.BatchAIJob
name: BatchAIJob
package: com.microsoft.azure.management.batchai
summary: <p>Client-side representation of Batch AI Job object, associated with Batch AI Cluster. </p>
metadata: {}
