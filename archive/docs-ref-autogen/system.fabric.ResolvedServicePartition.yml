### YamlMime:JavaType
fields:
- field:
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  fullName: system.fabric.ResolvedServicePartition.resolvedServicePartitionResultNative
  name: resolvedServicePartitionResultNative
  nameWithType: ResolvedServicePartition.resolvedServicePartitionResultNative
  syntax: public long resolvedServicePartitionResultNative
  uid: system.fabric.ResolvedServicePartition.resolvedServicePartitionResultNative
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.ResolvedServicePartition.compareVersion(ResolvedServicePartition other)
  name: compareVersion(ResolvedServicePartition other)
  nameWithType: ResolvedServicePartition.compareVersion(ResolvedServicePartition other)
  parameters:
  - description: <p>The other resolved service partition to compare. resolved service partition (RSP) argument with the parameter </p>
    name: other
    type: <xref href="system.fabric.ResolvedServicePartition?alt=system.fabric.ResolvedServicePartition&text=ResolvedServicePartition" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns int. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two resolved service partitions and identifies which is newer.</p>

    <p></p>
  syntax: public int compareVersion(ResolvedServicePartition other)
  uid: system.fabric.ResolvedServicePartition.compareVersion(ResolvedServicePartition)
- fullName: system.fabric.ResolvedServicePartition.getEndpoint()
  name: getEndpoint()
  nameWithType: ResolvedServicePartition.getEndpoint()
  returns:
    description: <p>A collection of <xref uid="system.fabric.ResolvedServiceEndpoint" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServiceEndpoint"></xref> for a service partition. </p>
    type: <xref href="system.fabric.ResolvedServiceEndpoint?alt=system.fabric.ResolvedServiceEndpoint&text=ResolvedServiceEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the endpoints of the service partition.</p>

    <p></p>
  syntax: public ResolvedServiceEndpoint getEndpoint()
  uid: system.fabric.ResolvedServicePartition.getEndpoint()
- fullName: system.fabric.ResolvedServicePartition.getEndpoints()
  name: getEndpoints()
  nameWithType: ResolvedServicePartition.getEndpoints()
  returns:
    description: <p>Returns <xref uid="system.fabric.ResolvedServiceEndpoint" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServiceEndpoint"></xref>. </p>
    type: List&lt;<xref href="system.fabric.ResolvedServiceEndpoint?alt=system.fabric.ResolvedServiceEndpoint&text=ResolvedServiceEndpoint" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a single endpoint, instead of a collection of all endpoints.</p>

    <p>

      <b>Remarks:</b>Many times, you only need a single endpoint instead of all the endpoints. If the service is stateless, it returns a random endpoint. If the service is a stateful service, than it returns the endpoint to which the Primary replica of the service partition listens. Note that if the Primary replica currently does not exist, it throws <xref uid="system.fabric.exception.FabricException" data-throw-if-not-resolved="false" data-raw-source="system.fabric.exception.FabricException"></xref>. </p>
  syntax: public List<ResolvedServiceEndpoint> getEndpoints()
  uid: system.fabric.ResolvedServicePartition.getEndpoints()
- fullName: system.fabric.ResolvedServicePartition.getServiceName()
  name: getServiceName()
  nameWithType: ResolvedServicePartition.getServiceName()
  returns:
    description: <p>Return <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.net.URI"></xref>. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the service instance.</p>

    <p></p>
  syntax: public URI getServiceName()
  uid: system.fabric.ResolvedServicePartition.getServiceName()
- fullName: system.fabric.ResolvedServicePartition.getServicePartitionInfo()
  name: getServicePartitionInfo()
  nameWithType: ResolvedServicePartition.getServicePartitionInfo()
  returns:
    description: <p>The information about the partition of the service that was resolved. </p>
    type: <xref href="system.fabric.ServicePartitionInformation?alt=system.fabric.ServicePartitionInformation&text=ServicePartitionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the partition of the service that was resolved.</p>

    <p></p>
  syntax: public ServicePartitionInformation getServicePartitionInfo()
  uid: system.fabric.ResolvedServicePartition.getServicePartitionInfo()
- fullName: system.fabric.ResolvedServicePartition.toString()
  name: toString()
  nameWithType: ResolvedServicePartition.toString()
  returns:
    description: <p>String representation of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> instance. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Get the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ResolvedServicePartition"></xref> instance values as a String. </p>
  syntax: public String toString()
  uid: system.fabric.ResolvedServicePartition.toString()
nameWithType: ResolvedServicePartition
syntax: public class ResolvedServicePartition
type: class
uid: system.fabric.ResolvedServicePartition
fullName: system.fabric.ResolvedServicePartition
name: ResolvedServicePartition
package: system.fabric
summary: >-
  <p>Represents a data structure that contains information on the partitioning and set of endpoints to which the specified Service partition listens.</p>

  <p></p>
metadata: {}
