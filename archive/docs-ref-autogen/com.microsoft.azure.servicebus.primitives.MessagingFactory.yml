### YamlMime:JavaType
fields:
- field:
    type: <xref href="final+ExecutorService?alt=final+ExecutorService&text=final+ExecutorService" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.INTERNAL_THREAD_POOL
  name: INTERNAL_THREAD_POOL
  nameWithType: MessagingFactory.INTERNAL_THREAD_POOL
  syntax: public static final ExecutorService INTERNAL_THREAD_POOL= Executors.newCachedThreadPool()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.INTERNAL_THREAD_POOL
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.primitives.ClientEntity?alt=com.microsoft.azure.servicebus.primitives.ClientEntity&text=ClientEntity" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
methods:
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionString(final String connectionString)
  name: createFromConnectionString(final String connectionString)
  nameWithType: MessagingFactory.createFromConnectionString(final String connectionString)
  parameters:
  - description: <p>connection string to the bus namespace or entity </p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if blocking thread is interrupted </p>
  - type: <xref href="ExecutionException?alt=ExecutionException&text=ExecutionException" data-throw-if-not-resolved="False"/>
    description: <p>if a connection couldn't be established to the namespace. Cause of the failure can be found by calling <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Exception#getCause()"></xref></p>
  returns:
    description: <p>an instance of MessagingFactory </p>
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  summary: <p>Creates an instance of MessagingFactory from the given connection string. This method blocks for a connection to the namespace to be established. </p>
  syntax: public static MessagingFactory createFromConnectionString(final String connectionString)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionString(final String)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionStringAsync(final String connectionString)
  name: createFromConnectionStringAsync(final String connectionString)
  nameWithType: MessagingFactory.createFromConnectionStringAsync(final String connectionString)
  parameters:
  - description: <p>connection string to the bus namespace or entity </p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a <code>CompletableFuture</code> which completes when a connection is established to the namespace or when a connection couldn't be established. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates an instance of MessagingFactory from the given connection string. This is a non-blocking method. </p>
  syntax: public static CompletableFuture<MessagingFactory> createFromConnectionStringAsync(final String connectionString)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionStringAsync(final String)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionStringBuilder(final ConnectionStringBuilder builder)
  name: createFromConnectionStringBuilder(final ConnectionStringBuilder builder)
  nameWithType: MessagingFactory.createFromConnectionStringBuilder(final ConnectionStringBuilder builder)
  parameters:
  - description: <p>connection string builder to the bus namespace or entity </p>
    name: builder
    type: final <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if blocking thread is interrupted </p>
  - type: <xref href="ExecutionException?alt=ExecutionException&text=ExecutionException" data-throw-if-not-resolved="False"/>
    description: <p>if a connection couldn't be established to the namespace. Cause of the failure can be found by calling <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Exception#getCause()"></xref></p>
  returns:
    description: <p>an instance of MessagingFactory </p>
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  summary: <p>Creates an instance of MessagingFactory from the given connection string builder. This method blocks for a connection to the namespace to be established. </p>
  syntax: public static MessagingFactory createFromConnectionStringBuilder(final ConnectionStringBuilder builder)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionStringBuilder(final ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionStringBuilderAsync(final ConnectionStringBuilder builder)
  name: createFromConnectionStringBuilderAsync(final ConnectionStringBuilder builder)
  nameWithType: MessagingFactory.createFromConnectionStringBuilderAsync(final ConnectionStringBuilder builder)
  parameters:
  - description: <p>connection string builder to the bus namespace or entity </p>
    name: builder
    type: final <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a <code>CompletableFuture</code> which completes when a connection is established to the namespace or when a connection couldn't be established. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates an instance of MessagingFactory from the given connection string builder. This is a non-blocking method. </p>
  syntax: public static CompletableFuture<MessagingFactory> createFromConnectionStringBuilderAsync(final ConnectionStringBuilder builder)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromConnectionStringBuilderAsync(final ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceEndpointURI(URI namespaceEndpointURI, ClientSettings clientSettings)
  name: createFromNamespaceEndpointURI(URI namespaceEndpointURI, ClientSettings clientSettings)
  nameWithType: MessagingFactory.createFromNamespaceEndpointURI(URI namespaceEndpointURI, ClientSettings clientSettings)
  parameters:
  - name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  syntax: public static MessagingFactory createFromNamespaceEndpointURI(URI namespaceEndpointURI, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceEndpointURI(URI,ClientSettings)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceEndpointURIAsyc(URI namespaceEndpointURI, ClientSettings clientSettings)
  name: createFromNamespaceEndpointURIAsyc(URI namespaceEndpointURI, ClientSettings clientSettings)
  nameWithType: MessagingFactory.createFromNamespaceEndpointURIAsyc(URI namespaceEndpointURI, ClientSettings clientSettings)
  parameters:
  - name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>&gt;
  syntax: public static CompletableFuture<MessagingFactory> createFromNamespaceEndpointURIAsyc(URI namespaceEndpointURI, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceEndpointURIAsyc(URI,ClientSettings)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceName(String sbNamespaceName, ClientSettings clientSettings)
  name: createFromNamespaceName(String sbNamespaceName, ClientSettings clientSettings)
  nameWithType: MessagingFactory.createFromNamespaceName(String sbNamespaceName, ClientSettings clientSettings)
  parameters:
  - name: sbNamespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  syntax: public static MessagingFactory createFromNamespaceName(String sbNamespaceName, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceName(String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceNameAsyc(String sbNamespaceName, ClientSettings clientSettings)
  name: createFromNamespaceNameAsyc(String sbNamespaceName, ClientSettings clientSettings)
  nameWithType: MessagingFactory.createFromNamespaceNameAsyc(String sbNamespaceName, ClientSettings clientSettings)
  parameters:
  - name: sbNamespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>&gt;
  syntax: public static CompletableFuture<MessagingFactory> createFromNamespaceNameAsyc(String sbNamespaceName, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.createFromNamespaceNameAsyc(String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.deregisterForConnectionError(Link link)
  name: deregisterForConnectionError(Link link)
  nameWithType: MessagingFactory.deregisterForConnectionError(Link link)
  parameters:
  - name: link
    type: <xref href="Link?alt=Link&text=Link" data-throw-if-not-resolved="False"/>
  summary: <p>Internal method.<nonbreakablespace></nonbreakablespace>Clients should not use this method. </p>
  syntax: public void deregisterForConnectionError(Link link)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.deregisterForConnectionError(Link)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransaction(TransactionContext transaction, boolean commit)
  name: endTransaction(TransactionContext transaction, boolean commit)
  nameWithType: MessagingFactory.endTransaction(TransactionContext transaction, boolean commit)
  parameters:
  - description: <p>The transaction object. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  - description: <p>A boolean value of <code>true</code> indicates transaction to be committed. A value of <code>false</code> indicates a transaction rollback. </p>
    name: commit
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if transaction fails to end </p>
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  summary: <p>Ends a transaction that was initiated using <xref uid="com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()" data-throw-if-not-resolved="false" data-raw-source="MessagingFactory#startTransactionAsync()"></xref>. </p>
  syntax: public void endTransaction(TransactionContext transaction, boolean commit)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransaction(TransactionContext,boolean)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext transaction, boolean commit)
  name: endTransactionAsync(TransactionContext transaction, boolean commit)
  nameWithType: MessagingFactory.endTransactionAsync(TransactionContext transaction, boolean commit)
  parameters:
  - description: <p>The transaction object. </p>
    name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  - description: <p>A boolean value of <code>true</code> indicates transaction to be committed. A value of <code>false</code> indicates a transaction rollback. </p>
    name: commit
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>CompletableFuture</code></p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Ends a transaction that was initiated using <xref uid="com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()" data-throw-if-not-resolved="false" data-raw-source="MessagingFactory#startTransactionAsync()"></xref>. </p>
  syntax: public CompletableFuture<Void> endTransactionAsync(TransactionContext transaction, boolean commit)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.getClientSettings()
  name: getClientSettings()
  nameWithType: MessagingFactory.getClientSettings()
  returns:
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  syntax: public ClientSettings getClientSettings()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.getClientSettings()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.getHostName()
  name: getHostName()
  nameWithType: MessagingFactory.getHostName()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getHostName()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.getHostName()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.getOperationTimeout()
  name: getOperationTimeout()
  nameWithType: MessagingFactory.getOperationTimeout()
  returns:
    description: <p>operation timeout specified in the connection string </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the operation timeout from the connections string. </p>
  syntax: public Duration getOperationTimeout()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.getOperationTimeout()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.getRetryPolicy()
  name: getRetryPolicy()
  nameWithType: MessagingFactory.getRetryPolicy()
  returns:
    description: <p>retry policy specified in the connection string </p>
    type: <xref href="com.microsoft.azure.servicebus.primitives.RetryPolicy?alt=com.microsoft.azure.servicebus.primitives.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the retry policy from the connection string. </p>
  syntax: public RetryPolicy getRetryPolicy()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.getRetryPolicy()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.onClose()
  name: onClose()
  nameWithType: MessagingFactory.onClose()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CompletableFuture<Void> onClose()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.onClose()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.onConnectionError(ErrorCondition error)
  name: onConnectionError(ErrorCondition error)
  nameWithType: MessagingFactory.onConnectionError(ErrorCondition error)
  parameters:
  - name: error
    type: <xref href="ErrorCondition?alt=ErrorCondition&text=ErrorCondition" data-throw-if-not-resolved="False"/>
  summary: <p>Internal method.<nonbreakablespace></nonbreakablespace>Clients should not use this method. </p>
  syntax: public void onConnectionError(ErrorCondition error)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.onConnectionError(ErrorCondition)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.onConnectionOpen()
  name: onConnectionOpen()
  nameWithType: MessagingFactory.onConnectionOpen()
  summary: <p>Internal method.<nonbreakablespace></nonbreakablespace>Clients should not use this method. </p>
  syntax: public void onConnectionOpen()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.onConnectionOpen()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.registerForConnectionError(Link link)
  name: registerForConnectionError(Link link)
  nameWithType: MessagingFactory.registerForConnectionError(Link link)
  parameters:
  - name: link
    type: <xref href="Link?alt=Link&text=Link" data-throw-if-not-resolved="False"/>
  summary: <p>Internal method.<nonbreakablespace></nonbreakablespace>Clients should not use this method. </p>
  syntax: public void registerForConnectionError(Link link)
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.registerForConnectionError(Link)
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransaction()
  name: startTransaction()
  nameWithType: MessagingFactory.startTransaction()
  exceptions:
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if transaction fails to start </p>
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  returns:
    description: <p>a new transaction </p>
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  summary: <p>Starts a new service side transaction. The <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> should be passed to all operations that needs to be in this transaction. </p>
  syntax: public TransactionContext startTransaction()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransaction()
- fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()
  name: startTransactionAsync()
  nameWithType: MessagingFactory.startTransactionAsync()
  returns:
    description: <p>A <code>CompletableFuture</code> which returns a new transaction </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Starts a new service side transaction. The <xref uid="com.microsoft.azure.servicebus.TransactionContext" data-throw-if-not-resolved="false" data-raw-source="TransactionContext"></xref> should be passed to all operations that needs to be in this transaction. </p>
  syntax: public CompletableFuture<TransactionContext> startTransactionAsync()
  uid: com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()
nameWithType: MessagingFactory
syntax: public class MessagingFactory extends ClientEntity
type: class
uid: com.microsoft.azure.servicebus.primitives.MessagingFactory
fullName: com.microsoft.azure.servicebus.primitives.MessagingFactory
name: MessagingFactory
package: com.microsoft.azure.servicebus.primitives
summary: <p>Abstracts all AMQP related details and encapsulates an AMQP connection and manages its life cycle. Each instance of this class represent one AMQP connection to the namespace. If an application creates multiple senders, receivers or clients using the same MessagingFactory instance, all those senders, receivers or clients will share the same connection to the namespace. </p>
metadata: {}
