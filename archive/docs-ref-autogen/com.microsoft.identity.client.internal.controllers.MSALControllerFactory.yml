### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.brokerEligible(@NonNull final Context applicationContext, @NonNull Authority authority, @NonNull PublicClientApplicationConfiguration applicationConfiguration)
  name: brokerEligible(@NonNull final Context applicationContext, @NonNull Authority authority, @NonNull PublicClientApplicationConfiguration applicationConfiguration)
  nameWithType: MSALControllerFactory.brokerEligible(@NonNull final Context applicationContext, @NonNull Authority authority, @NonNull PublicClientApplicationConfiguration applicationConfiguration)
  parameters:
  - name: applicationContext
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - name: authority
    type: <xref href="%40NonNull+Authority?alt=%40NonNull+Authority&text=%40NonNull+Authority" data-throw-if-not-resolved="False"/>
  - name: applicationConfiguration
    type: '@NonNull <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determine if request is eligible to use the broker </p>

    <p>Client indicates that it wants to use broker Authority == AzureActiveDirectoryAuthority Audience != AnyPersonalAccounts Broker Installed &amp; Verified</p>

    <p></p>
  syntax: public static boolean brokerEligible(@NonNull final Context applicationContext, @NonNull Authority authority, @NonNull PublicClientApplicationConfiguration applicationConfiguration)
  uid: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.brokerEligible(@NonNull final Context,@NonNull Authority,@NonNull PublicClientApplicationConfiguration)
- fullName: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.brokerInstalled(@NonNull final Context applicationContext)
  name: brokerInstalled(@NonNull final Context applicationContext)
  nameWithType: MSALControllerFactory.brokerInstalled(@NonNull final Context applicationContext)
  parameters:
  - name: applicationContext
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Check if a broker is installed and trusted:<ul><li><p>Check that authenticator is available for custom account type "Work Account"</p></li><li><p>Verify that the signature of package associated with the authenticator is trusted </p></li></ul></p>

    <p>there may be multiple packages containing the android authenticator implementation (custom account) but there is only one entry for custom account type currently registered by the AccountManager. If another app tries to install same authenticator (custom account type) type, it will queue up and will be active after first one is uninstalled.</p>

    <p></p>
  syntax: protected static boolean brokerInstalled(@NonNull final Context applicationContext)
  uid: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.brokerInstalled(@NonNull final Context)
- fullName: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.getAllControllers(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  name: getAllControllers(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  nameWithType: MSALControllerFactory.getAllControllers(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  parameters:
  - name: applicationContext
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - name: authority
    type: <xref href="%40NonNull+final+Authority?alt=%40NonNull+final+Authority&text=%40NonNull+final+Authority" data-throw-if-not-resolved="False"/>
  - name: applicationConfiguration
    type: '@NonNull final <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="List%3CBaseController%3E?alt=List%3CBaseController%3E&text=List%3CBaseController%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns one or more controllers to address a given request. </p>

    <p>The order of the response matters. The local controller should be returned first in order to ensure that any local refresh tokens are preferred over the use of the broker </p>

    <p>Only return the broker controller when the following are true: </p>

    <p>1) The client indicates it wants to use broker 2) The authority is AAD 3) The audience is not AnyPersonalAccount 4) The broker is installed 5) The broker redirect URI for the client is registered</p>

    <p></p>
  syntax: public static List<BaseController> getAllControllers(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  uid: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.getAllControllers(@NonNull final Context,@NonNull final Authority,@NonNull final PublicClientApplicationConfiguration)
- fullName: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.getDefaultController(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  name: getDefaultController(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  nameWithType: MSALControllerFactory.getDefaultController(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  parameters:
  - name: applicationContext
    type: <xref href="%40NonNull+final+Context?alt=%40NonNull+final+Context&text=%40NonNull+final+Context" data-throw-if-not-resolved="False"/>
  - name: authority
    type: <xref href="%40NonNull+final+Authority?alt=%40NonNull+final+Authority&text=%40NonNull+final+Authority" data-throw-if-not-resolved="False"/>
  - name: applicationConfiguration
    type: '@NonNull final <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>'
  returns:
    type: <xref href="BaseController?alt=BaseController&text=BaseController" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the appropriate MSAL Controller depending on Authority, App and Device state </p>

    <p>1) The client indicates it wants to use broker 2) If not AAD Authority use local controller 3) If the the authority is AAD and the Audience is instance of AnyPersonalAccount Use the local controller 4) If broker is not installed use local controller 5) Otherwise return broker controller</p>

    <p></p>
  syntax: public static BaseController getDefaultController(@NonNull final Context applicationContext, @NonNull final Authority authority, @NonNull final PublicClientApplicationConfiguration applicationConfiguration)
  uid: com.microsoft.identity.client.internal.controllers.MSALControllerFactory.getDefaultController(@NonNull final Context,@NonNull final Authority,@NonNull final PublicClientApplicationConfiguration)
nameWithType: MSALControllerFactory
syntax: public class MSALControllerFactory
type: class
uid: com.microsoft.identity.client.internal.controllers.MSALControllerFactory
fullName: com.microsoft.identity.client.internal.controllers.MSALControllerFactory
name: MSALControllerFactory
package: com.microsoft.identity.client.internal.controllers
summary: <p>Responsible for returning the correct controller depending on the type of request (Silent, Interactive), authority app configuration, device state </p>
metadata: {}
