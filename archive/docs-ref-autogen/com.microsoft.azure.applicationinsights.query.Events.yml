### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.applicationinsights.query.Events.get(String appId, EventType eventType, String eventId)
  name: get(String appId, EventType eventType, String eventId)
  nameWithType: Events.get(String appId, EventType eventType, String eventId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EventsResults object if successful. </p>
    type: <xref href="EventsResults?alt=EventsResults&text=EventsResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public EventsResults get(String appId, EventType eventType, String eventId)
  uid: com.microsoft.azure.applicationinsights.query.Events.get(String,EventType,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.get(String appId, EventType eventType, String eventId, String timespan)
  name: get(String appId, EventType eventType, String eventId, String timespan)
  nameWithType: Events.get(String appId, EventType eventType, String eventId, String timespan)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EventsResults object if successful. </p>
    type: <xref href="EventsResults?alt=EventsResults&text=EventsResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public EventsResults get(String appId, EventType eventType, String eventId, String timespan)
  uid: com.microsoft.azure.applicationinsights.query.Events.get(String,EventType,String,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId)
  name: getAsync(String appId, EventType eventType, String eventId)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CEventsResults%3E?alt=Observable%3CEventsResults%3E&text=Observable%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public Observable<EventsResults> getAsync(String appId, EventType eventType, String eventId)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  name: getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CEventsResults%3E?alt=final+ServiceCallback%3CEventsResults%3E&text=final+ServiceCallback%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CEventsResults%3E?alt=ServiceFuture%3CEventsResults%3E&text=ServiceFuture%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public ServiceFuture<EventsResults> getAsync(String appId, EventType eventType, String eventId, final ServiceCallback<EventsResults> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String,final ServiceCallback<EventsResults>)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId, String timespan)
  name: getAsync(String appId, EventType eventType, String eventId, String timespan)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId, String timespan)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CEventsResults%3E?alt=Observable%3CEventsResults%3E&text=Observable%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public Observable<EventsResults> getAsync(String appId, EventType eventType, String eventId, String timespan)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  name: getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  nameWithType: Events.getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CEventsResults%3E?alt=final+ServiceCallback%3CEventsResults%3E&text=final+ServiceCallback%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CEventsResults%3E?alt=ServiceFuture%3CEventsResults%3E&text=ServiceFuture%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public ServiceFuture<EventsResults> getAsync(String appId, EventType eventType, String eventId, String timespan, final ServiceCallback<EventsResults> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Events.getAsync(String,EventType,String,String,final ServiceCallback<EventsResults>)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByType(String appId, EventType eventType)
  name: getByType(String appId, EventType eventType)
  nameWithType: Events.getByType(String appId, EventType eventType)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EventsResults object if successful. </p>
    type: <xref href="EventsResults?alt=EventsResults&text=EventsResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public EventsResults getByType(String appId, EventType eventType)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByType(String,EventType)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByType(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  name: getByType(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  nameWithType: Events.getByType(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the returned events </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A free-text search expression to match for whether a particular event should be returned </p>
    name: search
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A comma-separated list of properties with "asc" (the default) or "desc" to control the order of returned events </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Limits the properties to just those requested on each returned event </p>
    name: select
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning events </p>
    name: skip
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of events to return </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Format for the returned events </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Request a count of matching items included with the returned events </p>
    name: count
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used for aggregation over returned events </p>
    name: apply
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EventsResults object if successful. </p>
    type: <xref href="EventsResults?alt=EventsResults&text=EventsResults" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public EventsResults getByType(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByType(String,EventType,String,String,String,String,String,Integer,Integer,String,Boolean,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String appId, EventType eventType)
  name: getByTypeAsync(String appId, EventType eventType)
  nameWithType: Events.getByTypeAsync(String appId, EventType eventType)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CEventsResults%3E?alt=Observable%3CEventsResults%3E&text=Observable%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public Observable<EventsResults> getByTypeAsync(String appId, EventType eventType)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String,EventType)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String appId, EventType eventType, final ServiceCallback<EventsResults> serviceCallback)
  name: getByTypeAsync(String appId, EventType eventType, final ServiceCallback<EventsResults> serviceCallback)
  nameWithType: Events.getByTypeAsync(String appId, EventType eventType, final ServiceCallback<EventsResults> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CEventsResults%3E?alt=final+ServiceCallback%3CEventsResults%3E&text=final+ServiceCallback%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CEventsResults%3E?alt=ServiceFuture%3CEventsResults%3E&text=ServiceFuture%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public ServiceFuture<EventsResults> getByTypeAsync(String appId, EventType eventType, final ServiceCallback<EventsResults> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String,EventType,final ServiceCallback<EventsResults>)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  name: getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  nameWithType: Events.getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the returned events </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A free-text search expression to match for whether a particular event should be returned </p>
    name: search
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A comma-separated list of properties with "asc" (the default) or "desc" to control the order of returned events </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Limits the properties to just those requested on each returned event </p>
    name: select
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning events </p>
    name: skip
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of events to return </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Format for the returned events </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Request a count of matching items included with the returned events </p>
    name: count
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used for aggregation over returned events </p>
    name: apply
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CEventsResults%3E?alt=Observable%3CEventsResults%3E&text=Observable%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public Observable<EventsResults> getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String,EventType,String,String,String,String,String,Integer,Integer,String,Boolean,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply, final ServiceCallback<EventsResults> serviceCallback)
  name: getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply, final ServiceCallback<EventsResults> serviceCallback)
  nameWithType: Events.getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply, final ServiceCallback<EventsResults> serviceCallback)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the returned events </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A free-text search expression to match for whether a particular event should be returned </p>
    name: search
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A comma-separated list of properties with "asc" (the default) or "desc" to control the order of returned events </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Limits the properties to just those requested on each returned event </p>
    name: select
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning events </p>
    name: skip
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of events to return </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Format for the returned events </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Request a count of matching items included with the returned events </p>
    name: count
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used for aggregation over returned events </p>
    name: apply
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CEventsResults%3E?alt=final+ServiceCallback%3CEventsResults%3E&text=final+ServiceCallback%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CEventsResults%3E?alt=ServiceFuture%3CEventsResults%3E&text=ServiceFuture%3CEventsResults%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public ServiceFuture<EventsResults> getByTypeAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply, final ServiceCallback<EventsResults> serviceCallback)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeAsync(String,EventType,String,String,String,String,String,Integer,Integer,String,Boolean,String,final ServiceCallback<EventsResults>)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  name: getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  nameWithType: Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CServiceResponse%3CEventsResults%3E%3E?alt=Observable%3CServiceResponse%3CEventsResults%3E%3E&text=Observable%3CServiceResponse%3CEventsResults%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventsResults>> getByTypeWithServiceResponseAsync(String appId, EventType eventType)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String,EventType)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  name: getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  nameWithType: Events.getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used to filter the returned events </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A free-text search expression to match for whether a particular event should be returned </p>
    name: search
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A comma-separated list of properties with "asc" (the default) or "desc" to control the order of returned events </p>
    name: orderby
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Limits the properties to just those requested on each returned event </p>
    name: select
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The number of items to skip over before returning events </p>
    name: skip
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>The number of events to return </p>
    name: top
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Format for the returned events </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Request a count of matching items included with the returned events </p>
    name: count
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An expression used for aggregation over returned events </p>
    name: apply
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CServiceResponse%3CEventsResults%3E%3E?alt=Observable%3CServiceResponse%3CEventsResults%3E%3E&text=Observable%3CServiceResponse%3CEventsResults%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Execute OData query. Executes an OData query for events.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventsResults>> getByTypeWithServiceResponseAsync(String appId, EventType eventType, String timespan, String filter, String search, String orderby, String select, Integer skip, Integer top, String format, Boolean count, String apply)
  uid: com.microsoft.azure.applicationinsights.query.Events.getByTypeWithServiceResponseAsync(String,EventType,String,String,String,String,String,Integer,Integer,String,Boolean,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getWithServiceResponseAsync(String appId, EventType eventType, String eventId)
  name: getWithServiceResponseAsync(String appId, EventType eventType, String eventId)
  nameWithType: Events.getWithServiceResponseAsync(String appId, EventType eventType, String eventId)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CServiceResponse%3CEventsResults%3E%3E?alt=Observable%3CServiceResponse%3CEventsResults%3E%3E&text=Observable%3CServiceResponse%3CEventsResults%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventsResults>> getWithServiceResponseAsync(String appId, EventType eventType, String eventId)
  uid: com.microsoft.azure.applicationinsights.query.Events.getWithServiceResponseAsync(String,EventType,String)
- fullName: com.microsoft.azure.applicationinsights.query.Events.getWithServiceResponseAsync(String appId, EventType eventType, String eventId, String timespan)
  name: getWithServiceResponseAsync(String appId, EventType eventType, String eventId, String timespan)
  nameWithType: Events.getWithServiceResponseAsync(String appId, EventType eventType, String eventId, String timespan)
  parameters:
  - description: <p>ID of the application. This is Application ID from the API Access settings blade in the Azure portal. </p>
    name: appId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: "<p>The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types. Possible values include: '$all', 'traces', 'customEvents', 'pageViews', 'browserTimings', 'requests', 'dependencies', 'exceptions', 'availabilityResults', 'performanceCounters', 'customMetrics' </p>"
    name: eventType
    type: <xref href="EventType?alt=EventType&text=EventType" data-throw-if-not-resolved="False"/>
  - description: <p>ID of event. </p>
    name: eventId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. The timespan over which to retrieve events. This is an ISO8601 time period value. This timespan is applied in addition to any that are specified in the Odata expression. </p>
    name: timespan
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EventsResults object </p>
    type: <xref href="Observable%3CServiceResponse%3CEventsResults%3E%3E?alt=Observable%3CServiceResponse%3CEventsResults%3E%3E&text=Observable%3CServiceResponse%3CEventsResults%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an event. Gets the data for a single event.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<EventsResults>> getWithServiceResponseAsync(String appId, EventType eventType, String eventId, String timespan)
  uid: com.microsoft.azure.applicationinsights.query.Events.getWithServiceResponseAsync(String,EventType,String,String)
nameWithType: Events
syntax: public interface Events
type: interface
uid: com.microsoft.azure.applicationinsights.query.Events
fullName: com.microsoft.azure.applicationinsights.query.Events
name: Events
package: com.microsoft.azure.applicationinsights.query
summary: <p>An instance of this class provides access to all the operations defined in Events. </p>
metadata: {}
