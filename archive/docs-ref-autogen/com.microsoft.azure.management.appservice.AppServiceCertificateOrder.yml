### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.autoRenew()
  name: autoRenew()
  nameWithType: AppServiceCertificateOrder.autoRenew()
  returns:
    description: <p>if the certificate should be automatically renewed upon expiration </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean autoRenew()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.autoRenew()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.certificateSigningRequest()
  name: certificateSigningRequest()
  nameWithType: AppServiceCertificateOrder.certificateSigningRequest()
  returns:
    description: <p>last certificate signing request that was created for this order </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String certificateSigningRequest()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.certificateSigningRequest()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.createKeyVaultBinding(String certificateName, Vault vault)
  name: createKeyVaultBinding(String certificateName, Vault vault)
  nameWithType: AppServiceCertificateOrder.createKeyVaultBinding(String certificateName, Vault vault)
  parameters:
  - description: <p>the name of the Key Vault Secret </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the key vault to store the certificate </p>
    name: vault
    type: <xref href="com.microsoft.azure.management.keyvault.Vault?alt=com.microsoft.azure.management.keyvault.Vault&text=Vault" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a binding containing the key vault information </p>
    type: <xref href="com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding?alt=com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding&text=AppServiceCertificateKeyVaultBinding" data-throw-if-not-resolved="False"/>
  summary: <p>Bind a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready. </p>
  syntax: public AppServiceCertificateKeyVaultBinding createKeyVaultBinding(String certificateName, Vault vault)
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.createKeyVaultBinding(String,Vault)
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.createKeyVaultBindingAsync(String certificateName, Vault vault)
  name: createKeyVaultBindingAsync(String certificateName, Vault vault)
  nameWithType: AppServiceCertificateOrder.createKeyVaultBindingAsync(String certificateName, Vault vault)
  parameters:
  - description: <p>the name of the Key Vault Secret </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the key vault to store the certificate </p>
    name: vault
    type: <xref href="com.microsoft.azure.management.keyvault.Vault?alt=com.microsoft.azure.management.keyvault.Vault&text=Vault" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a binding containing the key vault information </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding?alt=com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding&text=AppServiceCertificateKeyVaultBinding" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Bind a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready. </p>
  syntax: public Observable<AppServiceCertificateKeyVaultBinding> createKeyVaultBindingAsync(String certificateName, Vault vault)
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.createKeyVaultBindingAsync(String,Vault)
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.distinguishedName()
  name: distinguishedName()
  nameWithType: AppServiceCertificateOrder.distinguishedName()
  returns:
    description: <p>certificate's distinguished name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String distinguishedName()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.distinguishedName()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.domainVerificationToken()
  name: domainVerificationToken()
  nameWithType: AppServiceCertificateOrder.domainVerificationToken()
  returns:
    description: <p>the domain verification token </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String domainVerificationToken()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.domainVerificationToken()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.expirationTime()
  name: expirationTime()
  nameWithType: AppServiceCertificateOrder.expirationTime()
  returns:
    description: <p>expiration time </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime expirationTime()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.expirationTime()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.getKeyVaultBinding()
  name: getKeyVaultBinding()
  nameWithType: AppServiceCertificateOrder.getKeyVaultBinding()
  returns:
    description: <p>the state of the Key Vault secret </p>
    type: <xref href="com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding?alt=com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding&text=AppServiceCertificateKeyVaultBinding" data-throw-if-not-resolved="False"/>
  syntax: public AppServiceCertificateKeyVaultBinding getKeyVaultBinding()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.getKeyVaultBinding()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.getKeyVaultBindingAsync()
  name: getKeyVaultBindingAsync()
  nameWithType: AppServiceCertificateOrder.getKeyVaultBindingAsync()
  returns:
    description: <p>the state of the Key Vault secret </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding?alt=com.microsoft.azure.management.appservice.AppServiceCertificateKeyVaultBinding&text=AppServiceCertificateKeyVaultBinding" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<AppServiceCertificateKeyVaultBinding> getKeyVaultBindingAsync()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.getKeyVaultBindingAsync()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.intermediate()
  name: intermediate()
  nameWithType: AppServiceCertificateOrder.intermediate()
  returns:
    description: <p>the intermediate certificate </p>
    type: <xref href="com.microsoft.azure.management.appservice.CertificateDetails?alt=com.microsoft.azure.management.appservice.CertificateDetails&text=CertificateDetails" data-throw-if-not-resolved="False"/>
  syntax: public CertificateDetails intermediate()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.intermediate()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.keySize()
  name: keySize()
  nameWithType: AppServiceCertificateOrder.keySize()
  returns:
    description: <p>the certificate key size </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int keySize()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.keySize()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.lastCertificateIssuanceTime()
  name: lastCertificateIssuanceTime()
  nameWithType: AppServiceCertificateOrder.lastCertificateIssuanceTime()
  returns:
    description: <p>last issuance time </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime lastCertificateIssuanceTime()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.lastCertificateIssuanceTime()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.productType()
  name: productType()
  nameWithType: AppServiceCertificateOrder.productType()
  returns:
    description: <p>the certificate product type </p>
    type: <xref href="com.microsoft.azure.management.appservice.CertificateProductType?alt=com.microsoft.azure.management.appservice.CertificateProductType&text=CertificateProductType" data-throw-if-not-resolved="False"/>
  syntax: public CertificateProductType productType()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.productType()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.root()
  name: root()
  nameWithType: AppServiceCertificateOrder.root()
  returns:
    description: <p>the root certificate </p>
    type: <xref href="com.microsoft.azure.management.appservice.CertificateDetails?alt=com.microsoft.azure.management.appservice.CertificateDetails&text=CertificateDetails" data-throw-if-not-resolved="False"/>
  syntax: public CertificateDetails root()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.root()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.serialNumber()
  name: serialNumber()
  nameWithType: AppServiceCertificateOrder.serialNumber()
  returns:
    description: <p>current serial number of the certificate </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String serialNumber()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.serialNumber()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.signedCertificate()
  name: signedCertificate()
  nameWithType: AppServiceCertificateOrder.signedCertificate()
  returns:
    description: <p>the signed certificate </p>
    type: <xref href="com.microsoft.azure.management.appservice.CertificateDetails?alt=com.microsoft.azure.management.appservice.CertificateDetails&text=CertificateDetails" data-throw-if-not-resolved="False"/>
  syntax: public CertificateDetails signedCertificate()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.signedCertificate()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.status()
  name: status()
  nameWithType: AppServiceCertificateOrder.status()
  returns:
    description: <p>current order status </p>
    type: <xref href="com.microsoft.azure.management.appservice.CertificateOrderStatus?alt=com.microsoft.azure.management.appservice.CertificateOrderStatus&text=CertificateOrderStatus" data-throw-if-not-resolved="False"/>
  syntax: public CertificateOrderStatus status()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.status()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.validityInYears()
  name: validityInYears()
  nameWithType: AppServiceCertificateOrder.validityInYears()
  returns:
    description: <p>duration in years (must be between 1 and 3) </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int validityInYears()
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.validityInYears()
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.verifyDomainOwnership(AppServiceDomain domain)
  name: verifyDomainOwnership(AppServiceDomain domain)
  nameWithType: AppServiceCertificateOrder.verifyDomainOwnership(AppServiceDomain domain)
  parameters:
  - description: <p>the Azure managed domain </p>
    name: domain
    type: <xref href="com.microsoft.azure.management.appservice.AppServiceDomain?alt=com.microsoft.azure.management.appservice.AppServiceDomain&text=AppServiceDomain" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies the ownership of the domain by providing the Azure purchased domain. </p>
  syntax: public void verifyDomainOwnership(AppServiceDomain domain)
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.verifyDomainOwnership(AppServiceDomain)
- fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.verifyDomainOwnershipAsync(AppServiceDomain domain)
  name: verifyDomainOwnershipAsync(AppServiceDomain domain)
  nameWithType: AppServiceCertificateOrder.verifyDomainOwnershipAsync(AppServiceDomain domain)
  parameters:
  - description: <p>the Azure managed domain </p>
    name: domain
    type: <xref href="com.microsoft.azure.management.appservice.AppServiceDomain?alt=com.microsoft.azure.management.appservice.AppServiceDomain&text=AppServiceDomain" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an Observable to the result </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies the ownership of the domain by providing the Azure purchased domain. </p>
  syntax: public Completable verifyDomainOwnershipAsync(AppServiceDomain domain)
  uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder.verifyDomainOwnershipAsync(AppServiceDomain)
nameWithType: AppServiceCertificateOrder
syntax: public interface AppServiceCertificateOrder extends GroupableResource<AppServiceManager, AppServiceCertificateOrderInner>,Refreshable<AppServiceCertificateOrder>,Updatable<AppServiceCertificateOrder.Update>
type: interface
uid: com.microsoft.azure.management.appservice.AppServiceCertificateOrder
fullName: com.microsoft.azure.management.appservice.AppServiceCertificateOrder
name: AppServiceCertificateOrder
package: com.microsoft.azure.management.appservice
summary: <p>An immutable client-side representation of an Azure App Service certificate order. </p>
metadata: {}
