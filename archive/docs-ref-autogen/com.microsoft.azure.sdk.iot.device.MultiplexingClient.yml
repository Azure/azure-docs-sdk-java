### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MultiplexingClient(String hostName, IotHubClientProtocol protocol)
  name: MultiplexingClient(String hostName, IotHubClientProtocol protocol)
  nameWithType: MultiplexingClient.MultiplexingClient(String hostName, IotHubClientProtocol protocol)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The transport protocol that this client will build the multiplexed connection on. Must be either <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IotHubClientProtocol#AMQPS"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IotHubClientProtocol#AMQPS_WS"></xref>. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiate a new MultiplexingClient that will establish a multiplexed connection through a proxy.</p>

    <p></p>
  syntax: public MultiplexingClient(String hostName, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MultiplexingClient(String,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MultiplexingClient(String hostName, IotHubClientProtocol protocol, MultiplexingClientOptions options)
  name: MultiplexingClient(String hostName, IotHubClientProtocol protocol, MultiplexingClientOptions options)
  nameWithType: MultiplexingClient.MultiplexingClient(String hostName, IotHubClientProtocol protocol, MultiplexingClientOptions options)
  parameters:
  - description: <p>The hostname of your IoT Hub instance (For instance, "your-iot-hub.azure-devices.net") </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The transport protocol that this client will build the multiplexed connection on. Must be <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IotHubClientProtocol#AMQPS_WS"></xref> since using <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IotHubClientProtocol#AMQPS"></xref> does not support proxies. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The optional parameters to configure this client to use. </p>
    name: options
    type: <xref href="com.microsoft.azure.sdk.iot.device.MultiplexingClientOptions?alt=com.microsoft.azure.sdk.iot.device.MultiplexingClientOptions&text=MultiplexingClientOptions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiate a new MultiplexingClient that will establish a multiplexed connection through a proxy.</p>

    <p></p>
  syntax: public MultiplexingClient(String hostName, IotHubClientProtocol protocol, MultiplexingClientOptions options)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MultiplexingClient(String,IotHubClientProtocol,MultiplexingClientOptions)
fields:
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS
  name: MAX_MULTIPLEX_DEVICE_COUNT_AMQPS
  nameWithType: MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS
  summary: <p>The maximum number of devices that can be multiplexed together on a single multiplexed AMQPS connection </p>
  syntax: public static final int MAX_MULTIPLEX_DEVICE_COUNT_AMQPS= 1000
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS
  name: MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS
  nameWithType: MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS
  summary: <p>The maximum number of devices that can be multiplexed together on a single multiplexed AMQPS_WS connection </p>
  syntax: public static final int MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS= 500
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()
  name: close()
  nameWithType: MultiplexingClient.close()
  summary: >-
    <p>Close this multiplexing client. This will close all active device sessions as well as the AMQP connection. </p>

    <p>If this client is already closed, then this method will do nothing. </p>

    <p>Once closed, this client can be re-opened. It will preserve all previously registered device clients. </p>
  syntax: public void close()
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.getRegisteredDeviceCount()
  name: getRegisteredDeviceCount()
  nameWithType: MultiplexingClient.getRegisteredDeviceCount()
  returns:
    description: <p>The number of currently registered devices on this multiplexing client. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Get the number of currently registered devices on this multiplexing client. </p>
  syntax: public int getRegisteredDeviceCount()
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.getRegisteredDeviceCount()
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.isDeviceRegistered(String deviceId)
  name: isDeviceRegistered(String deviceId)
  nameWithType: MultiplexingClient.isDeviceRegistered(String deviceId)
  parameters:
  - description: <p>The Id of the device client to look for. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if a device client is already registered with this Id. False otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Returns if a device client for the provided device Id is already registered to this multiplexing client. </p>
  syntax: public boolean isDeviceRegistered(String deviceId)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.isDeviceRegistered(String)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.open(boolean withRetry)
  name: open(boolean withRetry)
  nameWithType: MultiplexingClient.open(boolean withRetry)
  parameters:
  - description: <p>if true, this open call will apply the current retry policy to allow for the open call to be retried if it fails.</p>
    name: withRetry
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If any IO or authentication errors occur while opening the multiplexed connection. </p>
  - type: <xref href="MultiplexingClientRegistrationException?alt=MultiplexingClientRegistrationException&text=MultiplexingClientRegistrationException" data-throw-if-not-resolved="False"/>
    description: <p>If one or many of the registered devices failed to authenticate. Any devices not found in the map of registration exceptions provided by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientRegistrationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientRegistrationException#getRegistrationExceptions()"></xref> have registered successfully. Even when this is thrown, the AMQPS/AMQPS_WS connection is still open, and other clients may be registered to it. </p>
  summary: >-
    <p>Opens this multiplexing client. This may be done before or after registering any number of device clients. </p>

    <p>This call behaves synchronously, so if it returns without throwing, then all registered device clients were successfully opened. </p>

    <p>If this client is already open, then this method will do nothing. </p>

    <p></p>
  syntax: public void open(boolean withRetry)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.open(boolean)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient deviceClient)
  name: registerDeviceClient(DeviceClient deviceClient)
  nameWithType: MultiplexingClient.registerDeviceClient(DeviceClient deviceClient)
  parameters:
  - description: <p>The device client to associate with this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the registration to succeed. This will never be thrown if the multiplexing client is not open yet. </p>
  - type: <xref href="MultiplexingClientRegistrationException?alt=MultiplexingClientRegistrationException&text=MultiplexingClientRegistrationException" data-throw-if-not-resolved="False"/>
    description: <p>If the device failed to register. Details for this failure can be found nested within the map given by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientRegistrationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientRegistrationException#getRegistrationExceptions()"></xref>. If this exception is thrown, the device was not registered, and therefore it does not need to be unregistered. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If this operation takes longer than the default timeout allows. </p>
  summary: >-
    <p>Register a device client to this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> for registering multiple devices as it has some performance improvements over repeatedly calling this method for individual device registrations. This method blocks on each registration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the registrations after starting them all asynchronously. </p>

    <p>A device client can be unregistered using <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient)"></xref>, <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient, long)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref>, or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable, long)"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client. </p>

    <p>Up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS"></xref> devices can be registered on a multiplexed AMQPS_WS connection. </p>

    <p>If the multiplexing client is already open, then this device client will automatically be opened, too. If the multiplexing client is not open yet, then this device client will not be opened until <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.open(boolean)" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient#open(boolean)"></xref> is called. </p>

    <p>If the multiplexed connection is already open, then this call will add this device client to the multiplexed connection, and then will block until the registration has been completed. </p>

    <p>Any proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client. </p>

    <p>The registered device client must use the same transport protocol (AMQPS or AMQPS_WS) that this multiplexing client uses. </p>

    <p>Each registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client. </p>

    <p>The registered device client must use symmetric key based authentication. </p>

    <p>The registered device client must belong to the same IoT hub as all previously registered device clients. </p>

    <p>If the provided device client is already registered to this multiplexing client, then then this method will do nothing. </p>

    <p>Any subscriptions (twin, methods, cloud to device messages) set on this device client from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved. </p>

    <p></p>
  syntax: public void registerDeviceClient(DeviceClient deviceClient)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  name: registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  nameWithType: MultiplexingClient.registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  parameters:
  - description: <p>The device client to associate with this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  - description: <p>How long (in milliseconds) to let this operation wait for all registrations to complete. If this threshold is passed, a <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException"></xref> with status code <xref uid="com.microsoft.azure.sdk.iot.device._iot_hub_status_code_1a07fcee33f9d6dc733cc20123d126d178" data-throw-if-not-resolved="false" data-raw-source="IotHubStatusCode#DEVICE_OPERATION_TIMED_OUT"></xref> is thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the registration to succeed. This will never be thrown if the multiplexing client is not open yet. </p>
  - type: <xref href="MultiplexingClientRegistrationException?alt=MultiplexingClientRegistrationException&text=MultiplexingClientRegistrationException" data-throw-if-not-resolved="False"/>
    description: <p>If the device failed to register. Details for this failure can be found nested within the map given by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientRegistrationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientRegistrationException#getRegistrationExceptions()"></xref>. If this exception is thrown, the device was not registered, and therefore it does not need to be unregistered. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If this operation takes longer than the provided timeout allows. </p>
  summary: >-
    <p>Register a device client to this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> for registering multiple devices as it has some performance improvements over repeatedly calling this method for individual device registrations. This method blocks on each registration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the registrations after starting them all asynchronously. </p>

    <p>A device client can be unregistered using <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient)"></xref>, <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient, long)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref>, or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable, long)"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client. </p>

    <p>Up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS"></xref> devices can be registered on a multiplexed AMQPS_WS connection. </p>

    <p>If the multiplexing client is already open, then this device client will automatically be opened, too. If the multiplexing client is not open yet, then this device client will not be opened until <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.open(boolean)" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient#open(boolean)"></xref> is called. </p>

    <p>If the multiplexed connection is already open, then this call will add this device client to the multiplexed connection, and then will block until the registration has been completed. </p>

    <p>Any proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client. </p>

    <p>The registered device client must use the same transport protocol (AMQPS or AMQPS_WS) that this multiplexing client uses. </p>

    <p>Each registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client. </p>

    <p>The registered device client must use symmetric key based authentication. </p>

    <p>The registered device client must belong to the same IoT hub as all previously registered device clients. </p>

    <p>If the provided device client is already registered to this multiplexing client, then then this method will do nothing. </p>

    <p>Any subscriptions (twin, methods, cloud to device messages) set on this device client from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved. </p>

    <p></p>
  syntax: public void registerDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClient(DeviceClient,long)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients)
  name: registerDeviceClients(Iterable<DeviceClient> deviceClients)
  nameWithType: MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients)
  parameters:
  - description: <p>The device clients to associate with this multiplexing client. </p>
    name: deviceClients
    type: Iterable&lt;<xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the registration to succeed. This will never be thrown if the multiplexing client is not open yet. </p>
  - type: <xref href="MultiplexingClientRegistrationException?alt=MultiplexingClientRegistrationException&text=MultiplexingClientRegistrationException" data-throw-if-not-resolved="False"/>
    description: <p>If one or more devices failed to register. Details for each failure can be found in the map provided by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientRegistrationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientRegistrationException#getRegistrationExceptions()"></xref>. Any devices not found in the map of registration exceptions provided by this exception have registered successfully. Any devices that are found in the map of registration exceptions provided by this exception were not registered, and therefore do not need to be unregistered. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If this operation takes longer than the default timeout allows. </p>
  summary: >-
    <p>Register multiple device clients to this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS"></xref> devices can be registered on a multiplexed AMQPS_WS connection. </p>

    <p>A device client can be unregistered using <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient)"></xref>, <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient, long)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref>, or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable, long)"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client. </p>

    <p>If the multiplexing client is already open, then these device clients will automatically be opened, too. If the multiplexing client is not open yet, then these device clients will not be opened until <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.open(boolean)" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient#open(boolean)"></xref> is called. </p>

    <p>If the multiplexed connection is already open, then this call will asynchronously add each device client to the multiplexed connection, and then will block until all registrations have been completed. </p>

    <p>Any proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client. </p>

    <p>The registered device clients must use the same transport protocol (AMQPS or AMQPS_WS) that this multiplexing client uses. </p>

    <p>Each registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client. </p>

    <p>The registered device clients must use symmetric key based authentication. </p>

    <p>The registered device clients must belong to the same IoT hub as all previously registered device clients. </p>

    <p>If any of these device clients are already registered to this multiplexing client, then then this method will not do anything to that particular device client. All other provided device clients will still be registered though. </p>

    <p>Any subscriptions (twin, methods, cloud to device messages) set on these device clients from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved. </p>

    <p></p>
  syntax: public void registerDeviceClients(Iterable<DeviceClient> deviceClients)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(Iterable<DeviceClient>)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  name: registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  nameWithType: MultiplexingClient.registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  parameters:
  - description: <p>The device clients to associate with this multiplexing client. </p>
    name: deviceClients
    type: Iterable&lt;<xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>How long (in milliseconds) to let this operation wait for all registrations to complete. If this threshold is passed, a <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException"></xref> with status code <xref uid="com.microsoft.azure.sdk.iot.device._iot_hub_status_code_1a07fcee33f9d6dc733cc20123d126d178" data-throw-if-not-resolved="false" data-raw-source="IotHubStatusCode#DEVICE_OPERATION_TIMED_OUT"></xref> is thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the registration to succeed. This will never be thrown if the multiplexing client is not open yet. </p>
  - type: <xref href="MultiplexingClientRegistrationException?alt=MultiplexingClientRegistrationException&text=MultiplexingClientRegistrationException" data-throw-if-not-resolved="False"/>
    description: <p>If one or more devices failed to register. Details for each failure can be found in the map provided by <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.MultiplexingClientRegistrationException.getRegistrationExceptions()" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClientRegistrationException#getRegistrationExceptions()"></xref>. Any devices not found in the map of registration exceptions provided by this exception have registered successfully. Any devices that are found in the map of registration exceptions provided by this exception were not registered, and therefore do not need to be unregistered. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If this operation takes longer than the provided timeout allows. </p>
  summary: >-
    <p>Register multiple device clients to this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS"></xref> devices can be registered on a multiplexed AMQPS connection, and up to <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS" data-throw-if-not-resolved="false" data-raw-source="MAX_MULTIPLEX_DEVICE_COUNT_AMQPS_WS"></xref> devices can be registered on a multiplexed AMQPS_WS connection. </p>

    <p>A device client can be unregistered using <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient)"></xref>, <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClient(DeviceClient, long)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref>, or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable, long)"></xref>. A device client will not be unregistered automatically if it encounters a non-retryable exception, so users are responsible for unregistering a device client when they no longer want it in this multiplexing client. </p>

    <p>If the multiplexing client is already open, then these device clients will automatically be opened, too. If the multiplexing client is not open yet, then these device clients will not be opened until <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.open(boolean)" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient#open(boolean)"></xref> is called. </p>

    <p>If the multiplexed connection is already open, then this call will asynchronously add each device client to the multiplexed connection, and then will block until all registrations have been completed. </p>

    <p>Any proxy settings set to the provided device clients will be overwritten by the proxy settings of this multiplexing client. </p>

    <p>The registered device clients must use the same transport protocol (AMQPS or AMQPS_WS) that this multiplexing client uses. </p>

    <p>Each registered device client may have its own retry policy and its own SAS token expiry time, separate from every other registered device client. </p>

    <p>The registered device clients must use symmetric key based authentication. </p>

    <p>The registered device clients must belong to the same IoT hub as all previously registered device clients. </p>

    <p>If any of these device clients are already registered to this multiplexing client, then then this method will not do anything to that particular device client. All other provided device clients will still be registered though. </p>

    <p>Any subscriptions (twin, methods, cloud to device messages) set on these device clients from when it was previously registered to any multiplexing client will need to be set again as subscriptions and their callbacks are not preserved. </p>

    <p></p>
  syntax: public void registerDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.registerDeviceClients(Iterable<DeviceClient>,long)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  name: setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  nameWithType: MultiplexingClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  parameters:
  - description: <p>The callback to be fired when the connection status of the multiplexed connection changes. Can be null to unset this listener as long as the provided callbackContext is also null. </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>a context to be passed to the callback. Can be<code>null 

          </code> . </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers a callback to be executed when the connection status of the multiplexed connection as a whole changes. The callback will be fired with a status and a reason why the multiplexed connection's status changed. When the callback is fired, the provided context will be provided alongside the status and reason.</p>

    <p>Note that this callback will not be fired for device specific connection status changes. In order to be notified when a particular device's connection status changes, you will need to register a connection status change callback on that device client instance using <xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)" data-throw-if-not-resolved="false" data-raw-source="DeviceClient#setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback, Object)"></xref>.</p>

    <p>Note that the thread used to deliver this callback should not be used to call open()/close() on the client that this callback belongs to. All open()/close() operations should be done on a separate thread</p>

    <p></p>
  syntax: public void setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.setRetryPolicy(RetryPolicy retryPolicy)
  name: setRetryPolicy(RetryPolicy retryPolicy)
  nameWithType: MultiplexingClient.setRetryPolicy(RetryPolicy retryPolicy)
  parameters:
  - description: <p>The policy that the multiplexing client will use when reconnecting. </p>
    name: retryPolicy
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the given retry policy for the multiplexing client level connection management. <a href="https://github.com/Azure/azure-iot-sdk-java/blob/main/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md">See more details about the default retry policy and about using custom retry policies here</a></p>
  syntax: public void setRetryPolicy(RetryPolicy retryPolicy)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.setRetryPolicy(RetryPolicy)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient)
  name: unregisterDeviceClient(DeviceClient deviceClient)
  nameWithType: MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient)
  parameters:
  - description: <p>The device client to unregister from this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the unregistration to succeed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If the unregistration takes longer than the default timeout allows. </p>
  summary: >-
    <p>Unregister a device client from this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref> for unregistering multiple devices as it has some performance improvements over repeatedly calling this method for individual device unregistrations. This method blocks on each unregistration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the unregistrations after starting them all asynchronously. </p>

    <p>If the multiplexed connection is already open, then this call will close the AMQP device session associated with this device, but it will not close any other registered device sessions or the multiplexing client itself. </p>

    <p>If the multiplexed connection is already open, and this call would unregister the last device client, the multiplexed connection will remain open. The multiplexed connection can only be closed by calling <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()" data-throw-if-not-resolved="false" data-raw-source="close()"></xref></p>

    <p>Once a device client is unregistered, it may be re-registered to this or any other multiplexing client. It cannot be used in non-multiplexing scenarios. </p>

    <p>Any subscriptions set on this device client for twin/methods/cloud to device messages will need to be set again after this device is re-registered. </p>

    <p></p>
  syntax: public void unregisterDeviceClient(DeviceClient deviceClient)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  name: unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  nameWithType: MultiplexingClient.unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  parameters:
  - description: <p>The device client to unregister from this multiplexing client. </p>
    name: deviceClient
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  - description: <p>How long (in milliseconds) to let this operation wait for all registrations to complete. If this threshold is passed, a <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException"></xref> with status code <xref uid="com.microsoft.azure.sdk.iot.device._iot_hub_status_code_1a07fcee33f9d6dc733cc20123d126d178" data-throw-if-not-resolved="false" data-raw-source="IotHubStatusCode#DEVICE_OPERATION_TIMED_OUT"></xref> is thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the unregistration to succeed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If the unregistration takes longer than the provided timeout allows. </p>
  summary: >-
    <p>Unregister a device client from this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>Users should use <xref uid="" data-throw-if-not-resolved="false" data-raw-source="unregisterDeviceClients(Iterable)"></xref> for unregistering multiple devices as it has some performance improvements over repeatedly calling this method for individual device unregistrations. This method blocks on each unregistration, whereas <xref uid="" data-throw-if-not-resolved="false" data-raw-source="registerDeviceClients(Iterable)"></xref> blocks on all of the unregistrations after starting them all asynchronously. </p>

    <p>If the multiplexed connection is already open, then this call will close the AMQP device session associated with this device, but it will not close any other registered device sessions or the multiplexing client itself. </p>

    <p>If the multiplexed connection is already open, and this call would unregister the last device client, the multiplexed connection will remain open. The multiplexed connection can only be closed by calling <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()" data-throw-if-not-resolved="false" data-raw-source="close()"></xref></p>

    <p>Once a device client is unregistered, it may be re-registered to this or any other multiplexing client. It cannot be used in non-multiplexing scenarios. </p>

    <p>Any subscriptions set on this device client for twin/methods/cloud to device messages will need to be set again after this device is re-registered. </p>

    <p></p>
  syntax: public void unregisterDeviceClient(DeviceClient deviceClient, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClient(DeviceClient,long)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(Iterable<DeviceClient> deviceClients)
  name: unregisterDeviceClients(Iterable<DeviceClient> deviceClients)
  nameWithType: MultiplexingClient.unregisterDeviceClients(Iterable<DeviceClient> deviceClients)
  parameters:
  - description: <p>The device clients to unregister from this multiplexing client. </p>
    name: deviceClients
    type: Iterable&lt;<xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the unregistration to succeed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If the unregistration takes longer than the default timeout allows. </p>
  summary: >-
    <p>Unregister multiple device clients from this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>If the multiplexed connection is already open, then this call will close the AMQP device session associated with this device, but it will not close any other registered device sessions or the multiplexing client itself. </p>

    <p>If the multiplexed connection is already open, and this call would unregister the last device clients, the multiplexed connection will remain open. The multiplexed connection can only be closed by calling <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()" data-throw-if-not-resolved="false" data-raw-source="close()"></xref></p>

    <p>Once a device client is unregistered, it may be re-registered to this or any other multiplexing client. It cannot be used in non-multiplexing scenarios. </p>

    <p>Any subscriptions set on these device clients for twin/methods/cloud to device messages will need to be set again after these devices are re-registered. </p>

    <p></p>
  syntax: public void unregisterDeviceClients(Iterable<DeviceClient> deviceClients)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(Iterable<DeviceClient>)
- fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  name: unregisterDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  nameWithType: MultiplexingClient.unregisterDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  parameters:
  - description: <p>The device clients to unregister from this multiplexing client. </p>
    name: deviceClients
    type: Iterable&lt;<xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>How long (in milliseconds) to let this operation wait for all registrations to complete. If this threshold is passed, a <xref uid="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.azure.sdk.iot.device.exceptions.IotHubClientException"></xref> with status code <xref uid="com.microsoft.azure.sdk.iot.device._iot_hub_status_code_1a07fcee33f9d6dc733cc20123d126d178" data-throw-if-not-resolved="false" data-raw-source="IotHubStatusCode#DEVICE_OPERATION_TIMED_OUT"></xref> is thrown. </p>
    name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>If the thread gets interrupted while waiting for the unregistration to succeed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If the unregistration takes longer than the provided timeout allows. </p>
  summary: >-
    <p>Unregister multiple device clients from this multiplexing client. This method may be called before or after opening the multiplexed connection. </p>

    <p>If the multiplexed connection is already open, then this call will close the AMQP device session associated with this device, but it will not close any other registered device sessions or the multiplexing client itself. </p>

    <p>If the multiplexed connection is already open, and this call would unregister the last device clients, the multiplexed connection will remain open. The multiplexed connection can only be closed by calling <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient.close()" data-throw-if-not-resolved="false" data-raw-source="close()"></xref></p>

    <p>Once a device client is unregistered, it may be re-registered to this or any other multiplexing client. It cannot be used in non-multiplexing scenarios. </p>

    <p>Any subscriptions set on these device clients for twin/methods/cloud to device messages will need to be set again after these devices are re-registered. </p>

    <p></p>
  syntax: public void unregisterDeviceClients(Iterable<DeviceClient> deviceClients, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient.unregisterDeviceClients(Iterable<DeviceClient>,long)
nameWithType: MultiplexingClient
syntax: public class MultiplexingClient
type: class
uid: com.microsoft.azure.sdk.iot.device.MultiplexingClient
fullName: com.microsoft.azure.sdk.iot.device.MultiplexingClient
name: MultiplexingClient
package: com.microsoft.azure.sdk.iot.device
summary: >-
  <p>A client for creating multiplexed connections to IoT hub. A multiplexed connection allows for multiple device clients to communicate to the service through a single AMQPS connection. </p>

  <p>A given AMQPS connection requires a TLS connection, so multiplexing may be worthwhile if you want to limit the number of TLS connections needed to connect multiple device clients to IoT hub. </p>

  <p>A given multiplexing client also has a fixed amount of worker threads regardless of how many device clients are being multiplexed. Comparatively, every non-multiplexed device client instance has its own set of worker threads. Multiplexing may be worthwhile if you want fewer worker threads. </p>

  <p>Only AMQPS and AMQPS_WS support multiplexing, and only symmetric key authenticated devices can be multiplexed. </p>

  <p>

    <xref uid="com.microsoft.azure.sdk.iot.device.ModuleClient" data-throw-if-not-resolved="false" data-raw-source="ModuleClient"></xref> instances cannot be multiplexed. </p>
metadata: {}
