### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.LogProfilesInner(Retrofit retrofit, MonitorManagementClientImpl client)
  name: LogProfilesInner(Retrofit retrofit, MonitorManagementClientImpl client)
  nameWithType: LogProfilesInner.LogProfilesInner(Retrofit retrofit, MonitorManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.monitor.implementation.MonitorManagementClientImpl?alt=com.microsoft.azure.management.monitor.implementation.MonitorManagementClientImpl&text=MonitorManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of LogProfilesInner.</p>

    <p></p>
  syntax: public LogProfilesInner(Retrofit retrofit, MonitorManagementClientImpl client)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.LogProfilesInner(Retrofit,MonitorManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdate(String logProfileName, LogProfileResourceInner parameters)
  name: createOrUpdate(String logProfileName, LogProfileResourceInner parameters)
  nameWithType: LogProfilesInner.createOrUpdate(String logProfileName, LogProfileResourceInner parameters)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the LogProfileResourceInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create or update a log profile in Azure Monitoring REST API.</p>

    <p></p>
  syntax: public LogProfileResourceInner createOrUpdate(String logProfileName, LogProfileResourceInner parameters)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdate(String,LogProfileResourceInner)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters)
  name: createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters)
  nameWithType: LogProfilesInner.createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LogProfileResourceInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create or update a log profile in Azure Monitoring REST API.</p>

    <p></p>
  syntax: public Observable<LogProfileResourceInner> createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdateAsync(String,LogProfileResourceInner)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  name: createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  nameWithType: LogProfilesInner.createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create or update a log profile in Azure Monitoring REST API.</p>

    <p></p>
  syntax: public ServiceFuture<LogProfileResourceInner> createOrUpdateAsync(String logProfileName, LogProfileResourceInner parameters, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdateAsync(String,LogProfileResourceInner,final ServiceCallback<LogProfileResourceInner>)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdateWithServiceResponseAsync(String logProfileName, LogProfileResourceInner parameters)
  name: createOrUpdateWithServiceResponseAsync(String logProfileName, LogProfileResourceInner parameters)
  nameWithType: LogProfilesInner.createOrUpdateWithServiceResponseAsync(String logProfileName, LogProfileResourceInner parameters)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LogProfileResourceInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Create or update a log profile in Azure Monitoring REST API.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<LogProfileResourceInner>> createOrUpdateWithServiceResponseAsync(String logProfileName, LogProfileResourceInner parameters)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.createOrUpdateWithServiceResponseAsync(String,LogProfileResourceInner)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.delete(String logProfileName)
  name: delete(String logProfileName)
  nameWithType: LogProfilesInner.delete(String logProfileName)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the log profile.</p>

    <p></p>
  syntax: public void delete(String logProfileName)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.delete(String)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.deleteAsync(String logProfileName)
  name: deleteAsync(String logProfileName)
  nameWithType: LogProfilesInner.deleteAsync(String logProfileName)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the log profile.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String logProfileName)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.deleteAsync(String)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.deleteAsync(String logProfileName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String logProfileName, final ServiceCallback<Void> serviceCallback)
  nameWithType: LogProfilesInner.deleteAsync(String logProfileName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the log profile.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String logProfileName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.deleteAsync(String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.deleteWithServiceResponseAsync(String logProfileName)
  name: deleteWithServiceResponseAsync(String logProfileName)
  nameWithType: LogProfilesInner.deleteWithServiceResponseAsync(String logProfileName)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the log profile.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String logProfileName)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.deleteWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.get(String logProfileName)
  name: get(String logProfileName)
  nameWithType: LogProfilesInner.get(String logProfileName)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the LogProfileResourceInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the log profile.</p>

    <p></p>
  syntax: public LogProfileResourceInner get(String logProfileName)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.get(String)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.getAsync(String logProfileName)
  name: getAsync(String logProfileName)
  nameWithType: LogProfilesInner.getAsync(String logProfileName)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LogProfileResourceInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the log profile.</p>

    <p></p>
  syntax: public Observable<LogProfileResourceInner> getAsync(String logProfileName)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.getAsync(String)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.getAsync(String logProfileName, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  name: getAsync(String logProfileName, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  nameWithType: LogProfilesInner.getAsync(String logProfileName, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the log profile.</p>

    <p></p>
  syntax: public ServiceFuture<LogProfileResourceInner> getAsync(String logProfileName, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.getAsync(String,final ServiceCallback<LogProfileResourceInner>)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.getWithServiceResponseAsync(String logProfileName)
  name: getWithServiceResponseAsync(String logProfileName)
  nameWithType: LogProfilesInner.getWithServiceResponseAsync(String logProfileName)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LogProfileResourceInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the log profile.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<LogProfileResourceInner>> getWithServiceResponseAsync(String logProfileName)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.getWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.list()
  name: list()
  nameWithType: LogProfilesInner.list()
  returns:
    description: <p>the PagedList&lt;LogProfileResourceInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List the log profiles.</p>

    <p></p>
  syntax: public PagedList<LogProfileResourceInner> list()
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.list()
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.listAsync()
  name: listAsync()
  nameWithType: LogProfilesInner.listAsync()
  returns:
    description: <p>the observable to the List&lt;LogProfileResourceInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List the log profiles.</p>

    <p></p>
  syntax: public Observable<Page<LogProfileResourceInner>> listAsync()
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.listAsync()
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.listAsync(final ServiceCallback<List<LogProfileResourceInner>> serviceCallback)
  name: listAsync(final ServiceCallback<List<LogProfileResourceInner>> serviceCallback)
  nameWithType: LogProfilesInner.listAsync(final ServiceCallback<List<LogProfileResourceInner>> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List the log profiles.</p>

    <p></p>
  syntax: public ServiceFuture<List<LogProfileResourceInner>> listAsync(final ServiceCallback<List<LogProfileResourceInner>> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.listAsync(final ServiceCallback<List<LogProfileResourceInner>>)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: LogProfilesInner.listWithServiceResponseAsync()
  returns:
    description: <p>the observable to the List&lt;LogProfileResourceInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>List the log profiles.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<List<LogProfileResourceInner>>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.update(String logProfileName, LogProfileResourcePatch logProfilesResource)
  name: update(String logProfileName, LogProfileResourcePatch logProfilesResource)
  nameWithType: LogProfilesInner.update(String logProfileName, LogProfileResourcePatch logProfilesResource)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: logProfilesResource
    type: <xref href="com.microsoft.azure.management.monitor.LogProfileResourcePatch?alt=com.microsoft.azure.management.monitor.LogProfileResourcePatch&text=LogProfileResourcePatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the LogProfileResourceInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public LogProfileResourceInner update(String logProfileName, LogProfileResourcePatch logProfilesResource)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.update(String,LogProfileResourcePatch)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  name: updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  nameWithType: LogProfilesInner.updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: logProfilesResource
    type: <xref href="com.microsoft.azure.management.monitor.LogProfileResourcePatch?alt=com.microsoft.azure.management.monitor.LogProfileResourcePatch&text=LogProfileResourcePatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LogProfileResourceInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public Observable<LogProfileResourceInner> updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.updateAsync(String,LogProfileResourcePatch)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  name: updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  nameWithType: LogProfilesInner.updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: logProfilesResource
    type: <xref href="com.microsoft.azure.management.monitor.LogProfileResourcePatch?alt=com.microsoft.azure.management.monitor.LogProfileResourcePatch&text=LogProfileResourcePatch" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public ServiceFuture<LogProfileResourceInner> updateAsync(String logProfileName, LogProfileResourcePatch logProfilesResource, final ServiceCallback<LogProfileResourceInner> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.updateAsync(String,LogProfileResourcePatch,final ServiceCallback<LogProfileResourceInner>)
- fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.updateWithServiceResponseAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  name: updateWithServiceResponseAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  nameWithType: LogProfilesInner.updateWithServiceResponseAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  parameters:
  - description: <p>The name of the log profile. </p>
    name: logProfileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: logProfilesResource
    type: <xref href="com.microsoft.azure.management.monitor.LogProfileResourcePatch?alt=com.microsoft.azure.management.monitor.LogProfileResourcePatch&text=LogProfileResourcePatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the LogProfileResourceInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner?alt=com.microsoft.azure.management.monitor.implementation.LogProfileResourceInner&text=LogProfileResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates an existing LogProfilesResource. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<LogProfileResourceInner>> updateWithServiceResponseAsync(String logProfileName, LogProfileResourcePatch logProfilesResource)
  uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner.updateWithServiceResponseAsync(String,LogProfileResourcePatch)
nameWithType: LogProfilesInner
syntax: public class LogProfilesInner
type: class
uid: com.microsoft.azure.management.monitor.implementation.LogProfilesInner
fullName: com.microsoft.azure.management.monitor.implementation.LogProfilesInner
name: LogProfilesInner
package: com.microsoft.azure.management.monitor.implementation
summary: <p>An instance of this class provides access to all the operations defined in LogProfiles. </p>
metadata: {}
