### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.servicebus.security.TokenProvider.createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String clientSecret)
  name: createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String clientSecret)
  nameWithType: TokenProvider.createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String clientSecret)
  parameters:
  - description: <p>URL of the Azure Active Directory instance </p>
    name: authorityUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client id of the application </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client secret of the application </p>
    name: clientSecret
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="MalformedURLException?alt=MalformedURLException&text=MalformedURLException" data-throw-if-not-resolved="False"/>
    description: <p>if the authority URL is not well formed </p>
  returns:
    description: <p>an instance of Azure Active Directory token provider </p>
    type: <xref href="com.microsoft.azure.servicebus.security.TokenProvider?alt=com.microsoft.azure.servicebus.security.TokenProvider&text=TokenProvider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates an Azure Active Directory token provider that acquires a token from the given active directory instance using the given clientId and client secret. This is a utility method. </p>
  syntax: public static TokenProvider createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String clientSecret)
  uid: com.microsoft.azure.servicebus.security.TokenProvider.createAzureActiveDirectoryTokenProvider(String,String,String)
- fullName: com.microsoft.azure.servicebus.security.TokenProvider.createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String userName, String password)
  name: createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String userName, String password)
  nameWithType: TokenProvider.createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String userName, String password)
  parameters:
  - description: <p>URL of the Azure Active Directory instance </p>
    name: authorityUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client id of the application </p>
    name: clientId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>user name </p>
    name: userName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>password </p>
    name: password
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="MalformedURLException?alt=MalformedURLException&text=MalformedURLException" data-throw-if-not-resolved="False"/>
    description: <p>if the authority URL is not well formed </p>
  returns:
    description: <p>an instance of Azure Active Directory token provider </p>
    type: <xref href="com.microsoft.azure.servicebus.security.TokenProvider?alt=com.microsoft.azure.servicebus.security.TokenProvider&text=TokenProvider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates an Azure Active Directory token provider that acquires a token from the given active directory instance using the given clientId, username and password. This is a utility method. </p>
  syntax: public static TokenProvider createAzureActiveDirectoryTokenProvider(String authorityUrl, String clientId, String userName, String password)
  uid: com.microsoft.azure.servicebus.security.TokenProvider.createAzureActiveDirectoryTokenProvider(String,String,String,String)
- fullName: com.microsoft.azure.servicebus.security.TokenProvider.createManagedServiceIdentityTokenProvider()
  name: createManagedServiceIdentityTokenProvider()
  nameWithType: TokenProvider.createManagedServiceIdentityTokenProvider()
  returns:
    description: <p>an instance of Managed Service Identity token provider </p>
    type: <xref href="com.microsoft.azure.servicebus.security.TokenProvider?alt=com.microsoft.azure.servicebus.security.TokenProvider&text=TokenProvider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a Managed Service Identity token provider. This is a utility method. </p>
  syntax: public static TokenProvider createManagedServiceIdentityTokenProvider()
  uid: com.microsoft.azure.servicebus.security.TokenProvider.createManagedServiceIdentityTokenProvider()
- fullName: com.microsoft.azure.servicebus.security.TokenProvider.createSharedAccessSignatureTokenProvider(String sasToken, Instant sasTokenValidUntil)
  name: createSharedAccessSignatureTokenProvider(String sasToken, Instant sasTokenValidUntil)
  nameWithType: TokenProvider.createSharedAccessSignatureTokenProvider(String sasToken, Instant sasTokenValidUntil)
  parameters:
  - description: <p>Already created Shared Access Signature token to be returned by <xref uid="com.microsoft.azure.servicebus.security.TokenProvider.getSecurityTokenAsync(String)" data-throw-if-not-resolved="false" data-raw-source="getSecurityTokenAsync(String)"></xref> method. </p>
    name: sasToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Instant when the token expires </p>
    name: sasTokenValidUntil
    type: <xref href="Instant?alt=Instant&text=Instant" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an instance of Shared Access Signature token provider that always returns an already created token. </p>
    type: <xref href="com.microsoft.azure.servicebus.security.TokenProvider?alt=com.microsoft.azure.servicebus.security.TokenProvider&text=TokenProvider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a Shared Access Signature token provider that always returns an already created token. This is a utility method. </p>
  syntax: public static TokenProvider createSharedAccessSignatureTokenProvider(String sasToken, Instant sasTokenValidUntil)
  uid: com.microsoft.azure.servicebus.security.TokenProvider.createSharedAccessSignatureTokenProvider(String,Instant)
- fullName: com.microsoft.azure.servicebus.security.TokenProvider.createSharedAccessSignatureTokenProvider(String sasKeyName, String sasKey)
  name: createSharedAccessSignatureTokenProvider(String sasKeyName, String sasKey)
  nameWithType: TokenProvider.createSharedAccessSignatureTokenProvider(String sasKeyName, String sasKey)
  parameters:
  - description: <p>SAS key name </p>
    name: sasKeyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>SAS key value </p>
    name: sasKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an instance of Shared Access Signature token provider with the given key name, key value. </p>
    type: <xref href="com.microsoft.azure.servicebus.security.TokenProvider?alt=com.microsoft.azure.servicebus.security.TokenProvider&text=TokenProvider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a Shared Access Signature token provider with the given key name and key value. Returned token provider creates tokens with validity of 20 minutes. This is a utility method. </p>
  syntax: public static TokenProvider createSharedAccessSignatureTokenProvider(String sasKeyName, String sasKey)
  uid: com.microsoft.azure.servicebus.security.TokenProvider.createSharedAccessSignatureTokenProvider(String,String)
- fullName: com.microsoft.azure.servicebus.security.TokenProvider.getSecurityTokenAsync(String audience)
  name: getSecurityTokenAsync(String audience)
  nameWithType: TokenProvider.getSecurityTokenAsync(String audience)
  parameters:
  - description: <p>path of the entity for which this security token is to be presented </p>
    name: audience
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an instance of CompletableFuture which returns a <xref uid="com.microsoft.azure.servicebus.security.SecurityToken" data-throw-if-not-resolved="false" data-raw-source="SecurityToken"></xref> on completion. </p>
    type: abstract CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.security.SecurityToken?alt=com.microsoft.azure.servicebus.security.SecurityToken&text=SecurityToken" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously gets a security token for the given audience. Implementations of this method may choose to create a new token for every call or return a cached token. But the token returned must be valid. </p>
  syntax: public abstract CompletableFuture<SecurityToken> getSecurityTokenAsync(String audience)
  uid: com.microsoft.azure.servicebus.security.TokenProvider.getSecurityTokenAsync(String)
nameWithType: TokenProvider
syntax: public class TokenProvider
type: class
uid: com.microsoft.azure.servicebus.security.TokenProvider
fullName: com.microsoft.azure.servicebus.security.TokenProvider
name: TokenProvider
package: com.microsoft.azure.servicebus.security
summary: <p>This abstract class defines the contract of a token provider. All token providers should inherit from this class. An instance of token provider is used to obtain a security token for a given audience. </p>
metadata: {}
