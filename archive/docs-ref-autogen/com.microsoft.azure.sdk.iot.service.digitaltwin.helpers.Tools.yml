### YamlMime:JavaType
fields:
- field:
    type: final Func1&lt;ServiceResponseWithHeaders&lt;Object, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders&text=DigitalTwinInvokeRootLevelCommandHeaders" data-throw-if-not-resolved="False"/>&gt;, Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders&text=DigitalTwinInvokeCommandHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE
  name: FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE
  nameWithType: Tools.FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE
  syntax: >-
    public static final Func1<ServiceResponseWithHeaders<Object, DigitalTwinInvokeRootLevelCommandHeaders>, Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>>> FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE= object -> {
            try {
                DigitalTwinCommandResponse digitalTwinCommandResponse = new DigitalTwinCommandResponse();
                digitalTwinCommandResponse.setPayload(new JsonPrimitive(objectMapper.writeValueAsString(object.body())));
                digitalTwinCommandResponse.setStatus(object.headers().xMsCommandStatuscode());
                DigitalTwinInvokeCommandHeaders digitalTwinInvokeCommandHeaders = new DigitalTwinInvokeCommandHeaders();
                digitalTwinInvokeCommandHeaders.setRequestId(object.headers().xMsRequestId());
                ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> result = new ServiceResponseWithHeaders<>(digitalTwinCommandResponse, digitalTwinInvokeCommandHeaders, object.response());
                return Observable.just(result);
            }
            catch (JsonProcessingException e) {
                return Observable.error(new IotHubException("Failed to parse the resonse"));
            }

        }
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMMAND_RESPONSE
- field:
    type: final Func1&lt;ServiceResponseWithHeaders&lt;Object, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeComponentCommandHeaders&text=DigitalTwinInvokeComponentCommandHeaders" data-throw-if-not-resolved="False"/>&gt;, Observable&lt;ServiceResponseWithHeaders&lt;<xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders&text=DigitalTwinInvokeCommandHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
  name: FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
  nameWithType: Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
  syntax: >-
    public static final Func1<ServiceResponseWithHeaders<Object, DigitalTwinInvokeComponentCommandHeaders>, Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders>>> FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE= object -> {
            try {
                DigitalTwinCommandResponse digitalTwinCommandResponse = new DigitalTwinCommandResponse();
                digitalTwinCommandResponse.setPayload(new JsonPrimitive(objectMapper.writeValueAsString(object.body())));
                digitalTwinCommandResponse.setStatus(object.headers().xMsCommandStatuscode());
                DigitalTwinInvokeCommandHeaders digitalTwinInvokeCommandHeaders = new DigitalTwinInvokeCommandHeaders();
                digitalTwinInvokeCommandHeaders.setRequestId(object.headers().xMsRequestId());
                ServiceResponseWithHeaders<DigitalTwinCommandResponse, DigitalTwinInvokeCommandHeaders> result = new ServiceResponseWithHeaders<>(digitalTwinCommandResponse, digitalTwinInvokeCommandHeaders, object.response());
                return Observable.just(result);
            }
            catch (JsonProcessingException e) {
                return Observable.error(new IotHubException("Failed to parse the resonse"));
            }

        }
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_COMPONENT_COMMAND_RESPONSE
- field:
    type: final Func1&lt;ServiceResponseWithHeaders&lt;Object, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinGetDigitalTwinHeaders&text=DigitalTwinGetDigitalTwinHeaders" data-throw-if-not-resolved="False"/>&gt;, Observable&lt;ServiceResponseWithHeaders&lt;Object, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders&text=DigitalTwinGetHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_GET_RESPONSE
  name: FUNC_TO_DIGITAL_TWIN_GET_RESPONSE
  nameWithType: Tools.FUNC_TO_DIGITAL_TWIN_GET_RESPONSE
  syntax: >-
    public static final Func1<ServiceResponseWithHeaders<Object, DigitalTwinGetDigitalTwinHeaders>, Observable<ServiceResponseWithHeaders<Object, DigitalTwinGetHeaders>>> FUNC_TO_DIGITAL_TWIN_GET_RESPONSE= object -> {
            DigitalTwinGetHeaders digitalTwinGetHeaders = new DigitalTwinGetHeaders();
            digitalTwinGetHeaders.withETag(object.headers().eTag());
            ServiceResponseWithHeaders<Object, DigitalTwinGetHeaders> result = new ServiceResponseWithHeaders<>(object.body(), digitalTwinGetHeaders, object.response());
            return Observable.just(result);
        }
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_GET_RESPONSE
- field:
    type: final Func1&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinUpdateDigitalTwinHeaders&text=DigitalTwinUpdateDigitalTwinHeaders" data-throw-if-not-resolved="False"/>&gt;, Observable&lt;ServiceResponseWithHeaders&lt;Void, <xref href="com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders&text=DigitalTwinUpdateHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE
  name: FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE
  nameWithType: Tools.FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE
  syntax: >-
    public static final Func1<ServiceResponseWithHeaders<Void, DigitalTwinUpdateDigitalTwinHeaders>, Observable<ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders>>> FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE= object -> {
            DigitalTwinUpdateHeaders digitalTwinUpdateHeaders = new DigitalTwinUpdateHeaders();
            digitalTwinUpdateHeaders.withETag(object.headers().eTag());
            digitalTwinUpdateHeaders.withLocation(object.headers().location());
            ServiceResponseWithHeaders<Void, DigitalTwinUpdateHeaders> result = new ServiceResponseWithHeaders<>(object.body(), digitalTwinUpdateHeaders, object.response());
            return Observable.just(result);
        }
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.FUNC_TO_DIGITAL_TWIN_UPDATE_RESPONSE
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.isNullOrEmpty(String value)
  name: isNullOrEmpty(String value)
  nameWithType: Tools.isNullOrEmpty(String value)
  parameters:
  - name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public static boolean isNullOrEmpty(String value)
  uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools.isNullOrEmpty(String)
nameWithType: Tools
syntax: public class Tools
type: class
uid: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools
fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers.Tools
name: Tools
package: com.microsoft.azure.sdk.iot.service.digitaltwin.helpers
metadata: {}
