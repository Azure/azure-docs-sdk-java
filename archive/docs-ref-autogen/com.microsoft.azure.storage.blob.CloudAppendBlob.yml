### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final CloudAppendBlob otherBlob)
  name: CloudAppendBlob(final CloudAppendBlob otherBlob)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final CloudAppendBlob otherBlob)
  parameters:
  - description: <p>A <code>CloudAppendBlob</code> object which represents the append blob to copy. </p>
    name: otherBlob
    type: final <xref href="com.microsoft.azure.storage.blob.CloudAppendBlob?alt=com.microsoft.azure.storage.blob.CloudAppendBlob&text=CloudAppendBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class by copying values from another append blob.</p>

    <p></p>
  syntax: public CloudAppendBlob(final CloudAppendBlob otherBlob)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final CloudAppendBlob)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final StorageUri blobAbsoluteUri)
  name: CloudAppendBlob(final StorageUri blobAbsoluteUri)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final StorageUri blobAbsoluteUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object which represents the absolute URI to the blob.</p>
    name: blobAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute URI and storage service client.</p>

    <p></p>
  syntax: public CloudAppendBlob(final StorageUri blobAbsoluteUri)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final StorageUri)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final StorageUri blobAbsoluteUri, final StorageCredentials credentials)
  name: CloudAppendBlob(final StorageUri blobAbsoluteUri, final StorageCredentials credentials)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final StorageUri blobAbsoluteUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object that represents the absolute URI to the blob. </p>
    name: blobAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access.</p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute StorageUri and credentials.</p>

    <p></p>
  syntax: public CloudAppendBlob(final StorageUri blobAbsoluteUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final StorageUri,final StorageCredentials)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final StorageUri blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  name: CloudAppendBlob(final StorageUri blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final StorageUri blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object that represents the absolute URI to the blob. </p>
    name: blobAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot version, if applicable. </p>
    name: snapshotID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access. </p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute StorageUri, snapshot ID, and credentials.</p>

    <p></p>
  syntax: public CloudAppendBlob(final StorageUri blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final StorageUri,final String,final StorageCredentials)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final URI blobAbsoluteUri)
  name: CloudAppendBlob(final URI blobAbsoluteUri)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final URI blobAbsoluteUri)
  parameters:
  - description: <p>A <code>java.net.URI</code> object which represents the absolute URI to the blob.</p>
    name: blobAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute URI and storage service client.</p>

    <p></p>
  syntax: public CloudAppendBlob(final URI blobAbsoluteUri)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final URI)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final URI blobAbsoluteUri, final StorageCredentials credentials)
  name: CloudAppendBlob(final URI blobAbsoluteUri, final StorageCredentials credentials)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final URI blobAbsoluteUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the absolute URI to the blob. </p>
    name: blobAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access.</p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute URI and credentials.</p>

    <p></p>
  syntax: public CloudAppendBlob(final URI blobAbsoluteUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final URI,final StorageCredentials)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final URI blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  name: CloudAppendBlob(final URI blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  nameWithType: CloudAppendBlob.CloudAppendBlob(final URI blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the absolute URI to the blob. </p>
    name: blobAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot version, if applicable. </p>
    name: snapshotID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access. </p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified absolute URI, snapshot ID, and credentials.</p>

    <p></p>
  syntax: public CloudAppendBlob(final URI blobAbsoluteUri, final String snapshotID, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(final URI,final String,final StorageCredentials)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)
  name: CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)
  nameWithType: CloudAppendBlob.CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)
  parameters:
  - description: <p>Name of the blob. </p>
    name: blobName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot version, if applicable. </p>
    name: snapshotID
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The reference to the parent container. </p>
    name: container
    type: <xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified type, name, snapshot ID, and container.</p>

    <p></p>
  syntax: protected CloudAppendBlob(String blobName, String snapshotID, CloudBlobContainer container)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.CloudAppendBlob(String,String,CloudBlobContainer)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.blob.CloudBlob?alt=com.microsoft.azure.storage.blob.CloudBlob&text=CloudBlob" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.storage.blob.CloudBlob.abortCopy(final String)
- com.microsoft.azure.storage.blob.CloudBlob.abortCopy(final String,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.acquireLease()
- com.microsoft.azure.storage.blob.CloudBlob.acquireLease(final Integer,final String)
- com.microsoft.azure.storage.blob.CloudBlob.acquireLease(final Integer,final String,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.assertCorrectBlobType()
- com.microsoft.azure.storage.blob.CloudBlob.assertNoWriteOperationForSnapshot()
- com.microsoft.azure.storage.blob.CloudBlob.blobServiceClient
- com.microsoft.azure.storage.blob.CloudBlob.breakLease(final Integer)
- com.microsoft.azure.storage.blob.CloudBlob.breakLease(final Integer,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.changeLease(final String,final AccessCondition)
- com.microsoft.azure.storage.blob.CloudBlob.changeLease(final String,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.CloudBlob(final BlobType,String,String,CloudBlobContainer)
- com.microsoft.azure.storage.blob.CloudBlob.CloudBlob(final BlobType,final StorageUri,final String,final StorageCredentials)
- com.microsoft.azure.storage.blob.CloudBlob.CloudBlob(final CloudBlob)
- com.microsoft.azure.storage.blob.CloudBlob.createSnapshot()
- com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.createSnapshot(final HashMap<String, String>,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.delete()
- com.microsoft.azure.storage.blob.CloudBlob.delete(final DeleteSnapshotsOption,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists()
- com.microsoft.azure.storage.blob.CloudBlob.deleteIfExists(final DeleteSnapshotsOption,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.download(final OutputStream)
- com.microsoft.azure.storage.blob.CloudBlob.download(final OutputStream,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo()
- com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInfo(BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadAccountInformationImpl(final RequestOptions)
- com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes()
- com.microsoft.azure.storage.blob.CloudBlob.downloadAttributes(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadRange(final long,final Long,final OutputStream)
- com.microsoft.azure.storage.blob.CloudBlob.downloadRange(final long,final Long,final OutputStream,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadRangeInternal(final long,final Long,final byte [],final int,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(final long,final Long,final byte [],final int)
- com.microsoft.azure.storage.blob.CloudBlob.downloadRangeToByteArray(final long,final Long,final byte [],final int,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(final byte [],final int)
- com.microsoft.azure.storage.blob.CloudBlob.downloadToByteArray(final byte [],final int,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(final String)
- com.microsoft.azure.storage.blob.CloudBlob.downloadToFile(final String,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.exists()
- com.microsoft.azure.storage.blob.CloudBlob.exists(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(final SharedAccessBlobPolicy,final String)
- com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(final SharedAccessBlobPolicy,final SharedAccessBlobHeaders,final String)
- com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(final SharedAccessBlobPolicy,final SharedAccessBlobHeaders,final String,final IPRange,final SharedAccessProtocols)
- com.microsoft.azure.storage.blob.CloudBlob.generateSharedAccessSignature(final SharedAccessBlobPolicy,final SharedAccessBlobHeaders,final String,final IPRange,final SharedAccessProtocols,boolean)
- com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(UserDelegationKey,SharedAccessBlobPolicy)
- com.microsoft.azure.storage.blob.CloudBlob.generateUserDelegationSharedAccessSignature(final UserDelegationKey,final SharedAccessBlobPolicy,final SharedAccessBlobHeaders,final IPRange,final SharedAccessProtocols)
- com.microsoft.azure.storage.blob.CloudBlob.getContainer()
- com.microsoft.azure.storage.blob.CloudBlob.getCopyState()
- com.microsoft.azure.storage.blob.CloudBlob.getMetadata()
- com.microsoft.azure.storage.blob.CloudBlob.getName()
- com.microsoft.azure.storage.blob.CloudBlob.getParent()
- com.microsoft.azure.storage.blob.CloudBlob.getParentNameFromURI(final StorageUri,final String,final CloudBlobContainer)
- com.microsoft.azure.storage.blob.CloudBlob.getProperties()
- com.microsoft.azure.storage.blob.CloudBlob.getQualifiedStorageUri()
- com.microsoft.azure.storage.blob.CloudBlob.getQualifiedUri()
- com.microsoft.azure.storage.blob.CloudBlob.getServiceClient()
- com.microsoft.azure.storage.blob.CloudBlob.getSnapshotID()
- com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedStorageUri()
- com.microsoft.azure.storage.blob.CloudBlob.getSnapshotQualifiedUri()
- com.microsoft.azure.storage.blob.CloudBlob.getStorageUri()
- com.microsoft.azure.storage.blob.CloudBlob.getStreamMinimumReadSizeInBytes()
- com.microsoft.azure.storage.blob.CloudBlob.getStreamWriteSizeInBytes()
- com.microsoft.azure.storage.blob.CloudBlob.getTransformedAddress(final OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.getUri()
- com.microsoft.azure.storage.blob.CloudBlob.isSnapshot()
- com.microsoft.azure.storage.blob.CloudBlob.openInputStream()
- com.microsoft.azure.storage.blob.CloudBlob.openInputStream(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.openInputStream(final long,final Long,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.parent
- com.microsoft.azure.storage.blob.CloudBlob.releaseLease(final AccessCondition)
- com.microsoft.azure.storage.blob.CloudBlob.releaseLease(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.renewLease(final AccessCondition)
- com.microsoft.azure.storage.blob.CloudBlob.renewLease(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.setContainer(final CloudBlobContainer)
- com.microsoft.azure.storage.blob.CloudBlob.setMetadata(final HashMap<String, String>)
- com.microsoft.azure.storage.blob.CloudBlob.setProperties(final BlobProperties)
- com.microsoft.azure.storage.blob.CloudBlob.setSnapshotID(final String)
- com.microsoft.azure.storage.blob.CloudBlob.setStorageUri(final StorageUri)
- com.microsoft.azure.storage.blob.CloudBlob.setStreamMinimumReadSizeInBytes(final int)
- com.microsoft.azure.storage.blob.CloudBlob.startCopy(final URI)
- com.microsoft.azure.storage.blob.CloudBlob.startCopy(final URI,final AccessCondition,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.startCopy(final URI,final String,final AccessCondition,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.startCopy(final URI,String,boolean,final String,final AccessCondition,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.startCopy(final URI,String,boolean,final String,final RehydratePriority,final AccessCondition,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.startCopyImpl(final URI,final String,final boolean,final boolean,final String,final RehydratePriority,final AccessCondition,final AccessCondition,final BlobRequestOptions)
- com.microsoft.azure.storage.blob.CloudBlob.streamMinimumReadSizeInBytes
- com.microsoft.azure.storage.blob.CloudBlob.streamWriteSizeInBytes
- com.microsoft.azure.storage.blob.CloudBlob.undelete()
- com.microsoft.azure.storage.blob.CloudBlob.undelete(BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.updateEtagAndLastModifiedFromResponse(HttpURLConnection)
- com.microsoft.azure.storage.blob.CloudBlob.updateLengthFromResponse(HttpURLConnection)
- com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(final byte [],final int,final int)
- com.microsoft.azure.storage.blob.CloudBlob.uploadFromByteArray(final byte [],final int,final int,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(final String)
- com.microsoft.azure.storage.blob.CloudBlob.uploadFromFile(final String,final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata()
- com.microsoft.azure.storage.blob.CloudBlob.uploadMetadata(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.uploadProperties()
- com.microsoft.azure.storage.blob.CloudBlob.uploadProperties(final AccessCondition,BlobRequestOptions,OperationContext)
- com.microsoft.azure.storage.blob.CloudBlob.validateCPKHeaders(StorageRequest<CloudBlobClient, T, R>,BlobRequestOptions,boolean)
methods:
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.append(InputStream sourceStream, final long length)
  name: append(InputStream sourceStream, final long length)
  nameWithType: CloudAppendBlob.append(InputStream sourceStream, final long length)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object providing the blob content to append. </p>
    name: sourceStream
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends a stream to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void append(InputStream sourceStream, final long length)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.append(InputStream,final long)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.append(InputStream sourceStream, final long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: append(InputStream sourceStream, final long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.append(InputStream sourceStream, final long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object providing the blob content to append. </p>
    name: sourceStream
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends a stream to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void append(InputStream sourceStream, final long length, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.append(InputStream,final long,AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(final InputStream sourceStream, final long length)
  name: appendBlock(final InputStream sourceStream, final long length)
  nameWithType: CloudAppendBlob.appendBlock(final InputStream sourceStream, final long length)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object that represents the input stream to write to the append blob. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>The offset at which the block was appended. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Commits a new block of data to the end of the blob.</p>

    <p></p>
  syntax: public Long appendBlock(final InputStream sourceStream, final long length)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(final InputStream,final long)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: appendBlock(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.appendBlock(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object that represents the input stream to write to the Append blob. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>The offset at which the block was appended. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Commits a new block of data to the end of the blob.</p>

    <p></p>
  syntax: public Long appendBlock(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(final InputStream,final long,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(final URI copySource, final Long offset, final Long length)
  name: appendBlockFromURI(final URI copySource, final Long offset, final Long length)
  nameWithType: CloudAppendBlob.appendBlockFromURI(final URI copySource, final Long offset, final Long length)
  parameters:
  - description: <p>The <code>URI</code> of the source data. It can point to any Azure Blob or File that is public or the URL can include a shared access signature. </p>
    name: copySource
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the offset to use as the starting point for the source. </p>
    name: offset
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to copy or <code>null</code> to copy until the end of the blob. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>The offset at which the block was appended. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Appends a block, using the specified source URL.</p>

    <p></p>
  syntax: public Long appendBlockFromURI(final URI copySource, final Long offset, final Long length)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(final URI,final Long,final Long)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(final URI copySource, final Long offset, final Long length, String md5, final AccessCondition accessCondition, final AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)
  name: appendBlockFromURI(final URI copySource, final Long offset, final Long length, String md5, final AccessCondition accessCondition, final AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.appendBlockFromURI(final URI copySource, final Long offset, final Long length, String md5, final AccessCondition accessCondition, final AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The <code>URI</code> of the source data. It can point to any Azure Blob or File that is public or the URL can include a shared access signature. </p>
    name: copySource
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the offset to use as the starting point for the source. </p>
    name: offset
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>Long</code> which represents the number of bytes to copy or <code>null</code> to copy until the end of the blob. </p>
    name: length
    type: <xref href="final+Long?alt=final+Long&text=final+Long" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which represents the MD5 caluclated for the range of bytes of the source. </p>
    name: md5
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the source blob. </p>
    name: sourceAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>The offset at which the block was appended. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Appends a block, using the specified source URL.</p>

    <p></p>
  syntax: public Long appendBlockFromURI(final URI copySource, final Long offset, final Long length, String md5, final AccessCondition accessCondition, final AccessCondition sourceAccessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlockFromURI(final URI,final Long,final Long,String,final AccessCondition,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(final byte[] buffer, final int offset, final int length)
  name: appendFromByteArray(final byte[] buffer, final int offset, final int length)
  nameWithType: CloudAppendBlob.appendFromByteArray(final byte[] buffer, final int offset, final int length)
  parameters:
  - description: <p>A <code>byte</code> array which represents the data to append to the blob. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>int</code> which represents the offset of the byte array from which to start the data upload. </p>
    name: offset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the number of bytes to upload from the input buffer.</p>
    name: length
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void appendFromByteArray(final byte[] buffer, final int offset, final int length)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(final byte [],final int,final int)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: appendFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.appendFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>byte</code> array which represents the data to append to the blob. </p>
    name: buffer
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>int</code> which represents the offset of the byte array from which to start the data upload. </p>
    name: offset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>int</code> which represents the number of bytes to upload from the input buffer. </p>
    name: length
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends the contents of a byte array to an append blob.This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void appendFromByteArray(final byte[] buffer, final int offset, final int length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromByteArray(final byte [],final int,final int,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(final String path)
  name: appendFromFile(final String path)
  nameWithType: CloudAppendBlob.appendFromFile(final String path)
  parameters:
  - description: <p>A <code>String</code> which represents the path to the file to be appended.</p>
    name: path
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends a file to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void appendFromFile(final String path)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(final String)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(final String path, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: appendFromFile(final String path, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.appendFromFile(final String path, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> which represents the path to the file to be appended. </p>
    name: path
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends a file to an append blob. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void appendFromFile(final String path, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendFromFile(final String,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(final String content)
  name: appendText(final String content)
  nameWithType: CloudAppendBlob.appendText(final String content)
  parameters:
  - description: <p>A <code>String</code> which represents the content that will be appended to the blob.</p>
    name: content
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends a string of text to an append blob using the platform's default encoding. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void appendText(final String content)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(final String)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(final String content, final String charsetName, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: appendText(final String content, final String charsetName, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.appendText(final String content, final String charsetName, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> which represents the content that will be appended to the blob. </p>
    name: content
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which represents the name of the charset to use to encode the content. If null, the platform's default encoding is used. </p>
    name: charsetName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  summary: >-
    <p>Appends a string of text to an append blob using the specified encoding. This API should be used strictly in a single writer scenario because the API internally uses the append-offset conditional header to avoid duplicate blocks which does not work in a multiple writer scenario. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void appendText(final String content, final String charsetName, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.appendText(final String,final String,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace()
  name: createOrReplace()
  nameWithType: CloudAppendBlob.createOrReplace()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an empty append blob. If the blob already exists, this will replace it. </p>

    <p>To avoid overwriting and instead throw an error, please use the <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(final AccessCondition,BlobRequestOptions,OperationContext)" data-throw-if-not-resolved="false" data-raw-source="createOrReplace(AccessCondition, BlobRequestOptions, OperationContext)"></xref> overload with the appropriate <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref>.</p>

    <p></p>
  syntax: public void createOrReplace()
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace()
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: createOrReplace(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.createOrReplace(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an append blob using the specified request options and operation context. If the blob already exists, this will replace it. </p>

    <p>To avoid overwriting and instead throw an error, please pass in an <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> generated using <xref uid="com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()" data-throw-if-not-resolved="false" data-raw-source="AccessCondition#generateIfNotExistsCondition()"></xref>.</p>

    <p></p>
  syntax: public void createOrReplace(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.createOrReplace(final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting()
  name: openWriteExisting()
  nameWithType: CloudAppendBlob.openWriteExisting()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobOutputStream" data-throw-if-not-resolved="false" data-raw-source="BlobOutputStream"></xref> object used to write data to the blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobOutputStream?alt=com.microsoft.azure.storage.blob.BlobOutputStream&text=BlobOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the append blob. The append blob must already exist and will be appended to. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public BlobOutputStream openWriteExisting()
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting()
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobOutputStream" data-throw-if-not-resolved="false" data-raw-source="BlobOutputStream"></xref> object used to write data to the blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobOutputStream?alt=com.microsoft.azure.storage.blob.BlobOutputStream&text=BlobOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the append blob, using the specified lease ID, request options and operation context. The append blob must already exist and will be appended to. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public BlobOutputStream openWriteExisting(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteExisting(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew()
  name: openWriteNew()
  nameWithType: CloudAppendBlob.openWriteNew()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobOutputStream" data-throw-if-not-resolved="false" data-raw-source="BlobOutputStream"></xref> object used to write data to the blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobOutputStream?alt=com.microsoft.azure.storage.blob.BlobOutputStream&text=BlobOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the append blob. The append blob does not need to yet exist. If the blob already exists, this will replace it. </p>

    <p>To avoid overwriting and instead throw an error, please use the <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(AccessCondition,BlobRequestOptions,OperationContext)" data-throw-if-not-resolved="false" data-raw-source="openWriteNew(AccessCondition, BlobRequestOptions, OperationContext)"></xref> overload with the appropriate <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref>. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public BlobOutputStream openWriteNew()
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew()
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobOutputStream" data-throw-if-not-resolved="false" data-raw-source="BlobOutputStream"></xref> object used to write data to the blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobOutputStream?alt=com.microsoft.azure.storage.blob.BlobOutputStream&text=BlobOutputStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Opens an output stream object to write data to the append blob, using the specified lease ID, request options and operation context. The append blob does not need to yet exist. If the blob already exists, this will replace it. </p>

    <p>To avoid overwriting and instead throw an error, please pass in an <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> generated using <xref uid="com.microsoft.azure.storage.AccessCondition.generateIfNotExistsCondition()" data-throw-if-not-resolved="false" data-raw-source="AccessCondition#generateIfNotExistsCondition()"></xref>. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public BlobOutputStream openWriteNew(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.openWriteNew(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  name: setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  nameWithType: CloudAppendBlob.setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  parameters:
  - description: <p>An <code>int</code> which represents the maximum block size, in bytes, for writing to an append blob while using a <xref uid="com.microsoft.azure.storage.blob.BlobOutputStream" data-throw-if-not-resolved="false" data-raw-source="BlobOutputStream"></xref> object, ranging from 16 KB to 4 MB, inclusive.</p>
    name: streamWriteSizeInBytes
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>streamWriteSizeInBytes</code> is less than 16 KB or greater than 4 MB. </p>
  summary: >-
    <p>Sets the number of bytes to buffer when writing to a <xref uid="com.microsoft.azure.storage.blob.BlobOutputStream" data-throw-if-not-resolved="false" data-raw-source="BlobOutputStream"></xref>.</p>

    <p></p>
  syntax: public void setStreamWriteSizeInBytes(final int streamWriteSizeInBytes)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.setStreamWriteSizeInBytes(final int)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(final CloudAppendBlob sourceBlob)
  name: startCopy(final CloudAppendBlob sourceBlob)
  nameWithType: CloudAppendBlob.startCopy(final CloudAppendBlob sourceBlob)
  parameters:
  - description: <p>A <code>CloudAppendBlob</code> object that represents the source blob to copy.</p>
    name: sourceBlob
    type: final <xref href="com.microsoft.azure.storage.blob.CloudAppendBlob?alt=com.microsoft.azure.storage.blob.CloudAppendBlob&text=CloudAppendBlob" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying a append blob's contents, properties, and metadata to a new append blob.</p>

    <p></p>
  syntax: public final String startCopy(final CloudAppendBlob sourceBlob)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(final CloudAppendBlob)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(final CloudAppendBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)
  name: startCopy(final CloudAppendBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.startCopy(final CloudAppendBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>CloudAppendBlob</code> object that represents the source blob to copy. </p>
    name: sourceBlob
    type: final <xref href="com.microsoft.azure.storage.blob.CloudAppendBlob?alt=com.microsoft.azure.storage.blob.CloudAppendBlob&text=CloudAppendBlob" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the source blob. </p>
    name: sourceAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the destination blob. </p>
    name: destinationAccessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> which represents the copy ID associated with the copy operation.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests the service to start copying a append blob's contents, properties, and metadata to a new append blob, using the specified access conditions, lease ID, request options, and operation context.</p>

    <p></p>
  syntax: public final String startCopy(final CloudAppendBlob sourceBlob, final AccessCondition sourceAccessCondition, final AccessCondition destinationAccessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.startCopy(final CloudAppendBlob,final AccessCondition,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.upload(final InputStream sourceStream, final long length)
  name: upload(final InputStream sourceStream, final long length)
  nameWithType: CloudAppendBlob.upload(final InputStream sourceStream, final long length)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object to read from. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown.</p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Uploads the source stream data to the append blob. If the blob already exists on the service, it will be overwritten. </p>

    <p>If you want to append data to an already existing blob, please see <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(final InputStream,final long)" data-throw-if-not-resolved="false" data-raw-source="appendBlock(InputStream, long)"></xref>. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void upload(final InputStream sourceStream, final long length)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.upload(final InputStream,final long)
- fullName: com.microsoft.azure.storage.blob.CloudAppendBlob.upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudAppendBlob.upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="InputStream"></xref> object to read from. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>long</code> which represents the length, in bytes, of the stream data, or -1 if unknown. </p>
    name: length
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object which represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O exception occurred. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Uploads the source stream data to the append blob using the specified lease ID, request options, and operation context. If the blob already exists on the service, it will be overwritten. </p>

    <p>If you want to append data to an already existing blob, please see <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob.appendBlock(final InputStream,final long)" data-throw-if-not-resolved="false" data-raw-source="appendBlock(InputStream, long)"></xref>. </p>

    <p>If you are doing writes in a single writer scenario, please look at <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions.setAbsorbConditionalErrorsOnRetry(final Boolean)" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions#setAbsorbConditionalErrorsOnRetry(Boolean)"></xref> and see if setting this flag to  is acceptable for you.</p>

    <p></p>
  syntax: public void upload(final InputStream sourceStream, final long length, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudAppendBlob.upload(final InputStream,final long,final AccessCondition,BlobRequestOptions,OperationContext)
nameWithType: CloudAppendBlob
syntax: public class CloudAppendBlob extends CloudBlob
type: class
uid: com.microsoft.azure.storage.blob.CloudAppendBlob
fullName: com.microsoft.azure.storage.blob.CloudAppendBlob
name: CloudAppendBlob
package: com.microsoft.azure.storage.blob
summary: <p>Represents a Microsoft Azure Append Blob. </p>
metadata: {}
