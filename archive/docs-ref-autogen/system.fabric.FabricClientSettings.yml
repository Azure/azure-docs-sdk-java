### YamlMime:JavaType
constructors:
- fullName: system.fabric.FabricClientSettings.FabricClientSettings()
  name: FabricClientSettings()
  nameWithType: FabricClientSettings.FabricClientSettings()
  summary: <p>Creates an Instance of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClientSettings"></xref></p>
  syntax: public FabricClientSettings()
  uid: system.fabric.FabricClientSettings.FabricClientSettings()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.FabricClientSettings.getClientFriendlyName()
  name: getClientFriendlyName()
  nameWithType: FabricClientSettings.getClientFriendlyName()
  returns:
    description: <p>The client friendly name that will appear in Service Fabric traces for debugging. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the client friendly name that will appear in Service Fabric traces for debugging.</p>

    <p>

      <b>Remarks:</b> The default value is null and the client friendly name will automatically be generated as a UUID internally. </p>
  syntax: public String getClientFriendlyName()
  uid: system.fabric.FabricClientSettings.getClientFriendlyName()
- fullName: system.fabric.FabricClientSettings.getConnectionInitializationTimeout()
  name: getConnectionInitializationTimeout()
  nameWithType: FabricClientSettings.getConnectionInitializationTimeout()
  returns:
    description: <p>The timeout after the current gateway address does not respond with a valid connection. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the timeout after which, if the current gateway address does not respond with a valid connection, another different address is randomly selected from the gateway addresses collection.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 2 seconds. This property must be less than the value of the <xref uid="system.fabric.FabricClientSettings.getServiceChangePollInterval()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClientSettings#getServiceChangePollInterval()"></xref> property. </p>
  syntax: public Duration getConnectionInitializationTimeout()
  uid: system.fabric.FabricClientSettings.getConnectionInitializationTimeout()
- fullName: system.fabric.FabricClientSettings.getHealthOperationTimeout()
  name: getHealthOperationTimeout()
  nameWithType: FabricClientSettings.getHealthOperationTimeout()
  returns:
    description: <p>The timeout on health operation requests from the client to the gateway. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the timeout on health operation requests from the client to the gateway.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 120 seconds. </p>
  syntax: public Duration getHealthOperationTimeout()
  uid: system.fabric.FabricClientSettings.getHealthOperationTimeout()
- fullName: system.fabric.FabricClientSettings.getHealthReportRetrySendInterval()
  name: getHealthReportRetrySendInterval()
  nameWithType: FabricClientSettings.getHealthReportRetrySendInterval()
  returns:
    description: <p>The retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 30 seconds. </p>
  syntax: public Duration getHealthReportRetrySendInterval()
  uid: system.fabric.FabricClientSettings.getHealthReportRetrySendInterval()
- fullName: system.fabric.FabricClientSettings.getHealthReportSendInterval()
  name: getHealthReportSendInterval()
  nameWithType: FabricClientSettings.getHealthReportSendInterval()
  returns:
    description: <p>The interval at which health reports are sent to Health Manager. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the interval at which health reports are sent to Health Manager.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 30 seconds. </p>
  syntax: public Duration getHealthReportSendInterval()
  uid: system.fabric.FabricClientSettings.getHealthReportSendInterval()
- fullName: system.fabric.FabricClientSettings.getKeepAliveInterval()
  name: getKeepAliveInterval()
  nameWithType: FabricClientSettings.getKeepAliveInterval()
  returns:
    description: <p>The interval at which the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> will ping the connected endpoint. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the interval at which the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> will ping the connected endpoint.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 0 seconds. This property can't be updated after the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> is opened. Setting this property will throw a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> exception. <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> will continue pinging as long as it has pending operations. </p>
  syntax: public Duration getKeepAliveInterval()
  uid: system.fabric.FabricClientSettings.getKeepAliveInterval()
- fullName: system.fabric.FabricClientSettings.getNotificationCacheUpdateTimeout()
  name: getNotificationCacheUpdateTimeout()
  nameWithType: FabricClientSettings.getNotificationCacheUpdateTimeout()
  returns:
    description: <p>The timeout for updating the local cache in response to service notifications. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the timeout for updating the local cache in response to service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax: public Duration getNotificationCacheUpdateTimeout()
  uid: system.fabric.FabricClientSettings.getNotificationCacheUpdateTimeout()
- fullName: system.fabric.FabricClientSettings.getNotificationGatewayConnectionTimeout()
  name: getNotificationGatewayConnectionTimeout()
  nameWithType: FabricClientSettings.getNotificationGatewayConnectionTimeout()
  returns:
    description: <p>The timeout for running a re-connection protocol if the client has registered for service notifications. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the timeout for running a re-connection protocol if the client has registered for service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax: public Duration getNotificationGatewayConnectionTimeout()
  uid: system.fabric.FabricClientSettings.getNotificationGatewayConnectionTimeout()
- fullName: system.fabric.FabricClientSettings.getPartitionLocationCacheBucketCount()
  name: getPartitionLocationCacheBucketCount()
  nameWithType: FabricClientSettings.getPartitionLocationCacheBucketCount()
  returns:
    description: <p>The bucket count used by the client’s service resolution cache. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the bucket count used by the client’s service resolution cache.</p>

    <p>

      <b>Remarks:</b>The default value is 1024. </p>
  syntax: public long getPartitionLocationCacheBucketCount()
  uid: system.fabric.FabricClientSettings.getPartitionLocationCacheBucketCount()
- fullName: system.fabric.FabricClientSettings.getPartitionLocationCacheLimit()
  name: getPartitionLocationCacheLimit()
  nameWithType: FabricClientSettings.getPartitionLocationCacheLimit()
  returns:
    description: <p>The maximum number of cached location entries on the client. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the maximum number of cached location entries on the client.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 1000. This property is not updatable. Setting this property will throw a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> exception. When the cache limit is reached the oldest entries are discarded first. The default value is 100. </p>
  syntax: public long getPartitionLocationCacheLimit()
  uid: system.fabric.FabricClientSettings.getPartitionLocationCacheLimit()
- fullName: system.fabric.FabricClientSettings.getServiceChangePollInterval()
  name: getServiceChangePollInterval()
  nameWithType: FabricClientSettings.getServiceChangePollInterval()
  returns:
    description: <p>The timeout on service change notification requests from the client to the gateway for all registered callbacks. </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 120 seconds. </p>
  syntax: public Duration getServiceChangePollInterval()
  uid: system.fabric.FabricClientSettings.getServiceChangePollInterval()
- fullName: system.fabric.FabricClientSettings.setClientFriendlyName(String clientFriendlyName)
  name: setClientFriendlyName(String clientFriendlyName)
  nameWithType: FabricClientSettings.setClientFriendlyName(String clientFriendlyName)
  parameters:
  - description: <p>The client friendly name that will appear in Service Fabric traces for debugging. </p>
    name: clientFriendlyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the client friendly name that will appear in Service Fabric traces for debugging.</p>

    <p>

      <b>Remarks:</b> The default value is null and the client friendly name will automatically be generated as a UUID internally. </p>
  syntax: public void setClientFriendlyName(String clientFriendlyName)
  uid: system.fabric.FabricClientSettings.setClientFriendlyName(String)
- fullName: system.fabric.FabricClientSettings.setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  name: setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  nameWithType: FabricClientSettings.setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  parameters:
  - description: <p>The timeout after the current gateway address does not respond with a valid connection. </p>
    name: connectionInitializationTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the timeout after which, if the current gateway address does not respond with a valid connection, another different address is randomly selected from the gateway addresses collection.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 2 seconds. This property must be less than the value of the <xref uid="system.fabric.FabricClientSettings.getServiceChangePollInterval()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClientSettings#getServiceChangePollInterval()"></xref> property. </p>
  syntax: public void setConnectionInitializationTimeout(Duration connectionInitializationTimeout)
  uid: system.fabric.FabricClientSettings.setConnectionInitializationTimeout(Duration)
- fullName: system.fabric.FabricClientSettings.setHealthOperationTimeout(Duration healthOperationTimeout)
  name: setHealthOperationTimeout(Duration healthOperationTimeout)
  nameWithType: FabricClientSettings.setHealthOperationTimeout(Duration healthOperationTimeout)
  parameters:
  - description: <p>The timeout on health operation requests from the client to the gateway. </p>
    name: healthOperationTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the timeout on health operation requests from the client to the gateway.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 120 seconds. </p>
  syntax: public void setHealthOperationTimeout(Duration healthOperationTimeout)
  uid: system.fabric.FabricClientSettings.setHealthOperationTimeout(Duration)
- fullName: system.fabric.FabricClientSettings.setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  name: setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  nameWithType: FabricClientSettings.setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  parameters:
  - description: <p>The retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent. </p>
    name: healthReportRetrySendInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the retry interval at which health reports that have not yet been acknowledged by the Health Manager are resent.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 30 seconds. </p>
  syntax: public void setHealthReportRetrySendInterval(Duration healthReportRetrySendInterval)
  uid: system.fabric.FabricClientSettings.setHealthReportRetrySendInterval(Duration)
- fullName: system.fabric.FabricClientSettings.setHealthReportSendInterval(Duration healthReportSendInterval)
  name: setHealthReportSendInterval(Duration healthReportSendInterval)
  nameWithType: FabricClientSettings.setHealthReportSendInterval(Duration healthReportSendInterval)
  parameters:
  - description: <p>The interval at which health reports are sent to Health Manager. </p>
    name: healthReportSendInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the interval at which health reports are sent to Health Manager.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 30 seconds. </p>
  syntax: public void setHealthReportSendInterval(Duration healthReportSendInterval)
  uid: system.fabric.FabricClientSettings.setHealthReportSendInterval(Duration)
- fullName: system.fabric.FabricClientSettings.setKeepAliveInterval(Duration keepAliveInterval)
  name: setKeepAliveInterval(Duration keepAliveInterval)
  nameWithType: FabricClientSettings.setKeepAliveInterval(Duration keepAliveInterval)
  parameters:
  - description: <p>The interval at which the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> will ping the connected endpoint. </p>
    name: keepAliveInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the interval at which the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> will ping the connected endpoint.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 0 seconds. This property can't be updated after the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> is opened. Setting this property will throw a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> exception. <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> will continue pinging as long as it has pending operations. </p>
  syntax: public void setKeepAliveInterval(Duration keepAliveInterval)
  uid: system.fabric.FabricClientSettings.setKeepAliveInterval(Duration)
- fullName: system.fabric.FabricClientSettings.setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  name: setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  nameWithType: FabricClientSettings.setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  parameters:
  - description: <p>The timeout for updating the local cache in response to service notifications. </p>
    name: notificationCacheUpdateTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the timeout for updating the local cache in response to service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax: public void setNotificationCacheUpdateTimeout(Duration notificationCacheUpdateTimeout)
  uid: system.fabric.FabricClientSettings.setNotificationCacheUpdateTimeout(Duration)
- fullName: system.fabric.FabricClientSettings.setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  name: setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  nameWithType: FabricClientSettings.setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  parameters:
  - description: <p>The timeout for running a re-connection protocol if the client has registered for service notifications. </p>
    name: notificationGatewayConnectionTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the timeout for running a re-connection protocol if the client has registered for service notifications. The default value is 30 seconds.</p>

    <p></p>
  syntax: public void setNotificationGatewayConnectionTimeout(Duration notificationGatewayConnectionTimeout)
  uid: system.fabric.FabricClientSettings.setNotificationGatewayConnectionTimeout(Duration)
- fullName: system.fabric.FabricClientSettings.setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  name: setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  nameWithType: FabricClientSettings.setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  parameters:
  - description: <p>The bucket count used by the client’s service resolution cache. </p>
    name: partitionLocationCacheBucketCount
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the bucket count used by the client’s service resolution cache.</p>

    <p>

      <b>Remarks:</b>The default value is 1024. </p>
  syntax: public void setPartitionLocationCacheBucketCount(long partitionLocationCacheBucketCount)
  uid: system.fabric.FabricClientSettings.setPartitionLocationCacheBucketCount(long)
- fullName: system.fabric.FabricClientSettings.setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  name: setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  nameWithType: FabricClientSettings.setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  parameters:
  - description: <p>The maximum number of cached location entries on the client. </p>
    name: partitionLocationCacheLimit
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the maximum number of cached location entries on the client.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 1000. This property is not updatable. Setting this property will throw a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> exception. When the cache limit is reached the oldest entries are discarded first. The default value is 100. </p>
  syntax: public void setPartitionLocationCacheLimit(long partitionLocationCacheLimit)
  uid: system.fabric.FabricClientSettings.setPartitionLocationCacheLimit(long)
- fullName: system.fabric.FabricClientSettings.setServiceChangePollInterval(Duration serviceChangePollInterval)
  name: setServiceChangePollInterval(Duration serviceChangePollInterval)
  nameWithType: FabricClientSettings.setServiceChangePollInterval(Duration serviceChangePollInterval)
  parameters:
  - description: <p>The timeout on service change notification requests from the client to the gateway for all registered callbacks. </p>
    name: serviceChangePollInterval
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the timeout on service change notification requests from the client to the gateway for all registered callbacks.</p>

    <p>

      <b>Remarks:</b>The default value of this property is 120 seconds. </p>
  syntax: public void setServiceChangePollInterval(Duration serviceChangePollInterval)
  uid: system.fabric.FabricClientSettings.setServiceChangePollInterval(Duration)
nameWithType: FabricClientSettings
syntax: public class FabricClientSettings
type: class
uid: system.fabric.FabricClientSettings
fullName: system.fabric.FabricClientSettings
name: FabricClientSettings
package: system.fabric
summary: <p>Represents the configuration settings for the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class. </p>
metadata: {}
