### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.createOdataFilterForTags(String tagName, String tagValue)
  name: createOdataFilterForTags(String tagName, String tagValue)
  nameWithType: Utils.createOdataFilterForTags(String tagName, String tagValue)
  parameters:
  - description: <p>the name of the tag. If not provided, all resources will be returned. </p>
    name: tagName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the value of the tag. If not provided, only tag name will be filtered. </p>
    name: tagValue
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Odata filter to pass into list methods </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an Odata filter string that can be used for filtering list results by tags.</p>

    <p></p>
  syntax: public static String createOdataFilterForTags(String tagName, String tagValue)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.createOdataFilterForTags(String,String)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.downloadFileAsync(String url, Retrofit retrofit)
  name: downloadFileAsync(String url, Retrofit retrofit)
  nameWithType: Utils.downloadFileAsync(String url, Retrofit retrofit)
  parameters:
  - description: <p>the URL pointing to the file </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the retrofit client </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an Observable pointing to the content of the file </p>
    type: <xref href="Observable%3Cbyte%5B%5D%3E?alt=Observable%3Cbyte%5B%5D%3E&text=Observable%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Download a file asynchronously. </p>
  syntax: public static Observable<byte[]> downloadFileAsync(String url, Retrofit retrofit)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.downloadFileAsync(String,Retrofit)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.rootResource(Observable<Indexable> stream)
  name: rootResource(Observable<Indexable> stream)
  nameWithType: Utils.rootResource(Observable<Indexable> stream)
  parameters:
  - description: <p>the input observable of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Indexable"></xref></p>
    name: stream
    type: Observable&lt;<xref href="com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>an observable that emits last item </p>
    type: static&lt;U extends <xref href="com.microsoft.azure.management.resources.fluentcore.model.Indexable?alt=com.microsoft.azure.management.resources.fluentcore.model.Indexable&text=Indexable" data-throw-if-not-resolved="False"/>&gt; Observable&lt;U&gt;
  summary: >-
    <p>Gets an observable of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="U"></xref> that emits only the root resource from a given observable of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Indexable"></xref>.</p>

    <p></p>
  syntax: public static static<U extends Indexable> Observable<U> rootResource(Observable<Indexable> stream)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.rootResource(Observable<Indexable>)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  name: toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  nameWithType: Utils.toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  parameters:
  - description: <p>the list to convert to paged list </p>
    name: list
    type: <xref href="List%3CInT%3E?alt=List%3CInT%3E&text=List%3CInT%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the mapper to map type in input list to output list </p>
    name: mapper
    type: <xref href="final+Func1%3CInT%2C+OutT%3E?alt=final+Func1%3CInT%2C+OutT%3E&text=final+Func1%3CInT%2C+OutT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the paged list </p>
    type: <xref href="static%3COutT%2C+InT%3E+PagedList%3COutT%3E?alt=static%3COutT%2C+InT%3E+PagedList%3COutT%3E&text=static%3COutT%2C+InT%3E+PagedList%3COutT%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts the given list of a type to paged list of a different type.</p>

    <p></p>
  syntax: public static static<OutT, InT> PagedList<OutT> toPagedList(List<InT> list, final Func1<InT, OutT> mapper)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPagedList(List<InT>,final Func1<InT, OutT>)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveBoolean(Boolean value)
  name: toPrimitiveBoolean(Boolean value)
  nameWithType: Utils.toPrimitiveBoolean(Boolean value)
  parameters:
  - description: <p>the <code>Boolean</code> value </p>
    name: value
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>false</code> if the given Boolean value is null or false else <code>true</code></p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts an object Boolean to a primitive boolean.</p>

    <p></p>
  syntax: public static boolean toPrimitiveBoolean(Boolean value)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveBoolean(Boolean)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveInt(Integer value)
  name: toPrimitiveInt(Integer value)
  nameWithType: Utils.toPrimitiveInt(Integer value)
  parameters:
  - description: <p>the <code>Integer</code> value </p>
    name: value
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>0</code> if the given Integer value is null else <code>integer value</code></p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts an object Integer to a primitive int.</p>

    <p></p>
  syntax: public static int toPrimitiveInt(Integer value)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveInt(Integer)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveInt(Long value)
  name: toPrimitiveInt(Long value)
  nameWithType: Utils.toPrimitiveInt(Long value)
  parameters:
  - description: <p>the <code>Long</code> value </p>
    name: value
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>0</code> if the given Long value is null else <code>integer value</code></p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts an object Long to a primitive int.</p>

    <p></p>
  syntax: public static int toPrimitiveInt(Long value)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveInt(Long)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveLong(Long value)
  name: toPrimitiveLong(Long value)
  nameWithType: Utils.toPrimitiveLong(Long value)
  parameters:
  - description: <p>the <code>Long</code> value </p>
    name: value
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>0</code> if the given Long value is null else <code>long value</code></p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts an object Long to a primitive long.</p>

    <p></p>
  syntax: public static long toPrimitiveLong(Long value)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils.toPrimitiveLong(Long)
nameWithType: Utils
syntax: public class Utils
type: class
uid: com.microsoft.azure.management.resources.fluentcore.utils.Utils
fullName: com.microsoft.azure.management.resources.fluentcore.utils.Utils
name: Utils
package: com.microsoft.azure.management.resources.fluentcore.utils
summary: <p>Defines a few utilities. </p>
metadata: {}
