### YamlMime:JavaType
methods:
- fullName: system.fabric.Operation.acknowledge()
  name: acknowledge()
  nameWithType: Operation.acknowledge()
  summary: >-
    <p>Acknowledges that this operation has been successfully applied at the Secondary replica. </p>

    <p>

      <b>Remarks:</b>Services should call this method when they have obtained an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref> from the replicator and successfully applied it to their local store. For persisted services, calling this method is mandatory because the <xref uid="system.fabric.FabricReplicator" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricReplicator"></xref> does not release additional objects that implement <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref>. For volatile services, the replicator implicitly acknowledges operations when they are received unless they are configured otherwise by setting the value <xref uid="system.fabric.ReplicatorSettings.isRequireServiceAck()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings#isRequireServiceAck()"></xref> to true. An operation must be acknowledged by a quorum of replicas before the Primary replica receives the <xref uid="system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)"></xref> operation complete responses. </p>
  syntax: public void acknowledge()
  uid: system.fabric.Operation.acknowledge()
- fullName: system.fabric.Operation.getAtomicGroupId()
  name: getAtomicGroupId()
  nameWithType: Operation.getAtomicGroupId()
  returns:
    description: <p>Returns long. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Identifies the atomic group, if this object that implements <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref> is a part of an atomic group. Atomic groups are only available when a service is a part of service group.</p>

    <p></p>
  syntax: public long getAtomicGroupId()
  uid: system.fabric.Operation.getAtomicGroupId()
- fullName: system.fabric.Operation.getData()
  name: getData()
  nameWithType: Operation.getData()
  returns:
    description: <p>Returns <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref>. </p>
    type: <xref href="system.fabric.OperationData?alt=system.fabric.OperationData&text=OperationData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref> that are provided by the Primary replica.</p>

    <p></p>
  syntax: public OperationData getData()
  uid: system.fabric.Operation.getData()
- fullName: system.fabric.Operation.getOperationType()
  name: getOperationType()
  nameWithType: Operation.getOperationType()
  returns:
    description: <p>Returns <xref uid="system.fabric.OperationType" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationType"></xref>. </p>
    type: <xref href="system.fabric.OperationType?alt=system.fabric.OperationType&text=OperationType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the type of this operation.</p>

    <p>

      <b>Remarks:</b>The <xref uid="system.fabric.OperationType" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationType"></xref> indicates the type of operation. "Normal" operations are those operations that are sent by non-service grouped services as part of either the copy or replication streams. Other types of operations represent control operations that are specific to service groups. </p>
  syntax: public OperationType getOperationType()
  uid: system.fabric.Operation.getOperationType()
- fullName: system.fabric.Operation.getSequenceNumber()
  name: getSequenceNumber()
  nameWithType: Operation.getSequenceNumber()
  returns:
    description: <p>Returns long. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the sequence number of this operation.</p>

    <p>

      <b>Remarks:</b>The sequence number is provided as a part of the <xref uid="system.fabric.Operation.getSequenceNumber()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation#getSequenceNumber()"></xref> For operations received from the replication stream (<xref uid="system.fabric.StateReplicator.getReplicationStream()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator#getReplicationStream()"></xref>) the sequence number is the same that the Primary replica that are receives from <xref uid="system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)"></xref> method. </p>
  syntax: public long getSequenceNumber()
  uid: system.fabric.Operation.getSequenceNumber()
nameWithType: Operation
syntax: public interface Operation
type: interface
uid: system.fabric.Operation
fullName: system.fabric.Operation
name: Operation
package: system.fabric
summary: >-
  <p>

    <b>Remarks:</b>

    <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Operation"></xref> is the base interface that describes state changes that are delivered to a Secondary replica. They contain the <xref uid="system.fabric.StateReplicator.replicateAsync(OperationData,SequenceNumber,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateReplicator#replicateAsync(OperationData, SequenceNumber, system.fabric.CancellationToken)"></xref> and the sequence number and other identifying information. </p>
metadata: {}
