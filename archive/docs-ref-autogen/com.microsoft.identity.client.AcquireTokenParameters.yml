### YamlMime:JavaType
constructors:
- fullName: com.microsoft.identity.client.AcquireTokenParameters.AcquireTokenParameters(AcquireTokenParameters.Builder builder)
  name: AcquireTokenParameters(AcquireTokenParameters.Builder builder)
  nameWithType: AcquireTokenParameters.AcquireTokenParameters(AcquireTokenParameters.Builder builder)
  parameters:
  - name: builder
    type: <xref href="AcquireTokenParameters.Builder?alt=AcquireTokenParameters.Builder&text=AcquireTokenParameters.Builder" data-throw-if-not-resolved="False"/>
  syntax: public AcquireTokenParameters(AcquireTokenParameters.Builder builder)
  uid: com.microsoft.identity.client.AcquireTokenParameters.AcquireTokenParameters(AcquireTokenParameters.Builder)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.TokenParameters?alt=com.microsoft.identity.client.TokenParameters&text=TokenParameters" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.identity.client.TokenParameters.getAccount()
- com.microsoft.identity.client.TokenParameters.getAccountRecord()
- com.microsoft.identity.client.TokenParameters.getAuthenticationScheme()
- com.microsoft.identity.client.TokenParameters.getAuthority()
- com.microsoft.identity.client.TokenParameters.getClaimsRequest()
- com.microsoft.identity.client.TokenParameters.getCorrelationId()
- com.microsoft.identity.client.TokenParameters.getScopes()
- com.microsoft.identity.client.TokenParameters.TokenParameters(@NonNull final TokenParameters.Builder)
methods:
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getActivity()
  name: getActivity()
  nameWithType: AcquireTokenParameters.getActivity()
  returns:
    type: <xref href="Activity?alt=Activity&text=Activity" data-throw-if-not-resolved="False"/>
  summary: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that will be used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref></p>
  syntax: public Activity getActivity()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getActivity()
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getCallback()
  name: getCallback()
  nameWithType: AcquireTokenParameters.getCallback()
  returns:
    type: <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onCancel()"></xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(com.microsoft.identity.client.exception.MsalException)"></xref>.</p>

    <p></p>
  syntax: public AuthenticationCallback getCallback()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getCallback()
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getExtraQueryStringParameters()
  name: getExtraQueryStringParameters()
  nameWithType: AcquireTokenParameters.getExtraQueryStringParameters()
  returns:
    type: <xref href="List%3CPair%3CString%2C+String%3E%3E?alt=List%3CPair%3CString%2C+String%3E%3E&text=List%3CPair%3CString%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>If you've been instructed to pass additional query string parameters to the authorization endpoint. You can get these here. Otherwise... would recommend not touching.</p>

    <p></p>
  syntax: public List<Pair<String, String>> getExtraQueryStringParameters()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getExtraQueryStringParameters()
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getExtraScopesToConsent()
  name: getExtraScopesToConsent()
  nameWithType: AcquireTokenParameters.getExtraScopesToConsent()
  returns:
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>These are additional scopes that you would like the user to authorize the use of, while getting consent for the first set of scopes</p>

    <p></p>
  syntax: public List<String> getExtraScopesToConsent()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getExtraScopesToConsent()
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getFragment()
  name: getFragment()
  nameWithType: AcquireTokenParameters.getFragment()
  returns:
    type: <xref href="Fragment?alt=Fragment&text=Fragment" data-throw-if-not-resolved="False"/>
  summary: <p>Optional <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Fragment"></xref> that will be replaced by <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationFragment"></xref></p>
  syntax: public Fragment getFragment()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getFragment()
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getLoginHint()
  name: getLoginHint()
  nameWithType: AcquireTokenParameters.getLoginHint()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Optional. Gets the login hint sent along with the authorization request.</p>

    <p></p>
  syntax: public String getLoginHint()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getLoginHint()
- fullName: com.microsoft.identity.client.AcquireTokenParameters.getPrompt()
  name: getPrompt()
  nameWithType: AcquireTokenParameters.getPrompt()
  returns:
    type: <xref href="com.microsoft.identity.client.Prompt?alt=com.microsoft.identity.client.Prompt&text=Prompt" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Controls the value of the prompt parameter sent along with the authorization request.</p>

    <p></p>
  syntax: public Prompt getPrompt()
  uid: com.microsoft.identity.client.AcquireTokenParameters.getPrompt()
nameWithType: AcquireTokenParameters
syntax: public class AcquireTokenParameters extends TokenParameters
type: class
uid: com.microsoft.identity.client.AcquireTokenParameters
fullName: com.microsoft.identity.client.AcquireTokenParameters
name: AcquireTokenParameters
package: com.microsoft.identity.client
summary: <p>Encapsulates the parameters passed to the acquireToken methods of PublicClientApplication </p>
metadata: {}
