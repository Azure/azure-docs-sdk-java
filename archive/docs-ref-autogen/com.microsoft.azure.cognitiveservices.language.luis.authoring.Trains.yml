### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.getStatus(UUID appId, String versionId)
  name: getStatus(UUID appId, String versionId)
  nameWithType: Trains.getStatus(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ModelTrainingInfo&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelTrainingInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelTrainingInfo&text=ModelTrainingInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. "appID" specifies the LUIS app ID. "versionId" specifies the version number of the LUIS app. For example, "0.1".</p>

    <p></p>
  syntax: public List<ModelTrainingInfo> getStatus(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.getStatus(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.getStatusAsync(UUID appId, String versionId)
  name: getStatusAsync(UUID appId, String versionId)
  nameWithType: Trains.getStatusAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ModelTrainingInfo&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelTrainingInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelTrainingInfo&text=ModelTrainingInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the training status of all models (intents and entities) for the specified LUIS app. You must call the train API to train the LUIS app before you call this API to get training status. "appID" specifies the LUIS app ID. "versionId" specifies the version number of the LUIS app. For example, "0.1".</p>

    <p></p>
  syntax: public Observable<List<ModelTrainingInfo>> getStatusAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.getStatusAsync(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.trainVersion(UUID appId, String versionId)
  name: trainVersion(UUID appId, String versionId)
  nameWithType: Trains.trainVersion(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the EnqueueTrainingResponse object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EnqueueTrainingResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EnqueueTrainingResponse&text=EnqueueTrainingResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.</p>

    <p></p>
  syntax: public EnqueueTrainingResponse trainVersion(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.trainVersion(UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.trainVersionAsync(UUID appId, String versionId)
  name: trainVersionAsync(UUID appId, String versionId)
  nameWithType: Trains.trainVersionAsync(UUID appId, String versionId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the EnqueueTrainingResponse object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EnqueueTrainingResponse?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EnqueueTrainingResponse&text=EnqueueTrainingResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Sends a training request for a version of a specified LUIS app. This POST request initiates a request asynchronously. To determine whether the training request is successful, submit a GET request to get training status. Note: The application version is not fully trained unless all the models (intents and entities) are trained successfully or are up to date. To verify training success, get the training status at least once after training is complete.</p>

    <p></p>
  syntax: public Observable<EnqueueTrainingResponse> trainVersionAsync(UUID appId, String versionId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains.trainVersionAsync(UUID,String)
nameWithType: Trains
syntax: public interface Trains
type: interface
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Trains
name: Trains
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
summary: <p>An instance of this class provides access to all the operations defined in Trains. </p>
metadata: {}
