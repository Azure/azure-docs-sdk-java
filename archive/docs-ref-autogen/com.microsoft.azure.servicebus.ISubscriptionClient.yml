### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandon(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.abandonAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.ICloseable.close()
- com.microsoft.azure.servicebus.ICloseable.closeAsync()
- com.microsoft.azure.servicebus.IMessageAndSessionPump.complete(UUID)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.complete(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.completeAsync(UUID)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.completeAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,TransactionContext)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,Map<String, Object>)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
- com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
- com.microsoft.azure.servicebus.IMessageAndSessionPump.getPrefetchCount()
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,ExecutorService)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,ExecutorService)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
- com.microsoft.azure.servicebus.IMessageAndSessionPump.setPrefetchCount(int)
methods:
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.addRule(RuleDescription ruleDescription)
  name: addRule(RuleDescription ruleDescription)
  nameWithType: ISubscriptionClient.addRule(RuleDescription ruleDescription)
  parameters:
  - description: <p>The rule description that provides the rule to add. </p>
    name: ruleDescription
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if add rule failed </p>
  summary: >-
    <p>Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public void addRule(RuleDescription ruleDescription)
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.addRule(RuleDescription)
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.addRule(String ruleName, Filter filter)
  name: addRule(String ruleName, Filter filter)
  nameWithType: ISubscriptionClient.addRule(String ruleName, Filter filter)
  parameters:
  - description: <p>The rule name </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to add. </p>
    name: filter
    type: <xref href="com.microsoft.azure.servicebus.rules.Filter?alt=com.microsoft.azure.servicebus.rules.Filter&text=Filter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if add rule failed </p>
  summary: >-
    <p>Adds a rule with specified name and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public void addRule(String ruleName, Filter filter)
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.addRule(String,Filter)
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.addRuleAsync(RuleDescription ruleDescription)
  name: addRuleAsync(RuleDescription ruleDescription)
  nameWithType: ISubscriptionClient.addRuleAsync(RuleDescription ruleDescription)
  parameters:
  - description: <p>The rule description that provides the rule to add. </p>
    name: ruleDescription
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending rule add operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously adds a rule to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public CompletableFuture<Void> addRuleAsync(RuleDescription ruleDescription)
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.addRuleAsync(RuleDescription)
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.addRuleAsync(String ruleName, Filter filter)
  name: addRuleAsync(String ruleName, Filter filter)
  nameWithType: ISubscriptionClient.addRuleAsync(String ruleName, Filter filter)
  parameters:
  - description: <p>The rule name </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to add. </p>
    name: filter
    type: <xref href="com.microsoft.azure.servicebus.rules.Filter?alt=com.microsoft.azure.servicebus.rules.Filter&text=Filter" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending rule add operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously adds a rule with specified name and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public CompletableFuture<Void> addRuleAsync(String ruleName, Filter filter)
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.addRuleAsync(String,Filter)
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.getReceiveMode()
  name: getReceiveMode()
  nameWithType: ISubscriptionClient.getReceiveMode()
  returns:
    description: <p>The receive mode. </p>
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> of the current receiver</p>

    <p></p>
  syntax: public ReceiveMode getReceiveMode()
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.getReceiveMode()
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.getRules()
  name: getRules()
  nameWithType: ISubscriptionClient.getRules()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if get rules failed </p>
  returns:
    description: <p>The collection fo the rules. </p>
    type: Collection&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all rules associated with the subscription.</p>

    <p></p>
  syntax: public Collection<RuleDescription> getRules()
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.getRules()
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.getRulesAsync()
  name: getRulesAsync()
  nameWithType: ISubscriptionClient.getRulesAsync()
  returns:
    description: <p>a CompletableFuture representing the pending get rules operation. </p>
    type: CompletableFuture&lt;Collection&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all rules associated with the subscription.</p>

    <p></p>
  syntax: public CompletableFuture<Collection<RuleDescription>> getRulesAsync()
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.getRulesAsync()
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.getSubscriptionName()
  name: getSubscriptionName()
  nameWithType: ISubscriptionClient.getSubscriptionName()
  returns:
    description: <p>The subscription name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the subscription name. </p>
  syntax: public String getSubscriptionName()
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.getSubscriptionName()
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.getTopicName()
  name: getTopicName()
  nameWithType: ISubscriptionClient.getTopicName()
  returns:
    description: <p>the name of the topic </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the topic, for this subscription.</p>

    <p></p>
  syntax: public String getTopicName()
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.getTopicName()
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.removeRule(String ruleName)
  name: removeRule(String ruleName)
  nameWithType: ISubscriptionClient.removeRule(String ruleName)
  parameters:
  - description: <p>The name of rule. </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if remove rule failed </p>
  summary: >-
    <p>Removes the rule on the subscription identified by ruleName</p>

    <p></p>
  syntax: public void removeRule(String ruleName)
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.removeRule(String)
- fullName: com.microsoft.azure.servicebus.ISubscriptionClient.removeRuleAsync(String ruleName)
  name: removeRuleAsync(String ruleName)
  nameWithType: ISubscriptionClient.removeRuleAsync(String ruleName)
  parameters:
  - description: <p>he name of rule. </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending rule remove operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously removes the rule on the subscription identified by ruleName</p>

    <p></p>
  syntax: public CompletableFuture<Void> removeRuleAsync(String ruleName)
  uid: com.microsoft.azure.servicebus.ISubscriptionClient.removeRuleAsync(String)
nameWithType: ISubscriptionClient
syntax: public interface ISubscriptionClient extends IMessageEntityClient
type: interface
uid: com.microsoft.azure.servicebus.ISubscriptionClient
fullName: com.microsoft.azure.servicebus.ISubscriptionClient
name: ISubscriptionClient
package: com.microsoft.azure.servicebus
summary: <p>SubscriptionClient can be used for all basic interactions with a Service Bus Subscription. </p>
metadata: {}
