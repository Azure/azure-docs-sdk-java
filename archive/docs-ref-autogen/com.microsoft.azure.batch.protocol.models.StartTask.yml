### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
  name: commandLine()
  nameWithType: StartTask.commandLine()
  returns:
    description: <p>the commandLine value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public String commandLine()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.commandLine()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
  name: containerSettings()
  nameWithType: StartTask.containerSettings()
  returns:
    description: <p>the containerSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskContainerSettings containerSettings()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.containerSettings()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
  name: environmentSettings()
  nameWithType: StartTask.environmentSettings()
  returns:
    description: <p>the environmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the environmentSettings value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> environmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.environmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
  name: maxTaskRetryCount()
  nameWithType: StartTask.maxTaskRetryCount()
  returns:
    description: <p>the maxTaskRetryCount value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p>

    <p></p>
  syntax: public Integer maxTaskRetryCount()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.maxTaskRetryCount()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
  name: resourceFiles()
  nameWithType: StartTask.resourceFiles()
  returns:
    description: <p>the resourceFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get files listed under this element are located in the task's working directory.</p>

    <p></p>
  syntax: public List<ResourceFile> resourceFiles()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.resourceFiles()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
  name: userIdentity()
  nameWithType: StartTask.userIdentity()
  returns:
    description: <p>the userIdentity value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public UserIdentity userIdentity()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.userIdentity()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
  name: waitForSuccess()
  nameWithType: StartTask.waitForSuccess()
  returns:
    description: <p>the waitForSuccess value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.</p>

    <p></p>
  syntax: public Boolean waitForSuccess()
  uid: com.microsoft.azure.batch.protocol.models.StartTask.waitForSuccess()
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(String commandLine)
  name: withCommandLine(String commandLine)
  nameWithType: StartTask.withCommandLine(String commandLine)
  parameters:
  - description: <p>the commandLine value to set </p>
    name: commandLine
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public StartTask withCommandLine(String commandLine)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withCommandLine(String)
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(TaskContainerSettings containerSettings)
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: StartTask.withContainerSettings(TaskContainerSettings containerSettings)
  parameters:
  - description: <p>the containerSettings value to set </p>
    name: containerSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public StartTask withContainerSettings(TaskContainerSettings containerSettings)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withContainerSettings(TaskContainerSettings)
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: StartTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  parameters:
  - description: <p>the environmentSettings value to set </p>
    name: environmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the environmentSettings value.</p>

    <p></p>
  syntax: public StartTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)
  name: withMaxTaskRetryCount(Integer maxTaskRetryCount)
  nameWithType: StartTask.withMaxTaskRetryCount(Integer maxTaskRetryCount)
  parameters:
  - description: <p>the maxTaskRetryCount value to set </p>
    name: maxTaskRetryCount
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit.</p>

    <p></p>
  syntax: public StartTask withMaxTaskRetryCount(Integer maxTaskRetryCount)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withMaxTaskRetryCount(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(List<ResourceFile> resourceFiles)
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: StartTask.withResourceFiles(List<ResourceFile> resourceFiles)
  parameters:
  - description: <p>the resourceFiles value to set </p>
    name: resourceFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set files listed under this element are located in the task's working directory.</p>

    <p></p>
  syntax: public StartTask withResourceFiles(List<ResourceFile> resourceFiles)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withResourceFiles(List<ResourceFile>)
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(UserIdentity userIdentity)
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: StartTask.withUserIdentity(UserIdentity userIdentity)
  parameters:
  - description: <p>the userIdentity value to set </p>
    name: userIdentity
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if omitted, the task runs as a non-administrative user unique to the task.</p>

    <p></p>
  syntax: public StartTask withUserIdentity(UserIdentity userIdentity)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withUserIdentity(UserIdentity)
- fullName: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(Boolean waitForSuccess)
  name: withWaitForSuccess(Boolean waitForSuccess)
  nameWithType: StartTask.withWaitForSuccess(Boolean waitForSuccess)
  parameters:
  - description: <p>the waitForSuccess value to set </p>
    name: waitForSuccess
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTask?alt=com.microsoft.azure.batch.protocol.models.StartTask&text=StartTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and failure info details. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is false.</p>

    <p></p>
  syntax: public StartTask withWaitForSuccess(Boolean waitForSuccess)
  uid: com.microsoft.azure.batch.protocol.models.StartTask.withWaitForSuccess(Boolean)
nameWithType: StartTask
syntax: public class StartTask
type: class
uid: com.microsoft.azure.batch.protocol.models.StartTask
fullName: com.microsoft.azure.batch.protocol.models.StartTask
name: StartTask
package: com.microsoft.azure.batch.protocol.models
summary: <p>A task which is run when a compute node joins a pool in the Azure Batch service, or when the compute node is rebooted or reimaged. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>
metadata: {}
