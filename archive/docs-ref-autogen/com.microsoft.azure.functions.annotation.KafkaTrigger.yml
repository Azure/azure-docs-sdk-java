### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.authenticationMode()
  name: authenticationMode()
  nameWithType: KafkaTrigger.authenticationMode()
  returns:
    description: <p>The broker authentication mode. </p>
    type: <xref href="com.microsoft.azure.functions.BrokerAuthenticationMode?alt=com.microsoft.azure.functions.BrokerAuthenticationMode&text=BrokerAuthenticationMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>SASL mechanism to use for authentication. Allowed values: Gssapi, Plain, ScramSha256, ScramSha512 Default: PLAIN</p>

    <p></p>
  syntax: public BrokerAuthenticationMode authenticationMode() default BrokerAuthenticationMode.NOTSET
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.authenticationMode()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.brokerList()
  name: brokerList()
  nameWithType: KafkaTrigger.brokerList()
  returns:
    description: <p>The brokerList. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the BrokerList.</p>

    <p></p>
  syntax: public String brokerList()
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.brokerList()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.cardinality()
  name: cardinality()
  nameWithType: KafkaTrigger.cardinality()
  returns:
    description: <p>The cardinality. </p>
    type: <xref href="com.microsoft.azure.functions.annotation.Cardinality?alt=com.microsoft.azure.functions.annotation.Cardinality&text=Cardinality" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Cardinality of the trigger input. Choose 'One' if the input is a single message or 'Many' if the input is an array of messages. If you choose 'Many', please set a dataType. Default: 'One'</p>

    <p></p>
  syntax: public Cardinality cardinality() default Cardinality.ONE
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.cardinality()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.consumerGroup()
  name: consumerGroup()
  nameWithType: KafkaTrigger.consumerGroup()
  returns:
    description: <p>The consumer group. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the consumer group.</p>

    <p></p>
  syntax: public String consumerGroup()
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.consumerGroup()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.dataType()
  name: dataType()
  nameWithType: KafkaTrigger.dataType()
  returns:
    description: <p>The dataType which will be used by the Functions runtime. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how Functions runtime should treat the parameter value. Possible values are:</p>

    <p>

      <ul>

        <li>

          <p>"": get the value as a string, and try to deserialize to actual parameter type like POJO </p>

        </li>

        <li>

          <p>string: always get the value as a string </p>

        </li>

        <li>

          <p>binary: get the value as a binary data, and try to deserialize to actual parameter type byte[] </p>

        </li>

      </ul>

    </p>
  syntax: public String dataType() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.dataType()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.eventHubConnectionString()
  name: eventHubConnectionString()
  nameWithType: KafkaTrigger.eventHubConnectionString()
  returns:
    description: <p>The EventHub connection string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the EventHub connection string when using KafkaOutput protocol header feature of Azure EventHubs.</p>

    <p></p>
  syntax: public String eventHubConnectionString() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.eventHubConnectionString()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.name()
  name: name()
  nameWithType: KafkaTrigger.name()
  returns:
    description: <p>The variable name used in function code for the request or request body. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The variable name used in function code for the request or request body.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.name()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.password()
  name: password()
  nameWithType: KafkaTrigger.password()
  returns:
    description: <p>The SASL password. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>SASL password with the PLAIN and SASL-SCRAM-.. mechanisms Default: ""</p>

    <p>security.protocol in librdkafka</p>

    <p></p>
  syntax: public String password() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.password()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.protocol()
  name: protocol()
  nameWithType: KafkaTrigger.protocol()
  returns:
    description: <p>The security protocol. </p>
    type: <xref href="com.microsoft.azure.functions.BrokerProtocol?alt=com.microsoft.azure.functions.BrokerProtocol&text=BrokerProtocol" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the security protocol used to communicate with brokers default is PLAINTEXT</p>

    <p></p>
  syntax: public BrokerProtocol protocol() default BrokerProtocol.NOTSET
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.protocol()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.sslCaLocation()
  name: sslCaLocation()
  nameWithType: KafkaTrigger.sslCaLocation()
  returns:
    description: <p>The path to CA certificate file. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Path to CA certificate file for verifying the broker's certificate. ssl.ca.location in librdkafka</p>

    <p></p>
  syntax: public String sslCaLocation() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.sslCaLocation()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.sslCertificateLocation()
  name: sslCertificateLocation()
  nameWithType: KafkaTrigger.sslCertificateLocation()
  returns:
    description: <p>The ssl certificate location. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Path to client's certificate. ssl.certificate.location in librdkafka</p>

    <p></p>
  syntax: public String sslCertificateLocation() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.sslCertificateLocation()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.sslKeyLocation()
  name: sslKeyLocation()
  nameWithType: KafkaTrigger.sslKeyLocation()
  returns:
    description: <p>The ssl key location. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Path to client's private key (PEM) used for authentication. Default "" ssl.key.location in librdkafka</p>

    <p></p>
  syntax: public String sslKeyLocation() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.sslKeyLocation()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.sslKeyPassword()
  name: sslKeyPassword()
  nameWithType: KafkaTrigger.sslKeyPassword()
  returns:
    description: <p>The ssl key password. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Password for client's certificate. ssl.key.password in librdkafka</p>

    <p></p>
  syntax: public String sslKeyPassword() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.sslKeyPassword()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.topic()
  name: topic()
  nameWithType: KafkaTrigger.topic()
  returns:
    description: <p>The topic. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the Topic.</p>

    <p></p>
  syntax: public String topic()
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.topic()
- fullName: com.microsoft.azure.functions.annotation.KafkaTrigger.username()
  name: username()
  nameWithType: KafkaTrigger.username()
  returns:
    description: <p>The SASL username. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>SASL username with the PLAIN and SASL-SCRAM-.. mechanisms Default: ""</p>

    <p></p>
  syntax: public String username() default ""
  uid: com.microsoft.azure.functions.annotation.KafkaTrigger.username()
nameWithType: KafkaTrigger
syntax: public interface KafkaTrigger
type: interface
uid: com.microsoft.azure.functions.annotation.KafkaTrigger
fullName: com.microsoft.azure.functions.annotation.KafkaTrigger
name: KafkaTrigger
package: com.microsoft.azure.functions.annotation
summary: >-
  <p>KafkaTrigger(name = "kafkaTrigger", topic = "users", brokerList="broker:29092", consumerGroup="functions") List&lt;Map&lt;String, String&gt;&gt; kafkaEventData, final ExecutionContext context ) { context.getLogger().info(kafkaEventData); } </p>

  <p></p>
metadata: {}
