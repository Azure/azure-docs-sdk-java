### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImage()
  name: classifyImage()
  nameWithType: Predictions.classifyImage()
  returns:
    description: <p>the first stage of the classifyImage call </p>
    type: <xref href="PredictionsClassifyImageDefinitionStages.WithProjectId?alt=PredictionsClassifyImageDefinitionStages.WithProjectId&text=PredictionsClassifyImageDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image and saves the result.</p>

    <p></p>
  syntax: public PredictionsClassifyImageDefinitionStages.WithProjectId classifyImage()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImage(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  name: classifyImage(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  nameWithType: Predictions.classifyImage(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageOptionalParameter&text=ClassifyImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image and saves the result.</p>

    <p></p>
  syntax: public ImagePrediction classifyImage(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImage(UUID,String,byte [],ClassifyImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  name: classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  nameWithType: Predictions.classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageOptionalParameter&text=ClassifyImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Classify an image and saves the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> classifyImageAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageOptionalParameter classifyImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageAsync(UUID,String,byte [],ClassifyImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrl()
  name: classifyImageUrl()
  nameWithType: Predictions.classifyImageUrl()
  returns:
    description: <p>the first stage of the classifyImageUrl call </p>
    type: <xref href="PredictionsClassifyImageUrlDefinitionStages.WithProjectId?alt=PredictionsClassifyImageUrlDefinitionStages.WithProjectId&text=PredictionsClassifyImageUrlDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image url and saves the result.</p>

    <p></p>
  syntax: public PredictionsClassifyImageUrlDefinitionStages.WithProjectId classifyImageUrl()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrl()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrl(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  name: classifyImageUrl(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  nameWithType: Predictions.classifyImageUrl(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlOptionalParameter&text=ClassifyImageUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image url and saves the result.</p>

    <p></p>
  syntax: public ImagePrediction classifyImageUrl(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrl(UUID,String,String,ClassifyImageUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  name: classifyImageUrlAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  nameWithType: Predictions.classifyImageUrlAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlOptionalParameter&text=ClassifyImageUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Classify an image url and saves the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> classifyImageUrlAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlOptionalParameter classifyImageUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlAsync(UUID,String,String,ClassifyImageUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlWithNoStore()
  name: classifyImageUrlWithNoStore()
  nameWithType: Predictions.classifyImageUrlWithNoStore()
  returns:
    description: <p>the first stage of the classifyImageUrlWithNoStore call </p>
    type: <xref href="PredictionsClassifyImageUrlWithNoStoreDefinitionStages.WithProjectId?alt=PredictionsClassifyImageUrlWithNoStoreDefinitionStages.WithProjectId&text=PredictionsClassifyImageUrlWithNoStoreDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image url without saving the result.</p>

    <p></p>
  syntax: public PredictionsClassifyImageUrlWithNoStoreDefinitionStages.WithProjectId classifyImageUrlWithNoStore()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlWithNoStore()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlWithNoStore(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  name: classifyImageUrlWithNoStore(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  nameWithType: Predictions.classifyImageUrlWithNoStore(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageUrlWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlWithNoStoreOptionalParameter&text=ClassifyImageUrlWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image url without saving the result.</p>

    <p></p>
  syntax: public ImagePrediction classifyImageUrlWithNoStore(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlWithNoStore(UUID,String,String,ClassifyImageUrlWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  name: classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  nameWithType: Predictions.classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageUrlWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageUrlWithNoStoreOptionalParameter&text=ClassifyImageUrlWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Classify an image url without saving the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> classifyImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, ClassifyImageUrlWithNoStoreOptionalParameter classifyImageUrlWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageUrlWithNoStoreAsync(UUID,String,String,ClassifyImageUrlWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageWithNoStore()
  name: classifyImageWithNoStore()
  nameWithType: Predictions.classifyImageWithNoStore()
  returns:
    description: <p>the first stage of the classifyImageWithNoStore call </p>
    type: <xref href="PredictionsClassifyImageWithNoStoreDefinitionStages.WithProjectId?alt=PredictionsClassifyImageWithNoStoreDefinitionStages.WithProjectId&text=PredictionsClassifyImageWithNoStoreDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image without saving the result.</p>

    <p></p>
  syntax: public PredictionsClassifyImageWithNoStoreDefinitionStages.WithProjectId classifyImageWithNoStore()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageWithNoStore()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  name: classifyImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  nameWithType: Predictions.classifyImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageWithNoStoreOptionalParameter&text=ClassifyImageWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Classify an image without saving the result.</p>

    <p></p>
  syntax: public ImagePrediction classifyImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageWithNoStore(UUID,String,byte [],ClassifyImageWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  name: classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  nameWithType: Predictions.classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: classifyImageWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ClassifyImageWithNoStoreOptionalParameter&text=ClassifyImageWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Classify an image without saving the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> classifyImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, ClassifyImageWithNoStoreOptionalParameter classifyImageWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.classifyImageWithNoStoreAsync(UUID,String,byte [],ClassifyImageWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImage()
  name: detectImage()
  nameWithType: Predictions.detectImage()
  returns:
    description: <p>the first stage of the detectImage call </p>
    type: <xref href="PredictionsDetectImageDefinitionStages.WithProjectId?alt=PredictionsDetectImageDefinitionStages.WithProjectId&text=PredictionsDetectImageDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image and saves the result.</p>

    <p></p>
  syntax: public PredictionsDetectImageDefinitionStages.WithProjectId detectImage()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImage(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  name: detectImage(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  nameWithType: Predictions.detectImage(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageOptionalParameter&text=DetectImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image and saves the result.</p>

    <p></p>
  syntax: public ImagePrediction detectImage(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImage(UUID,String,byte [],DetectImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  name: detectImageAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  nameWithType: Predictions.detectImageAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 4MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageOptionalParameter&text=DetectImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect objects in an image and saves the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> detectImageAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageOptionalParameter detectImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageAsync(UUID,String,byte [],DetectImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrl()
  name: detectImageUrl()
  nameWithType: Predictions.detectImageUrl()
  returns:
    description: <p>the first stage of the detectImageUrl call </p>
    type: <xref href="PredictionsDetectImageUrlDefinitionStages.WithProjectId?alt=PredictionsDetectImageUrlDefinitionStages.WithProjectId&text=PredictionsDetectImageUrlDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image url and saves the result.</p>

    <p></p>
  syntax: public PredictionsDetectImageUrlDefinitionStages.WithProjectId detectImageUrl()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrl()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrl(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  name: detectImageUrl(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  nameWithType: Predictions.detectImageUrl(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlOptionalParameter&text=DetectImageUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image url and saves the result.</p>

    <p></p>
  syntax: public ImagePrediction detectImageUrl(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrl(UUID,String,String,DetectImageUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlAsync(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  name: detectImageUrlAsync(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  nameWithType: Predictions.detectImageUrlAsync(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlOptionalParameter&text=DetectImageUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect objects in an image url and saves the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> detectImageUrlAsync(UUID projectId, String publishedName, String url, DetectImageUrlOptionalParameter detectImageUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlAsync(UUID,String,String,DetectImageUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlWithNoStore()
  name: detectImageUrlWithNoStore()
  nameWithType: Predictions.detectImageUrlWithNoStore()
  returns:
    description: <p>the first stage of the detectImageUrlWithNoStore call </p>
    type: <xref href="PredictionsDetectImageUrlWithNoStoreDefinitionStages.WithProjectId?alt=PredictionsDetectImageUrlWithNoStoreDefinitionStages.WithProjectId&text=PredictionsDetectImageUrlWithNoStoreDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image url without saving the result.</p>

    <p></p>
  syntax: public PredictionsDetectImageUrlWithNoStoreDefinitionStages.WithProjectId detectImageUrlWithNoStore()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlWithNoStore()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlWithNoStore(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  name: detectImageUrlWithNoStore(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  nameWithType: Predictions.detectImageUrlWithNoStore(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageUrlWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlWithNoStoreOptionalParameter&text=DetectImageUrlWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image url without saving the result.</p>

    <p></p>
  syntax: public ImagePrediction detectImageUrlWithNoStore(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlWithNoStore(UUID,String,String,DetectImageUrlWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  name: detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  nameWithType: Predictions.detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageUrlWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageUrlWithNoStoreOptionalParameter&text=DetectImageUrlWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect objects in an image url without saving the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> detectImageUrlWithNoStoreAsync(UUID projectId, String publishedName, String url, DetectImageUrlWithNoStoreOptionalParameter detectImageUrlWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageUrlWithNoStoreAsync(UUID,String,String,DetectImageUrlWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageWithNoStore()
  name: detectImageWithNoStore()
  nameWithType: Predictions.detectImageWithNoStore()
  returns:
    description: <p>the first stage of the detectImageWithNoStore call </p>
    type: <xref href="PredictionsDetectImageWithNoStoreDefinitionStages.WithProjectId?alt=PredictionsDetectImageWithNoStoreDefinitionStages.WithProjectId&text=PredictionsDetectImageWithNoStoreDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image without saving the result.</p>

    <p></p>
  syntax: public PredictionsDetectImageWithNoStoreDefinitionStages.WithProjectId detectImageWithNoStore()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageWithNoStore()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  name: detectImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  nameWithType: Predictions.detectImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageWithNoStoreOptionalParameter&text=DetectImageWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect objects in an image without saving the result.</p>

    <p></p>
  syntax: public ImagePrediction detectImageWithNoStore(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageWithNoStore(UUID,String,byte [],DetectImageWithNoStoreOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  name: detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  nameWithType: Predictions.detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies the name of the model to evaluate against. </p>
    name: publishedName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 0MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: detectImageWithNoStoreOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageWithNoStoreOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.DetectImageWithNoStoreOptionalParameter&text=DetectImageWithNoStoreOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.prediction.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect objects in an image without saving the result.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> detectImageWithNoStoreAsync(UUID projectId, String publishedName, byte[] imageData, DetectImageWithNoStoreOptionalParameter detectImageWithNoStoreOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions.detectImageWithNoStoreAsync(UUID,String,byte [],DetectImageWithNoStoreOptionalParameter)
nameWithType: Predictions
syntax: public interface Predictions
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions
fullName: com.microsoft.azure.cognitiveservices.vision.customvision.prediction.Predictions
name: Predictions
package: com.microsoft.azure.cognitiveservices.vision.customvision.prediction
summary: <p>An instance of this class provides access to all the operations defined in Predictions. </p>
metadata: {}
