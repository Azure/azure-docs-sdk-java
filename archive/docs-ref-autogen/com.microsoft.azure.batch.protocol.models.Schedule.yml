### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()
  name: doNotRunAfter()
  nameWithType: Schedule.doNotRunAfter()
  returns:
    description: <p>the doNotRunAfter value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.</p>

    <p></p>
  syntax: public DateTime doNotRunAfter()
  uid: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunAfter()
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()
  name: doNotRunUntil()
  nameWithType: Schedule.doNotRunUntil()
  returns:
    description: <p>the doNotRunUntil value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.</p>

    <p></p>
  syntax: public DateTime doNotRunUntil()
  uid: com.microsoft.azure.batch.protocol.models.Schedule.doNotRunUntil()
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
  name: recurrenceInterval()
  nameWithType: Schedule.recurrenceInterval()
  returns:
    description: <p>the recurrenceInterval value </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>

    <p></p>
  syntax: public Period recurrenceInterval()
  uid: com.microsoft.azure.batch.protocol.models.Schedule.recurrenceInterval()
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.startWindow()
  name: startWindow()
  nameWithType: Schedule.startWindow()
  returns:
    description: <p>the startWindow value </p>
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>

    <p></p>
  syntax: public Period startWindow()
  uid: com.microsoft.azure.batch.protocol.models.Schedule.startWindow()
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(DateTime doNotRunAfter)
  name: withDoNotRunAfter(DateTime doNotRunAfter)
  nameWithType: Schedule.withDoNotRunAfter(DateTime doNotRunAfter)
  parameters:
  - description: <p>the doNotRunAfter value to set </p>
    name: doNotRunAfter
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Schedule object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if you do not specify a doNotRunAfter time, and you are creating a recurring job schedule, the job schedule will remain active until you explicitly terminate it.</p>

    <p></p>
  syntax: public Schedule withDoNotRunAfter(DateTime doNotRunAfter)
  uid: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunAfter(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(DateTime doNotRunUntil)
  name: withDoNotRunUntil(DateTime doNotRunUntil)
  nameWithType: Schedule.withDoNotRunUntil(DateTime doNotRunUntil)
  parameters:
  - description: <p>the doNotRunUntil value to set </p>
    name: doNotRunUntil
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Schedule object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if you do not specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.</p>

    <p></p>
  syntax: public Schedule withDoNotRunUntil(DateTime doNotRunUntil)
  uid: com.microsoft.azure.batch.protocol.models.Schedule.withDoNotRunUntil(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(Period recurrenceInterval)
  name: withRecurrenceInterval(Period recurrenceInterval)
  nameWithType: Schedule.withRecurrenceInterval(Period recurrenceInterval)
  parameters:
  - description: <p>the recurrenceInterval value to set </p>
    name: recurrenceInterval
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Schedule object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set because a job schedule can have at most one active job under it at any given time, if it is time to create a new job under a job schedule, but the previous job is still running, the Batch service will not create the new job until the previous job finishes. If the previous job does not finish within the startWindow period of the new recurrenceInterval, then no new job will be scheduled for that interval. For recurring jobs, you should normally specify a jobManagerTask in the jobSpecification. If you do not use jobManagerTask, you will need an external process to monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next recurrence. The default is that the schedule does not recur: one job is created, within the startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>

    <p></p>
  syntax: public Schedule withRecurrenceInterval(Period recurrenceInterval)
  uid: com.microsoft.azure.batch.protocol.models.Schedule.withRecurrenceInterval(Period)
- fullName: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(Period startWindow)
  name: withStartWindow(Period startWindow)
  nameWithType: Schedule.withStartWindow(Period startWindow)
  parameters:
  - description: <p>the startWindow value to set </p>
    name: startWindow
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Schedule object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.Schedule?alt=com.microsoft.azure.batch.protocol.models.Schedule&text=Schedule" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if a job is not created within the startWindow interval, then the 'opportunity' is lost; no job will be created until the next recurrence of the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in one recurrenceInterval is not carried forward into the next recurrence interval. The default is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service rejects the schedule with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request).</p>

    <p></p>
  syntax: public Schedule withStartWindow(Period startWindow)
  uid: com.microsoft.azure.batch.protocol.models.Schedule.withStartWindow(Period)
nameWithType: Schedule
syntax: public class Schedule
type: class
uid: com.microsoft.azure.batch.protocol.models.Schedule
fullName: com.microsoft.azure.batch.protocol.models.Schedule
name: Schedule
package: com.microsoft.azure.batch.protocol.models
summary: <p>The schedule according to which jobs will be created. </p>
metadata: {}
