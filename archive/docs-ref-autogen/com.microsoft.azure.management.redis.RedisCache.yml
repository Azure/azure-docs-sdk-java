### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.redis.RedisCache.asPremium()
  name: asPremium()
  nameWithType: RedisCache.asPremium()
  returns:
    description: <p>exposes features available only to Premium Sku Redis Cache instances. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisCachePremium?alt=com.microsoft.azure.management.redis.RedisCachePremium&text=RedisCachePremium" data-throw-if-not-resolved="False"/>
  syntax: public RedisCachePremium asPremium()
  uid: com.microsoft.azure.management.redis.RedisCache.asPremium()
- fullName: com.microsoft.azure.management.redis.RedisCache.getKeys()
  name: getKeys()
  nameWithType: RedisCache.getKeys()
  returns:
    description: <p>a Redis Cache's access keys. This operation requires write permission to the Cache resource. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys" data-throw-if-not-resolved="False"/>
  syntax: public RedisAccessKeys getKeys()
  uid: com.microsoft.azure.management.redis.RedisCache.getKeys()
- fullName: com.microsoft.azure.management.redis.RedisCache.hostName()
  name: hostName()
  nameWithType: RedisCache.hostName()
  returns:
    description: <p>the hostName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String hostName()
  uid: com.microsoft.azure.management.redis.RedisCache.hostName()
- fullName: com.microsoft.azure.management.redis.RedisCache.isPremium()
  name: isPremium()
  nameWithType: RedisCache.isPremium()
  returns:
    description: <p>returns true if current Redis Cache instance has Premium Sku. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isPremium()
  uid: com.microsoft.azure.management.redis.RedisCache.isPremium()
- fullName: com.microsoft.azure.management.redis.RedisCache.keys()
  name: keys()
  nameWithType: RedisCache.keys()
  returns:
    description: <p>a Redis Cache's access keys. This operation requires write permission to the Cache resource. </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys" data-throw-if-not-resolved="False"/>
  syntax: public RedisAccessKeys keys()
  uid: com.microsoft.azure.management.redis.RedisCache.keys()
- fullName: com.microsoft.azure.management.redis.RedisCache.nonSslPort()
  name: nonSslPort()
  nameWithType: RedisCache.nonSslPort()
  returns:
    description: <p>true if non SSL port is enabled, false otherwise </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean nonSslPort()
  uid: com.microsoft.azure.management.redis.RedisCache.nonSslPort()
- fullName: com.microsoft.azure.management.redis.RedisCache.port()
  name: port()
  nameWithType: RedisCache.port()
  returns:
    description: <p>the port value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int port()
  uid: com.microsoft.azure.management.redis.RedisCache.port()
- fullName: com.microsoft.azure.management.redis.RedisCache.provisioningState()
  name: provisioningState()
  nameWithType: RedisCache.provisioningState()
  returns:
    description: <p>the provisioningState value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String provisioningState()
  uid: com.microsoft.azure.management.redis.RedisCache.provisioningState()
- fullName: com.microsoft.azure.management.redis.RedisCache.redisConfiguration()
  name: redisConfiguration()
  nameWithType: RedisCache.redisConfiguration()
  returns:
    description: <p>the Redis configuration value </p>
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  syntax: public Map<String, String> redisConfiguration()
  uid: com.microsoft.azure.management.redis.RedisCache.redisConfiguration()
- fullName: com.microsoft.azure.management.redis.RedisCache.redisVersion()
  name: redisVersion()
  nameWithType: RedisCache.redisVersion()
  returns:
    description: <p>the Redis version value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String redisVersion()
  uid: com.microsoft.azure.management.redis.RedisCache.redisVersion()
- fullName: com.microsoft.azure.management.redis.RedisCache.refreshKeys()
  name: refreshKeys()
  nameWithType: RedisCache.refreshKeys()
  returns:
    description: <p>the access keys for this Redis Cache </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fetch the up-to-date access keys from Azure for this Redis Cache.</p>

    <p></p>
  syntax: public RedisAccessKeys refreshKeys()
  uid: com.microsoft.azure.management.redis.RedisCache.refreshKeys()
- fullName: com.microsoft.azure.management.redis.RedisCache.regenerateKey(RedisKeyType keyType)
  name: regenerateKey(RedisKeyType keyType)
  nameWithType: RedisCache.regenerateKey(RedisKeyType keyType)
  parameters:
  - description: <p>key type to regenerate </p>
    name: keyType
    type: <xref href="com.microsoft.azure.management.redis.RedisKeyType?alt=com.microsoft.azure.management.redis.RedisKeyType&text=RedisKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the generated access keys for this Redis Cache </p>
    type: <xref href="com.microsoft.azure.management.redis.RedisAccessKeys?alt=com.microsoft.azure.management.redis.RedisAccessKeys&text=RedisAccessKeys" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Regenerates the access keys for this Redis Cache.</p>

    <p></p>
  syntax: public RedisAccessKeys regenerateKey(RedisKeyType keyType)
  uid: com.microsoft.azure.management.redis.RedisCache.regenerateKey(RedisKeyType)
- fullName: com.microsoft.azure.management.redis.RedisCache.shardCount()
  name: shardCount()
  nameWithType: RedisCache.shardCount()
  returns:
    description: <p>the shardCount value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int shardCount()
  uid: com.microsoft.azure.management.redis.RedisCache.shardCount()
- fullName: com.microsoft.azure.management.redis.RedisCache.sku()
  name: sku()
  nameWithType: RedisCache.sku()
  returns:
    description: <p>the sku value </p>
    type: <xref href="com.microsoft.azure.management.redis.Sku?alt=com.microsoft.azure.management.redis.Sku&text=Sku" data-throw-if-not-resolved="False"/>
  syntax: public Sku sku()
  uid: com.microsoft.azure.management.redis.RedisCache.sku()
- fullName: com.microsoft.azure.management.redis.RedisCache.sslPort()
  name: sslPort()
  nameWithType: RedisCache.sslPort()
  returns:
    description: <p>the sslPort value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int sslPort()
  uid: com.microsoft.azure.management.redis.RedisCache.sslPort()
- fullName: com.microsoft.azure.management.redis.RedisCache.staticIP()
  name: staticIP()
  nameWithType: RedisCache.staticIP()
  returns:
    description: <p>the staticIP value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String staticIP()
  uid: com.microsoft.azure.management.redis.RedisCache.staticIP()
- fullName: com.microsoft.azure.management.redis.RedisCache.subnetId()
  name: subnetId()
  nameWithType: RedisCache.subnetId()
  returns:
    description: <p>the subnetId value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String subnetId()
  uid: com.microsoft.azure.management.redis.RedisCache.subnetId()
nameWithType: RedisCache
syntax: public interface RedisCache extends GroupableResource<RedisManager, RedisResourceInner>,Refreshable<RedisCache>,Updatable<RedisCache.Update>
type: interface
uid: com.microsoft.azure.management.redis.RedisCache
fullName: com.microsoft.azure.management.redis.RedisCache
name: RedisCache
package: com.microsoft.azure.management.redis
summary: <p>An immutable client-side representation of an Azure Redis Cache. </p>
metadata: {}
