### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data)
  name: create(final byte[] data)
  nameWithType: EventData.create(final byte[] data)
  parameters:
  - description: <p>the actual payload of data in bytes to be Sent to EventHubs. </p>
    name: data
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to send to EventHubs. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>

    i.	Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii.	If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false" data-raw-source="getProperties()"></xref> for the Consumer.

    </pre></p>

    <p>Sample Code: <pre>

    EventData eventData = EventData.create(telemetryEventBytes);

    eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

    partitionSender.Send(eventData);

    </pre></p>

    <p></p>
  syntax: public static EventData create(final byte[] data)
  uid: com.microsoft.azure.eventhubs.EventData.create(final byte [])
- fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data, final int offset, final int length)
  name: create(final byte[] data, final int offset, final int length)
  nameWithType: EventData.create(final byte[] data, final int offset, final int length)
  parameters:
  - description: <p>the byte[] where the payload of the Event to be sent to EventHubs is present </p>
    name: data
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Offset in the byte[] to read from ; inclusive index </p>
    name: offset
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  - description: <p>length of the byte[] to be read, starting from offset </p>
    name: length
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to send to EventHubs. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>

    i.	Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii.	If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false" data-raw-source="getProperties()"></xref> for the Consumer.

     </pre></p>

    <p>Illustration: <pre><code>EventData eventData = EventData.create(telemetryEventBytes, offset, length);

        eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

        partitionSender.Send(eventData);

        </code></pre></p>

    <p></p>
  syntax: public static EventData create(final byte[] data, final int offset, final int length)
  uid: com.microsoft.azure.eventhubs.EventData.create(final byte [],final int,final int)
- fullName: com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer buffer)
  name: create(final ByteBuffer buffer)
  nameWithType: EventData.create(final ByteBuffer buffer)
  parameters:
  - description: <p>ByteBuffer which references the payload of the Event to be sent to EventHubs </p>
    name: buffer
    type: <xref href="final+ByteBuffer?alt=final+ByteBuffer&text=final+ByteBuffer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to send to EventHubs. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>

    i.	Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.

    ii.	If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false" data-raw-source="getProperties()"></xref> for the Consumer.

     </pre></p>

    <p>Illustration: <pre><code>EventData eventData = EventData.create(telemetryEventByteBuffer);

        eventData.getProperties().put("eventType", "com.microsoft.azure.monitoring.EtlEvent");

           partitionSender.Send(eventData);

        </code></pre></p>

    <p></p>
  syntax: public static EventData create(final ByteBuffer buffer)
  uid: com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer)
- fullName: com.microsoft.azure.eventhubs.EventData.getBytes()
  name: getBytes()
  nameWithType: EventData.getBytes()
  returns:
    description: <p>byte[] of the actual data </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get Actual Payload/Data wrapped by EventData.</p>

    <p>

    null if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid="com.microsoft.azure.eventhubs.EventData.getObject()" data-throw-if-not-resolved="false" data-raw-source="getObject()"></xref>. </p>
  syntax: public byte [] getBytes()
  uid: com.microsoft.azure.eventhubs.EventData.getBytes()
- fullName: com.microsoft.azure.eventhubs.EventData.getObject()
  name: getObject()
  nameWithType: EventData.getObject()
  returns:
    description: <p>returns the Object which could represent either Data or AmqpValue or AmqpSequence. </p>
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>

    <p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid="com.microsoft.azure.eventhubs.EventData.getBytes()" data-throw-if-not-resolved="false" data-raw-source="getBytes()"></xref> method. </p>

    <p>Get the value of AMQP messages' Body section on the received <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>

    <p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid="com.microsoft.azure.eventhubs.EventData.getBytes()" data-throw-if-not-resolved="false" data-raw-source="getBytes()"></xref> method.</p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Binary"></xref> if the Body is Data section </p>

    <p>

      <xref uid="" data-throw-if-not-resolved="false" data-raw-source="List"></xref> if the Body is AmqpSequence </p>

    <p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>
  syntax: public Object getObject()
  uid: com.microsoft.azure.eventhubs.EventData.getObject()
- fullName: com.microsoft.azure.eventhubs.EventData.getProperties()
  name: getProperties()
  nameWithType: EventData.getProperties()
  returns:
    description: <p>returns Application properties </p>
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Application property bag</p>

    <p></p>
  syntax: public Map<String, Object> getProperties()
  uid: com.microsoft.azure.eventhubs.EventData.getProperties()
- fullName: com.microsoft.azure.eventhubs.EventData.getSystemProperties()
  name: getSystemProperties()
  nameWithType: EventData.getSystemProperties()
  returns:
    description: <p>an encapsulation of all SystemProperties appended by EventHubs service into EventData. <code>null</code> if the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> is not received and is created by the public constructors. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventData.SystemProperties?alt=com.microsoft.azure.eventhubs.EventData.SystemProperties&text=EventData.SystemProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>SystemProperties that are populated by EventHubService. </p>

    <p>As these are populated by Service, they are only present on a Received EventData. </p>

    <p>Usage:</p>

    <p></p>

    <p></p>
  syntax: public SystemProperties getSystemProperties()
  uid: com.microsoft.azure.eventhubs.EventData.getSystemProperties()
nameWithType: EventData
syntax: public interface EventData
type: interface
uid: com.microsoft.azure.eventhubs.EventData
fullName: com.microsoft.azure.eventhubs.EventData
name: EventData
package: com.microsoft.azure.eventhubs
summary: >-
  <p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>

  <p>Serializing a received <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>

  <p>Here's how AMQP message sections map to <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. Here's the reference used for AMQP 1.0 specification: <a href="http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</a><pre>

  i.   <xref uid="com.microsoft.azure.eventhubs.EventData.getProperties()" data-throw-if-not-resolved="false" data-raw-source="getProperties()"></xref> - AMQPMessage.ApplicationProperties section

  ii.  <xref uid="com.microsoft.azure.eventhubs.EventData.getBytes()" data-throw-if-not-resolved="false" data-raw-source="getBytes()"></xref> - if AMQPMessage.Body has Data section

  iii. <xref uid="com.microsoft.azure.eventhubs.EventData.getObject()" data-throw-if-not-resolved="false" data-raw-source="getObject()"></xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections

  </pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>
metadata: {}
