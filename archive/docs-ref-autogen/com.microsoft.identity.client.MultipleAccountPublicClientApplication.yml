### YamlMime:JavaType
constructors:
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.MultipleAccountPublicClientApplication(@NonNull PublicClientApplicationConfiguration config)
  name: MultipleAccountPublicClientApplication(@NonNull PublicClientApplicationConfiguration config)
  nameWithType: MultipleAccountPublicClientApplication.MultipleAccountPublicClientApplication(@NonNull PublicClientApplicationConfiguration config)
  parameters:
  - name: config
    type: '@NonNull <xref href="com.microsoft.identity.client.PublicClientApplicationConfiguration?alt=com.microsoft.identity.client.PublicClientApplicationConfiguration&text=PublicClientApplicationConfiguration" data-throw-if-not-resolved="False"/>'
  syntax: protected MultipleAccountPublicClientApplication(@NonNull PublicClientApplicationConfiguration config)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.MultipleAccountPublicClientApplication(@NonNull PublicClientApplicationConfiguration)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.IPublicClientApplication" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.identity.client.PublicClientApplication?alt=com.microsoft.identity.client.PublicClientApplication&text=PublicClientApplication" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@NonNull final AuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.acquireToken(@NonNull final AcquireTokenParameters)
- com.microsoft.identity.client.PublicClientApplication.acquireTokenSilent(@NonNull final AcquireTokenSilentParameters)
- com.microsoft.identity.client.PublicClientApplication.acquireTokenSilentAsync(@NonNull final AcquireTokenSilentParameters)
- com.microsoft.identity.client.PublicClientApplication.acquireTokenWithDeviceCode(@Nullable String [],@NonNull final DeviceCodeFlowCallback)
- com.microsoft.identity.client.IPublicClientApplication.acquireTokenWithDeviceCode(@NonNull String [],@NonNull final DeviceCodeFlowCallback)
- com.microsoft.identity.client.PublicClientApplication.buildAcquireTokenSilentParameters(@NonNull final String [],@NonNull final IAccount,@NonNull final String,final boolean,@Nullable final ClaimsRequest,@NonNull final SilentAuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final File,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,@NonNull final String,@Nullable final String,@NonNull final String,@NonNull final ApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.create(@NonNull final Context,final int)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final IMultipleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final IMultipleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final int)
- com.microsoft.identity.client.PublicClientApplication.createMultipleAccountPublicClientApplication(@NonNull final Context,@NonNull final File)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int,@NonNull final ISingleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@NonNull final File,@NonNull final ISingleAccountApplicationCreatedListener)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,final int)
- com.microsoft.identity.client.PublicClientApplication.createSingleAccountPublicClientApplication(@NonNull final Context,@Nullable final File)
- com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme)
- com.microsoft.identity.client.PublicClientApplication.generateSignedHttpRequest(@NonNull final IAccount,@NonNull final PoPAuthenticationScheme,@NonNull final SignedHttpRequestRequestCallback)
- com.microsoft.identity.client.PublicClientApplication.getCommandCallback(@NonNull final SilentAuthenticationCallback,@NonNull final TokenParameters)
- com.microsoft.identity.client.PublicClientApplication.getConfiguration()
- com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.getMsaFamilyRefreshTokenWithMetadata(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getMsaFamilyRefreshTokenWithMetadata(String)
- com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.getOrgIdFamilyRefreshTokenWithMetadata(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.getOrgIdFamilyRefreshTokenWithMetadata(String)
- com.microsoft.identity.client.PublicClientApplication.getSdkVersion()
- com.microsoft.identity.client.PublicClientApplication.homeAccountMatcher
- com.microsoft.identity.client.PublicClientApplication.isSharedDevice()
- com.microsoft.identity.client.PublicClientApplication.localAccountMatcher
- com.microsoft.identity.client.PublicClientApplication.mPublicClientConfiguration
- com.microsoft.identity.client.PublicClientApplication.mTokenShareUtility
- com.microsoft.identity.client.PublicClientApplication.postAuthResult(@NonNull final ILocalAuthenticationResult,@NonNull final TokenParameters,@NonNull final SilentAuthenticationCallback)
- com.microsoft.identity.client.PublicClientApplication.PublicClientApplication(@NonNull final PublicClientApplicationConfiguration)
- com.microsoft.identity.client.PublicClientApplication.saveMsaFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.saveMsaFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.saveOrgIdFamilyRefreshToken(@NonNull final String)
- com.microsoft.identity.client.ITokenShare.saveOrgIdFamilyRefreshToken(String)
- com.microsoft.identity.client.PublicClientApplication.showExpectedMsalRedirectUriInfo(Activity)
- com.microsoft.identity.client.PublicClientApplication.usernameMatcher
- com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenParameters(AcquireTokenParameters)
- com.microsoft.identity.client.PublicClientApplication.validateAcquireTokenSilentParameters(AcquireTokenSilentParameters)
methods:
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  name: acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  nameWithType: MultipleAccountPublicClientApplication.acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final AuthenticationCallback)
  parameters:
  - description: <p>Non-null <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Activity"></xref> that will be used as the parent activity for launching the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.microsoft.identity.common.internal.providers.oauth2.AuthorizationActivity"></xref>. </p>
    name: activity
    type: <xref href="%40NonNull+final+Activity?alt=%40NonNull+final+Activity&text=%40NonNull+final+Activity" data-throw-if-not-resolved="False"/>
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Optional. If provided, will be used as the query parameter sent for authenticating the user, which will have the UPN pre-populated. </p>
    name: loginHint
    type: <xref href="%40Nullable+final+String?alt=%40Nullable+final+String&text=%40Nullable+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The Non-null <xref uid="com.microsoft.identity.client.AuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback"></xref> to receive the result back. 1) If user cancels the flow by pressing the device back button, the result will be sent back via <xref uid="com.microsoft.identity.client.AuthenticationCallback.onCancel()" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onCancel()"></xref>. 2) If the sdk successfully receives the token back, result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onSuccess(IAuthenticationResult)"></xref> 3) All the other errors will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="AuthenticationCallback#onError(MsalException)"></xref>. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.AuthenticationCallback?alt=com.microsoft.identity.client.AuthenticationCallback&text=AuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Acquire token interactively, will pop-up webUI. Interactive flow will skip the cache lookup.</p>

    <p></p>
  syntax: public void acquireToken(@NonNull final Activity activity, @NonNull final String[] scopes, @Nullable final String loginHint, @NonNull final AuthenticationCallback callback)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.acquireToken(@NonNull final Activity,@NonNull final String [],@Nullable final String,@NonNull final AuthenticationCallback)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.acquireTokenSilent(@NonNull String[] scopes, @NonNull IAccount account, @NonNull String authority)
  name: acquireTokenSilent(@NonNull String[] scopes, @NonNull IAccount account, @NonNull String authority)
  nameWithType: MultipleAccountPublicClientApplication.acquireTokenSilent(@NonNull String[] scopes, @NonNull IAccount account, @NonNull String authority)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.acquireTokenSilent(@NonNull final String [],@NonNull final IAccount,@NonNull final String)
  parameters:
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+String+%5B%5D?alt=%40NonNull+String+%5B%5D&text=%40NonNull+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref> represents the account to silently request tokens for. </p>
    name: account
    type: '@NonNull <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - description: <p>Authority to issue the token. </p>
    name: authority
    type: <xref href="%40NonNull+String?alt=%40NonNull+String&text=%40NonNull+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.identity.client.IAuthenticationResult?alt=com.microsoft.identity.client.IAuthenticationResult&text=IAuthenticationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public IAuthenticationResult acquireTokenSilent(@NonNull String[] scopes, @NonNull IAccount account, @NonNull String authority)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.acquireTokenSilent(@NonNull String [],@NonNull IAccount,@NonNull String)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  name: acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  nameWithType: MultipleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@NonNull final String,@NonNull final SilentAuthenticationCallback)
  parameters:
  - description: <p>The non-null array of scopes to be requested for the access token. MSAL always sends the scopes 'openid profile offline_access'. Do not include any of these scopes in the scope parameter. </p>
    name: scopes
    type: <xref href="%40NonNull+final+String+%5B%5D?alt=%40NonNull+final+String+%5B%5D&text=%40NonNull+final+String+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref> represents the account to silently request tokens for. </p>
    name: account
    type: '@NonNull final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - description: <p>Authority to issue the token. </p>
    name: authority
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback" data-throw-if-not-resolved="false" data-raw-source="SilentAuthenticationCallback"></xref> that is used to send the result back. The success result will be sent back via <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onSuccess(final IAuthenticationResult)" data-throw-if-not-resolved="false" data-raw-source="SilentAuthenticationCallback#onSuccess(IAuthenticationResult)"></xref>. Failure case will be sent back via { <xref uid="com.microsoft.identity.client.SilentAuthenticationCallback.onError(final MsalException)" data-throw-if-not-resolved="false" data-raw-source="}. "></xref></p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.SilentAuthenticationCallback?alt=com.microsoft.identity.client.SilentAuthenticationCallback&text=SilentAuthenticationCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Perform acquire token silent call. If there is a valid access token in the cache, the sdk will return the access token; If no valid access token exists, the sdk will try to find a refresh token and use the refresh token to get a new access token. If refresh token does not exist or it fails the refresh, exception will be sent back via callback.</p>

    <p></p>
  syntax: public void acquireTokenSilentAsync(@NonNull final String[] scopes, @NonNull final IAccount account, @NonNull final String authority, @NonNull final SilentAuthenticationCallback callback)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.acquireTokenSilentAsync(@NonNull final String [],@NonNull final IAccount,@NonNull final String,@NonNull final SilentAuthenticationCallback)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccount(@NonNull final String identifier, @NonNull final GetAccountCallback callback)
  name: getAccount(@NonNull final String identifier, @NonNull final GetAccountCallback callback)
  nameWithType: MultipleAccountPublicClientApplication.getAccount(@NonNull final String identifier, @NonNull final GetAccountCallback callback)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.getAccount(@NonNull final String,@NonNull final GetAccountCallback)
  parameters:
  - description: <p>String of the identifier </p>
    name: identifier
    type: <xref href="%40NonNull+final+String?alt=%40NonNull+final+String&text=%40NonNull+final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to notify once this action has finished. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IMultipleAccountPublicClientApplication.GetAccountCallback?alt=com.microsoft.identity.client.IMultipleAccountPublicClientApplication.GetAccountCallback&text=IMultipleAccountPublicClientApplication.GetAccountCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Retrieve the IAccount object matching the identifier. The identifier could be homeAccountIdentifier, localAccountIdentifier or username.</p>

    <p></p>
  syntax: public void getAccount(@NonNull final String identifier, @NonNull final GetAccountCallback callback)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccount(@NonNull final String,@NonNull final GetAccountCallback)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccount(@NonNull String identifier)
  name: getAccount(@NonNull String identifier)
  nameWithType: MultipleAccountPublicClientApplication.getAccount(@NonNull String identifier)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.getAccount(@NonNull final String)
  parameters:
  - description: <p>String of the identifier </p>
    name: identifier
    type: <xref href="%40NonNull+String?alt=%40NonNull+String&text=%40NonNull+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve the IAccount object matching the identifier. The identifier could be homeAccountIdentifier, localAccountIdentifier or username.</p>

    <p></p>
  syntax: public IAccount getAccount(@NonNull String identifier)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccount(@NonNull String)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccounts()
  name: getAccounts()
  nameWithType: MultipleAccountPublicClientApplication.getAccounts()
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.getAccounts()
  returns:
    type: List&lt;<xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Returns a List of <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref> objects for which this application has RefreshTokens. </p>
  syntax: public List<IAccount> getAccounts()
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccounts()
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccounts(@NonNull final LoadAccountsCallback callback)
  name: getAccounts(@NonNull final LoadAccountsCallback callback)
  nameWithType: MultipleAccountPublicClientApplication.getAccounts(@NonNull final LoadAccountsCallback callback)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.getAccounts(@NonNull final LoadAccountsCallback)
  parameters:
  - description: <p>The callback to notify once this action has finished. </p>
    name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IPublicClientApplication.LoadAccountsCallback?alt=com.microsoft.identity.client.IPublicClientApplication.LoadAccountsCallback&text=IPublicClientApplication.LoadAccountsCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Asynchronously returns a List of <xref uid="com.microsoft.identity.client.IAccount" data-throw-if-not-resolved="false" data-raw-source="IAccount"></xref> objects for which this application has RefreshTokens.</p>

    <p></p>
  syntax: public void getAccounts(@NonNull final LoadAccountsCallback callback)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.getAccounts(@NonNull final LoadAccountsCallback)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.removeAccount(@Nullable final IAccount account, @NonNull final RemoveAccountCallback callback)
  name: removeAccount(@Nullable final IAccount account, @NonNull final RemoveAccountCallback callback)
  nameWithType: MultipleAccountPublicClientApplication.removeAccount(@Nullable final IAccount account, @NonNull final RemoveAccountCallback callback)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.removeAccount(@Nullable final IAccount,@NonNull final RemoveAccountCallback)
  parameters:
  - description: <p>The IAccount whose entry and associated tokens should be removed. </p>
    name: account
    type: '@Nullable final <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  - name: callback
    type: '@NonNull final <xref href="com.microsoft.identity.client.IMultipleAccountPublicClientApplication.RemoveAccountCallback?alt=com.microsoft.identity.client.IMultipleAccountPublicClientApplication.RemoveAccountCallback&text=IMultipleAccountPublicClientApplication.RemoveAccountCallback" data-throw-if-not-resolved="False"/>'
  summary: >-
    <p>Removes the Account and Credentials (tokens) for the supplied IAccount.</p>

    <p></p>
  syntax: public void removeAccount(@Nullable final IAccount account, @NonNull final RemoveAccountCallback callback)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.removeAccount(@Nullable final IAccount,@NonNull final RemoveAccountCallback)
- fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication.removeAccount(@Nullable IAccount account)
  name: removeAccount(@Nullable IAccount account)
  nameWithType: MultipleAccountPublicClientApplication.removeAccount(@Nullable IAccount account)
  overridden: com.microsoft.identity.client.IMultipleAccountPublicClientApplication.removeAccount(@Nullable final IAccount)
  parameters:
  - description: <p>The IAccount whose entry and associated tokens should be removed. </p>
    name: account
    type: '@Nullable <xref href="com.microsoft.identity.client.IAccount?alt=com.microsoft.identity.client.IAccount&text=IAccount" data-throw-if-not-resolved="False"/>'
  returns:
    description: <p>True, if the account was removed. False otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Removes the Account and Credentials (tokens) for the supplied IAccount.</p>

    <p></p>
  syntax: public boolean removeAccount(@Nullable IAccount account)
  uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication.removeAccount(@Nullable IAccount)
nameWithType: MultipleAccountPublicClientApplication
syntax: public class MultipleAccountPublicClientApplication extends PublicClientApplication implements IMultipleAccountPublicClientApplication
type: class
uid: com.microsoft.identity.client.MultipleAccountPublicClientApplication
fullName: com.microsoft.identity.client.MultipleAccountPublicClientApplication
name: MultipleAccountPublicClientApplication
package: com.microsoft.identity.client
metadata: {}
