### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.execute()
  name: execute()
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.execute()
  returns:
    description: <p>Metric collection received after query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricCollection?alt=com.microsoft.azure.management.monitor.MetricCollection&text=MetricCollection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Executes the query.</p>

    <p></p>
  syntax: public MetricCollection execute()
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.execute()
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.executeAsync()
  name: executeAsync()
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.executeAsync()
  returns:
    description: <p>a representation of the deferred computation of Metric collection query call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.MetricCollection?alt=com.microsoft.azure.management.monitor.MetricCollection&text=MetricCollection" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Executes the query.</p>

    <p></p>
  syntax: public Observable<MetricCollection> executeAsync()
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.executeAsync()
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.filterByNamespace(String namespaceName)
  name: filterByNamespace(String namespaceName)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.filterByNamespace(String namespaceName)
  parameters:
  - description: <p>Metric namespace to query metric definitions for. </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Filters Metrics for a given namespace.</p>

    <p></p>
  syntax: public WithMetricsQueryExecute filterByNamespace(String namespaceName)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.filterByNamespace(String)
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.orderBy(String orderBy)
  name: orderBy(String orderBy)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.orderBy(String orderBy)
  parameters:
  - description: <p>the aggregation to use for sorting results and the direction of the sort. </p>
    name: orderBy
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.</p>

    <p></p>
  syntax: public WithMetricsQueryExecute orderBy(String orderBy)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.orderBy(String)
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.selectTop(int top)
  name: selectTop(int top)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.selectTop(int top)
  parameters:
  - description: <p>the maximum number of records to retrieve. </p>
    name: top
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10. </p>
  syntax: public WithMetricsQueryExecute selectTop(int top)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.selectTop(int)
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withAggregation(String aggregation)
  name: withAggregation(String aggregation)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withAggregation(String aggregation)
  parameters:
  - description: <p>The list of aggregation types (comma separated) to retrieve. </p>
    name: aggregation
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the list of aggregation types to retrieve.</p>

    <p></p>
  syntax: public WithMetricsQueryExecute withAggregation(String aggregation)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withAggregation(String)
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withInterval(Period interval)
  name: withInterval(Period interval)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withInterval(Period interval)
  parameters:
  - description: <p>The interval of the query. </p>
    name: interval
    type: <xref href="Period?alt=Period&text=Period" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the interval of the query.</p>

    <p></p>
  syntax: public WithMetricsQueryExecute withInterval(Period interval)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withInterval(Period)
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withOdataFilter(String odataFilter)
  name: withOdataFilter(String odataFilter)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withOdataFilter(String odataFilter)
  parameters:
  - description: <p>the **$filter** to reduce the set of the returned metric data. </p>
    name: odataFilter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the **$filter** that is used to reduce the set of metric data returned. &lt;br&gt;Example:&lt;br&gt; Metric contains metadata A, B and C.&lt;br&gt;</p>

    <p>

      <ul>

        <li>

          <p>Return all time series of C where A = a1 and B = b1 or b2&lt;br&gt; **$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**&lt;br&gt;</p>

        </li>

        <li>

          <p>Invalid variant:&lt;br&gt; **$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**&lt;br&gt; This is invalid because the logical or operator cannot separate two different metadata names.&lt;br&gt;</p>

        </li>

        <li>

          <p>Return all time series where A = a1, B = b1 and C = c1:&lt;br&gt; **$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**&lt;br&gt;</p>

        </li>

        <li>

          <p>Return all time series where A = a1&lt;br&gt; **$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</p>

        </li>

      </ul>

    </p>

    <p></p>
  syntax: public WithMetricsQueryExecute withOdataFilter(String odataFilter)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withOdataFilter(String)
- fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withResultType(ResultType resultType)
  name: withResultType(ResultType resultType)
  nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withResultType(ResultType resultType)
  parameters:
  - description: <p>the type of metric to retrieve. </p>
    name: resultType
    type: <xref href="com.microsoft.azure.management.monitor.ResultType?alt=com.microsoft.azure.management.monitor.ResultType&text=ResultType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the stage of optional query parameter definition and query execution. </p>
    type: <xref href="com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute?alt=com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute&text=MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. Possible values include: 'Data', 'Metadata'</p>

    <p></p>
  syntax: public WithMetricsQueryExecute withResultType(ResultType resultType)
  uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute.withResultType(ResultType)
nameWithType: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute
syntax: public interface WithMetricsQueryExecute
type: interface
uid: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute
fullName: com.microsoft.azure.management.monitor.MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute
name: MetricDefinition.MetricsQueryDefinitionStages.WithMetricsQueryExecute
package: com.microsoft.azure.management.monitor
summary: <p>The stage of a Metric query allowing to specify optional filters and execute the query. </p>
metadata: {}
