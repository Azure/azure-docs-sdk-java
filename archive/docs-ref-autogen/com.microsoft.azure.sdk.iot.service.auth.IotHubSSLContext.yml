### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.IotHubSSLContext()
  name: IotHubSSLContext()
  nameWithType: IotHubSSLContext.IotHubSSLContext()
  summary: <p>Create a default IotHubSSLContext that trusts the certificates stored in your physical device's Trusted Root Certification Authorities certificate store. This IotHubSSLContext can be used for connections that use symmetric key authentication, but cannot be used for connections that use x509 authentication. </p>
  syntax: public IotHubSSLContext()
  uid: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.IotHubSSLContext()
- fullName: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.IotHubSSLContext(SSLContext sslContext)
  name: IotHubSSLContext(SSLContext sslContext)
  nameWithType: IotHubSSLContext.IotHubSSLContext(SSLContext sslContext)
  parameters:
  - description: <p>the SSLContext that will be used during the TLS handshake when establishing a connection to the service. </p>
    name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  summary: <p>Create an IotHubSSLContext that will use the provided sslContext rather than create one based on your device's Trusted Root Certification Authorities certificate store. </p>
  syntax: public IotHubSSLContext(SSLContext sslContext)
  uid: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.IotHubSSLContext(SSLContext)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.getSSLContext()
  name: getSSLContext()
  nameWithType: IotHubSSLContext.getSSLContext()
  returns:
    description: <p>the SSLContext that will be used during the TLS handshake when establishing a connection to the service. </p>
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  summary: <p>Get the SSLContext that will be used during the TLS handshake when establishing a connection to the service. </p>
  syntax: public SSLContext getSSLContext()
  uid: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.getSSLContext()
- fullName: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.getSSLContextFromFile(String trustedCertificatesFilePath)
  name: getSSLContextFromFile(String trustedCertificatesFilePath)
  nameWithType: IotHubSSLContext.getSSLContextFromFile(String trustedCertificatesFilePath)
  parameters:
  - description: <p>the absolute file path of the file that contains the PEM formatted certificates that this IotHubSSLContext will trust. </p>
    name: trustedCertificatesFilePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="CertificateException?alt=CertificateException&text=CertificateException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided trustedCertificates are not PEM formatted and cannot be parsed. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided trustedCertificates cannot be read as a stream. </p>
  - type: <xref href="KeyStoreException?alt=KeyStoreException&text=KeyStoreException" data-throw-if-not-resolved="False"/>
    description: <p>if a key store cannot be created. </p>
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>if your device cannot use x509 certificates or TLS SSLContexts. </p>
  - type: <xref href="KeyManagementException?alt=KeyManagementException&text=KeyManagementException" data-throw-if-not-resolved="False"/>
    description: <p>if the created SSLContext cannot be initialized. </p>
  returns:
    description: <p>the created IotHubSSLContext. </p>
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  summary: <p>Create an IotHubSSLContext that trusts the PEM formatted certificates stored in a file with the provided path. </p>
  syntax: public static SSLContext getSSLContextFromFile(String trustedCertificatesFilePath)
  uid: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.getSSLContextFromFile(String)
- fullName: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.getSSLContextFromString(String trustedCertificates)
  name: getSSLContextFromString(String trustedCertificates)
  nameWithType: IotHubSSLContext.getSSLContextFromString(String trustedCertificates)
  parameters:
  - description: <p>the PEM formatted certificates that this IotHubSSLContext will trust. </p>
    name: trustedCertificates
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="CertificateException?alt=CertificateException&text=CertificateException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided trustedCertificates are not PEM formatted and cannot be parsed. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided trustedCertificates cannot be read as a stream. </p>
  - type: <xref href="KeyStoreException?alt=KeyStoreException&text=KeyStoreException" data-throw-if-not-resolved="False"/>
    description: <p>if a key store cannot be created. </p>
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>if your device cannot use x509 certificates or TLS SSLContexts. </p>
  - type: <xref href="KeyManagementException?alt=KeyManagementException&text=KeyManagementException" data-throw-if-not-resolved="False"/>
    description: <p>if the created SSLContext cannot be initialized. </p>
  returns:
    description: <p>the created IotHubSSLContext. </p>
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  summary: <p>Create an IotHubSSLContext that trusts the PEM formatted certificates stored in the provided trustedCertificates. </p>
  syntax: public static SSLContext getSSLContextFromString(String trustedCertificates)
  uid: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext.getSSLContextFromString(String)
nameWithType: IotHubSSLContext
syntax: public class IotHubSSLContext
type: class
uid: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext
fullName: com.microsoft.azure.sdk.iot.service.auth.IotHubSSLContext
name: IotHubSSLContext
package: com.microsoft.azure.sdk.iot.service.auth
summary: <p>A simple wrapper for holding the SSLContext used by all connections from clients in this library to the service. </p>
metadata: {}
