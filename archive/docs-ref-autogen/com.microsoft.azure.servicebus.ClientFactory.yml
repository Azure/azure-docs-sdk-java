### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionString(String amqpConnectionString, String sessionId)
  name: acceptSessionFromConnectionString(String amqpConnectionString, String sessionId)
  nameWithType: ClientFactory.acceptSessionFromConnectionString(String amqpConnectionString, String sessionId)
  parameters:
  - description: <p>connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode from service bus connection string with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static IMessageSession acceptSessionFromConnectionString(String amqpConnectionString, String sessionId)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionString(String,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionString(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  name: acceptSessionFromConnectionString(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromConnectionString(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  parameters:
  - description: <p>connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus connection string with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static IMessageSession acceptSessionFromConnectionString(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionString(String,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId)
  name: acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId)
  nameWithType: ClientFactory.acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode asynchronously from service bus connection string with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringAsync(String,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  name: acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> asynchronously from service bus connection string with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromConnectionStringAsync(String amqpConnectionString, String sessionId, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringAsync(String,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  name: acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  nameWithType: ClientFactory.acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode from service bus connection string builder with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static IMessageSession acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  name: acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus connection string builder with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static IMessageSession acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilder(ConnectionStringBuilder,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  name: acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  nameWithType: ClientFactory.acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode asynchronously from service bus connection string builder with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  name: acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  parameters:
  - description: <p>connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> asynchronously from service bus connection string builder with specified session id. Session Id can be null, if null, service will return the first available session.</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, String sessionId, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromConnectionStringBuilderAsync(ConnectionStringBuilder,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId)
  name: acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId)
  nameWithType: ClientFactory.acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which the session receiver needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: <p>IMessageSession instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus using the client settings with specified session id. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static IMessageSession acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(MessagingFactory,String,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  name: acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which the session receiver needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: <p>IMessageSession instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus using the client settings with specified session id. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static IMessageSession acceptSessionFromEntityPath(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(MessagingFactory,String,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  name: acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  nameWithType: ClientFactory.acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: <p>IMessageSession instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus using the client settings with specified session id in PeekLock mode. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static IMessageSession acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(String,String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: <p>IMessageSession instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus using the client settings with specified session id. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static IMessageSession acceptSessionFromEntityPath(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(String,String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  name: acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  nameWithType: ClientFactory.acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: <p>IMessageSession instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus using the client settings with specified session id in PeekLock mode. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static IMessageSession acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(URI,String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the session cannot be accepted </p>
  returns:
    description: <p>IMessageSession instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>
  summary: <p>Accept a <xref uid="com.microsoft.azure.servicebus.IMessageSession" data-throw-if-not-resolved="false" data-raw-source="IMessageSession"></xref> from service bus using the client settings with specified session id. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static IMessageSession acceptSessionFromEntityPath(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPath(URI,String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId)
  name: acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId)
  nameWithType: ClientFactory.acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which the session receiver needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously accepts a session from service bus using the client settings. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(MessagingFactory,String,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  name: acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which the session receiver needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously accepts a session from service bus using the client settings. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String sessionId, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(MessagingFactory,String,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  name: acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  nameWithType: ClientFactory.acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously accepts a session in PeekLock mode from service bus using the client settings. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(String,String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously accepts a session from service bus using the client settings. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromEntityPathAsync(String namespaceName, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(String,String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  name: acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  nameWithType: ClientFactory.acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously accepts a session in PeekLock mode from service bus using the client settings. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(URI,String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>session id, if null, service will return the first available session, otherwise, service will return specified session </p>
    name: sessionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending session accepting </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSession?alt=com.microsoft.azure.servicebus.IMessageSession&text=IMessageSession" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously accepts a session from service bus using the client settings. Session Id can be null, if null, service will return the first available session. </p>
  syntax: public static CompletableFuture<IMessageSession> acceptSessionFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, String sessionId, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.acceptSessionFromEntityPathAsync(URI,String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionString(String amqpConnectionString)
  name: createMessageReceiverFromConnectionString(String amqpConnectionString)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionString(String amqpConnectionString)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode from service bus connection string with <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas">Shared Access Signatures</a></p>

    <p></p>
  syntax: public static IMessageReceiver createMessageReceiverFromConnectionString(String amqpConnectionString)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionString(String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionString(String amqpConnectionString, ReceiveMode receiveMode)
  name: createMessageReceiverFromConnectionString(String amqpConnectionString, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionString(String amqpConnectionString, ReceiveMode receiveMode)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode from service bus connection string with <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas">Shared Access Signatures</a></p>

    <p></p>
  syntax: public static IMessageReceiver createMessageReceiverFromConnectionString(String amqpConnectionString, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionString(String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringAsync(String amqpConnectionString)
  name: createMessageReceiverFromConnectionStringAsync(String amqpConnectionString)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionStringAsync(String amqpConnectionString)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode asynchronously from connection string with <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas">Shared Access Signatures</a></p>

    <p></p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromConnectionStringAsync(String amqpConnectionString)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringAsync(String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringAsync(String amqpConnectionString, ReceiveMode receiveMode)
  name: createMessageReceiverFromConnectionStringAsync(String amqpConnectionString, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionStringAsync(String amqpConnectionString, ReceiveMode receiveMode)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode asynchronously from connection string with <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas">Shared Access Signatures</a></p>

    <p></p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromConnectionStringAsync(String amqpConnectionString, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringAsync(String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  name: createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  parameters:
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ConnectionStringBuilder"></xref>

      </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode from ConnectionStringBuilder <pre>

        IMessageReceiver messageReceiver = ClientFactory.createMessageReceiverFromConnectionStringBuilder(new ConnectionStringBuilder(connectionString, queueName));

    </pre></p>

    <p></p>
  syntax: public static IMessageReceiver createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  name: createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  parameters:
  - description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ConnectionStringBuilder"></xref>

      </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>The <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> from ConnectionStringBuilder <pre>

        IMessageReceiver messageReceiver = ClientFactory.createMessageReceiverFromConnectionStringBuilder(new ConnectionStringBuilder(connectionString, queueName), ReceiveMode.PEEKLOCK);

    </pre></p>

    <p></p>
  syntax: public static IMessageReceiver createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilder(ConnectionStringBuilder,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  name: createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> in default <xref uid="com.microsoft.azure.servicebus.ReceiveMode.PEEKLOCK" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode#PEEKLOCK"></xref> mode asynchronously from ConnectionStringBuilder</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  name: createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create <xref uid="com.microsoft.azure.servicebus.IMessageReceiver" data-throw-if-not-resolved="false" data-raw-source="IMessageReceiver"></xref> asynchronously from ConnectionStringBuilder</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromConnectionStringBuilderAsync(ConnectionStringBuilder,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  name: createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which receiver needs to be created </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of the entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>IMessageReceiver instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message receiver to the entity. </p>
  syntax: public static IMessageReceiver createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(MessagingFactory,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  name: createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which receiver needs to be created </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of the entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>IMessageReceiver instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message receiver to the entity. </p>
  syntax: public static IMessageReceiver createMessageReceiverFromEntityPath(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(MessagingFactory,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  name: createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of the entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>IMessageReceiver instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message receiver to the entity using the client settings in PeekLock mode </p>
  syntax: public static IMessageReceiver createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of the entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>IMessageReceiver instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message receiver to the entity using the client settings. </p>
  syntax: public static IMessageReceiver createMessageReceiverFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  name: createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of the entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>IMessageReceiver instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message receiver to the entity using the client settings in PeekLock mode </p>
  syntax: public static IMessageReceiver createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(URI,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of the entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the receiver cannot be created </p>
  returns:
    description: <p>IMessageReceiver instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message receiver to the entity using the client settings. </p>
  syntax: public static IMessageReceiver createMessageReceiverFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPath(URI,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  name: createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which receiver needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creation of message receiver </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously creates a new message receiver to the entity on the messagingFactory. </p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(MessagingFactory,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  name: createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which receiver needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creation of message receiver </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously creates a new message receiver to the entity on the messagingFactory. </p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(MessagingFactory,String,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  name: createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creation of message receiver </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously creates a message receiver to the entity using the client settings in PeekLock mode </p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creation of message receiver </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously creates a message receiver to the entity using the client settings </p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  name: createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creation of message receiver </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously creates a message receiver to the entity using the client settings in PeekLock mode </p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(URI,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: ClientFactory.createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>PeekLock or ReceiveAndDelete </p>
    name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creation of message receiver </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageReceiver?alt=com.microsoft.azure.servicebus.IMessageReceiver&text=IMessageReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Asynchronously creates a message receiver to the entity using the client settings </p>
  syntax: public static CompletableFuture<IMessageReceiver> createMessageReceiverFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageReceiverFromEntityPathAsync(URI,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionString(String amqpConnectionString)
  name: createMessageSenderFromConnectionString(String amqpConnectionString)
  nameWithType: ClientFactory.createMessageSenderFromConnectionString(String amqpConnectionString)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageSender" data-throw-if-not-resolved="false" data-raw-source="IMessageSender"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create message sender from service bus connection string with <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas">Shared Access Signatures</a></p>

    <p></p>
  syntax: public static IMessageSender createMessageSenderFromConnectionString(String amqpConnectionString)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionString(String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionStringAsync(String amqpConnectionString)
  name: createMessageSenderFromConnectionStringAsync(String amqpConnectionString)
  nameWithType: ClientFactory.createMessageSenderFromConnectionStringAsync(String amqpConnectionString)
  parameters:
  - description: <p>the connection string </p>
    name: amqpConnectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating of <xref uid="com.microsoft.azure.servicebus.IMessageSender" data-throw-if-not-resolved="false" data-raw-source="IMessageSender"></xref> instance </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create message sender asynchronously from connection string with <a href="https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas">Shared Access Signatures</a></p>

    <p></p>
  syntax: public static CompletableFuture<IMessageSender> createMessageSenderFromConnectionStringAsync(String amqpConnectionString)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionStringAsync(String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  name: createMessageSenderFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: ClientFactory.createMessageSenderFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.IMessageSender" data-throw-if-not-resolved="false" data-raw-source="IMessageSender"></xref> instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create message sender from ConnectionStringBuilder <pre>

        IMessageSender messageSender = ClientFactory.createMessageSenderFromConnectionStringBuilder(new ConnectionStringBuilder(connectionString, queueName));

    </pre></p>

    <p></p>
  syntax: public static IMessageSender createMessageSenderFromConnectionStringBuilder(ConnectionStringBuilder amqpConnectionStringBuilder)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionStringBuilder(ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  name: createMessageSenderFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  nameWithType: ClientFactory.createMessageSenderFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  parameters:
  - description: <p>the connection string builder </p>
    name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating of <xref uid="com.microsoft.azure.servicebus.IMessageSender" data-throw-if-not-resolved="false" data-raw-source="IMessageSender"></xref> instance </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create message sender asynchronously from ConnectionStringBuilder</p>

    <p></p>
  syntax: public static CompletableFuture<IMessageSender> createMessageSenderFromConnectionStringBuilderAsync(ConnectionStringBuilder amqpConnectionStringBuilder)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromConnectionStringBuilderAsync(ConnectionStringBuilder)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  name: createMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  nameWithType: ClientFactory.createMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which sender needs to be created </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: <p>IMessageSender instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message sender to the entity. </p>
  syntax: public static IMessageSender createMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPath(MessagingFactory,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  name: createMessageSenderFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageSenderFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>namespace of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: <p>IMessageSender instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message sender to the entity using the client settings. </p>
  syntax: public static IMessageSender createMessageSenderFromEntityPath(String namespaceName, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPath(String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  name: createMessageSenderFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageSenderFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: <p>IMessageSender instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message sender to the entity using the client settings. </p>
  syntax: public static IMessageSender createMessageSenderFromEntityPath(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPath(URI,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  name: createMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  nameWithType: ClientFactory.createMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which sender needs to be created </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating of IMessageSender instance </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a message sender asynchronously to the entity using the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="MessagingFactory"></xref></p>
  syntax: public static CompletableFuture<IMessageSender> createMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPathAsync(MessagingFactory,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  name: createMessageSenderFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageSenderFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>namespace name of entity </p>
    name: namespaceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating of IMessageSender instance </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a message sender asynchronously to the entity using the client settings. </p>
  syntax: public static CompletableFuture<IMessageSender> createMessageSenderFromEntityPathAsync(String namespaceName, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPathAsync(String,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  name: createMessageSenderFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  nameWithType: ClientFactory.createMessageSenderFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  parameters:
  - description: <p>endpoint uri of entity namespace </p>
    name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>path of entity </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>client settings </p>
    name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating of IMessageSender instance </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Creates a message sender asynchronously to the entity using the client settings. </p>
  syntax: public static CompletableFuture<IMessageSender> createMessageSenderFromEntityPathAsync(URI namespaceEndpointURI, String entityPath, ClientSettings clientSettings)
  uid: com.microsoft.azure.servicebus.ClientFactory.createMessageSenderFromEntityPathAsync(URI,String,ClientSettings)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  name: createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  nameWithType: ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which sender needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of the final destination of the message. </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The initial destination of the message. </p>
    name: viaEntityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if the sender cannot be created </p>
  returns:
    description: <p>IMessageSender instance </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a transfer message sender. This sender sends message to destination entity via another entity.</p>

    <p>This is mainly to be used when sending messages in a transaction. When messages need to be sent across entities in a single transaction, this can be used to ensure all the messages land initially in the same entity/partition for local transactions, and then let service bus handle transferring the message to the actual destination. </p>
  syntax: public static IMessageSender createTransferMessageSenderFromEntityPath(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPath(MessagingFactory,String,String)
- fullName: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  name: createTransferMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  nameWithType: ClientFactory.createTransferMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  parameters:
  - description: <p>messaging factory (which represents a connection) on which sender needs to be created. </p>
    name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  - description: <p>path of the final destination of the message. </p>
    name: entityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The initial destination of the message. </p>
    name: viaEntityPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending creating of IMessageSender instance. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessageSender?alt=com.microsoft.azure.servicebus.IMessageSender&text=IMessageSender" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a transfer message sender asynchronously. This sender sends message to destination entity via another entity.</p>

    <p>This is mainly to be used when sending messages in a transaction. When messages need to be sent across entities in a single transaction, this can be used to ensure all the messages land initially in the same entity/partition for local transactions, and then let service bus handle transferring the message to the actual destination. </p>
  syntax: public static CompletableFuture<IMessageSender> createTransferMessageSenderFromEntityPathAsync(MessagingFactory messagingFactory, String entityPath, String viaEntityPath)
  uid: com.microsoft.azure.servicebus.ClientFactory.createTransferMessageSenderFromEntityPathAsync(MessagingFactory,String,String)
nameWithType: ClientFactory
syntax: public class ClientFactory
type: class
uid: com.microsoft.azure.servicebus.ClientFactory
fullName: com.microsoft.azure.servicebus.ClientFactory
name: ClientFactory
package: com.microsoft.azure.servicebus
summary: <p>Utility class for creating message senders and receivers. </p>
metadata: {}
