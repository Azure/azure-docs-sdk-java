### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.containerInfo()
  name: containerInfo()
  nameWithType: TaskExecutionInformation.containerInfo()
  returns:
    description: <p>the containerInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation&text=TaskContainerExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task runs in a container context.</p>

    <p></p>
  syntax: public TaskContainerExecutionInformation containerInfo()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.containerInfo()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.endTime()
  name: endTime()
  nameWithType: TaskExecutionInformation.endTime()
  returns:
    description: <p>the endTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task is in the Completed state.</p>

    <p></p>
  syntax: public DateTime endTime()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.endTime()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.exitCode()
  name: exitCode()
  nameWithType: TaskExecutionInformation.exitCode()
  returns:
    description: <p>the exitCode value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.</p>

    <p></p>
  syntax: public Integer exitCode()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.exitCode()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.failureInfo()
  name: failureInfo()
  nameWithType: TaskExecutionInformation.failureInfo()
  returns:
    description: <p>the failureInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskFailureInformation?alt=com.microsoft.azure.batch.protocol.models.TaskFailureInformation&text=TaskFailureInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task is in the completed state and encountered a failure.</p>

    <p></p>
  syntax: public TaskFailureInformation failureInfo()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.failureInfo()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.lastRequeueTime()
  name: lastRequeueTime()
  nameWithType: TaskExecutionInformation.lastRequeueTime()
  returns:
    description: <p>the lastRequeueTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the requeueCount is nonzero.</p>

    <p></p>
  syntax: public DateTime lastRequeueTime()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.lastRequeueTime()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.lastRetryTime()
  name: lastRetryTime()
  nameWithType: TaskExecutionInformation.lastRetryTime()
  returns:
    description: <p>the lastRetryTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.</p>

    <p></p>
  syntax: public DateTime lastRetryTime()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.lastRetryTime()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.requeueCount()
  name: requeueCount()
  nameWithType: TaskExecutionInformation.requeueCount()
  returns:
    description: <p>the requeueCount value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get when the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.</p>

    <p></p>
  syntax: public int requeueCount()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.requeueCount()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.result()
  name: result()
  nameWithType: TaskExecutionInformation.result()
  returns:
    description: <p>the result value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionResult?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionResult&text=TaskExecutionResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the value is 'failed', then the details of the failure can be found in the failureInfo property. Possible values include: 'success', 'failure'.</p>

    <p></p>
  syntax: public TaskExecutionResult result()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.result()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.retryCount()
  name: retryCount()
  nameWithType: TaskExecutionInformation.retryCount()
  returns:
    description: <p>the retryCount value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.</p>

    <p></p>
  syntax: public int retryCount()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.retryCount()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.startTime()
  name: startTime()
  nameWithType: TaskExecutionInformation.startTime()
  returns:
    description: <p>the startTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get 'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.</p>

    <p></p>
  syntax: public DateTime startTime()
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.startTime()
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withContainerInfo(TaskContainerExecutionInformation containerInfo)
  name: withContainerInfo(TaskContainerExecutionInformation containerInfo)
  nameWithType: TaskExecutionInformation.withContainerInfo(TaskContainerExecutionInformation containerInfo)
  parameters:
  - description: <p>the containerInfo value to set </p>
    name: containerInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation&text=TaskContainerExecutionInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task runs in a container context.</p>

    <p></p>
  syntax: public TaskExecutionInformation withContainerInfo(TaskContainerExecutionInformation containerInfo)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withContainerInfo(TaskContainerExecutionInformation)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withEndTime(DateTime endTime)
  name: withEndTime(DateTime endTime)
  nameWithType: TaskExecutionInformation.withEndTime(DateTime endTime)
  parameters:
  - description: <p>the endTime value to set </p>
    name: endTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task is in the Completed state.</p>

    <p></p>
  syntax: public TaskExecutionInformation withEndTime(DateTime endTime)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withEndTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withExitCode(Integer exitCode)
  name: withExitCode(Integer exitCode)
  nameWithType: TaskExecutionInformation.withExitCode(Integer exitCode)
  parameters:
  - description: <p>the exitCode value to set </p>
    name: exitCode
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.</p>

    <p></p>
  syntax: public TaskExecutionInformation withExitCode(Integer exitCode)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withExitCode(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withFailureInfo(TaskFailureInformation failureInfo)
  name: withFailureInfo(TaskFailureInformation failureInfo)
  nameWithType: TaskExecutionInformation.withFailureInfo(TaskFailureInformation failureInfo)
  parameters:
  - description: <p>the failureInfo value to set </p>
    name: failureInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskFailureInformation?alt=com.microsoft.azure.batch.protocol.models.TaskFailureInformation&text=TaskFailureInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task is in the completed state and encountered a failure.</p>

    <p></p>
  syntax: public TaskExecutionInformation withFailureInfo(TaskFailureInformation failureInfo)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withFailureInfo(TaskFailureInformation)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withLastRequeueTime(DateTime lastRequeueTime)
  name: withLastRequeueTime(DateTime lastRequeueTime)
  nameWithType: TaskExecutionInformation.withLastRequeueTime(DateTime lastRequeueTime)
  parameters:
  - description: <p>the lastRequeueTime value to set </p>
    name: lastRequeueTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the requeueCount is nonzero.</p>

    <p></p>
  syntax: public TaskExecutionInformation withLastRequeueTime(DateTime lastRequeueTime)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withLastRequeueTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withLastRetryTime(DateTime lastRetryTime)
  name: withLastRetryTime(DateTime lastRetryTime)
  nameWithType: TaskExecutionInformation.withLastRetryTime(DateTime lastRetryTime)
  parameters:
  - description: <p>the lastRetryTime value to set </p>
    name: lastRetryTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.</p>

    <p></p>
  syntax: public TaskExecutionInformation withLastRetryTime(DateTime lastRetryTime)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withLastRetryTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withRequeueCount(int requeueCount)
  name: withRequeueCount(int requeueCount)
  nameWithType: TaskExecutionInformation.withRequeueCount(int requeueCount)
  parameters:
  - description: <p>the requeueCount value to set </p>
    name: requeueCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set when the user removes nodes from a pool (by resizing/shrinking the pool) or when the job is being disabled, the user can specify that running tasks on the nodes be requeued for execution. This count tracks how many times the task has been requeued for these reasons.</p>

    <p></p>
  syntax: public TaskExecutionInformation withRequeueCount(int requeueCount)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withRequeueCount(int)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withResult(TaskExecutionResult result)
  name: withResult(TaskExecutionResult result)
  nameWithType: TaskExecutionInformation.withResult(TaskExecutionResult result)
  parameters:
  - description: <p>the result value to set </p>
    name: result
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionResult?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionResult&text=TaskExecutionResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the value is 'failed', then the details of the failure can be found in the failureInfo property. Possible values include: 'success', 'failure'.</p>

    <p></p>
  syntax: public TaskExecutionInformation withResult(TaskExecutionResult result)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withResult(TaskExecutionResult)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withRetryCount(int retryCount)
  name: withRetryCount(int retryCount)
  nameWithType: TaskExecutionInformation.withRetryCount(int retryCount)
  parameters:
  - description: <p>the retryCount value to set </p>
    name: retryCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.</p>

    <p></p>
  syntax: public TaskExecutionInformation withRetryCount(int retryCount)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withRetryCount(int)
- fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withStartTime(DateTime startTime)
  name: withStartTime(DateTime startTime)
  nameWithType: TaskExecutionInformation.withStartTime(DateTime startTime)
  parameters:
  - description: <p>the startTime value to set </p>
    name: startTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskExecutionInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionInformation&text=TaskExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set 'Running' corresponds to the running state, so if the task specifies resource files or application packages, then the start time reflects the time at which the task started downloading or deploying these. If the task has been restarted or retried, this is the most recent time at which the task started running. This property is present only for tasks that are in the running or completed state.</p>

    <p></p>
  syntax: public TaskExecutionInformation withStartTime(DateTime startTime)
  uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation.withStartTime(DateTime)
nameWithType: TaskExecutionInformation
syntax: public class TaskExecutionInformation
type: class
uid: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation
fullName: com.microsoft.azure.batch.protocol.models.TaskExecutionInformation
name: TaskExecutionInformation
package: com.microsoft.azure.batch.protocol.models
summary: <p>Information about the execution of a task. </p>
metadata: {}
