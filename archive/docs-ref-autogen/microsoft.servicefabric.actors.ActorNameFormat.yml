### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getConfigPackageName(Class<?> actorImplementationType)
  name: getConfigPackageName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getConfigPackageName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Type of class implementing the actor. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>configuration package name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the configuration package name used in service package for the actor.</p>

    <p></p>
  syntax: public static String getConfigPackageName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getConfigPackageName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceEndpointName(Class<?> actorImplementationType)
  name: getFabricServiceEndpointName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getFabricServiceEndpointName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Type of class implementing the actor. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Service endpoint name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the service endpoint for the actor type which is specified in service manifest for the actor service.</p>

    <p></p>
  syntax: public static String getFabricServiceEndpointName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceEndpointName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  name: getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  nameWithType: ActorNameFormat.getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Name of service hosting the actor type. If this value is null then service name is constructed using the actorInterfaceType. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Service Fabric service name hosting the actor type. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets name of service which hosts the actor type in Service Fabric cluster.</p>

    <p></p>
  syntax: public static String getFabricServiceName(Class<?> actorInterfaceType, String serviceName)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceName(Class<?>,String)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceReplicatorConfigSectionName(Class<?> actorImplementationType)
  name: getFabricServiceReplicatorConfigSectionName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getFabricServiceReplicatorConfigSectionName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Type of class implementing the actor. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Replicator configuration section name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the replicator configuration section name specified in configuration package for the actor service.</p>

    <p>

      <b>Remarks:</b> Values specified in replicator configuration section are used to configure <xref uid="system.fabric.ReplicatorSettings" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings"></xref> for the replication of actor state between primary and secondary replicas. </p>
  syntax: public static String getFabricServiceReplicatorConfigSectionName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceReplicatorConfigSectionName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceReplicatorEndpointName(Class<?> actorImplementationType)
  name: getFabricServiceReplicatorEndpointName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getFabricServiceReplicatorEndpointName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Type of class implementing the actor. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Service replicator endpoint name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the replicator endpoint which is specified in service manifest for the actor service.</p>

    <p></p>
  syntax: public static String getFabricServiceReplicatorEndpointName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceReplicatorEndpointName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceReplicatorSecurityConfigSectionName(Class<?> actorImplementationType)
  name: getFabricServiceReplicatorSecurityConfigSectionName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getFabricServiceReplicatorSecurityConfigSectionName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Type of class implementing the actor. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Replicator security configuration section name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the replicator security configuration section name specified in configuration package for the actor service.</p>

    <p>

      <b>Remarks:</b> Values specified in replicator security configuration section are used to configure <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ReplicatorSettings#securityCredentials"></xref> for the replication of actor state between primary and secondary replicas. </p>
  syntax: public static String getFabricServiceReplicatorSecurityConfigSectionName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceReplicatorSecurityConfigSectionName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceTransportSettingsSectionName(Class<?> actorImplementationType)
  name: getFabricServiceTransportSettingsSectionName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getFabricServiceTransportSettingsSectionName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Type of class implementing the actor. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>FabricTransport configuration section name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the fabrictransport configuration section name specified in configuration package for the actor service.</p>

    <p>

      <b>Remarks:</b>Values specified in FabricTransport configuration section are used to configure <xref uid="" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.fabrictransport.runtime.FabricTransportListenerSettings"></xref> for the communication. </p>
  syntax: public static String getFabricServiceTransportSettingsSectionName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceTransportSettingsSectionName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceTypeName(Class<?> actorImplementationType)
  name: getFabricServiceTypeName(Class<?> actorImplementationType)
  nameWithType: ActorNameFormat.getFabricServiceTypeName(Class<?> actorImplementationType)
  parameters:
  - description: <p>Actor implementation type. </p>
    name: actorImplementationType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Service type name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets service type name for the actor.</p>

    <p></p>
  syntax: public static String getFabricServiceTypeName(Class<?> actorImplementationType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceTypeName(Class<?>)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  name: getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  nameWithType: ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Service Fabric application name containing the actor service. If this value is null application name is obtained from <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref></p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of service hosting the actor type. If this value is null then service name is constructed using the actorInterfaceType. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="java.net.URISyntaxException?alt=java.net.URISyntaxException&text=java.net.URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws URISyntaxException </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>When applicationName cannot be determined using <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. </p>
  returns:
    description: <p>Service Fabric service Uri hosting the actor type. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets service Uri which hosts the actor type in Service Fabric cluster.</p>

    <p>

      <b>Remarks:</b> If applicationName is passed as null or empty string, an attempt is made to get application name from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. If the method still cannot determine application name, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> is thrown. </p>
  syntax: public static URI getFabricServiceUri(Class<?> actorInterfaceType, String applicationName, String serviceName)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?>,String,String)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  name: getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  nameWithType: ActorNameFormat.getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Service Fabric application Uri containing the actor service. If this value is null application name is obtained from <xref uid="system.fabric.CodePackageActivationContext.getApplicationName()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext#getApplicationName()"></xref></p>
    name: applicationUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - description: <p>Name of service hosting the actor type. If this value is null then service name is constructed using the actorInterfaceType. </p>
    name: serviceName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="java.net.URISyntaxException?alt=java.net.URISyntaxException&text=java.net.URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>Throws URISyntaxException </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>When applicationUri cannot be determined using <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. </p>
  returns:
    description: <p>Service Fabric service Uri hosting the actor type. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets service Uri which hosts the actor type in Service Fabric cluster.</p>

    <p>

      <b>Remarks:</b> If applicationUri is passed as null or empty string, an attempt is made to get application name from <xref uid="system.fabric.CodePackageActivationContext" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackageActivationContext"></xref>. If the method still cannot determine application name, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.IllegalArgumentException"></xref> is thrown. </p>
  syntax: public static URI getFabricServiceUri(Class<?> actorInterfaceType, URI applicationUri, String serviceName)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getFabricServiceUri(Class<?>,URI,String)
- fullName: microsoft.servicefabric.actors.ActorNameFormat.getName(Class<?> actorInterfaceType)
  name: getName(Class<?> actorInterfaceType)
  nameWithType: ActorNameFormat.getName(Class<?> actorInterfaceType)
  parameters:
  - description: <p>Type of the actor interface. </p>
    name: actorInterfaceType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Name of Actor. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets name of Actor from actorInterfaceType.</p>

    <p></p>
  syntax: public static String getName(Class<?> actorInterfaceType)
  uid: microsoft.servicefabric.actors.ActorNameFormat.getName(Class<?>)
nameWithType: ActorNameFormat
syntax: public class ActorNameFormat
type: class
uid: microsoft.servicefabric.actors.ActorNameFormat
fullName: microsoft.servicefabric.actors.ActorNameFormat
name: ActorNameFormat
package: microsoft.servicefabric.actors
summary: <p>Contains static methods for generating names like service name, application name form the actor interface type. </p>
metadata: {}
