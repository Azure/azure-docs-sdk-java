### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Serializable" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.servicebus.MessageBody.fromBinaryData(List<byte[]> binaryData)
  name: fromBinaryData(List<byte[]> binaryData)
  nameWithType: MessageBody.fromBinaryData(List<byte[]> binaryData)
  parameters:
  - description: <p>a list of byte arrays. </p>
    name: binaryData
    type: <xref href="List%3Cbyte%5B%5D%3E?alt=List%3Cbyte%5B%5D%3E&text=List%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>MessageBody instance wrapping around the binary data. </p>
    type: <xref href="com.microsoft.azure.servicebus.MessageBody?alt=com.microsoft.azure.servicebus.MessageBody&text=MessageBody" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message body from a list of Data sections.Each Data section is a byte array. Please note that this version of the SDK supports only one Data section in a message. It means only a list of exactly one byte array in it is accepted as message body. </p>
  syntax: public static MessageBody fromBinaryData(List<byte[]> binaryData)
  uid: com.microsoft.azure.servicebus.MessageBody.fromBinaryData(List<byte[]>)
- fullName: com.microsoft.azure.servicebus.MessageBody.fromSequenceData(List<List<Object>> sequenceData)
  name: fromSequenceData(List<List<Object>> sequenceData)
  nameWithType: MessageBody.fromSequenceData(List<List<Object>> sequenceData)
  parameters:
  - description: <p>a list of AMQPSequence sections. Each AMQPSequence section is in turn a list of objects. Every object in each list must of a type supported by AMQP. </p>
    name: sequenceData
    type: <xref href="List%3CList%3CObject%3E%3E?alt=List%3CList%3CObject%3E%3E&text=List%3CList%3CObject%3E%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>MessageBody instance wrapping around the sequence data. </p>
    type: <xref href="com.microsoft.azure.servicebus.MessageBody?alt=com.microsoft.azure.servicebus.MessageBody&text=MessageBody" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a message body from a list of AMQPSequence sections.Each AMQPSequence section is in turn a list of objects. Please note that this version of the SDK supports only one AMQPSequence section in a message. It means only a list of exactly one sequence in it is accepted as message body. </p>
  syntax: public static MessageBody fromSequenceData(List<List<Object>> sequenceData)
  uid: com.microsoft.azure.servicebus.MessageBody.fromSequenceData(List<List<Object>>)
- fullName: com.microsoft.azure.servicebus.MessageBody.fromValueData(Object value)
  name: fromValueData(Object value)
  nameWithType: MessageBody.fromValueData(Object value)
  parameters:
  - description: <p>AMQPValue content of the message. It must be of a type supported by AMQP. </p>
    name: value
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>MessageBody instance wrapping around the value data. </p>
    type: <xref href="com.microsoft.azure.servicebus.MessageBody?alt=com.microsoft.azure.servicebus.MessageBody&text=MessageBody" data-throw-if-not-resolved="False"/>
  summary: <p>Creates message body of AMQPValue type. </p>
  syntax: public static MessageBody fromValueData(Object value)
  uid: com.microsoft.azure.servicebus.MessageBody.fromValueData(Object)
- fullName: com.microsoft.azure.servicebus.MessageBody.getBinaryData()
  name: getBinaryData()
  nameWithType: MessageBody.getBinaryData()
  returns:
    description: <p>message body as list of byte arrays only if the MessageBody is of Binary type. Returns null otherwise. </p>
    type: <xref href="List%3Cbyte%5B%5D%3E?alt=List%3Cbyte%5B%5D%3E&text=List%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Returns the content of message body. </p>
  syntax: public List<byte[]> getBinaryData()
  uid: com.microsoft.azure.servicebus.MessageBody.getBinaryData()
- fullName: com.microsoft.azure.servicebus.MessageBody.getBodyType()
  name: getBodyType()
  nameWithType: MessageBody.getBodyType()
  returns:
    description: <p>type of message content </p>
    type: <xref href="com.microsoft.azure.servicebus.MessageBodyType?alt=com.microsoft.azure.servicebus.MessageBodyType&text=MessageBodyType" data-throw-if-not-resolved="False"/>
  summary: <p>Return the type of content in this message body. </p>
  syntax: public MessageBodyType getBodyType()
  uid: com.microsoft.azure.servicebus.MessageBody.getBodyType()
- fullName: com.microsoft.azure.servicebus.MessageBody.getSequenceData()
  name: getSequenceData()
  nameWithType: MessageBody.getSequenceData()
  returns:
    description: <p>a list of AMQPSequence sections only if the MessageBody is of Sequence type. Returns null otherwise. Each AMQPSequence section is in turn a list of objects. </p>
    type: <xref href="List%3CList%3CObject%3E%3E?alt=List%3CList%3CObject%3E%3E&text=List%3CList%3CObject%3E%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Returns the content of message body. </p>
  syntax: public List<List<Object>> getSequenceData()
  uid: com.microsoft.azure.servicebus.MessageBody.getSequenceData()
- fullName: com.microsoft.azure.servicebus.MessageBody.getValueData()
  name: getValueData()
  nameWithType: MessageBody.getValueData()
  returns:
    description: <p>value of message body only if the MessageBody is of Value type. Returns null otherwise. </p>
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: <p>Returns the content of message body. </p>
  syntax: public Object getValueData()
  uid: com.microsoft.azure.servicebus.MessageBody.getValueData()
nameWithType: MessageBody
syntax: public class MessageBody
type: class
uid: com.microsoft.azure.servicebus.MessageBody
fullName: com.microsoft.azure.servicebus.MessageBody
name: MessageBody
package: com.microsoft.azure.servicebus
summary: <p>This class encapsulates the body of a message. Body types map to AMQP message body types. It has getters and setters for multiple body types. Client should test for body type before calling corresponding get method. Get methods not corresponding to the type of the body return null. </p>
metadata: {}
