### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String kid)
  name: RsaKey(String kid)
  nameWithType: RsaKey.RsaKey(String kid)
  parameters:
  - name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public RsaKey(String kid)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String kid, int keySize)
  name: RsaKey(String kid, int keySize)
  nameWithType: RsaKey.RsaKey(String kid, int keySize)
  parameters:
  - name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keySize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public RsaKey(String kid, int keySize)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String,int)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String kid, int keySize, Provider provider)
  name: RsaKey(String kid, int keySize, Provider provider)
  nameWithType: RsaKey.RsaKey(String kid, int keySize, Provider provider)
  parameters:
  - name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keySize
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  syntax: public RsaKey(String kid, int keySize, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String,int,Provider)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String kid, KeyPair keyPair)
  name: RsaKey(String kid, KeyPair keyPair)
  nameWithType: RsaKey.RsaKey(String kid, KeyPair keyPair)
  parameters:
  - name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyPair
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  syntax: public RsaKey(String kid, KeyPair keyPair)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String,KeyPair)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String kid, KeyPair keyPair, Provider provider)
  name: RsaKey(String kid, KeyPair keyPair, Provider provider)
  nameWithType: RsaKey.RsaKey(String kid, KeyPair keyPair, Provider provider)
  parameters:
  - name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: keyPair
    type: <xref href="KeyPair?alt=KeyPair&text=KeyPair" data-throw-if-not-resolved="False"/>
  - name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  syntax: public RsaKey(String kid, KeyPair keyPair, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.RsaKey(String,KeyPair,Provider)
fields:
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.KeySize1024
  name: KeySize1024
  nameWithType: RsaKey.KeySize1024
  syntax: public static int KeySize1024= 1024
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.KeySize1024
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.KeySize2048
  name: KeySize2048
  nameWithType: RsaKey.KeySize2048
  syntax: public static int KeySize2048= 2048
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.KeySize2048
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Closeable" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.keyvault.core.IKey?alt=com.microsoft.azure.keyvault.core.IKey&text=IKey" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.close()
  name: close()
  nameWithType: RsaKey.close()
  syntax: public void close()
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.close()
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  name: decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  nameWithType: RsaKey.decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.decryptAsync(final byte [],final byte [],final byte [],final byte [],final String)
  parameters:
  - description: <p>The cipher text to decrypt </p>
    name: ciphertext
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector (optional with some algorithms) </p>
    name: iv
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Additional authentication data (optional with some algorithms) </p>
    name: authenticationData
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The authentication tag from the encrypt operation (optional with some algorithms) </p>
    name: authenticationTag
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The encryption algorithm to use, must be supplied </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the plain text </p>
    type: <xref href="ListenableFuture%3Cbyte%5B%5D%3E?alt=ListenableFuture%3Cbyte%5B%5D%3E&text=ListenableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Decrypts the specified cipher text. Note that not all algorithms require, or support, all parameters.</p>

    <p></p>
  syntax: public ListenableFuture<byte[]> decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.decryptAsync(final byte [],final byte [],final byte [],final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  name: encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  nameWithType: RsaKey.encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.encryptAsync(final byte [],final byte [],final byte [],final String)
  parameters:
  - description: <p>The plain text to encrypt </p>
    name: plaintext
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector (optional with some algorithms) </p>
    name: iv
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Additional authentication data (optional with some algorithms) </p>
    name: authenticationData
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The encryption algorithm to use, defaults to the keys DefaultEncryptionAlgorithm </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the cipher text, the authentication tag and the algorithm that was used </p>
    type: <xref href="ListenableFuture%3CTriple%3Cbyte%5B%5D%2C+byte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CTriple%3Cbyte%5B%5D%2C+byte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CTriple%3Cbyte%5B%5D%2C+byte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Encrypts the specified plain text. Note that not all algorithms require, or support, all parameters.</p>

    <p></p>
  syntax: public ListenableFuture<Triple<byte[], byte[], String>> encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.encryptAsync(final byte [],final byte [],final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultEncryptionAlgorithm()
  name: getDefaultEncryptionAlgorithm()
  nameWithType: RsaKey.getDefaultEncryptionAlgorithm()
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultEncryptionAlgorithm()
  returns:
    description: <p>The default encryption algorithm for this key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The default encryption algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>

    <p></p>
  syntax: public String getDefaultEncryptionAlgorithm()
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultEncryptionAlgorithm()
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultKeySize()
  name: getDefaultKeySize()
  nameWithType: RsaKey.getDefaultKeySize()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public static int getDefaultKeySize()
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultKeySize()
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultKeyWrapAlgorithm()
  name: getDefaultKeyWrapAlgorithm()
  nameWithType: RsaKey.getDefaultKeyWrapAlgorithm()
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultKeyWrapAlgorithm()
  returns:
    description: <p>The default key wrap algorithm for this key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The default key wrap algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>

    <p></p>
  syntax: public String getDefaultKeyWrapAlgorithm()
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultKeyWrapAlgorithm()
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultSignatureAlgorithm()
  name: getDefaultSignatureAlgorithm()
  nameWithType: RsaKey.getDefaultSignatureAlgorithm()
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultSignatureAlgorithm()
  returns:
    description: <p>The default signature algorithm for this key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The default signature algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>

    <p></p>
  syntax: public String getDefaultSignatureAlgorithm()
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.getDefaultSignatureAlgorithm()
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.getKid()
  name: getKid()
  nameWithType: RsaKey.getKid()
  overridden: com.microsoft.azure.keyvault.core.IKey.getKid()
  returns:
    description: <p>The key identifier </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The unique key identifier for this key.</p>

    <p></p>
  syntax: public String getKid()
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.getKid()
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.signAsync(final byte[] digest, final String algorithm)
  name: signAsync(final byte[] digest, final String algorithm)
  nameWithType: RsaKey.signAsync(final byte[] digest, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte [],final String)
  parameters:
  - description: <p>The digest to sign </p>
    name: digest
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature algorithm to use </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
    type: <xref href="ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs the specified digest using the specified algorithm, or the keys DefaultSignatureAlgorithm if no algorithm is specified.</p>

    <p></p>
  syntax: public ListenableFuture<Pair<byte[], String>> signAsync(final byte[] digest, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.signAsync(final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  name: unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  nameWithType: RsaKey.unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.unwrapKeyAsync(final byte [],final String)
  parameters:
  - description: <p>The encrypted key to decrypt </p>
    name: encryptedKey
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The algorithm to use, must be supplied </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the unwrapped key </p>
    type: <xref href="ListenableFuture%3Cbyte%5B%5D%3E?alt=ListenableFuture%3Cbyte%5B%5D%3E&text=ListenableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unwraps (decrypts) the specified encryped key material.</p>

    <p></p>
  syntax: public ListenableFuture<byte[]> unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.unwrapKeyAsync(final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  name: verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  nameWithType: RsaKey.verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.verifyAsync(final byte [],final byte [],final String)
  parameters:
  - description: <p>The digest input </p>
    name: digest
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature to verify </p>
    name: signature
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The algorithm to use, must be provided </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
    type: <xref href="ListenableFuture%3CBoolean%3E?alt=ListenableFuture%3CBoolean%3E&text=ListenableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Verifies the supplied signature value using the supplied digest and algorithm.</p>

    <p></p>
  syntax: public ListenableFuture<Boolean> verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.verifyAsync(final byte [],final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.RsaKey.wrapKeyAsync(final byte[] key, final String algorithm)
  name: wrapKeyAsync(final byte[] key, final String algorithm)
  nameWithType: RsaKey.wrapKeyAsync(final byte[] key, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.wrapKeyAsync(final byte [],final String)
  parameters:
  - description: <p>The symmetric key to wrap </p>
    name: key
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The wrapping algorithm to use, defaults to the keys DefaultKeyWrapAlgorithm </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>ListenableFuture containing the encrypted key and the algorithm that was used </p>
    type: <xref href="ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Wraps (encrypts) the specified symmetric key material using the specified algorithm, or the keys DefaultKeyWrapAlgorithm if none is specified.</p>

    <p></p>
  syntax: public ListenableFuture<Pair<byte[], String>> wrapKeyAsync(final byte[] key, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.RsaKey.wrapKeyAsync(final byte [],final String)
nameWithType: RsaKey
syntax: public class RsaKey implements IKey
type: class
uid: com.microsoft.azure.keyvault.cryptography.RsaKey
fullName: com.microsoft.azure.keyvault.cryptography.RsaKey
name: RsaKey
package: com.microsoft.azure.keyvault.cryptography
metadata: {}
