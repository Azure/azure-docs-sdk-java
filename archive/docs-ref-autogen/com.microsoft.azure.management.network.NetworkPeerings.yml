### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByParent.deleteByParent(String,String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByParent.deleteByParentAsync(String,String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByParent.deleteByParentAsync(String,String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetwork(Network network)
  name: getByRemoteNetwork(Network network)
  nameWithType: NetworkPeerings.getByRemoteNetwork(Network network)
  parameters:
  - description: <p>an existing network </p>
    name: network
    type: <xref href="com.microsoft.azure.management.network.Network?alt=com.microsoft.azure.management.network.Network&text=Network" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a network peering, or null if none exists </p>
    type: <xref href="com.microsoft.azure.management.network.NetworkPeering?alt=com.microsoft.azure.management.network.NetworkPeering&text=NetworkPeering" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Finds the peering, if any, that is associated with the specified network. </p>

    <p>(Note that this makes a separate call to Azure.) </p>
  syntax: public NetworkPeering getByRemoteNetwork(Network network)
  uid: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetwork(Network)
- fullName: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetwork(String remoteNetworkResourceId)
  name: getByRemoteNetwork(String remoteNetworkResourceId)
  nameWithType: NetworkPeerings.getByRemoteNetwork(String remoteNetworkResourceId)
  parameters:
  - description: <p>the resource ID of an existing network </p>
    name: remoteNetworkResourceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a network peering, or null if none exists </p>
    type: <xref href="com.microsoft.azure.management.network.NetworkPeering?alt=com.microsoft.azure.management.network.NetworkPeering&text=NetworkPeering" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Finds the peering, if any, that is associated with the specified network. </p>

    <p>(Note that this makes a separate call to Azure.) </p>
  syntax: public NetworkPeering getByRemoteNetwork(String remoteNetworkResourceId)
  uid: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetwork(String)
- fullName: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetworkAsync(Network network)
  name: getByRemoteNetworkAsync(Network network)
  nameWithType: NetworkPeerings.getByRemoteNetworkAsync(Network network)
  parameters:
  - description: <p>an existing network </p>
    name: network
    type: <xref href="com.microsoft.azure.management.network.Network?alt=com.microsoft.azure.management.network.Network&text=Network" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, evaluating to null if no such peering is found </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.network.NetworkPeering?alt=com.microsoft.azure.management.network.NetworkPeering&text=NetworkPeering" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously finds the peering, if any, that is associated with the specified network. </p>

    <p>(Note that this makes a separate call to Azure.) </p>
  syntax: public Observable<NetworkPeering> getByRemoteNetworkAsync(Network network)
  uid: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetworkAsync(Network)
- fullName: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetworkAsync(String remoteNetworkResourceId)
  name: getByRemoteNetworkAsync(String remoteNetworkResourceId)
  nameWithType: NetworkPeerings.getByRemoteNetworkAsync(String remoteNetworkResourceId)
  parameters:
  - description: <p>the resource ID of an existing network </p>
    name: remoteNetworkResourceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call, evaluating to null if no such peering is found </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.network.NetworkPeering?alt=com.microsoft.azure.management.network.NetworkPeering&text=NetworkPeering" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously finds the peering, if any, that is associated with the specified network. </p>

    <p>(Note that this makes a separate call to Azure.) </p>
  syntax: public Observable<NetworkPeering> getByRemoteNetworkAsync(String remoteNetworkResourceId)
  uid: com.microsoft.azure.management.network.NetworkPeerings.getByRemoteNetworkAsync(String)
nameWithType: NetworkPeerings
syntax: public interface NetworkPeerings extends SupportsCreating<NetworkPeering.DefinitionStages.Blank>,SupportsDeletingById,SupportsGettingById<NetworkPeering>,SupportsBatchCreation<NetworkPeering>,SupportsDeletingByParent,SupportsListing<NetworkPeering>,HasManager<NetworkManager>,HasInner<VirtualNetworkPeeringsInner>
type: interface
uid: com.microsoft.azure.management.network.NetworkPeerings
fullName: com.microsoft.azure.management.network.NetworkPeerings
name: NetworkPeerings
package: com.microsoft.azure.management.network
summary: <p>Entry point to network peering management API. </p>
metadata: {}
