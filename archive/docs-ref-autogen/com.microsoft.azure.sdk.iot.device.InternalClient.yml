### YamlMime:JavaType
fields:
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.sdk.iot.device.InternalClient.DEFAULT_TIMEOUT_MILLISECONDS
  name: DEFAULT_TIMEOUT_MILLISECONDS
  nameWithType: InternalClient.DEFAULT_TIMEOUT_MILLISECONDS
  syntax: protected static final int DEFAULT_TIMEOUT_MILLISECONDS= 60 * 1000
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.DEFAULT_TIMEOUT_MILLISECONDS
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.close()
  name: close()
  nameWithType: InternalClient.close()
  summary: <p>Close the client. </p>
  syntax: public void close()
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.close()
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
  name: getConfig()
  nameWithType: InternalClient.getConfig()
  returns:
    description: <p>the value of the config. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientConfiguration?alt=com.microsoft.azure.sdk.iot.device.ClientConfiguration&text=ClientConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Getter for the device client config.</p>

    <p></p>
  syntax: public ClientConfiguration getConfig()
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
  name: getProductInfo()
  nameWithType: InternalClient.getProductInfo()
  returns:
    type: <xref href="com.microsoft.azure.sdk.iot.device.ProductInfo?alt=com.microsoft.azure.sdk.iot.device.ProductInfo&text=ProductInfo" data-throw-if-not-resolved="False"/>
  syntax: public ProductInfo getProductInfo()
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwin()
  name: getTwin()
  nameWithType: InternalClient.getTwin()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the getTwin request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  returns:
    description: <p>The twin for this client </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.Twin?alt=com.microsoft.azure.sdk.iot.device.twin.Twin&text=Twin" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the twin for this client. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public Twin getTwin()
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwin()
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwin(int timeoutMilliseconds)
  name: getTwin(int timeoutMilliseconds)
  nameWithType: InternalClient.getTwin(int timeoutMilliseconds)
  parameters:
  - description: <p>The maximum number of milliseconds this call will wait for the service to return the twin. If 0, then it will wait indefinitely. </p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the getTwin request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  returns:
    description: <p>The twin for this client </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.Twin?alt=com.microsoft.azure.sdk.iot.device.twin.Twin&text=Twin" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the twin for this client. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public Twin getTwin(int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwin(int)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  name: getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  nameWithType: InternalClient.getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  parameters:
  - description: <p>The callback to be executed once the twin is received from the service. </p>
    name: twinCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.GetTwinCallback?alt=com.microsoft.azure.sdk.iot.device.twin.GetTwinCallback&text=GetTwinCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in the callback of twinCallback. May be null. </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  summary: >-
    <p>Get the twin for this client asynchronously. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public void getTwinAsync(GetTwinCallback twinCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  name: getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  nameWithType: InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  parameters:
  - description: <p>The callback to be executed once the state of the getTwin request message has changed. This provides context on when the message is queued, sent, acknowledged, etc. </p>
    name: twinCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.GetTwinCorrelatingMessageCallback?alt=com.microsoft.azure.sdk.iot.device.twin.GetTwinCorrelatingMessageCallback&text=GetTwinCorrelatingMessageCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in each callback of twinCallback. May be null. </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  summary: >-
    <p>Get the twin for this client asynchronously. This client must have subscribed to desired properties before this method can be called.</p>

    <p>This overload utilizes a more verbose callback than <xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback,Object)" data-throw-if-not-resolved="false" data-raw-source="getTwinAsync(GetTwinCallback, Object)"></xref> and is only intended for users who need insight on the state of this process every step of the way. </p>

    <p></p>
  syntax: public void getTwinAsync(GetTwinCorrelatingMessageCallback twinCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.open(boolean withRetry)
  name: open(boolean withRetry)
  nameWithType: InternalClient.open(boolean withRetry)
  parameters:
  - description: <p>if true, this open call will apply the retry policy to allow for the open call to be retried if it fails. Both the operation timeout set in <xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)" data-throw-if-not-resolved="false" data-raw-source="setOperationTimeout(long)"></xref> and the retry policy set in {<xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)" data-throw-if-not-resolved="false" data-raw-source="setRetryPolicy(RetryPolicy)"></xref>} will be respected while retrying to open the connection.</p>
    name: withRetry
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if a connection to an IoT hub cannot be established or if the connection can be established but the service rejects it for any reason. </p>
  summary: >-
    <p>Starts asynchronously sending and receiving messages from an IoT hub. If the client is already open, the function shall do nothing.</p>

    <p></p>
  syntax: public void open(boolean withRetry)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.open(boolean)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message message)
  name: sendEvent(Message message)
  nameWithType: InternalClient.sendEvent(Message message)
  parameters:
  - description: <p>the message to be sent.</p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Synchronously sends a message to IoT hub.</p>

    <p></p>
  syntax: public void sendEvent(Message message)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message message, int timeoutMilliseconds)
  name: sendEvent(Message message, int timeoutMilliseconds)
  nameWithType: InternalClient.sendEvent(Message message, int timeoutMilliseconds)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of milliseconds to wait for the service to acknowledge this message. If 0, then it will wait indefinitely.</p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Synchronously sends a message to IoT hub.</p>

    <p></p>
  syntax: public void sendEvent(Message message, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message,int)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  name: sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  nameWithType: InternalClient.sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the callback to be invoked when a response is received. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageSentCallback?alt=com.microsoft.azure.sdk.iot.device.MessageSentCallback&text=MessageSentCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>a context to be passed to the callback. Can be <code>null 

          </code> if no callback is provided.</p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the message provided is<code>null 

          </code> . </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  summary: >-
    <p>Asynchronously sends a message to IoT hub.</p>

    <p></p>
  syntax: public void sendEventAsync(Message message, MessageSentCallback callback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message,MessageSentCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message> messages)
  name: sendEvents(List<Message> messages)
  nameWithType: InternalClient.sendEvents(List<Message> messages)
  parameters:
  - description: <p>the messages to be sent.</p>
    name: messages
    type: List&lt;<xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if the client is not using HTTPS. </p>
  summary: >-
    <p>Synchronously sends a batch of messages to IoT hub</p>

    <p>This operation is only supported over HTTPS.</p>

    <p>Maximum payload size for HTTPS is 255KB</p>

    <p></p>
  syntax: public void sendEvents(List<Message> messages)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message>)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message> messages, int timeoutMilliseconds)
  name: sendEvents(List<Message> messages, int timeoutMilliseconds)
  nameWithType: InternalClient.sendEvents(List<Message> messages, int timeoutMilliseconds)
  parameters:
  - description: <p>the messages to be sent. </p>
    name: messages
    type: List&lt;<xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>The maximum number of milliseconds to wait for the service to acknowledge this batch message. If 0, then it will wait indefinitely.</p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the telemetry to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if the client is not using HTTPS. </p>
  summary: >-
    <p>Synchronously sends a batch of messages to IoT hub</p>

    <p>This operation is only supported over HTTPS.</p>

    <p>Maximum payload size for HTTPS is 255KB</p>

    <p></p>
  syntax: public void sendEvents(List<Message> messages, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message>,int)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventsAsync(List<Message> messages, MessagesSentCallback callback, Object callbackContext)
  name: sendEventsAsync(List<Message> messages, MessagesSentCallback callback, Object callbackContext)
  nameWithType: InternalClient.sendEventsAsync(List<Message> messages, MessagesSentCallback callback, Object callbackContext)
  parameters:
  - description: <p>the list of message to be sent. </p>
    name: messages
    type: List&lt;<xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>&gt;
  - description: >-
      <p>the callback to be invoked when a response is received. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessagesSentCallback?alt=com.microsoft.azure.sdk.iot.device.MessagesSentCallback&text=MessagesSentCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>a context to be passed to the callback. Can be <code>null 

          </code> if no callback is provided.</p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the message provided is<code>null 

          </code> . </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if the client has not been opened yet or is already closed. </p>
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if the client is not using HTTPS. </p>
  summary: >-
    <p>Asynchronously sends a batch of messages to the IoT hub</p>

    <p>This operation is only supported over HTTPS. This API call is an all-or-nothing single HTTPS message and the callback will be triggered once this batch message has been sent.</p>

    <p>Maximum payload size for HTTPS is 255KB</p>

    <p></p>
  syntax: public void sendEventsAsync(List<Message> messages, MessagesSentCallback callback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.sendEventsAsync(List<Message>,MessagesSentCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  name: setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  nameWithType: InternalClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  parameters:
  - description: <p>The callback to be fired when the connection status of the device changes. Can be null to unset this listener as long as the provided callbackContext is also null. </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>a context to be passed to the callback. Can be<code>null 

          </code> . </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the callback to be executed when the connection status of the device changes. The callback will be fired with a status and a reason why the device's status changed. When the callback is fired, the provided context will be provided alongside the status and reason.</p>

    <p>This connection status callback is not triggered by any upstream connection change events. For example, if if the connection status callback is set for a module on an IoT Edge device and that IoT Edge device loses connection to the cloud, this connection status callback won't onStatusChanged since the connection between the module and the IoT Edge device hasn't changed.</p>

    <p>Note that the thread used to deliver this callback should not be used to call open()/closeNow() on the client that this callback belongs to. All open()/close() operations should be done on a separate thread</p>

    <p></p>
  syntax: public void setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long timeout)
  name: setOperationTimeout(long timeout)
  nameWithType: InternalClient.setOperationTimeout(long timeout)
  parameters:
  - description: <p>the length in time, in milliseconds, until a given operation shall expire </p>
    name: timeout
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if the provided timeout is 0 or negative </p>
  summary: <p>Set the length of time, in milliseconds, that any given operation will expire in. These operations include reconnecting upon a connection drop and sending a message. </p>
  syntax: public void setOperationTimeout(long timeout)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy retryPolicy)
  name: setRetryPolicy(RetryPolicy retryPolicy)
  nameWithType: InternalClient.setRetryPolicy(RetryPolicy retryPolicy)
  parameters:
  - description: <p>the new interval in milliseconds </p>
    name: retryPolicy
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the given retry policy on the underlying transport <a href="https://github.com/Azure/azure-iot-sdk-java/blob/main/device/iot-device-client/devdoc/requirement_docs/com/microsoft/azure/iothub/retryPolicy.md">See more details about the default retry policy and about using custom retry policies here</a></p>
  syntax: public void setRetryPolicy(RetryPolicy retryPolicy)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext)
  name: subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext)
  nameWithType: InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext)
  parameters:
  - description: <p>The callback to execute each time a desired property update message is received from the service. This will contain one or many properties updated at once. </p>
    name: desiredPropertiesCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.DesiredPropertiesCallback?alt=com.microsoft.azure.sdk.iot.device.twin.DesiredPropertiesCallback&text=DesiredPropertiesCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in the callback of desiredPropertiesCallback. May be null. </p>
    name: desiredPropertiesCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the subscription request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Start receiving desired property updates for this client. After subscribing to desired properties, this client can freely send reported property updates and make getTwin calls.</p>

    <p></p>
  syntax: public void subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, int timeoutMilliseconds)
  name: subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, int timeoutMilliseconds)
  nameWithType: InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, int timeoutMilliseconds)
  parameters:
  - description: <p>The callback to execute each time a desired property update message is received from the service. This will contain one or many properties updated at once. </p>
    name: desiredPropertiesCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.DesiredPropertiesCallback?alt=com.microsoft.azure.sdk.iot.device.twin.DesiredPropertiesCallback&text=DesiredPropertiesCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in the callback of desiredPropertiesCallback. May be null. </p>
    name: desiredPropertiesCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of milliseconds this call will wait for the service to acknowledge the subscription request. If 0, then it will wait indefinitely. </p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the subscription request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Start receiving desired property updates for this client. After subscribing to desired properties, this client can freely send reported property updates and make getTwin calls.</p>

    <p></p>
  syntax: public void subscribeToDesiredProperties(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback,Object,int)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, SubscriptionAcknowledgedCallback subscriptionAcknowledgedCallback, Object desiredPropertiesSubscriptionCallbackContext)
  name: subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, SubscriptionAcknowledgedCallback subscriptionAcknowledgedCallback, Object desiredPropertiesSubscriptionCallbackContext)
  nameWithType: InternalClient.subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, SubscriptionAcknowledgedCallback subscriptionAcknowledgedCallback, Object desiredPropertiesSubscriptionCallbackContext)
  parameters:
  - description: <p>The callback to execute each time a desired property update message is received from the service. This will contain one or many properties updated at once. </p>
    name: desiredPropertiesCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.DesiredPropertiesCallback?alt=com.microsoft.azure.sdk.iot.device.twin.DesiredPropertiesCallback&text=DesiredPropertiesCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in each callback of desiredPropertiesCallback. May be null. </p>
    name: desiredPropertiesCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to execute once the service has acknowledged the subscription request. </p>
    name: subscriptionAcknowledgedCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.SubscriptionAcknowledgedCallback?alt=com.microsoft.azure.sdk.iot.device.twin.SubscriptionAcknowledgedCallback&text=SubscriptionAcknowledgedCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in the callback of desiredPropertiesSubscriptionCallback. May be null. </p>
    name: desiredPropertiesSubscriptionCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open. </p>
  summary: >-
    <p>Start receiving desired property updates for this client asynchronously. After subscribing to desired properties, this client can freely send reported property updates and make getTwin calls.</p>

    <p></p>
  syntax: public void subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback desiredPropertiesCallback, Object desiredPropertiesCallbackContext, SubscriptionAcknowledgedCallback subscriptionAcknowledgedCallback, Object desiredPropertiesSubscriptionCallbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback,Object,SubscriptionAcknowledgedCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext)
  name: subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext)
  nameWithType: InternalClient.subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext)
  parameters:
  - description: >-
      <p>Callback on which direct methods shall be invoked. Cannot be<code>null 

          </code> . </p>
    name: methodCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.MethodCallback?alt=com.microsoft.azure.sdk.iot.device.twin.MethodCallback&text=MethodCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Context for device method callback. Can be<code>null 

          </code> .</p>
    name: methodCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the subscription request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Subscribes to direct methods</p>

    <p></p>
  syntax: public void subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext, int timeoutMilliseconds)
  name: subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext, int timeoutMilliseconds)
  nameWithType: InternalClient.subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext, int timeoutMilliseconds)
  parameters:
  - description: >-
      <p>Callback on which direct methods shall be invoked. Cannot be<code>null 

          </code> . </p>
    name: methodCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.MethodCallback?alt=com.microsoft.azure.sdk.iot.device.twin.MethodCallback&text=MethodCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Context for device method callback. Can be<code>null 

          </code> . </p>
    name: methodCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of milliseconds this call will wait for the service to return the twin. If 0, then it will wait indefinitely.</p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the subscription request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  summary: >-
    <p>Subscribes to direct methods</p>

    <p></p>
  syntax: public void subscribeToMethods(MethodCallback methodCallback, Object methodCallbackContext, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback,Object,int)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethodsAsync(MethodCallback methodCallback, Object methodCallbackContext, SubscriptionAcknowledgedCallback methodStatusCallback, Object methodStatusCallbackContext)
  name: subscribeToMethodsAsync(MethodCallback methodCallback, Object methodCallbackContext, SubscriptionAcknowledgedCallback methodStatusCallback, Object methodStatusCallbackContext)
  nameWithType: InternalClient.subscribeToMethodsAsync(MethodCallback methodCallback, Object methodCallbackContext, SubscriptionAcknowledgedCallback methodStatusCallback, Object methodStatusCallbackContext)
  parameters:
  - description: >-
      <p>Callback on which direct methods shall be invoked. Cannot be<code>null 

          </code> . </p>
    name: methodCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.MethodCallback?alt=com.microsoft.azure.sdk.iot.device.twin.MethodCallback&text=MethodCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Context for device method callback. Can be<code>null 

          </code> . </p>
    name: methodCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Callback for providing IotHub status for direct methods. Cannot be<code>null 

          </code> . </p>
    name: methodStatusCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.SubscriptionAcknowledgedCallback?alt=com.microsoft.azure.sdk.iot.device.twin.SubscriptionAcknowledgedCallback&text=SubscriptionAcknowledgedCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>Context for device method status callback. Can be<code>null 

          </code> .</p>
    name: methodStatusCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if called when client is not opened. </p>
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if either callback are null. </p>
  summary: >-
    <p>Subscribes to direct methods</p>

    <p></p>
  syntax: public void subscribeToMethodsAsync(MethodCallback methodCallback, Object methodCallbackContext, SubscriptionAcknowledgedCallback methodStatusCallback, Object methodStatusCallbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethodsAsync(MethodCallback,Object,SubscriptionAcknowledgedCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection reportedProperties)
  name: updateReportedProperties(TwinCollection reportedProperties)
  nameWithType: InternalClient.updateReportedProperties(TwinCollection reportedProperties)
  parameters:
  - description: <p>The reported property key/value pairs to add/update in the twin. To delete a particular reported property, set the value to null. </p>
    name: reportedProperties
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.device.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the reported property update request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  returns:
    description: <p>The new reported properties version. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesUpdateResponse?alt=com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesUpdateResponse&text=ReportedPropertiesUpdateResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch this client's twin with the provided reported properties. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public ReportedPropertiesUpdateResponse updateReportedProperties(TwinCollection reportedProperties)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection reportedProperties, int timeoutMilliseconds)
  name: updateReportedProperties(TwinCollection reportedProperties, int timeoutMilliseconds)
  nameWithType: InternalClient.updateReportedProperties(TwinCollection reportedProperties, int timeoutMilliseconds)
  parameters:
  - description: <p>The reported property key/value pairs to add/update in the twin. To delete a particular reported property, set the value to null. </p>
    name: reportedProperties
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.device.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of milliseconds this call will wait for the service to acknowledge the reported properties update request. If 0, then it will wait indefinitely. </p>
    name: timeoutMilliseconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the operation is interrupted while waiting on the reported property update request to be acknowledged by the service. </p>
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if the request is rejected by the service for any reason of if the synchronous operation times out. </p>
  returns:
    description: <p>The new reported properties version. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesUpdateResponse?alt=com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesUpdateResponse&text=ReportedPropertiesUpdateResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Patch this client's twin with the provided reported properties. This client must have subscribed to desired properties before this method can be called. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public ReportedPropertiesUpdateResponse updateReportedProperties(TwinCollection reportedProperties, int timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection,int)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesCallback reportedPropertiesCallback, Object callbackContext)
  name: updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesCallback reportedPropertiesCallback, Object callbackContext)
  nameWithType: InternalClient.updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesCallback reportedPropertiesCallback, Object callbackContext)
  parameters:
  - description: <p>The reported property key/value pairs to add/update in the twin. To delete a particular reported property, set the value to null. </p>
    name: reportedProperties
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.device.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed once the reported properties update request has been acknowledged by the service. </p>
    name: reportedPropertiesCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesCallback?alt=com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesCallback&text=ReportedPropertiesCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in the callback of reportedPropertiesCallback. May be null. </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  summary: >-
    <p>Patch this client's twin with the provided reported properties asynchronously. This client must have subscribed to desired properties before this method can be called.</p>

    <p></p>
  syntax: public void updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesCallback reportedPropertiesCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesUpdateCorrelatingMessageCallback reportedPropertiesUpdateCorrelatingMessageCallback, Object callbackContext)
  name: updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesUpdateCorrelatingMessageCallback reportedPropertiesUpdateCorrelatingMessageCallback, Object callbackContext)
  nameWithType: InternalClient.updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesUpdateCorrelatingMessageCallback reportedPropertiesUpdateCorrelatingMessageCallback, Object callbackContext)
  parameters:
  - description: <p>The reported property key/value pairs to add/update in the twin. To delete a particular reported property, set the value to null. </p>
    name: reportedProperties
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.device.twin.TwinCollection&text=TwinCollection" data-throw-if-not-resolved="False"/>
  - description: <p>The callback to be executed once the state of the reported properties update request message has changed. This provides context on when the message is queued, sent, acknowledged, etc. </p>
    name: reportedPropertiesUpdateCorrelatingMessageCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesUpdateCorrelatingMessageCallback?alt=com.microsoft.azure.sdk.iot.device.twin.ReportedPropertiesUpdateCorrelatingMessageCallback&text=ReportedPropertiesUpdateCorrelatingMessageCallback" data-throw-if-not-resolved="False"/>
  - description: <p>The context that will be included in each callback of updateReportedPropertiesCallback. May be null. </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalStateException?alt=IllegalStateException&text=IllegalStateException" data-throw-if-not-resolved="False"/>
    description: <p>if this client is not open or if this client has not subscribed to desired properties yet. </p>
  summary: >-
    <p>Patch this client's twin with the provided reported properties asynchronously. This client must have subscribed to desired properties before this method can be called.</p>

    <p>This overload utilizes a more verbose callback than <xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesCallback,Object)" data-throw-if-not-resolved="false" data-raw-source="updateReportedPropertiesAsync(TwinCollection, ReportedPropertiesCallback, Object)"></xref> and is only intended for users who need insight on the state of this process every step of the way. </p>

    <p></p>
  syntax: public void updateReportedPropertiesAsync(TwinCollection reportedProperties, ReportedPropertiesUpdateCorrelatingMessageCallback reportedPropertiesUpdateCorrelatingMessageCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesUpdateCorrelatingMessageCallback,Object)
nameWithType: InternalClient
syntax: public class InternalClient
type: class
uid: com.microsoft.azure.sdk.iot.device.InternalClient
fullName: com.microsoft.azure.sdk.iot.device.InternalClient
name: InternalClient
package: com.microsoft.azure.sdk.iot.device
metadata: {}
