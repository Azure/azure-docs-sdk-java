### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT, InnerT>.convertToUnmodifiableMap(List<InnerT> innerList)
  name: convertToUnmodifiableMap(List<InnerT> innerList)
  nameWithType: ListToMapConverter<ImplT,InnerT>.convertToUnmodifiableMap(List<InnerT> innerList)
  parameters:
  - description: <p>list of the inners. </p>
    name: innerList
    type: <xref href="List%3CInnerT%3E?alt=List%3CInnerT%3E&text=List%3CInnerT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>map of the impls </p>
    type: <xref href="Map%3CString%2C+ImplT%3E?alt=Map%3CString%2C+ImplT%3E&text=Map%3CString%2C+ImplT%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Converts the passed list of inners to unmodifiable map of impls. </p>
  syntax: public Map<String, ImplT> convertToUnmodifiableMap(List<InnerT> innerList)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.convertToUnmodifiableMap(List<InnerT>)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT, InnerT>.impl(InnerT innerT)
  name: impl(InnerT innerT)
  nameWithType: ListToMapConverter<ImplT,InnerT>.impl(InnerT innerT)
  parameters:
  - name: innerT
    type: <xref href="InnerT?alt=InnerT&text=InnerT" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+ImplT?alt=abstract+ImplT&text=abstract+ImplT" data-throw-if-not-resolved="False"/>
  syntax: protected abstract ImplT impl(InnerT innerT)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.impl(InnerT)
- fullName: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT, InnerT>.name(InnerT innerT)
  name: name(InnerT innerT)
  nameWithType: ListToMapConverter<ImplT,InnerT>.name(InnerT innerT)
  parameters:
  - name: innerT
    type: <xref href="InnerT?alt=InnerT&text=InnerT" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+String?alt=abstract+String&text=abstract+String" data-throw-if-not-resolved="False"/>
  syntax: protected abstract String name(InnerT innerT)
  uid: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter.name(InnerT)
nameWithType: ListToMapConverter<ImplT,InnerT>
syntax: public class ListToMapConverter<ImplT,InnerT>
type: class
typeParameters:
- description: <p>implementation of the interface </p>
  name: ImplT
- description: <p>inner class which needs to be wrapped </p>
  name: InnerT
uid: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter
fullName: com.microsoft.azure.management.resources.fluentcore.utils.ListToMapConverter<ImplT,InnerT>
name: ListToMapConverter<ImplT,InnerT>
package: com.microsoft.azure.management.resources.fluentcore.utils
summary: <p>Utility class to convert a list of inners to map of implementation. </p>
metadata: {}
