### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.get(String accountName, UUID pipelineIdentity)
  name: get(String accountName, UUID pipelineIdentity)
  nameWithType: Pipelines.get(String accountName, UUID pipelineIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobPipelineInformation object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public JobPipelineInformation get(String accountName, UUID pipelineIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.get(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.get(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  name: get(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  nameWithType: Pipelines.get(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the JobPipelineInformation object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public JobPipelineInformation get(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.get(String,UUID,DateTime,DateTime)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String accountName, UUID pipelineIdentity)
  name: getAsync(String accountName, UUID pipelineIdentity)
  nameWithType: Pipelines.getAsync(String accountName, UUID pipelineIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobPipelineInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public Observable<JobPipelineInformation> getAsync(String accountName, UUID pipelineIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  name: getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  nameWithType: Pipelines.getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobPipelineInformation object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public Observable<JobPipelineInformation> getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String,UUID,DateTime,DateTime)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobPipelineInformation> serviceCallback)
  name: getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobPipelineInformation> serviceCallback)
  nameWithType: Pipelines.getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobPipelineInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public ServiceFuture<JobPipelineInformation> getAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime, final ServiceCallback<JobPipelineInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String,UUID,DateTime,DateTime,final ServiceCallback<JobPipelineInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String accountName, UUID pipelineIdentity, final ServiceCallback<JobPipelineInformation> serviceCallback)
  name: getAsync(String accountName, UUID pipelineIdentity, final ServiceCallback<JobPipelineInformation> serviceCallback)
  nameWithType: Pipelines.getAsync(String accountName, UUID pipelineIdentity, final ServiceCallback<JobPipelineInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public ServiceFuture<JobPipelineInformation> getAsync(String accountName, UUID pipelineIdentity, final ServiceCallback<JobPipelineInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.getAsync(String,UUID,final ServiceCallback<JobPipelineInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.getWithServiceResponseAsync(String accountName, UUID pipelineIdentity)
  name: getWithServiceResponseAsync(String accountName, UUID pipelineIdentity)
  nameWithType: Pipelines.getWithServiceResponseAsync(String accountName, UUID pipelineIdentity)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobPipelineInformation object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobPipelineInformation>> getWithServiceResponseAsync(String accountName, UUID pipelineIdentity)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.getWithServiceResponseAsync(String,UUID)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.getWithServiceResponseAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  name: getWithServiceResponseAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  nameWithType: Pipelines.getWithServiceResponseAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Pipeline ID. </p>
    name: pipelineIdentity
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the pipeline and aggregate its data. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the JobPipelineInformation object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the Pipeline information for the specified pipeline ID.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<JobPipelineInformation>> getWithServiceResponseAsync(String accountName, UUID pipelineIdentity, DateTime startDateTime, DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.getWithServiceResponseAsync(String,UUID,DateTime,DateTime)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.list(final String accountName)
  name: list(final String accountName)
  nameWithType: Pipelines.list(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPipelineInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public PagedList<JobPipelineInformation> list(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.list(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.list(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  name: list(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  nameWithType: Pipelines.list(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPipelineInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public PagedList<JobPipelineInformation> list(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.list(final String,final DateTime,final DateTime)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String accountName)
  name: listAsync(final String accountName)
  nameWithType: Pipelines.listAsync(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPipelineInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public Observable<Page<JobPipelineInformation>> listAsync(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  name: listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  nameWithType: Pipelines.listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPipelineInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public Observable<Page<JobPipelineInformation>> listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String,final DateTime,final DateTime)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  name: listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  nameWithType: Pipelines.listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPipelineInformation>> listAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String,final DateTime,final DateTime,final ListOperationCallback<JobPipelineInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String accountName, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  name: listAsync(final String accountName, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  nameWithType: Pipelines.listAsync(final String accountName, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPipelineInformation>> listAsync(final String accountName, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listAsync(final String,final ListOperationCallback<JobPipelineInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: Pipelines.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;JobPipelineInformation&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public PagedList<JobPipelineInformation> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: Pipelines.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPipelineInformation&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public Observable<Page<JobPipelineInformation>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listNextAsync(final String nextPageLink, final ServiceFuture<List<JobPipelineInformation>> serviceFuture, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<JobPipelineInformation>> serviceFuture, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  nameWithType: Pipelines.listNextAsync(final String nextPageLink, final ServiceFuture<List<JobPipelineInformation>> serviceFuture, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public ServiceFuture<List<JobPipelineInformation>> listNextAsync(final String nextPageLink, final ServiceFuture<List<JobPipelineInformation>> serviceFuture, final ListOperationCallback<JobPipelineInformation> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listNextAsync(final String,final ServiceFuture<List<JobPipelineInformation>>,final ListOperationCallback<JobPipelineInformation>)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Pipelines.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPipelineInformation&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<JobPipelineInformation>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listWithServiceResponseAsync(final String accountName)
  name: listWithServiceResponseAsync(final String accountName)
  nameWithType: Pipelines.listWithServiceResponseAsync(final String accountName)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPipelineInformation&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<JobPipelineInformation>>> listWithServiceResponseAsync(final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.Pipelines.listWithServiceResponseAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  name: listWithServiceResponseAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  nameWithType: Pipelines.listWithServiceResponseAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  parameters:
  - description: <p>The Azure Data Lake Analytics account to execute job operations on. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The start date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: startDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  - description: <p>The end date for when to get the list of pipelines. The startDateTime and endDateTime can be no more than 30 days apart. </p>
    name: endDateTime
    type: <xref href="final+DateTime?alt=final+DateTime&text=final+DateTime" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;JobPipelineInformation&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation?alt=com.microsoft.azure.management.datalake.analytics.models.JobPipelineInformation&text=JobPipelineInformation" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all pipelines.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<JobPipelineInformation>>> listWithServiceResponseAsync(final String accountName, final DateTime startDateTime, final DateTime endDateTime)
  uid: com.microsoft.azure.management.datalake.analytics.Pipelines.listWithServiceResponseAsync(final String,final DateTime,final DateTime)
nameWithType: Pipelines
syntax: public interface Pipelines
type: interface
uid: com.microsoft.azure.management.datalake.analytics.Pipelines
fullName: com.microsoft.azure.management.datalake.analytics.Pipelines
name: Pipelines
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in Pipelines. </p>
metadata: {}
