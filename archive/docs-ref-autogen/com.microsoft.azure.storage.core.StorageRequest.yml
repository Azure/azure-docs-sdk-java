### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.StorageRequest()
  name: StorageRequest()
  nameWithType: StorageRequest<C,P,R>.StorageRequest()
  summary: <p>Default Ctor. </p>
  syntax: protected StorageRequest()
  uid: com.microsoft.azure.storage.core.StorageRequest.StorageRequest()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.StorageRequest(final RequestOptions options, StorageUri storageUri)
  name: StorageRequest(final RequestOptions options, StorageUri storageUri)
  nameWithType: StorageRequest<C,P,R>.StorageRequest(final RequestOptions options, StorageUri storageUri)
  parameters:
  - description: <p>the RequestOptions to use </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  - name: storageUri
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the StorageRequest class.</p>

    <p></p>
  syntax: public StorageRequest(final RequestOptions options, StorageUri storageUri)
  uid: com.microsoft.azure.storage.core.StorageRequest.StorageRequest(final RequestOptions,StorageUri)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.applyLocationModeToRequest()
  name: applyLocationModeToRequest()
  nameWithType: StorageRequest<C,P,R>.applyLocationModeToRequest()
  syntax: public void applyLocationModeToRequest()
  uid: com.microsoft.azure.storage.core.StorageRequest.applyLocationModeToRequest()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.buildRequest(C client, P parentObject, OperationContext context)
  name: buildRequest(C client, P parentObject, OperationContext context)
  nameWithType: StorageRequest<C,P,R>.buildRequest(C client, P parentObject, OperationContext context)
  parameters:
  - name: client
    type: <xref href="C?alt=C&text=C" data-throw-if-not-resolved="False"/>
  - description: <p>Parent object, i.e. CloudBlobContainer for downloadAttributes etc. </p>
    name: parentObject
    type: <xref href="P?alt=P&text=P" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a HttpURLConnection configured for the operation. </p>
    type: <xref href="abstract+HttpURLConnection?alt=abstract+HttpURLConnection&text=abstract+HttpURLConnection" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Function to construct the request.</p>

    <p></p>
  syntax: public abstract HttpURLConnection buildRequest(C client, P parentObject, OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.buildRequest(C,P,OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getArePropertiesPopulated()
  name: getArePropertiesPopulated()
  nameWithType: StorageRequest<C,P,R>.getArePropertiesPopulated()
  returns:
    description: <p>the arePropertiesPopulated value </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean getArePropertiesPopulated()
  uid: com.microsoft.azure.storage.core.StorageRequest.getArePropertiesPopulated()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getConnection()
  name: getConnection()
  nameWithType: StorageRequest<C,P,R>.getConnection()
  returns:
    description: <p>the URL connection </p>
    type: <xref href="final+HttpURLConnection?alt=final+HttpURLConnection&text=final+HttpURLConnection" data-throw-if-not-resolved="False"/>
  syntax: public final HttpURLConnection getConnection()
  uid: com.microsoft.azure.storage.core.StorageRequest.getConnection()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getContentMD5()
  name: getContentMD5()
  nameWithType: StorageRequest<C,P,R>.getContentMD5()
  returns:
    description: <p>the ContentMD5 </p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  syntax: public final String getContentMD5()
  uid: com.microsoft.azure.storage.core.StorageRequest.getContentMD5()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getCurrentDescriptor()
  name: getCurrentDescriptor()
  nameWithType: StorageRequest<C,P,R>.getCurrentDescriptor()
  returns:
    description: <p>the current descriptor which contains the stream length and MD5 hash. </p>
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  syntax: protected StreamMd5AndLength getCurrentDescriptor()
  uid: com.microsoft.azure.storage.core.StorageRequest.getCurrentDescriptor()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getCurrentLocation()
  name: getCurrentLocation()
  nameWithType: StorageRequest<C,P,R>.getCurrentLocation()
  returns:
    description: <p>the current location to which the request will be sent. </p>
    type: <xref href="com.microsoft.azure.storage.StorageLocation?alt=com.microsoft.azure.storage.StorageLocation&text=StorageLocation" data-throw-if-not-resolved="False"/>
  syntax: public StorageLocation getCurrentLocation()
  uid: com.microsoft.azure.storage.core.StorageRequest.getCurrentLocation()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getCurrentRequestByteCount()
  name: getCurrentRequestByteCount()
  nameWithType: StorageRequest<C,P,R>.getCurrentRequestByteCount()
  returns:
    description: <p>the currentRequestByteCount </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long getCurrentRequestByteCount()
  uid: com.microsoft.azure.storage.core.StorageRequest.getCurrentRequestByteCount()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getETagLockCondition()
  name: getETagLockCondition()
  nameWithType: StorageRequest<C,P,R>.getETagLockCondition()
  returns:
    description: <p>the locked ETag condition </p>
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  syntax: public AccessCondition getETagLockCondition()
  uid: com.microsoft.azure.storage.core.StorageRequest.getETagLockCondition()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getException()
  name: getException()
  nameWithType: StorageRequest<C,P,R>.getException()
  returns:
    description: <p>the exception </p>
    type: final <xref href="com.microsoft.azure.storage.StorageException?alt=com.microsoft.azure.storage.StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  syntax: public final StorageException getException()
  uid: com.microsoft.azure.storage.core.StorageRequest.getException()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getLength()
  name: getLength()
  nameWithType: StorageRequest<C,P,R>.getLength()
  returns:
    description: <p>the length, in bytes, of the stream </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  syntax: public Long getLength()
  uid: com.microsoft.azure.storage.core.StorageRequest.getLength()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getLocationMode()
  name: getLocationMode()
  nameWithType: StorageRequest<C,P,R>.getLocationMode()
  returns:
    description: <p>the location mode used to decide which location the request should be sent to. </p>
    type: <xref href="com.microsoft.azure.storage.LocationMode?alt=com.microsoft.azure.storage.LocationMode&text=LocationMode" data-throw-if-not-resolved="False"/>
  syntax: public LocationMode getLocationMode()
  uid: com.microsoft.azure.storage.core.StorageRequest.getLocationMode()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getLockedETag()
  name: getLockedETag()
  nameWithType: StorageRequest<C,P,R>.getLockedETag()
  returns:
    description: <p>the locked ETag </p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  syntax: public final String getLockedETag()
  uid: com.microsoft.azure.storage.core.StorageRequest.getLockedETag()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getOffset()
  name: getOffset()
  nameWithType: StorageRequest<C,P,R>.getOffset()
  returns:
    description: <p>the offset to start reading from </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  syntax: public Long getOffset()
  uid: com.microsoft.azure.storage.core.StorageRequest.getOffset()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getRequestLocationMode()
  name: getRequestLocationMode()
  nameWithType: StorageRequest<C,P,R>.getRequestLocationMode()
  returns:
    description: <p>the location mode used to decide which location the request should be sent to. </p>
    type: <xref href="com.microsoft.azure.storage.core.RequestLocationMode?alt=com.microsoft.azure.storage.core.RequestLocationMode&text=RequestLocationMode" data-throw-if-not-resolved="False"/>
  syntax: public RequestLocationMode getRequestLocationMode()
  uid: com.microsoft.azure.storage.core.StorageRequest.getRequestLocationMode()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getRequestOptions()
  name: getRequestOptions()
  nameWithType: StorageRequest<C,P,R>.getRequestOptions()
  returns:
    description: <p>the requestOptions </p>
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  syntax: public final RequestOptions getRequestOptions()
  uid: com.microsoft.azure.storage.core.StorageRequest.getRequestOptions()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getResult()
  name: getResult()
  nameWithType: StorageRequest<C,P,R>.getResult()
  returns:
    description: <p>the result </p>
    type: final <xref href="com.microsoft.azure.storage.RequestResult?alt=com.microsoft.azure.storage.RequestResult&text=RequestResult" data-throw-if-not-resolved="False"/>
  syntax: public final RequestResult getResult()
  uid: com.microsoft.azure.storage.core.StorageRequest.getResult()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getSendStream()
  name: getSendStream()
  nameWithType: StorageRequest<C,P,R>.getSendStream()
  returns:
    description: <p>the stream to send to server </p>
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  syntax: public final InputStream getSendStream()
  uid: com.microsoft.azure.storage.core.StorageRequest.getSendStream()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.getStorageUri()
  name: getStorageUri()
  nameWithType: StorageRequest<C,P,R>.getStorageUri()
  returns:
    description: <p>the URI to which the request will be sent. </p>
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  syntax: public StorageUri getStorageUri()
  uid: com.microsoft.azure.storage.core.StorageRequest.getStorageUri()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.initialize(OperationContext opContext)
  name: initialize(OperationContext opContext)
  nameWithType: StorageRequest<C,P,R>.initialize(OperationContext opContext)
  parameters:
  - name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: <p>Resets the operation status flags between operations. </p>
  syntax: protected final void initialize(OperationContext opContext)
  uid: com.microsoft.azure.storage.core.StorageRequest.initialize(OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.initializeLocation()
  name: initializeLocation()
  nameWithType: StorageRequest<C,P,R>.initializeLocation()
  syntax: public void initializeLocation()
  uid: com.microsoft.azure.storage.core.StorageRequest.initializeLocation()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.isNonExceptionedRetryableFailure()
  name: isNonExceptionedRetryableFailure()
  nameWithType: StorageRequest<C,P,R>.isNonExceptionedRetryableFailure()
  returns:
    description: <p>the nonExceptionedRetryableFailure </p>
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  syntax: public final boolean isNonExceptionedRetryableFailure()
  uid: com.microsoft.azure.storage.core.StorageRequest.isNonExceptionedRetryableFailure()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.isSent()
  name: isSent()
  nameWithType: StorageRequest<C,P,R>.isSent()
  returns:
    description: <p>the isSent value </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: protected boolean isSent()
  uid: com.microsoft.azure.storage.core.StorageRequest.isSent()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.materializeException(final OperationContext opContext)
  name: materializeException(final OperationContext opContext)
  nameWithType: StorageRequest<C,P,R>.materializeException(final OperationContext opContext)
  parameters:
  - description: <p>an object used to track the execution of the operation </p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the exception to throw. </p>
    type: final <xref href="com.microsoft.azure.storage.StorageException?alt=com.microsoft.azure.storage.StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns either the held exception from the operation if it is set, otherwise the translated exception.</p>

    <p></p>
  syntax: protected final StorageException materializeException(final OperationContext opContext)
  uid: com.microsoft.azure.storage.core.StorageRequest.materializeException(final OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.parseErrorDetails()
  name: parseErrorDetails()
  nameWithType: StorageRequest<C,P,R>.parseErrorDetails()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageExtendedErrorInformation" data-throw-if-not-resolved="false" data-raw-source="StorageExtendedErrorInformation"></xref> object that represents the error details for the specified request. </p>
    type: <xref href="com.microsoft.azure.storage.StorageExtendedErrorInformation?alt=com.microsoft.azure.storage.StorageExtendedErrorInformation&text=StorageExtendedErrorInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns extended error information for this request.</p>

    <p></p>
  syntax: public StorageExtendedErrorInformation parseErrorDetails()
  uid: com.microsoft.azure.storage.core.StorageRequest.parseErrorDetails()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.postProcessResponse(HttpURLConnection connection, P parentObject, C client, OperationContext context, R storageObject)
  name: postProcessResponse(HttpURLConnection connection, P parentObject, C client, OperationContext context, R storageObject)
  nameWithType: StorageRequest<C,P,R>.postProcessResponse(HttpURLConnection connection, P parentObject, C client, OperationContext context, R storageObject)
  parameters:
  - description: <p>HttpURLConnection configured for the operation. </p>
    name: connection
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - name: parentObject
    type: <xref href="P?alt=P&text=P" data-throw-if-not-resolved="False"/>
  - name: client
    type: <xref href="C?alt=C&text=C" data-throw-if-not-resolved="False"/>
  - name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  - description: <p>An object of the expected result's type. </p>
    name: storageObject
    type: <xref href="R?alt=R&text=R" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the expected result of the operation. </p>
    type: <xref href="R?alt=R&text=R" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Post-Stream Retrieval function.</p>

    <p></p>
  syntax: public R postProcessResponse(HttpURLConnection connection, P parentObject, C client, OperationContext context, R storageObject)
  uid: com.microsoft.azure.storage.core.StorageRequest.postProcessResponse(HttpURLConnection,P,C,OperationContext,R)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.preProcessResponse(P parentObject, C client, OperationContext context)
  name: preProcessResponse(P parentObject, C client, OperationContext context)
  nameWithType: StorageRequest<C,P,R>.preProcessResponse(P parentObject, C client, OperationContext context)
  parameters:
  - description: <p>Parent object, i.e. CloudBlobContainer for downloadAttributes etc. </p>
    name: parentObject
    type: <xref href="P?alt=P&text=P" data-throw-if-not-resolved="False"/>
  - description: <p>The service client. </p>
    name: client
    type: <xref href="C?alt=C&text=C" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an Object of the expected result's type. </p>
    type: <xref href="abstract+R?alt=abstract+R&text=abstract+R" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Pre-Stream Retrieval function.</p>

    <p></p>
  syntax: public abstract R preProcessResponse(P parentObject, C client, OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.preProcessResponse(P,C,OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.recoveryAction(OperationContext context)
  name: recoveryAction(OperationContext context)
  nameWithType: StorageRequest<C,P,R>.recoveryAction(OperationContext context)
  parameters:
  - name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Recovery action for retries.</p>

    <p></p>
  syntax: public void recoveryAction(OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.recoveryAction(OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setArePropertiesPopulated(boolean arePropertiesPopulated)
  name: setArePropertiesPopulated(boolean arePropertiesPopulated)
  nameWithType: StorageRequest<C,P,R>.setArePropertiesPopulated(boolean arePropertiesPopulated)
  parameters:
  - description: <p>the arePropertiesPopulated value </p>
    name: arePropertiesPopulated
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public void setArePropertiesPopulated(boolean arePropertiesPopulated)
  uid: com.microsoft.azure.storage.core.StorageRequest.setArePropertiesPopulated(boolean)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setConnection(final HttpURLConnection connection)
  name: setConnection(final HttpURLConnection connection)
  nameWithType: StorageRequest<C,P,R>.setConnection(final HttpURLConnection connection)
  parameters:
  - description: <p>the connection to set </p>
    name: connection
    type: <xref href="final+HttpURLConnection?alt=final+HttpURLConnection&text=final+HttpURLConnection" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  syntax: public final void setConnection(final HttpURLConnection connection)
  uid: com.microsoft.azure.storage.core.StorageRequest.setConnection(final HttpURLConnection)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setContentMD5(String contentMD5)
  name: setContentMD5(String contentMD5)
  nameWithType: StorageRequest<C,P,R>.setContentMD5(String contentMD5)
  parameters:
  - description: <p>the contentMD5 </p>
    name: contentMD5
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setContentMD5(String contentMD5)
  uid: com.microsoft.azure.storage.core.StorageRequest.setContentMD5(String)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setCurrentDescriptor(StreamMd5AndLength currentDescriptor)
  name: setCurrentDescriptor(StreamMd5AndLength currentDescriptor)
  nameWithType: StorageRequest<C,P,R>.setCurrentDescriptor(StreamMd5AndLength currentDescriptor)
  parameters:
  - description: <p>the descriptor value </p>
    name: currentDescriptor
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  syntax: protected void setCurrentDescriptor(StreamMd5AndLength currentDescriptor)
  uid: com.microsoft.azure.storage.core.StorageRequest.setCurrentDescriptor(StreamMd5AndLength)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setCurrentLocation(StorageLocation currentLocation)
  name: setCurrentLocation(StorageLocation currentLocation)
  nameWithType: StorageRequest<C,P,R>.setCurrentLocation(StorageLocation currentLocation)
  parameters:
  - description: <p>the currentLocation value </p>
    name: currentLocation
    type: <xref href="com.microsoft.azure.storage.StorageLocation?alt=com.microsoft.azure.storage.StorageLocation&text=StorageLocation" data-throw-if-not-resolved="False"/>
  syntax: public void setCurrentLocation(StorageLocation currentLocation)
  uid: com.microsoft.azure.storage.core.StorageRequest.setCurrentLocation(StorageLocation)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setCurrentRequestByteCount(long currentRequestByteCount)
  name: setCurrentRequestByteCount(long currentRequestByteCount)
  nameWithType: StorageRequest<C,P,R>.setCurrentRequestByteCount(long currentRequestByteCount)
  parameters:
  - description: <p>the currentRequestByteCount to set </p>
    name: currentRequestByteCount
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public void setCurrentRequestByteCount(long currentRequestByteCount)
  uid: com.microsoft.azure.storage.core.StorageRequest.setCurrentRequestByteCount(long)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setETagLockCondition(AccessCondition etagLockCondition)
  name: setETagLockCondition(AccessCondition etagLockCondition)
  nameWithType: StorageRequest<C,P,R>.setETagLockCondition(AccessCondition etagLockCondition)
  parameters:
  - description: <p>the locked ETag condition </p>
    name: etagLockCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  syntax: public void setETagLockCondition(AccessCondition etagLockCondition)
  uid: com.microsoft.azure.storage.core.StorageRequest.setETagLockCondition(AccessCondition)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setException(final StorageException exceptionReference)
  name: setException(final StorageException exceptionReference)
  nameWithType: StorageRequest<C,P,R>.setException(final StorageException exceptionReference)
  parameters:
  - description: <p>the exception to set </p>
    name: exceptionReference
    type: final <xref href="com.microsoft.azure.storage.StorageException?alt=com.microsoft.azure.storage.StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  syntax: protected final void setException(final StorageException exceptionReference)
  uid: com.microsoft.azure.storage.core.StorageRequest.setException(final StorageException)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setHeaders(HttpURLConnection connection, P parentObject, OperationContext context)
  name: setHeaders(HttpURLConnection connection, P parentObject, OperationContext context)
  nameWithType: StorageRequest<C,P,R>.setHeaders(HttpURLConnection connection, P parentObject, OperationContext context)
  parameters:
  - description: <p>HttpURLConnection configured for the operation. </p>
    name: connection
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - description: <p>Parent object, i.e. CloudBlobContainer for downloadAttributes etc. </p>
    name: parentObject
    type: <xref href="P?alt=P&text=P" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Function to set custom headers.</p>

    <p></p>
  syntax: public void setHeaders(HttpURLConnection connection, P parentObject, OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.setHeaders(HttpURLConnection,P,OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setIsSent(boolean isSent)
  name: setIsSent(boolean isSent)
  nameWithType: StorageRequest<C,P,R>.setIsSent(boolean isSent)
  parameters:
  - description: <p>the isSent value </p>
    name: isSent
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: protected void setIsSent(boolean isSent)
  uid: com.microsoft.azure.storage.core.StorageRequest.setIsSent(boolean)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setLength(Long length)
  name: setLength(Long length)
  nameWithType: StorageRequest<C,P,R>.setLength(Long length)
  parameters:
  - description: <p>the length, in bytes, of the stream </p>
    name: length
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  syntax: public void setLength(Long length)
  uid: com.microsoft.azure.storage.core.StorageRequest.setLength(Long)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setLocationMode(LocationMode locationMode)
  name: setLocationMode(LocationMode locationMode)
  nameWithType: StorageRequest<C,P,R>.setLocationMode(LocationMode locationMode)
  parameters:
  - description: <p>the locationMode value </p>
    name: locationMode
    type: <xref href="com.microsoft.azure.storage.LocationMode?alt=com.microsoft.azure.storage.LocationMode&text=LocationMode" data-throw-if-not-resolved="False"/>
  syntax: public void setLocationMode(LocationMode locationMode)
  uid: com.microsoft.azure.storage.core.StorageRequest.setLocationMode(LocationMode)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setLockedETag(String lockedETag)
  name: setLockedETag(String lockedETag)
  nameWithType: StorageRequest<C,P,R>.setLockedETag(String lockedETag)
  parameters:
  - description: <p>the locked ETag </p>
    name: lockedETag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void setLockedETag(String lockedETag)
  uid: com.microsoft.azure.storage.core.StorageRequest.setLockedETag(String)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setNonExceptionedRetryableFailure(final boolean nonExceptionedRetryableFailure)
  name: setNonExceptionedRetryableFailure(final boolean nonExceptionedRetryableFailure)
  nameWithType: StorageRequest<C,P,R>.setNonExceptionedRetryableFailure(final boolean nonExceptionedRetryableFailure)
  parameters:
  - description: <p>the nonExceptionedRetryableFailure to set </p>
    name: nonExceptionedRetryableFailure
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  syntax: public final void setNonExceptionedRetryableFailure(final boolean nonExceptionedRetryableFailure)
  uid: com.microsoft.azure.storage.core.StorageRequest.setNonExceptionedRetryableFailure(final boolean)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setOffset(Long offset)
  name: setOffset(Long offset)
  nameWithType: StorageRequest<C,P,R>.setOffset(Long offset)
  parameters:
  - description: <p>the stream offset to start copying from </p>
    name: offset
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  syntax: public void setOffset(Long offset)
  uid: com.microsoft.azure.storage.core.StorageRequest.setOffset(Long)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setRequestLocationMode()
  name: setRequestLocationMode()
  nameWithType: StorageRequest<C,P,R>.setRequestLocationMode()
  summary: <p>Function to apply the location mode to the request. </p>
  syntax: public void setRequestLocationMode()
  uid: com.microsoft.azure.storage.core.StorageRequest.setRequestLocationMode()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setRequestLocationMode(RequestLocationMode requestLocationMode)
  name: setRequestLocationMode(RequestLocationMode requestLocationMode)
  nameWithType: StorageRequest<C,P,R>.setRequestLocationMode(RequestLocationMode requestLocationMode)
  parameters:
  - description: <p>the requestLocationMode value </p>
    name: requestLocationMode
    type: <xref href="com.microsoft.azure.storage.core.RequestLocationMode?alt=com.microsoft.azure.storage.core.RequestLocationMode&text=RequestLocationMode" data-throw-if-not-resolved="False"/>
  syntax: public void setRequestLocationMode(RequestLocationMode requestLocationMode)
  uid: com.microsoft.azure.storage.core.StorageRequest.setRequestLocationMode(RequestLocationMode)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setRequestOptions(final RequestOptions requestOptions)
  name: setRequestOptions(final RequestOptions requestOptions)
  nameWithType: StorageRequest<C,P,R>.setRequestOptions(final RequestOptions requestOptions)
  parameters:
  - description: <p>the requestOptions to set </p>
    name: requestOptions
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  syntax: protected final void setRequestOptions(final RequestOptions requestOptions)
  uid: com.microsoft.azure.storage.core.StorageRequest.setRequestOptions(final RequestOptions)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setResult(final RequestResult result)
  name: setResult(final RequestResult result)
  nameWithType: StorageRequest<C,P,R>.setResult(final RequestResult result)
  parameters:
  - description: <p>the result to set </p>
    name: result
    type: final <xref href="com.microsoft.azure.storage.RequestResult?alt=com.microsoft.azure.storage.RequestResult&text=RequestResult" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  syntax: public final void setResult(final RequestResult result)
  uid: com.microsoft.azure.storage.core.StorageRequest.setResult(final RequestResult)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setSendStream(InputStream sendStream)
  name: setSendStream(InputStream sendStream)
  nameWithType: StorageRequest<C,P,R>.setSendStream(InputStream sendStream)
  parameters:
  - description: <p>the stream to send to the server </p>
    name: sendStream
    type: <xref href="InputStream?alt=InputStream&text=InputStream" data-throw-if-not-resolved="False"/>
  syntax: public void setSendStream(InputStream sendStream)
  uid: com.microsoft.azure.storage.core.StorageRequest.setSendStream(InputStream)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.setStorageUri(StorageUri storageUri)
  name: setStorageUri(StorageUri storageUri)
  nameWithType: StorageRequest<C,P,R>.setStorageUri(StorageUri storageUri)
  parameters:
  - description: <p>the storageUri value </p>
    name: storageUri
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  syntax: public void setStorageUri(StorageUri storageUri)
  uid: com.microsoft.azure.storage.core.StorageRequest.setStorageUri(StorageUri)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.signBlobQueueAndFileRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  name: signBlobQueueAndFileRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  nameWithType: StorageRequest<C,P,R>.signBlobQueueAndFileRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  parameters:
  - name: request
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - name: client
    type: <xref href="com.microsoft.azure.storage.ServiceClient?alt=com.microsoft.azure.storage.ServiceClient&text=ServiceClient" data-throw-if-not-resolved="False"/>
  - name: contentLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  syntax: public static final String signBlobQueueAndFileRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.signBlobQueueAndFileRequest(HttpURLConnection,ServiceClient,long,OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.signRequest(HttpURLConnection connection, C client, OperationContext context)
  name: signRequest(HttpURLConnection connection, C client, OperationContext context)
  nameWithType: StorageRequest<C,P,R>.signRequest(HttpURLConnection connection, C client, OperationContext context)
  parameters:
  - description: <p>HttpURLConnection configured for the operation. </p>
    name: connection
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - description: <p>The service client. </p>
    name: client
    type: <xref href="C?alt=C&text=C" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="abstract+void?alt=abstract+void&text=abstract+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Function to Sign headers.</p>

    <p></p>
  syntax: public abstract void signRequest(HttpURLConnection connection, C client, OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.signRequest(HttpURLConnection,C,OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.signTableRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  name: signTableRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  nameWithType: StorageRequest<C,P,R>.signTableRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  parameters:
  - name: request
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - name: client
    type: <xref href="com.microsoft.azure.storage.ServiceClient?alt=com.microsoft.azure.storage.ServiceClient&text=ServiceClient" data-throw-if-not-resolved="False"/>
  - name: contentLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - name: context
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  syntax: public static final void signTableRequest(HttpURLConnection request, ServiceClient client, long contentLength, OperationContext context)
  uid: com.microsoft.azure.storage.core.StorageRequest.signTableRequest(HttpURLConnection,ServiceClient,long,OperationContext)
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.validateLocation()
  name: validateLocation()
  nameWithType: StorageRequest<C,P,R>.validateLocation()
  syntax: public void validateLocation()
  uid: com.microsoft.azure.storage.core.StorageRequest.validateLocation()
- fullName: com.microsoft.azure.storage.core.StorageRequest<C, P, R>.validateStreamWrite(StreamMd5AndLength descriptor)
  name: validateStreamWrite(StreamMd5AndLength descriptor)
  nameWithType: StorageRequest<C,P,R>.validateStreamWrite(StreamMd5AndLength descriptor)
  parameters:
  - name: descriptor
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Validate the written stream length when length is provided.</p>

    <p></p>
  syntax: public void validateStreamWrite(StreamMd5AndLength descriptor)
  uid: com.microsoft.azure.storage.core.StorageRequest.validateStreamWrite(StreamMd5AndLength)
nameWithType: StorageRequest<C,P,R>
syntax: public class StorageRequest<C,P,R>
type: class
typeParameters:
- description: <p>The service client type </p>
  name: C
- description: <p>The type of the parent object, i.e. CloudBlobContainer for downloadAttributes etc. </p>
  name: P
- description: <p>The type of the expected result </p>
  name: R
uid: com.microsoft.azure.storage.core.StorageRequest
fullName: com.microsoft.azure.storage.core.StorageRequest<C,P,R>
name: StorageRequest<C,P,R>
package: com.microsoft.azure.storage.core
summary: >-
  <p>RESERVED FOR INTERNAL USE. A class which encapsulate the execution of a given storage operation.</p>

  <p></p>
metadata: {}
