### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.DAGNode(final String key, final DataT data)
  name: DAGNode(final String key, final DataT data)
  nameWithType: DAGNode<DataT,NodeT,NodeT>.DAGNode(final String key, final DataT data)
  parameters:
  - description: <p>unique id of the node </p>
    name: key
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>data to be stored in the node </p>
    name: data
    type: <xref href="final+DataT?alt=final+DataT&text=final+DataT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a DAG node.</p>

    <p></p>
  syntax: public DAGNode(final String key, final DataT data)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.DAGNode(final String,final DataT)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.dag.Node?alt=com.microsoft.azure.management.resources.fluentcore.dag.Node&text=Node%3CDataT%2CNodeT%2CNodeT%3E" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.dag.Node.addChild(String)
- com.microsoft.azure.management.resources.fluentcore.dag.Node.children()
- com.microsoft.azure.management.resources.fluentcore.dag.Node.data()
- com.microsoft.azure.management.resources.fluentcore.dag.Node.hasChildren()
- com.microsoft.azure.management.resources.fluentcore.dag.Node.key()
- com.microsoft.azure.management.resources.fluentcore.dag.Node.Node(final String,final DataT)
- com.microsoft.azure.management.resources.fluentcore.dag.Node.owner()
- com.microsoft.azure.management.resources.fluentcore.dag.Node.setOwner(Graph<DataT, NodeT>)
methods:
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.addDependency(String dependencyKey)
  name: addDependency(String dependencyKey)
  nameWithType: DAGNode<DataT,NodeT,NodeT>.addDependency(String dependencyKey)
  parameters:
  - description: <p>the id of the dependency node </p>
    name: dependencyKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Mark the node identified by the given key as this node's dependency.</p>

    <p></p>
  syntax: public void addDependency(String dependencyKey)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependency(String)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.addDependent(String key)
  name: addDependent(String key)
  nameWithType: DAGNode<DataT,NodeT,NodeT>.addDependent(String key)
  parameters:
  - description: <p>the id of the dependent node </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Mark the node identified by the given key as dependent of this node.</p>

    <p></p>
  syntax: public void addDependent(String key)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.addDependent(String)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.dependencyKeys()
  name: dependencyKeys()
  nameWithType: DAGNode<DataT,NodeT,NodeT>.dependencyKeys()
  returns:
    description: <p>a list of keys of nodes in <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.DAGraph" data-throw-if-not-resolved="false" data-raw-source="DAGraph"></xref> that this node depends on </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public List<String> dependencyKeys()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.dependencyKeys()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.hasDependencies()
  name: hasDependencies()
  nameWithType: DAGNode<DataT,NodeT,NodeT>.hasDependencies()
  returns:
    description: >-
      <p>

        <code>true</code> if this node has any dependency </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hasDependencies()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.hasDependencies()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.initialize()
  name: initialize()
  nameWithType: DAGNode<DataT,NodeT,NodeT>.initialize()
  summary: <p>Initialize the node so that traversal can be performed on the parent DAG. </p>
  syntax: public void initialize()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.initialize()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.isPreparer()
  name: isPreparer()
  nameWithType: DAGNode<DataT,NodeT,NodeT>.isPreparer()
  returns:
    description: >-
      <p>

        <code>true</code> if this node is marked as preparer </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isPreparer()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.isPreparer()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.lock()
  name: lock()
  nameWithType: DAGNode<DataT,NodeT,NodeT>.lock()
  returns:
    description: <p>the lock to be used while performing thread safe operation on this node. </p>
    type: <xref href="ReentrantLock?alt=ReentrantLock&text=ReentrantLock" data-throw-if-not-resolved="False"/>
  syntax: public ReentrantLock lock()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.lock()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.onFaultedResolution(String dependencyKey, Throwable throwable)
  name: onFaultedResolution(String dependencyKey, Throwable throwable)
  nameWithType: DAGNode<DataT,NodeT,NodeT>.onFaultedResolution(String dependencyKey, Throwable throwable)
  parameters:
  - description: <p>the id of the dependency node </p>
    name: dependencyKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the reason for unsuccessful resolution </p>
    name: throwable
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reports a dependency of this node has been faulted.</p>

    <p></p>
  syntax: protected void onFaultedResolution(String dependencyKey, Throwable throwable)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onFaultedResolution(String,Throwable)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.onSuccessfulResolution(String dependencyKey)
  name: onSuccessfulResolution(String dependencyKey)
  nameWithType: DAGNode<DataT,NodeT,NodeT>.onSuccessfulResolution(String dependencyKey)
  parameters:
  - description: <p>the id of the dependency node </p>
    name: dependencyKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reports a dependency of this node has been successfully resolved.</p>

    <p></p>
  syntax: protected void onSuccessfulResolution(String dependencyKey)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.onSuccessfulResolution(String)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT, NodeT extends DAGNode<DataT, NodeT>.setPreparer(boolean isPreparer)
  name: setPreparer(boolean isPreparer)
  nameWithType: DAGNode<DataT,NodeT,NodeT>.setPreparer(boolean isPreparer)
  parameters:
  - description: >-
      <p>

        <code>true</code> if this node needs to be marked as preparer, <code>false</code> otherwise. </p>
    name: isPreparer
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Mark or un-mark this node as preparer.</p>

    <p></p>
  syntax: public void setPreparer(boolean isPreparer)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode.setPreparer(boolean)
nameWithType: DAGNode<DataT,NodeT,NodeT>
syntax: public class DAGNode<DataT,NodeT extends DAGNode<DataT,NodeT>> extends Node<DataT, NodeT>
type: class
typeParameters:
- description: <p>the type of the data stored in the node </p>
  name: DataT
- description: <p>the type of the node </p>
  name: NodeT
- description: <p>the type of the node </p>
  name: NodeT
uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode
fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGNode<DataT,NodeT,NodeT>
name: DAGNode<DataT,NodeT,NodeT>
package: com.microsoft.azure.management.resources.fluentcore.dag
summary: >-
  <p>The type representing node in a <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.DAGraph" data-throw-if-not-resolved="false" data-raw-source="DAGraph"></xref>.</p>

  <p></p>
metadata: {}
