### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.TasksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  name: TasksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  nameWithType: TasksInner.TasksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl&text=ContainerRegistryManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of TasksInner.</p>

    <p></p>
  syntax: public TasksInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.TasksInner(Retrofit,ContainerRegistryManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreate(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  name: beginCreate(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  nameWithType: TasksInner.beginCreate(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public TaskInner beginCreate(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreate(String,String,String,TaskInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  name: beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  nameWithType: TasksInner.beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<TaskInner> beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreateAsync(String,String,String,TaskInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  name: beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<TaskInner> beginCreateAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreateAsync(String,String,String,TaskInner,final ServiceCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  name: beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  nameWithType: TasksInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TaskInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginCreateWithServiceResponseAsync(String,String,String,TaskInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDelete(String resourceGroupName, String registryName, String taskName)
  name: beginDelete(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.beginDelete(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDelete(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDeleteAsync(String resourceGroupName, String registryName, String taskName)
  name: beginDeleteAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.beginDeleteAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDeleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDeleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  nameWithType: TasksInner.beginDeleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDeleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginDeleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdate(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  name: beginUpdate(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  nameWithType: TasksInner.beginUpdate(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public TaskInner beginUpdate(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdate(String,String,String,TaskUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  nameWithType: TasksInner.beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public Observable<TaskInner> beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdateAsync(String,String,String,TaskUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<TaskInner> beginUpdateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdateAsync(String,String,String,TaskUpdateParameters,final ServiceCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  nameWithType: TasksInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TaskInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.beginUpdateWithServiceResponseAsync(String,String,String,TaskUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.create(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  name: create(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  nameWithType: TasksInner.create(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public TaskInner create(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.create(String,String,String,TaskInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  name: createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  nameWithType: TasksInner.createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<TaskInner> createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.createAsync(String,String,String,TaskInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  name: createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<TaskInner> createAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters, final ServiceCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.createAsync(String,String,String,TaskInner,final ServiceCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  name: createWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  nameWithType: TasksInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a task. </p>
    name: taskCreateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a task for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TaskInner>> createWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskInner taskCreateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.createWithServiceResponseAsync(String,String,String,TaskInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.delete(String resourceGroupName, String registryName, String taskName)
  name: delete(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.delete(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.delete(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.deleteAsync(String resourceGroupName, String registryName, String taskName)
  name: deleteAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.deleteAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.deleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  nameWithType: TasksInner.deleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a specified task.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.get(String resourceGroupName, String registryName, String taskName)
  name: get(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.get(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the properties of a specified task.</p>

    <p></p>
  syntax: public TaskInner get(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.get(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getAsync(String resourceGroupName, String registryName, String taskName)
  name: getAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.getAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the properties of a specified task.</p>

    <p></p>
  syntax: public Observable<TaskInner> getAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  name: getAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.getAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the properties of a specified task.</p>

    <p></p>
  syntax: public ServiceFuture<TaskInner> getAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getAsync(String,String,String,final ServiceCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetails(String resourceGroupName, String registryName, String taskName)
  name: getDetails(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.getDetails(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a task with extended information that includes all secrets.</p>

    <p></p>
  syntax: public TaskInner getDetails(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetails(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetailsAsync(String resourceGroupName, String registryName, String taskName)
  name: getDetailsAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.getDetailsAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a task with extended information that includes all secrets.</p>

    <p></p>
  syntax: public Observable<TaskInner> getDetailsAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetailsAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetailsAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  name: getDetailsAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.getDetailsAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a task with extended information that includes all secrets.</p>

    <p></p>
  syntax: public ServiceFuture<TaskInner> getDetailsAsync(String resourceGroupName, String registryName, String taskName, final ServiceCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetailsAsync(String,String,String,final ServiceCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetailsWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  name: getDetailsWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.getDetailsWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Returns a task with extended information that includes all secrets.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TaskInner>> getDetailsWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getDetailsWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  name: getWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  nameWithType: TasksInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TaskInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get the properties of a specified task.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TaskInner>> getWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.list(final String resourceGroupName, final String registryName)
  name: list(final String resourceGroupName, final String registryName)
  nameWithType: TasksInner.list(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;TaskInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public PagedList<TaskInner> list(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.list(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listAsync(final String resourceGroupName, final String registryName)
  name: listAsync(final String resourceGroupName, final String registryName)
  nameWithType: TasksInner.listAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TaskInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public Observable<Page<TaskInner>> listAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<TaskInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<TaskInner>> listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listAsync(final String,final String,final ListOperationCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: TasksInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;TaskInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public PagedList<TaskInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: TasksInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TaskInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public Observable<Page<TaskInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<TaskInner>> serviceFuture, final ListOperationCallback<TaskInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<TaskInner>> serviceFuture, final ListOperationCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<TaskInner>> serviceFuture, final ListOperationCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<TaskInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<TaskInner>> serviceFuture, final ListOperationCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextAsync(final String,final ServiceFuture<List<TaskInner>>,final ListOperationCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: TasksInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;TaskInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;TaskInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<TaskInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: TasksInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TaskInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<TaskInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  name: listSinglePageAsync(final String resourceGroupName, final String registryName)
  nameWithType: TasksInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. ServiceResponse&lt;PageImpl&lt;TaskInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;TaskInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;TaskInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<TaskInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  nameWithType: TasksInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;TaskInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the tasks for a specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<TaskInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.listWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.update(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  name: update(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  nameWithType: TasksInner.update(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TaskInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public TaskInner update(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.update(String,String,String,TaskUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  name: updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  nameWithType: TasksInner.updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public Observable<TaskInner> updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.updateAsync(String,String,String,TaskUpdateParameters)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  nameWithType: TasksInner.updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<TaskInner> updateAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters, final ServiceCallback<TaskInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.updateAsync(String,String,String,TaskUpdateParameters,final ServiceCallback<TaskInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  nameWithType: TasksInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry task. </p>
    name: taskName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for updating a task. </p>
    name: taskUpdateParameters
    type: <xref href="com.microsoft.azure.management.containerregistry.TaskUpdateParameters?alt=com.microsoft.azure.management.containerregistry.TaskUpdateParameters&text=TaskUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.TaskInner?alt=com.microsoft.azure.management.containerregistry.implementation.TaskInner&text=TaskInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a task with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<TaskInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String taskName, TaskUpdateParameters taskUpdateParameters)
  uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner.updateWithServiceResponseAsync(String,String,String,TaskUpdateParameters)
nameWithType: TasksInner
syntax: public class TasksInner
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.TasksInner
fullName: com.microsoft.azure.management.containerregistry.implementation.TasksInner
name: TasksInner
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>An instance of this class provides access to all the operations defined in Tasks. </p>
metadata: {}
