### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScope(String scope, String name)
  name: getByScope(String scope, String name)
  nameWithType: RoleDefinitions.getByScope(String scope, String name)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role definition </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an immutable representation of the role definition </p>
    type: <xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the information about a role definition based on scope and name.</p>

    <p></p>
  syntax: public RoleDefinition getByScope(String scope, String name)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScope(String,String)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAndRoleName(String scope, String roleName)
  name: getByScopeAndRoleName(String scope, String roleName)
  nameWithType: RoleDefinitions.getByScopeAndRoleName(String scope, String roleName)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role </p>
    name: roleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an immutable representation of the role definition </p>
    type: <xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the information about a role definition based on scope and name.</p>

    <p></p>
  syntax: public RoleDefinition getByScopeAndRoleName(String scope, String roleName)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAndRoleName(String,String)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAndRoleNameAsync(String scope, String roleName)
  name: getByScopeAndRoleNameAsync(String scope, String roleName)
  nameWithType: RoleDefinitions.getByScopeAndRoleNameAsync(String scope, String roleName)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role </p>
    name: roleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an immutable representation of the role definition </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a role definition based on scope and name.</p>

    <p></p>
  syntax: public Observable<RoleDefinition> getByScopeAndRoleNameAsync(String scope, String roleName)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAndRoleNameAsync(String,String)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAndRoleNameAsync(String scope, String roleName, ServiceCallback<RoleDefinition> callback)
  name: getByScopeAndRoleNameAsync(String scope, String roleName, ServiceCallback<RoleDefinition> callback)
  nameWithType: RoleDefinitions.getByScopeAndRoleNameAsync(String scope, String roleName, ServiceCallback<RoleDefinition> callback)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role </p>
    name: roleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback when the operation finishes </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>an immutable representation of the role definition </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a role definition based on scope and name.</p>

    <p></p>
  syntax: public ServiceFuture<RoleDefinition> getByScopeAndRoleNameAsync(String scope, String roleName, ServiceCallback<RoleDefinition> callback)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAndRoleNameAsync(String,String,ServiceCallback<RoleDefinition>)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAsync(String scope, String name)
  name: getByScopeAsync(String scope, String name)
  nameWithType: RoleDefinitions.getByScopeAsync(String scope, String name)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role definition </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an immutable representation of the role definition </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a role definition based on scope and name.</p>

    <p></p>
  syntax: public Observable<RoleDefinition> getByScopeAsync(String scope, String name)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAsync(String,String)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAsync(String scope, String name, ServiceCallback<RoleDefinition> callback)
  name: getByScopeAsync(String scope, String name, ServiceCallback<RoleDefinition> callback)
  nameWithType: RoleDefinitions.getByScopeAsync(String scope, String name, ServiceCallback<RoleDefinition> callback)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the name of the role definition </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback when the operation finishes </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>an immutable representation of the role definition </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the information about a role definition based on scope and name.</p>

    <p></p>
  syntax: public ServiceFuture<RoleDefinition> getByScopeAsync(String scope, String name, ServiceCallback<RoleDefinition> callback)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.getByScopeAsync(String,String,ServiceCallback<RoleDefinition>)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.listByScope(String scope)
  name: listByScope(String scope)
  nameWithType: RoleDefinitions.listByScope(String scope)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a list of role definitions </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List role definitions in a scope.</p>

    <p></p>
  syntax: public PagedList<RoleDefinition> listByScope(String scope)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.listByScope(String)
- fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions.listByScopeAsync(String scope)
  name: listByScopeAsync(String scope)
  nameWithType: RoleDefinitions.listByScopeAsync(String scope)
  parameters:
  - description: <p>the scope of the role definition </p>
    name: scope
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>an observable of role definitions </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.graphrbac.RoleDefinition?alt=com.microsoft.azure.management.graphrbac.RoleDefinition&text=RoleDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List role definitions in a scope.</p>

    <p></p>
  syntax: public Observable<RoleDefinition> listByScopeAsync(String scope)
  uid: com.microsoft.azure.management.graphrbac.RoleDefinitions.listByScopeAsync(String)
nameWithType: RoleDefinitions
syntax: public interface RoleDefinitions extends SupportsGettingById<RoleDefinition>,HasManager<GraphRbacManager>,HasInner<RoleDefinitionsInner>
type: interface
uid: com.microsoft.azure.management.graphrbac.RoleDefinitions
fullName: com.microsoft.azure.management.graphrbac.RoleDefinitions
name: RoleDefinitions
package: com.microsoft.azure.management.graphrbac
summary: <p>Entry point to role definition management API. </p>
metadata: {}
