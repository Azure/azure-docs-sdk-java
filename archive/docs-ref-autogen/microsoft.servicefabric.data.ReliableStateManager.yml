### YamlMime:JavaType
methods:
- fullName: microsoft.servicefabric.data.ReliableStateManager.createTransaction()
  name: createTransaction()
  nameWithType: ReliableStateManager.createTransaction()
  returns:
    description: <p>A reliable <xref uid="microsoft.servicefabric.data.Transaction" data-throw-if-not-resolved="false" data-raw-source="Transaction"></xref>. </p>
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  summary: <p>Create and start a new transaction that can be used to group operations to be performed atomically. </p>
  syntax: public Transaction createTransaction()
  uid: microsoft.servicefabric.data.ReliableStateManager.createTransaction()
- fullName: microsoft.servicefabric.data.ReliableStateManager.getAsyncEnumerator()
  name: getAsyncEnumerator()
  nameWithType: ReliableStateManager.getAsyncEnumerator()
  returns:
    description: <p>returns the enumeration of all the reliable states. </p>
    type: <xref href="microsoft.servicefabric.data.utilities.AsyncEnumeration?alt=microsoft.servicefabric.data.utilities.AsyncEnumeration&text=AsyncEnumeration" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.data.ReliableState?alt=microsoft.servicefabric.data.ReliableState&text=ReliableState" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Returns the enumeration of all the reliable states. </p>
  syntax: public AsyncEnumeration<ReliableState> getAsyncEnumerator()
  uid: microsoft.servicefabric.data.ReliableStateManager.getAsyncEnumerator()
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String name)
  name: getOrAddReliableHashMapAsync(String name)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(String name)
  parameters:
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String)
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String name, Duration timeout)
  name: getOrAddReliableHashMapAsync(String name, Duration timeout)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(String name, Duration timeout)
  parameters:
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout in seconds to complete the operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(String name, Duration timeout)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(String,Duration)
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name)
  name: getOrAddReliableHashMapAsync(Transaction tx, String name)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: tx
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(Transaction tx, String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction,String)
- fullName: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  name: getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  nameWithType: ReliableStateManager.getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: tx
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the reliable HashMap table. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout in seconds to complete the operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the handle to reliable HashMap table. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;'
  summary: <p>Returns a reliable HashMap table associated with the given name if it is present. Otherwise creates a new table and returns a reference to it. </p>
  syntax: public <K extends String, V> CompletableFuture<ReliableHashMap<K, V>> getOrAddReliableHashMapAsync(Transaction tx, String name, Duration timeout)
  uid: microsoft.servicefabric.data.ReliableStateManager.getOrAddReliableHashMapAsync(Transaction,String,Duration)
- fullName: microsoft.servicefabric.data.ReliableStateManager.removeAsync(String name)
  name: removeAsync(String name)
  nameWithType: ReliableStateManager.removeAsync(String name)
  parameters:
  - description: <p>The name of the reliable HashMap table to be removed </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>returns Completable future with a boolean value indicating whether remove succeeded or not. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Removes the Reliable collection associated with the given name. </p>
  syntax: public CompletableFuture<?> removeAsync(String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.removeAsync(String)
- fullName: microsoft.servicefabric.data.ReliableStateManager.removeAsync(String name, Duration timeout)
  name: removeAsync(String name, Duration timeout)
  nameWithType: ReliableStateManager.removeAsync(String name, Duration timeout)
  parameters:
  - description: <p>The name of the reliable HashMap table to be removed </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout in seconds to complete the operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>returns Completable future with a boolean value indicating whether remove succeeded or not. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Removes the Reliable collection associated with the given name. </p>
  syntax: public CompletableFuture<?> removeAsync(String name, Duration timeout)
  uid: microsoft.servicefabric.data.ReliableStateManager.removeAsync(String,Duration)
- fullName: microsoft.servicefabric.data.ReliableStateManager.removeAsync(Transaction tx, String name)
  name: removeAsync(Transaction tx, String name)
  nameWithType: ReliableStateManager.removeAsync(Transaction tx, String name)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: tx
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the reliable HashMap table to be remove. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>returns Completable future with a boolean value indicating whether remove succeeded or not. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Removes the Reliable collection associated with the given name. </p>
  syntax: public CompletableFuture<?> removeAsync(Transaction tx, String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.removeAsync(Transaction,String)
- fullName: microsoft.servicefabric.data.ReliableStateManager.removeAsync(Transaction tx, String name, Duration timeout)
  name: removeAsync(Transaction tx, String name, Duration timeout)
  nameWithType: ReliableStateManager.removeAsync(Transaction tx, String name, Duration timeout)
  parameters:
  - description: <p>The transaction id associated with this operation. </p>
    name: tx
    type: <xref href="microsoft.servicefabric.data.Transaction?alt=microsoft.servicefabric.data.Transaction&text=Transaction" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the reliable HashMap table to be removed </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the timeout in seconds to complete the operation. </p>
    name: timeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>returns Completable future with a boolean value indicating whether remove succeeded or not. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Removes the Reliable collection associated with the given name. </p>
  syntax: public CompletableFuture<?> removeAsync(Transaction tx, String name, Duration timeout)
  uid: microsoft.servicefabric.data.ReliableStateManager.removeAsync(Transaction,String,Duration)
- fullName: microsoft.servicefabric.data.ReliableStateManager.tryGetReliableHashMapAsync(String name)
  name: tryGetReliableHashMapAsync(String name)
  nameWithType: ReliableStateManager.tryGetReliableHashMapAsync(String name)
  parameters:
  - description: <p>Name of the reliable hashmap. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns a conditional value containing the reference to the reliable hashmap with the given name. </p>
    type: '&lt;K extends String, V&gt; CompletableFuture&lt;<xref href="microsoft.servicefabric.data.ConditionalValue?alt=microsoft.servicefabric.data.ConditionalValue&text=ConditionalValue" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.data.collections.ReliableHashMap?alt=microsoft.servicefabric.data.collections.ReliableHashMap&text=ReliableHashMap" data-throw-if-not-resolved="False"/>&lt;K, V&gt;&gt;&gt;'
  summary: <p>Gets the reliable hash map associated with the given name. </p>
  syntax: public <K extends String, V> CompletableFuture<ConditionalValue<ReliableHashMap<K, V>>> tryGetReliableHashMapAsync(String name)
  uid: microsoft.servicefabric.data.ReliableStateManager.tryGetReliableHashMapAsync(String)
nameWithType: ReliableStateManager
syntax: public interface ReliableStateManager
type: interface
uid: microsoft.servicefabric.data.ReliableStateManager
fullName: microsoft.servicefabric.data.ReliableStateManager
name: ReliableStateManager
package: microsoft.servicefabric.data
metadata: {}
