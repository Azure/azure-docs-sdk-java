### YamlMime:JavaType
methods:
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  name: handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  parameters:
  - description: <p>Request context - contains additional information about the request </p>
    name: requestContext
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext?alt=microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext&text=ServiceRemotingRequestContext" data-throw-if-not-resolved="False"/>
  - description: <p>Request message headers </p>
    name: messageHeaders
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders?alt=microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders&text=ServiceRemotingMessageHeaders" data-throw-if-not-resolved="False"/>
  - description: <p>Request message body </p>
    name: requestBody
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Handles a one way message from the client.</p>

    <p></p>
  syntax: public void handleOneWay(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
- fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  name: requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  parameters:
  - description: <p>Request context - contains additional information about the request </p>
    name: requestContext
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext?alt=microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext&text=ServiceRemotingRequestContext" data-throw-if-not-resolved="False"/>
  - description: <p>Request message headers </p>
    name: messageHeaders
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders?alt=microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders&text=ServiceRemotingMessageHeaders" data-throw-if-not-resolved="False"/>
  - description: <p>Request message body </p>
    name: requestBody
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Response body </p>
    type: <xref href="CompletableFuture%3Cbyte%5B%5D%3E?alt=CompletableFuture%3Cbyte%5B%5D%3E&text=CompletableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Handles a message from the client that requires a response from the service.</p>

    <p></p>
  syntax: public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
nameWithType: ServiceRemotingMessageHandler
syntax: public interface ServiceRemotingMessageHandler
type: interface
uid: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler
fullName: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler
name: ServiceRemotingMessageHandler
package: microsoft.servicefabric.services.remoting
summary: <p>Defines the interface that must be implemented by the ServiceRemotingListener to receive messages from the remoting transport. </p>
metadata: {}
