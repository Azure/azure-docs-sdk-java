### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.OperationContext.OperationContext()
  name: OperationContext()
  nameWithType: OperationContext.OperationContext()
  summary: <p>Creates an instance of the  class. </p>
  syntax: public OperationContext()
  uid: com.microsoft.azure.storage.OperationContext.OperationContext()
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.OperationContext.defaultLoggerName
  name: defaultLoggerName
  nameWithType: OperationContext.defaultLoggerName
  summary: <p>Name of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> that will be created by default if logging is enabled and a <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> has not been specified. </p>
  syntax: public static final String defaultLoggerName= Logger.ROOT_LOGGER_NAME
  uid: com.microsoft.azure.storage.OperationContext.defaultLoggerName
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.OperationContext.appendRequestResult(RequestResult requestResult)
  name: appendRequestResult(RequestResult requestResult)
  nameWithType: OperationContext.appendRequestResult(RequestResult requestResult)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.RequestResult" data-throw-if-not-resolved="false" data-raw-source="RequestResult"></xref> to append. </p>
    name: requestResult
    type: <xref href="com.microsoft.azure.storage.RequestResult?alt=com.microsoft.azure.storage.RequestResult&text=RequestResult" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reserved for internal use. Appends a <xref uid="com.microsoft.azure.storage.RequestResult" data-throw-if-not-resolved="false" data-raw-source="RequestResult"></xref> object to the internal collection in a synchronized manner.</p>

    <p></p>
  syntax: public synchronized void appendRequestResult(RequestResult requestResult)
  uid: com.microsoft.azure.storage.OperationContext.appendRequestResult(RequestResult)
- fullName: com.microsoft.azure.storage.OperationContext.getClientRequestID()
  name: getClientRequestID()
  nameWithType: OperationContext.getClientRequestID()
  returns:
    description: <p>A <code>String</code> which represents the client request ID. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the client side trace ID.</p>

    <p></p>
  syntax: public String getClientRequestID()
  uid: com.microsoft.azure.storage.OperationContext.getClientRequestID()
- fullName: com.microsoft.azure.storage.OperationContext.getClientTimeInMs()
  name: getClientTimeInMs()
  nameWithType: OperationContext.getClientTimeInMs()
  returns:
    description: <p>A <code>long</code> which contains the client latency time in milliseconds. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the operation latency, in milliseconds, from the client's perspective. This may include any potential retries.</p>

    <p></p>
  syntax: public long getClientTimeInMs()
  uid: com.microsoft.azure.storage.OperationContext.getClientTimeInMs()
- fullName: com.microsoft.azure.storage.OperationContext.getDefaultProxy()
  name: getDefaultProxy()
  nameWithType: OperationContext.getDefaultProxy()
  returns:
    description: <p>The default <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.net.Proxy"></xref> if set; otherwise <code>null</code></p>
    type: <xref href="Proxy?alt=Proxy&text=Proxy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the default proxy used by the client library if enabled. The default can be overridden to enable a proxy for an individual operation context instance by using <xref uid="com.microsoft.azure.storage.OperationContext.setProxy(Proxy)" data-throw-if-not-resolved="false" data-raw-source="setProxy"></xref>.</p>

    <p></p>
  syntax: public static Proxy getDefaultProxy()
  uid: com.microsoft.azure.storage.OperationContext.getDefaultProxy()
- fullName: com.microsoft.azure.storage.OperationContext.getDefaultProxyPassword()
  name: getDefaultProxyPassword()
  nameWithType: OperationContext.getDefaultProxyPassword()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="String"></xref> to use when making a request. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the default password for the authenticated proxy which will be used when making a request. Default is . To set a password to use <xref uid="com.microsoft.azure.storage.OperationContext.setProxyPassword(final String)" data-throw-if-not-resolved="false" data-raw-source="setProxyPassword(String)"></xref></p>

    <p></p>
  syntax: public static String getDefaultProxyPassword()
  uid: com.microsoft.azure.storage.OperationContext.getDefaultProxyPassword()
- fullName: com.microsoft.azure.storage.OperationContext.getDefaultProxyUsername()
  name: getDefaultProxyUsername()
  nameWithType: OperationContext.getDefaultProxyUsername()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="String"></xref> to use when making a request. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a default username for the authenticated proxy which will be used when making a request. Default is . To set a username use <xref uid="com.microsoft.azure.storage.OperationContext.setDefaultProxyUsername(final String)" data-throw-if-not-resolved="false" data-raw-source="setDefaultProxyUsername(String)"></xref></p>

    <p></p>
  syntax: public static String getDefaultProxyUsername()
  uid: com.microsoft.azure.storage.OperationContext.getDefaultProxyUsername()
- fullName: com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler()
  name: getErrorReceivingResponseEventHandler()
  nameWithType: OperationContext.getErrorReceivingResponseEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>errorReceivingResponseEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets an event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> getErrorReceivingResponseEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getErrorReceivingResponseEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler()
  name: getGlobalErrorReceivingResponseEventHandler()
  nameWithType: OperationContext.getGlobalErrorReceivingResponseEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>globabErrorReceivingResponseEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a global event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public static StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> getGlobalErrorReceivingResponseEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getGlobalErrorReceivingResponseEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler()
  name: getGlobalRequestCompletedEventHandler()
  nameWithType: OperationContext.getGlobalRequestCompletedEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>globalRequestCompletedEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a global event multi-caster that is triggered when a request is completed. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public static StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> getGlobalRequestCompletedEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getGlobalRequestCompletedEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler()
  name: getGlobalResponseReceivedEventHandler()
  nameWithType: OperationContext.getGlobalResponseReceivedEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>globalResponseReceivedEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a global event multi-caster that is triggered when a response is received. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public static StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> getGlobalResponseReceivedEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getGlobalResponseReceivedEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler()
  name: getGlobalRetryingEventHandler()
  nameWithType: OperationContext.getGlobalRetryingEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>globalRetryingEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a global event multi-caster that is triggered when a request is retried. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public static StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> getGlobalRetryingEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getGlobalRetryingEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler()
  name: getGlobalSendingRequestEventHandler()
  nameWithType: OperationContext.getGlobalSendingRequestEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>globalSendingRequestEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets a global event multi-caster that is triggered before sending a request. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public static StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> getGlobalSendingRequestEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getGlobalSendingRequestEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getLastResult()
  name: getLastResult()
  nameWithType: OperationContext.getLastResult()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.RequestResult" data-throw-if-not-resolved="false" data-raw-source="RequestResult"></xref> object which represents the last request result. </p>
    type: synchronized <xref href="com.microsoft.azure.storage.RequestResult?alt=com.microsoft.azure.storage.RequestResult&text=RequestResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the last request result encountered for the operation.</p>

    <p></p>
  syntax: public synchronized RequestResult getLastResult()
  uid: com.microsoft.azure.storage.OperationContext.getLastResult()
- fullName: com.microsoft.azure.storage.OperationContext.getLogger()
  name: getLogger()
  nameWithType: OperationContext.getLogger()
  returns:
    description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> object associated with this operation, or the class's default <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> if null. </p>
    type: <xref href="org.slf4j.Logger?alt=org.slf4j.Logger&text=org.slf4j.Logger" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> associated with this operation. If the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> object associated with this operation is null, this will return the class's default <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> object.</p>

    <p></p>
  syntax: public org.slf4j.Logger getLogger()
  uid: com.microsoft.azure.storage.OperationContext.getLogger()
- fullName: com.microsoft.azure.storage.OperationContext.getProxy()
  name: getProxy()
  nameWithType: OperationContext.getProxy()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.net.Proxy"></xref> to use when making a request. </p>
    type: <xref href="Proxy?alt=Proxy&text=Proxy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a proxy which will be used when making a request. Default is . To set a proxy to use by default, use <xref uid="com.microsoft.azure.storage.OperationContext.setDefaultProxy(Proxy)" data-throw-if-not-resolved="false" data-raw-source="setDefaultProxy"></xref></p>

    <p></p>
  syntax: public Proxy getProxy()
  uid: com.microsoft.azure.storage.OperationContext.getProxy()
- fullName: com.microsoft.azure.storage.OperationContext.getProxyPassword()
  name: getProxyPassword()
  nameWithType: OperationContext.getProxyPassword()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="String"></xref> to use when making a request. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the password for the authenticated proxy which will be used when making a request. Default is . To set a password to use <xref uid="com.microsoft.azure.storage.OperationContext.setProxyPassword(final String)" data-throw-if-not-resolved="false" data-raw-source="setProxyPassword(String)"></xref></p>

    <p></p>
  syntax: public String getProxyPassword()
  uid: com.microsoft.azure.storage.OperationContext.getProxyPassword()
- fullName: com.microsoft.azure.storage.OperationContext.getProxyUsername()
  name: getProxyUsername()
  nameWithType: OperationContext.getProxyUsername()
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="String"></xref> to use when making a request. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a username for the authenticated proxy which will be used when making a request. Default is . To set a username use <xref uid="com.microsoft.azure.storage.OperationContext.setProxyUsername(final String)" data-throw-if-not-resolved="false" data-raw-source="setProxyUsername(String)"></xref></p>

    <p></p>
  syntax: public String getProxyUsername()
  uid: com.microsoft.azure.storage.OperationContext.getProxyUsername()
- fullName: com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler()
  name: getRequestCompletedEventHandler()
  nameWithType: OperationContext.getRequestCompletedEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>requestCompletedEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets an event multi-caster that is triggered when a request is completed. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> getRequestCompletedEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getRequestCompletedEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getRequestResults()
  name: getRequestResults()
  nameWithType: OperationContext.getRequestResults()
  returns:
    description: <p>An <code>ArrayList</code> object that contains <xref uid="com.microsoft.azure.storage.RequestResult" data-throw-if-not-resolved="false" data-raw-source="RequestResult"></xref> objects that represent the request results created by the current operation. </p>
    type: ArrayList&lt;<xref href="com.microsoft.azure.storage.RequestResult?alt=com.microsoft.azure.storage.RequestResult&text=RequestResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns the set of request results that the current operation has created.</p>

    <p></p>
  syntax: public ArrayList<RequestResult> getRequestResults()
  uid: com.microsoft.azure.storage.OperationContext.getRequestResults()
- fullName: com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler()
  name: getResponseReceivedEventHandler()
  nameWithType: OperationContext.getResponseReceivedEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>responseReceivedEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets an event multi-caster that is triggered when a response is received. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> getResponseReceivedEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getResponseReceivedEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getRetryingEventHandler()
  name: getRetryingEventHandler()
  nameWithType: OperationContext.getRetryingEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>retryingEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets an event multi-caster that is triggered when a request is retried. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> getRetryingEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getRetryingEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler()
  name: getSendingRequestEventHandler()
  nameWithType: OperationContext.getSendingRequestEventHandler()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object for the <code>sendingRequestEventHandler</code>. </p>
    type: <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets an event multi-caster that is triggered before sending a request. It allows event listeners to be dynamically added and removed.</p>

    <p></p>
  syntax: public StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> getSendingRequestEventHandler()
  uid: com.microsoft.azure.storage.OperationContext.getSendingRequestEventHandler()
- fullName: com.microsoft.azure.storage.OperationContext.getUserHeaders()
  name: getUserHeaders()
  nameWithType: OperationContext.getUserHeaders()
  returns:
    description: <p>A <code>java.util.HashMap</code> which contains the the user headers for the request. </p>
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets any additional headers for the request, for example, for proxy or logging information.</p>

    <p></p>
  syntax: public HashMap<String, String> getUserHeaders()
  uid: com.microsoft.azure.storage.OperationContext.getUserHeaders()
- fullName: com.microsoft.azure.storage.OperationContext.initialize()
  name: initialize()
  nameWithType: OperationContext.initialize()
  summary: <p>Reserved for internal use. Initializes the  in order to begin processing a new operation. All operation specific information is erased. </p>
  syntax: public void initialize()
  uid: com.microsoft.azure.storage.OperationContext.initialize()
- fullName: com.microsoft.azure.storage.OperationContext.isLoggingEnabled()
  name: isLoggingEnabled()
  nameWithType: OperationContext.isLoggingEnabled()
  returns:
    description: >-
      <p>

        <code>true</code> if logging is enabled; otherwise <code>false</code>. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates whether log entries will be produced for this request.</p>

    <p></p>
  syntax: public boolean isLoggingEnabled()
  uid: com.microsoft.azure.storage.OperationContext.isLoggingEnabled()
- fullName: com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault()
  name: isLoggingEnabledByDefault()
  nameWithType: OperationContext.isLoggingEnabledByDefault()
  returns:
    description: >-
      <p>

        <code>true</code> if logging is enabled by default; otherwise <code>false</code>. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Indicates whether the client library should produce log entries by default. The default can be overridden to enable logging for an individual operation context instance by using <xref uid="com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean)" data-throw-if-not-resolved="false" data-raw-source="setLoggingEnabled"></xref>.</p>

    <p></p>
  syntax: public static boolean isLoggingEnabledByDefault()
  uid: com.microsoft.azure.storage.OperationContext.isLoggingEnabledByDefault()
- fullName: com.microsoft.azure.storage.OperationContext.setClientRequestID(final String clientRequestID)
  name: setClientRequestID(final String clientRequestID)
  nameWithType: OperationContext.setClientRequestID(final String clientRequestID)
  parameters:
  - description: <p>A <code>String</code> which contains the client request ID to set. </p>
    name: clientRequestID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the client side request ID.</p>

    <p></p>
  syntax: public void setClientRequestID(final String clientRequestID)
  uid: com.microsoft.azure.storage.OperationContext.setClientRequestID(final String)
- fullName: com.microsoft.azure.storage.OperationContext.setClientTimeInMs(final long clientTimeInMs)
  name: setClientTimeInMs(final long clientTimeInMs)
  nameWithType: OperationContext.setClientTimeInMs(final long clientTimeInMs)
  parameters:
  - description: <p>A <code>long</code> which contains the client operation latency in milliseconds. </p>
    name: clientTimeInMs
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reserved for internal use. Represents the operation latency, in milliseconds, from the client's perspective. This may include any potential retries.</p>

    <p></p>
  syntax: public void setClientTimeInMs(final long clientTimeInMs)
  uid: com.microsoft.azure.storage.OperationContext.setClientTimeInMs(final long)
- fullName: com.microsoft.azure.storage.OperationContext.setDefaultProxy(Proxy defaultProxy)
  name: setDefaultProxy(Proxy defaultProxy)
  nameWithType: OperationContext.setDefaultProxy(Proxy defaultProxy)
  parameters:
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.net.Proxy"></xref> to use by default, or <code>null</code> to not use a proxy. </p>
    name: defaultProxy
    type: <xref href="Proxy?alt=Proxy&text=Proxy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies the proxy the client library should use by default. The default can be overridden to turn on a proxy for an individual operation context instance by using <xref uid="com.microsoft.azure.storage.OperationContext.setProxy(Proxy)" data-throw-if-not-resolved="false" data-raw-source="setProxy"></xref>.</p>

    <p></p>
  syntax: public static void setDefaultProxy(Proxy defaultProxy)
  uid: com.microsoft.azure.storage.OperationContext.setDefaultProxy(Proxy)
- fullName: com.microsoft.azure.storage.OperationContext.setDefaultProxyPassword(final String password)
  name: setDefaultProxyPassword(final String password)
  nameWithType: OperationContext.setDefaultProxyPassword(final String password)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref> to use when making a request. </p>
    name: password
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a default password for an authenticated proxy which will be used when making a request. Default is .</p>

    <p></p>
  syntax: public static void setDefaultProxyPassword(final String password)
  uid: com.microsoft.azure.storage.OperationContext.setDefaultProxyPassword(final String)
- fullName: com.microsoft.azure.storage.OperationContext.setDefaultProxyUsername(final String username)
  name: setDefaultProxyUsername(final String username)
  nameWithType: OperationContext.setDefaultProxyUsername(final String username)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref> to use when making a request. </p>
    name: username
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a default username for an authenticated proxy which will be used when making a request. Default is .</p>

    <p></p>
  syntax: public static void setDefaultProxyUsername(final String username)
  uid: com.microsoft.azure.storage.OperationContext.setDefaultProxyUsername(final String)
- fullName: com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)
  name: setErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)
  nameWithType: OperationContext.setErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>errorReceivingResponseEventHandler</code>. </p>
    name: errorReceivingResponseEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets an event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received.</p>

    <p></p>
  syntax: public void setErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> errorReceivingResponseEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)
  name: setGlobalErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)
  nameWithType: OperationContext.setGlobalErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>globalErrorReceivingResponseEventHandler</code>. </p>
    name: globalErrorReceivingResponseEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ErrorReceivingResponseEvent?alt=com.microsoft.azure.storage.ErrorReceivingResponseEvent&text=ErrorReceivingResponseEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets a global event multi-caster that is triggered when a network error occurs before the HTTP response status and headers are received.</p>

    <p></p>
  syntax: public static void setGlobalErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>> globalErrorReceivingResponseEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setGlobalErrorReceivingResponseEventHandler(final StorageEventMultiCaster<ErrorReceivingResponseEvent, StorageEvent<ErrorReceivingResponseEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)
  name: setGlobalRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)
  nameWithType: OperationContext.setGlobalRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>globalRequestCompletedEventHandler</code>. </p>
    name: globalRequestCompletedEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets a global event multi-caster that is triggered when a request is completed.</p>

    <p></p>
  syntax: public static void setGlobalRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> globalRequestCompletedEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setGlobalRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)
  name: setGlobalResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)
  nameWithType: OperationContext.setGlobalResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>globalResponseReceivedEventHandler</code>. </p>
    name: globalResponseReceivedEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets a global event multi-caster that is triggered when a response is received.</p>

    <p></p>
  syntax: public static void setGlobalResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> globalResponseReceivedEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setGlobalResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> globalRetryingEventHandler)
  name: setGlobalRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> globalRetryingEventHandler)
  nameWithType: OperationContext.setGlobalRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> globalRetryingEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>globalRetryingEventHandler</code>. </p>
    name: globalRetryingEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets a global event multi-caster that is triggered when a request is retried.</p>

    <p></p>
  syntax: public static void setGlobalRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> globalRetryingEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setGlobalRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)
  name: setGlobalSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)
  nameWithType: OperationContext.setGlobalSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>globalSendingRequestEventHandler</code>. </p>
    name: globalSendingRequestEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets a global event multi-caster that is triggered before sending a request.</p>

    <p></p>
  syntax: public static void setGlobalSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> globalSendingRequestEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setGlobalSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setLogger(final org.slf4j.Logger logger)
  name: setLogger(final org.slf4j.Logger logger)
  nameWithType: OperationContext.setLogger(final org.slf4j.Logger logger)
  parameters:
  - description: <p>The <code><xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref></code> to use for this operation. </p>
    name: logger
    type: <xref href="final+org.slf4j.Logger?alt=final+org.slf4j.Logger&text=final+org.slf4j.Logger" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="org.slf4j.Logger"></xref> for this operation.</p>

    <p></p>
  syntax: public void setLogger(final org.slf4j.Logger logger)
  uid: com.microsoft.azure.storage.OperationContext.setLogger(final org.slf4j.Logger)
- fullName: com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean loggingEnabled)
  name: setLoggingEnabled(boolean loggingEnabled)
  nameWithType: OperationContext.setLoggingEnabled(boolean loggingEnabled)
  parameters:
  - description: >-
      <p>

        <code>true</code> to enable logging; otherwise <code>false</code> to disable logging. </p>
    name: loggingEnabled
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies whether log entries will be produced for this request.</p>

    <p></p>
  syntax: public void setLoggingEnabled(boolean loggingEnabled)
  uid: com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean)
- fullName: com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault(boolean enableLoggingByDefault)
  name: setLoggingEnabledByDefault(boolean enableLoggingByDefault)
  nameWithType: OperationContext.setLoggingEnabledByDefault(boolean enableLoggingByDefault)
  parameters:
  - description: >-
      <p>

        <code>true</code> if logging should be enabled by default; otherwise <code>false</code> if logging should be disabled by default. </p>
    name: enableLoggingByDefault
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Specifies whether the client library should produce log entries by default. The default can be overridden to turn on logging for an individual operation context instance by using <xref uid="com.microsoft.azure.storage.OperationContext.setLoggingEnabled(boolean)" data-throw-if-not-resolved="false" data-raw-source="setLoggingEnabled"></xref>.</p>

    <p></p>
  syntax: public static void setLoggingEnabledByDefault(boolean enableLoggingByDefault)
  uid: com.microsoft.azure.storage.OperationContext.setLoggingEnabledByDefault(boolean)
- fullName: com.microsoft.azure.storage.OperationContext.setProxy(Proxy proxy)
  name: setProxy(Proxy proxy)
  nameWithType: OperationContext.setProxy(Proxy proxy)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.net.Proxy"></xref> to use when making a request. </p>
    name: proxy
    type: <xref href="Proxy?alt=Proxy&text=Proxy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a proxy which will be used when making a request. Default is . To set a proxy to use by default, use <xref uid="com.microsoft.azure.storage.OperationContext.setDefaultProxy(Proxy)" data-throw-if-not-resolved="false" data-raw-source="setDefaultProxy"></xref></p>

    <p></p>
  syntax: public void setProxy(Proxy proxy)
  uid: com.microsoft.azure.storage.OperationContext.setProxy(Proxy)
- fullName: com.microsoft.azure.storage.OperationContext.setProxyPassword(final String password)
  name: setProxyPassword(final String password)
  nameWithType: OperationContext.setProxyPassword(final String password)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref> to use when making a request. </p>
    name: password
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a password for an authenticated proxy which will be used when making a request. Default is .</p>

    <p></p>
  syntax: public void setProxyPassword(final String password)
  uid: com.microsoft.azure.storage.OperationContext.setProxyPassword(final String)
- fullName: com.microsoft.azure.storage.OperationContext.setProxyUsername(final String username)
  name: setProxyUsername(final String username)
  nameWithType: OperationContext.setProxyUsername(final String username)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.lang.String"></xref> to use when making a request. </p>
    name: username
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a username for an authenticated proxy which will be used when making a request. Default is .</p>

    <p></p>
  syntax: public void setProxyUsername(final String username)
  uid: com.microsoft.azure.storage.OperationContext.setProxyUsername(final String)
- fullName: com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)
  name: setRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)
  nameWithType: OperationContext.setRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>requestCompletedEventHandler</code>. </p>
    name: requestCompletedEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RequestCompletedEvent?alt=com.microsoft.azure.storage.RequestCompletedEvent&text=RequestCompletedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets an event multi-caster that is triggered when a request is completed.</p>

    <p></p>
  syntax: public void setRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>> requestCompletedEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setRequestCompletedEventHandler(final StorageEventMultiCaster<RequestCompletedEvent, StorageEvent<RequestCompletedEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)
  name: setResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)
  nameWithType: OperationContext.setResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>responseReceivedEventHandler</code>. </p>
    name: responseReceivedEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ResponseReceivedEvent?alt=com.microsoft.azure.storage.ResponseReceivedEvent&text=ResponseReceivedEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets an event multi-caster that is triggered when a response is received.</p>

    <p></p>
  syntax: public void setResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>> responseReceivedEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setResponseReceivedEventHandler(final StorageEventMultiCaster<ResponseReceivedEvent, StorageEvent<ResponseReceivedEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> retryingEventHandler)
  name: setRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> retryingEventHandler)
  nameWithType: OperationContext.setRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> retryingEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>retryingEventHandler</code>. </p>
    name: retryingEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.RetryingEvent?alt=com.microsoft.azure.storage.RetryingEvent&text=RetryingEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets an event multi-caster that is triggered when a request is retried.</p>

    <p></p>
  syntax: public void setRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>> retryingEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setRetryingEventHandler(final StorageEventMultiCaster<RetryingEvent, StorageEvent<RetryingEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)
  name: setSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)
  nameWithType: OperationContext.setSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)
  parameters:
  - description: <p>The <xref uid="com.microsoft.azure.storage.StorageEventMultiCaster" data-throw-if-not-resolved="false" data-raw-source="StorageEventMultiCaster"></xref> object to set for the <code>sendingRequestEventHandler</code>. </p>
    name: sendingRequestEventHandler
    type: final <xref href="com.microsoft.azure.storage.StorageEventMultiCaster?alt=com.microsoft.azure.storage.StorageEventMultiCaster&text=StorageEventMultiCaster" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.StorageEvent?alt=com.microsoft.azure.storage.StorageEvent&text=StorageEvent" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.SendingRequestEvent?alt=com.microsoft.azure.storage.SendingRequestEvent&text=SendingRequestEvent" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Sets an event multi-caster that is triggered before sending a request.</p>

    <p></p>
  syntax: public void setSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>> sendingRequestEventHandler)
  uid: com.microsoft.azure.storage.OperationContext.setSendingRequestEventHandler(final StorageEventMultiCaster<SendingRequestEvent, StorageEvent<SendingRequestEvent>>)
- fullName: com.microsoft.azure.storage.OperationContext.setUserHeaders(final HashMap<String, String> userHeaders)
  name: setUserHeaders(final HashMap<String, String> userHeaders)
  nameWithType: OperationContext.setUserHeaders(final HashMap<String, String> userHeaders)
  parameters:
  - description: <p>A <code>java.util.HashMap</code> which contains any additional headers to set. </p>
    name: userHeaders
    type: <xref href="final+HashMap%3CString%2C+String%3E?alt=final+HashMap%3CString%2C+String%3E&text=final+HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets any additional headers for the request, for example, for proxy or logging information.</p>

    <p></p>
  syntax: public void setUserHeaders(final HashMap<String, String> userHeaders)
  uid: com.microsoft.azure.storage.OperationContext.setUserHeaders(final HashMap<String, String>)
nameWithType: OperationContext
syntax: public class OperationContext
type: class
uid: com.microsoft.azure.storage.OperationContext
fullName: com.microsoft.azure.storage.OperationContext
name: OperationContext
package: com.microsoft.azure.storage
summary: <p>Represents the current logical operation. A logical operation may have a one-to-many relationship with multiple individual physical requests. </p>
metadata: {}
