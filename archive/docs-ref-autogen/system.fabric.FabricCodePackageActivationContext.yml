### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
- <xref href="system.fabric.CodePackageActivationContext?alt=system.fabric.CodePackageActivationContext&text=CodePackageActivationContext" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.FabricCodePackageActivationContext.close()
  name: close()
  nameWithType: FabricCodePackageActivationContext.close()
  summary: <p>Cleans up resources held by this object. 1) Unregisters Code, Configuration and Data change handlers. 2) Releases Code, Configuration and Data broker's native pointers. 3) Releases CodeActivationContext native pointer. </p>
  syntax: public void close()
  uid: system.fabric.FabricCodePackageActivationContext.close()
- fullName: system.fabric.FabricCodePackageActivationContext.getApplicationName()
  name: getApplicationName()
  nameWithType: FabricCodePackageActivationContext.getApplicationName()
  overridden: system.fabric.CodePackageActivationContext.getApplicationName()
  returns:
    description: <p>The name of the application. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the application.</p>

    <p></p>
  syntax: public String getApplicationName()
  uid: system.fabric.FabricCodePackageActivationContext.getApplicationName()
- fullName: system.fabric.FabricCodePackageActivationContext.getApplicationTypeName()
  name: getApplicationTypeName()
  nameWithType: FabricCodePackageActivationContext.getApplicationTypeName()
  overridden: system.fabric.CodePackageActivationContext.getApplicationTypeName()
  returns:
    description: <p>The name of the application type. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the application type.</p>

    <p></p>
  syntax: public String getApplicationTypeName()
  uid: system.fabric.FabricCodePackageActivationContext.getApplicationTypeName()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodeActivationContextPtr()
  name: getCodeActivationContextPtr()
  nameWithType: FabricCodePackageActivationContext.getCodeActivationContextPtr()
  returns:
    description: <p>CodePackageActicationPointer </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: <p>Getter for CodePackageActicationPointer </p>
  syntax: public long getCodeActivationContextPtr()
  uid: system.fabric.FabricCodePackageActivationContext.getCodeActivationContextPtr()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageAddedEvent()
  name: getCodePackageAddedEvent()
  nameWithType: FabricCodePackageActivationContext.getCodePackageAddedEvent()
  overridden: system.fabric.CodePackageActivationContext.getCodePackageAddedEvent()
  returns:
    description: <p>Getter for the CodePackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageAddedEventArgs?alt=system.fabric.PackageAddedEventArgs&text=PackageAddedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.CodePackage?alt=system.fabric.CodePackage&text=CodePackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>CodePackageAddedEvent should be used to register listeners to listen to the events that are generated on adding new Code package to service manifest.</p>

    <p></p>
  syntax: public Observable<PackageAddedEventArgs<CodePackage>> getCodePackageAddedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageAddedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageModifiedEvent()
  name: getCodePackageModifiedEvent()
  nameWithType: FabricCodePackageActivationContext.getCodePackageModifiedEvent()
  overridden: system.fabric.CodePackageActivationContext.getCodePackageModifiedEvent()
  returns:
    description: <p>Getter for the CodePackageRemovedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageModifiedEventArgs?alt=system.fabric.PackageModifiedEventArgs&text=PackageModifiedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.CodePackage?alt=system.fabric.CodePackage&text=CodePackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>CodePackageRemovedEvent should be used to register listeners to listen to the events that are generated on modifying a Code package in the service manifest.</p>

    <p></p>
  syntax: public Observable<PackageModifiedEventArgs<CodePackage>> getCodePackageModifiedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageModifiedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageName()
  name: getCodePackageName()
  nameWithType: FabricCodePackageActivationContext.getCodePackageName()
  overridden: system.fabric.CodePackageActivationContext.getCodePackageName()
  returns:
    description: <p>The name of the fabric activated code package. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the fabric activated code package.</p>

    <p></p>
  syntax: public String getCodePackageName()
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageName()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageNames()
  name: getCodePackageNames()
  nameWithType: FabricCodePackageActivationContext.getCodePackageNames()
  overridden: system.fabric.CodePackageActivationContext.getCodePackageNames()
  returns:
    description: <p>The list of code package names in the service manifest. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the list of code package names in the service manifest.</p>

    <p></p>
  syntax: public List<String> getCodePackageNames()
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageNames()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageObject(String packageName)
  name: getCodePackageObject(String packageName)
  nameWithType: FabricCodePackageActivationContext.getCodePackageObject(String packageName)
  overridden: system.fabric.CodePackageActivationContext.getCodePackageObject(String)
  parameters:
  - description: <p>Name of the CodePackage </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>returns <xref uid="system.fabric.CodePackage" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CodePackage"></xref></p>
    type: <xref href="system.fabric.CodePackage?alt=system.fabric.CodePackage&text=CodePackage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the CodePackage object from Service Package that matches the packageName parameter</p>

    <p></p>
  syntax: public CodePackage getCodePackageObject(String packageName)
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageObject(String)
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageRemovedEvent()
  name: getCodePackageRemovedEvent()
  nameWithType: FabricCodePackageActivationContext.getCodePackageRemovedEvent()
  overridden: system.fabric.CodePackageActivationContext.getCodePackageRemovedEvent()
  returns:
    description: <p>Getter for the CodePackageRemovedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageRemovedEventArgs?alt=system.fabric.PackageRemovedEventArgs&text=PackageRemovedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.CodePackage?alt=system.fabric.CodePackage&text=CodePackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>CodePackageRemovedEvent should be used to register listeners to listen to the events that are generated on removing a Code package in the service manifest.</p>

    <p></p>
  syntax: public Observable<PackageRemovedEventArgs<CodePackage>> getCodePackageRemovedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageRemovedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getCodePackageVersion()
  name: getCodePackageVersion()
  nameWithType: FabricCodePackageActivationContext.getCodePackageVersion()
  overridden: system.fabric.CodePackageActivationContext.getCodePackageVersion()
  returns:
    description: <p>The version of the fabric activated code package. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the version of the fabric activated code package</p>

    <p></p>
  syntax: public String getCodePackageVersion()
  uid: system.fabric.FabricCodePackageActivationContext.getCodePackageVersion()
- fullName: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageAddedEvent()
  name: getConfigurationPackageAddedEvent()
  nameWithType: FabricCodePackageActivationContext.getConfigurationPackageAddedEvent()
  overridden: system.fabric.CodePackageActivationContext.getConfigurationPackageAddedEvent()
  returns:
    description: <p>Getter for the ConfigurationPackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageAddedEventArgs?alt=system.fabric.PackageAddedEventArgs&text=PackageAddedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.ConfigurationPackage?alt=system.fabric.ConfigurationPackage&text=ConfigurationPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>ConfigurationPackageAddedEvent should be used to register listeners to listen to the events that are generated on adding new Config package to service manifest.</p>

    <p></p>
  syntax: public Observable<PackageAddedEventArgs<ConfigurationPackage>> getConfigurationPackageAddedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageAddedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageModifiedEvent()
  name: getConfigurationPackageModifiedEvent()
  nameWithType: FabricCodePackageActivationContext.getConfigurationPackageModifiedEvent()
  overridden: system.fabric.CodePackageActivationContext.getConfigurationPackageModifiedEvent()
  returns:
    description: <p>Getter for the ConfigurationPackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageModifiedEventArgs?alt=system.fabric.PackageModifiedEventArgs&text=PackageModifiedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.ConfigurationPackage?alt=system.fabric.ConfigurationPackage&text=ConfigurationPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>ConfigurationPackageAddedEvent should be used to register listeners to listen to the events that are generated on modifying a Config package in the service manifest.</p>

    <p></p>
  syntax: public Observable<PackageModifiedEventArgs<ConfigurationPackage>> getConfigurationPackageModifiedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageModifiedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageNames()
  name: getConfigurationPackageNames()
  nameWithType: FabricCodePackageActivationContext.getConfigurationPackageNames()
  overridden: system.fabric.CodePackageActivationContext.getConfigurationPackageNames()
  returns:
    description: <p>The list of configuration package names in the service manifest. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the list of configuration package names in the service manifest.</p>

    <p></p>
  syntax: public List<String> getConfigurationPackageNames()
  uid: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageNames()
- fullName: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageObject(String packageName)
  name: getConfigurationPackageObject(String packageName)
  nameWithType: FabricCodePackageActivationContext.getConfigurationPackageObject(String packageName)
  overridden: system.fabric.CodePackageActivationContext.getConfigurationPackageObject(String)
  parameters:
  - description: <p>Name of the ConfigurationPackage </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>returns <xref uid="system.fabric.ConfigurationPackage" data-throw-if-not-resolved="false" data-raw-source="system.fabric.ConfigurationPackage"></xref></p>
    type: <xref href="system.fabric.ConfigurationPackage?alt=system.fabric.ConfigurationPackage&text=ConfigurationPackage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns ConfigurationPackage object from Service Package that matches the packageName parameter</p>

    <p></p>
  syntax: public ConfigurationPackage getConfigurationPackageObject(String packageName)
  uid: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageObject(String)
- fullName: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageRemovedEvent()
  name: getConfigurationPackageRemovedEvent()
  nameWithType: FabricCodePackageActivationContext.getConfigurationPackageRemovedEvent()
  overridden: system.fabric.CodePackageActivationContext.getConfigurationPackageRemovedEvent()
  returns:
    description: <p>Getter for the ConfigurationPackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageRemovedEventArgs?alt=system.fabric.PackageRemovedEventArgs&text=PackageRemovedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.ConfigurationPackage?alt=system.fabric.ConfigurationPackage&text=ConfigurationPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>ConfigurationPackageAddedEvent should be used to register listeners to listen to the events that are generated on removing a Config package in the service manifest.</p>

    <p></p>
  syntax: public Observable<PackageRemovedEventArgs<ConfigurationPackage>> getConfigurationPackageRemovedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getConfigurationPackageRemovedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getContextId()
  name: getContextId()
  nameWithType: FabricCodePackageActivationContext.getContextId()
  overridden: system.fabric.CodePackageActivationContext.getContextId()
  returns:
    description: <p>The context ID. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the ID that represents the service package name qualified with Application package name.</p>

    <p></p>
  syntax: public String getContextId()
  uid: system.fabric.FabricCodePackageActivationContext.getContextId()
- fullName: system.fabric.FabricCodePackageActivationContext.getDataPackageAddedEvent()
  name: getDataPackageAddedEvent()
  nameWithType: FabricCodePackageActivationContext.getDataPackageAddedEvent()
  overridden: system.fabric.CodePackageActivationContext.getDataPackageAddedEvent()
  returns:
    description: <p>Getter for the DataPackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageAddedEventArgs?alt=system.fabric.PackageAddedEventArgs&text=PackageAddedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.DataPackage?alt=system.fabric.DataPackage&text=DataPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>DataPackageAddedEvent should be used to register listeners to listen to the events that are generated on adding new Data package to service manifest.</p>

    <p></p>
  syntax: public Observable<PackageAddedEventArgs<DataPackage>> getDataPackageAddedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getDataPackageAddedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getDataPackageModifiedEvent()
  name: getDataPackageModifiedEvent()
  nameWithType: FabricCodePackageActivationContext.getDataPackageModifiedEvent()
  overridden: system.fabric.CodePackageActivationContext.getDataPackageModifiedEvent()
  returns:
    description: <p>Getter for the DataPackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageModifiedEventArgs?alt=system.fabric.PackageModifiedEventArgs&text=PackageModifiedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.DataPackage?alt=system.fabric.DataPackage&text=DataPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>DataPackageAddedEvent should be used to register listeners to listen to the events that are generated on modifying a Data package in the service manifest.</p>

    <p></p>
  syntax: public Observable<PackageModifiedEventArgs<DataPackage>> getDataPackageModifiedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getDataPackageModifiedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getDataPackageNames()
  name: getDataPackageNames()
  nameWithType: FabricCodePackageActivationContext.getDataPackageNames()
  overridden: system.fabric.CodePackageActivationContext.getDataPackageNames()
  returns:
    description: <p>A list of data packages. </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves all data packages by name.</p>

    <p></p>
  syntax: public List<String> getDataPackageNames()
  uid: system.fabric.FabricCodePackageActivationContext.getDataPackageNames()
- fullName: system.fabric.FabricCodePackageActivationContext.getDataPackageObject(String packageName)
  name: getDataPackageObject(String packageName)
  nameWithType: FabricCodePackageActivationContext.getDataPackageObject(String packageName)
  overridden: system.fabric.CodePackageActivationContext.getDataPackageObject(String)
  parameters:
  - description: <p>Name of the DataPackage </p>
    name: packageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns DataPackage object from Service Package that matches the packageName parameter. </p>
    type: <xref href="system.fabric.DataPackage?alt=system.fabric.DataPackage&text=DataPackage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns DataPackage object from Service Package that matches the packageName parameter</p>

    <p></p>
  syntax: public DataPackage getDataPackageObject(String packageName)
  uid: system.fabric.FabricCodePackageActivationContext.getDataPackageObject(String)
- fullName: system.fabric.FabricCodePackageActivationContext.getDataPackageRemovedEvent()
  name: getDataPackageRemovedEvent()
  nameWithType: FabricCodePackageActivationContext.getDataPackageRemovedEvent()
  overridden: system.fabric.CodePackageActivationContext.getDataPackageRemovedEvent()
  returns:
    description: <p>Getter for the DataPackageAddedEvent <xref uid="system.fabric.Observable" data-throw-if-not-resolved="false" data-raw-source="system.fabric.Observable"></xref>. </p>
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.PackageRemovedEventArgs?alt=system.fabric.PackageRemovedEventArgs&text=PackageRemovedEventArgs" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.DataPackage?alt=system.fabric.DataPackage&text=DataPackage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>DataPackageAddedEvent should be used to register listeners to listen to the events that are generated on removing a Data package in the service manifest.</p>

    <p></p>
  syntax: public Observable<PackageRemovedEventArgs<DataPackage>> getDataPackageRemovedEvent()
  uid: system.fabric.FabricCodePackageActivationContext.getDataPackageRemovedEvent()
- fullName: system.fabric.FabricCodePackageActivationContext.getEndpoint(String endpointName)
  name: getEndpoint(String endpointName)
  nameWithType: FabricCodePackageActivationContext.getEndpoint(String endpointName)
  overridden: system.fabric.CodePackageActivationContext.getEndpoint(String)
  parameters:
  - description: <p>The name of the endpoint. </p>
    name: endpointName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The endpoint with a specified name. </p>
    type: <xref href="system.fabric.description.EndpointResourceDescription?alt=system.fabric.description.EndpointResourceDescription&text=EndpointResourceDescription" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the endpoint by name.</p>

    <p></p>
  syntax: public EndpointResourceDescription getEndpoint(String endpointName)
  uid: system.fabric.FabricCodePackageActivationContext.getEndpoint(String)
- fullName: system.fabric.FabricCodePackageActivationContext.getEndpoints()
  name: getEndpoints()
  nameWithType: FabricCodePackageActivationContext.getEndpoints()
  overridden: system.fabric.CodePackageActivationContext.getEndpoints()
  returns:
    description: <p>The end point names in the service manifest. </p>
    type: LinkedHashMap&lt;String, <xref href="system.fabric.description.EndpointResourceDescription?alt=system.fabric.description.EndpointResourceDescription&text=EndpointResourceDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves all the end point names in the service manifest.</p>

    <p></p>
  syntax: public LinkedHashMap<String, EndpointResourceDescription> getEndpoints()
  uid: system.fabric.FabricCodePackageActivationContext.getEndpoints()
- fullName: system.fabric.FabricCodePackageActivationContext.getLogDirectory()
  name: getLogDirectory()
  nameWithType: FabricCodePackageActivationContext.getLogDirectory()
  overridden: system.fabric.CodePackageActivationContext.getLogDirectory()
  returns:
    description: <p>The path to the application logs directory. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path to the log directory that the application can use.</p>

    <p></p>
  syntax: public String getLogDirectory()
  uid: system.fabric.FabricCodePackageActivationContext.getLogDirectory()
- fullName: system.fabric.FabricCodePackageActivationContext.getServiceListenAddress()
  name: getServiceListenAddress()
  nameWithType: FabricCodePackageActivationContext.getServiceListenAddress()
  overridden: system.fabric.CodePackageActivationContext.getServiceListenAddress()
  returns:
    description: <p>The address at which the service should start the communication listener </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The address at which the service should start the communication listener.</p>

    <p></p>
  syntax: public String getServiceListenAddress()
  uid: system.fabric.FabricCodePackageActivationContext.getServiceListenAddress()
- fullName: system.fabric.FabricCodePackageActivationContext.getServiceManifestName()
  name: getServiceManifestName()
  nameWithType: FabricCodePackageActivationContext.getServiceManifestName()
  overridden: system.fabric.CodePackageActivationContext.getServiceManifestName()
  returns:
    description: <p>The name of the service manifest. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the name of the service manifest.</p>

    <p></p>
  syntax: public String getServiceManifestName()
  uid: system.fabric.FabricCodePackageActivationContext.getServiceManifestName()
- fullName: system.fabric.FabricCodePackageActivationContext.getServiceManifestVersion()
  name: getServiceManifestVersion()
  nameWithType: FabricCodePackageActivationContext.getServiceManifestVersion()
  overridden: system.fabric.CodePackageActivationContext.getServiceManifestVersion()
  returns:
    description: <p>The version of the service manifest. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieves the version of the service manifest.</p>

    <p></p>
  syntax: public String getServiceManifestVersion()
  uid: system.fabric.FabricCodePackageActivationContext.getServiceManifestVersion()
- fullName: system.fabric.FabricCodePackageActivationContext.getServicePublishAddress()
  name: getServicePublishAddress()
  nameWithType: FabricCodePackageActivationContext.getServicePublishAddress()
  overridden: system.fabric.CodePackageActivationContext.getServicePublishAddress()
  returns:
    description: <p>The address which the service should publish as the listen address. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The address which the service should publish as the listen address.</p>

    <p></p>
  syntax: public String getServicePublishAddress()
  uid: system.fabric.FabricCodePackageActivationContext.getServicePublishAddress()
- fullName: system.fabric.FabricCodePackageActivationContext.getServiceTypes()
  name: getServiceTypes()
  nameWithType: FabricCodePackageActivationContext.getServiceTypes()
  overridden: system.fabric.CodePackageActivationContext.getServiceTypes()
  returns:
    description: <p>The list of Service Group types in the service manifest. </p>
    type: LinkedHashMap&lt;String, <xref href="system.fabric.description.ServiceTypeDescription?alt=system.fabric.description.ServiceTypeDescription&text=ServiceTypeDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves the list of Service Group types in the service manifest.</p>

    <p></p>
  syntax: public LinkedHashMap<String, ServiceTypeDescription> getServiceTypes()
  uid: system.fabric.FabricCodePackageActivationContext.getServiceTypes()
- fullName: system.fabric.FabricCodePackageActivationContext.getTempDirectory()
  name: getTempDirectory()
  nameWithType: FabricCodePackageActivationContext.getTempDirectory()
  overridden: system.fabric.CodePackageActivationContext.getTempDirectory()
  returns:
    description: <p>The path to the Temp directory. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path to the Temp directory that the Application can use.</p>

    <p></p>
  syntax: public String getTempDirectory()
  uid: system.fabric.FabricCodePackageActivationContext.getTempDirectory()
- fullName: system.fabric.FabricCodePackageActivationContext.getWorkDirectory()
  name: getWorkDirectory()
  nameWithType: FabricCodePackageActivationContext.getWorkDirectory()
  overridden: system.fabric.CodePackageActivationContext.getWorkDirectory()
  returns:
    description: <p>The path to the Work directory. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path to the Work directory that the Application can use.</p>

    <p></p>
  syntax: public String getWorkDirectory()
  uid: system.fabric.FabricCodePackageActivationContext.getWorkDirectory()
- fullName: system.fabric.FabricCodePackageActivationContext.reportApplicationHealth(HealthInformation healthInfo)
  name: reportApplicationHealth(HealthInformation healthInfo)
  nameWithType: FabricCodePackageActivationContext.reportApplicationHealth(HealthInformation healthInfo)
  overridden: system.fabric.CodePackageActivationContext.reportApplicationHealth(HealthInformation)
  parameters:
  - description: <p>Health information that is to be reported. </p>
    name: healthInfo
    type: <xref href="system.fabric.health.HealthInformation?alt=system.fabric.health.HealthInformation&text=HealthInformation" data-throw-if-not-resolved="False"/>
  summary: <p>Reports health for current application. </p>
  syntax: public void reportApplicationHealth(HealthInformation healthInfo)
  uid: system.fabric.FabricCodePackageActivationContext.reportApplicationHealth(HealthInformation)
- fullName: system.fabric.FabricCodePackageActivationContext.reportDeployedApplicationHealth(HealthInformation healthInfo)
  name: reportDeployedApplicationHealth(HealthInformation healthInfo)
  nameWithType: FabricCodePackageActivationContext.reportDeployedApplicationHealth(HealthInformation healthInfo)
  overridden: system.fabric.CodePackageActivationContext.reportDeployedApplicationHealth(HealthInformation)
  parameters:
  - description: <p>Health information that is to be reported. </p>
    name: healthInfo
    type: <xref href="system.fabric.health.HealthInformation?alt=system.fabric.health.HealthInformation&text=HealthInformation" data-throw-if-not-resolved="False"/>
  summary: <p>Reports health for current deployed application. </p>
  syntax: public void reportDeployedApplicationHealth(HealthInformation healthInfo)
  uid: system.fabric.FabricCodePackageActivationContext.reportDeployedApplicationHealth(HealthInformation)
- fullName: system.fabric.FabricCodePackageActivationContext.reportDeployedServicePackageHealth(HealthInformation healthInfo)
  name: reportDeployedServicePackageHealth(HealthInformation healthInfo)
  nameWithType: FabricCodePackageActivationContext.reportDeployedServicePackageHealth(HealthInformation healthInfo)
  overridden: system.fabric.CodePackageActivationContext.reportDeployedServicePackageHealth(HealthInformation)
  parameters:
  - description: <p>Health information that is to be reported. </p>
    name: healthInfo
    type: <xref href="system.fabric.health.HealthInformation?alt=system.fabric.health.HealthInformation&text=HealthInformation" data-throw-if-not-resolved="False"/>
  summary: <p>Reports health for current deployed service package. </p>
  syntax: public void reportDeployedServicePackageHealth(HealthInformation healthInfo)
  uid: system.fabric.FabricCodePackageActivationContext.reportDeployedServicePackageHealth(HealthInformation)
nameWithType: FabricCodePackageActivationContext
syntax: public class FabricCodePackageActivationContext implements CodePackageActivationContext
type: class
uid: system.fabric.FabricCodePackageActivationContext
fullName: system.fabric.FabricCodePackageActivationContext
name: FabricCodePackageActivationContext
package: system.fabric
summary: <p>Represents activation context for the Service Fabric service. This is valid for fabric activated service only. </p>
metadata: {}
