### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.ApplicationPackagesInner(Retrofit retrofit, BatchManagementClientImpl client)
  name: ApplicationPackagesInner(Retrofit retrofit, BatchManagementClientImpl client)
  nameWithType: ApplicationPackagesInner.ApplicationPackagesInner(Retrofit retrofit, BatchManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl?alt=com.microsoft.azure.management.batch.implementation.BatchManagementClientImpl&text=BatchManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of ApplicationPackagesInner.</p>

    <p></p>
  syntax: public ApplicationPackagesInner(Retrofit retrofit, BatchManagementClientImpl client)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.ApplicationPackagesInner(Retrofit,BatchManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activate(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  name: activate(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  nameWithType: ApplicationPackagesInner.activate(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The format of the application package binary file. </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationPackageInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Activates the specified application package. This should be done after the `ApplicationPackage` was created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or Tasks.</p>

    <p></p>
  syntax: public ApplicationPackageInner activate(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activate(String,String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  name: activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  nameWithType: ApplicationPackagesInner.activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The format of the application package binary file. </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationPackageInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Activates the specified application package. This should be done after the `ApplicationPackage` was created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or Tasks.</p>

    <p></p>
  syntax: public Observable<ApplicationPackageInner> activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activateAsync(String,String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  name: activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  nameWithType: ApplicationPackagesInner.activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The format of the application package binary file. </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Activates the specified application package. This should be done after the `ApplicationPackage` was created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or Tasks.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationPackageInner> activateAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activateAsync(String,String,String,String,String,final ServiceCallback<ApplicationPackageInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  name: activateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  nameWithType: ApplicationPackagesInner.activateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The format of the application package binary file. </p>
    name: format
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationPackageInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Activates the specified application package. This should be done after the `ApplicationPackage` was created and uploaded. This needs to be done before an `ApplicationPackage` can be used on Pools or Tasks.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationPackageInner>> activateWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName, String format)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.activateWithServiceResponseAsync(String,String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.create(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: create(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.create(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationPackageInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an application package record. The record contains a storageUrl where the package should be uploaded to. Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use storage keys, the URL returned will contain a SAS.</p>

    <p></p>
  syntax: public ApplicationPackageInner create(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.create(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.createAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: createAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.createAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationPackageInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates an application package record. The record contains a storageUrl where the package should be uploaded to. Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use storage keys, the URL returned will contain a SAS.</p>

    <p></p>
  syntax: public Observable<ApplicationPackageInner> createAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.createAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.createAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  name: createAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  nameWithType: ApplicationPackagesInner.createAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates an application package record. The record contains a storageUrl where the package should be uploaded to. Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use storage keys, the URL returned will contain a SAS.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationPackageInner> createAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.createAsync(String,String,String,String,final ServiceCallback<ApplicationPackageInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationPackageInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates an application package record. The record contains a storageUrl where the package should be uploaded to. Once it is uploaded the `ApplicationPackage` needs to be activated using `ApplicationPackageActive` before it can be used. If the auto storage account was configured to use storage keys, the URL returned will contain a SAS.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationPackageInner>> createWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.createWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.delete(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: delete(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.delete(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes an application package record and its associated binary file.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.delete(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application package record and its associated binary file.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.deleteAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ApplicationPackagesInner.deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application package record and its associated binary file.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.deleteAsync(String,String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an application package record and its associated binary file.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.deleteWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.get(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: get(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.get(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ApplicationPackageInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about the specified application package.</p>

    <p></p>
  syntax: public ApplicationPackageInner get(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.get(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.getAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: getAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.getAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationPackageInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application package.</p>

    <p></p>
  syntax: public Observable<ApplicationPackageInner> getAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.getAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.getAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  nameWithType: ApplicationPackagesInner.getAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about the specified application package.</p>

    <p></p>
  syntax: public ServiceFuture<ApplicationPackageInner> getAsync(String resourceGroupName, String accountName, String applicationName, String versionName, final ServiceCallback<ApplicationPackageInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.getAsync(String,String,String,String,final ServiceCallback<ApplicationPackageInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  nameWithType: ApplicationPackagesInner.getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the application. </p>
    name: versionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ApplicationPackageInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets information about the specified application package.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ApplicationPackageInner>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String applicationName, String versionName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.getWithServiceResponseAsync(String,String,String,String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.list(final String resourceGroupName, final String accountName, final String applicationName)
  name: list(final String resourceGroupName, final String accountName, final String applicationName)
  nameWithType: ApplicationPackagesInner.list(final String resourceGroupName, final String accountName, final String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationPackageInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public PagedList<ApplicationPackageInner> list(final String resourceGroupName, final String accountName, final String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.list(final String,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.list(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  name: list(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  nameWithType: ApplicationPackagesInner.list(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationPackageInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public PagedList<ApplicationPackageInner> list(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.list(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName)
  name: listAsync(final String resourceGroupName, final String accountName, final String applicationName)
  nameWithType: ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationPackageInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationPackageInner>> listAsync(final String resourceGroupName, final String accountName, final String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  name: listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  nameWithType: ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationPackageInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationPackageInner>> listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  nameWithType: ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationPackageInner>> listAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String,final String,final String,final Integer,final ListOperationCallback<ApplicationPackageInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String accountName, final String applicationName, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  nameWithType: ApplicationPackagesInner.listAsync(final String resourceGroupName, final String accountName, final String applicationName, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationPackageInner>> listAsync(final String resourceGroupName, final String accountName, final String applicationName, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listAsync(final String,final String,final String,final ListOperationCallback<ApplicationPackageInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: ApplicationPackagesInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ApplicationPackageInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public PagedList<ApplicationPackageInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNext(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: ApplicationPackagesInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationPackageInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<Page<ApplicationPackageInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationPackageInner>> serviceFuture, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationPackageInner>> serviceFuture, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  nameWithType: ApplicationPackagesInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationPackageInner>> serviceFuture, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public ServiceFuture<List<ApplicationPackageInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ApplicationPackageInner>> serviceFuture, final ListOperationCallback<ApplicationPackageInner> serviceCallback)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextAsync(final String,final ServiceFuture<List<ApplicationPackageInner>>,final ListOperationCallback<ApplicationPackageInner>)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: ApplicationPackagesInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ApplicationPackageInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p>ServiceResponse&lt;PageImpl&lt;ApplicationPackageInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<ApplicationPackageInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: ApplicationPackagesInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationPackageInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationPackageInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName)
  name: listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName)
  nameWithType: ApplicationPackagesInner.listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ApplicationPackageInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationPackageInner>>> listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listSinglePageAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  name: listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  nameWithType: ApplicationPackagesInner.listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. ServiceResponse&lt;PageImpl&lt;ApplicationPackageInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. ServiceResponse&lt;PageImpl&lt;ApplicationPackageInner&gt;&gt; * </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. ServiceResponse&lt;PageImpl&lt;ApplicationPackageInner&gt;&gt; * </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ApplicationPackageInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p>ServiceResponse&lt;PageImpl&lt;ApplicationPackageInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<ApplicationPackageInner>>> listSinglePageAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listSinglePageAsync(final String,final String,final String,final Integer)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName)
  nameWithType: ApplicationPackagesInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationPackageInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationPackageInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listWithServiceResponseAsync(final String,final String,final String)
- fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  nameWithType: ApplicationPackagesInner.listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  parameters:
  - description: <p>The name of the resource group that contains the Batch account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Batch account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the application. This must be unique within the account. </p>
    name: applicationName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of items to return in the response. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ApplicationPackageInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.batch.implementation.ApplicationPackageInner?alt=com.microsoft.azure.management.batch.implementation.ApplicationPackageInner&text=ApplicationPackageInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all of the application packages in the specified application.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ApplicationPackageInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String accountName, final String applicationName, final Integer maxresults)
  uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner.listWithServiceResponseAsync(final String,final String,final String,final Integer)
nameWithType: ApplicationPackagesInner
syntax: public class ApplicationPackagesInner
type: class
uid: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner
fullName: com.microsoft.azure.management.batch.implementation.ApplicationPackagesInner
name: ApplicationPackagesInner
package: com.microsoft.azure.management.batch.implementation
summary: <p>An instance of this class provides access to all the operations defined in ApplicationPackages. </p>
metadata: {}
