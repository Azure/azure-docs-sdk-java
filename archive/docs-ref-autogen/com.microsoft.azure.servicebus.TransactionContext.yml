### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.servicebus.TransactionContext.TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  name: TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  nameWithType: TransactionContext.TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  parameters:
  - name: txnId
    type: <xref href="ByteBuffer?alt=ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False"/>
  - name: messagingFactory
    type: <xref href="com.microsoft.azure.servicebus.primitives.MessagingFactory?alt=com.microsoft.azure.servicebus.primitives.MessagingFactory&text=MessagingFactory" data-throw-if-not-resolved="False"/>
  syntax: public TransactionContext(ByteBuffer txnId, MessagingFactory messagingFactory)
  uid: com.microsoft.azure.servicebus.TransactionContext.TransactionContext(ByteBuffer,MessagingFactory)
fields:
- field:
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.servicebus.TransactionContext.NULL_TXN
  name: NULL_TXN
  nameWithType: TransactionContext.NULL_TXN
  syntax: public static TransactionContext NULL_TXN= new TransactionContext(null, null)
  uid: com.microsoft.azure.servicebus.TransactionContext.NULL_TXN
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.servicebus.TransactionContext.commit()
  name: commit()
  nameWithType: TransactionContext.commit()
  exceptions:
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if Commit failed </p>
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  summary: <p>Commits the transaction </p>
  syntax: public void commit()
  uid: com.microsoft.azure.servicebus.TransactionContext.commit()
- fullName: com.microsoft.azure.servicebus.TransactionContext.commitAsync()
  name: commitAsync()
  nameWithType: TransactionContext.commitAsync()
  returns:
    description: <p>a CompletableFuture for the commit operation </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Asynchronously commits the transaction </p>
  syntax: public CompletableFuture<Void> commitAsync()
  uid: com.microsoft.azure.servicebus.TransactionContext.commitAsync()
- fullName: com.microsoft.azure.servicebus.TransactionContext.getTransactionId()
  name: getTransactionId()
  nameWithType: TransactionContext.getTransactionId()
  returns:
    description: <p>transaction ID </p>
    type: <xref href="ByteBuffer?alt=ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False"/>
  summary: <p>Represents the service-side transactionID </p>
  syntax: public ByteBuffer getTransactionId()
  uid: com.microsoft.azure.servicebus.TransactionContext.getTransactionId()
- fullName: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean commit)
  name: notifyTransactionCompletion(boolean commit)
  nameWithType: TransactionContext.notifyTransactionCompletion(boolean commit)
  parameters:
  - description: <p>true indicates success and false for rollback </p>
    name: commit
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>This is not to be called by the user. </p>
  syntax: public void notifyTransactionCompletion(boolean commit)
  uid: com.microsoft.azure.servicebus.TransactionContext.notifyTransactionCompletion(boolean)
- fullName: com.microsoft.azure.servicebus.TransactionContext.rollback()
  name: rollback()
  nameWithType: TransactionContext.rollback()
  exceptions:
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if rollback failed </p>
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  summary: <p>Rollback the transaction </p>
  syntax: public void rollback()
  uid: com.microsoft.azure.servicebus.TransactionContext.rollback()
- fullName: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()
  name: rollbackAsync()
  nameWithType: TransactionContext.rollbackAsync()
  returns:
    description: <p>a CompletableFuture for the rollback operation </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Asynchronously rollback the transaction. </p>
  syntax: public CompletableFuture<Void> rollbackAsync()
  uid: com.microsoft.azure.servicebus.TransactionContext.rollbackAsync()
- fullName: com.microsoft.azure.servicebus.TransactionContext.toString()
  name: toString()
  nameWithType: TransactionContext.toString()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String toString()
  uid: com.microsoft.azure.servicebus.TransactionContext.toString()
nameWithType: TransactionContext
syntax: public class TransactionContext
type: class
uid: com.microsoft.azure.servicebus.TransactionContext
fullName: com.microsoft.azure.servicebus.TransactionContext
name: TransactionContext
package: com.microsoft.azure.servicebus
summary: <p>Represents an active servicebus transaction. A transaction is initiated by calling <xref uid="com.microsoft.azure.servicebus.primitives.MessagingFactory.startTransactionAsync()" data-throw-if-not-resolved="false" data-raw-source="MessagingFactory#startTransactionAsync()"></xref>. A transaction can result in commit or rollback. To commit, call <xref uid="com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)" data-throw-if-not-resolved="false" data-raw-source="MessagingFactory#endTransactionAsync(TransactionContext, boolean)"></xref> with  To rollback, call <xref uid="com.microsoft.azure.servicebus.primitives.MessagingFactory.endTransactionAsync(TransactionContext,boolean)" data-throw-if-not-resolved="false" data-raw-source="MessagingFactory#endTransactionAsync(TransactionContext, boolean)"></xref> with </p>
metadata: {}
