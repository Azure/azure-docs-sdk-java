### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connectionString, IotHubClientProtocol protocol)
  name: DeviceClient(String connectionString, IotHubClientProtocol protocol)
  nameWithType: DeviceClient.DeviceClient(String connectionString, IotHubClientProtocol protocol)
  parameters:
  - description: >-
      <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

          </code> ,<code>DeviceId 

          </code> , and<code>SharedAccessKey 

          </code> . </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the communication protocol used (i.e. HTTPS).</p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if any of<code>connectionString 

          </code> or <code>protocol 

          </code> are<code>null 

          </code> ; or if<code>connectionString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connectionString 

          </code> is for an x509 authenticated device </p>
  summary: >-
    <p>Constructor that takes a connection string as an argument.</p>

    <p></p>
  syntax: public DeviceClient(String connectionString, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  name: DeviceClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: DeviceClient.DeviceClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  parameters:
  - description: >-
      <p>the connection string. The connection string is a set of key-value pairs that are separated by ';', with the keys and values separated by '='. It should contain values for the following keys: <code>HostName 

          </code> ,<code>DeviceId 

          </code> , and<code>SharedAccessKey 

          </code> . </p>
    name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the communication protocol used (i.e. HTTPS) </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The options that allow configuration of the device client instance during initialization</p>
    name: clientOptions
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if any of<code>connectionString 

          </code> or <code>protocol 

          </code> are<code>null 

          </code> ; or if<code>connectionString 

          </code> is missing one of the following attributes:<code>HostName 

          </code> ,<code>DeviceId 

          </code> , or <code>SharedAccessKey 

          </code> or if the IoT hub hostname does not conform to RFC 3986 or if the provided<code>connectionString 

          </code> is for an x509 authenticated device </p>
  summary: >-
    <p>Constructor that takes a connection string as an argument.</p>

    <p></p>
  syntax: public DeviceClient(String connectionString, IotHubClientProtocol protocol, ClientOptions clientOptions)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,IotHubClientProtocol,ClientOptions)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  name: DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  nameWithType: DeviceClient.DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  parameters:
  - description: <p>The host name of the IoT Hub that this client will connect to. </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the device that the connection will identify as. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The provider of all SAS tokens that are used during authentication. </p>
    name: sasTokenProvider
    type: <xref href="com.microsoft.azure.sdk.iot.device.SasTokenProvider?alt=com.microsoft.azure.sdk.iot.device.SasTokenProvider&text=SasTokenProvider" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will connect over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor that allows for the client's SAS token generation to be controlled by the user. Note that options in this client such as setting the SAS token expiry time will throw <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnsupportedOperationException"></xref> since the SDK no longer controls that when this constructor is used. </p>
  syntax: public DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,String,SasTokenProvider,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  name: DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: DeviceClient.DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  parameters:
  - description: <p>The host name of the IoT Hub that this client will connect to. </p>
    name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The Id of the device that the connection will identify as. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The provider of all SAS tokens that are used during authentication. </p>
    name: sasTokenProvider
    type: <xref href="com.microsoft.azure.sdk.iot.device.SasTokenProvider?alt=com.microsoft.azure.sdk.iot.device.SasTokenProvider&text=SasTokenProvider" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol that the client will connect over. </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The options that allow configuration of the device client instance during initialization. </p>
    name: clientOptions
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions" data-throw-if-not-resolved="False"/>
  summary: <p>Constructor that allows for the client's SAS token generation to be controlled by the user. Note that options in this client such as setting the SAS token expiry time will throw <xref uid="" data-throw-if-not-resolved="false" data-raw-source="UnsupportedOperationException"></xref> since the SDK no longer controls that when this constructor is used. </p>
  syntax: public DeviceClient(String hostName, String deviceId, SasTokenProvider sasTokenProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,String,SasTokenProvider,IotHubClientProtocol,ClientOptions)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  name: DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  nameWithType: DeviceClient.DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  parameters:
  - description: '<p>The hostname of the iot hub to connect to (format: "yourHubName.azure-devices.net") </p>'
    name: uri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The id for the device to use </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The security provider for the device </p>
    name: securityProvider
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider&text=SecurityProvider" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol the device shall use for communication to the IoT Hub </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the SecurityProvider throws any exception while authenticating </p>
  summary: >-
    <p>Creates a device client that uses the provided security provider for authentication.</p>

    <p></p>
  syntax: public DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,String,SecurityProvider,IotHubClientProtocol)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  name: DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  nameWithType: DeviceClient.DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  parameters:
  - description: '<p>The hostname of the iot hub to connect to (format: "yourHubName.azure-devices.net") </p>'
    name: uri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The id for the device to use </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The security provider for the device </p>
    name: securityProvider
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider?alt=com.microsoft.azure.sdk.iot.provisioning.security.SecurityProvider&text=SecurityProvider" data-throw-if-not-resolved="False"/>
  - description: <p>The protocol the device shall use for communication to the IoT Hub </p>
    name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - description: <p>The options that allow configuration of the device client instance during initialization </p>
    name: clientOptions
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientOptions?alt=com.microsoft.azure.sdk.iot.device.ClientOptions&text=ClientOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the SecurityProvider throws any exception while authenticating </p>
  summary: >-
    <p>Creates a device client that uses the provided security provider for authentication.</p>

    <p></p>
  syntax: public DeviceClient(String uri, String deviceId, SecurityProvider securityProvider, IotHubClientProtocol protocol, ClientOptions clientOptions)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.DeviceClient(String,String,SecurityProvider,IotHubClientProtocol,ClientOptions)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.device.InternalClient?alt=com.microsoft.azure.sdk.iot.device.InternalClient&text=InternalClient" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.device.InternalClient.DEFAULT_TIMEOUT_MILLISECONDS
- com.microsoft.azure.sdk.iot.device.InternalClient.getConfig()
- com.microsoft.azure.sdk.iot.device.InternalClient.getProductInfo()
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwin()
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwin(int)
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.getTwinAsync(GetTwinCorrelatingMessageCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvent(Message,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEventAsync(Message,MessageSentCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message>)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEvents(List<Message>,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.sendEventsAsync(List<Message>,MessagesSentCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)
- com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredProperties(DesiredPropertiesCallback,Object,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToDesiredPropertiesAsync(DesiredPropertiesCallback,Object,SubscriptionAcknowledgedCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethods(MethodCallback,Object,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.subscribeToMethodsAsync(MethodCallback,Object,SubscriptionAcknowledgedCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedProperties(TwinCollection,int)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesCallback,Object)
- com.microsoft.azure.sdk.iot.device.InternalClient.updateReportedPropertiesAsync(TwinCollection,ReportedPropertiesUpdateCorrelatingMessageCallback,Object)
methods:
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.close()
  name: close()
  nameWithType: DeviceClient.close()
  exceptions:
  - type: <xref href="UnsupportedOperationException?alt=UnsupportedOperationException&text=UnsupportedOperationException" data-throw-if-not-resolved="False"/>
    description: <p>if called on a device that is multiplexed. </p>
  summary: >-
    <p>Closes the IoT hub client by releasing any resources held by client. When close is called all the messages that were in transit or pending to be sent will be informed to the user in the callbacks and any existing connection to IotHub will be closed. Must be called to terminate the background thread that is sending data to IoT hub. After close is called, the IoT hub client must be opened again before it can be used again. If the client is already closed, the function shall do nothing.</p>

    <p></p>
  syntax: public void close()
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.close()
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification notification)
  name: completeFileUpload(FileUploadCompletionNotification notification)
  nameWithType: DeviceClient.completeFileUpload(FileUploadCompletionNotification notification)
  parameters:
  - description: <p>The notification details, including if the file upload succeeded. </p>
    name: notification
    type: <xref href="com.microsoft.azure.sdk.iot.device.FileUploadCompletionNotification?alt=com.microsoft.azure.sdk.iot.device.FileUploadCompletionNotification&text=FileUploadCompletionNotification" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If this HTTPS request fails to send or if the service rejects the request for any reason. </p>
  summary: <p>Notify IoT hub that a file upload has been completed, successfully or otherwise. See <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#notify-iot-hub-of-a-completed-file-upload">this documentation</a> for more details. </p>
  syntax: public void completeFileUpload(FileUploadCompletionNotification notification)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.completeFileUpload(FileUploadCompletionNotification)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest request)
  name: getFileUploadSasUri(FileUploadSasUriRequest request)
  nameWithType: DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest request)
  parameters:
  - description: <p>The request details for getting the SAS URI, including the destination blob name. </p>
    name: request
    type: <xref href="com.microsoft.azure.sdk.iot.device.FileUploadSasUriRequest?alt=com.microsoft.azure.sdk.iot.device.FileUploadSasUriRequest&text=FileUploadSasUriRequest" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>If this HTTPS request fails to send or if the service rejects the request for any reason. </p>
  returns:
    description: <p>The file upload details to be used with the Azure Storage SDK in order to upload a file from this device. </p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.FileUploadSasUriResponse?alt=com.microsoft.azure.sdk.iot.device.FileUploadSasUriResponse&text=FileUploadSasUriResponse" data-throw-if-not-resolved="False"/>
  summary: <p>Get a file upload SAS URI which the Azure Storage SDK can use to upload a file to blob for this device. See <a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-file-upload#initialize-a-file-upload">this documentation</a> for more details. </p>
  syntax: public FileUploadSasUriResponse getFileUploadSasUri(FileUploadSasUriRequest request)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.getFileUploadSasUri(FileUploadSasUriRequest)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.isMultiplexed()
  name: isMultiplexed()
  nameWithType: DeviceClient.isMultiplexed()
  returns:
    description: <p>true if this client is or ever was registered to a <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient"></xref> instance, false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Returns if this client is or ever was registered to a <xref uid="com.microsoft.azure.sdk.iot.device.MultiplexingClient" data-throw-if-not-resolved="false" data-raw-source="MultiplexingClient"></xref> instance. Device clients that were cannot be used in non-multiplexed connections. Device clients that aren't registered to any multiplexing client will still return true. </p>
  syntax: public boolean isMultiplexed()
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.isMultiplexed()
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.open(boolean withRetry)
  name: open(boolean withRetry)
  nameWithType: DeviceClient.open(boolean withRetry)
  parameters:
  - description: <p>if true, this open call will apply the retry policy to allow for the open call to be retried if it fails. Both the operation timeout set in <xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.setOperationTimeout(long)" data-throw-if-not-resolved="false" data-raw-source="setOperationTimeout(long)"></xref> and the retry policy set in {<xref uid="com.microsoft.azure.sdk.iot.device.InternalClient.setRetryPolicy(RetryPolicy)" data-throw-if-not-resolved="false" data-raw-source="setRetryPolicy(RetryPolicy)"></xref>} will be respected while retrying to open the connection.</p>
    name: withRetry
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IotHubClientException?alt=IotHubClientException&text=IotHubClientException" data-throw-if-not-resolved="False"/>
    description: <p>if a connection to an IoT hub cannot be established or if the connection can be established but the service rejects it for any reason. </p>
  summary: >-
    <p>Starts asynchronously sending and receiving messages from an IoT hub. If the client is already open, the function shall do nothing.</p>

    <p></p>
  syntax: public void open(boolean withRetry)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.open(boolean)
- fullName: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback(MessageCallback callback, Object context)
  name: setMessageCallback(MessageCallback callback, Object context)
  nameWithType: DeviceClient.setMessageCallback(MessageCallback callback, Object context)
  parameters:
  - description: >-
      <p>the message callback. Can be<code>null 

          </code> . </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageCallback?alt=com.microsoft.azure.sdk.iot.device.MessageCallback&text=MessageCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>the context to be passed to the callback. Can be<code>null 

          </code> .</p>
    name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the callback is<code>null 

          </code> but a context is passed in. </p>
  returns:
    description: <p>itself, for fluent setting.</p>
    type: <xref href="com.microsoft.azure.sdk.iot.device.DeviceClient?alt=com.microsoft.azure.sdk.iot.device.DeviceClient&text=DeviceClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the message callback.</p>

    <p></p>
  syntax: public DeviceClient setMessageCallback(MessageCallback callback, Object context)
  uid: com.microsoft.azure.sdk.iot.device.DeviceClient.setMessageCallback(MessageCallback,Object)
nameWithType: DeviceClient
syntax: public class DeviceClient extends InternalClient
type: class
uid: com.microsoft.azure.sdk.iot.device.DeviceClient
fullName: com.microsoft.azure.sdk.iot.device.DeviceClient
name: DeviceClient
package: com.microsoft.azure.sdk.iot.device
summary: >-
  <p>The public-facing API. Allows a single logical or physical device to connect to an IoT Hub. The IoT Hub client supports sending events to and receiving messages from an IoT Hub. </p>

  <p>To support these workflows, the client library will provide the following abstractions: a message, with its payload and associated properties; and a client, which sends and receives messages. </p>

  <p>The client buffers messages while the network is down, and re-sends them when the network comes back online. It also batches messages to improve communication efficiency (HTTPS only). </p>

  <p>The client supports HTTPS 1.1 and AMQPS 1.0 transports. </p>
metadata: {}
