### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  name: SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  parameters:
  - name: amqpConnectionStringBuilder
    type: <xref href="com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder?alt=com.microsoft.azure.servicebus.primitives.ConnectionStringBuilder&text=ConnectionStringBuilder" data-throw-if-not-resolved="False"/>
  - name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  syntax: public SubscriptionClient(ConnectionStringBuilder amqpConnectionStringBuilder, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(ConnectionStringBuilder,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - name: namespace
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: subscriptionPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  syntax: public SubscriptionClient(String namespace, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(String,String,ClientSettings,ReceiveMode)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  name: SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  nameWithType: SubscriptionClient.SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  parameters:
  - name: namespaceEndpointURI
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - name: subscriptionPath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: clientSettings
    type: <xref href="com.microsoft.azure.servicebus.ClientSettings?alt=com.microsoft.azure.servicebus.ClientSettings&text=ClientSettings" data-throw-if-not-resolved="False"/>
  - name: receiveMode
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  syntax: public SubscriptionClient(URI namespaceEndpointURI, String subscriptionPath, ClientSettings clientSettings, ReceiveMode receiveMode)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.SubscriptionClient(URI,String,ClientSettings,ReceiveMode)
fields:
- field:
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME
  name: DEFAULT_RULE_NAME
  nameWithType: SubscriptionClient.DEFAULT_RULE_NAME
  syntax: public static final String DEFAULT_RULE_NAME= "$Default"
  uid: com.microsoft.azure.servicebus.SubscriptionClient.DEFAULT_RULE_NAME
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.primitives.ClientEntity" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.servicebus.InitializableEntity" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.servicebus.primitives.ClientEntity.ClientEntity(final String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.close()
- com.microsoft.azure.servicebus.ICloseable.close()
- com.microsoft.azure.servicebus.primitives.ClientEntity.closeAsync()
- com.microsoft.azure.servicebus.ICloseable.closeAsync()
- com.microsoft.azure.servicebus.primitives.ClientEntity.finalize()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getClientId()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.getIsClosingOrClosed()
- com.microsoft.azure.servicebus.InitializableEntity.InitializableEntity(String)
- com.microsoft.azure.servicebus.primitives.ClientEntity.setClosed()
- com.microsoft.azure.servicebus.primitives.ClientEntity.throwIfClosed(Throwable)
methods:
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken)
  name: abandon(UUID lockToken)
  nameWithType: SubscriptionClient.abandon(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: SubscriptionClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID lockToken, TransactionContext transaction)
  name: abandon(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandon(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void abandon(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandon(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken)
  name: abandonAsync(UUID lockToken)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  name: abandonAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.abandonAsync(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> abandonAsync(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.abandonAsync(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRule(RuleDescription ruleDescription)
  name: addRule(RuleDescription ruleDescription)
  nameWithType: SubscriptionClient.addRule(RuleDescription ruleDescription)
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.addRule(RuleDescription)
  parameters:
  - description: <p>The rule description that provides the rule to add. </p>
    name: ruleDescription
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if add rule failed </p>
  summary: >-
    <p>Adds a rule to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public void addRule(RuleDescription ruleDescription)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.addRule(RuleDescription)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRule(String ruleName, Filter filter)
  name: addRule(String ruleName, Filter filter)
  nameWithType: SubscriptionClient.addRule(String ruleName, Filter filter)
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.addRule(String,Filter)
  parameters:
  - description: <p>The rule name </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to add. </p>
    name: filter
    type: <xref href="com.microsoft.azure.servicebus.rules.Filter?alt=com.microsoft.azure.servicebus.rules.Filter&text=Filter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if add rule failed </p>
  summary: >-
    <p>Adds a rule with specified name and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public void addRule(String ruleName, Filter filter)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.addRule(String,Filter)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(RuleDescription ruleDescription)
  name: addRuleAsync(RuleDescription ruleDescription)
  nameWithType: SubscriptionClient.addRuleAsync(RuleDescription ruleDescription)
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.addRuleAsync(RuleDescription)
  parameters:
  - description: <p>The rule description that provides the rule to add. </p>
    name: ruleDescription
    type: <xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending rule add operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously adds a rule to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public CompletableFuture<Void> addRuleAsync(RuleDescription ruleDescription)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(RuleDescription)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(String ruleName, Filter filter)
  name: addRuleAsync(String ruleName, Filter filter)
  nameWithType: SubscriptionClient.addRuleAsync(String ruleName, Filter filter)
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.addRuleAsync(String,Filter)
  parameters:
  - description: <p>The rule name </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to add. </p>
    name: filter
    type: <xref href="com.microsoft.azure.servicebus.rules.Filter?alt=com.microsoft.azure.servicebus.rules.Filter&text=Filter" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending rule add operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously adds a rule with specified name and <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Filter"></xref> to the current subscription to filter the messages reaching from topic to the subscription.</p>

    <p></p>
  syntax: public CompletableFuture<Void> addRuleAsync(String ruleName, Filter filter)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.addRuleAsync(String,Filter)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID lockToken)
  name: complete(UUID lockToken)
  nameWithType: SubscriptionClient.complete(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public void complete(UUID lockToken)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID lockToken, TransactionContext transaction)
  name: complete(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.complete(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void complete(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.complete(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID lockToken)
  name: completeAsync(UUID lockToken)
  nameWithType: SubscriptionClient.completeAsync(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> completeAsync(UUID lockToken)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID lockToken, TransactionContext transaction)
  name: completeAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.completeAsync(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> completeAsync(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.completeAsync(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken)
  name: deadLetter(UUID lockToken)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,String,String)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,String,String,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,String,String,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  name: deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,String,String,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID lockToken, TransactionContext transaction)
  name: deadLetter(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetter(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  syntax: public void deadLetter(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetter(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken)
  name: deadLetterAsync(UUID lockToken)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,String,String)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,String,String,Map<String, Object>)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: propertiesToModify
    type: <xref href="Map%3CString%2C+Object%3E?alt=Map%3CString%2C+Object%3E&text=Map%3CString%2C+Object%3E" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, Map<String, Object> propertiesToModify, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,String,String,Map<String, Object>,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: deadLetterReason
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: deadLetterErrorDescription
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, String deadLetterReason, String deadLetterErrorDescription, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,String,String,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  name: deadLetterAsync(UUID lockToken, TransactionContext transaction)
  nameWithType: SubscriptionClient.deadLetterAsync(UUID lockToken, TransactionContext transaction)
  parameters:
  - name: lockToken
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - name: transaction
    type: <xref href="com.microsoft.azure.servicebus.TransactionContext?alt=com.microsoft.azure.servicebus.TransactionContext&text=TransactionContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deadLetterAsync(UUID lockToken, TransactionContext transaction)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.deadLetterAsync(UUID,TransactionContext)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()
  name: getEntityPath()
  nameWithType: SubscriptionClient.getEntityPath()
  overridden: com.microsoft.azure.servicebus.IMessageEntityClient.getEntityPath()
  returns:
    description: <p>path of the entity this client is connecting to </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the path of the entity this client is sending messages to or receiving messages from.</p>

    <p></p>
  syntax: public String getEntityPath()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getEntityPath()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()
  name: getPrefetchCount()
  nameWithType: SubscriptionClient.getPrefetchCount()
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int getPrefetchCount()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getPrefetchCount()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()
  name: getReceiveMode()
  nameWithType: SubscriptionClient.getReceiveMode()
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.getReceiveMode()
  returns:
    description: <p>The receive mode. </p>
    type: <xref href="com.microsoft.azure.servicebus.ReceiveMode?alt=com.microsoft.azure.servicebus.ReceiveMode&text=ReceiveMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="com.microsoft.azure.servicebus.ReceiveMode" data-throw-if-not-resolved="false" data-raw-source="ReceiveMode"></xref> of the current receiver</p>

    <p></p>
  syntax: public ReceiveMode getReceiveMode()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getReceiveMode()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getRules()
  name: getRules()
  nameWithType: SubscriptionClient.getRules()
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.getRules()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if get rules failed </p>
  returns:
    description: <p>The collection fo the rules. </p>
    type: Collection&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get all rules associated with the subscription.</p>

    <p></p>
  syntax: public Collection<RuleDescription> getRules()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getRules()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()
  name: getRulesAsync()
  nameWithType: SubscriptionClient.getRulesAsync()
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.getRulesAsync()
  returns:
    description: <p>a CompletableFuture representing the pending get rules operation. </p>
    type: CompletableFuture&lt;Collection&lt;<xref href="com.microsoft.azure.servicebus.rules.RuleDescription?alt=com.microsoft.azure.servicebus.rules.RuleDescription&text=RuleDescription" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get all rules associated with the subscription.</p>

    <p></p>
  syntax: public CompletableFuture<Collection<RuleDescription>> getRulesAsync()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getRulesAsync()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()
  name: getSubscriptionName()
  nameWithType: SubscriptionClient.getSubscriptionName()
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.getSubscriptionName()
  returns:
    description: <p>The subscription name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the subscription name. </p>
  syntax: public String getSubscriptionName()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getSubscriptionName()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()
  name: getTopicName()
  nameWithType: SubscriptionClient.getTopicName()
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.getTopicName()
  returns:
    description: <p>the name of the topic </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the topic, for this subscription.</p>

    <p></p>
  syntax: public String getTopicName()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.getTopicName()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.onClose()
  name: onClose()
  nameWithType: SubscriptionClient.onClose()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: protected CompletableFuture<Void> onClose()
  uid: com.microsoft.azure.servicebus.SubscriptionClient.onClose()
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler)
  name: registerMessageHandler(IMessageHandler handler)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  name: registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler,ExecutorService)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  name: registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.IMessageHandler?alt=com.microsoft.azure.servicebus.IMessageHandler&text=IMessageHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.MessageHandlerOptions?alt=com.microsoft.azure.servicebus.MessageHandlerOptions&text=MessageHandlerOptions" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerMessageHandler(IMessageHandler handler, MessageHandlerOptions handlerOptions, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerMessageHandler(IMessageHandler,MessageHandlerOptions,ExecutorService)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler)
  name: registerSessionHandler(ISessionHandler handler)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  name: registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler,ExecutorService)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  name: registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  nameWithType: SubscriptionClient.registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  parameters:
  - name: handler
    type: <xref href="com.microsoft.azure.servicebus.ISessionHandler?alt=com.microsoft.azure.servicebus.ISessionHandler&text=ISessionHandler" data-throw-if-not-resolved="False"/>
  - name: handlerOptions
    type: <xref href="com.microsoft.azure.servicebus.SessionHandlerOptions?alt=com.microsoft.azure.servicebus.SessionHandlerOptions&text=SessionHandlerOptions" data-throw-if-not-resolved="False"/>
  - name: executorService
    type: <xref href="ExecutorService?alt=ExecutorService&text=ExecutorService" data-throw-if-not-resolved="False"/>
  syntax: public void registerSessionHandler(ISessionHandler handler, SessionHandlerOptions handlerOptions, ExecutorService executorService)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.registerSessionHandler(ISessionHandler,SessionHandlerOptions,ExecutorService)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.removeRule(String ruleName)
  name: removeRule(String ruleName)
  nameWithType: SubscriptionClient.removeRule(String ruleName)
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.removeRule(String)
  parameters:
  - description: <p>The name of rule. </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if remove rule failed </p>
  summary: >-
    <p>Removes the rule on the subscription identified by ruleName</p>

    <p></p>
  syntax: public void removeRule(String ruleName)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.removeRule(String)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(String ruleName)
  name: removeRuleAsync(String ruleName)
  nameWithType: SubscriptionClient.removeRuleAsync(String ruleName)
  overridden: com.microsoft.azure.servicebus.ISubscriptionClient.removeRuleAsync(String)
  parameters:
  - description: <p>he name of rule. </p>
    name: ruleName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture representing the pending rule remove operation. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asynchronously removes the rule on the subscription identified by ruleName</p>

    <p></p>
  syntax: public CompletableFuture<Void> removeRuleAsync(String ruleName)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.removeRuleAsync(String)
- fullName: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int prefetchCount)
  name: setPrefetchCount(int prefetchCount)
  nameWithType: SubscriptionClient.setPrefetchCount(int prefetchCount)
  parameters:
  - name: prefetchCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public void setPrefetchCount(int prefetchCount)
  uid: com.microsoft.azure.servicebus.SubscriptionClient.setPrefetchCount(int)
nameWithType: SubscriptionClient
syntax: public class SubscriptionClient implements ISubscriptionClient
type: class
uid: com.microsoft.azure.servicebus.SubscriptionClient
fullName: com.microsoft.azure.servicebus.SubscriptionClient
name: SubscriptionClient
package: com.microsoft.azure.servicebus
metadata: {}
