### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek()
  name: peek()
  nameWithType: IMessageBrowser.peek()
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>reads next the active message without changing the state of the receiver or the message source. The first call to <xref uid="com.microsoft.azure.servicebus.IMessageBrowser.peek()" data-throw-if-not-resolved="false" data-raw-source="IMessageBrowser#peek()"></xref> fetches the first active message for this receiver. Each subsequent call fetches the subsequent message in the entity.</p>

    <p></p>
  syntax: public IMessage peek()
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peek()
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peek(long fromSequenceNumber)
  name: peek(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peek(long fromSequenceNumber)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: <xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public IMessage peek(long fromSequenceNumber)
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peek(long)
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
  name: peekAsync()
  nameWithType: IMessageBrowser.peekAsync()
  returns:
    description: >-
      <p>

        <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously reads the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<IMessage> peekAsync()
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync()
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long fromSequenceNumber)
  name: peekAsync(long fromSequenceNumber)
  nameWithType: IMessageBrowser.peekAsync(long fromSequenceNumber)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture that returns <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously reads next the active message without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<IMessage> peekAsync(long fromSequenceNumber)
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peekAsync(long)
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int messageCount)
  name: peekBatch(int messageCount)
  nameWithType: IMessageBrowser.peekBatch(int messageCount)
  parameters:
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public Collection<IMessage> peekBatch(int messageCount)
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(int)
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  name: peekBatch(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatch(long fromSequenceNumber, int messageCount)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="InterruptedException?alt=InterruptedException&text=InterruptedException" data-throw-if-not-resolved="False"/>
    description: <p>if the current thread was interrupted while waiting </p>
  - type: <xref href="ServiceBusException?alt=ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="False"/>
    description: <p>if peek failed </p>
  returns:
    description: <p>Batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked </p>
    type: Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Reads next batch of the active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public Collection<IMessage> peekBatch(long fromSequenceNumber, int messageCount)
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatch(long,int)
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int messageCount)
  name: peekBatchAsync(int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(int messageCount)
  parameters:
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
    type: CompletableFuture&lt;Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<Collection<IMessage>> peekBatchAsync(int messageCount)
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(int)
- fullName: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  name: peekBatchAsync(long fromSequenceNumber, int messageCount)
  nameWithType: IMessageBrowser.peekBatchAsync(long fromSequenceNumber, int messageCount)
  parameters:
  - description: <p>The sequence number from where to read the message. </p>
    name: fromSequenceNumber
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The number of messages. </p>
    name: messageCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture that returns batch of <xref uid="com.microsoft.azure.servicebus.Message" data-throw-if-not-resolved="false" data-raw-source="Message"></xref> peeked. </p>
    type: CompletableFuture&lt;Collection&lt;<xref href="com.microsoft.azure.servicebus.IMessage?alt=com.microsoft.azure.servicebus.IMessage&text=IMessage" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Asynchronously reads the next batch of active messages without changing the state of the receiver or the message source.</p>

    <p></p>
  syntax: public CompletableFuture<Collection<IMessage>> peekBatchAsync(long fromSequenceNumber, int messageCount)
  uid: com.microsoft.azure.servicebus.IMessageBrowser.peekBatchAsync(long,int)
nameWithType: IMessageBrowser
syntax: public interface IMessageBrowser
type: interface
uid: com.microsoft.azure.servicebus.IMessageBrowser
fullName: com.microsoft.azure.servicebus.IMessageBrowser
name: IMessageBrowser
package: com.microsoft.azure.servicebus
summary: <p>Represents a message browser that can browse messages from Azure Service Bus. </p>
metadata: {}
