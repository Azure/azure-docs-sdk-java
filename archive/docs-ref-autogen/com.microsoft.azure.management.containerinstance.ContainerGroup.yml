### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
methods:
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.containers()
  name: containers()
  nameWithType: ContainerGroup.containers()
  returns:
    description: <p>the container instances in this container group </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.containerinstance.Container?alt=com.microsoft.azure.management.containerinstance.Container&text=Container" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, Container> containers()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.containers()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.externalPorts()
  name: externalPorts()
  nameWithType: ContainerGroup.externalPorts()
  returns:
    description: <p>all the ports publicly exposed for this container group </p>
    type: Collection&lt;<xref href="com.microsoft.azure.management.containerinstance.Port?alt=com.microsoft.azure.management.containerinstance.Port&text=Port" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Collection<Port> externalPorts()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.externalPorts()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.externalTcpPorts()
  name: externalTcpPorts()
  nameWithType: ContainerGroup.externalTcpPorts()
  returns:
    description: <p>the TCP ports publicly exposed for this container group </p>
    type: <xref href="int+%5B%5D?alt=int+%5B%5D&text=int+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public int [] externalTcpPorts()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.externalTcpPorts()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.externalUdpPorts()
  name: externalUdpPorts()
  nameWithType: ContainerGroup.externalUdpPorts()
  returns:
    description: <p>the UDP ports publicly exposed for this container group </p>
    type: <xref href="int+%5B%5D?alt=int+%5B%5D&text=int+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public int [] externalUdpPorts()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.externalUdpPorts()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContent(String containerName)
  name: getLogContent(String containerName)
  nameWithType: ContainerGroup.getLogContent(String containerName)
  parameters:
  - description: <p>the container instance name </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>all available log lines </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the log content for the specified container instance within the container group.</p>

    <p></p>
  syntax: public String getLogContent(String containerName)
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContent(String)
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContent(String containerName, int tailLineCount)
  name: getLogContent(String containerName, int tailLineCount)
  nameWithType: ContainerGroup.getLogContent(String containerName, int tailLineCount)
  parameters:
  - description: <p>the container instance name </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>only get the last log lines up to this </p>
    name: tailLineCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the log lines from the end, up to the number specified </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the log content for the specified container instance within the container group.</p>

    <p></p>
  syntax: public String getLogContent(String containerName, int tailLineCount)
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContent(String,int)
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContentAsync(String containerName)
  name: getLogContentAsync(String containerName)
  nameWithType: ContainerGroup.getLogContentAsync(String containerName)
  parameters:
  - description: <p>the container instance name </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the log content for the specified container instance within the container group.</p>

    <p></p>
  syntax: public Observable<String> getLogContentAsync(String containerName)
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContentAsync(String)
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContentAsync(String containerName, int tailLineCount)
  name: getLogContentAsync(String containerName, int tailLineCount)
  nameWithType: ContainerGroup.getLogContentAsync(String containerName, int tailLineCount)
  parameters:
  - description: <p>the container instance name </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>only get the last log lines up to this </p>
    name: tailLineCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the log content for the specified container instance within the container group.</p>

    <p></p>
  syntax: public Observable<String> getLogContentAsync(String containerName, int tailLineCount)
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.getLogContentAsync(String,int)
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.imageRegistryServers()
  name: imageRegistryServers()
  nameWithType: ContainerGroup.imageRegistryServers()
  returns:
    description: <p>the Docker image registry servers by which the container group is created from </p>
    type: <xref href="Collection%3CString%3E?alt=Collection%3CString%3E&text=Collection%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Collection<String> imageRegistryServers()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.imageRegistryServers()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.ipAddress()
  name: ipAddress()
  nameWithType: ContainerGroup.ipAddress()
  returns:
    description: <p>the IP address </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String ipAddress()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.ipAddress()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.isIPAddressPublic()
  name: isIPAddressPublic()
  nameWithType: ContainerGroup.isIPAddressPublic()
  returns:
    description: <p>true if IP address is public </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isIPAddressPublic()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.isIPAddressPublic()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.osType()
  name: osType()
  nameWithType: ContainerGroup.osType()
  returns:
    description: <p>the base level OS type required by the containers in the group </p>
    type: <xref href="com.microsoft.azure.management.containerinstance.OperatingSystemTypes?alt=com.microsoft.azure.management.containerinstance.OperatingSystemTypes&text=OperatingSystemTypes" data-throw-if-not-resolved="False"/>
  syntax: public OperatingSystemTypes osType()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.osType()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.provisioningState()
  name: provisioningState()
  nameWithType: ContainerGroup.provisioningState()
  returns:
    description: <p>the provisioningState of the container group </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String provisioningState()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.provisioningState()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.restartPolicy()
  name: restartPolicy()
  nameWithType: ContainerGroup.restartPolicy()
  returns:
    description: <p>`always` Always restart </p>
    type: <xref href="com.microsoft.azure.management.containerinstance.ContainerRestartPolicy?alt=com.microsoft.azure.management.containerinstance.ContainerRestartPolicy&text=ContainerRestartPolicy" data-throw-if-not-resolved="False"/>
  syntax: public ContainerRestartPolicy restartPolicy()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.restartPolicy()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.state()
  name: state()
  nameWithType: ContainerGroup.state()
  returns:
    description: <p>the state of the container group; only valid in response </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String state()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.state()
- fullName: com.microsoft.azure.management.containerinstance.ContainerGroup.volumes()
  name: volumes()
  nameWithType: ContainerGroup.volumes()
  returns:
    description: <p>the volumes for this container group </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.containerinstance.Volume?alt=com.microsoft.azure.management.containerinstance.Volume&text=Volume" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, Volume> volumes()
  uid: com.microsoft.azure.management.containerinstance.ContainerGroup.volumes()
nameWithType: ContainerGroup
syntax: public interface ContainerGroup extends GroupableResource<ContainerInstanceManager, ContainerGroupInner>,Refreshable<ContainerGroup>
type: interface
uid: com.microsoft.azure.management.containerinstance.ContainerGroup
fullName: com.microsoft.azure.management.containerinstance.ContainerGroup
name: ContainerGroup
package: com.microsoft.azure.management.containerinstance
summary: <p>An immutable client-side representation of an Azure Container Group. </p>
metadata: {}
