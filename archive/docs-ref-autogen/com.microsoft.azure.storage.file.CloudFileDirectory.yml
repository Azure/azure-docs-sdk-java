### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final StorageUri directoryAbsoluteUri)
  name: CloudFileDirectory(final StorageUri directoryAbsoluteUri)
  nameWithType: CloudFileDirectory.CloudFileDirectory(final StorageUri directoryAbsoluteUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the file directory's address. </p>
    name: directoryAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using an absolute URI to the directory.</p>

    <p></p>
  syntax: public CloudFileDirectory(final StorageUri directoryAbsoluteUri)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final StorageUri)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final StorageUri directoryAbsoluteUri, final StorageCredentials credentials)
  name: CloudFileDirectory(final StorageUri directoryAbsoluteUri, final StorageCredentials credentials)
  nameWithType: CloudFileDirectory.CloudFileDirectory(final StorageUri directoryAbsoluteUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the file directory's address. </p>
    name: directoryAbsoluteUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access. </p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using an absolute URI to the directory and credentials.</p>

    <p></p>
  syntax: public CloudFileDirectory(final StorageUri directoryAbsoluteUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final StorageUri,final StorageCredentials)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final StorageUri uri, final String directoryName, final CloudFileShare share)
  name: CloudFileDirectory(final StorageUri uri, final String directoryName, final CloudFileShare share)
  nameWithType: CloudFileDirectory.CloudFileDirectory(final StorageUri uri, final String directoryName, final CloudFileShare share)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the file directory's address. </p>
    name: uri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the name of the directory. </p>
    name: directoryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> object that represents the associated file share. </p>
    name: share
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using the specified address, share, and client.</p>

    <p></p>
  syntax: protected CloudFileDirectory(final StorageUri uri, final String directoryName, final CloudFileShare share)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final StorageUri,final String,final CloudFileShare)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final URI directoryAbsoluteUri)
  name: CloudFileDirectory(final URI directoryAbsoluteUri)
  nameWithType: CloudFileDirectory.CloudFileDirectory(final URI directoryAbsoluteUri)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="URI"></xref> that represents the file directory's address. </p>
    name: directoryAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using an absolute URI to the directory.</p>

    <p></p>
  syntax: public CloudFileDirectory(final URI directoryAbsoluteUri)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final URI)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final URI directoryAbsoluteUri, final StorageCredentials credentials)
  name: CloudFileDirectory(final URI directoryAbsoluteUri, final StorageCredentials credentials)
  nameWithType: CloudFileDirectory.CloudFileDirectory(final URI directoryAbsoluteUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="URI"></xref> that represents the file directory's address. </p>
    name: directoryAbsoluteUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access. </p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using an absolute URI to the directory and credentials.</p>

    <p></p>
  syntax: public CloudFileDirectory(final URI directoryAbsoluteUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.CloudFileDirectory(final URI,final StorageCredentials)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey()
  name: assertValidFilePermissionOrKey()
  nameWithType: CloudFileDirectory.assertValidFilePermissionOrKey()
  summary: <p>Verifies that the directory's filePermission and properties.filePermissionKey are both not set. </p>
  syntax: protected void assertValidFilePermissionOrKey()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.assertValidFilePermissionOrKey()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented()
  name: closeAllHandlesSegmented()
  nameWithType: CloudFileDirectory.closeAllHandlesSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeAllHandlesSegmented()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented(final ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)
  name: closeAllHandlesSegmented(final ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.closeAllHandlesSegmented(final ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies if operation should apply to the directory specified in the URI, its files, its subdirectories and their files. </p>
    name: recursive
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeAllHandlesSegmented(final ResultContinuation continuationToken, boolean recursive, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.closeAllHandlesSegmented(final ResultContinuation,boolean,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(String handleID)
  name: closeHandleSegmented(String handleID)
  nameWithType: CloudFileDirectory.closeHandleSegmented(String handleID)
  parameters:
  - description: <p>The handle to close.</p>
    name: handleID
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeHandleSegmented(String handleID)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(String)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The handle to close. </p>
    name: handleID
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> which has one element which is the number of handles closed and a continuation to follow in case the operation took too long to be completed atomically. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;Integer&gt;
  summary: >-
    <p>Close all SMB handles on this file.</p>

    <p></p>
  syntax: public ResultSegment<Integer> closeHandleSegmented(String handleID, ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.closeHandleSegmented(String,ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.create()
  name: create()
  nameWithType: CloudFileDirectory.create()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the directory.</p>

    <p></p>
  syntax: public void create()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.create()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.create(FileRequestOptions options, OperationContext opContext)
  name: create(FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.create(FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the directory using the specified options and operation context.</p>

    <p></p>
  syntax: public void create(FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.create(FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists()
  name: createIfNotExists()
  nameWithType: CloudFileDirectory.createIfNotExists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the directory did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the directory if it does not exist.</p>

    <p></p>
  syntax: public boolean createIfNotExists()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists(FileRequestOptions options, OperationContext opContext)
  name: createIfNotExists(FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.createIfNotExists(FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the directory did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the directory if it does not exist, using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean createIfNotExists(FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.createIfNotExists(FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.delete()
  name: delete()
  nameWithType: CloudFileDirectory.delete()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the directory.</p>

    <p></p>
  syntax: public void delete()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.delete()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the directory. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the directory using the specified request options and operation context.</p>

    <p></p>
  syntax: public void delete(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.delete(AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists()
  name: deleteIfExists()
  nameWithType: CloudFileDirectory.deleteIfExists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the directory did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the directory if it exists.</p>

    <p></p>
  syntax: public boolean deleteIfExists()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the directory. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the directory existed and was deleted; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the directory if it exists using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean deleteIfExists(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.deleteIfExists(AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()
  name: downloadAttributes()
  nameWithType: CloudFileDirectory.downloadAttributes()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Downloads the directory's properties.</p>

    <p></p>
  syntax: public void downloadAttributes()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the directory. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Downloads the directory's properties using the specified request options and operation context.</p>

    <p></p>
  syntax: public void downloadAttributes(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes(AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.exists()
  name: exists()
  nameWithType: CloudFileDirectory.exists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the directory exists, otherwise <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether the directory exists.</p>

    <p></p>
  syntax: public boolean exists()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.exists()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the share. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the directory exists, otherwise <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether the directory exists, using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean exists(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.exists(final AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference(final String itemName)
  name: getDirectoryReference(final String itemName)
  nameWithType: CloudFileDirectory.getDirectoryReference(final String itemName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the directory.</p>
    name: itemName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory"></xref> object that represents a reference to the specified directory.</p>
    type: <xref href="com.microsoft.azure.storage.file.CloudFileDirectory?alt=com.microsoft.azure.storage.file.CloudFileDirectory&text=CloudFileDirectory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory"></xref> object that represents a directory in this directory.</p>

    <p></p>
  syntax: public CloudFileDirectory getDirectoryReference(final String itemName)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getDirectoryReference(final String)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference(final String fileName)
  name: getFileReference(final String fileName)
  nameWithType: CloudFileDirectory.getFileReference(final String fileName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the file.</p>
    name: fileName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFile" data-throw-if-not-resolved="false" data-raw-source="CloudFile"></xref> object that represents a reference to the specified file.</p>
    type: <xref href="com.microsoft.azure.storage.file.CloudFile?alt=com.microsoft.azure.storage.file.CloudFile&text=CloudFile" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.file.CloudFile" data-throw-if-not-resolved="false" data-raw-source="CloudFile"></xref> object that represents a file in this directory.</p>

    <p></p>
  syntax: public CloudFile getFileReference(final String fileName)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getFileReference(final String)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata()
  name: getMetadata()
  nameWithType: CloudFileDirectory.getMetadata()
  returns:
    description: <p>A <code>java.util.HashMap</code> object that represents the metadata for the directory. </p>
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the metadata for the directory. This value is initialized with the metadata from the directory by a call to <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="downloadAttributes"></xref>, and is set on the directory with a call to <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()" data-throw-if-not-resolved="false" data-raw-source="uploadMetadata"></xref>.</p>

    <p></p>
  syntax: public HashMap<String, String> getMetadata()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getMetadata()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getName()
  name: getName()
  nameWithType: CloudFileDirectory.getName()
  returns:
    description: <p>An <code>String</code> that represents the name of the directory. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the name of this directory.</p>

    <p></p>
  syntax: public String getName()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getName()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getParent()
  name: getParent()
  nameWithType: CloudFileDirectory.getParent()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getParent()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory"></xref> object that represents the parent directory associated with the directory. </p>
    type: <xref href="com.microsoft.azure.storage.file.CloudFileDirectory?alt=com.microsoft.azure.storage.file.CloudFileDirectory&text=CloudFileDirectory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory"></xref> parent directory associated with this directory.</p>

    <p></p>
  syntax: public CloudFileDirectory getParent()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getParent()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getProperties()
  name: getProperties()
  nameWithType: CloudFileDirectory.getProperties()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.FileDirectoryProperties" data-throw-if-not-resolved="false" data-raw-source="FileDirectoryProperties"></xref> object that holds the system properties associated with the directory. </p>
    type: <xref href="com.microsoft.azure.storage.file.FileDirectoryProperties?alt=com.microsoft.azure.storage.file.FileDirectoryProperties&text=FileDirectoryProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the <xref uid="com.microsoft.azure.storage.file.FileDirectoryProperties" data-throw-if-not-resolved="false" data-raw-source="FileDirectoryProperties"></xref> object that holds the directory's system properties.</p>

    <p></p>
  syntax: public FileDirectoryProperties getProperties()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getProperties()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient()
  name: getServiceClient()
  nameWithType: CloudFileDirectory.getServiceClient()
  returns:
    description: <p>An <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref> object that represents the service client associated with the directory. </p>
    type: <xref href="com.microsoft.azure.storage.file.CloudFileClient?alt=com.microsoft.azure.storage.file.CloudFileClient&text=CloudFileClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the File service client associated with this directory.</p>

    <p></p>
  syntax: public CloudFileClient getServiceClient()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getServiceClient()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getShare()
  name: getShare()
  nameWithType: CloudFileDirectory.getShare()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getShare()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> that represents the share for this directory.</p>
    type: <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the share for this directory.</p>

    <p></p>
  syntax: public CloudFileShare getShare()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getShare()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri()
  name: getStorageUri()
  nameWithType: CloudFileDirectory.getStorageUri()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getStorageUri()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the list of URIs for all locations. </p>
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of URIs for all locations.</p>

    <p></p>
  syntax: public final StorageUri getStorageUri()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getStorageUri()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.getUri()
  name: getUri()
  nameWithType: CloudFileDirectory.getUri()
  overridden: com.microsoft.azure.storage.file.ListFileItem.getUri()
  returns:
    description: <p>A <code>java.net.URI</code> object that represents the URI for this directory. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the URI for this directory.</p>

    <p></p>
  syntax: public URI getUri()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.getUri()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories()
  name: listFilesAndDirectories()
  nameWithType: CloudFileDirectory.listFilesAndDirectories()
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the file and directory items in this directory. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of file and directory items for the directory.</p>

    <p></p>
  syntax: public Iterable<ListFileItem> listFilesAndDirectories()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)
  name: listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the file and directory items in this directory. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of file and directory items for the directory.</p>

    <p></p>
  syntax: public Iterable<ListFileItem> listFilesAndDirectories(FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)
  name: listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A string containing the file or directory name prefix. </p>
    name: prefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the file and directory items in this directory. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of file and directory items for the directory.</p>

    <p></p>
  syntax: public Iterable<ListFileItem> listFilesAndDirectories(String prefix, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectories(String,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented()
  name: listFilesAndDirectoriesSegmented()
  nameWithType: CloudFileDirectory.listFilesAndDirectoriesSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment of an enumerable collection of files and directories for this File service client.</p>

    <p></p>
  syntax: public ResultSegment<ListFileItem> listFilesAndDirectoriesSegmented()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: listFilesAndDirectoriesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.listFilesAndDirectoriesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The maximum number of results to retrieve. If <code>null</code> or greater than 5000, the server will return up to 5,000 items. Must be at least 1. </p>
    name: maxResults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories in this directory.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment of an enumerable collection of files and directories for this directory, using the specified listing details options, request options, and operation context.</p>

    <p></p>
  syntax: public ResultSegment<ListFileItem> listFilesAndDirectoriesSegmented(final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(final Integer,final ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(final String prefix, final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: listFilesAndDirectoriesSegmented(final String prefix, final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.listFilesAndDirectoriesSegmented(final String prefix, final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A string containing the file or directory name prefix. </p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of results to retrieve. If <code>null</code> or greater than 5000, the server will return up to 5,000 items. Must be at least 1. </p>
    name: maxResults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories in this directory.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.ListFileItem?alt=com.microsoft.azure.storage.file.ListFileItem&text=ListFileItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment of an enumerable collection of files and directories for this directory, using the specified listing details options, request options, and operation context.</p>

    <p></p>
  syntax: public ResultSegment<ListFileItem> listFilesAndDirectoriesSegmented(final String prefix, final Integer maxResults, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listFilesAndDirectoriesSegmented(final String,final Integer,final ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listHandles()
  name: listHandles()
  nameWithType: CloudFileDirectory.listHandles()
  returns:
    description: >-
      <p>An<code>Iterable 

          </code> of the handles that will lazily request new segments. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public Iterable<FileHandle> listHandles()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listHandles()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)
  name: listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>Specifies if operation should apply to the directory specified in the URI, its files, its subdirectories and their files. </p>
    name: recursive
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>An<code>Iterable 

          </code> of the handles that will lazily request new segments. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public Iterable<FileHandle> listHandles(boolean recursive, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listHandles(boolean,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented()
  name: listHandlesSegmented()
  nameWithType: CloudFileDirectory.listHandlesSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public ResultSegment<FileHandle> listHandlesSegmented()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented(final Integer maxResults, final boolean recursive, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  name: listHandlesSegmented(final Integer maxResults, final boolean recursive, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.listHandlesSegmented(final Integer maxResults, final boolean recursive, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>The maximum number of results to retrieve. If <code>null</code> or greater than 5000, the server will return up to 5,000 items. Must be at least 1. </p>
    name: maxResults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>Specifies if operation should apply to the directory specified in the URI, its files, its subdirectories and their files. </p>
    name: recursive
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object which represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.file.ListFileItem" data-throw-if-not-resolved="false" data-raw-source="ListFileItem"></xref> objects that represent the files and directories. </p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.file.FileHandle?alt=com.microsoft.azure.storage.file.FileHandle&text=FileHandle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the SMB handles open on this file.</p>

    <p></p>
  syntax: public ResultSegment<FileHandle> listHandlesSegmented(final Integer maxResults, final boolean recursive, final ResultContinuation continuationToken, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.listHandlesSegmented(final Integer,final boolean,final ResultContinuation,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission(String filePermission)
  name: setFilePermission(String filePermission)
  nameWithType: CloudFileDirectory.setFilePermission(String filePermission)
  parameters:
  - description: <p>A <code>String</code> that represents the directory's file permission. </p>
    name: filePermission
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the directory's file permission </p>
  syntax: public void setFilePermission(String filePermission)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.setFilePermission(String)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata(HashMap<String, String> metadata)
  name: setMetadata(HashMap<String, String> metadata)
  nameWithType: CloudFileDirectory.setMetadata(HashMap<String, String> metadata)
  parameters:
  - description: <p>A <code>java.util.HashMap</code> object that represents the metadata being assigned to the directory. </p>
    name: metadata
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the metadata collection of name-value pairs to be set on the directory with an <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()" data-throw-if-not-resolved="false" data-raw-source="uploadMetadata"></xref> call. This collection will overwrite any existing directory metadata. If this is set to an empty collection, the directory metadata will be cleared on an <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()" data-throw-if-not-resolved="false" data-raw-source="uploadMetadata"></xref> call.</p>

    <p></p>
  syntax: public void setMetadata(HashMap<String, String> metadata)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.setMetadata(HashMap<String, String>)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.setProperties(final FileDirectoryProperties properties)
  name: setProperties(final FileDirectoryProperties properties)
  nameWithType: CloudFileDirectory.setProperties(final FileDirectoryProperties properties)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileDirectoryProperties" data-throw-if-not-resolved="false" data-raw-source="FileDirectoryProperties"></xref> object that represents the properties being assigned to the directory. </p>
    name: properties
    type: final <xref href="com.microsoft.azure.storage.file.FileDirectoryProperties?alt=com.microsoft.azure.storage.file.FileDirectoryProperties&text=FileDirectoryProperties" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the properties for the directory.</p>

    <p></p>
  syntax: protected final void setProperties(final FileDirectoryProperties properties)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.setProperties(final FileDirectoryProperties)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.setShare(final CloudFileShare share)
  name: setShare(final CloudFileShare share)
  nameWithType: CloudFileDirectory.setShare(final CloudFileShare share)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.CloudFileShare" data-throw-if-not-resolved="false" data-raw-source="CloudFileShare"></xref> object that represents the share being assigned to the directory. </p>
    name: share
    type: final <xref href="com.microsoft.azure.storage.file.CloudFileShare?alt=com.microsoft.azure.storage.file.CloudFileShare&text=CloudFileShare" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the share for the directory.</p>

    <p></p>
  syntax: protected final void setShare(final CloudFileShare share)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.setShare(final CloudFileShare)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri(final StorageUri storageUri)
  name: setStorageUri(final StorageUri storageUri)
  nameWithType: CloudFileDirectory.setStorageUri(final StorageUri storageUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> that represents the list of URIs for all locations. </p>
    name: storageUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the list of URIs for all locations.</p>

    <p></p>
  syntax: protected void setStorageUri(final StorageUri storageUri)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.setStorageUri(final StorageUri)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()
  name: uploadMetadata()
  nameWithType: CloudFileDirectory.uploadMetadata()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the directory's metadata.</p>

    <p></p>
  syntax: public void uploadMetadata()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the directory. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the directory's metadata using the specified request options and operation context.</p>

    <p></p>
  syntax: public void uploadMetadata(AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.uploadMetadata(AccessCondition,FileRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties()
  name: uploadProperties()
  nameWithType: CloudFileDirectory.uploadProperties()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the directory's properties to the storage service. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory#downloadAttributes"></xref> to retrieve the latest values for the directory's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void uploadProperties()
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties()
- fullName: com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  name: uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  nameWithType: CloudFileDirectory.uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the directory. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.file.FileRequestOptions" data-throw-if-not-resolved="false" data-raw-source="FileRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.file.CloudFileClient" data-throw-if-not-resolved="false" data-raw-source="CloudFileClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.file.FileRequestOptions?alt=com.microsoft.azure.storage.file.FileRequestOptions&text=FileRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Uploads the directory's properties using the access condition, request options, and operation context. </p>

    <p>Use <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory#downloadAttributes"></xref> to retrieve the latest values for the directory's properties and metadata from the Microsoft Azure storage service.</p>

    <p></p>
  syntax: public final void uploadProperties(final AccessCondition accessCondition, FileRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.file.CloudFileDirectory.uploadProperties(final AccessCondition,FileRequestOptions,OperationContext)
nameWithType: CloudFileDirectory
syntax: public class CloudFileDirectory implements ListFileItem
type: class
uid: com.microsoft.azure.storage.file.CloudFileDirectory
fullName: com.microsoft.azure.storage.file.CloudFileDirectory
name: CloudFileDirectory
package: com.microsoft.azure.storage.file
summary: >-
  <p>Represents a virtual directory of files. </p>

  <p>Directories, which are encapsulated as <xref uid="com.microsoft.azure.storage.file.CloudFileDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudFileDirectory"></xref> objects, hold files and can also contain sub-directories. </p>
metadata: {}
