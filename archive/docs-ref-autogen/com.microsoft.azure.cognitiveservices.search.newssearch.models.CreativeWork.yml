### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.cognitiveservices.search.newssearch.models.ResponseBase" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.cognitiveservices.search.newssearch.models.Identifiable" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.cognitiveservices.search.newssearch.models.Response" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing?alt=com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing&text=Thing" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing.alternateName()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing.bingId()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing.description()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Identifiable.id()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing.image()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing.name()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing.url()
- com.microsoft.azure.cognitiveservices.search.newssearch.models.Response.webSearchUrl()
methods:
- fullName: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.datePublished()
  name: datePublished()
  nameWithType: CreativeWork.datePublished()
  returns:
    description: <p>the datePublished value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the datePublished value.</p>

    <p></p>
  syntax: public String datePublished()
  uid: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.datePublished()
- fullName: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.provider()
  name: provider()
  nameWithType: CreativeWork.provider()
  returns:
    description: <p>the provider value </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing?alt=com.microsoft.azure.cognitiveservices.search.newssearch.models.Thing&text=Thing" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the provider value.</p>

    <p></p>
  syntax: public List<Thing> provider()
  uid: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.provider()
- fullName: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.thumbnailUrl()
  name: thumbnailUrl()
  nameWithType: CreativeWork.thumbnailUrl()
  returns:
    description: <p>the thumbnailUrl value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the thumbnailUrl value.</p>

    <p></p>
  syntax: public String thumbnailUrl()
  uid: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.thumbnailUrl()
- fullName: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.video()
  name: video()
  nameWithType: CreativeWork.video()
  returns:
    description: <p>the video value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.search.newssearch.models.VideoObject?alt=com.microsoft.azure.cognitiveservices.search.newssearch.models.VideoObject&text=VideoObject" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the video value.</p>

    <p></p>
  syntax: public VideoObject video()
  uid: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork.video()
nameWithType: CreativeWork
syntax: public class CreativeWork extends Thing
type: class
uid: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork
fullName: com.microsoft.azure.cognitiveservices.search.newssearch.models.CreativeWork
name: CreativeWork
package: com.microsoft.azure.cognitiveservices.search.newssearch.models
summary: <p>The most generic kind of creative work, including books, movies, photographs, software programs, etc. </p>
metadata: {}
