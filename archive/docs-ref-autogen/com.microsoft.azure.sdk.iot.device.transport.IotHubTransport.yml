### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.IotHubTransport(ClientConfiguration defaultConfig, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, boolean isMultiplexing)
  name: IotHubTransport(ClientConfiguration defaultConfig, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, boolean isMultiplexing)
  nameWithType: IotHubTransport.IotHubTransport(ClientConfiguration defaultConfig, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, boolean isMultiplexing)
  parameters:
  - description: <p>the config used for opening connections, retrieving retry policy, and checking protocol </p>
    name: defaultConfig
    type: <xref href="com.microsoft.azure.sdk.iot.device.ClientConfiguration?alt=com.microsoft.azure.sdk.iot.device.ClientConfiguration&text=ClientConfiguration" data-throw-if-not-resolved="False"/>
  - description: <p>the connection status callback used to notify the DeviceIO layer when connection events happen. </p>
    name: deviceIOConnectionStatusChangeCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback" data-throw-if-not-resolved="False"/>
  - description: <p>true if this connection will multiplex. False otherwise. </p>
    name: isMultiplexing
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if defaultConfig is null </p>
  summary: >-
    <p>Constructor for an IotHubTransport object with default values</p>

    <p></p>
  syntax: public IotHubTransport(ClientConfiguration defaultConfig, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, boolean isMultiplexing)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.IotHubTransport(ClientConfiguration,IotHubConnectionStatusChangeCallback,boolean)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.IotHubTransport(String hostName, IotHubClientProtocol protocol, SSLContext sslContext, ProxySettings proxySettings, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, int keepAliveInterval)
  name: IotHubTransport(String hostName, IotHubClientProtocol protocol, SSLContext sslContext, ProxySettings proxySettings, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, int keepAliveInterval)
  nameWithType: IotHubTransport.IotHubTransport(String hostName, IotHubClientProtocol protocol, SSLContext sslContext, ProxySettings proxySettings, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, int keepAliveInterval)
  parameters:
  - name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  - name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  - name: proxySettings
    type: <xref href="com.microsoft.azure.sdk.iot.device.ProxySettings?alt=com.microsoft.azure.sdk.iot.device.ProxySettings&text=ProxySettings" data-throw-if-not-resolved="False"/>
  - name: deviceIOConnectionStatusChangeCallback
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback" data-throw-if-not-resolved="False"/>
  - name: keepAliveInterval
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public IotHubTransport(String hostName, IotHubClientProtocol protocol, SSLContext sslContext, ProxySettings proxySettings, IotHubConnectionStatusChangeCallback deviceIOConnectionStatusChangeCallback, int keepAliveInterval)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.IotHubTransport(String,IotHubClientProtocol,SSLContext,ProxySettings,IotHubConnectionStatusChangeCallback,int)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.device.transport.IotHubListener?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubListener&text=IotHubListener" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.addMessage(Message message, MessageSentCallback callback, Object callbackContext, String deviceId)
  name: addMessage(Message message, MessageSentCallback callback, Object callbackContext, String deviceId)
  nameWithType: IotHubTransport.addMessage(Message message, MessageSentCallback callback, Object callbackContext, String deviceId)
  parameters:
  - description: <p>the message to be sent. </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to be invoked when a response for the message is received. </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.MessageSentCallback?alt=com.microsoft.azure.sdk.iot.device.MessageSentCallback&text=MessageSentCallback" data-throw-if-not-resolved="False"/>
  - description: <p>the context to be passed in when the callback is </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>the Id of the device that is sending this message. invoked. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a message to the transport queue.</p>

    <p></p>
  syntax: public void addMessage(Message message, MessageSentCallback callback, Object callbackContext, String deviceId)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.addMessage(Message,MessageSentCallback,Object,String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.close(IotHubConnectionStatusChangeReason reason, Throwable cause)
  name: close(IotHubConnectionStatusChangeReason reason, Throwable cause)
  nameWithType: IotHubTransport.close(IotHubConnectionStatusChangeReason reason, Throwable cause)
  parameters:
  - description: <p>the reason to close this connection, to be reported over connection status change callback </p>
    name: reason
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeReason?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeReason&text=IotHubConnectionStatusChangeReason" data-throw-if-not-resolved="False"/>
  - description: <p>the cause of why this connection is closing, to be reported over connection status change callback </p>
    name: cause
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Closes all resources used to communicate with an IoT Hub. Once<code>close()Â 

        </code> is called, the transport is no longer usable. If the transport is already closed, the function shall do nothing.</p>

    <p></p>
  syntax: public void close(IotHubConnectionStatusChangeReason reason, Throwable cause)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.close(IotHubConnectionStatusChangeReason,Throwable)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getProtocol()
  name: getProtocol()
  nameWithType: IotHubTransport.getProtocol()
  returns:
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubClientProtocol?alt=com.microsoft.azure.sdk.iot.device.IotHubClientProtocol&text=IotHubClientProtocol" data-throw-if-not-resolved="False"/>
  syntax: public IotHubClientProtocol getProtocol()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getProtocol()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getReceiveThreadSemaphore()
  name: getReceiveThreadSemaphore()
  nameWithType: IotHubTransport.getReceiveThreadSemaphore()
  returns:
    type: <xref href="Semaphore?alt=Semaphore&text=Semaphore" data-throw-if-not-resolved="False"/>
  syntax: public Semaphore getReceiveThreadSemaphore()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getReceiveThreadSemaphore()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getReconnectThreadSemaphore()
  name: getReconnectThreadSemaphore()
  nameWithType: IotHubTransport.getReconnectThreadSemaphore()
  returns:
    type: <xref href="Semaphore?alt=Semaphore&text=Semaphore" data-throw-if-not-resolved="False"/>
  syntax: public Semaphore getReconnectThreadSemaphore()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getReconnectThreadSemaphore()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getSendThreadSemaphore()
  name: getSendThreadSemaphore()
  nameWithType: IotHubTransport.getSendThreadSemaphore()
  returns:
    type: <xref href="Semaphore?alt=Semaphore&text=Semaphore" data-throw-if-not-resolved="False"/>
  syntax: public Semaphore getSendThreadSemaphore()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.getSendThreadSemaphore()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.handleMessage()
  name: handleMessage()
  nameWithType: IotHubTransport.handleMessage()
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if the server could not be reached. </p>
  summary: >-
    <p>Invokes the message callback if a message is found and responds to the IoT Hub on how the processed message should be handled by the IoT Hub. </p>

    <p>If no message callback is set, the function will do nothing.</p>

    <p></p>
  syntax: public void handleMessage()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.handleMessage()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.hasCallbacksToExecute()
  name: hasCallbacksToExecute()
  nameWithType: IotHubTransport.hasCallbacksToExecute()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hasCallbacksToExecute()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.hasCallbacksToExecute()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.hasMessagesToSend()
  name: hasMessagesToSend()
  nameWithType: IotHubTransport.hasMessagesToSend()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hasMessagesToSend()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.hasMessagesToSend()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.hasReceivedMessagesToHandle()
  name: hasReceivedMessagesToHandle()
  nameWithType: IotHubTransport.hasReceivedMessagesToHandle()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hasReceivedMessagesToHandle()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.hasReceivedMessagesToHandle()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.invokeCallbacks()
  name: invokeCallbacks()
  nameWithType: IotHubTransport.invokeCallbacks()
  summary: <p>Invokes the callbacks for all completed requests. </p>
  syntax: public void invokeCallbacks()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.invokeCallbacks()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.isClosed()
  name: isClosed()
  nameWithType: IotHubTransport.isClosed()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isClosed()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.isClosed()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.isEmpty()
  name: isEmpty()
  nameWithType: IotHubTransport.isEmpty()
  returns:
    description: >-
      <p>

        <code>trueÂ 

          </code> if the transport has no more messages to handle, and<code>falseÂ 

          </code> otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns<code>trueÂ 

        </code> if the transport has no more messages to handle, and<code>falseÂ 

        </code> otherwise.</p>

    <p></p>
  syntax: public boolean isEmpty()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.isEmpty()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.needsReconnect()
  name: needsReconnect()
  nameWithType: IotHubTransport.needsReconnect()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean needsReconnect()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.needsReconnect()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onConnectionEstablished(String connectionId)
  name: onConnectionEstablished(String connectionId)
  nameWithType: IotHubTransport.onConnectionEstablished(String connectionId)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onConnectionEstablished(String)
  parameters:
  - description: <p>the id of the connection this update is relevant to </p>
    name: connectionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when the connection has been successfully established </p>
  syntax: public void onConnectionEstablished(String connectionId)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onConnectionEstablished(String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onConnectionLost(TransportException e, String connectionId)
  name: onConnectionLost(TransportException e, String connectionId)
  nameWithType: IotHubTransport.onConnectionLost(TransportException e, String connectionId)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onConnectionLost(TransportException,String)
  parameters:
  - description: <p>the cause of the connection loss </p>
    name: e
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.TransportException?alt=com.microsoft.azure.sdk.iot.device.transport.TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
  - description: <p>the id of the connection this update is relevant to </p>
    name: connectionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when connection has been lost </p>
  syntax: public void onConnectionLost(TransportException e, String connectionId)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onConnectionLost(TransportException,String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMessageReceived(IotHubTransportMessage message, TransportException e)
  name: onMessageReceived(IotHubTransportMessage message, TransportException e)
  nameWithType: IotHubTransport.onMessageReceived(IotHubTransportMessage message, TransportException e)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onMessageReceived(IotHubTransportMessage,TransportException)
  parameters:
  - description: <p>The message that was received. May be null if e is not null </p>
    name: transportMessage
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage?alt=com.microsoft.azure.sdk.iot.device.transport.IotHubTransportMessage&text=IotHubTransportMessage" data-throw-if-not-resolved="False"/>
  - description: <p>the exception that was encountered while receiving messages. May be null if transportMessage is not null </p>
    name: e
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.TransportException?alt=com.microsoft.azure.sdk.iot.device.transport.TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when a transport message has been received. </p>
  syntax: public void onMessageReceived(IotHubTransportMessage message, TransportException e)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMessageReceived(IotHubTransportMessage,TransportException)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMessageSent(Message message, String deviceId, TransportException e)
  name: onMessageSent(Message message, String deviceId, TransportException e)
  nameWithType: IotHubTransport.onMessageSent(Message message, String deviceId, TransportException e)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onMessageSent(Message,String,TransportException)
  parameters:
  - description: <p>The message that was acknowledged </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.device.Message?alt=com.microsoft.azure.sdk.iot.device.Message&text=Message" data-throw-if-not-resolved="False"/>
  - description: <p>The device that the message was sent from </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Null if the message was successfully acknowledged. Otherwise, this exception communicates if the message should be resent at all </p>
    name: e
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.TransportException?alt=com.microsoft.azure.sdk.iot.device.transport.TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when a message that the transport client sent has been acknowledged by Iot Hub </p>
  syntax: public void onMessageSent(Message message, String deviceId, TransportException e)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMessageSent(Message,String,TransportException)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMultiplexedDeviceSessionEstablished(String connectionId, String deviceId)
  name: onMultiplexedDeviceSessionEstablished(String connectionId, String deviceId)
  nameWithType: IotHubTransport.onMultiplexedDeviceSessionEstablished(String connectionId, String deviceId)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onMultiplexedDeviceSessionEstablished(String,String)
  parameters:
  - description: <p>the Id of the connection, used to identify which of possible many reconnection attempts this event belongs to. </p>
    name: connectionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the Id of the device that the session belongs to </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when the multiplexed connection establishes a new device session. </p>
  syntax: public void onMultiplexedDeviceSessionEstablished(String connectionId, String deviceId)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMultiplexedDeviceSessionEstablished(String,String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMultiplexedDeviceSessionLost(TransportException e, String connectionId, String deviceId, boolean shouldReconnect)
  name: onMultiplexedDeviceSessionLost(TransportException e, String connectionId, String deviceId, boolean shouldReconnect)
  nameWithType: IotHubTransport.onMultiplexedDeviceSessionLost(TransportException e, String connectionId, String deviceId, boolean shouldReconnect)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onMultiplexedDeviceSessionLost(TransportException,String,String,boolean)
  parameters:
  - description: <p>The exception that caused the connection to be lost. </p>
    name: e
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.TransportException?alt=com.microsoft.azure.sdk.iot.device.transport.TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
  - description: <p>the Id of the connection, used to identify which of possible many reconnection attempts this event belongs to. </p>
    name: connectionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the Id of the device that the session belongs to </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>false if the disconnect was desired by the users, and true if it is the consequence of an issue where the SDK should retry. </p>
    name: shouldReconnect
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when the multiplexed connection loses a device session. </p>
  syntax: public void onMultiplexedDeviceSessionLost(TransportException e, String connectionId, String deviceId, boolean shouldReconnect)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMultiplexedDeviceSessionLost(TransportException,String,String,boolean)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMultiplexedDeviceSessionRegistrationFailed(String connectionId, String deviceId, Exception e)
  name: onMultiplexedDeviceSessionRegistrationFailed(String connectionId, String deviceId, Exception e)
  nameWithType: IotHubTransport.onMultiplexedDeviceSessionRegistrationFailed(String connectionId, String deviceId, Exception e)
  overridden: com.microsoft.azure.sdk.iot.device.transport.IotHubListener.onMultiplexedDeviceSessionRegistrationFailed(String,String,Exception)
  parameters:
  - description: <p>the Id of the connection, used to identify which of possible many reconnection attempts this event belongs to. </p>
    name: connectionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the Id of the device that the session belongs to </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the throwable that explains why the registration failed. </p>
    name: e
    type: <xref href="Exception?alt=Exception&text=Exception" data-throw-if-not-resolved="False"/>
  summary: <p>Callback to be fired when the multiplexed connection fails to register a device session. </p>
  syntax: public void onMultiplexedDeviceSessionRegistrationFailed(String connectionId, String deviceId, Exception e)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.onMultiplexedDeviceSessionRegistrationFailed(String,String,Exception)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.open(boolean withRetry)
  name: open(boolean withRetry)
  nameWithType: IotHubTransport.open(boolean withRetry)
  parameters:
  - description: <p>if true, this open call will apply the current retry policy to allow for the open call to be retried if it fails.</p>
    name: withRetry
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="TransportException?alt=TransportException&text=TransportException" data-throw-if-not-resolved="False"/>
    description: <p>if a communication channel cannot be established. </p>
  summary: >-
    <p>Establishes a communication channel with an IoT Hub. If a channel is already open, the function shall do nothing. </p>

    <p>If reconnection is occurring when this is called, this function shall block and wait for the reconnection to finish before trying to open the connection</p>

    <p></p>
  syntax: public void open(boolean withRetry)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.open(boolean)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.reconnect()
  name: reconnect()
  nameWithType: IotHubTransport.reconnect()
  syntax: public void reconnect()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.reconnect()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.registerMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  name: registerMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  nameWithType: IotHubTransport.registerMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  parameters:
  - name: configs
    type: List&lt;<xref href="com.microsoft.azure.sdk.iot.device.ClientConfiguration?alt=com.microsoft.azure.sdk.iot.device.ClientConfiguration&text=ClientConfiguration" data-throw-if-not-resolved="False"/>&gt;
  - name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public void registerMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.registerMultiplexedDeviceClient(List<ClientConfiguration>,long)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.sendMessages()
  name: sendMessages()
  nameWithType: IotHubTransport.sendMessages()
  summary: <p>Sends all messages on the transport queue. If a previous send attempt had failed, the function will attempt to resend the messages in the previous attempt. </p>
  syntax: public void sendMessages()
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.sendMessages()
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext, String deviceId)
  name: setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext, String deviceId)
  nameWithType: IotHubTransport.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext, String deviceId)
  parameters:
  - description: <p>the callback to be called. Can be null if callbackContext is not null </p>
    name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>a context to be passed to the callback. Can be<code>nullÂ 

          </code> . </p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>the device that the connection status events being subscribed to are for. </p>
    name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers a callback to be executed whenever the connection status to the IoT Hub has changed.</p>

    <p></p>
  syntax: public void setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext, String deviceId)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setConnectionStatusChangeCallback(IotHubConnectionStatusChangeCallback,Object,String)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setMaxNumberOfMessagesSentPerSendThread(int maxNumberOfMessagesSentPerSendThread)
  name: setMaxNumberOfMessagesSentPerSendThread(int maxNumberOfMessagesSentPerSendThread)
  nameWithType: IotHubTransport.setMaxNumberOfMessagesSentPerSendThread(int maxNumberOfMessagesSentPerSendThread)
  parameters:
  - name: maxNumberOfMessagesSentPerSendThread
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public void setMaxNumberOfMessagesSentPerSendThread(int maxNumberOfMessagesSentPerSendThread)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setMaxNumberOfMessagesSentPerSendThread(int)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setMultiplexingConnectionStateCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  name: setMultiplexingConnectionStateCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  nameWithType: IotHubTransport.setMultiplexingConnectionStateCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  parameters:
  - name: callback
    type: <xref href="com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback?alt=com.microsoft.azure.sdk.iot.device.IotHubConnectionStatusChangeCallback&text=IotHubConnectionStatusChangeCallback" data-throw-if-not-resolved="False"/>
  - name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: public void setMultiplexingConnectionStateCallback(IotHubConnectionStatusChangeCallback callback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setMultiplexingConnectionStateCallback(IotHubConnectionStatusChangeCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setMultiplexingRetryPolicy(RetryPolicy retryPolicy)
  name: setMultiplexingRetryPolicy(RetryPolicy retryPolicy)
  nameWithType: IotHubTransport.setMultiplexingRetryPolicy(RetryPolicy retryPolicy)
  parameters:
  - name: retryPolicy
    type: <xref href="com.microsoft.azure.sdk.iot.device.transport.RetryPolicy?alt=com.microsoft.azure.sdk.iot.device.transport.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  syntax: public void setMultiplexingRetryPolicy(RetryPolicy retryPolicy)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.setMultiplexingRetryPolicy(RetryPolicy)
- fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.unregisterMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  name: unregisterMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  nameWithType: IotHubTransport.unregisterMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  parameters:
  - name: configs
    type: List&lt;<xref href="com.microsoft.azure.sdk.iot.device.ClientConfiguration?alt=com.microsoft.azure.sdk.iot.device.ClientConfiguration&text=ClientConfiguration" data-throw-if-not-resolved="False"/>&gt;
  - name: timeoutMilliseconds
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public void unregisterMultiplexedDeviceClient(List<ClientConfiguration> configs, long timeoutMilliseconds)
  uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport.unregisterMultiplexedDeviceClient(List<ClientConfiguration>,long)
nameWithType: IotHubTransport
syntax: public class IotHubTransport implements IotHubListener
type: class
uid: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport
fullName: com.microsoft.azure.sdk.iot.device.transport.IotHubTransport
name: IotHubTransport
package: com.microsoft.azure.sdk.iot.device.transport
summary: <p>Manages queueing of message sending, receiving and callbacks. Manages notifying users of connection status change updates </p>
metadata: {}
