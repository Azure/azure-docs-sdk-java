### YamlMime:JavaType
constructors:
- fullName: system.fabric.FabricClient.FabricClient()
  name: FabricClient()
  nameWithType: FabricClient.FabricClient()
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class.</p>

    <p>

      <b>Remarks:</b>If the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> is on the same cluster as the service, then use a Local <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref>. Local <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> is a feature of Service Fabric that allows the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> , as it enables automatic load balancing and improves performance. </p>
  syntax: public FabricClient()
  uid: system.fabric.FabricClient.FabricClient()
- fullName: system.fabric.FabricClient.FabricClient(FabricClientRole clientRole)
  name: FabricClient(FabricClientRole clientRole)
  nameWithType: FabricClient.FabricClient(FabricClientRole clientRole)
  parameters:
  - description: <p>The fabric client role </p>
    name: clientRole
    type: <xref href="system.fabric.FabricClientRole?alt=system.fabric.FabricClientRole&text=FabricClientRole" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="system.fabric.FabricClient" data-throw-if-not-resolved="false" data-raw-source="FabricClient"></xref> class with the specified fabric client role.</p>

    <p></p>
  syntax: public FabricClient(FabricClientRole clientRole)
  uid: system.fabric.FabricClient.FabricClient(FabricClientRole)
- fullName: system.fabric.FabricClient.FabricClient(FabricClientSettings settings)
  name: FabricClient(FabricClientSettings settings)
  nameWithType: FabricClient.FabricClient(FabricClientSettings settings)
  parameters:
  - description: <p>The fabric client settings used by the fabric client. </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class with the desired fabric client settings. If the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> is on the same cluster as the service, then use a Local <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref>. Local <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> is a feature of Service Fabric that allows the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref>, as it enables automatic load balancing and improves performance.</p>

    <p></p>
  syntax: public FabricClient(FabricClientSettings settings)
  uid: system.fabric.FabricClient.FabricClient(FabricClientSettings)
- fullName: system.fabric.FabricClient.FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  name: FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  parameters:
  - description: <p>The fabric client settings. </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class with given Service Fabric Gateway addresses (hostEndpoints) and the desired fabric client settings.</p>

    <p></p>
  syntax: public FabricClient(FabricClientSettings settings, String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(FabricClientSettings,String [])
- fullName: system.fabric.FabricClient.FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  name: FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.SecurityCredentials"></xref> defines the security settings for the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref>. </p>
    name: credential
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  - description: <p>The fabric client settings. </p>
    name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class with given Service Fabric Gateway addresses (hostEndpoints), security credentials and fabric client settings.</p>

    <p></p>
  syntax: public FabricClient(SecurityCredentials credential, FabricClientSettings settings, String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(SecurityCredentials,FabricClientSettings,String [])
- fullName: system.fabric.FabricClient.FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  name: FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.SecurityCredentials"></xref> defines the security settings for the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref>. </p>
    name: credential
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class with given Service Fabric Gateway addresses (hostEndpoints) and security credentials.</p>

    <p></p>
  syntax: public FabricClient(SecurityCredentials credential, String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(SecurityCredentials,String [])
- fullName: system.fabric.FabricClient.FabricClient(String[] hostEndpoints)
  name: FabricClient(String[] hostEndpoints)
  nameWithType: FabricClient.FabricClient(String[] hostEndpoints)
  parameters:
  - description: <p>Defines the set of Gateway addresses the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> can use to connect to the cluster. </p>
    name: hostEndpoints
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.FabricClient"></xref> class with given Service Fabric Gateway addresses (hostEndpoints).</p>

    <p></p>
  syntax: public FabricClient(String[] hostEndpoints)
  uid: system.fabric.FabricClient.FabricClient(String [])
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="AutoCloseable" data-throw-if-not-resolved="False"/>
methods:
- fullName: system.fabric.FabricClient.close()
  name: close()
  nameWithType: FabricClient.close()
  syntax: public void close()
  uid: system.fabric.FabricClient.close()
- fullName: system.fabric.FabricClient.createNativeClient(String[] hostEndPoints)
  name: createNativeClient(String[] hostEndPoints)
  nameWithType: FabricClient.createNativeClient(String[] hostEndPoints)
  parameters:
  - name: hostEndPoints
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public void createNativeClient(String[] hostEndPoints)
  uid: system.fabric.FabricClient.createNativeClient(String [])
- fullName: system.fabric.FabricClient.getClientConnectionObservable()
  name: getClientConnectionObservable()
  nameWithType: FabricClient.getClientConnectionObservable()
  returns:
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.GatewayInformation?alt=system.fabric.GatewayInformation&text=GatewayInformation" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<GatewayInformation> getClientConnectionObservable()
  uid: system.fabric.FabricClient.getClientConnectionObservable()
- fullName: system.fabric.FabricClient.getClientDisconnectionObservable()
  name: getClientDisconnectionObservable()
  nameWithType: FabricClient.getClientDisconnectionObservable()
  returns:
    type: <xref href="system.fabric.Observable?alt=system.fabric.Observable&text=Observable" data-throw-if-not-resolved="False"/>&lt;<xref href="system.fabric.GatewayInformation?alt=system.fabric.GatewayInformation&text=GatewayInformation" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<GatewayInformation> getClientDisconnectionObservable()
  uid: system.fabric.FabricClient.getClientDisconnectionObservable()
- fullName: system.fabric.FabricClient.getCredential()
  name: getCredential()
  nameWithType: FabricClient.getCredential()
  returns:
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  syntax: public SecurityCredentials getCredential()
  uid: system.fabric.FabricClient.getCredential()
- fullName: system.fabric.FabricClient.getHostEndpoints()
  name: getHostEndpoints()
  nameWithType: FabricClient.getHostEndpoints()
  returns:
    type: <xref href="String+%5B%5D?alt=String+%5B%5D&text=String+%5B%5D" data-throw-if-not-resolved="False"/>
  syntax: public String [] getHostEndpoints()
  uid: system.fabric.FabricClient.getHostEndpoints()
- fullName: system.fabric.FabricClient.getSettings()
  name: getSettings()
  nameWithType: FabricClient.getSettings()
  returns:
    description: <p>The fabric client settings. </p>
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the fabric client settings.</p>

    <p></p>
  syntax: public FabricClientSettings getSettings()
  uid: system.fabric.FabricClient.getSettings()
- fullName: system.fabric.FabricClient.registerOnClaimsRetrievalCallback(BiFunction<FabricClient, AzureActiveDirectoryMetadata, String> callback)
  name: registerOnClaimsRetrievalCallback(BiFunction<FabricClient, AzureActiveDirectoryMetadata, String> callback)
  nameWithType: FabricClient.registerOnClaimsRetrievalCallback(BiFunction<FabricClient, AzureActiveDirectoryMetadata, String> callback)
  parameters:
  - description: <p>function which takes <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.security.AzureActiveDirectoryMetadata"></xref> as input which is required for acquiring a claims token from Azure Active Directory and returns claims token. </p>
    name: callback
    type: BiFunction&lt;<xref href="system.fabric.FabricClient?alt=system.fabric.FabricClient&text=FabricClient" data-throw-if-not-resolved="False"/>, AzureActiveDirectoryMetadata, String&gt;
  summary: <p>Registers the claims token retrieval callback for the ClaimsRetrieval event </p>
  syntax: public void registerOnClaimsRetrievalCallback(BiFunction<FabricClient, AzureActiveDirectoryMetadata, String> callback)
  uid: system.fabric.FabricClient.registerOnClaimsRetrievalCallback(BiFunction<FabricClient, AzureActiveDirectoryMetadata, String>)
- fullName: system.fabric.FabricClient.updateSecurityCredentials(SecurityCredentials credentials)
  name: updateSecurityCredentials(SecurityCredentials credentials)
  nameWithType: FabricClient.updateSecurityCredentials(SecurityCredentials credentials)
  parameters:
  - description: <p>The new security credentials to be used. </p>
    name: credentials
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the fabric client security credentials.</p>

    <p></p>
  syntax: public void updateSecurityCredentials(SecurityCredentials credentials)
  uid: system.fabric.FabricClient.updateSecurityCredentials(SecurityCredentials)
- fullName: system.fabric.FabricClient.UpdateSettings(FabricClientSettings settings)
  name: UpdateSettings(FabricClientSettings settings)
  nameWithType: FabricClient.UpdateSettings(FabricClientSettings settings)
  parameters:
  - name: settings
    type: <xref href="system.fabric.FabricClientSettings?alt=system.fabric.FabricClientSettings&text=FabricClientSettings" data-throw-if-not-resolved="False"/>
  syntax: public void UpdateSettings(FabricClientSettings settings)
  uid: system.fabric.FabricClient.UpdateSettings(FabricClientSettings)
nameWithType: FabricClient
syntax: public class FabricClient
type: class
uid: system.fabric.FabricClient
fullName: system.fabric.FabricClient
name: FabricClient
package: system.fabric
summary: >-
  <p>Client for a Service Fabric cluster. </p>

  <p>

    <b>Remarks:</b>It is highly recommended that you share FabricClients as much as possible. This is because the FabricClient has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise. </p>
metadata: {}
