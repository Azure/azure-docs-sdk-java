### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.ReplicationsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  name: ReplicationsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  nameWithType: ReplicationsInner.ReplicationsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManagementClientImpl&text=ContainerRegistryManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of ReplicationsInner.</p>

    <p></p>
  syntax: public ReplicationsInner(Retrofit retrofit, ContainerRegistryManagementClientImpl client)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.ReplicationsInner(Retrofit,ContainerRegistryManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreate(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  name: beginCreate(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  nameWithType: ReplicationsInner.beginCreate(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ReplicationInner beginCreate(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreate(String,String,String,ReplicationInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  name: beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  nameWithType: ReplicationsInner.beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreateAsync(String,String,String,ReplicationInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  name: beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> beginCreateAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreateAsync(String,String,String,ReplicationInner,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  name: beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  nameWithType: ReplicationsInner.beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> beginCreateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginCreateWithServiceResponseAsync(String,String,String,ReplicationInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDelete(String resourceGroupName, String registryName, String replicationName)
  name: beginDelete(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.beginDelete(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public void beginDelete(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDelete(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDeleteAsync(String resourceGroupName, String registryName, String replicationName)
  name: beginDeleteAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.beginDeleteAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public Observable<Void> beginDeleteAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDeleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDeleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  name: beginDeleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ReplicationsInner.beginDeleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDeleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  name: beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginDeleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdate(String resourceGroupName, String registryName, String replicationName)
  name: beginUpdate(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.beginUpdate(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ReplicationInner beginUpdate(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdate(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdate(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  name: beginUpdate(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  nameWithType: ReplicationsInner.beginUpdate(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ReplicationInner beginUpdate(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdate(String,String,String,Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> beginUpdateAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String,String,String,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  nameWithType: ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String,String,String,Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  name: beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> beginUpdateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateAsync(String,String,String,Map<String, String>,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  name: beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  nameWithType: ReplicationsInner.beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.beginUpdateWithServiceResponseAsync(String,String,String,Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.create(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  name: create(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  nameWithType: ReplicationsInner.create(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ReplicationInner create(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.create(String,String,String,ReplicationInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  name: createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  nameWithType: ReplicationsInner.createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.createAsync(String,String,String,ReplicationInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  name: createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> createAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.createAsync(String,String,String,ReplicationInner,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  name: createWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  nameWithType: ReplicationsInner.createWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The parameters for creating a replication. </p>
    name: replication
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> createWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, ReplicationInner replication)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.createWithServiceResponseAsync(String,String,String,ReplicationInner)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.delete(String resourceGroupName, String registryName, String replicationName)
  name: delete(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.delete(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.delete(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.deleteAsync(String resourceGroupName, String registryName, String replicationName)
  name: deleteAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.deleteAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.deleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ReplicationsInner.deleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a replication from a container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.get(String resourceGroupName, String registryName, String replicationName)
  name: get(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.get(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the properties of the specified replication.</p>

    <p></p>
  syntax: public ReplicationInner get(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.get(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.getAsync(String resourceGroupName, String registryName, String replicationName)
  name: getAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.getAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the properties of the specified replication.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> getAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.getAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  name: getAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.getAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the properties of the specified replication.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> getAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.getAsync(String,String,String,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  name: getWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.getWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ReplicationInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the properties of the specified replication.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> getWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.list(final String resourceGroupName, final String registryName)
  name: list(final String resourceGroupName, final String registryName)
  nameWithType: ReplicationsInner.list(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ReplicationInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public PagedList<ReplicationInner> list(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.list(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listAsync(final String resourceGroupName, final String registryName)
  name: listAsync(final String resourceGroupName, final String registryName)
  nameWithType: ReplicationsInner.listAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ReplicationInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public Observable<Page<ReplicationInner>> listAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<ReplicationInner> serviceCallback)
  name: listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<ReplicationInner>> listAsync(final String resourceGroupName, final String registryName, final ListOperationCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listAsync(final String,final String,final ListOperationCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNext(final String nextPageLink)
  name: listNext(final String nextPageLink)
  nameWithType: ReplicationsInner.listNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ReplicationInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public PagedList<ReplicationInner> listNext(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNext(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextAsync(final String nextPageLink)
  name: listNextAsync(final String nextPageLink)
  nameWithType: ReplicationsInner.listNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ReplicationInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public Observable<Page<ReplicationInner>> listNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationInner>> serviceFuture, final ListOperationCallback<ReplicationInner> serviceCallback)
  name: listNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationInner>> serviceFuture, final ListOperationCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.listNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationInner>> serviceFuture, final ListOperationCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public ServiceFuture<List<ReplicationInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<ReplicationInner>> serviceFuture, final ListOperationCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextAsync(final String,final ServiceFuture<List<ReplicationInner>>,final ListOperationCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextSinglePageAsync(final String nextPageLink)
  name: listNextSinglePageAsync(final String nextPageLink)
  nameWithType: ReplicationsInner.listNextSinglePageAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ReplicationInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;ReplicationInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<ReplicationInner>>> listNextSinglePageAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextSinglePageAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextWithServiceResponseAsync(final String nextPageLink)
  name: listNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: ReplicationsInner.listNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ReplicationInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ReplicationInner>>> listNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  name: listSinglePageAsync(final String resourceGroupName, final String registryName)
  nameWithType: ReplicationsInner.listSinglePageAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. ServiceResponse&lt;PageImpl&lt;ReplicationInner&gt;&gt; * </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the PagedList&lt;ReplicationInner&gt; object wrapped in <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> if successful. </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p>ServiceResponse&lt;PageImpl&lt;ReplicationInner&gt;&gt; * </p>
  syntax: public Observable<ServiceResponse<Page<ReplicationInner>>> listSinglePageAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listSinglePageAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  name: listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  nameWithType: ReplicationsInner.listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ReplicationInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists all the replications for the specified container registry.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ReplicationInner>>> listWithServiceResponseAsync(final String resourceGroupName, final String registryName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.listWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.update(String resourceGroupName, String registryName, String replicationName)
  name: update(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.update(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ReplicationInner update(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.update(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.update(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  name: update(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  nameWithType: ReplicationsInner.update(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ReplicationInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ReplicationInner update(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.update(String,String,String,Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName)
  name: updateAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> updateAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> updateAsync(String resourceGroupName, String registryName, String replicationName, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String,String,String,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  name: updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  nameWithType: ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ReplicationInner> updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String,String,String,Map<String, String>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  nameWithType: ReplicationsInner.updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public ServiceFuture<ReplicationInner> updateAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags, final ServiceCallback<ReplicationInner> serviceCallback)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateAsync(String,String,String,Map<String, String>,final ServiceCallback<ReplicationInner>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  nameWithType: ReplicationsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  name: updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  nameWithType: ReplicationsInner.updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  parameters:
  - description: <p>The name of the resource group to which the container registry belongs. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the container registry. </p>
    name: registryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the replication. </p>
    name: replicationName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The tags for the replication. </p>
    name: tags
    type: <xref href="Map%3CString%2C+String%3E?alt=Map%3CString%2C+String%3E&text=Map%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable for the request </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.ReplicationInner?alt=com.microsoft.azure.management.containerregistry.implementation.ReplicationInner&text=ReplicationInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates a replication for a container registry with the specified parameters.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ReplicationInner>> updateWithServiceResponseAsync(String resourceGroupName, String registryName, String replicationName, Map<String, String> tags)
  uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner.updateWithServiceResponseAsync(String,String,String,Map<String, String>)
nameWithType: ReplicationsInner
syntax: public class ReplicationsInner
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner
fullName: com.microsoft.azure.management.containerregistry.implementation.ReplicationsInner
name: ReplicationsInner
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>An instance of this class provides access to all the operations defined in Replications. </p>
metadata: {}
