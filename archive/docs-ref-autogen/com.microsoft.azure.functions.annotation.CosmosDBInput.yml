### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.collectionName()
  name: collectionName()
  nameWithType: CosmosDBInput.collectionName()
  returns:
    description: <p>The collection name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the collection name of the CosmosDB to which to bind.</p>

    <p></p>
  syntax: public String collectionName()
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.collectionName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.connectionStringSetting()
  name: connectionStringSetting()
  nameWithType: CosmosDBInput.connectionStringSetting()
  returns:
    description: <p>The app setting name of the connection string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the app setting name that contains the CosmosDB connection string.</p>

    <p></p>
  syntax: public String connectionStringSetting()
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.connectionStringSetting()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.databaseName()
  name: databaseName()
  nameWithType: CosmosDBInput.databaseName()
  returns:
    description: <p>The database name string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the database name of the CosmosDB to which to bind.</p>

    <p></p>
  syntax: public String databaseName()
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.databaseName()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.dataType()
  name: dataType()
  nameWithType: CosmosDBInput.dataType()
  returns:
    description: <p>The dataType which will be used by the Functions runtime. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines how Functions runtime should treat the parameter value. Possible values are: </p>

    <p>

      <ul>

        <li>

          <p>"": get the value as a string, and try to deserialize to actual parameter type like POJO </p>

        </li>

        <li>

          <p>string: always get the value as a string </p>

        </li>

        <li>

          <p>binary: get the value as a binary data, and try to deserialize to actual parameter type byte[] </p>

        </li>

      </ul>

    </p>

    <p></p>
  syntax: public String dataType() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.dataType()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.id()
  name: id()
  nameWithType: CosmosDBInput.id()
  returns:
    description: <p>The ID string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the ID of the CosmosDB to which to bind.</p>

    <p></p>
  syntax: public String id() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.id()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.name()
  name: name()
  nameWithType: CosmosDBInput.name()
  returns:
    description: <p>The variable name used in function.json. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The variable name used in function.json.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.name()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.partitionKey()
  name: partitionKey()
  nameWithType: CosmosDBInput.partitionKey()
  returns:
    description: <p>partition key value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Defines partition key value for the lookup. May include binding parameters. </p>
  syntax: public String partitionKey() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.partitionKey()
- fullName: com.microsoft.azure.functions.annotation.CosmosDBInput.sqlQuery()
  name: sqlQuery()
  nameWithType: CosmosDBInput.sqlQuery()
  returns:
    description: <p>The SQL query string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Defines the SQL query string to which to bind.</p>

    <p></p>
  syntax: public String sqlQuery() default ""
  uid: com.microsoft.azure.functions.annotation.CosmosDBInput.sqlQuery()
nameWithType: CosmosDBInput
syntax: public interface CosmosDBInput
type: interface
uid: com.microsoft.azure.functions.annotation.CosmosDBInput
fullName: com.microsoft.azure.functions.annotation.CosmosDBInput
name: CosmosDBInput
package: com.microsoft.azure.functions.annotation
summary: >-
  <p>CosmosDBInput(name = "database", databaseName = "ToDoList", collectionName = "Items", id = "{Query.id}", connectionStringSetting = "AzureCosmosDBConnection") Optional&lt;String&gt; item ) { return item.orElse("Not found"); } </p>

  <p></p>
metadata: {}
