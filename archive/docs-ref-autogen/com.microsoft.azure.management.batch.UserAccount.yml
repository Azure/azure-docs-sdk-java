### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.batch.UserAccount.elevationLevel()
  name: elevationLevel()
  nameWithType: UserAccount.elevationLevel()
  returns:
    description: <p>the elevationLevel value </p>
    type: <xref href="com.microsoft.azure.management.batch.ElevationLevel?alt=com.microsoft.azure.management.batch.ElevationLevel&text=ElevationLevel" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin. Possible values include: 'NonAdmin', 'Admin'.</p>

    <p></p>
  syntax: public ElevationLevel elevationLevel()
  uid: com.microsoft.azure.management.batch.UserAccount.elevationLevel()
- fullName: com.microsoft.azure.management.batch.UserAccount.linuxUserConfiguration()
  name: linuxUserConfiguration()
  nameWithType: UserAccount.linuxUserConfiguration()
  returns:
    description: <p>the linuxUserConfiguration value </p>
    type: <xref href="com.microsoft.azure.management.batch.LinuxUserConfiguration?alt=com.microsoft.azure.management.batch.LinuxUserConfiguration&text=LinuxUserConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.</p>

    <p></p>
  syntax: public LinuxUserConfiguration linuxUserConfiguration()
  uid: com.microsoft.azure.management.batch.UserAccount.linuxUserConfiguration()
- fullName: com.microsoft.azure.management.batch.UserAccount.name()
  name: name()
  nameWithType: UserAccount.name()
  returns:
    description: <p>the name value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name value.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.management.batch.UserAccount.name()
- fullName: com.microsoft.azure.management.batch.UserAccount.password()
  name: password()
  nameWithType: UserAccount.password()
  returns:
    description: <p>the password value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the password value.</p>

    <p></p>
  syntax: public String password()
  uid: com.microsoft.azure.management.batch.UserAccount.password()
- fullName: com.microsoft.azure.management.batch.UserAccount.windowsUserConfiguration()
  name: windowsUserConfiguration()
  nameWithType: UserAccount.windowsUserConfiguration()
  returns:
    description: <p>the windowsUserConfiguration value </p>
    type: <xref href="com.microsoft.azure.management.batch.WindowsUserConfiguration?alt=com.microsoft.azure.management.batch.WindowsUserConfiguration&text=WindowsUserConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.</p>

    <p></p>
  syntax: public WindowsUserConfiguration windowsUserConfiguration()
  uid: com.microsoft.azure.management.batch.UserAccount.windowsUserConfiguration()
- fullName: com.microsoft.azure.management.batch.UserAccount.withElevationLevel(ElevationLevel elevationLevel)
  name: withElevationLevel(ElevationLevel elevationLevel)
  nameWithType: UserAccount.withElevationLevel(ElevationLevel elevationLevel)
  parameters:
  - description: <p>the elevationLevel value to set </p>
    name: elevationLevel
    type: <xref href="com.microsoft.azure.management.batch.ElevationLevel?alt=com.microsoft.azure.management.batch.ElevationLevel&text=ElevationLevel" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the UserAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.UserAccount?alt=com.microsoft.azure.management.batch.UserAccount&text=UserAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin. Possible values include: 'NonAdmin', 'Admin'.</p>

    <p></p>
  syntax: public UserAccount withElevationLevel(ElevationLevel elevationLevel)
  uid: com.microsoft.azure.management.batch.UserAccount.withElevationLevel(ElevationLevel)
- fullName: com.microsoft.azure.management.batch.UserAccount.withLinuxUserConfiguration(LinuxUserConfiguration linuxUserConfiguration)
  name: withLinuxUserConfiguration(LinuxUserConfiguration linuxUserConfiguration)
  nameWithType: UserAccount.withLinuxUserConfiguration(LinuxUserConfiguration linuxUserConfiguration)
  parameters:
  - description: <p>the linuxUserConfiguration value to set </p>
    name: linuxUserConfiguration
    type: <xref href="com.microsoft.azure.management.batch.LinuxUserConfiguration?alt=com.microsoft.azure.management.batch.LinuxUserConfiguration&text=LinuxUserConfiguration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the UserAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.UserAccount?alt=com.microsoft.azure.management.batch.UserAccount&text=UserAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is ignored if specified on a Windows pool. If not specified, the user is created with the default options.</p>

    <p></p>
  syntax: public UserAccount withLinuxUserConfiguration(LinuxUserConfiguration linuxUserConfiguration)
  uid: com.microsoft.azure.management.batch.UserAccount.withLinuxUserConfiguration(LinuxUserConfiguration)
- fullName: com.microsoft.azure.management.batch.UserAccount.withName(String name)
  name: withName(String name)
  nameWithType: UserAccount.withName(String name)
  parameters:
  - description: <p>the name value to set </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the UserAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.UserAccount?alt=com.microsoft.azure.management.batch.UserAccount&text=UserAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name value.</p>

    <p></p>
  syntax: public UserAccount withName(String name)
  uid: com.microsoft.azure.management.batch.UserAccount.withName(String)
- fullName: com.microsoft.azure.management.batch.UserAccount.withPassword(String password)
  name: withPassword(String password)
  nameWithType: UserAccount.withPassword(String password)
  parameters:
  - description: <p>the password value to set </p>
    name: password
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the UserAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.UserAccount?alt=com.microsoft.azure.management.batch.UserAccount&text=UserAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the password value.</p>

    <p></p>
  syntax: public UserAccount withPassword(String password)
  uid: com.microsoft.azure.management.batch.UserAccount.withPassword(String)
- fullName: com.microsoft.azure.management.batch.UserAccount.withWindowsUserConfiguration(WindowsUserConfiguration windowsUserConfiguration)
  name: withWindowsUserConfiguration(WindowsUserConfiguration windowsUserConfiguration)
  nameWithType: UserAccount.withWindowsUserConfiguration(WindowsUserConfiguration windowsUserConfiguration)
  parameters:
  - description: <p>the windowsUserConfiguration value to set </p>
    name: windowsUserConfiguration
    type: <xref href="com.microsoft.azure.management.batch.WindowsUserConfiguration?alt=com.microsoft.azure.management.batch.WindowsUserConfiguration&text=WindowsUserConfiguration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the UserAccount object itself. </p>
    type: <xref href="com.microsoft.azure.management.batch.UserAccount?alt=com.microsoft.azure.management.batch.UserAccount&text=UserAccount" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options.</p>

    <p></p>
  syntax: public UserAccount withWindowsUserConfiguration(WindowsUserConfiguration windowsUserConfiguration)
  uid: com.microsoft.azure.management.batch.UserAccount.withWindowsUserConfiguration(WindowsUserConfiguration)
nameWithType: UserAccount
syntax: public class UserAccount
type: class
uid: com.microsoft.azure.management.batch.UserAccount
fullName: com.microsoft.azure.management.batch.UserAccount
name: UserAccount
package: com.microsoft.azure.management.batch
summary: <p>Properties used to create a user on an Azure Batch node. </p>
metadata: {}
