### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.remoting.runtime.ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService actorService)
  name: ActorServiceRemotingDispatcher(FabricActorService actorService)
  nameWithType: ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService actorService)
  parameters:
  - description: <p>An actor service instance. </p>
    name: actorService
    type: <xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates the ActorServiceRemotingDispatcher that can dispatch messages to an actor service and to the actors hosted in the service.</p>

    <p></p>
  syntax: public ActorServiceRemotingDispatcher(FabricActorService actorService)
  uid: microsoft.servicefabric.actors.remoting.runtime.ActorServiceRemotingDispatcher.ActorServiceRemotingDispatcher(FabricActorService)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher?alt=microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher&text=ServiceRemotingDispatcher" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.handleOneWay(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
- microsoft.servicefabric.services.remoting.runtime.ServiceRemotingDispatcher.ServiceRemotingDispatcher(ServiceContext,Service)
methods:
- fullName: microsoft.servicefabric.actors.remoting.runtime.ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  name: requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  nameWithType: ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  overridden: microsoft.servicefabric.services.remoting.ServiceRemotingMessageHandler.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
  parameters:
  - description: <p>Request context that allows getting the callback channel if required. </p>
    name: requestContext
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext?alt=microsoft.servicefabric.services.remoting.ServiceRemotingRequestContext&text=ServiceRemotingRequestContext" data-throw-if-not-resolved="False"/>
  - description: <p>Service remoting message headers </p>
    name: messageHeaders
    type: <xref href="microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders?alt=microsoft.servicefabric.services.remoting.ServiceRemotingMessageHeaders&text=ServiceRemotingMessageHeaders" data-throw-if-not-resolved="False"/>
  - description: <p>serialized request body of the remoting message. </p>
    name: requestBody
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>that represents outstanding operation. The result of the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> is the serialized response body. </p>
    type: <xref href="CompletableFuture%3Cbyte%5B%5D%3E?alt=CompletableFuture%3Cbyte%5B%5D%3E&text=CompletableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Dispatches the messages received from the client to the actor service methods or the actor methods.</p>

    <p></p>
  syntax: public CompletableFuture<byte[]> requestResponseAsync(ServiceRemotingRequestContext requestContext, ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
  uid: microsoft.servicefabric.actors.remoting.runtime.ActorServiceRemotingDispatcher.requestResponseAsync(ServiceRemotingRequestContext,ServiceRemotingMessageHeaders,byte [])
nameWithType: ActorServiceRemotingDispatcher
syntax: public class ActorServiceRemotingDispatcher extends ServiceRemotingDispatcher
type: class
uid: microsoft.servicefabric.actors.remoting.runtime.ActorServiceRemotingDispatcher
fullName: microsoft.servicefabric.actors.remoting.runtime.ActorServiceRemotingDispatcher
name: ActorServiceRemotingDispatcher
package: microsoft.servicefabric.actors.remoting.runtime
summary: <p>Provides an implementation of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceRemotingMessageHandler"></xref> that can dispatch messages to an actor service and to the actors hosted in the service. </p>
metadata: {}
