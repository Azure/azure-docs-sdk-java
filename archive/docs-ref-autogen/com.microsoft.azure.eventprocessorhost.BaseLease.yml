### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease()
  name: BaseLease()
  nameWithType: BaseLease.BaseLease()
  summary: <p>Do not use; added only for GSon deserializer </p>
  syntax: protected BaseLease()
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease()
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(BaseLease source)
  name: BaseLease(BaseLease source)
  nameWithType: BaseLease.BaseLease(BaseLease source)
  parameters:
  - description: <p>BaseLease to clone. </p>
    name: source
    type: <xref href="com.microsoft.azure.eventprocessorhost.BaseLease?alt=com.microsoft.azure.eventprocessorhost.BaseLease&text=BaseLease" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a BaseLease by duplicating the given Lease.</p>

    <p></p>
  syntax: public BaseLease(BaseLease source)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(BaseLease)
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String partitionId)
  name: BaseLease(String partitionId)
  nameWithType: BaseLease.BaseLease(String partitionId)
  parameters:
  - description: <p>Partition id for this lease. </p>
    name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a BaseLease for the given partition.</p>

    <p></p>
  syntax: public BaseLease(String partitionId)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String)
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String partitionId, String owner, boolean isOwned)
  name: BaseLease(String partitionId, String owner, boolean isOwned)
  nameWithType: BaseLease.BaseLease(String partitionId, String owner, boolean isOwned)
  parameters:
  - description: <p>Partition id for this lease. </p>
    name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Current owner of this lease, or empty. </p>
    name: owner
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>True if the lease is owned, false if not. </p>
    name: isOwned
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create and populate a BaseLease for the given partition.</p>

    <p></p>
  syntax: public BaseLease(String partitionId, String owner, boolean isOwned)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.BaseLease(String,String,boolean)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Comparable&lt;BaseLease&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.compareTo(BaseLease other)
  name: compareTo(BaseLease other)
  nameWithType: BaseLease.compareTo(BaseLease other)
  parameters:
  - name: other
    type: <xref href="com.microsoft.azure.eventprocessorhost.BaseLease?alt=com.microsoft.azure.eventprocessorhost.BaseLease&text=BaseLease" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int compareTo(BaseLease other)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.compareTo(BaseLease)
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned()
  name: getIsOwned()
  nameWithType: BaseLease.getIsOwned()
  returns:
    description: <p>true if the lease is owned, or false if it is not </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the owned state of the lease.</p>

    <p></p>
  syntax: public boolean getIsOwned()
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.getIsOwned()
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.getOwner()
  name: getOwner()
  nameWithType: BaseLease.getOwner()
  returns:
    description: <p>name of the owning instance </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The owner of a lease is the name of the EventProcessorHost instance which currently holds the lease.</p>

    <p></p>
  syntax: public String getOwner()
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.getOwner()
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId()
  name: getPartitionId()
  nameWithType: BaseLease.getPartitionId()
  returns:
    description: <p>partition id </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the id of the partition that this Lease is for. Immutable so there is no corresponding setter.</p>

    <p></p>
  syntax: public String getPartitionId()
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.getPartitionId()
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy(String possibleOwner)
  name: isOwnedBy(String possibleOwner)
  nameWithType: BaseLease.isOwnedBy(String possibleOwner)
  parameters:
  - description: <p>name to check </p>
    name: possibleOwner
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>true if possibleOwner is the same as this.owner, false otherwise </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Convenience function for comparing possibleOwner against this.owner</p>

    <p></p>
  syntax: public boolean isOwnedBy(String possibleOwner)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.isOwnedBy(String)
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned(boolean newState)
  name: setIsOwned(boolean newState)
  nameWithType: BaseLease.setIsOwned(boolean newState)
  parameters:
  - description: <p>true if the lease is owned, or false if it is not </p>
    name: newState
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the owned state of the lease.</p>

    <p></p>
  syntax: public void setIsOwned(boolean newState)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.setIsOwned(boolean)
- fullName: com.microsoft.azure.eventprocessorhost.BaseLease.setOwner(String owner)
  name: setOwner(String owner)
  nameWithType: BaseLease.setOwner(String owner)
  parameters:
  - description: <p>name of the new owning instance </p>
    name: owner
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the owner string. Used when a host steals a lease.</p>

    <p></p>
  syntax: public void setOwner(String owner)
  uid: com.microsoft.azure.eventprocessorhost.BaseLease.setOwner(String)
nameWithType: BaseLease
syntax: public class BaseLease
type: class
uid: com.microsoft.azure.eventprocessorhost.BaseLease
fullName: com.microsoft.azure.eventprocessorhost.BaseLease
name: BaseLease
package: com.microsoft.azure.eventprocessorhost
summary: >-
  <p>BaseLease class is public so that advanced users can implement an ILeaseManager. Unless you are implementing ILeaseManager you should not have to deal with objects of this class or derived classes directly. </p>

  <p>This lightweight base exists to allow ILeaseManager.getAllLeases to operate as quickly as possible <ndash></ndash> for some lease manager implementations, loading the entire contents of a lease form the store may be expensive. BaseLease contains only the minimum amount of information required to allow PartitionScanner to operate. </p>

  <p>Note that a Lease object just carries information about a partition lease. The APIs to acquire/renew/release a lease are all on ILeaseManager. </p>
metadata: {}
