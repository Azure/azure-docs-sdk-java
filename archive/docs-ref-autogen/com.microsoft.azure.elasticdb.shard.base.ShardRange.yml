### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.ShardRange()
  name: ShardRange()
  nameWithType: ShardRange.ShardRange()
  syntax: public ShardRange()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.ShardRange()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.ShardRange(ShardKey low, ShardKey high)
  name: ShardRange(ShardKey low, ShardKey high)
  nameWithType: ShardRange.ShardRange(ShardKey low, ShardKey high)
  parameters:
  - description: <p>low boundary (inclusive) </p>
    name: low
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  - description: <p>high boundary (exclusive) </p>
    name: high
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Constructs a shard range from low boundary (inclusive) to high high boundary (exclusive).</p>

    <p></p>
  syntax: public ShardRange(ShardKey low, ShardKey high)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.ShardRange(ShardKey,ShardKey)
fields:
- field:
    type: final <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.NULL
  name: "NULL"
  nameWithType: ShardRange.NULL
  syntax: public static final ShardRange NULL= new ShardRange()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.NULL
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Comparable&lt;ShardRange&gt;" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.compareTo(ShardRange other)
  name: compareTo(ShardRange other)
  nameWithType: ShardRange.compareTo(ShardRange other)
  parameters:
  - description: <p>The shard range compared with this object. </p>
    name: other
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: "<p>-1 : if this range's low boundary is less than the <em>other</em> 's low boundary; -1 : if the low boundary values match and the high boundary value of this range is less than the <em>other</em> 's. 1 : if this range's high boundary is greater than the <em>other</em> 's high boundary; 1 : if the low boundary value of this range is higher than <em>other</em> 's low boundary and high boundary value of this range is less than or equal to <em>other</em> 's high boundary . 0 : if this range has the same boundaries as <em>other</em> . </p>"
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs comparison between two shard range values.</p>

    <p></p>
  syntax: public int compareTo(ShardRange other)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.compareTo(ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.contains(ShardKey key)
  name: contains(ShardKey key)
  nameWithType: ShardRange.contains(ShardKey key)
  parameters:
  - description: <p>The key to check </p>
    name: key
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if inside, false otherwise </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether the specified key is inside the range.</p>

    <p></p>
  syntax: public boolean contains(ShardKey key)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.contains(ShardKey)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.contains(ShardRange range)
  name: contains(ShardRange range)
  nameWithType: ShardRange.contains(ShardRange range)
  parameters:
  - description: <p>The range to check. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if inside, false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether the range is inside the range.</p>

    <p></p>
  syntax: public boolean contains(ShardRange range)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.contains(ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.equals(Object obj)
  name: equals(Object obj)
  nameWithType: ShardRange.equals(Object obj)
  parameters:
  - description: <p>The object to compare with the current object. </p>
    name: obj
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if the specified object is equal to the current object; otherwise, false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determines whether the specified object is equal to the current object.</p>

    <p></p>
  syntax: public boolean equals(Object obj)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.equals(Object)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.equals(ShardRange other)
  name: equals(ShardRange other)
  nameWithType: ShardRange.equals(ShardRange other)
  parameters:
  - description: <p>ShardRange to compare with. </p>
    name: other
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if same shard range, false otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs equality comparison with another given ShardRange.</p>

    <p></p>
  syntax: public boolean equals(ShardRange other)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.equals(ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRange(ShardKeyType keyType)
  name: getFullRange(ShardKeyType keyType)
  nameWithType: ShardRange.getFullRange(ShardKeyType keyType)
  parameters:
  - description: <p>Type of key. </p>
    name: keyType
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Full range for given key type. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a shard range corresponding to a specified key type.</p>

    <p></p>
  syntax: public static ShardRange getFullRange(ShardKeyType keyType)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRange(ShardKeyType)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeBinary()
  name: getFullRangeBinary()
  nameWithType: ShardRange.getFullRangeBinary()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeBinary()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeBinary()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeDateTime()
  name: getFullRangeDateTime()
  nameWithType: ShardRange.getFullRangeDateTime()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeDateTime()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeDateTime()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeDateTimeOffset()
  name: getFullRangeDateTimeOffset()
  nameWithType: ShardRange.getFullRangeDateTimeOffset()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeDateTimeOffset()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeDateTimeOffset()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeGuid()
  name: getFullRangeGuid()
  nameWithType: ShardRange.getFullRangeGuid()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeGuid()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeGuid()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeInt32()
  name: getFullRangeInt32()
  nameWithType: ShardRange.getFullRangeInt32()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeInt32()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeInt32()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeInt64()
  name: getFullRangeInt64()
  nameWithType: ShardRange.getFullRangeInt64()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeInt64()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeInt64()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeTimeSpan()
  name: getFullRangeTimeSpan()
  nameWithType: ShardRange.getFullRangeTimeSpan()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: <p>Full range that starts from the min value for a key to the max value. </p>
  syntax: public static ShardRange getFullRangeTimeSpan()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getFullRangeTimeSpan()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getHigh()
  name: getHigh()
  nameWithType: ShardRange.getHigh()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  syntax: public ShardKey getHigh()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getHigh()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getKeyType()
  name: getKeyType()
  nameWithType: ShardRange.getKeyType()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKeyType?alt=com.microsoft.azure.elasticdb.shard.base.ShardKeyType&text=ShardKeyType" data-throw-if-not-resolved="False"/>
  syntax: public ShardKeyType getKeyType()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getKeyType()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.getLow()
  name: getLow()
  nameWithType: ShardRange.getLow()
  returns:
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardKey?alt=com.microsoft.azure.elasticdb.shard.base.ShardKey&text=ShardKey" data-throw-if-not-resolved="False"/>
  syntax: public ShardKey getLow()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.getLow()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.hashCode()
  name: hashCode()
  nameWithType: ShardRange.hashCode()
  returns:
    description: <p>Hash code for the object. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Calculates the hash code for this instance.</p>

    <p></p>
  syntax: public int hashCode()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.hashCode()
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.intersect(ShardRange range)
  name: intersect(ShardRange range)
  nameWithType: ShardRange.intersect(ShardRange range)
  parameters:
  - description: <p>Range to intersect with. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The intersection of the current range and the specified range, null if ranges dont intersect. </p>
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the intersection of two ranges.</p>

    <p></p>
  syntax: public ShardRange intersect(ShardRange range)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.intersect(ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.intersects(ShardRange range)
  name: intersects(ShardRange range)
  nameWithType: ShardRange.intersects(ShardRange range)
  parameters:
  - description: <p>The range to check. </p>
    name: range
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if it intersects, False otherwise. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether the range intersects with the current range.</p>

    <p></p>
  syntax: public boolean intersects(ShardRange range)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.intersects(ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.opEquality(ShardRange left, ShardRange right)
  name: opEquality(ShardRange left, ShardRange right)
  nameWithType: ShardRange.opEquality(ShardRange left, ShardRange right)
  parameters:
  - description: <p>Left hand side </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if the two objects are equal, false in all other cases </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Equality operator.</p>

    <p></p>
  syntax: public static boolean opEquality(ShardRange left, ShardRange right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.opEquality(ShardRange,ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.opGreaterThan(ShardRange left, ShardRange right)
  name: opGreaterThan(ShardRange left, ShardRange right)
  nameWithType: ShardRange.opGreaterThan(ShardRange left, ShardRange right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs&gt; rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> using lexicographic order (greater than).</p>

    <p></p>
  syntax: public static boolean opGreaterThan(ShardRange left, ShardRange right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.opGreaterThan(ShardRange,ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.opGreaterThanOrEqual(ShardRange left, ShardRange right)
  name: opGreaterThanOrEqual(ShardRange left, ShardRange right)
  nameWithType: ShardRange.opGreaterThanOrEqual(ShardRange left, ShardRange right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs&gt;= rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> using lexicographic order (greater or equal).</p>

    <p></p>
  syntax: public static boolean opGreaterThanOrEqual(ShardRange left, ShardRange right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.opGreaterThanOrEqual(ShardRange,ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.opInequality(ShardRange left, ShardRange right)
  name: opInequality(ShardRange left, ShardRange right)
  nameWithType: ShardRange.opInequality(ShardRange left, ShardRange right)
  parameters:
  - description: <p>Left hand side </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if the two objects are not equal, false in all other cases </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Inequality operator.</p>

    <p></p>
  syntax: public static boolean opInequality(ShardRange left, ShardRange right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.opInequality(ShardRange,ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.opLessThan(ShardRange left, ShardRange right)
  name: opLessThan(ShardRange left, ShardRange right)
  nameWithType: ShardRange.opLessThan(ShardRange left, ShardRange right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs &lt;rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> using lexicographic order (less than).</p>

    <p></p>
  syntax: public static boolean opLessThan(ShardRange left, ShardRange right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.opLessThan(ShardRange,ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.opLessThanOrEqual(ShardRange left, ShardRange right)
  name: opLessThanOrEqual(ShardRange left, ShardRange right)
  nameWithType: ShardRange.opLessThanOrEqual(ShardRange left, ShardRange right)
  parameters:
  - description: <p>Left hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: left
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  - description: <p>Right hand side <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> of the operator. </p>
    name: right
    type: <xref href="com.microsoft.azure.elasticdb.shard.base.ShardRange?alt=com.microsoft.azure.elasticdb.shard.base.ShardRange&text=ShardRange" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>True if lhs &lt;= rhs </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Compares two <xref uid="com.microsoft.azure.elasticdb.shard.base.ShardRange" data-throw-if-not-resolved="false" data-raw-source="ShardRange"></xref> using lexicographic order (less or equal).</p>

    <p></p>
  syntax: public static boolean opLessThanOrEqual(ShardRange left, ShardRange right)
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.opLessThanOrEqual(ShardRange,ShardRange)
- fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange.toString()
  name: toString()
  nameWithType: ShardRange.toString()
  returns:
    description: <p>String representation of the object. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Converts the object to its string representation.</p>

    <p></p>
  syntax: public String toString()
  uid: com.microsoft.azure.elasticdb.shard.base.ShardRange.toString()
nameWithType: ShardRange
syntax: public class ShardRange
type: class
uid: com.microsoft.azure.elasticdb.shard.base.ShardRange
fullName: com.microsoft.azure.elasticdb.shard.base.ShardRange
name: ShardRange
package: com.microsoft.azure.elasticdb.shard.base
summary: <p>A range of shard keys between a low key and a high key. The low key is inclusive (part of the range) while the high key is exclusive (not part of the range). The ShardRange class is immutable. </p>
metadata: {}
