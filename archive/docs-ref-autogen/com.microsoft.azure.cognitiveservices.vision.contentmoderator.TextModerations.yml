### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.detectLanguage(String textContentType, byte[] textContent)
  name: detectLanguage(String textContentType, byte[] textContent)
  nameWithType: TextModerations.detectLanguage(String textContentType, byte[] textContent)
  parameters:
  - description: "<p>The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'. </p>"
    name: textContentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Content to screen. </p>
    name: textContent
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the DetectedLanguage object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.DetectedLanguage?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.DetectedLanguage&text=DetectedLanguage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This operation will detect the language of given input content. Returns the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.</p>

    <p></p>
  syntax: public DetectedLanguage detectLanguage(String textContentType, byte[] textContent)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.detectLanguage(String,byte [])
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.detectLanguageAsync(String textContentType, byte[] textContent)
  name: detectLanguageAsync(String textContentType, byte[] textContent)
  nameWithType: TextModerations.detectLanguageAsync(String textContentType, byte[] textContent)
  parameters:
  - description: "<p>The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'. </p>"
    name: textContentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Content to screen. </p>
    name: textContent
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the DetectedLanguage object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.DetectedLanguage?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.DetectedLanguage&text=DetectedLanguage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>This operation will detect the language of given input content. Returns the &lt;a href="http://www-01.sil.org/iso639-3/codes.asp"&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.</p>

    <p></p>
  syntax: public Observable<DetectedLanguage> detectLanguageAsync(String textContentType, byte[] textContent)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.detectLanguageAsync(String,byte [])
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.screenText()
  name: screenText()
  nameWithType: TextModerations.screenText()
  returns:
    description: <p>the first stage of the screenText call </p>
    type: <xref href="TextModerationsScreenTextDefinitionStages.WithTextContentType?alt=TextModerationsScreenTextDefinitionStages.WithTextContentType&text=TextModerationsScreenTextDefinitionStages.WithTextContentType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect profanity and match against custom and shared blacklists. Detects profanity in more than 100 languages and match against custom and shared blacklists.</p>

    <p></p>
  syntax: public TextModerationsScreenTextDefinitionStages.WithTextContentType screenText()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.screenText()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.screenText(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  name: screenText(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  nameWithType: TextModerations.screenText(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  parameters:
  - description: "<p>The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'. </p>"
    name: textContentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Content to screen. </p>
    name: textContent
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: screenTextOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ScreenTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ScreenTextOptionalParameter&text=ScreenTextOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Screen object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Screen?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Screen&text=Screen" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Detect profanity and match against custom and shared blacklists. Detects profanity in more than 100 languages and match against custom and shared blacklists.</p>

    <p></p>
  syntax: public Screen screenText(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.screenText(String,byte [],ScreenTextOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.screenTextAsync(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  name: screenTextAsync(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  nameWithType: TextModerations.screenTextAsync(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  parameters:
  - description: "<p>The content type. Possible values include: 'text/plain', 'text/html', 'text/xml', 'text/markdown'. </p>"
    name: textContentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Content to screen. </p>
    name: textContent
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: screenTextOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ScreenTextOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ScreenTextOptionalParameter&text=ScreenTextOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Screen object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Screen?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Screen&text=Screen" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Detect profanity and match against custom and shared blacklists. Detects profanity in more than 100 languages and match against custom and shared blacklists.</p>

    <p></p>
  syntax: public Observable<Screen> screenTextAsync(String textContentType, byte[] textContent, ScreenTextOptionalParameter screenTextOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations.screenTextAsync(String,byte [],ScreenTextOptionalParameter)
nameWithType: TextModerations
syntax: public interface TextModerations
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations
fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.TextModerations
name: TextModerations
package: com.microsoft.azure.cognitiveservices.vision.contentmoderator
summary: <p>An instance of this class provides access to all the operations defined in TextModerations. </p>
metadata: {}
