### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final StorageUri storageUri)
  name: CloudBlobContainer(final StorageUri storageUri)
  nameWithType: CloudBlobContainer.CloudBlobContainer(final StorageUri storageUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object which represents the URI of the container.</p>
    name: storageUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified URI. The blob URI should include a SAS token unless anonymous access is to be used.</p>

    <p></p>
  syntax: public CloudBlobContainer(final StorageUri storageUri)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final StorageUri)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final StorageUri storageUri, final StorageCredentials credentials)
  name: CloudBlobContainer(final StorageUri storageUri, final StorageCredentials credentials)
  nameWithType: CloudBlobContainer.CloudBlobContainer(final StorageUri storageUri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object which represents the absolute StorageUri of the container. </p>
    name: storageUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access.</p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified StorageUri and credentials.</p>

    <p></p>
  syntax: public CloudBlobContainer(final StorageUri storageUri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final StorageUri,final StorageCredentials)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final String containerName, final CloudBlobClient client)
  name: CloudBlobContainer(final String containerName, final CloudBlobClient client)
  nameWithType: CloudBlobContainer.CloudBlobContainer(final String containerName, final CloudBlobClient client)
  parameters:
  - description: <p>A <code>String</code> which represents the name of the container, which must adhere to container naming rules. The container name should not include any path separator characters (/). Container names must be lowercase, between 3-63 characters long and must start with a letter or number. Container names may contain only letters, numbers, and the dash (-) character. </p>
    name: containerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref> object that represents the associated service client, and that specifies the endpoint for the Blob service. *</p>
    name: client
    type: final <xref href="com.microsoft.azure.storage.blob.CloudBlobClient?alt=com.microsoft.azure.storage.blob.CloudBlobClient&text=CloudBlobClient" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI constructed based on the containerName is invalid.</p>
  summary: >-
    <p>Creates an instance of the  class using the specified name and client.</p>

    <p></p>
  syntax: protected CloudBlobContainer(final String containerName, final CloudBlobClient client)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final String,final CloudBlobClient)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final URI uri)
  name: CloudBlobContainer(final URI uri)
  nameWithType: CloudBlobContainer.CloudBlobContainer(final URI uri)
  parameters:
  - description: <p>A <code>java.net.URI</code> object which represents the URI of the container.</p>
    name: uri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified URI. The blob URI should include a SAS token unless anonymous access is to be used.</p>

    <p></p>
  syntax: public CloudBlobContainer(final URI uri)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final URI)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final URI uri, final StorageCredentials credentials)
  name: CloudBlobContainer(final URI uri, final StorageCredentials credentials)
  nameWithType: CloudBlobContainer.CloudBlobContainer(final URI uri, final StorageCredentials credentials)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the absolute URI of the container. </p>
    name: uri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageCredentials" data-throw-if-not-resolved="false" data-raw-source="StorageCredentials"></xref> object used to authenticate access.</p>
    name: credentials
    type: final <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates an instance of the  class using the specified URI and credentials.</p>

    <p></p>
  syntax: public CloudBlobContainer(final URI uri, final StorageCredentials credentials)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.CloudBlobContainer(final URI,final StorageCredentials)
fields:
- field:
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.metadata
  name: metadata
  nameWithType: CloudBlobContainer.metadata
  summary: <p>Represents the container metadata. </p>
  syntax: protected HashMap<String, String> metadata= new HashMap<String, String>()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.metadata
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.acquireLease()
  name: acquireLease()
  nameWithType: CloudBlobContainer.acquireLease()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the lease ID.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Acquires a new infinite lease on the container.</p>

    <p></p>
  syntax: public final String acquireLease()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.acquireLease()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId)
  name: acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId)
  nameWithType: CloudBlobContainer.acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId)
  parameters:
  - description: <p>An <code>Integer</code> which specifies the span of time for which to acquire the lease, in seconds. If null, an infinite lease will be acquired. If not null, the value must be greater than zero.</p>
    name: leaseTimeInSeconds
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the proposed lease ID for the new lease, or null if no lease ID is proposed.</p>
    name: proposedLeaseId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the lease ID.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Acquires a new lease on the container with the specified lease time and proposed lease ID.</p>

    <p></p>
  syntax: public final String acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.acquireLease(final Integer,final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <code>Integer</code> which specifies the span of time for which to acquire the lease, in seconds. If null, an infinite lease will be acquired. If not null, the value must be greater than zero.</p>
    name: leaseTimeInSeconds
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the proposed lease ID for the new lease, or null if no lease ID is proposed.</p>
    name: proposedLeaseId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container.</p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>).</p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. The context is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the lease ID.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Acquires a new lease on the container with the specified lease time, proposed lease ID, request options, and operation context.</p>

    <p></p>
  syntax: public final String acquireLease(final Integer leaseTimeInSeconds, final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.acquireLease(final Integer,final String,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.breakLease(final Integer breakPeriodInSeconds)
  name: breakLease(final Integer breakPeriodInSeconds)
  nameWithType: CloudBlobContainer.breakLease(final Integer breakPeriodInSeconds)
  parameters:
  - description: <p>An <code>Integer</code> which specifies the time to wait, in seconds, until the current lease is broken. If null, the break period is the remainder of the current lease, or zero for infinite leases.</p>
    name: breakPeriodInSeconds
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>The time, in seconds, remaining in the lease period.</p>
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Breaks the lease and ensures that another client cannot acquire a new lease until the current lease period has expired.</p>

    <p></p>
  syntax: public final long breakLease(final Integer breakPeriodInSeconds)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.breakLease(final Integer)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.breakLease(final Integer breakPeriodInSeconds, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: breakLease(final Integer breakPeriodInSeconds, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.breakLease(final Integer breakPeriodInSeconds, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <code>Integer</code> which specifies the time to wait, in seconds, until the current lease is broken. If null, the break period is the remainder of the current lease, or zero for infinite leases.</p>
    name: breakPeriodInSeconds
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. The context is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>The time, in seconds, remaining in the lease period.</p>
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Breaks the existing lease, using the specified request options and operation context, and ensures that another client cannot acquire a new lease until the current lease period has expired.</p>

    <p></p>
  syntax: public final long breakLease(final Integer breakPeriodInSeconds, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.breakLease(final Integer,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.changeLease(final String proposedLeaseId, final AccessCondition accessCondition)
  name: changeLease(final String proposedLeaseId, final AccessCondition accessCondition)
  nameWithType: CloudBlobContainer.changeLease(final String proposedLeaseId, final AccessCondition accessCondition)
  parameters:
  - description: <p>A <code>String</code> that represents the proposed lease ID for the new lease, or null if no lease ID is proposed.</p>
    name: proposedLeaseId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. The lease ID is required to be set with an access condition. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the new lease ID.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the existing lease ID to the proposed lease ID.</p>

    <p></p>
  syntax: public final String changeLease(final String proposedLeaseId, final AccessCondition accessCondition)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.changeLease(final String,final AccessCondition)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.changeLease(final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: changeLease(final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.changeLease(final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> that represents the proposed lease ID for the new lease. This cannot be null.</p>
    name: proposedLeaseId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. The lease ID is required to be set with an access condition.</p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>).</p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. The context is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the new lease ID.</p>
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Changes the existing lease ID to the proposed lease Id with the specified access conditions, request options, and operation context.</p>

    <p></p>
  syntax: public final String changeLease(final String proposedLeaseId, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.changeLease(final String,final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.create()
  name: create()
  nameWithType: CloudBlobContainer.create()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates the container.</p>

    <p></p>
  syntax: public void create()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.create()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.create(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  name: create(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.create(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerPublicAccessType" data-throw-if-not-resolved="false" data-raw-source="BlobContainerPublicAccessType"></xref> object that specifies whether data in the container may be accessed publicly and what level of access is to be allowed. </p>
    name: accessType
    type: <xref href="com.microsoft.azure.storage.blob.BlobContainerPublicAccessType?alt=com.microsoft.azure.storage.blob.BlobContainerPublicAccessType&text=BlobContainerPublicAccessType" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates the container using the specified options and operation context.</p>

    <p></p>
  syntax: public void create(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.create(BlobContainerPublicAccessType,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.create(BlobRequestOptions options, OperationContext opContext)
  name: create(BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.create(BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Creates the container using the specified options and operation context.</p>

    <p></p>
  syntax: public void create(BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.create(BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.createIfNotExists()
  name: createIfNotExists()
  nameWithType: CloudBlobContainer.createIfNotExists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the container if it does not exist.</p>

    <p></p>
  syntax: public boolean createIfNotExists()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.createIfNotExists()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.createIfNotExists(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  name: createIfNotExists(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.createIfNotExists(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerPublicAccessType" data-throw-if-not-resolved="false" data-raw-source="BlobContainerPublicAccessType"></xref> object that specifies whether data in the container may be accessed publicly and what level of access is to be allowed. </p>
    name: accessType
    type: <xref href="com.microsoft.azure.storage.blob.BlobContainerPublicAccessType?alt=com.microsoft.azure.storage.blob.BlobContainerPublicAccessType&text=BlobContainerPublicAccessType" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the container if it does not exist, using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean createIfNotExists(BlobContainerPublicAccessType accessType, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.createIfNotExists(BlobContainerPublicAccessType,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.createIfNotExists(BlobRequestOptions options, OperationContext opContext)
  name: createIfNotExists(BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.createIfNotExists(BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates the container if it does not exist, using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean createIfNotExists(BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.createIfNotExists(BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.delete()
  name: delete()
  nameWithType: CloudBlobContainer.delete()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Deletes the container.</p>

    <p></p>
  syntax: public void delete()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.delete()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.delete(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: delete(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.delete(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Deletes the container using the specified request options and operation context.</p>

    <p></p>
  syntax: public void delete(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.delete(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.deleteIfExists()
  name: deleteIfExists()
  nameWithType: CloudBlobContainer.deleteIfExists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container did not already exist and was created; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the container if it exists.</p>

    <p></p>
  syntax: public boolean deleteIfExists()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.deleteIfExists()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.deleteIfExists(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: deleteIfExists(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.deleteIfExists(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container existed and was deleted; otherwise, <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the container if it exists using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean deleteIfExists(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.deleteIfExists(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAccountInfo()
  name: downloadAccountInfo()
  nameWithType: CloudBlobContainer.downloadAccountInfo()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.AccountInformation" data-throw-if-not-resolved="false" data-raw-source="AccountInformation"></xref> object for the given storage account. </p>
    type: <xref href="com.microsoft.azure.storage.AccountInformation?alt=com.microsoft.azure.storage.AccountInformation&text=AccountInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information related to the storage account in which this container resides.</p>

    <p></p>
  syntax: public AccountInformation downloadAccountInfo()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAccountInfo()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAccountInfo(BlobRequestOptions options, OperationContext opContext)
  name: downloadAccountInfo(BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.downloadAccountInfo(BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.AccountInformation" data-throw-if-not-resolved="false" data-raw-source="AccountInformation"></xref> object for the given storage account.</p>
    type: <xref href="com.microsoft.azure.storage.AccountInformation?alt=com.microsoft.azure.storage.AccountInformation&text=AccountInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information related to the storage account in which this container resides.</p>

    <p></p>
  syntax: public AccountInformation downloadAccountInfo(BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAccountInfo(BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAccountInformationImpl(final RequestOptions options)
  name: downloadAccountInformationImpl(final RequestOptions options)
  nameWithType: CloudBlobContainer.downloadAccountInformationImpl(final RequestOptions options)
  parameters:
  - name: options
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.storage.core.StorageRequest?alt=com.microsoft.azure.storage.core.StorageRequest&text=StorageRequest" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.ServiceClient?alt=com.microsoft.azure.storage.ServiceClient&text=ServiceClient" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>, <xref href="com.microsoft.azure.storage.AccountInformation?alt=com.microsoft.azure.storage.AccountInformation&text=AccountInformation" data-throw-if-not-resolved="False"/>&gt;
  syntax: protected StorageRequest<ServiceClient, CloudBlobContainer, AccountInformation> downloadAccountInformationImpl(final RequestOptions options)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAccountInformationImpl(final RequestOptions)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAttributes()
  name: downloadAttributes()
  nameWithType: CloudBlobContainer.downloadAttributes()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Downloads the container's attributes, which consist of metadata and properties.</p>

    <p></p>
  syntax: public void downloadAttributes()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAttributes()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAttributes(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: downloadAttributes(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.downloadAttributes(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Downloads the container's attributes, which consist of metadata and properties, using the specified request options and operation context.</p>

    <p></p>
  syntax: public void downloadAttributes(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAttributes(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadPermissions()
  name: downloadPermissions()
  nameWithType: CloudBlobContainer.downloadPermissions()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerPermissions" data-throw-if-not-resolved="false" data-raw-source="BlobContainerPermissions"></xref> object that represents the container's permissions.</p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobContainerPermissions?alt=com.microsoft.azure.storage.blob.BlobContainerPermissions&text=BlobContainerPermissions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads the permission settings for the container.</p>

    <p></p>
  syntax: public BlobContainerPermissions downloadPermissions()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadPermissions()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadPermissions(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: downloadPermissions(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.downloadPermissions(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerPermissions" data-throw-if-not-resolved="false" data-raw-source="BlobContainerPermissions"></xref> object that represents the container's permissions.</p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobContainerPermissions?alt=com.microsoft.azure.storage.blob.BlobContainerPermissions&text=BlobContainerPermissions" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Downloads the permissions settings for the container using the specified request options and operation context.</p>

    <p></p>
  syntax: public BlobContainerPermissions downloadPermissions(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.downloadPermissions(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.exists()
  name: exists()
  nameWithType: CloudBlobContainer.exists()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container exists, otherwise <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether the container exists.</p>

    <p></p>
  syntax: public boolean exists()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.exists()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.exists(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: exists(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.exists(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: >-
      <p>

        <code>true</code> if the container exists, otherwise <code>false</code>.</p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether the container exists, using the specified request options and operation context.</p>

    <p></p>
  syntax: public boolean exists(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.exists(final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier)
  name: generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier)
  nameWithType: CloudBlobContainer.generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.blob.SharedAccessBlobPolicy" data-throw-if-not-resolved="false" data-raw-source="SharedAccessBlobPolicy"></xref> object that represents the access policy for the shared access signature. </p>
    name: policy
    type: final <xref href="com.microsoft.azure.storage.blob.SharedAccessBlobPolicy?alt=com.microsoft.azure.storage.blob.SharedAccessBlobPolicy&text=SharedAccessBlobPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which represents the container-level access policy.</p>
    name: groupPolicyIdentifier
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the key is invalid. </p>
  returns:
    description: <p>A <code>String</code> which represents a shared access signature for the container.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a shared access signature for the container. Note this does not contain the leading "?".</p>

    <p></p>
  syntax: public String generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.generateSharedAccessSignature(final SharedAccessBlobPolicy,final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  name: generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  nameWithType: CloudBlobContainer.generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.blob.SharedAccessBlobPolicy" data-throw-if-not-resolved="false" data-raw-source="SharedAccessBlobPolicy"></xref> object that represents the access policy for the shared access signature. </p>
    name: policy
    type: final <xref href="com.microsoft.azure.storage.blob.SharedAccessBlobPolicy?alt=com.microsoft.azure.storage.blob.SharedAccessBlobPolicy&text=SharedAccessBlobPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> which represents the container-level access policy. </p>
    name: groupPolicyIdentifier
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.IPRange" data-throw-if-not-resolved="false" data-raw-source="IPRange"></xref> object containing the range of allowed IP addresses. </p>
    name: ipRange
    type: final <xref href="com.microsoft.azure.storage.IPRange?alt=com.microsoft.azure.storage.IPRange&text=IPRange" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.SharedAccessProtocols" data-throw-if-not-resolved="false" data-raw-source="SharedAccessProtocols"></xref> representing the allowed Internet protocols.</p>
    name: protocols
    type: final <xref href="com.microsoft.azure.storage.SharedAccessProtocols?alt=com.microsoft.azure.storage.SharedAccessProtocols&text=SharedAccessProtocols" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the key is invalid. </p>
  returns:
    description: <p>A <code>String</code> which represents a shared access signature for the container.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a shared access signature for the container. Note this does not contain the leading "?".</p>

    <p></p>
  syntax: public String generateSharedAccessSignature(final SharedAccessBlobPolicy policy, final String groupPolicyIdentifier, final IPRange ipRange, final SharedAccessProtocols protocols)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.generateSharedAccessSignature(final SharedAccessBlobPolicy,final String,final IPRange,final SharedAccessProtocols)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getAppendBlobReference(final String blobName)
  name: getAppendBlobReference(final String blobName)
  nameWithType: CloudBlobContainer.getAppendBlobReference(final String blobName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob.</p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob" data-throw-if-not-resolved="false" data-raw-source="CloudAppendBlob"></xref> object that represents a reference to the specified append blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudAppendBlob?alt=com.microsoft.azure.storage.blob.CloudAppendBlob&text=CloudAppendBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob" data-throw-if-not-resolved="false" data-raw-source="CloudAppendBlob"></xref> object that represents an append blob in this container.</p>

    <p></p>
  syntax: public CloudAppendBlob getAppendBlobReference(final String blobName)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getAppendBlobReference(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getAppendBlobReference(final String blobName, final String snapshotID)
  name: getAppendBlobReference(final String blobName, final String snapshotID)
  nameWithType: CloudBlobContainer.getAppendBlobReference(final String blobName, final String snapshotID)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob. </p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot ID of the blob.</p>
    name: snapshotID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob" data-throw-if-not-resolved="false" data-raw-source="CloudAppendBlob"></xref> object that represents a reference to the specified append blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudAppendBlob?alt=com.microsoft.azure.storage.blob.CloudAppendBlob&text=CloudAppendBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudAppendBlob" data-throw-if-not-resolved="false" data-raw-source="CloudAppendBlob"></xref> object that represents an append blob in the container, using the specified snapshot ID.</p>

    <p></p>
  syntax: public CloudAppendBlob getAppendBlobReference(final String blobName, final String snapshotID)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getAppendBlobReference(final String,final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlobReferenceFromServer(final String blobName)
  name: getBlobReferenceFromServer(final String blobName)
  nameWithType: CloudBlobContainer.getBlobReferenceFromServer(final String blobName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob.</p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlob" data-throw-if-not-resolved="false" data-raw-source="CloudBlob"></xref> object that represents a reference to the specified blob.</p>
    type: final <xref href="com.microsoft.azure.storage.blob.CloudBlob?alt=com.microsoft.azure.storage.blob.CloudBlob&text=CloudBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a reference to a blob in this container. The blob must already exist on the service.</p>

    <p>Unlike the other get*Reference methods, this method does a service request to retrieve the blob's metadata and properties. The returned blob may be used directly as a CloudBlob or cast using either instanceof or getProperties().getBlobType() to determine its subtype.</p>

    <p></p>
  syntax: public final CloudBlob getBlobReferenceFromServer(final String blobName)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlobReferenceFromServer(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlobReferenceFromServer(final String blobName, final String snapshotID, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: getBlobReferenceFromServer(final String blobName, final String snapshotID, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.getBlobReferenceFromServer(final String blobName, final String snapshotID, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob. </p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot ID of the blob. </p>
    name: snapshotID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlob" data-throw-if-not-resolved="false" data-raw-source="CloudBlob"></xref> object that represents a reference to the specified blob.</p>
    type: final <xref href="com.microsoft.azure.storage.blob.CloudBlob?alt=com.microsoft.azure.storage.blob.CloudBlob&text=CloudBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a reference to a blob in this container. The blob must already exist on the service.</p>

    <p>Unlike the other get*Reference methods, this method does a service request to retrieve the blob's metadata and properties. The returned blob may be used directly as a CloudBlob or cast using either instanceof or getProperties().getBlobType() to determine its subtype.</p>

    <p></p>
  syntax: public final CloudBlob getBlobReferenceFromServer(final String blobName, final String snapshotID, AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlobReferenceFromServer(final String,final String,AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlockBlobReference(final String blobName)
  name: getBlockBlobReference(final String blobName)
  nameWithType: CloudBlobContainer.getBlockBlobReference(final String blobName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob.</p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlockBlob" data-throw-if-not-resolved="false" data-raw-source="CloudBlockBlob"></xref> object that represents a reference to the specified block blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudBlockBlob?alt=com.microsoft.azure.storage.blob.CloudBlockBlob&text=CloudBlockBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudBlockBlob" data-throw-if-not-resolved="false" data-raw-source="CloudBlockBlob"></xref> object that represents a block blob in this container.</p>

    <p></p>
  syntax: public CloudBlockBlob getBlockBlobReference(final String blobName)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlockBlobReference(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlockBlobReference(final String blobName, final String snapshotID)
  name: getBlockBlobReference(final String blobName, final String snapshotID)
  nameWithType: CloudBlobContainer.getBlockBlobReference(final String blobName, final String snapshotID)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob. </p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot ID of the blob.</p>
    name: snapshotID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlockBlob" data-throw-if-not-resolved="false" data-raw-source="CloudBlockBlob"></xref> object that represents a reference to the specified block blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudBlockBlob?alt=com.microsoft.azure.storage.blob.CloudBlockBlob&text=CloudBlockBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudBlockBlob" data-throw-if-not-resolved="false" data-raw-source="CloudBlockBlob"></xref> object that represents a block blob in this container, using the specified snapshot ID.</p>

    <p></p>
  syntax: public CloudBlockBlob getBlockBlobReference(final String blobName, final String snapshotID)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getBlockBlobReference(final String,final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getDirectoryReference(String directoryName)
  name: getDirectoryReference(String directoryName)
  nameWithType: CloudBlobContainer.getDirectoryReference(String directoryName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the virtual blob directory. If the root directory (the directory representing the container itself) is desired, use an empty string. </p>
    name: directoryName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlobDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudBlobDirectory"></xref> that represents a virtual blob directory within this container. </p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudBlobDirectory?alt=com.microsoft.azure.storage.blob.CloudBlobDirectory&text=CloudBlobDirectory" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudBlobDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudBlobDirectory"></xref> object that represents a virtual blob directory within this container.</p>

    <p></p>
  syntax: public CloudBlobDirectory getDirectoryReference(String directoryName)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getDirectoryReference(String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getMetadata()
  name: getMetadata()
  nameWithType: CloudBlobContainer.getMetadata()
  returns:
    description: <p>A <code>java.util.HashMap</code> object that represents the metadata for the container. </p>
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the metadata for the container. This value is initialized with the metadata from the queue by a call to <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer.downloadAttributes()" data-throw-if-not-resolved="false" data-raw-source="downloadAttributes"></xref>, and is set on the queue with a call to <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata()" data-throw-if-not-resolved="false" data-raw-source="uploadMetadata"></xref>.</p>

    <p></p>
  syntax: public HashMap<String, String> getMetadata()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getMetadata()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getName()
  name: getName()
  nameWithType: CloudBlobContainer.getName()
  returns:
    description: <p>A <code>String</code> that represents the name of the container. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the name of the container.</p>

    <p></p>
  syntax: public String getName()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getName()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getPageBlobReference(final String blobName)
  name: getPageBlobReference(final String blobName)
  nameWithType: CloudBlobContainer.getPageBlobReference(final String blobName)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob.</p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudPageBlob" data-throw-if-not-resolved="false" data-raw-source="CloudPageBlob"></xref> object that represents a reference to the specified page blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudPageBlob?alt=com.microsoft.azure.storage.blob.CloudPageBlob&text=CloudPageBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudPageBlob" data-throw-if-not-resolved="false" data-raw-source="CloudPageBlob"></xref> object that represents a page blob in this container.</p>

    <p></p>
  syntax: public CloudPageBlob getPageBlobReference(final String blobName)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getPageBlobReference(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getPageBlobReference(final String blobName, final String snapshotID)
  name: getPageBlobReference(final String blobName, final String snapshotID)
  nameWithType: CloudBlobContainer.getPageBlobReference(final String blobName, final String snapshotID)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the blob. </p>
    name: blobName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the snapshot ID of the blob.</p>
    name: snapshotID
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If the resource URI is invalid. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudPageBlob" data-throw-if-not-resolved="false" data-raw-source="CloudPageBlob"></xref> object that represents a reference to the specified page blob.</p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudPageBlob?alt=com.microsoft.azure.storage.blob.CloudPageBlob&text=CloudPageBlob" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a reference to a <xref uid="com.microsoft.azure.storage.blob.CloudPageBlob" data-throw-if-not-resolved="false" data-raw-source="CloudPageBlob"></xref> object that represents a page blob in the container, using the specified snapshot ID.</p>

    <p></p>
  syntax: public CloudPageBlob getPageBlobReference(final String blobName, final String snapshotID)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getPageBlobReference(final String,final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getProperties()
  name: getProperties()
  nameWithType: CloudBlobContainer.getProperties()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerProperties" data-throw-if-not-resolved="false" data-raw-source="BlobContainerProperties"></xref> object that represents the properties for the container. </p>
    type: <xref href="com.microsoft.azure.storage.blob.BlobContainerProperties?alt=com.microsoft.azure.storage.blob.BlobContainerProperties&text=BlobContainerProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the properties for the container.</p>

    <p></p>
  syntax: public BlobContainerProperties getProperties()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getProperties()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getServiceClient()
  name: getServiceClient()
  nameWithType: CloudBlobContainer.getServiceClient()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref> object that represents the service client associated with this container. </p>
    type: <xref href="com.microsoft.azure.storage.blob.CloudBlobClient?alt=com.microsoft.azure.storage.blob.CloudBlobClient&text=CloudBlobClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the Blob service client associated with this container.</p>

    <p></p>
  syntax: public CloudBlobClient getServiceClient()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getServiceClient()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getStorageUri()
  name: getStorageUri()
  nameWithType: CloudBlobContainer.getStorageUri()
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object which represents the list of URIs for all locations.. </p>
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of URIs for all locations.</p>

    <p></p>
  syntax: public StorageUri getStorageUri()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getStorageUri()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.getUri()
  name: getUri()
  nameWithType: CloudBlobContainer.getUri()
  returns:
    description: <p>The absolute URI to the container. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the URI for this container.</p>

    <p></p>
  syntax: public URI getUri()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.getUri()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs()
  name: listBlobs()
  nameWithType: CloudBlobContainer.listBlobs()
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects retrieved lazily that represents the items in this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of blob items for the container.</p>

    <p></p>
  syntax: public Iterable<ListBlobItem> listBlobs()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs(final String prefix)
  name: listBlobs(final String prefix)
  nameWithType: CloudBlobContainer.listBlobs(final String prefix)
  parameters:
  - description: <p>A <code>String</code> that represents the blob name prefix. This value must be preceded either by the name of the container or by the absolute path to the container.</p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects retrieved lazily that represents the items whose names begin with the specified prefix in this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of blob items for the container whose names begin with the specified prefix.</p>

    <p></p>
  syntax: public Iterable<ListBlobItem> listBlobs(final String prefix)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs(final String prefix, final boolean useFlatBlobListing)
  name: listBlobs(final String prefix, final boolean useFlatBlobListing)
  nameWithType: CloudBlobContainer.listBlobs(final String prefix, final boolean useFlatBlobListing)
  parameters:
  - description: <p>A <code>String</code> that represents the blob name prefix. This value must be preceded either by the name of the container or by the absolute path to the container. </p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> to indicate that the returned list will be flat; <code>false</code> to indicate that the returned list will be hierarchical. </p>
    name: useFlatBlobListing
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects retrieved lazily that represents the items whose names begin with the specified prefix in this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of blob items for the container whose names begin with the specified prefix using the specified flat or hierarchical option.</p>

    <p></p>
  syntax: public Iterable<ListBlobItem> listBlobs(final String prefix, final boolean useFlatBlobListing)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs(final String,final boolean)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext)
  name: listBlobs(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.listBlobs(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> that represents the blob name prefix. This value must be preceded either by the name of the container or by the absolute path to the container. </p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> to indicate that the returned list will be flat; <code>false</code> to indicate that the returned list will be hierarchical. </p>
    name: useFlatBlobListing
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.util.EnumSet</code> object that contains <xref uid="com.microsoft.azure.storage.blob.BlobListingDetails" data-throw-if-not-resolved="false" data-raw-source="BlobListingDetails"></xref> values that indicate whether snapshots, soft-deleted blobs, metadata, and/or uncommitted blocks are returned. Committed blocks are always returned. </p>
    name: listingDetails
    type: final EnumSet&lt;<xref href="com.microsoft.azure.storage.blob.BlobListingDetails?alt=com.microsoft.azure.storage.blob.BlobListingDetails&text=BlobListingDetails" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects retrieved lazily that represents the items whose names begin with the specified prefix in this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of blob items for the container whose names begin with the specified prefix, using the specified flat or hierarchical option, listing details options, request options, and operation context.</p>

    <p></p>
  syntax: public Iterable<ListBlobItem> listBlobs(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobs(final String,final boolean,final EnumSet<BlobListingDetails>,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobsSegmented()
  name: listBlobsSegmented()
  nameWithType: CloudBlobContainer.listBlobsSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects that represent the blob items in the container.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment of an enumerable collection of blob items in the container.</p>

    <p></p>
  syntax: public ResultSegment<ListBlobItem> listBlobsSegmented()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobsSegmented()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobsSegmented(final String prefix)
  name: listBlobsSegmented(final String prefix)
  nameWithType: CloudBlobContainer.listBlobsSegmented(final String prefix)
  parameters:
  - description: <p>A <code>String</code> that represents the prefix of the blob name.</p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects that represent the blob items whose names begin with the specified prefix in the container.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment containing a collection of blob items whose names begin with the specified prefix.</p>

    <p></p>
  syntax: public ResultSegment<ListBlobItem> listBlobsSegmented(final String prefix)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobsSegmented(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobsSegmented(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, final Integer maxResults, final ResultContinuation continuationToken, BlobRequestOptions options, OperationContext opContext)
  name: listBlobsSegmented(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, final Integer maxResults, final ResultContinuation continuationToken, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.listBlobsSegmented(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, final Integer maxResults, final ResultContinuation continuationToken, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> that represents the prefix of the blob name. </p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> to indicate that the returned list will be flat; <code>false</code> to indicate that the returned list will be hierarchical. </p>
    name: useFlatBlobListing
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.util.EnumSet</code> object that contains <xref uid="com.microsoft.azure.storage.blob.BlobListingDetails" data-throw-if-not-resolved="false" data-raw-source="BlobListingDetails"></xref> values that indicate whether snapshots, soft-deleted blobs, metadata, and/or uncommitted blocks are returned. Committed blocks are always returned. </p>
    name: listingDetails
    type: final EnumSet&lt;<xref href="com.microsoft.azure.storage.blob.BlobListingDetails?alt=com.microsoft.azure.storage.blob.BlobListingDetails&text=BlobListingDetails" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>The maximum number of results to retrieve. If <code>null</code> or greater than 5000, the server will return up to 5,000 items. Must be at least 1. </p>
    name: maxResults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.blob.ListBlobItem" data-throw-if-not-resolved="false" data-raw-source="ListBlobItem"></xref> objects that represent the block items whose names begin with the specified prefix in the container.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.blob.ListBlobItem?alt=com.microsoft.azure.storage.blob.ListBlobItem&text=ListBlobItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment containing a collection of blob items whose names begin with the specified prefix, using the specified flat or hierarchical option, listing details options, request options, and operation context.</p>

    <p></p>
  syntax: public ResultSegment<ListBlobItem> listBlobsSegmented(final String prefix, final boolean useFlatBlobListing, final EnumSet<BlobListingDetails> listingDetails, final Integer maxResults, final ResultContinuation continuationToken, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listBlobsSegmented(final String,final boolean,final EnumSet<BlobListingDetails>,final Integer,final ResultContinuation,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainers()
  name: listContainers()
  nameWithType: CloudBlobContainer.listContainers()
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer"></xref> objects retrieved lazily that represent the containers for the service client associated with this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of containers for the service client associated with this container.</p>

    <p></p>
  syntax: public Iterable<CloudBlobContainer> listContainers()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainers()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainers(final String prefix)
  name: listContainers(final String prefix)
  nameWithType: CloudBlobContainer.listContainers(final String prefix)
  parameters:
  - description: <p>A <code>String</code> that represents the container name prefix.</p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer"></xref> objects retrieved lazily that represent the containers whose names begin with the specified prefix for the service client associated with this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of containers whose names begin with the specified prefix for the service client associated with this container.</p>

    <p></p>
  syntax: public Iterable<CloudBlobContainer> listContainers(final String prefix)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainers(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainers(final String prefix, final ContainerListingDetails detailsIncluded, final BlobRequestOptions options, final OperationContext opContext)
  name: listContainers(final String prefix, final ContainerListingDetails detailsIncluded, final BlobRequestOptions options, final OperationContext opContext)
  nameWithType: CloudBlobContainer.listContainers(final String prefix, final ContainerListingDetails detailsIncluded, final BlobRequestOptions options, final OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> that represents the container name prefix. </p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.ContainerListingDetails" data-throw-if-not-resolved="false" data-raw-source="ContainerListingDetails"></xref> value that indicates whether container metadata will be returned. </p>
    name: detailsIncluded
    type: final <xref href="com.microsoft.azure.storage.blob.ContainerListingDetails?alt=com.microsoft.azure.storage.blob.ContainerListingDetails&text=ContainerListingDetails" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An enumerable collection of <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer"></xref> objects retrieved lazily that represents the containers for the service client associated with this container. </p>
    type: Iterable&lt;<xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns an enumerable collection of containers whose names begin with the specified prefix for the service client associated with this container, using the specified details setting, request options, and operation context.</p>

    <p></p>
  syntax: public Iterable<CloudBlobContainer> listContainers(final String prefix, final ContainerListingDetails detailsIncluded, final BlobRequestOptions options, final OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainers(final String,final ContainerListingDetails,final BlobRequestOptions,final OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainersSegmented()
  name: listContainersSegmented()
  nameWithType: CloudBlobContainer.listContainersSegmented()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer"></xref> objects that represent the containers for the service client associated with this container.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment of an enumerable collection of containers for the service client associated with this container.</p>

    <p></p>
  syntax: public ResultSegment<CloudBlobContainer> listContainersSegmented()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainersSegmented()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainersSegmented(final String prefix)
  name: listContainersSegmented(final String prefix)
  nameWithType: CloudBlobContainer.listContainersSegmented(final String prefix)
  parameters:
  - description: <p>A <code>String</code> that represents the blob name prefix.</p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer"></xref> objects that represent the containers whose names begin with the specified prefix for the service client associated with this container.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment of an enumerable collection of containers whose names begin with the specified prefix for the service client associated with this container.</p>

    <p></p>
  syntax: public ResultSegment<CloudBlobContainer> listContainersSegmented(final String prefix)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainersSegmented(final String)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainersSegmented(final String prefix, final ContainerListingDetails detailsIncluded, final Integer maxResults, final ResultContinuation continuationToken, final BlobRequestOptions options, final OperationContext opContext)
  name: listContainersSegmented(final String prefix, final ContainerListingDetails detailsIncluded, final Integer maxResults, final ResultContinuation continuationToken, final BlobRequestOptions options, final OperationContext opContext)
  nameWithType: CloudBlobContainer.listContainersSegmented(final String prefix, final ContainerListingDetails detailsIncluded, final Integer maxResults, final ResultContinuation continuationToken, final BlobRequestOptions options, final OperationContext opContext)
  parameters:
  - description: <p>A <code>String</code> that represents the prefix of the container name. </p>
    name: prefix
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.ContainerListingDetails" data-throw-if-not-resolved="false" data-raw-source="ContainerListingDetails"></xref> object that indicates whether metadata is included. </p>
    name: detailsIncluded
    type: final <xref href="com.microsoft.azure.storage.blob.ContainerListingDetails?alt=com.microsoft.azure.storage.blob.ContainerListingDetails&text=ContainerListingDetails" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of results to retrieve. If <code>null</code> or greater than 5000, the server will return up to 5,000 items. Must be at least 1. </p>
    name: maxResults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents a continuation token returned by a previous listing operation. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: final <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.ResultSegment" data-throw-if-not-resolved="false" data-raw-source="ResultSegment"></xref> object that contains a segment of the enumerable collection of <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer" data-throw-if-not-resolved="false" data-raw-source="CloudBlobContainer"></xref> objects that represent the containers whose names begin with the specified prefix for the service client associated with this container.</p>
    type: <xref href="com.microsoft.azure.storage.ResultSegment?alt=com.microsoft.azure.storage.ResultSegment&text=ResultSegment" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.storage.blob.CloudBlobContainer?alt=com.microsoft.azure.storage.blob.CloudBlobContainer&text=CloudBlobContainer" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns a result segment containing a collection of containers whose names begin with the specified prefix for the service client associated with this container, using the specified listing details options, request options, and operation context.</p>

    <p></p>
  syntax: public ResultSegment<CloudBlobContainer> listContainersSegmented(final String prefix, final ContainerListingDetails detailsIncluded, final Integer maxResults, final ResultContinuation continuationToken, final BlobRequestOptions options, final OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.listContainersSegmented(final String,final ContainerListingDetails,final Integer,final ResultContinuation,final BlobRequestOptions,final OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.releaseLease(final AccessCondition accessCondition)
  name: releaseLease(final AccessCondition accessCondition)
  nameWithType: CloudBlobContainer.releaseLease(final AccessCondition accessCondition)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. The lease ID is required to be set with an access condition.</p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Releases the lease on the container.</p>

    <p></p>
  syntax: public final void releaseLease(final AccessCondition accessCondition)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.releaseLease(final AccessCondition)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.releaseLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: releaseLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.releaseLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. The lease ID is required to be set with an access condition.</p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>).</p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. The context is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Releases the lease on the container using the specified access conditions, request options, and operation context.</p>

    <p></p>
  syntax: public final void releaseLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.releaseLease(final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.renewLease(final AccessCondition accessCondition)
  name: renewLease(final AccessCondition accessCondition)
  nameWithType: CloudBlobContainer.renewLease(final AccessCondition accessCondition)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. The lease ID is required to be set with an access condition.</p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renews an existing lease with the specified access conditions.</p>

    <p></p>
  syntax: public final void renewLease(final AccessCondition accessCondition)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.renewLease(final AccessCondition)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.renewLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: renewLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.renewLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the blob. The lease ID is required to be set with an access condition.</p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client (<xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>).</p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. The context is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    type: <xref href="final+void?alt=final+void&text=final+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renews an existing lease with the specified access conditions, request options, and operation context.</p>

    <p></p>
  syntax: public final void renewLease(final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.renewLease(final AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.setMetadata(final HashMap<String, String> metadata)
  name: setMetadata(final HashMap<String, String> metadata)
  nameWithType: CloudBlobContainer.setMetadata(final HashMap<String, String> metadata)
  parameters:
  - description: <p>A <code>java.util.HashMap</code> object that represents the metadata being assigned to the container. </p>
    name: metadata
    type: <xref href="final+HashMap%3CString%2C+String%3E?alt=final+HashMap%3CString%2C+String%3E&text=final+HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the metadata collection of name-value pairs to be set on the container with an <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata()" data-throw-if-not-resolved="false" data-raw-source="uploadMetadata"></xref> call. This collection will overwrite any existing container metadata. If this is set to an empty collection, the container metadata will be cleared on an <xref uid="com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata()" data-throw-if-not-resolved="false" data-raw-source="uploadMetadata"></xref> call.</p>

    <p></p>
  syntax: public void setMetadata(final HashMap<String, String> metadata)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.setMetadata(final HashMap<String, String>)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.setProperties(final BlobContainerProperties properties)
  name: setProperties(final BlobContainerProperties properties)
  nameWithType: CloudBlobContainer.setProperties(final BlobContainerProperties properties)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerProperties" data-throw-if-not-resolved="false" data-raw-source="BlobContainerProperties"></xref> object that represents the properties being assigned to the container. </p>
    name: properties
    type: final <xref href="com.microsoft.azure.storage.blob.BlobContainerProperties?alt=com.microsoft.azure.storage.blob.BlobContainerProperties&text=BlobContainerProperties" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the properties for the container.</p>

    <p></p>
  syntax: protected void setProperties(final BlobContainerProperties properties)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.setProperties(final BlobContainerProperties)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.setStorageUri(final StorageUri storageUri)
  name: setStorageUri(final StorageUri storageUri)
  nameWithType: CloudBlobContainer.setStorageUri(final StorageUri storageUri)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.StorageUri" data-throw-if-not-resolved="false" data-raw-source="StorageUri"></xref> object which represents the list of URIs for all locations. </p>
    name: storageUri
    type: final <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the list of URIs for all locations.</p>

    <p></p>
  syntax: protected void setStorageUri(final StorageUri storageUri)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.setStorageUri(final StorageUri)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata()
  name: uploadMetadata()
  nameWithType: CloudBlobContainer.uploadMetadata()
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Uploads the container's metadata.</p>

    <p></p>
  syntax: public void uploadMetadata()
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata()
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: uploadMetadata(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.uploadMetadata(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Uploads the container's metadata using the specified request options and operation context.</p>

    <p></p>
  syntax: public void uploadMetadata(AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadMetadata(AccessCondition,BlobRequestOptions,OperationContext)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadPermissions(final BlobContainerPermissions permissions)
  name: uploadPermissions(final BlobContainerPermissions permissions)
  nameWithType: CloudBlobContainer.uploadPermissions(final BlobContainerPermissions permissions)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerPermissions" data-throw-if-not-resolved="false" data-raw-source="BlobContainerPermissions"></xref> object that represents the permissions to upload.</p>
    name: permissions
    type: final <xref href="com.microsoft.azure.storage.blob.BlobContainerPermissions?alt=com.microsoft.azure.storage.blob.BlobContainerPermissions&text=BlobContainerPermissions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Uploads the container's permissions.</p>

    <p></p>
  syntax: public void uploadPermissions(final BlobContainerPermissions permissions)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadPermissions(final BlobContainerPermissions)
- fullName: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadPermissions(final BlobContainerPermissions permissions, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  name: uploadPermissions(final BlobContainerPermissions permissions, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  nameWithType: CloudBlobContainer.uploadPermissions(final BlobContainerPermissions permissions, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobContainerPermissions" data-throw-if-not-resolved="false" data-raw-source="BlobContainerPermissions"></xref> object that represents the permissions to upload. </p>
    name: permissions
    type: final <xref href="com.microsoft.azure.storage.blob.BlobContainerPermissions?alt=com.microsoft.azure.storage.blob.BlobContainerPermissions&text=BlobContainerPermissions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.AccessCondition" data-throw-if-not-resolved="false" data-raw-source="AccessCondition"></xref> object that represents the access conditions for the container. </p>
    name: accessCondition
    type: final <xref href="com.microsoft.azure.storage.AccessCondition?alt=com.microsoft.azure.storage.AccessCondition&text=AccessCondition" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.blob.BlobRequestOptions" data-throw-if-not-resolved="false" data-raw-source="BlobRequestOptions"></xref> object that specifies any additional options for the request. Specifying <code>null</code> will use the default request options from the associated service client ( <xref uid="com.microsoft.azure.storage.blob.CloudBlobClient" data-throw-if-not-resolved="false" data-raw-source="CloudBlobClient"></xref>). </p>
    name: options
    type: <xref href="com.microsoft.azure.storage.blob.BlobRequestOptions?alt=com.microsoft.azure.storage.blob.BlobRequestOptions&text=BlobRequestOptions" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation.</p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  summary: >-
    <p>Uploads the container's permissions using the specified request options and operation context.</p>

    <p></p>
  syntax: public void uploadPermissions(final BlobContainerPermissions permissions, final AccessCondition accessCondition, BlobRequestOptions options, OperationContext opContext)
  uid: com.microsoft.azure.storage.blob.CloudBlobContainer.uploadPermissions(final BlobContainerPermissions,final AccessCondition,BlobRequestOptions,OperationContext)
nameWithType: CloudBlobContainer
syntax: public class CloudBlobContainer
type: class
uid: com.microsoft.azure.storage.blob.CloudBlobContainer
fullName: com.microsoft.azure.storage.blob.CloudBlobContainer
name: CloudBlobContainer
package: com.microsoft.azure.storage.blob
summary: >-
  <p>Represents a container in the Microsoft Azure Blob service. </p>

  <p>Containers hold directories, which are encapsulated as <xref uid="com.microsoft.azure.storage.blob.CloudBlobDirectory" data-throw-if-not-resolved="false" data-raw-source="CloudBlobDirectory"></xref> objects, and directories hold block blobs and page blobs. Directories can also contain sub-directories. </p>
metadata: {}
