### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.containerInfo()
  name: containerInfo()
  nameWithType: StartTaskInformation.containerInfo()
  returns:
    description: <p>the containerInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation&text=TaskContainerExecutionInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task runs in a container context.</p>

    <p></p>
  syntax: public TaskContainerExecutionInformation containerInfo()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.containerInfo()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.endTime()
  name: endTime()
  nameWithType: StartTaskInformation.endTime()
  returns:
    description: <p>the endTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this is the end time of the most recent run of the start task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start task is currently running.</p>

    <p></p>
  syntax: public DateTime endTime()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.endTime()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.exitCode()
  name: exitCode()
  nameWithType: StartTaskInformation.exitCode()
  returns:
    description: <p>the exitCode value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the start task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.</p>

    <p></p>
  syntax: public Integer exitCode()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.exitCode()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.failureInfo()
  name: failureInfo()
  nameWithType: StartTaskInformation.failureInfo()
  returns:
    description: <p>the failureInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskFailureInformation?alt=com.microsoft.azure.batch.protocol.models.TaskFailureInformation&text=TaskFailureInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this property is set only if the task is in the completed state and encountered a failure.</p>

    <p></p>
  syntax: public TaskFailureInformation failureInfo()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.failureInfo()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.lastRetryTime()
  name: lastRetryTime()
  nameWithType: StartTaskInformation.lastRetryTime()
  returns:
    description: <p>the lastRetryTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.</p>

    <p></p>
  syntax: public DateTime lastRetryTime()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.lastRetryTime()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.result()
  name: result()
  nameWithType: StartTaskInformation.result()
  returns:
    description: <p>the result value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionResult?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionResult&text=TaskExecutionResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the value is 'failed', then the details of the failure can be found in the failureInfo property. Possible values include: 'success', 'failure'.</p>

    <p></p>
  syntax: public TaskExecutionResult result()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.result()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.retryCount()
  name: retryCount()
  nameWithType: StartTaskInformation.retryCount()
  returns:
    description: <p>the retryCount value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.</p>

    <p></p>
  syntax: public int retryCount()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.retryCount()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.startTime()
  name: startTime()
  nameWithType: StartTaskInformation.startTime()
  returns:
    description: <p>the startTime value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get this value is reset every time the task is restarted or retried (that is, this is the most recent time at which the start task started running).</p>

    <p></p>
  syntax: public DateTime startTime()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.startTime()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.state()
  name: state()
  nameWithType: StartTaskInformation.state()
  returns:
    description: <p>the state value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskState?alt=com.microsoft.azure.batch.protocol.models.StartTaskState&text=StartTaskState" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'running', 'completed'.</p>

    <p></p>
  syntax: public StartTaskState state()
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.state()
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withContainerInfo(TaskContainerExecutionInformation containerInfo)
  name: withContainerInfo(TaskContainerExecutionInformation containerInfo)
  nameWithType: StartTaskInformation.withContainerInfo(TaskContainerExecutionInformation containerInfo)
  parameters:
  - description: <p>the containerInfo value to set </p>
    name: containerInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation?alt=com.microsoft.azure.batch.protocol.models.TaskContainerExecutionInformation&text=TaskContainerExecutionInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task runs in a container context.</p>

    <p></p>
  syntax: public StartTaskInformation withContainerInfo(TaskContainerExecutionInformation containerInfo)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withContainerInfo(TaskContainerExecutionInformation)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withEndTime(DateTime endTime)
  name: withEndTime(DateTime endTime)
  nameWithType: StartTaskInformation.withEndTime(DateTime endTime)
  parameters:
  - description: <p>the endTime value to set </p>
    name: endTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this is the end time of the most recent run of the start task, if that run has completed (even if that run failed and a retry is pending). This element is not present if the start task is currently running.</p>

    <p></p>
  syntax: public StartTaskInformation withEndTime(DateTime endTime)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withEndTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withExitCode(Integer exitCode)
  name: withExitCode(Integer exitCode)
  nameWithType: StartTaskInformation.withExitCode(Integer exitCode)
  parameters:
  - description: <p>the exitCode value to set </p>
    name: exitCode
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the start task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the start task (due to timeout, or user termination via the API) you may see an operating system-defined exit code.</p>

    <p></p>
  syntax: public StartTaskInformation withExitCode(Integer exitCode)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withExitCode(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withFailureInfo(TaskFailureInformation failureInfo)
  name: withFailureInfo(TaskFailureInformation failureInfo)
  nameWithType: StartTaskInformation.withFailureInfo(TaskFailureInformation failureInfo)
  parameters:
  - description: <p>the failureInfo value to set </p>
    name: failureInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskFailureInformation?alt=com.microsoft.azure.batch.protocol.models.TaskFailureInformation&text=TaskFailureInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this property is set only if the task is in the completed state and encountered a failure.</p>

    <p></p>
  syntax: public StartTaskInformation withFailureInfo(TaskFailureInformation failureInfo)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withFailureInfo(TaskFailureInformation)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withLastRetryTime(DateTime lastRetryTime)
  name: withLastRetryTime(DateTime lastRetryTime)
  nameWithType: StartTaskInformation.withLastRetryTime(DateTime lastRetryTime)
  parameters:
  - description: <p>the lastRetryTime value to set </p>
    name: lastRetryTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this element is present only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the task has been restarted for reasons other than retry; for example, if the compute node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not.</p>

    <p></p>
  syntax: public StartTaskInformation withLastRetryTime(DateTime lastRetryTime)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withLastRetryTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withResult(TaskExecutionResult result)
  name: withResult(TaskExecutionResult result)
  nameWithType: StartTaskInformation.withResult(TaskExecutionResult result)
  parameters:
  - description: <p>the result value to set </p>
    name: result
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskExecutionResult?alt=com.microsoft.azure.batch.protocol.models.TaskExecutionResult&text=TaskExecutionResult" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the value is 'failed', then the details of the failure can be found in the failureInfo property. Possible values include: 'success', 'failure'.</p>

    <p></p>
  syntax: public StartTaskInformation withResult(TaskExecutionResult result)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withResult(TaskExecutionResult)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withRetryCount(int retryCount)
  name: withRetryCount(int retryCount)
  nameWithType: StartTaskInformation.withRetryCount(int retryCount)
  parameters:
  - description: <p>the retryCount value to set </p>
    name: retryCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set task application failures (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file upload errors are not retried. The Batch service will retry the task up to the limit specified by the constraints.</p>

    <p></p>
  syntax: public StartTaskInformation withRetryCount(int retryCount)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withRetryCount(int)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withStartTime(DateTime startTime)
  name: withStartTime(DateTime startTime)
  nameWithType: StartTaskInformation.withStartTime(DateTime startTime)
  parameters:
  - description: <p>the startTime value to set </p>
    name: startTime
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set this value is reset every time the task is restarted or retried (that is, this is the most recent time at which the start task started running).</p>

    <p></p>
  syntax: public StartTaskInformation withStartTime(DateTime startTime)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withStartTime(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withState(StartTaskState state)
  name: withState(StartTaskState state)
  nameWithType: StartTaskInformation.withState(StartTaskState state)
  parameters:
  - description: <p>the state value to set </p>
    name: state
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskState?alt=com.microsoft.azure.batch.protocol.models.StartTaskState&text=StartTaskState" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the StartTaskInformation object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.StartTaskInformation?alt=com.microsoft.azure.batch.protocol.models.StartTaskInformation&text=StartTaskInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'running', 'completed'.</p>

    <p></p>
  syntax: public StartTaskInformation withState(StartTaskState state)
  uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation.withState(StartTaskState)
nameWithType: StartTaskInformation
syntax: public class StartTaskInformation
type: class
uid: com.microsoft.azure.batch.protocol.models.StartTaskInformation
fullName: com.microsoft.azure.batch.protocol.models.StartTaskInformation
name: StartTaskInformation
package: com.microsoft.azure.batch.protocol.models
summary: <p>Information about a start task running on a compute node. </p>
metadata: {}
