### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.redis.RedisCache.asPremium()
- com.microsoft.azure.management.redis.RedisCache.getKeys()
- com.microsoft.azure.management.redis.RedisCache.hostName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.redis.RedisCache.isPremium()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.redis.RedisCache.keys()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.redis.RedisCache.nonSslPort()
- com.microsoft.azure.management.redis.RedisCache.port()
- com.microsoft.azure.management.redis.RedisCache.provisioningState()
- com.microsoft.azure.management.redis.RedisCache.redisConfiguration()
- com.microsoft.azure.management.redis.RedisCache.redisVersion()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.redis.RedisCache.refreshKeys()
- com.microsoft.azure.management.redis.RedisCache.regenerateKey(RedisKeyType)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.redis.RedisCache.shardCount()
- com.microsoft.azure.management.redis.RedisCache.sku()
- com.microsoft.azure.management.redis.RedisCache.sslPort()
- com.microsoft.azure.management.redis.RedisCache.staticIP()
- com.microsoft.azure.management.redis.RedisCache.subnetId()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.deletePatchSchedule()
  name: deletePatchSchedule()
  nameWithType: RedisCachePremium.deletePatchSchedule()
  summary: <p>Deletes the patching schedule for Redis Cache. </p>
  syntax: public void deletePatchSchedule()
  uid: com.microsoft.azure.management.redis.RedisCachePremium.deletePatchSchedule()
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.exportData(String containerSASUrl, String prefix)
  name: exportData(String containerSASUrl, String prefix)
  nameWithType: RedisCachePremium.exportData(String containerSASUrl, String prefix)
  parameters:
  - description: <p>container name to export to. </p>
    name: containerSASUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>prefix to use for exported files. </p>
    name: prefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Export data from Redis Cache.</p>

    <p></p>
  syntax: public void exportData(String containerSASUrl, String prefix)
  uid: com.microsoft.azure.management.redis.RedisCachePremium.exportData(String,String)
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.exportData(String containerSASUrl, String prefix, String fileFormat)
  name: exportData(String containerSASUrl, String prefix, String fileFormat)
  nameWithType: RedisCachePremium.exportData(String containerSASUrl, String prefix, String fileFormat)
  parameters:
  - description: <p>container name to export to. </p>
    name: containerSASUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>prefix to use for exported files. </p>
    name: prefix
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>specifies file format. </p>
    name: fileFormat
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Export data from Redis Cache.</p>

    <p></p>
  syntax: public void exportData(String containerSASUrl, String prefix, String fileFormat)
  uid: com.microsoft.azure.management.redis.RedisCachePremium.exportData(String,String,String)
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.forceReboot(RebootType rebootType)
  name: forceReboot(RebootType rebootType)
  nameWithType: RedisCachePremium.forceReboot(RebootType rebootType)
  parameters:
  - description: "<p>specifies which Redis node(s) to reboot. Depending on this value data loss is possible. Possible values include: 'PrimaryNode', 'SecondaryNode', 'AllNodes'. </p>"
    name: rebootType
    type: <xref href="com.microsoft.azure.management.redis.RebootType?alt=com.microsoft.azure.management.redis.RebootType&text=RebootType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.</p>

    <p></p>
  syntax: public void forceReboot(RebootType rebootType)
  uid: com.microsoft.azure.management.redis.RedisCachePremium.forceReboot(RebootType)
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.forceReboot(RebootType rebootType, int shardId)
  name: forceReboot(RebootType rebootType, int shardId)
  nameWithType: RedisCachePremium.forceReboot(RebootType rebootType, int shardId)
  parameters:
  - description: "<p>specifies which Redis node(s) to reboot. Depending on this value data loss is possible. Possible values include: 'PrimaryNode', 'SecondaryNode', 'AllNodes'. </p>"
    name: rebootType
    type: <xref href="com.microsoft.azure.management.redis.RebootType?alt=com.microsoft.azure.management.redis.RebootType&text=RebootType" data-throw-if-not-resolved="False"/>
  - description: <p>In case of cluster cache, this specifies shard id which should be rebooted. </p>
    name: shardId
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.</p>

    <p></p>
  syntax: public void forceReboot(RebootType rebootType, int shardId)
  uid: com.microsoft.azure.management.redis.RedisCachePremium.forceReboot(RebootType,int)
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.importData(List<String> files)
  name: importData(List<String> files)
  nameWithType: RedisCachePremium.importData(List<String> files)
  parameters:
  - description: <p>files to import. </p>
    name: files
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Import data into Redis Cache.</p>

    <p></p>
  syntax: public void importData(List<String> files)
  uid: com.microsoft.azure.management.redis.RedisCachePremium.importData(List<String>)
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.importData(List<String> files, String fileFormat)
  name: importData(List<String> files, String fileFormat)
  nameWithType: RedisCachePremium.importData(List<String> files, String fileFormat)
  parameters:
  - description: <p>files to import. </p>
    name: files
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  - description: <p>specifies file format. </p>
    name: fileFormat
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Import data into Redis Cache.</p>

    <p></p>
  syntax: public void importData(List<String> files, String fileFormat)
  uid: com.microsoft.azure.management.redis.RedisCachePremium.importData(List<String>,String)
- fullName: com.microsoft.azure.management.redis.RedisCachePremium.listPatchSchedules()
  name: listPatchSchedules()
  nameWithType: RedisCachePremium.listPatchSchedules()
  returns:
    description: <p>List of patch schedules for current Redis Cache. </p>
    type: List&lt;<xref href="com.microsoft.azure.management.redis.ScheduleEntry?alt=com.microsoft.azure.management.redis.ScheduleEntry&text=ScheduleEntry" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Gets the patching schedule for Redis Cache. </p>
  syntax: public List<ScheduleEntry> listPatchSchedules()
  uid: com.microsoft.azure.management.redis.RedisCachePremium.listPatchSchedules()
nameWithType: RedisCachePremium
syntax: public interface RedisCachePremium extends RedisCache
type: interface
uid: com.microsoft.azure.management.redis.RedisCachePremium
fullName: com.microsoft.azure.management.redis.RedisCachePremium
name: RedisCachePremium
package: com.microsoft.azure.management.redis
summary: <p>An immutable client-side representation of an Azure Redis cache with Premium SKU. </p>
metadata: {}
