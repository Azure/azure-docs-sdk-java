### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.ActorBase(FabricActorService actorService, ActorId actorId)
  name: ActorBase(FabricActorService actorService, ActorId actorId)
  nameWithType: ActorBase.ActorBase(FabricActorService actorService, ActorId actorId)
  parameters:
  - name: actorService
    type: <xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>
  - name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  syntax: protected ActorBase(FabricActorService actorService, ActorId actorId)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.ActorBase(FabricActorService,ActorId)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getActorService()
  name: getActorService()
  nameWithType: ActorBase.getActorService()
  returns:
    description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.runtime.FabricActorService" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.runtime.FabricActorService"></xref> that represents the stateful service replica hosting the actor. actor. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the stateful service replica that is hosting the actor.</p>

    <p></p>
  syntax: public FabricActorService getActorService()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getActorService()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getApplicationName()
  name: getApplicationName()
  nameWithType: ActorBase.getApplicationName()
  returns:
    description: <p>Name of application that contains the actor service that is hosting this actor. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the name of the application that contains the actor service that is hosting this actor.</p>

    <p></p>
  syntax: public String getApplicationName()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getApplicationName()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getDiagnosticsContext()
  name: getDiagnosticsContext()
  nameWithType: ActorBase.getDiagnosticsContext()
  returns:
    description: <p>diagnostics context. </p>
    type: <xref href="DiagnosticsManagerActorContext?alt=DiagnosticsManagerActorContext&text=DiagnosticsManagerActorContext" data-throw-if-not-resolved="False"/>
  summary: <p>Returns the diagnostics context for an actor. For internal use only. </p>
  syntax: public DiagnosticsManagerActorContext getDiagnosticsContext()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getDiagnosticsContext()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getEvent(Class<T> eventClass)
  name: getEvent(Class<T> eventClass)
  nameWithType: ActorBase.getEvent(Class<T> eventClass)
  parameters:
  - description: <p>Event class. </p>
    name: eventClass
    type: <xref href="Class%3CT%3E?alt=Class%3CT%3E&text=Class%3CT%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns Event that represents the specified interface. </p>
    type: <xref href="%3CT%3E+T?alt=%3CT%3E+T&text=%3CT%3E+T" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the event for the specified event interface.</p>

    <p></p>
  syntax: protected <T> T getEvent(Class<T> eventClass)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getEvent(Class<T>)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getId()
  name: getId()
  nameWithType: ActorBase.getId()
  returns:
    description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> for the actor. </p>
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the identity of this actor with the actor service.</p>

    <p></p>
  syntax: public ActorId getId()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getId()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getReminder(String reminderName)
  name: getReminder(String reminderName)
  nameWithType: ActorBase.getReminder(String reminderName)
  parameters:
  - description: <p>Name of the reminder to get. </p>
    name: reminderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>An <xref uid="microsoft.servicefabric.actors.runtime.ActorReminder" data-throw-if-not-resolved="false" data-raw-source="ActorReminder"></xref> that represents an actor reminder. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the actor reminder with specified reminder name.</p>

    <p></p>
  syntax: protected ActorReminder getReminder(String reminderName)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getReminder(String)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.getServiceUri()
  name: getServiceUri()
  nameWithType: ActorBase.getServiceUri()
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.net.URI"></xref> of the actor service that is hosting this actor. </p>
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the Uri of the actor service that is hosting this actor.</p>

    <p></p>
  syntax: public URI getServiceUri()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.getServiceUri()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.isDirty()
  name: isDirty()
  nameWithType: ActorBase.isDirty()
  returns:
    description: <p>Boolean value true if actor state is dirty; otherwise false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Check if actor state is dirty. </p>
  syntax: public boolean isDirty()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.isDirty()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.onActivateAsync()
  name: onActivateAsync()
  nameWithType: ActorBase.onActivateAsync()
  returns:
    description: <p>A CompletableFuture that represents outstanding OnActivateAsync operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Override this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated and before any method call or reminders are dispatched on it.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onActivateAsync()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.onActivateAsync()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.onDeactivateAsync()
  name: onDeactivateAsync()
  nameWithType: ActorBase.onDeactivateAsync()
  returns:
    description: <p>A CompletableFuture that represents outstanding OnDeactivateAsync operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Override this method to release any resources including unregistering the timers. This method is called right before the actor is deactivated.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onDeactivateAsync()
  uid: microsoft.servicefabric.actors.runtime.ActorBase.onDeactivateAsync()
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  name: onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  parameters:
  - description: <p>An <xref uid="microsoft.servicefabric.actors.runtime.ActorMethodContext" data-throw-if-not-resolved="false" data-raw-source="ActorMethodContext"></xref> describing the method that was invoked by actor runtime prior to this method. </p>
    name: actorMethodContext
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorMethodContext?alt=microsoft.servicefabric.actors.runtime.ActorMethodContext&text=ActorMethodContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> representing post-actor-method operation.</p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is invoked by actor runtime an actor method has finished execution. Override this method for performing any actions after an actor method has finished execution.</p>

    <p>

      <b>Remarks:</b> This method is invoked by actor runtime prior to: <ul><li><p>Invoking an actor interface method when a client request comes. </p></li><li><p>Invoking a method on <xref uid="microsoft.servicefabric.actors.runtime.Remindable" data-throw-if-not-resolved="false" data-raw-source="Remindable"></xref> interface when a reminder fires. </p></li><li><p>Invoking a timer callback when timer fires. </p></li></ul></p>
  syntax: protected CompletableFuture<?> onPostActorMethodAsync(ActorMethodContext actorMethodContext)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  name: onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  nameWithType: ActorBase.onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  parameters:
  - description: <p>An <xref uid="microsoft.servicefabric.actors.runtime.ActorMethodContext" data-throw-if-not-resolved="false" data-raw-source="ActorMethodContext"></xref> describing the method that will be invoked by actor runtime after this method finishes. </p>
    name: actorMethodContext
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorMethodContext?alt=microsoft.servicefabric.actors.runtime.ActorMethodContext&text=ActorMethodContext" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> representing pre-actor-method operation.</p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is invoked by actor runtime just before invoking an actor method. Override this method for performing any actions prior to an actor method is invoked.</p>

    <p>

      <b>Remarks:</b>This method is invoked by actor runtime prior to: <ul><li><p>Invoking an actor interface method when a client request comes. </p></li><li><p>Invoking a method on <xref uid="microsoft.servicefabric.actors.runtime.Remindable" data-throw-if-not-resolved="false" data-raw-source="Remindable"></xref> interface when a reminder fires. </p></li><li><p>Invoking a timer callback when timer fires. </p></li></ul></p>
  syntax: protected CompletableFuture<?> onPreActorMethodAsync(ActorMethodContext actorMethodContext)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  name: registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  parameters:
  - description: <p>Name of the reminder to register </p>
    name: reminderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>State associated with reminder. </p>
    name: state
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref> representing the amount of time to delay before firing the reminder. Specify negative one (-1) milliseconds to prevent reminder from firing. Specify zero (0) to fire the reminder immediately. </p>
    name: dueTime
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The time interval between firing of reminders. Specify negative one (-1) milliseconds to disable periodic firing. </p>
    name: period
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous registration operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers the specified reminder with actor.</p>

    <p></p>
  syntax: protected CompletableFuture<?> registerReminderAsync(String reminderName, byte[] state, Duration dueTime, Duration period)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.registerReminderAsync(String,byte [],Duration,Duration)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  parameters:
  - description: <p>Callback to invoke when timer fires. </p>
    name: asyncCallback
    type: <xref href="Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E?alt=Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E&text=Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E" data-throw-if-not-resolved="False"/>
  - description: <p>State to pass into timer callback. </p>
    name: state
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan when actor timer is first due. </p>
    name: dueTime
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan for subsequent actor timer invocation. </p>
    name: period
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns ActorTimer object. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTimer?alt=microsoft.servicefabric.actors.runtime.ActorTimer&text=ActorTimer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers a Timer for the actor.</p>

    <p></p>
  syntax: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, Object state, Duration dueTime, Duration period)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  name: registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  nameWithType: ActorBase.registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  parameters:
  - description: <p>Callback to invoke when timer fires. </p>
    name: asyncCallback
    type: <xref href="Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E?alt=Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E&text=Function%3CObject%2C+CompletableFuture%3C%3F%3E%3E" data-throw-if-not-resolved="False"/>
  - description: <p>name of AsyncCallBack function. It can be used in <xref uid="microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false" data-raw-source="ActorBase#onPreActorMethodAsync(ActorMethodContext)"></xref> and <xref uid="microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext)" data-throw-if-not-resolved="false" data-raw-source="ActorBase#onPostActorMethodAsync(ActorMethodContext)"></xref> to initiate any user task on pre- and post- calling of this function. The property <xref uid="microsoft.servicefabric.actors.runtime.ActorMethodContext.getMethodName()" data-throw-if-not-resolved="false" data-raw-source="ActorMethodContext#getMethodName()"></xref> will give the method name. </p>
    name: asyncCallbackFunctionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>State to pass into timer callback. </p>
    name: state
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan when actor timer is first due. </p>
    name: dueTime
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>TimeSpan for subsequent actor timer invocation. </p>
    name: period
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns ActorTimer object. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTimer?alt=microsoft.servicefabric.actors.runtime.ActorTimer&text=ActorTimer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Registers a Timer for the actor.</p>

    <p></p>
  syntax: protected ActorTimer registerTimer(Function<Object, CompletableFuture<?>> asyncCallback, String asyncCallbackFunctionName, Object state, Duration dueTime, Duration period)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.setDirty(boolean isDirty)
  name: setDirty(boolean isDirty)
  nameWithType: ActorBase.setDirty(boolean isDirty)
  parameters:
  - description: '<p>takes actor state as boolean value: true or false. </p>'
    name: isDirty
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Sets the actor state as dirty. </p>
  syntax: public void setDirty(boolean isDirty)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.setDirty(boolean)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.setDummy(boolean isDummy)
  name: setDummy(boolean isDummy)
  nameWithType: ActorBase.setDummy(boolean isDummy)
  parameters:
  - description: '<p>takes actor state as boolean value : true or false. </p>'
    name: isDummy
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Set the actor state whether its dummy or not. </p>
  syntax: protected void setDummy(boolean isDummy)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.setDummy(boolean)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.unregisterReminderAsync(ActorReminder reminder)
  name: unregisterReminderAsync(ActorReminder reminder)
  nameWithType: ActorBase.unregisterReminderAsync(ActorReminder reminder)
  parameters:
  - description: <p>The actor reminder to unregister. </p>
    name: reminder
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorReminder?alt=microsoft.servicefabric.actors.runtime.ActorReminder&text=ActorReminder" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous unregister operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unregisters the specified reminder with actor.</p>

    <p></p>
  syntax: protected CompletableFuture<?> unregisterReminderAsync(ActorReminder reminder)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.unregisterReminderAsync(ActorReminder)
- fullName: microsoft.servicefabric.actors.runtime.ActorBase.unregisterTimer(ActorTimer timer)
  name: unregisterTimer(ActorTimer timer)
  nameWithType: ActorBase.unregisterTimer(ActorTimer timer)
  parameters:
  - description: <p>ActorTimer representing timer that needs to be unregistered. </p>
    name: timer
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTimer?alt=microsoft.servicefabric.actors.runtime.ActorTimer&text=ActorTimer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unregisters a Timer previously set on this actor.</p>

    <p></p>
  syntax: protected void unregisterTimer(ActorTimer timer)
  uid: microsoft.servicefabric.actors.runtime.ActorBase.unregisterTimer(ActorTimer)
nameWithType: ActorBase
syntax: public class ActorBase
type: class
uid: microsoft.servicefabric.actors.runtime.ActorBase
fullName: microsoft.servicefabric.actors.runtime.ActorBase
name: ActorBase
package: microsoft.servicefabric.actors.runtime
summary: >-
  <p>Represents base class for actors. <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.Actor"></xref></p>

  <p>

    <b>Remarks:</b>This is a base type for actor, it provides the functionality that is common across actors implemented by actor deriving from <xref uid="microsoft.servicefabric.actors.Actor" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.Actor"></xref> The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref uid="microsoft.servicefabric.actors.runtime.ActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="microsoft.servicefabric.actors.runtime.ActorStateProvider"></xref>. </p>
metadata: {}
