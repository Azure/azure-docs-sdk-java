### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
methods:
- fullName: com.microsoft.azure.management.appservice.WebAppBase.alwaysOn()
  name: alwaysOn()
  nameWithType: WebAppBase.alwaysOn()
  returns:
    description: <p>if the web app is always on </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean alwaysOn()
  uid: com.microsoft.azure.management.appservice.WebAppBase.alwaysOn()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.applySlotConfigurations(String slotName)
  name: applySlotConfigurations(String slotName)
  nameWithType: WebAppBase.applySlotConfigurations(String slotName)
  parameters:
  - description: <p>the target slot to apply configurations from </p>
    name: slotName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Apply the slot (or sticky) configurations from the specified slot to the current one. This is useful for "Swap with Preview". </p>
  syntax: public void applySlotConfigurations(String slotName)
  uid: com.microsoft.azure.management.appservice.WebAppBase.applySlotConfigurations(String)
- fullName: com.microsoft.azure.management.appservice.WebAppBase.applySlotConfigurationsAsync(String slotName)
  name: applySlotConfigurationsAsync(String slotName)
  nameWithType: WebAppBase.applySlotConfigurationsAsync(String slotName)
  parameters:
  - description: <p>the target slot to apply configurations from </p>
    name: slotName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Apply the slot (or sticky) configurations from the specified slot to the current one. This is useful for "Swap with Preview". </p>
  syntax: public Completable applySlotConfigurationsAsync(String slotName)
  uid: com.microsoft.azure.management.appservice.WebAppBase.applySlotConfigurationsAsync(String)
- fullName: com.microsoft.azure.management.appservice.WebAppBase.appServicePlanId()
  name: appServicePlanId()
  nameWithType: WebAppBase.appServicePlanId()
  returns:
    description: <p>The resource ID of the app service plan </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String appServicePlanId()
  uid: com.microsoft.azure.management.appservice.WebAppBase.appServicePlanId()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.appSettings()
  name: appSettings()
  nameWithType: WebAppBase.appSettings()
  returns:
    description: <p>the app settings defined on the web app </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.appservice.AppSetting?alt=com.microsoft.azure.management.appservice.AppSetting&text=AppSetting" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, AppSetting> appSettings()
  uid: com.microsoft.azure.management.appservice.WebAppBase.appSettings()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.autoSwapSlotName()
  name: autoSwapSlotName()
  nameWithType: WebAppBase.autoSwapSlotName()
  returns:
    description: <p>the auto swap slot name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String autoSwapSlotName()
  uid: com.microsoft.azure.management.appservice.WebAppBase.autoSwapSlotName()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.availabilityState()
  name: availabilityState()
  nameWithType: WebAppBase.availabilityState()
  returns:
    description: <p>management information availability state for the web app </p>
    type: <xref href="com.microsoft.azure.management.appservice.SiteAvailabilityState?alt=com.microsoft.azure.management.appservice.SiteAvailabilityState&text=SiteAvailabilityState" data-throw-if-not-resolved="False"/>
  syntax: public SiteAvailabilityState availabilityState()
  uid: com.microsoft.azure.management.appservice.WebAppBase.availabilityState()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.clientAffinityEnabled()
  name: clientAffinityEnabled()
  nameWithType: WebAppBase.clientAffinityEnabled()
  returns:
    description: <p>if the client affinity is enabled when load balancing http request for multiple instances of the web app </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean clientAffinityEnabled()
  uid: com.microsoft.azure.management.appservice.WebAppBase.clientAffinityEnabled()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.clientCertEnabled()
  name: clientCertEnabled()
  nameWithType: WebAppBase.clientCertEnabled()
  returns:
    description: <p>if the client certificate is enabled for the web app </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean clientCertEnabled()
  uid: com.microsoft.azure.management.appservice.WebAppBase.clientCertEnabled()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.cloningInfo()
  name: cloningInfo()
  nameWithType: WebAppBase.cloningInfo()
  returns:
    description: <p>information about whether the web app is cloned from another </p>
    type: <xref href="com.microsoft.azure.management.appservice.CloningInfo?alt=com.microsoft.azure.management.appservice.CloningInfo&text=CloningInfo" data-throw-if-not-resolved="False"/>
  syntax: public CloningInfo cloningInfo()
  uid: com.microsoft.azure.management.appservice.WebAppBase.cloningInfo()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.connectionStrings()
  name: connectionStrings()
  nameWithType: WebAppBase.connectionStrings()
  returns:
    description: <p>the connection strings defined on the web app </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.appservice.ConnectionString?alt=com.microsoft.azure.management.appservice.ConnectionString&text=ConnectionString" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, ConnectionString> connectionStrings()
  uid: com.microsoft.azure.management.appservice.WebAppBase.connectionStrings()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.containerSize()
  name: containerSize()
  nameWithType: WebAppBase.containerSize()
  returns:
    description: <p>size of a function container </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public int containerSize()
  uid: com.microsoft.azure.management.appservice.WebAppBase.containerSize()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.defaultDocuments()
  name: defaultDocuments()
  nameWithType: WebAppBase.defaultDocuments()
  returns:
    description: <p>the default documents </p>
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public List<String> defaultDocuments()
  uid: com.microsoft.azure.management.appservice.WebAppBase.defaultDocuments()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.defaultHostName()
  name: defaultHostName()
  nameWithType: WebAppBase.defaultHostName()
  returns:
    description: <p>default hostname of the web app </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String defaultHostName()
  uid: com.microsoft.azure.management.appservice.WebAppBase.defaultHostName()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.deploy()
  name: deploy()
  nameWithType: WebAppBase.deploy()
  returns:
    description: <p>a stage to create web deployment </p>
    type: <xref href="WebDeployment.DefinitionStages.WithPackageUri?alt=WebDeployment.DefinitionStages.WithPackageUri&text=WebDeployment.DefinitionStages.WithPackageUri" data-throw-if-not-resolved="False"/>
  summary: <p>First step specifying the parameters to make a web deployment (MS Deploy) to the web app. </p>
  syntax: public WebDeployment.DefinitionStages.WithPackageUri deploy()
  uid: com.microsoft.azure.management.appservice.WebAppBase.deploy()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.enabled()
  name: enabled()
  nameWithType: WebAppBase.enabled()
  returns:
    description: <p>true if the site is enabled; otherwise, false </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean enabled()
  uid: com.microsoft.azure.management.appservice.WebAppBase.enabled()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.enabledHostNames()
  name: enabledHostNames()
  nameWithType: WebAppBase.enabledHostNames()
  returns:
    description: <p>host names for the web app that are enabled </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Set<String> enabledHostNames()
  uid: com.microsoft.azure.management.appservice.WebAppBase.enabledHostNames()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.gatewaySiteName()
  name: gatewaySiteName()
  nameWithType: WebAppBase.gatewaySiteName()
  returns:
    description: <p>name of gateway app associated with web app </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String gatewaySiteName()
  uid: com.microsoft.azure.management.appservice.WebAppBase.gatewaySiteName()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.getHostNameBindings()
  name: getHostNameBindings()
  nameWithType: WebAppBase.getHostNameBindings()
  returns:
    description: <p>the mapping from host names and the host name bindings </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.appservice.HostNameBinding?alt=com.microsoft.azure.management.appservice.HostNameBinding&text=HostNameBinding" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, HostNameBinding> getHostNameBindings()
  uid: com.microsoft.azure.management.appservice.WebAppBase.getHostNameBindings()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.getHostNameBindingsAsync()
  name: getHostNameBindingsAsync()
  nameWithType: WebAppBase.getHostNameBindingsAsync()
  returns:
    description: <p>the mapping from host names and the host name bindings </p>
    type: Observable&lt;Map&lt;String, <xref href="com.microsoft.azure.management.appservice.HostNameBinding?alt=com.microsoft.azure.management.appservice.HostNameBinding&text=HostNameBinding" data-throw-if-not-resolved="False"/>&gt;&gt;
  syntax: public Observable<Map<String, HostNameBinding>> getHostNameBindingsAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.getHostNameBindingsAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.getPublishingProfile()
  name: getPublishingProfile()
  nameWithType: WebAppBase.getPublishingProfile()
  returns:
    description: <p>the URL and credentials for publishing through FTP or Git </p>
    type: <xref href="com.microsoft.azure.management.appservice.PublishingProfile?alt=com.microsoft.azure.management.appservice.PublishingProfile&text=PublishingProfile" data-throw-if-not-resolved="False"/>
  syntax: public PublishingProfile getPublishingProfile()
  uid: com.microsoft.azure.management.appservice.WebAppBase.getPublishingProfile()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.getPublishingProfileAsync()
  name: getPublishingProfileAsync()
  nameWithType: WebAppBase.getPublishingProfileAsync()
  returns:
    description: <p>the URL and credentials for publishing through FTP or Git </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.appservice.PublishingProfile?alt=com.microsoft.azure.management.appservice.PublishingProfile&text=PublishingProfile" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<PublishingProfile> getPublishingProfileAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.getPublishingProfileAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.getSourceControl()
  name: getSourceControl()
  nameWithType: WebAppBase.getSourceControl()
  returns:
    description: <p>the source control information for the web app </p>
    type: <xref href="com.microsoft.azure.management.appservice.WebAppSourceControl?alt=com.microsoft.azure.management.appservice.WebAppSourceControl&text=WebAppSourceControl" data-throw-if-not-resolved="False"/>
  syntax: public WebAppSourceControl getSourceControl()
  uid: com.microsoft.azure.management.appservice.WebAppBase.getSourceControl()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.getSourceControlAsync()
  name: getSourceControlAsync()
  nameWithType: WebAppBase.getSourceControlAsync()
  returns:
    description: <p>the source control information for the web app </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.appservice.WebAppSourceControl?alt=com.microsoft.azure.management.appservice.WebAppSourceControl&text=WebAppSourceControl" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<WebAppSourceControl> getSourceControlAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.getSourceControlAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.hostNames()
  name: hostNames()
  nameWithType: WebAppBase.hostNames()
  returns:
    description: <p>hostnames associated with web app </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Set<String> hostNames()
  uid: com.microsoft.azure.management.appservice.WebAppBase.hostNames()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.hostNamesDisabled()
  name: hostNamesDisabled()
  nameWithType: WebAppBase.hostNamesDisabled()
  returns:
    description: <p>if the public hostnames are disabled the web app. If set to true the app is only accessible via API Management process. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hostNamesDisabled()
  uid: com.microsoft.azure.management.appservice.WebAppBase.hostNamesDisabled()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.hostNameSslStates()
  name: hostNameSslStates()
  nameWithType: WebAppBase.hostNameSslStates()
  returns:
    description: <p>list of SSL states used to manage the SSL bindings for site's hostnames </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.appservice.HostNameSslState?alt=com.microsoft.azure.management.appservice.HostNameSslState&text=HostNameSslState" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, HostNameSslState> hostNameSslStates()
  uid: com.microsoft.azure.management.appservice.WebAppBase.hostNameSslStates()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.isDefaultContainer()
  name: isDefaultContainer()
  nameWithType: WebAppBase.isDefaultContainer()
  returns:
    description: <p>site is a default container </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isDefaultContainer()
  uid: com.microsoft.azure.management.appservice.WebAppBase.isDefaultContainer()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.isPremiumApp()
  name: isPremiumApp()
  nameWithType: WebAppBase.isPremiumApp()
  returns:
    description: <p>whether web app is deployed as a premium app </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isPremiumApp()
  uid: com.microsoft.azure.management.appservice.WebAppBase.isPremiumApp()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.javaContainer()
  name: javaContainer()
  nameWithType: WebAppBase.javaContainer()
  returns:
    description: <p>Java container </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String javaContainer()
  uid: com.microsoft.azure.management.appservice.WebAppBase.javaContainer()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.javaContainerVersion()
  name: javaContainerVersion()
  nameWithType: WebAppBase.javaContainerVersion()
  returns:
    description: <p>Java container version </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String javaContainerVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.javaContainerVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.javaVersion()
  name: javaVersion()
  nameWithType: WebAppBase.javaVersion()
  returns:
    description: <p>Java version </p>
    type: <xref href="com.microsoft.azure.management.appservice.JavaVersion?alt=com.microsoft.azure.management.appservice.JavaVersion&text=JavaVersion" data-throw-if-not-resolved="False"/>
  syntax: public JavaVersion javaVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.javaVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.lastModifiedTime()
  name: lastModifiedTime()
  nameWithType: WebAppBase.lastModifiedTime()
  returns:
    description: <p>Last time web app was modified in UTC </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime lastModifiedTime()
  uid: com.microsoft.azure.management.appservice.WebAppBase.lastModifiedTime()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.linuxFxVersion()
  name: linuxFxVersion()
  nameWithType: WebAppBase.linuxFxVersion()
  returns:
    description: <p>the Linux app framework and version if this is a Linux web app. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String linuxFxVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.linuxFxVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.managedPipelineMode()
  name: managedPipelineMode()
  nameWithType: WebAppBase.managedPipelineMode()
  returns:
    description: <p>managed pipeline mode </p>
    type: <xref href="com.microsoft.azure.management.appservice.ManagedPipelineMode?alt=com.microsoft.azure.management.appservice.ManagedPipelineMode&text=ManagedPipelineMode" data-throw-if-not-resolved="False"/>
  syntax: public ManagedPipelineMode managedPipelineMode()
  uid: com.microsoft.azure.management.appservice.WebAppBase.managedPipelineMode()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.microService()
  name: microService()
  nameWithType: WebAppBase.microService()
  returns:
    description: <p>the micro-service name </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String microService()
  uid: com.microsoft.azure.management.appservice.WebAppBase.microService()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.netFrameworkVersion()
  name: netFrameworkVersion()
  nameWithType: WebAppBase.netFrameworkVersion()
  returns:
    description: <p>the .NET Framework version </p>
    type: <xref href="com.microsoft.azure.management.appservice.NetFrameworkVersion?alt=com.microsoft.azure.management.appservice.NetFrameworkVersion&text=NetFrameworkVersion" data-throw-if-not-resolved="False"/>
  syntax: public NetFrameworkVersion netFrameworkVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.netFrameworkVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.nodeVersion()
  name: nodeVersion()
  nameWithType: WebAppBase.nodeVersion()
  returns:
    description: <p>the version of Node.JS </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String nodeVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.nodeVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.operatingSystem()
  name: operatingSystem()
  nameWithType: WebAppBase.operatingSystem()
  returns:
    description: <p>the operating system the web app is running on </p>
    type: <xref href="com.microsoft.azure.management.appservice.OperatingSystem?alt=com.microsoft.azure.management.appservice.OperatingSystem&text=OperatingSystem" data-throw-if-not-resolved="False"/>
  syntax: public OperatingSystem operatingSystem()
  uid: com.microsoft.azure.management.appservice.WebAppBase.operatingSystem()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.outboundIPAddresses()
  name: outboundIPAddresses()
  nameWithType: WebAppBase.outboundIPAddresses()
  returns:
    description: <p>list of IP addresses that this web app uses for outbound connections. Those can be used when configuring firewall rules for databases accessed by this web app. </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Set<String> outboundIPAddresses()
  uid: com.microsoft.azure.management.appservice.WebAppBase.outboundIPAddresses()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.phpVersion()
  name: phpVersion()
  nameWithType: WebAppBase.phpVersion()
  returns:
    description: <p>the version of PHP </p>
    type: <xref href="com.microsoft.azure.management.appservice.PhpVersion?alt=com.microsoft.azure.management.appservice.PhpVersion&text=PhpVersion" data-throw-if-not-resolved="False"/>
  syntax: public PhpVersion phpVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.phpVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.platformArchitecture()
  name: platformArchitecture()
  nameWithType: WebAppBase.platformArchitecture()
  returns:
    description: <p>the architecture of the platform, either 32 bit (x86) or 64 bit (x64). </p>
    type: <xref href="com.microsoft.azure.management.appservice.PlatformArchitecture?alt=com.microsoft.azure.management.appservice.PlatformArchitecture&text=PlatformArchitecture" data-throw-if-not-resolved="False"/>
  syntax: public PlatformArchitecture platformArchitecture()
  uid: com.microsoft.azure.management.appservice.WebAppBase.platformArchitecture()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.pythonVersion()
  name: pythonVersion()
  nameWithType: WebAppBase.pythonVersion()
  returns:
    description: <p>the version of Python </p>
    type: <xref href="com.microsoft.azure.management.appservice.PythonVersion?alt=com.microsoft.azure.management.appservice.PythonVersion&text=PythonVersion" data-throw-if-not-resolved="False"/>
  syntax: public PythonVersion pythonVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.pythonVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.remoteDebuggingEnabled()
  name: remoteDebuggingEnabled()
  nameWithType: WebAppBase.remoteDebuggingEnabled()
  returns:
    description: <p>if the remote eebugging is enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean remoteDebuggingEnabled()
  uid: com.microsoft.azure.management.appservice.WebAppBase.remoteDebuggingEnabled()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.remoteDebuggingVersion()
  name: remoteDebuggingVersion()
  nameWithType: WebAppBase.remoteDebuggingVersion()
  returns:
    description: <p>the remote debugging version </p>
    type: <xref href="com.microsoft.azure.management.appservice.RemoteVisualStudioVersion?alt=com.microsoft.azure.management.appservice.RemoteVisualStudioVersion&text=RemoteVisualStudioVersion" data-throw-if-not-resolved="False"/>
  syntax: public RemoteVisualStudioVersion remoteDebuggingVersion()
  uid: com.microsoft.azure.management.appservice.WebAppBase.remoteDebuggingVersion()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.repositorySiteName()
  name: repositorySiteName()
  nameWithType: WebAppBase.repositorySiteName()
  returns:
    description: <p>name of repository site </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String repositorySiteName()
  uid: com.microsoft.azure.management.appservice.WebAppBase.repositorySiteName()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.resetSlotConfigurations()
  name: resetSlotConfigurations()
  nameWithType: WebAppBase.resetSlotConfigurations()
  summary: <p>Reset the slot to its original configurations. </p>
  syntax: public void resetSlotConfigurations()
  uid: com.microsoft.azure.management.appservice.WebAppBase.resetSlotConfigurations()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.resetSlotConfigurationsAsync()
  name: resetSlotConfigurationsAsync()
  nameWithType: WebAppBase.resetSlotConfigurationsAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Reset the slot to its original configurations. </p>
  syntax: public Completable resetSlotConfigurationsAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.resetSlotConfigurationsAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.restart()
  name: restart()
  nameWithType: WebAppBase.restart()
  summary: <p>Restarts the web app or deployment slot. </p>
  syntax: public void restart()
  uid: com.microsoft.azure.management.appservice.WebAppBase.restart()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.restartAsync()
  name: restartAsync()
  nameWithType: WebAppBase.restartAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Restarts the web app or deployment slot. </p>
  syntax: public Completable restartAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.restartAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.scmSiteAlsoStopped()
  name: scmSiteAlsoStopped()
  nameWithType: WebAppBase.scmSiteAlsoStopped()
  returns:
    description: <p>whether to stop SCM (KUDU) site when the web app is stopped. Default is false. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean scmSiteAlsoStopped()
  uid: com.microsoft.azure.management.appservice.WebAppBase.scmSiteAlsoStopped()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.start()
  name: start()
  nameWithType: WebAppBase.start()
  summary: <p>Starts the web app or deployment slot. </p>
  syntax: public void start()
  uid: com.microsoft.azure.management.appservice.WebAppBase.start()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.startAsync()
  name: startAsync()
  nameWithType: WebAppBase.startAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Starts the web app or deployment slot. </p>
  syntax: public Completable startAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.startAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.state()
  name: state()
  nameWithType: WebAppBase.state()
  returns:
    description: <p>state of the web app </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String state()
  uid: com.microsoft.azure.management.appservice.WebAppBase.state()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.stop()
  name: stop()
  nameWithType: WebAppBase.stop()
  summary: <p>Stops the web app or deployment slot. </p>
  syntax: public void stop()
  uid: com.microsoft.azure.management.appservice.WebAppBase.stop()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.stopAsync()
  name: stopAsync()
  nameWithType: WebAppBase.stopAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Stops the web app or deployment slot. </p>
  syntax: public Completable stopAsync()
  uid: com.microsoft.azure.management.appservice.WebAppBase.stopAsync()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.swap(String slotName)
  name: swap(String slotName)
  nameWithType: WebAppBase.swap(String slotName)
  parameters:
  - description: <p>the target slot to swap with. Use 'production' for the production slot. </p>
    name: slotName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Swaps the app running in the current web app / slot with the app running in the specified slot. </p>
  syntax: public void swap(String slotName)
  uid: com.microsoft.azure.management.appservice.WebAppBase.swap(String)
- fullName: com.microsoft.azure.management.appservice.WebAppBase.swapAsync(String slotName)
  name: swapAsync(String slotName)
  nameWithType: WebAppBase.swapAsync(String slotName)
  parameters:
  - description: <p>the target slot to swap with. Use 'production' for the production slot. </p>
    name: slotName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Swaps the app running in the current web app / slot with the app running in the specified slot. </p>
  syntax: public Completable swapAsync(String slotName)
  uid: com.microsoft.azure.management.appservice.WebAppBase.swapAsync(String)
- fullName: com.microsoft.azure.management.appservice.WebAppBase.targetSwapSlot()
  name: targetSwapSlot()
  nameWithType: WebAppBase.targetSwapSlot()
  returns:
    description: <p>which slot this app will swap into </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String targetSwapSlot()
  uid: com.microsoft.azure.management.appservice.WebAppBase.targetSwapSlot()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.trafficManagerHostNames()
  name: trafficManagerHostNames()
  nameWithType: WebAppBase.trafficManagerHostNames()
  returns:
    description: <p>list of Azure Traffic manager host names associated with web app </p>
    type: <xref href="Set%3CString%3E?alt=Set%3CString%3E&text=Set%3CString%3E" data-throw-if-not-resolved="False"/>
  syntax: public Set<String> trafficManagerHostNames()
  uid: com.microsoft.azure.management.appservice.WebAppBase.trafficManagerHostNames()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.usageState()
  name: usageState()
  nameWithType: WebAppBase.usageState()
  returns:
    description: <p>state indicating whether web app has exceeded its quota usage </p>
    type: <xref href="com.microsoft.azure.management.appservice.UsageState?alt=com.microsoft.azure.management.appservice.UsageState&text=UsageState" data-throw-if-not-resolved="False"/>
  syntax: public UsageState usageState()
  uid: com.microsoft.azure.management.appservice.WebAppBase.usageState()
- fullName: com.microsoft.azure.management.appservice.WebAppBase.verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  name: verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  nameWithType: WebAppBase.verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  parameters:
  - description: <p>the name of the certificate order </p>
    name: certificateOrderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the domain verification token for the certificate order </p>
    name: domainVerificationToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies the ownership of the domain for a certificate order by verifying a hostname of the domain is bound to this web app. </p>
  syntax: public void verifyDomainOwnership(String certificateOrderName, String domainVerificationToken)
  uid: com.microsoft.azure.management.appservice.WebAppBase.verifyDomainOwnership(String,String)
- fullName: com.microsoft.azure.management.appservice.WebAppBase.verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  name: verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  nameWithType: WebAppBase.verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  parameters:
  - description: <p>the name of the certificate order </p>
    name: certificateOrderName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the domain verification token for the certificate order </p>
    name: domainVerificationToken
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: <p>Verifies the ownership of the domain for a certificate order by verifying a hostname of the domain is bound to this web app. </p>
  syntax: public Completable verifyDomainOwnershipAsync(String certificateOrderName, String domainVerificationToken)
  uid: com.microsoft.azure.management.appservice.WebAppBase.verifyDomainOwnershipAsync(String,String)
- fullName: com.microsoft.azure.management.appservice.WebAppBase.webSocketsEnabled()
  name: webSocketsEnabled()
  nameWithType: WebAppBase.webSocketsEnabled()
  returns:
    description: <p>if web socket is enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean webSocketsEnabled()
  uid: com.microsoft.azure.management.appservice.WebAppBase.webSocketsEnabled()
nameWithType: WebAppBase
syntax: public interface WebAppBase extends HasName,GroupableResource<AppServiceManager, SiteInner>
type: interface
uid: com.microsoft.azure.management.appservice.WebAppBase
fullName: com.microsoft.azure.management.appservice.WebAppBase
name: WebAppBase
package: com.microsoft.azure.management.appservice
summary: <p>An immutable client-side representation of an Azure Web App or deployment slot. </p>
metadata: {}
