### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.ActivityLogAlertsInner(Retrofit retrofit, MonitorManagementClientImpl client)
  name: ActivityLogAlertsInner(Retrofit retrofit, MonitorManagementClientImpl client)
  nameWithType: ActivityLogAlertsInner.ActivityLogAlertsInner(Retrofit retrofit, MonitorManagementClientImpl client)
  parameters:
  - description: <p>the Retrofit instance built from a Retrofit Builder. </p>
    name: retrofit
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  - description: <p>the instance of the service client containing this operation class. </p>
    name: client
    type: <xref href="com.microsoft.azure.management.monitor.implementation.MonitorManagementClientImpl?alt=com.microsoft.azure.management.monitor.implementation.MonitorManagementClientImpl&text=MonitorManagementClientImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of ActivityLogAlertsInner.</p>

    <p></p>
  syntax: public ActivityLogAlertsInner(Retrofit retrofit, MonitorManagementClientImpl client)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.ActivityLogAlertsInner(Retrofit,MonitorManagementClientImpl)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet?alt=com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet&text=InnerSupportsGet%3CInnerT%3E" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet.getByResourceGroupAsync(String,String,ServiceCallback<InnerT>)
methods:
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdate(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  name: createOrUpdate(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  nameWithType: ActivityLogAlertsInner.createOrUpdate(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The activity log alert to create or use for the update. </p>
    name: activityLogAlert
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ActivityLogAlertResourceInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new activity log alert or update an existing one.</p>

    <p></p>
  syntax: public ActivityLogAlertResourceInner createOrUpdate(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdate(String,String,ActivityLogAlertResourceInner)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  name: createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  nameWithType: ActivityLogAlertsInner.createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The activity log alert to create or use for the update. </p>
    name: activityLogAlert
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ActivityLogAlertResourceInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a new activity log alert or update an existing one.</p>

    <p></p>
  syntax: public Observable<ActivityLogAlertResourceInner> createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdateAsync(String,String,ActivityLogAlertResourceInner)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  name: createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  nameWithType: ActivityLogAlertsInner.createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The activity log alert to create or use for the update. </p>
    name: activityLogAlert
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a new activity log alert or update an existing one.</p>

    <p></p>
  syntax: public ServiceFuture<ActivityLogAlertResourceInner> createOrUpdateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdateAsync(String,String,ActivityLogAlertResourceInner,final ServiceCallback<ActivityLogAlertResourceInner>)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  name: createOrUpdateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  nameWithType: ActivityLogAlertsInner.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The activity log alert to create or use for the update. </p>
    name: activityLogAlert
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ActivityLogAlertResourceInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Create a new activity log alert or update an existing one.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ActivityLogAlertResourceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertResourceInner activityLogAlert)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.createOrUpdateWithServiceResponseAsync(String,String,ActivityLogAlertResourceInner)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.delete(String resourceGroupName, String activityLogAlertName)
  name: delete(String resourceGroupName, String activityLogAlertName)
  nameWithType: ActivityLogAlertsInner.delete(String resourceGroupName, String activityLogAlertName)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete an activity log alert.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String activityLogAlertName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.delete(String,String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.deleteAsync(String resourceGroupName, String activityLogAlertName)
  name: deleteAsync(String resourceGroupName, String activityLogAlertName)
  nameWithType: ActivityLogAlertsInner.deleteAsync(String resourceGroupName, String activityLogAlertName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsDelete.deleteAsync(String,String)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an activity log alert.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String activityLogAlertName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.deleteAsync(String,String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.deleteAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ActivityLogAlertsInner.deleteAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an activity log alert.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.deleteAsync(String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.deleteWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  nameWithType: ActivityLogAlertsInner.deleteWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an activity log alert.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.deleteWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroup(String resourceGroupName, String activityLogAlertName)
  name: getByResourceGroup(String resourceGroupName, String activityLogAlertName)
  nameWithType: ActivityLogAlertsInner.getByResourceGroup(String resourceGroupName, String activityLogAlertName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet.getByResourceGroup(String,String)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ActivityLogAlertResourceInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get an activity log alert.</p>

    <p></p>
  syntax: public ActivityLogAlertResourceInner getByResourceGroup(String resourceGroupName, String activityLogAlertName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroup(String,String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName)
  name: getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName)
  nameWithType: ActivityLogAlertsInner.getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsGet.getByResourceGroupAsync(String,String)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ActivityLogAlertResourceInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get an activity log alert.</p>

    <p></p>
  syntax: public Observable<ActivityLogAlertResourceInner> getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroupAsync(String,String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  name: getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  nameWithType: ActivityLogAlertsInner.getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get an activity log alert.</p>

    <p></p>
  syntax: public ServiceFuture<ActivityLogAlertResourceInner> getByResourceGroupAsync(String resourceGroupName, String activityLogAlertName, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroupAsync(String,String,final ServiceCallback<ActivityLogAlertResourceInner>)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  name: getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  nameWithType: ActivityLogAlertsInner.getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ActivityLogAlertResourceInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get an activity log alert.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ActivityLogAlertResourceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.getByResourceGroupWithServiceResponseAsync(String,String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.list()
  name: list()
  nameWithType: ActivityLogAlertsInner.list()
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.list()
  returns:
    description: <p>the PagedList&lt;ActivityLogAlertResourceInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a subscription.</p>

    <p></p>
  syntax: public PagedList<ActivityLogAlertResourceInner> list()
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.list()
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listAsync()
  name: listAsync()
  nameWithType: ActivityLogAlertsInner.listAsync()
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.listAsync()
  returns:
    description: <p>the observable to the List&lt;ActivityLogAlertResourceInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a subscription.</p>

    <p></p>
  syntax: public Observable<Page<ActivityLogAlertResourceInner>> listAsync()
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listAsync()
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listAsync(final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  name: listAsync(final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  nameWithType: ActivityLogAlertsInner.listAsync(final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a subscription.</p>

    <p></p>
  syntax: public ServiceFuture<List<ActivityLogAlertResourceInner>> listAsync(final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listAsync(final ServiceCallback<List<ActivityLogAlertResourceInner>>)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroup(String resourceGroupName)
  name: listByResourceGroup(String resourceGroupName)
  nameWithType: ActivityLogAlertsInner.listByResourceGroup(String resourceGroupName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.listByResourceGroup(String)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;ActivityLogAlertResourceInner&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a resource group.</p>

    <p></p>
  syntax: public PagedList<ActivityLogAlertResourceInner> listByResourceGroup(String resourceGroupName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroup(String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroupAsync(String resourceGroupName)
  name: listByResourceGroupAsync(String resourceGroupName)
  nameWithType: ActivityLogAlertsInner.listByResourceGroupAsync(String resourceGroupName)
  overridden: com.microsoft.azure.management.resources.fluentcore.collection.InnerSupportsListing.listByResourceGroupAsync(String)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the observable to the List&lt;ActivityLogAlertResourceInner&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a resource group.</p>

    <p></p>
  syntax: public Observable<Page<ActivityLogAlertResourceInner>> listByResourceGroupAsync(String resourceGroupName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroupAsync(String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  name: listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  nameWithType: ActivityLogAlertsInner.listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a resource group.</p>

    <p></p>
  syntax: public ServiceFuture<List<ActivityLogAlertResourceInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<ActivityLogAlertResourceInner>> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroupAsync(String,final ServiceCallback<List<ActivityLogAlertResourceInner>>)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroupWithServiceResponseAsync(String resourceGroupName)
  name: listByResourceGroupWithServiceResponseAsync(String resourceGroupName)
  nameWithType: ActivityLogAlertsInner.listByResourceGroupWithServiceResponseAsync(String resourceGroupName)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the observable to the List&lt;ActivityLogAlertResourceInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a resource group.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<List<ActivityLogAlertResourceInner>>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listByResourceGroupWithServiceResponseAsync(String)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listWithServiceResponseAsync()
  name: listWithServiceResponseAsync()
  nameWithType: ActivityLogAlertsInner.listWithServiceResponseAsync()
  returns:
    description: <p>the observable to the List&lt;ActivityLogAlertResourceInner&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;List&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Get a list of all activity log alerts in a subscription.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<List<ActivityLogAlertResourceInner>>> listWithServiceResponseAsync()
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.listWithServiceResponseAsync()
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.update(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  name: update(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  nameWithType: ActivityLogAlertsInner.update(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: activityLogAlertPatch
    type: <xref href="com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody?alt=com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody&text=ActivityLogAlertPatchBody" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ActivityLogAlertResourceInner object if successful. </p>
    type: <xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates an existing ActivityLogAlertResource's tags. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public ActivityLogAlertResourceInner update(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.update(String,String,ActivityLogAlertPatchBody)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  name: updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  nameWithType: ActivityLogAlertsInner.updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: activityLogAlertPatch
    type: <xref href="com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody?alt=com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody&text=ActivityLogAlertPatchBody" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ActivityLogAlertResourceInner object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates an existing ActivityLogAlertResource's tags. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public Observable<ActivityLogAlertResourceInner> updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.updateAsync(String,String,ActivityLogAlertPatchBody)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  name: updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  nameWithType: ActivityLogAlertsInner.updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: activityLogAlertPatch
    type: <xref href="com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody?alt=com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody&text=ActivityLogAlertPatchBody" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates an existing ActivityLogAlertResource's tags. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public ServiceFuture<ActivityLogAlertResourceInner> updateAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch, final ServiceCallback<ActivityLogAlertResourceInner> serviceCallback)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.updateAsync(String,String,ActivityLogAlertPatchBody,final ServiceCallback<ActivityLogAlertResourceInner>)
- fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.updateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  name: updateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  nameWithType: ActivityLogAlertsInner.updateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  parameters:
  - description: <p>The name of the resource group. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the activity log alert. </p>
    name: activityLogAlertName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to the operation. </p>
    name: activityLogAlertPatch
    type: <xref href="com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody?alt=com.microsoft.azure.management.monitor.ActivityLogAlertPatchBody&text=ActivityLogAlertPatchBody" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ActivityLogAlertResourceInner object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner?alt=com.microsoft.azure.management.monitor.implementation.ActivityLogAlertResourceInner&text=ActivityLogAlertResourceInner" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates an existing ActivityLogAlertResource's tags. To update other fields use the CreateOrUpdate method.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ActivityLogAlertResourceInner>> updateWithServiceResponseAsync(String resourceGroupName, String activityLogAlertName, ActivityLogAlertPatchBody activityLogAlertPatch)
  uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner.updateWithServiceResponseAsync(String,String,ActivityLogAlertPatchBody)
nameWithType: ActivityLogAlertsInner
syntax: public class ActivityLogAlertsInner implements InnerSupportsGet<ActivityLogAlertResourceInner>,InnerSupportsDelete<Void>,InnerSupportsListing<ActivityLogAlertResourceInner>
type: class
uid: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner
fullName: com.microsoft.azure.management.monitor.implementation.ActivityLogAlertsInner
name: ActivityLogAlertsInner
package: com.microsoft.azure.management.monitor.implementation
summary: <p>An instance of this class provides access to all the operations defined in ActivityLogAlerts. </p>
metadata: {}
