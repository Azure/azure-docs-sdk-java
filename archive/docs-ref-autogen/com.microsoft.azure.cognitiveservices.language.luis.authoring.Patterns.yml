### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.addPattern(UUID appId, String versionId, PatternRuleCreateObject pattern)
  name: addPattern(UUID appId, String versionId, PatternRuleCreateObject pattern)
  nameWithType: Patterns.addPattern(UUID appId, String versionId, PatternRuleCreateObject pattern)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The input pattern. </p>
    name: pattern
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject&text=PatternRuleCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PatternRuleInfo object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Adds a pattern to a version of the application.</p>

    <p></p>
  syntax: public PatternRuleInfo addPattern(UUID appId, String versionId, PatternRuleCreateObject pattern)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.addPattern(UUID,String,PatternRuleCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.addPatternAsync(UUID appId, String versionId, PatternRuleCreateObject pattern)
  name: addPatternAsync(UUID appId, String versionId, PatternRuleCreateObject pattern)
  nameWithType: Patterns.addPatternAsync(UUID appId, String versionId, PatternRuleCreateObject pattern)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The input pattern. </p>
    name: pattern
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject&text=PatternRuleCreateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PatternRuleInfo object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a pattern to a version of the application.</p>

    <p></p>
  syntax: public Observable<PatternRuleInfo> addPatternAsync(UUID appId, String versionId, PatternRuleCreateObject pattern)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.addPatternAsync(UUID,String,PatternRuleCreateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.batchAddPatterns(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  name: batchAddPatterns(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  nameWithType: Patterns.batchAddPatterns(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A JSON array containing patterns. </p>
    name: patterns
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject&text=PatternRuleCreateObject" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PatternRuleInfo&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Adds a batch of patterns in a version of the application.</p>

    <p></p>
  syntax: public List<PatternRuleInfo> batchAddPatterns(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.batchAddPatterns(UUID,String,List<PatternRuleCreateObject>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.batchAddPatternsAsync(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  name: batchAddPatternsAsync(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  nameWithType: Patterns.batchAddPatternsAsync(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>A JSON array containing patterns. </p>
    name: patterns
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleCreateObject&text=PatternRuleCreateObject" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PatternRuleInfo&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Adds a batch of patterns in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PatternRuleInfo>> batchAddPatternsAsync(UUID appId, String versionId, List<PatternRuleCreateObject> patterns)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.batchAddPatternsAsync(UUID,String,List<PatternRuleCreateObject>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePattern(UUID appId, String versionId, UUID patternId)
  name: deletePattern(UUID appId, String versionId, UUID patternId)
  nameWithType: Patterns.deletePattern(UUID appId, String versionId, UUID patternId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern ID. </p>
    name: patternId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the pattern with the specified ID from a version of the application..</p>

    <p></p>
  syntax: public OperationStatus deletePattern(UUID appId, String versionId, UUID patternId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePattern(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePatternAsync(UUID appId, String versionId, UUID patternId)
  name: deletePatternAsync(UUID appId, String versionId, UUID patternId)
  nameWithType: Patterns.deletePatternAsync(UUID appId, String versionId, UUID patternId)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern ID. </p>
    name: patternId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes the pattern with the specified ID from a version of the application..</p>

    <p></p>
  syntax: public Observable<OperationStatus> deletePatternAsync(UUID appId, String versionId, UUID patternId)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePatternAsync(UUID,String,UUID)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePatterns(UUID appId, String versionId, List<UUID> patternIds)
  name: deletePatterns(UUID appId, String versionId, List<UUID> patternIds)
  nameWithType: Patterns.deletePatterns(UUID appId, String versionId, List<UUID> patternIds)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The patterns IDs. </p>
    name: patternIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OperationStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a list of patterns in a version of the application.</p>

    <p></p>
  syntax: public OperationStatus deletePatterns(UUID appId, String versionId, List<UUID> patternIds)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePatterns(UUID,String,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePatternsAsync(UUID appId, String versionId, List<UUID> patternIds)
  name: deletePatternsAsync(UUID appId, String versionId, List<UUID> patternIds)
  nameWithType: Patterns.deletePatternsAsync(UUID appId, String versionId, List<UUID> patternIds)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The patterns IDs. </p>
    name: patternIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OperationStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus&text=OperationStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a list of patterns in a version of the application.</p>

    <p></p>
  syntax: public Observable<OperationStatus> deletePatternsAsync(UUID appId, String versionId, List<UUID> patternIds)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.deletePatternsAsync(UUID,String,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listIntentPatterns()
  name: listIntentPatterns()
  nameWithType: Patterns.listIntentPatterns()
  returns:
    description: <p>the first stage of the listIntentPatterns call </p>
    type: <xref href="PatternsListIntentPatternsDefinitionStages.WithAppId?alt=PatternsListIntentPatternsDefinitionStages.WithAppId&text=PatternsListIntentPatternsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns patterns for the specific intent in a version of the application.</p>

    <p></p>
  syntax: public PatternsListIntentPatternsDefinitionStages.WithAppId listIntentPatterns()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listIntentPatterns()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listIntentPatterns(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  name: listIntentPatterns(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  nameWithType: Patterns.listIntentPatterns(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listIntentPatternsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentPatternsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentPatternsOptionalParameter&text=ListIntentPatternsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PatternRuleInfo&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns patterns for the specific intent in a version of the application.</p>

    <p></p>
  syntax: public List<PatternRuleInfo> listIntentPatterns(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listIntentPatterns(UUID,String,UUID,ListIntentPatternsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listIntentPatternsAsync(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  name: listIntentPatternsAsync(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  nameWithType: Patterns.listIntentPatternsAsync(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The intent classifier ID. </p>
    name: intentId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listIntentPatternsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentPatternsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentPatternsOptionalParameter&text=ListIntentPatternsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PatternRuleInfo&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Returns patterns for the specific intent in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PatternRuleInfo>> listIntentPatternsAsync(UUID appId, String versionId, UUID intentId, ListIntentPatternsOptionalParameter listIntentPatternsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listIntentPatternsAsync(UUID,String,UUID,ListIntentPatternsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listPatterns()
  name: listPatterns()
  nameWithType: Patterns.listPatterns()
  returns:
    description: <p>the first stage of the listPatterns call </p>
    type: <xref href="PatternsListPatternsDefinitionStages.WithAppId?alt=PatternsListPatternsDefinitionStages.WithAppId&text=PatternsListPatternsDefinitionStages.WithAppId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets patterns in a version of the application.</p>

    <p></p>
  syntax: public PatternsListPatternsDefinitionStages.WithAppId listPatterns()
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listPatterns()
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listPatterns(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  name: listPatterns(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  nameWithType: Patterns.listPatterns(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listPatternsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternsOptionalParameter&text=ListPatternsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PatternRuleInfo&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets patterns in a version of the application.</p>

    <p></p>
  syntax: public List<PatternRuleInfo> listPatterns(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listPatterns(UUID,String,ListPatternsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listPatternsAsync(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  name: listPatternsAsync(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  nameWithType: Patterns.listPatternsAsync(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listPatternsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPatternsOptionalParameter&text=ListPatternsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PatternRuleInfo&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets patterns in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PatternRuleInfo>> listPatternsAsync(UUID appId, String versionId, ListPatternsOptionalParameter listPatternsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.listPatternsAsync(UUID,String,ListPatternsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePattern(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  name: updatePattern(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  nameWithType: Patterns.updatePattern(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern ID. </p>
    name: patternId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object representing a pattern. </p>
    name: pattern
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject&text=PatternRuleUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PatternRuleInfo object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a pattern in a version of the application.</p>

    <p></p>
  syntax: public PatternRuleInfo updatePattern(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePattern(UUID,String,UUID,PatternRuleUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePatternAsync(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  name: updatePatternAsync(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  nameWithType: Patterns.updatePatternAsync(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern ID. </p>
    name: patternId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>An object representing a pattern. </p>
    name: pattern
    type: <xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject&text=PatternRuleUpdateObject" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PatternRuleInfo object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a pattern in a version of the application.</p>

    <p></p>
  syntax: public Observable<PatternRuleInfo> updatePatternAsync(UUID appId, String versionId, UUID patternId, PatternRuleUpdateObject pattern)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePatternAsync(UUID,String,UUID,PatternRuleUpdateObject)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePatterns(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  name: updatePatterns(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  nameWithType: Patterns.updatePatterns(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An array represents the patterns. </p>
    name: patterns
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject&text=PatternRuleUpdateObject" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="ErrorResponseException?alt=ErrorResponseException&text=ErrorResponseException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PatternRuleInfo&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates patterns in a version of the application.</p>

    <p></p>
  syntax: public List<PatternRuleInfo> updatePatterns(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePatterns(UUID,String,List<PatternRuleUpdateObject>)
- fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePatternsAsync(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  name: updatePatternsAsync(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  nameWithType: Patterns.updatePatternsAsync(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  parameters:
  - description: <p>The application ID. </p>
    name: appId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The version ID. </p>
    name: versionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>An array represents the patterns. </p>
    name: patterns
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleUpdateObject&text=PatternRuleUpdateObject" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PatternRuleInfo&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo?alt=com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternRuleInfo&text=PatternRuleInfo" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates patterns in a version of the application.</p>

    <p></p>
  syntax: public Observable<List<PatternRuleInfo>> updatePatternsAsync(UUID appId, String versionId, List<PatternRuleUpdateObject> patterns)
  uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns.updatePatternsAsync(UUID,String,List<PatternRuleUpdateObject>)
nameWithType: Patterns
syntax: public interface Patterns
type: interface
uid: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns
fullName: com.microsoft.azure.cognitiveservices.language.luis.authoring.Patterns
name: Patterns
package: com.microsoft.azure.cognitiveservices.language.luis.authoring
summary: <p>An instance of this class provides access to all the operations defined in Patterns. </p>
metadata: {}
