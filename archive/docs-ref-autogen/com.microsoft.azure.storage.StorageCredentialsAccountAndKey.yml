### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.StorageCredentialsAccountAndKey(final String accountName, final byte[] key)
  name: StorageCredentialsAccountAndKey(final String accountName, final byte[] key)
  nameWithType: StorageCredentialsAccountAndKey.StorageCredentialsAccountAndKey(final String accountName, final byte[] key)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the storage account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An array of bytes that represent the account access key. </p>
    name: key
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class, using the specified storage account name and access key; the specified access key is in the form of a byte array.</p>

    <p></p>
  syntax: public StorageCredentialsAccountAndKey(final String accountName, final byte[] key)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.StorageCredentialsAccountAndKey(final String,final byte [])
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.StorageCredentialsAccountAndKey(final String accountName, final String key)
  name: StorageCredentialsAccountAndKey(final String accountName, final String key)
  nameWithType: StorageCredentialsAccountAndKey.StorageCredentialsAccountAndKey(final String accountName, final String key)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the storage account. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the Base-64-encoded account access key. </p>
    name: key
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class, using the specified storage account name and access key; the specified access key is stored as a .</p>

    <p></p>
  syntax: public StorageCredentialsAccountAndKey(final String accountName, final String key)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.StorageCredentialsAccountAndKey(final String,final String)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.StorageCredentials?alt=com.microsoft.azure.storage.StorageCredentials&text=StorageCredentials" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.storage.StorageCredentials.isHttpsOnly()
- com.microsoft.azure.storage.StorageCredentials.setHttpsOnly(boolean)
- com.microsoft.azure.storage.StorageCredentials.transformUri(final URI)
- com.microsoft.azure.storage.StorageCredentials.transformUri(StorageUri)
- com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final Map<String, String>)
- com.microsoft.azure.storage.StorageCredentials.tryParseCredentials(final String)
methods:
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.exportBase64EncodedKey()
  name: exportBase64EncodedKey()
  nameWithType: StorageCredentialsAccountAndKey.exportBase64EncodedKey()
  returns:
    description: <p>A <code>String</code> that represents the Base64-encoded access key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports the value of the access key to a Base64-encoded string.</p>

    <p></p>
  syntax: public String exportBase64EncodedKey()
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.exportBase64EncodedKey()
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.exportKey()
  name: exportKey()
  nameWithType: StorageCredentialsAccountAndKey.exportKey()
  returns:
    description: <p>A byte array that represents the access key. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports the value of the access key to an array of bytes.</p>

    <p></p>
  syntax: public byte [] exportKey()
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.exportKey()
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.getAccountName()
  name: getAccountName()
  nameWithType: StorageCredentialsAccountAndKey.getAccountName()
  returns:
    description: <p>A <code>String</code> that contains the account name. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the account name.</p>

    <p></p>
  syntax: public String getAccountName()
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.getAccountName()
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.getHmac256()
  name: getHmac256()
  nameWithType: StorageCredentialsAccountAndKey.getHmac256()
  exceptions:
  - type: <xref href="InvalidKeyException?alt=InvalidKeyException&text=InvalidKeyException" data-throw-if-not-resolved="False"/>
    description: <p>If the key is not a valid storage key. </p>
  returns:
    description: <p>A <code>MAC</code> created with the account key.</p>
    type: <xref href="synchronized+Mac?alt=synchronized+Mac&text=synchronized+Mac" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the HmacSha256 associated with the account key.</p>

    <p></p>
  syntax: public synchronized Mac getHmac256()
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.getHmac256()
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.setAccountName(String accountName)
  name: setAccountName(String accountName)
  nameWithType: StorageCredentialsAccountAndKey.setAccountName(String accountName)
  parameters:
  - description: <p>A <code>String</code> that contains the account name. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the account name.</p>

    <p></p>
  syntax: public void setAccountName(String accountName)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.setAccountName(String)
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.toString(final boolean exportSecrets)
  name: toString(final boolean exportSecrets)
  nameWithType: StorageCredentialsAccountAndKey.toString(final boolean exportSecrets)
  parameters:
  - description: >-
      <p>

        <code>true</code> to include sensitive data in the return string; otherwise, <code>false</code>.</p>
    name: exportSecrets
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents this object, optionally including sensitive data. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  that represents this instance, optionally including sensitive data.</p>

    <p></p>
  syntax: public String toString(final boolean exportSecrets)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.toString(final boolean)
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.transformUri(StorageUri resourceUri, OperationContext opContext)
  name: transformUri(StorageUri resourceUri, OperationContext opContext)
  nameWithType: StorageCredentialsAccountAndKey.transformUri(StorageUri resourceUri, OperationContext opContext)
  parameters:
  - name: resourceUri
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  - name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="com.microsoft.azure.storage.StorageUri?alt=com.microsoft.azure.storage.StorageUri&text=StorageUri" data-throw-if-not-resolved="False"/>
  syntax: public StorageUri transformUri(StorageUri resourceUri, OperationContext opContext)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.transformUri(StorageUri,OperationContext)
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.transformUri(URI resourceUri, OperationContext opContext)
  name: transformUri(URI resourceUri, OperationContext opContext)
  nameWithType: StorageCredentialsAccountAndKey.transformUri(URI resourceUri, OperationContext opContext)
  parameters:
  - name: resourceUri
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  - name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="URI?alt=URI&text=URI" data-throw-if-not-resolved="False"/>
  syntax: public URI transformUri(URI resourceUri, OperationContext opContext)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.transformUri(URI,OperationContext)
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.updateKey(final byte[] key)
  name: updateKey(final byte[] key)
  nameWithType: StorageCredentialsAccountAndKey.updateKey(final byte[] key)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the access key to be used when signing the request. </p>
    name: key
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the name of the access key to be used when signing the request.</p>

    <p></p>
  syntax: public synchronized void updateKey(final byte[] key)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.updateKey(final byte [])
- fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.updateKey(final String key)
  name: updateKey(final String key)
  nameWithType: StorageCredentialsAccountAndKey.updateKey(final String key)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the access key to be used when signing the request. </p>
    name: key
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the name of the access key to be used when signing the request.</p>

    <p></p>
  syntax: public synchronized void updateKey(final String key)
  uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey.updateKey(final String)
nameWithType: StorageCredentialsAccountAndKey
syntax: public class StorageCredentialsAccountAndKey extends StorageCredentials
type: class
uid: com.microsoft.azure.storage.StorageCredentialsAccountAndKey
fullName: com.microsoft.azure.storage.StorageCredentialsAccountAndKey
name: StorageCredentialsAccountAndKey
package: com.microsoft.azure.storage
summary: <p>Represents storage account credentials, based on storage account and access key, for accessing the Microsoft Azure storage services. </p>
metadata: {}
