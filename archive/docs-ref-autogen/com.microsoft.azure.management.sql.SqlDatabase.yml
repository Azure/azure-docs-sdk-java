### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.arm.models.ExternalChildResource.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasParent.parent()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
methods:
- fullName: com.microsoft.azure.management.sql.SqlDatabase.asWarehouse()
  name: asWarehouse()
  nameWithType: SqlDatabase.asWarehouse()
  returns:
    description: <p>SqlWarehouse instance for more operations </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlWarehouse?alt=com.microsoft.azure.management.sql.SqlWarehouse&text=SqlWarehouse" data-throw-if-not-resolved="False"/>
  syntax: public SqlWarehouse asWarehouse()
  uid: com.microsoft.azure.management.sql.SqlDatabase.asWarehouse()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.collation()
  name: collation()
  nameWithType: SqlDatabase.collation()
  returns:
    description: <p>the collation of the Azure SQL Database </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String collation()
  uid: com.microsoft.azure.management.sql.SqlDatabase.collation()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.creationDate()
  name: creationDate()
  nameWithType: SqlDatabase.creationDate()
  returns:
    description: <p>the creation date of the Azure SQL Database </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime creationDate()
  uid: com.microsoft.azure.management.sql.SqlDatabase.creationDate()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.currentServiceObjectiveId()
  name: currentServiceObjectiveId()
  nameWithType: SqlDatabase.currentServiceObjectiveId()
  returns:
    description: <p>the current Service Level Objective Id of the Azure SQL Database, this is the Id of the Service Level Objective that is currently active </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public UUID currentServiceObjectiveId()
  uid: com.microsoft.azure.management.sql.SqlDatabase.currentServiceObjectiveId()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.databaseId()
  name: databaseId()
  nameWithType: SqlDatabase.databaseId()
  returns:
    description: <p>the Id of the Azure SQL Database </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String databaseId()
  uid: com.microsoft.azure.management.sql.SqlDatabase.databaseId()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.defaultSecondaryLocation()
  name: defaultSecondaryLocation()
  nameWithType: SqlDatabase.defaultSecondaryLocation()
  returns:
    description: <p>the defaultSecondaryLocation value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String defaultSecondaryLocation()
  uid: com.microsoft.azure.management.sql.SqlDatabase.defaultSecondaryLocation()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.defineThreatDetectionPolicy(String policyName)
  name: defineThreatDetectionPolicy(String policyName)
  nameWithType: SqlDatabase.defineThreatDetectionPolicy(String policyName)
  parameters:
  - description: <p>the name of the security alert policy </p>
    name: policyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the first stage of the SqlDatabaseThreatDetectionPolicy definition </p>
    type: <xref href="SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank?alt=SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank&text=SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins a definition for a security alert policy.</p>

    <p></p>
  syntax: public SqlDatabaseThreatDetectionPolicy.DefinitionStages.Blank defineThreatDetectionPolicy(String policyName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.defineThreatDetectionPolicy(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.delete()
  name: delete()
  nameWithType: SqlDatabase.delete()
  summary: <p>Deletes the database from the server. </p>
  syntax: public void delete()
  uid: com.microsoft.azure.management.sql.SqlDatabase.delete()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.deleteAsync()
  name: deleteAsync()
  nameWithType: SqlDatabase.deleteAsync()
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the database asynchronously.</p>

    <p></p>
  syntax: public Completable deleteAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.deleteAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.earliestRestoreDate()
  name: earliestRestoreDate()
  nameWithType: SqlDatabase.earliestRestoreDate()
  returns:
    description: <p>the recovery period start date of the Azure SQL Database. This records the start date and time when recovery is available for this Azure SQL Database. </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime earliestRestoreDate()
  uid: com.microsoft.azure.management.sql.SqlDatabase.earliestRestoreDate()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.edition()
  name: edition()
  nameWithType: SqlDatabase.edition()
  returns:
    description: <p>the edition of the Azure SQL Database </p>
    type: <xref href="com.microsoft.azure.management.sql.DatabaseEdition?alt=com.microsoft.azure.management.sql.DatabaseEdition&text=DatabaseEdition" data-throw-if-not-resolved="False"/>
  syntax: public DatabaseEdition edition()
  uid: com.microsoft.azure.management.sql.SqlDatabase.edition()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.elasticPoolName()
  name: elasticPoolName()
  nameWithType: SqlDatabase.elasticPoolName()
  returns:
    description: <p>the elasticPoolName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String elasticPoolName()
  uid: com.microsoft.azure.management.sql.SqlDatabase.elasticPoolName()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)
  name: exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)
  nameWithType: SqlDatabase.exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)
  parameters:
  - description: <p>a storage account to be created as part of this execution flow </p>
    name: storageAccountCreatable
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>the container name within the storage account to use </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the exported database file name </p>
    name: fileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>response object </p>
    type: <xref href="SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports the current database to a new storage account and relative path.</p>

    <p></p>
  syntax: public SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword exportTo(Creatable<StorageAccount> storageAccountCreatable, String containerName, String fileName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.exportTo(Creatable<StorageAccount>,String,String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.exportTo(StorageAccount storageAccount, String containerName, String fileName)
  name: exportTo(StorageAccount storageAccount, String containerName, String fileName)
  nameWithType: SqlDatabase.exportTo(StorageAccount storageAccount, String containerName, String fileName)
  parameters:
  - description: <p>an existing storage account to be used </p>
    name: storageAccount
    type: <xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the container name within the storage account to use </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the exported database file name </p>
    name: fileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>response object </p>
    type: <xref href="SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports the current database to an existing storage account and relative path.</p>

    <p></p>
  syntax: public SqlDatabaseExportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword exportTo(StorageAccount storageAccount, String containerName, String fileName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.exportTo(StorageAccount,String,String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.exportTo(String storageUri)
  name: exportTo(String storageUri)
  nameWithType: SqlDatabase.exportTo(String storageUri)
  parameters:
  - description: <p>the storage URI to use </p>
    name: storageUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>response object </p>
    type: <xref href="SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey?alt=SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey&text=SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Exports the current database to a specified URI path.</p>

    <p></p>
  syntax: public SqlDatabaseExportRequest.DefinitionStages.WithStorageTypeAndKey exportTo(String storageUri)
  uid: com.microsoft.azure.management.sql.SqlDatabase.exportTo(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.getDatabaseAutomaticTuning()
  name: getDatabaseAutomaticTuning()
  nameWithType: SqlDatabase.getDatabaseAutomaticTuning()
  returns:
    description: <p>the SQL database automatic tuning state and options </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabaseAutomaticTuning?alt=com.microsoft.azure.management.sql.SqlDatabaseAutomaticTuning&text=SqlDatabaseAutomaticTuning" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a SQL database automatic tuning state and options.</p>

    <p></p>
  syntax: public SqlDatabaseAutomaticTuning getDatabaseAutomaticTuning()
  uid: com.microsoft.azure.management.sql.SqlDatabase.getDatabaseAutomaticTuning()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.getThreatDetectionPolicy()
  name: getThreatDetectionPolicy()
  nameWithType: SqlDatabase.getThreatDetectionPolicy()
  returns:
    description: <p>the SQL database threat detection policy for the current database </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabaseThreatDetectionPolicy?alt=com.microsoft.azure.management.sql.SqlDatabaseThreatDetectionPolicy&text=SqlDatabaseThreatDetectionPolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a SQL database threat detection policy.</p>

    <p></p>
  syntax: public SqlDatabaseThreatDetectionPolicy getThreatDetectionPolicy()
  uid: com.microsoft.azure.management.sql.SqlDatabase.getThreatDetectionPolicy()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryption()
  name: getTransparentDataEncryption()
  nameWithType: SqlDatabase.getTransparentDataEncryption()
  returns:
    description: <p>an Azure SQL Database Transparent Data Encryption for this database </p>
    type: <xref href="com.microsoft.azure.management.sql.TransparentDataEncryption?alt=com.microsoft.azure.management.sql.TransparentDataEncryption&text=TransparentDataEncryption" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets an Azure SQL Database Transparent Data Encryption for this database.</p>

    <p></p>
  syntax: public TransparentDataEncryption getTransparentDataEncryption()
  uid: com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryption()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryptionAsync()
  name: getTransparentDataEncryptionAsync()
  nameWithType: SqlDatabase.getTransparentDataEncryptionAsync()
  returns:
    description: <p>a representation of the deferred computation of an Azure SQL Database Transparent Data Encryption for this database </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.TransparentDataEncryption?alt=com.microsoft.azure.management.sql.TransparentDataEncryption&text=TransparentDataEncryption" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets an Azure SQL Database Transparent Data Encryption for this database.</p>

    <p></p>
  syntax: public Observable<TransparentDataEncryption> getTransparentDataEncryptionAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.getTransparentDataEncryptionAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.getUpgradeHint()
  name: getUpgradeHint()
  nameWithType: SqlDatabase.getUpgradeHint()
  returns:
    description: <p>the upgradeHint value </p>
    type: <xref href="com.microsoft.azure.management.sql.UpgradeHintInterface?alt=com.microsoft.azure.management.sql.UpgradeHintInterface&text=UpgradeHintInterface" data-throw-if-not-resolved="False"/>
  syntax: public UpgradeHintInterface getUpgradeHint()
  uid: com.microsoft.azure.management.sql.SqlDatabase.getUpgradeHint()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.importBacpac(StorageAccount storageAccount, String containerName, String fileName)
  name: importBacpac(StorageAccount storageAccount, String containerName, String fileName)
  nameWithType: SqlDatabase.importBacpac(StorageAccount storageAccount, String containerName, String fileName)
  parameters:
  - description: <p>an existing storage account to be used </p>
    name: storageAccount
    type: <xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>
  - description: <p>the container name within the storage account to use </p>
    name: containerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the exported database file name </p>
    name: fileName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>response object </p>
    type: <xref href="SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword?alt=SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword&text=SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports into the current database from an existing storage account and relative path; the current database must be empty.</p>

    <p></p>
  syntax: public SqlDatabaseImportRequest.DefinitionStages.WithAuthenticationTypeAndLoginPassword importBacpac(StorageAccount storageAccount, String containerName, String fileName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.importBacpac(StorageAccount,String,String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.importBacpac(String storageUri)
  name: importBacpac(String storageUri)
  nameWithType: SqlDatabase.importBacpac(String storageUri)
  parameters:
  - description: <p>the storage URI to use </p>
    name: storageUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>response object </p>
    type: <xref href="SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey?alt=SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey&text=SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports into the current database from a specified URI path; the current database must be empty.</p>

    <p></p>
  syntax: public SqlDatabaseImportRequest.DefinitionStages.WithStorageTypeAndKey importBacpac(String storageUri)
  uid: com.microsoft.azure.management.sql.SqlDatabase.importBacpac(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.isDataWarehouse()
  name: isDataWarehouse()
  nameWithType: SqlDatabase.isDataWarehouse()
  returns:
    description: <p>true if this Database is SqlWarehouse </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isDataWarehouse()
  uid: com.microsoft.azure.management.sql.SqlDatabase.isDataWarehouse()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitions()
  name: listMetricDefinitions()
  nameWithType: SqlDatabase.listMetricDefinitions()
  returns:
    description: <p>the list of metric definitions for this database </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition?alt=com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition&text=SqlDatabaseMetricDefinition" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<SqlDatabaseMetricDefinition> listMetricDefinitions()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitions()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitionsAsync()
  name: listMetricDefinitionsAsync()
  nameWithType: SqlDatabase.listMetricDefinitionsAsync()
  returns:
    description: <p>a representation of the deferred computation of the metric definitions for this database </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition?alt=com.microsoft.azure.management.sql.SqlDatabaseMetricDefinition&text=SqlDatabaseMetricDefinition" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<SqlDatabaseMetricDefinition> listMetricDefinitionsAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listMetricDefinitionsAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listMetrics(String filter)
  name: listMetrics(String filter)
  nameWithType: SqlDatabase.listMetrics(String filter)
  parameters:
  - description: <p>an OData filter expression that describes a subset of metrics to return. </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the list of metrics for this database </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabaseMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseMetric&text=SqlDatabaseMetric" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<SqlDatabaseMetric> listMetrics(String filter)
  uid: com.microsoft.azure.management.sql.SqlDatabase.listMetrics(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listMetricsAsync(String filter)
  name: listMetricsAsync(String filter)
  nameWithType: SqlDatabase.listMetricsAsync(String filter)
  parameters:
  - description: <p>an OData filter expression that describes a subset of metrics to return. </p>
    name: filter
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of the metrics for this database </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabaseMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseMetric&text=SqlDatabaseMetric" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<SqlDatabaseMetric> listMetricsAsync(String filter)
  uid: com.microsoft.azure.management.sql.SqlDatabase.listMetricsAsync(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinks()
  name: listReplicationLinks()
  nameWithType: SqlDatabase.listReplicationLinks()
  returns:
    description: <p>all the replication links associated with this database </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.sql.ReplicationLink?alt=com.microsoft.azure.management.sql.ReplicationLink&text=ReplicationLink" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, ReplicationLink> listReplicationLinks()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinks()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinksAsync()
  name: listReplicationLinksAsync()
  nameWithType: SqlDatabase.listReplicationLinksAsync()
  returns:
    description: <p>a representation of the deferred computation of all the replication links associated with this database </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.ReplicationLink?alt=com.microsoft.azure.management.sql.ReplicationLink&text=ReplicationLink" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<ReplicationLink> listReplicationLinksAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listReplicationLinksAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listRestorePoints()
  name: listRestorePoints()
  nameWithType: SqlDatabase.listRestorePoints()
  returns:
    description: <p>the list of all restore points on this database </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.RestorePoint?alt=com.microsoft.azure.management.sql.RestorePoint&text=RestorePoint" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<RestorePoint> listRestorePoints()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listRestorePoints()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listRestorePointsAsync()
  name: listRestorePointsAsync()
  nameWithType: SqlDatabase.listRestorePointsAsync()
  returns:
    description: <p>the list of all restore points on this database </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.RestorePoint?alt=com.microsoft.azure.management.sql.RestorePoint&text=RestorePoint" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<RestorePoint> listRestorePointsAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listRestorePointsAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisors()
  name: listServiceTierAdvisors()
  nameWithType: SqlDatabase.listServiceTierAdvisors()
  returns:
    description: <p>information about service tier advisors for the current database </p>
    type: Map&lt;String, <xref href="com.microsoft.azure.management.sql.ServiceTierAdvisor?alt=com.microsoft.azure.management.sql.ServiceTierAdvisor&text=ServiceTierAdvisor" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Map<String, ServiceTierAdvisor> listServiceTierAdvisors()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisors()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisorsAsync()
  name: listServiceTierAdvisorsAsync()
  nameWithType: SqlDatabase.listServiceTierAdvisorsAsync()
  returns:
    description: <p>a representation of the deferred computation of the information about service tier advisors for this database </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.ServiceTierAdvisor?alt=com.microsoft.azure.management.sql.ServiceTierAdvisor&text=ServiceTierAdvisor" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<ServiceTierAdvisor> listServiceTierAdvisorsAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listServiceTierAdvisorsAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listUsageMetrics()
  name: listUsageMetrics()
  nameWithType: SqlDatabase.listUsageMetrics()
  returns:
    description: <p>the SQL database usage metrics </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabaseUsageMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseUsageMetric&text=SqlDatabaseUsageMetric" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the SQL database usage metrics.</p>

    <p></p>
  syntax: public List<SqlDatabaseUsageMetric> listUsageMetrics()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listUsageMetrics()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listUsageMetricsAsync()
  name: listUsageMetricsAsync()
  nameWithType: SqlDatabase.listUsageMetricsAsync()
  returns:
    description: <p>a representation of the deferred computation of this call returning the SQL database usage metrics </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabaseUsageMetric?alt=com.microsoft.azure.management.sql.SqlDatabaseUsageMetric&text=SqlDatabaseUsageMetric" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Asynchronously lists the SQL database usage metrics.</p>

    <p></p>
  syntax: public Observable<SqlDatabaseUsageMetric> listUsageMetricsAsync()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listUsageMetricsAsync()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.listUsages()
  name: listUsages()
  nameWithType: SqlDatabase.listUsages()
  returns:
    description: <p>the list of usages (DatabaseMetrics) of this database </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.DatabaseMetric?alt=com.microsoft.azure.management.sql.DatabaseMetric&text=DatabaseMetric" data-throw-if-not-resolved="False"/>&gt;
  syntax: public List<DatabaseMetric> listUsages()
  uid: com.microsoft.azure.management.sql.SqlDatabase.listUsages()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.maxSizeBytes()
  name: maxSizeBytes()
  nameWithType: SqlDatabase.maxSizeBytes()
  returns:
    description: <p>the max size of the Azure SQL Database expressed in bytes. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  syntax: public long maxSizeBytes()
  uid: com.microsoft.azure.management.sql.SqlDatabase.maxSizeBytes()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.parentId()
  name: parentId()
  nameWithType: SqlDatabase.parentId()
  returns:
    description: <p>the parent SQL server ID </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String parentId()
  uid: com.microsoft.azure.management.sql.SqlDatabase.parentId()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.region()
  name: region()
  nameWithType: SqlDatabase.region()
  returns:
    description: <p>the region the resource is in </p>
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.arm.Region?alt=com.microsoft.azure.management.resources.fluentcore.arm.Region&text=Region" data-throw-if-not-resolved="False"/>
  syntax: public Region region()
  uid: com.microsoft.azure.management.sql.SqlDatabase.region()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.regionName()
  name: regionName()
  nameWithType: SqlDatabase.regionName()
  returns:
    description: <p>the name of the region the resource is in </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String regionName()
  uid: com.microsoft.azure.management.sql.SqlDatabase.regionName()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.rename(String newDatabaseName)
  name: rename(String newDatabaseName)
  nameWithType: SqlDatabase.rename(String newDatabaseName)
  parameters:
  - description: <p>the new name for the database </p>
    name: newDatabaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the renamed SQL database </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Renames the database.</p>

    <p></p>
  syntax: public SqlDatabase rename(String newDatabaseName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.rename(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.renameAsync(String newDatabaseName)
  name: renameAsync(String newDatabaseName)
  nameWithType: SqlDatabase.renameAsync(String newDatabaseName)
  parameters:
  - description: <p>the new name for the database </p>
    name: newDatabaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Renames the database asynchronously.</p>

    <p></p>
  syntax: public Observable<SqlDatabase> renameAsync(String newDatabaseName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.renameAsync(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveId()
  name: requestedServiceObjectiveId()
  nameWithType: SqlDatabase.requestedServiceObjectiveId()
  returns:
    description: <p>the configured Service Level Objective Id of the Azure SQL Database, this is the Service Level Objective that is being applied to the Azure SQL Database </p>
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  syntax: public UUID requestedServiceObjectiveId()
  uid: com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveId()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveName()
  name: requestedServiceObjectiveName()
  nameWithType: SqlDatabase.requestedServiceObjectiveName()
  returns:
    description: <p>the name of the configured Service Level Objective of the Azure SQL Database, this is the Service Level Objective that is being applied to the Azure SQL Database </p>
    type: <xref href="com.microsoft.azure.management.sql.ServiceObjectiveName?alt=com.microsoft.azure.management.sql.ServiceObjectiveName&text=ServiceObjectiveName" data-throw-if-not-resolved="False"/>
  syntax: public ServiceObjectiveName requestedServiceObjectiveName()
  uid: com.microsoft.azure.management.sql.SqlDatabase.requestedServiceObjectiveName()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.serviceLevelObjective()
  name: serviceLevelObjective()
  nameWithType: SqlDatabase.serviceLevelObjective()
  returns:
    description: <p>the Service Level Objective of the Azure SQL Database. </p>
    type: <xref href="com.microsoft.azure.management.sql.ServiceObjectiveName?alt=com.microsoft.azure.management.sql.ServiceObjectiveName&text=ServiceObjectiveName" data-throw-if-not-resolved="False"/>
  syntax: public ServiceObjectiveName serviceLevelObjective()
  uid: com.microsoft.azure.management.sql.SqlDatabase.serviceLevelObjective()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.sqlServerName()
  name: sqlServerName()
  nameWithType: SqlDatabase.sqlServerName()
  returns:
    description: <p>name of the SQL Server to which this database belongs </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String sqlServerName()
  uid: com.microsoft.azure.management.sql.SqlDatabase.sqlServerName()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.status()
  name: status()
  nameWithType: SqlDatabase.status()
  returns:
    description: <p>the status of the Azure SQL Database </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String status()
  uid: com.microsoft.azure.management.sql.SqlDatabase.status()
- fullName: com.microsoft.azure.management.sql.SqlDatabase.syncGroups()
  name: syncGroups()
  nameWithType: SqlDatabase.syncGroups()
  returns:
    description: <p>the SQL Sync Group entry point for the current database </p>
    type: <xref href="SqlSyncGroupOperations.SqlSyncGroupActionsDefinition?alt=SqlSyncGroupOperations.SqlSyncGroupActionsDefinition&text=SqlSyncGroupOperations.SqlSyncGroupActionsDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SqlSyncGroupOperations.SqlSyncGroupActionsDefinition syncGroups()
  uid: com.microsoft.azure.management.sql.SqlDatabase.syncGroups()
nameWithType: SqlDatabase
syntax: public interface SqlDatabase extends IndependentChildResource<SqlServerManager, DatabaseInner>,Refreshable<SqlDatabase>,Updatable<SqlDatabase.Update>,ExternalChildResource<SqlDatabase, SqlServer>,HasInner<DatabaseInner>,HasResourceGroup,Refreshable<SqlDatabase>,Updatable<SqlDatabase.Update>
type: interface
uid: com.microsoft.azure.management.sql.SqlDatabase
fullName: com.microsoft.azure.management.sql.SqlDatabase
name: SqlDatabase
package: com.microsoft.azure.management.sql
summary: >-
  <p>An immutable client-side representation of an Azure SQL Server Database.</p>

  <p>An immutable client-side representation of an Azure SQL Database. </p>
metadata: {}
