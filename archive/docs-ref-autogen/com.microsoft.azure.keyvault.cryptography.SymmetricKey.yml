### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey()
  name: SymmetricKey()
  nameWithType: SymmetricKey.SymmetricKey()
  summary: <p>Creates a SymmetricKey with a random key identifier and a random key with DefaultKeySize bits. </p>
  syntax: public SymmetricKey()
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey()
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String kid)
  name: SymmetricKey(String kid)
  nameWithType: SymmetricKey.SymmetricKey(String kid)
  parameters:
  - description: <p>The key identifier to use. </p>
    name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a SymmetricKey with the specified key identifier and a random key with DefaultKeySize bits. </p>
  syntax: public SymmetricKey(String kid)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String kid, byte[] keyBytes)
  name: SymmetricKey(String kid, byte[] keyBytes)
  nameWithType: SymmetricKey.SymmetricKey(String kid, byte[] keyBytes)
  parameters:
  - description: <p>The key identifier to use. </p>
    name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The key material to use. </p>
    name: keyBytes
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a SymmetricKey with the specified key identifier and key material. </p>
  syntax: public SymmetricKey(String kid, byte[] keyBytes)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String,byte [])
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String kid, byte[] keyBytes, Provider provider)
  name: SymmetricKey(String kid, byte[] keyBytes, Provider provider)
  nameWithType: SymmetricKey.SymmetricKey(String kid, byte[] keyBytes, Provider provider)
  parameters:
  - description: <p>The key identifier to use. </p>
    name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The key material to use. </p>
    name: keyBytes
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The Provider to use (optional, null for default) </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a SymmetricKey with the specified key identifier and key material that uses the specified Provider. </p>
  syntax: public SymmetricKey(String kid, byte[] keyBytes, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String,byte [],Provider)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String kid, int keySizeInBytes)
  name: SymmetricKey(String kid, int keySizeInBytes)
  nameWithType: SymmetricKey.SymmetricKey(String kid, int keySizeInBytes)
  parameters:
  - description: <p>The key identifier to use. </p>
    name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The key size to use in bytes. </p>
    name: keySizeInBytes
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a SymmetricKey with the specified key identifier and a random key with the specified size. </p>
  syntax: public SymmetricKey(String kid, int keySizeInBytes)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String,int)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String kid, int keySizeInBytes, Provider provider)
  name: SymmetricKey(String kid, int keySizeInBytes, Provider provider)
  nameWithType: SymmetricKey.SymmetricKey(String kid, int keySizeInBytes, Provider provider)
  parameters:
  - description: <p>The key identifier to use. </p>
    name: kid
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The key size to use in bytes. </p>
    name: keySizeInBytes
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>The provider to use (optional, null for default) </p>
    name: provider
    type: <xref href="Provider?alt=Provider&text=Provider" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a SymmetricKey with the specified key identifier and a random key with the specified size that uses the specified provider. </p>
  syntax: public SymmetricKey(String kid, int keySizeInBytes, Provider provider)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.SymmetricKey(String,int,Provider)
fields:
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.DefaultKeySize
  name: DefaultKeySize
  nameWithType: SymmetricKey.DefaultKeySize
  syntax: public static final int DefaultKeySize= KeySize256
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.DefaultKeySize
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize128
  name: KeySize128
  nameWithType: SymmetricKey.KeySize128
  syntax: public static final int KeySize128= 128>> 3
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize128
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize192
  name: KeySize192
  nameWithType: SymmetricKey.KeySize192
  syntax: public static final int KeySize192= 192>> 3
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize192
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize256
  name: KeySize256
  nameWithType: SymmetricKey.KeySize256
  syntax: public static final int KeySize256= 256>> 3
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize256
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize384
  name: KeySize384
  nameWithType: SymmetricKey.KeySize384
  syntax: public static final int KeySize384= 384>> 3
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize384
- field:
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize512
  name: KeySize512
  nameWithType: SymmetricKey.KeySize512
  syntax: public static final int KeySize512= 512>> 3
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.KeySize512
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="Closeable" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.keyvault.core.IKey?alt=com.microsoft.azure.keyvault.core.IKey&text=IKey" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.close()
  name: close()
  nameWithType: SymmetricKey.close()
  syntax: public void close()
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.close()
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  name: decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  nameWithType: SymmetricKey.decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.decryptAsync(final byte [],final byte [],final byte [],final byte [],final String)
  parameters:
  - description: <p>The cipher text to decrypt </p>
    name: ciphertext
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector (optional with some algorithms) </p>
    name: iv
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Additional authentication data (optional with some algorithms) </p>
    name: authenticationData
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The authentication tag from the encrypt operation (optional with some algorithms) </p>
    name: authenticationTag
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The encryption algorithm to use, must be supplied </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the plain text </p>
    type: <xref href="ListenableFuture%3Cbyte%5B%5D%3E?alt=ListenableFuture%3Cbyte%5B%5D%3E&text=ListenableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Decrypts the specified cipher text. Note that not all algorithms require, or support, all parameters.</p>

    <p></p>
  syntax: public ListenableFuture<byte[]> decryptAsync(final byte[] ciphertext, final byte[] iv, final byte[] authenticationData, final byte[] authenticationTag, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.decryptAsync(final byte [],final byte [],final byte [],final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  name: encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  nameWithType: SymmetricKey.encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.encryptAsync(final byte [],final byte [],final byte [],final String)
  parameters:
  - description: <p>The plain text to encrypt </p>
    name: plaintext
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The initialization vector (optional with some algorithms) </p>
    name: iv
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Additional authentication data (optional with some algorithms) </p>
    name: authenticationData
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The encryption algorithm to use, defaults to the keys DefaultEncryptionAlgorithm </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the cipher text, the authentication tag and the algorithm that was used </p>
    type: <xref href="ListenableFuture%3CTriple%3Cbyte%5B%5D%2C+byte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CTriple%3Cbyte%5B%5D%2C+byte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CTriple%3Cbyte%5B%5D%2C+byte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Encrypts the specified plain text. Note that not all algorithms require, or support, all parameters.</p>

    <p></p>
  syntax: public ListenableFuture<Triple<byte[], byte[], String>> encryptAsync(final byte[] plaintext, final byte[] iv, final byte[] authenticationData, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.encryptAsync(final byte [],final byte [],final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getDefaultEncryptionAlgorithm()
  name: getDefaultEncryptionAlgorithm()
  nameWithType: SymmetricKey.getDefaultEncryptionAlgorithm()
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultEncryptionAlgorithm()
  returns:
    description: <p>The default encryption algorithm for this key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The default encryption algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>

    <p></p>
  syntax: public String getDefaultEncryptionAlgorithm()
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getDefaultEncryptionAlgorithm()
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getDefaultKeyWrapAlgorithm()
  name: getDefaultKeyWrapAlgorithm()
  nameWithType: SymmetricKey.getDefaultKeyWrapAlgorithm()
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultKeyWrapAlgorithm()
  returns:
    description: <p>The default key wrap algorithm for this key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The default key wrap algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>

    <p></p>
  syntax: public String getDefaultKeyWrapAlgorithm()
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getDefaultKeyWrapAlgorithm()
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getDefaultSignatureAlgorithm()
  name: getDefaultSignatureAlgorithm()
  nameWithType: SymmetricKey.getDefaultSignatureAlgorithm()
  overridden: com.microsoft.azure.keyvault.core.IKey.getDefaultSignatureAlgorithm()
  returns:
    description: <p>The default signature algorithm for this key. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The default signature algorithm for this key, using the representations from Json Web Key Algorithms, RFC7513.</p>

    <p></p>
  syntax: public String getDefaultSignatureAlgorithm()
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getDefaultSignatureAlgorithm()
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getKid()
  name: getKid()
  nameWithType: SymmetricKey.getKid()
  overridden: com.microsoft.azure.keyvault.core.IKey.getKid()
  returns:
    description: <p>The key identifier </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The unique key identifier for this key.</p>

    <p></p>
  syntax: public String getKid()
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.getKid()
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.signAsync(final byte[] digest, final String algorithm)
  name: signAsync(final byte[] digest, final String algorithm)
  nameWithType: SymmetricKey.signAsync(final byte[] digest, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.signAsync(final byte [],final String)
  parameters:
  - description: <p>The digest to sign </p>
    name: digest
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature algorithm to use </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
    type: <xref href="ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Signs the specified digest using the specified algorithm, or the keys DefaultSignatureAlgorithm if no algorithm is specified.</p>

    <p></p>
  syntax: public ListenableFuture<Pair<byte[], String>> signAsync(final byte[] digest, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.signAsync(final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  name: unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  nameWithType: SymmetricKey.unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.unwrapKeyAsync(final byte [],final String)
  parameters:
  - description: <p>The encrypted key to decrypt </p>
    name: encryptedKey
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The algorithm to use, must be supplied </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the unwrapped key </p>
    type: <xref href="ListenableFuture%3Cbyte%5B%5D%3E?alt=ListenableFuture%3Cbyte%5B%5D%3E&text=ListenableFuture%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unwraps (decrypts) the specified encryped key material.</p>

    <p></p>
  syntax: public ListenableFuture<byte[]> unwrapKeyAsync(final byte[] encryptedKey, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.unwrapKeyAsync(final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  name: verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  nameWithType: SymmetricKey.verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.verifyAsync(final byte [],final byte [],final String)
  parameters:
  - description: <p>The digest input </p>
    name: digest
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature to verify </p>
    name: signature
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The algorithm to use, must be provided </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>A ListenableFuture containing the signature and the algorithm used. </p>
    type: <xref href="ListenableFuture%3CBoolean%3E?alt=ListenableFuture%3CBoolean%3E&text=ListenableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Verifies the supplied signature value using the supplied digest and algorithm.</p>

    <p></p>
  syntax: public ListenableFuture<Boolean> verifyAsync(final byte[] digest, final byte[] signature, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.verifyAsync(final byte [],final byte [],final String)
- fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey.wrapKeyAsync(final byte[] key, final String algorithm)
  name: wrapKeyAsync(final byte[] key, final String algorithm)
  nameWithType: SymmetricKey.wrapKeyAsync(final byte[] key, final String algorithm)
  overridden: com.microsoft.azure.keyvault.core.IKey.wrapKeyAsync(final byte [],final String)
  parameters:
  - description: <p>The symmetric key to wrap </p>
    name: key
    type: <xref href="final+byte+%5B%5D?alt=final+byte+%5B%5D&text=final+byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The wrapping algorithm to use, defaults to the keys DefaultKeyWrapAlgorithm </p>
    name: algorithm
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="NoSuchAlgorithmException?alt=NoSuchAlgorithmException&text=NoSuchAlgorithmException" data-throw-if-not-resolved="False"/>
    description: <p>the algorithm is not valid </p>
  returns:
    description: <p>ListenableFuture containing the encrypted key and the algorithm that was used </p>
    type: <xref href="ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E?alt=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E&text=ListenableFuture%3CPair%3Cbyte%5B%5D%2C+String%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Wraps (encrypts) the specified symmetric key material using the specified algorithm, or the keys DefaultKeyWrapAlgorithm if none is specified.</p>

    <p></p>
  syntax: public ListenableFuture<Pair<byte[], String>> wrapKeyAsync(final byte[] key, final String algorithm)
  uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey.wrapKeyAsync(final byte [],final String)
nameWithType: SymmetricKey
syntax: public class SymmetricKey implements IKey
type: class
uid: com.microsoft.azure.keyvault.cryptography.SymmetricKey
fullName: com.microsoft.azure.keyvault.cryptography.SymmetricKey
name: SymmetricKey
package: com.microsoft.azure.keyvault.cryptography
summary: <p>A simple symmetric key implementation </p>
metadata: {}
