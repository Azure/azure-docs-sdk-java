### YamlMime:JavaType
fields:
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.eventhubs.EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  name: DEFAULT_CONSUMER_GROUP_NAME
  nameWithType: EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
  syntax: public String DEFAULT_CONSUMER_GROUP_NAME= "$Default"
  uid: com.microsoft.azure.eventhubs.EventHubClient.DEFAULT_CONSUMER_GROUP_NAME
methods:
- fullName: com.microsoft.azure.eventhubs.EventHubClient.close()
  name: close()
  nameWithType: EventHubClient.close()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> close()
  uid: com.microsoft.azure.eventhubs.EventHubClient.close()
- fullName: com.microsoft.azure.eventhubs.EventHubClient.closeSync()
  name: closeSync()
  nameWithType: EventHubClient.closeSync()
  syntax: public void closeSync()
  uid: com.microsoft.azure.eventhubs.EventHubClient.closeSync()
- fullName: com.microsoft.azure.eventhubs.EventHubClient.create(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  name: create(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  nameWithType: EventHubClient.create(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  parameters:
  - description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false" data-raw-source="ConnectionStringBuilder"></xref> to construct a connectionString. </p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false" data-raw-source="RetryPolicy"></xref> to be used when communicating with EventHub. </p>
    name: retryPolicy
    type: final <xref href="com.microsoft.azure.eventhubs.RetryPolicy?alt=com.microsoft.azure.eventhubs.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ScheduledExecutorService"></xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref>. </p>
    name: executor
    type: <xref href="final+ScheduledExecutorService?alt=final+ScheduledExecutorService&text=final+ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>If Service Bus service encountered problems during connection creation. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the underlying Proton-J layer encounter network errors. </p>
  returns:
    description: <p>CompletableFuture{ &lt;EventHubClient&gt;} which can be used to create Senders and Receivers to EventHub </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.EventHubClient?alt=com.microsoft.azure.eventhubs.EventHubClient&text=EventHubClient" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one EventHubClient instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref> methods.</p>

    <p></p>
  syntax: public static CompletableFuture<EventHubClient> create(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  uid: com.microsoft.azure.eventhubs.EventHubClient.create(final String,final RetryPolicy,final ScheduledExecutorService)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.create(final String connectionString, final ScheduledExecutorService executor)
  name: create(final String connectionString, final ScheduledExecutorService executor)
  nameWithType: EventHubClient.create(final String connectionString, final ScheduledExecutorService executor)
  parameters:
  - description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false" data-raw-source="ConnectionStringBuilder"></xref> to construct a connectionString. </p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ScheduledExecutorService"></xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref>. </p>
    name: executor
    type: <xref href="final+ScheduledExecutorService?alt=final+ScheduledExecutorService&text=final+ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>If Service Bus service encountered problems during connection creation. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the underlying Proton-J layer encounter network errors. </p>
  returns:
    description: <p>CompletableFuture{ &lt;EventHubClient&gt;} which can be used to create Senders and Receivers to EventHub </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.EventHubClient?alt=com.microsoft.azure.eventhubs.EventHubClient&text=EventHubClient" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Factory method to create an instance of <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref> using the supplied connectionString. In a normal scenario (when re-direct is not enabled) - one EventHubClient instance maps to one Connection to the Azure ServiceBus EventHubs service. </p>

    <p>The <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref> created from this method creates a Sender instance internally, which is used by the <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref> methods.</p>

    <p></p>
  syntax: public static CompletableFuture<EventHubClient> create(final String connectionString, final ScheduledExecutorService executor)
  uid: com.microsoft.azure.eventhubs.EventHubClient.create(final String,final ScheduledExecutorService)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createBatch()
  name: createBatch()
  nameWithType: EventHubClient.createBatch()
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if the Microsoft Azure Event Hubs service encountered problems during the operation. </p>
  returns:
    description: <p>the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>, after negotiating maximum message size with EventHubs service </p>
    type: default <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(EventDataBatch)"></xref>.</p>

    <p></p>
  syntax: public default EventDataBatch createBatch()
  uid: com.microsoft.azure.eventhubs.EventHubClient.createBatch()
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions options)
  name: createBatch(BatchOptions options)
  nameWithType: EventHubClient.createBatch(BatchOptions options)
  parameters:
  - description: <p>see <xref uid="com.microsoft.azure.eventhubs.BatchOptions" data-throw-if-not-resolved="false" data-raw-source="BatchOptions"></xref> for more details </p>
    name: options
    type: <xref href="com.microsoft.azure.eventhubs.BatchOptions?alt=com.microsoft.azure.eventhubs.BatchOptions&text=BatchOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if the Microsoft Azure Event Hubs service encountered problems during the operation. </p>
  returns:
    description: <p>the empty <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>, after negotiating maximum message size with EventHubs service </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an Empty Collection of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. The same partitionKey must be used while sending these events using <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="EventHubClient#send(EventDataBatch)"></xref>.</p>

    <p></p>
  syntax: public EventDataBatch createBatch(BatchOptions options)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createBatch(BatchOptions)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  nameWithType: EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  - description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    name: epoch
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>a CompletableFuture that would result in a PartitionReceiver when it is completed. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <ul><li><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></li><li><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></li><li><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver. </p></li></ul></p>

    <p></p>
  syntax: public CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String,final String,final EventPosition,final long)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  name: createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  - description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    name: epoch
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>the set of options to enable on the event hubs receiver </p>
    name: receiverOptions
    type: final <xref href="com.microsoft.azure.eventhubs.ReceiverOptions?alt=com.microsoft.azure.eventhubs.ReceiverOptions&text=ReceiverOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>a CompletableFuture that would result in a PartitionReceiver when it is completed. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a Epoch based EventHub receiver with given partition id and start receiving from the beginning of the partition stream. The receiver is created for a specific EventHub Partition from the specific consumer group. </p>

    <p>It is important to pay attention to the following when creating epoch based receiver: <ul><li><p>Ownership enforcement - Once you created an epoch based receiver, you cannot create a non-epoch receiver to the same consumerGroup-Partition combo until all receivers to the combo are closed. </p></li><li><p>Ownership stealing - If a receiver with higher epoch value is created for a consumerGroup-Partition combo, any older epoch receiver to that combo will be force closed. </p></li><li><p>Any receiver closed due to lost of ownership to a consumerGroup-Partition combo will get ReceiverDisconnectedException for all operations from that receiver. </p></li></ul></p>

    <p></p>
  syntax: public CompletableFuture<PartitionReceiver> createEpochReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String,final String,final EventPosition,final long,final ReceiverOptions)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  name: createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  nameWithType: EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  - description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    name: epoch
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>
    type: default <xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String,final String,final EventPosition,final long)" data-throw-if-not-resolved="false" data-raw-source="createEpochReceiver(String, String, EventPosition, long)"></xref>.</p>

    <p></p>
  syntax: public default PartitionReceiver createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(final String,final String,final EventPosition,final long)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  name: createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  - description: <p>an unique identifier (epoch value) that the service uses, to enforce partition/lease ownership. </p>
    name: epoch
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>the set of options to enable on the event hubs receiver </p>
    name: receiverOptions
    type: final <xref href="com.microsoft.azure.eventhubs.ReceiverOptions?alt=com.microsoft.azure.eventhubs.ReceiverOptions&text=ReceiverOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>
    type: default <xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiver(final String,final String,final EventPosition,final long)" data-throw-if-not-resolved="false" data-raw-source="createEpochReceiver(String, String, EventPosition, long)"></xref>.</p>

    <p></p>
  syntax: public default PartitionReceiver createEpochReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final long epoch, final ReceiverOptions receiverOptions)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createEpochReceiverSync(final String,final String,final EventPosition,final long,final ReceiverOptions)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(final String partitionId)
  name: createPartitionSender(final String partitionId)
  nameWithType: EventHubClient.createPartitionSender(final String partitionId)
  parameters:
  - description: <p>partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s to </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during connection creation. </p>
  returns:
    description: <p>a CompletableFuture that would result in a PartitionSenderImpl when it is completed. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.PartitionSender?alt=com.microsoft.azure.eventhubs.PartitionSender&text=PartitionSender" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a <xref uid="com.microsoft.azure.eventhubs.PartitionSender" data-throw-if-not-resolved="false" data-raw-source="PartitionSender"></xref> which can publish <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s directly to a specific EventHub partition (sender type iii. in the below list). </p>

    <p>There are 3 patterns/ways to send to EventHubs: <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable)"></xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false" data-raw-source="send(EventData, String)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable, String)"></xref>

    iii. <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventData)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(Iterable)"></xref></pre></p>

    <p></p>
  syntax: public CompletableFuture<PartitionSender> createPartitionSender(final String partitionId)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(final String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync(final String partitionId)
  name: createPartitionSenderSync(final String partitionId)
  nameWithType: EventHubClient.createPartitionSenderSync(final String partitionId)
  parameters:
  - description: <p>partitionId of EventHub to send the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s to </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during connection creation. </p>
  returns:
    description: <p>PartitionSenderImpl which can be used to send events to a specific partition. </p>
    type: default <xref href="com.microsoft.azure.eventhubs.PartitionSender?alt=com.microsoft.azure.eventhubs.PartitionSender&text=PartitionSender" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createPartitionSender(final String)" data-throw-if-not-resolved="false" data-raw-source="createPartitionSender(String)"></xref>.</p>

    <p></p>
  syntax: public default PartitionSender createPartitionSenderSync(final String partitionId)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createPartitionSenderSync(final String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>a CompletableFuture that would result in a PartitionReceiver instance when it is completed. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax: public CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String,final String,final EventPosition)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  name: createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  - description: <p>the set of options to enable on the event hubs receiver </p>
    name: receiverOptions
    type: final <xref href="com.microsoft.azure.eventhubs.ReceiverOptions?alt=com.microsoft.azure.eventhubs.ReceiverOptions&text=ReceiverOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>a CompletableFuture that would result in a PartitionReceiver instance when it is completed. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create the EventHub receiver with given partition id and start receiving from the specified starting offset. The receiver is created for a specific EventHub Partition from the specific consumer group.</p>

    <p></p>
  syntax: public CompletableFuture<PartitionReceiver> createReceiver(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String,final String,final EventPosition,final ReceiverOptions)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  name: createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  nameWithType: EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>
    type: default <xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String,final String,final EventPosition)" data-throw-if-not-resolved="false" data-raw-source="createReceiver(String, String, EventPosition)"></xref>.</p>

    <p></p>
  syntax: public default PartitionReceiver createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(final String,final String,final EventPosition)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  name: createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  nameWithType: EventHubClient.createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  parameters:
  - description: <p>the consumer group name that this receiver should be grouped under. </p>
    name: consumerGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the partition Id that the receiver belongs to. All data received will be from this partition only. </p>
    name: partitionId
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the position to start receiving the events from. See <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref></p>
    name: eventPosition
    type: final <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  - description: <p>the set of options to enable on the event hubs receiver </p>
    name: receiverOptions
    type: final <xref href="com.microsoft.azure.eventhubs.ReceiverOptions?alt=com.microsoft.azure.eventhubs.ReceiverOptions&text=ReceiverOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    description: <p>PartitionReceiver instance which can be used for receiving <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>
    type: default <xref href="com.microsoft.azure.eventhubs.PartitionReceiver?alt=com.microsoft.azure.eventhubs.PartitionReceiver&text=PartitionReceiver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.createReceiver(final String,final String,final EventPosition)" data-throw-if-not-resolved="false" data-raw-source="createReceiver(String, String, EventPosition)"></xref>.</p>

    <p></p>
  syntax: public default PartitionReceiver createReceiverSync(final String consumerGroupName, final String partitionId, final EventPosition eventPosition, final ReceiverOptions receiverOptions)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createReceiverSync(final String,final String,final EventPosition,final ReceiverOptions)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createSync(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  name: createSync(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  nameWithType: EventHubClient.createSync(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  parameters:
  - description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false" data-raw-source="ConnectionStringBuilder"></xref> to construct a connectionString. </p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A custom <xref uid="com.microsoft.azure.eventhubs.RetryPolicy" data-throw-if-not-resolved="false" data-raw-source="RetryPolicy"></xref> to be used when communicating with EventHub. </p>
    name: retryPolicy
    type: final <xref href="com.microsoft.azure.eventhubs.RetryPolicy?alt=com.microsoft.azure.eventhubs.RetryPolicy&text=RetryPolicy" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ScheduledExecutorService"></xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref>. </p>
    name: executor
    type: <xref href="final+ScheduledExecutorService?alt=final+ScheduledExecutorService&text=final+ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>If Service Bus service encountered problems during connection creation. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the underlying Proton-J layer encounter network errors. </p>
  returns:
    description: <p>EventHubClient which can be used to create Senders and Receivers to EventHub </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventHubClient?alt=com.microsoft.azure.eventhubs.EventHubClient&text=EventHubClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.create(final String,final ScheduledExecutorService)" data-throw-if-not-resolved="false" data-raw-source="create(String, ScheduledExecutorService)"></xref>.</p>

    <p></p>
  syntax: public static EventHubClient createSync(final String connectionString, final RetryPolicy retryPolicy, final ScheduledExecutorService executor)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createSync(final String,final RetryPolicy,final ScheduledExecutorService)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.createSync(final String connectionString, final ScheduledExecutorService executor)
  name: createSync(final String connectionString, final ScheduledExecutorService executor)
  nameWithType: EventHubClient.createSync(final String connectionString, final ScheduledExecutorService executor)
  parameters:
  - description: <p>The connection string to be used. See <xref uid="com.microsoft.azure.eventhubs.ConnectionStringBuilder" data-throw-if-not-resolved="false" data-raw-source="ConnectionStringBuilder"></xref> to construct a connectionString. </p>
    name: connectionString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ScheduledExecutorService"></xref> to run all tasks performed by <xref uid="com.microsoft.azure.eventhubs.EventHubClient" data-throw-if-not-resolved="false" data-raw-source="EventHubClient"></xref>. </p>
    name: executor
    type: <xref href="final+ScheduledExecutorService?alt=final+ScheduledExecutorService&text=final+ScheduledExecutorService" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>If Service Bus service encountered problems during connection creation. </p>
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If the underlying Proton-J layer encounter network errors. </p>
  returns:
    description: <p>EventHubClient which can be used to create Senders and Receivers to EventHub </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventHubClient?alt=com.microsoft.azure.eventhubs.EventHubClient&text=EventHubClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.create(final String,final ScheduledExecutorService)" data-throw-if-not-resolved="false" data-raw-source="create(String, ScheduledExecutorService)"></xref>.</p>

    <p></p>
  syntax: public static EventHubClient createSync(final String connectionString, final ScheduledExecutorService executor)
  uid: com.microsoft.azure.eventhubs.EventHubClient.createSync(final String,final ScheduledExecutorService)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName()
  name: getEventHubName()
  nameWithType: EventHubClient.getEventHubName()
  returns:
    description: <p>the name of the Event Hub this client is connected to. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getEventHubName()
  uid: com.microsoft.azure.eventhubs.EventHubClient.getEventHubName()
- fullName: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(String partitionId)
  name: getPartitionRuntimeInformation(String partitionId)
  nameWithType: EventHubClient.getPartitionRuntimeInformation(String partitionId)
  parameters:
  - description: <p>Partition to get information about. Must be one of the partition ids returned by <xref uid="com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()" data-throw-if-not-resolved="false" data-raw-source="getRuntimeInformation"></xref>. </p>
    name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>CompletableFuture which returns an PartitionRuntimeInformation on success, or null on timeout. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.PartitionRuntimeInformation?alt=com.microsoft.azure.eventhubs.PartitionRuntimeInformation&text=PartitionRuntimeInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves dynamic information about a partition of an event hub (see <xref uid="com.microsoft.azure.eventhubs.PartitionRuntimeInformation" data-throw-if-not-resolved="false" data-raw-source="PartitionRuntimeInformation"></xref> for details. Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax: public CompletableFuture<PartitionRuntimeInformation> getPartitionRuntimeInformation(String partitionId)
  uid: com.microsoft.azure.eventhubs.EventHubClient.getPartitionRuntimeInformation(String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()
  name: getRuntimeInformation()
  nameWithType: EventHubClient.getRuntimeInformation()
  returns:
    description: <p>CompletableFuture which returns an EventHubRuntimeInformation on success, or null on timeout. </p>
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventhubs.EventHubRuntimeInformation?alt=com.microsoft.azure.eventhubs.EventHubRuntimeInformation&text=EventHubRuntimeInformation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves general information about an event hub (see <xref uid="com.microsoft.azure.eventhubs.EventHubRuntimeInformation" data-throw-if-not-resolved="false" data-raw-source="EventHubRuntimeInformation"></xref> for details). Retries until it reaches the operation timeout, then either rethrows the last error if available or returns null to indicate timeout.</p>

    <p></p>
  syntax: public CompletableFuture<EventHubRuntimeInformation> getRuntimeInformation()
  uid: com.microsoft.azure.eventhubs.EventHubClient.getRuntimeInformation()
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData data)
  name: send(final EventData data)
  nameWithType: EventHubClient.send(final EventData data)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to be sent. </p>
    name: data
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> will land on any arbitrarily chosen EventHubs partition. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <ul><li><p><xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable)"></xref>, or <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="send(EventDataBatch)"></xref></p></li><li><p><xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false" data-raw-source="send(EventData, String)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable, String)"></xref></p></li><li><p><xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventData)"></xref>, <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(Iterable)"></xref>, or <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventDataBatch)"></xref></p></li></ul></p>

    <p>Use this method to Send, if: <pre>

    a)  the send(<xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>) operation should be highly available and

    b)  the data needs to be evenly distributed among all partitions; exception being, when a subset of partitions are unavailable

    </pre></p>

    <p>

      <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref> send's the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to a Service Gateway, which in-turn will forward the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to one of the EventHubs' partitions. Here's the message forwarding algorithm: <pre>

    i.  Forward the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s to EventHub partitions, by equally distributing the data among all partitions (ex: Round-robin the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s to all EventHubs' partitions)

    ii. If one of the EventHub partitions is unavailable for a moment, the Service Gateway will automatically detect it and forward the message to another available partition - making the Send operation highly-available.

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final EventData data)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData eventData, final String partitionKey)
  name: send(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.send(final EventData eventData, final String partitionKey)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to be sent. </p>
    name: eventData
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  - description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EventData.SystemProperties#getPartitionKey()"></xref></p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send an '<xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> with a partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s with a partitionKey are guaranteed to land on the same partition. This send pattern emphasize data correlation over general availability and latency. </p>

    <p>There are 3 ways to send to EventHubs, each exposed as a method (along with its sendBatch overload): <pre>

    i.   <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable)"></xref>

    ii.  <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false" data-raw-source="send(EventData, String)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable, String)"></xref>

    iii. <xref uid="com.microsoft.azure.eventhubs.PartitionSender.send(EventData)" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(EventData)"></xref> or <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PartitionSender#send(Iterable)"></xref></pre></p>

    <p>Use this type of Send, if: <pre>

    i.  There is a need for correlation of events based on Sender instance; The sender can generate a UniqueId and set it as partitionKey - which on the received Message can be used for correlation

    ii. The client wants to take control of distribution of data across partitions.

    </pre></p>

    <p>Multiple PartitionKey's could be mapped to one Partition. EventHubs service uses a proprietary Hash algorithm to map the PartitionKey to a PartitionId. Using this type of Send (Sending using a specific partitionKey), could sometimes result in partitions which are not evenly distributed.</p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final EventData eventData, final String partitionKey)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch eventDatas)
  name: send(final EventDataBatch eventDatas)
  nameWithType: EventHubClient.send(final EventDataBatch eventDatas)
  parameters:
  - description: <p>EventDataBatch to send to EventHub </p>
    name: eventDatas
    type: final <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompleteableFuture that can be completed when the send operations are done </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref> will land according the partition key set in the <xref uid="com.microsoft.azure.eventhubs.EventDataBatch" data-throw-if-not-resolved="false" data-raw-source="EventDataBatch"></xref>. If a partition key is not set, then we will Round-robin the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s to all EventHubs' partitions.</p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final EventDataBatch eventDatas)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData> eventDatas)
  name: send(final Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.send(final Iterable<EventData> eventDatas)
  parameters:
  - description: <p>batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to EventHub. The sent <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> will land on any arbitrarily chosen EventHubs partition. This is the most recommended way to Send to EventHubs. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref>, which is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. Use this overload versus <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref>, if you need to send a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs' service.

    ii.	Send multiple <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s in a Transaction. To achieve ACID properties, the Gateway Service will forward all <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s in the batch to a single EventHubs' partition.

    </pre></p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    Gson gson = new GsonBuilder().create();

    EventHubClient client = EventHubClient.createSync("__connection__");</pre></p>

    <p>

      <pre>while (true)

    {

        LinkedList{&lt;}EventData{&gt;} events = new LinkedList{&lt;}EventData{&gt;}();}

        for (int count = 1; count {&lt;} 11; count++)

        {

            PayloadEvent payload = new PayloadEvent(count);

            byte[] payloadBytes = gson.toJson(payload).getBytes(Charset.defaultCharset());

            EventData sendEvent = new EventData(payloadBytes);

            sendEvent.getProperties().put("from", "javaClient");

            events.add(sendEvent);

        }</pre>

    </p>

    <p>

      <pre>    client.sendSync(events);

        System.out.println(String.format("Sent Batch... Size: %s", events.size()));

    }

    </pre>

    </p>

    <p>for Exceptions refer to <xref uid="" data-throw-if-not-resolved="false" data-raw-source="sendSync(Iterable)"></xref></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final Iterable<EventData> eventDatas)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData>)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData> eventDatas, final String partitionKey)
  name: send(final Iterable<EventData> eventDatas, final String partitionKey)
  nameWithType: EventHubClient.send(final Iterable<EventData> eventDatas, final String partitionKey)
  parameters:
  - description: <p>the batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EventData.SystemProperties#getPartitionKey()"></xref></p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a CompletableFuture that can be completed when the send operations is done.. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Send a 'batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> with the same partitionKey' to EventHub. All <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s with a partitionKey are guaranteed to land on the same partition. Multiple PartitionKey's will be mapped to one Partition. </p>

    <p>There are 3 ways to send to EventHubs, to understand this particular type of Send refer to the overload <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false" data-raw-source="send(EventData, String)"></xref>, which is the same type of Send and is used to send single <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>. </p>

    <p>Sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s is useful in the following cases: <pre>

    i.	Efficient send - sending a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> maximizes the overall throughput by optimally using the number of sessions created to EventHubs service.

    ii.	Send multiple events in One Transaction. This is the reason why all events sent in a batch needs to have same partitionKey (so that they are sent to one partition only).

    </pre></p>

    <p></p>
  syntax: public CompletableFuture<Void> send(final Iterable<EventData> eventDatas, final String partitionKey)
  uid: com.microsoft.azure.eventhubs.EventHubClient.send(final Iterable<EventData>,final String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventData data)
  name: sendSync(final EventData data)
  nameWithType: EventHubClient.sendSync(final EventData data)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to be sent. </p>
    name: data
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="PayloadSizeExceededException?alt=PayloadSizeExceededException&text=PayloadSizeExceededException" data-throw-if-not-resolved="False"/>
    description: <p>if the total size of the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> exceeds a predefined limit set by the service. Default is 256k bytes. </p>
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  - type: <xref href="UnresolvedAddressException?alt=UnresolvedAddressException&text=UnresolvedAddressException" data-throw-if-not-resolved="False"/>
    description: '<p>if there are Client to Service network connectivity issues, if the Azure DNS resolution of the ServiceBus Namespace fails (ex: namespace deleted etc.) </p>'
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData)" data-throw-if-not-resolved="false" data-raw-source="send(EventData)"></xref>.</p>

    <p></p>
  syntax: public default void sendSync(final EventData data)
  uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventData)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventData eventData, final String partitionKey)
  name: sendSync(final EventData eventData, final String partitionKey)
  nameWithType: EventHubClient.sendSync(final EventData eventData, final String partitionKey)
  parameters:
  - description: <p>the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> to be sent. </p>
    name: eventData
    type: final <xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>
  - description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EventData.SystemProperties#getPartitionKey()"></xref></p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="PayloadSizeExceededException?alt=PayloadSizeExceededException&text=PayloadSizeExceededException" data-throw-if-not-resolved="False"/>
    description: <p>if the total size of the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventData,final String)" data-throw-if-not-resolved="false" data-raw-source="send(EventData, String)"></xref>.</p>

    <p></p>
  syntax: public default void sendSync(final EventData eventData, final String partitionKey)
  uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventData,final String)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventDataBatch eventDatas)
  name: sendSync(final EventDataBatch eventDatas)
  nameWithType: EventHubClient.sendSync(final EventDataBatch eventDatas)
  parameters:
  - description: <p>EventDataBatch to send to EventHub </p>
    name: eventDatas
    type: final <xref href="com.microsoft.azure.eventhubs.EventDataBatch?alt=com.microsoft.azure.eventhubs.EventDataBatch&text=EventDataBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.EventHubClient.send(final EventDataBatch)" data-throw-if-not-resolved="false" data-raw-source="send(EventDataBatch)"></xref>.</p>

    <p></p>
  syntax: public default void sendSync(final EventDataBatch eventDatas)
  uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final EventDataBatch)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final Iterable<EventData> eventDatas)
  name: sendSync(final Iterable<EventData> eventDatas)
  nameWithType: EventHubClient.sendSync(final Iterable<EventData> eventDatas)
  parameters:
  - description: <p>batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="PayloadSizeExceededException?alt=PayloadSizeExceededException&text=PayloadSizeExceededException" data-throw-if-not-resolved="False"/>
    description: <p>if the total size of the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  - type: <xref href="UnresolvedAddressException?alt=UnresolvedAddressException&text=UnresolvedAddressException" data-throw-if-not-resolved="False"/>
    description: '<p>if there are Client to Service network connectivity issues, if the Azure DNS resolution of the ServiceBus Namespace fails (ex: namespace deleted etc.) </p>'
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable)"></xref>.</p>

    <p></p>
  syntax: public default void sendSync(final Iterable<EventData> eventDatas)
  uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final Iterable<EventData>)
- fullName: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  name: sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  nameWithType: EventHubClient.sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  parameters:
  - description: <p>the batch of events to send to EventHub </p>
    name: eventDatas
    type: final Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>the partitionKey will be hash'ed to determine the partitionId to send the eventData to. On the Received message this can be accessed at <xref uid="" data-throw-if-not-resolved="false" data-raw-source="EventData.SystemProperties#getPartitionKey()"></xref></p>
    name: partitionKey
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="PayloadSizeExceededException?alt=PayloadSizeExceededException&text=PayloadSizeExceededException" data-throw-if-not-resolved="False"/>
    description: <p>if the total size of the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> exceeds a pre-defined limit set by the service. Default is 256k bytes. </p>
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if Service Bus service encountered problems during the operation. </p>
  - type: <xref href="UnresolvedAddressException?alt=UnresolvedAddressException&text=UnresolvedAddressException" data-throw-if-not-resolved="False"/>
    description: '<p>if there are Client to Service network connectivity issues, if the Azure DNS resolution of the ServiceBus Namespace fails (ex: namespace deleted etc.) </p>'
  returns:
    type: <xref href="default+void?alt=default+void&text=default+void" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Synchronous version of <xref uid="" data-throw-if-not-resolved="false" data-raw-source="send(Iterable, String)"></xref>.</p>

    <p></p>
  syntax: public default void sendSync(final Iterable<EventData> eventDatas, final String partitionKey)
  uid: com.microsoft.azure.eventhubs.EventHubClient.sendSync(final Iterable<EventData>,final String)
nameWithType: EventHubClient
syntax: public interface EventHubClient
type: interface
uid: com.microsoft.azure.eventhubs.EventHubClient
fullName: com.microsoft.azure.eventhubs.EventHubClient
name: EventHubClient
package: com.microsoft.azure.eventhubs
summary: >-
  <p>Anchor class - all EventHub client operations STARTS here.</p>

  <p></p>
metadata: {}
