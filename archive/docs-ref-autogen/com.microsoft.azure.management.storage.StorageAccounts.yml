### YamlMime:JavaType
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.create(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(ServiceCallback<CreatedResources<ResourceT>>,Creatable<ResourceT>...)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsBatchCreation.createAsync(final ServiceCallback<CreatedResources<ResourceT>>,List<Creatable<ResourceT>>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsCreating.define(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteById(String)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsDeletingById.deleteByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIds(Collection<String>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIds(String...)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIdsAsync(Collection<String>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsBatchDeletion.deleteByIdsAsync(String...)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String,ServiceCallback<Void>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsDeletingByResourceGroup.deleteByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getById(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingById.getByIdAsync(String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroup(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsGettingByResourceGroup.getByResourceGroupAsync(String,String,ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.list()
- com.microsoft.azure.management.resources.fluentcore.collection.SupportsListing.listAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroup(String)
- com.microsoft.azure.management.resources.fluentcore.arm.collection.SupportsListingByResourceGroup.listByResourceGroupAsync(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
methods:
- fullName: com.microsoft.azure.management.storage.StorageAccounts.checkNameAvailability(String name)
  name: checkNameAvailability(String name)
  nameWithType: StorageAccounts.checkNameAvailability(String name)
  parameters:
  - description: <p>the account name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>whether the name is available and other info if not </p>
    type: <xref href="com.microsoft.azure.management.storage.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.storage.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks that account name is valid and is not in use.</p>

    <p></p>
  syntax: public CheckNameAvailabilityResult checkNameAvailability(String name)
  uid: com.microsoft.azure.management.storage.StorageAccounts.checkNameAvailability(String)
- fullName: com.microsoft.azure.management.storage.StorageAccounts.checkNameAvailabilityAsync(String name)
  name: checkNameAvailabilityAsync(String name)
  nameWithType: StorageAccounts.checkNameAvailabilityAsync(String name)
  parameters:
  - description: <p>the account name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the deferred computation of this call, returning whether the name is available and other info if not </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.storage.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.storage.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks that account name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public Observable<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name)
  uid: com.microsoft.azure.management.storage.StorageAccounts.checkNameAvailabilityAsync(String)
- fullName: com.microsoft.azure.management.storage.StorageAccounts.checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  name: checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  nameWithType: StorageAccounts.checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  parameters:
  - description: <p>the account name to check </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the callback to call on success or failure </p>
    name: callback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.management.storage.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.storage.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>a handle to cancel the request </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.storage.CheckNameAvailabilityResult?alt=com.microsoft.azure.management.storage.CheckNameAvailabilityResult&text=CheckNameAvailabilityResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Checks that account name is valid and is not in use asynchronously.</p>

    <p></p>
  syntax: public ServiceFuture<CheckNameAvailabilityResult> checkNameAvailabilityAsync(String name, ServiceCallback<CheckNameAvailabilityResult> callback)
  uid: com.microsoft.azure.management.storage.StorageAccounts.checkNameAvailabilityAsync(String,ServiceCallback<CheckNameAvailabilityResult>)
nameWithType: StorageAccounts
syntax: public interface StorageAccounts extends SupportsListing<StorageAccount>,SupportsCreating<StorageAccount.DefinitionStages.Blank>,SupportsDeletingById,SupportsListingByResourceGroup<StorageAccount>,SupportsGettingByResourceGroup<StorageAccount>,SupportsGettingById<StorageAccount>,SupportsDeletingByResourceGroup,SupportsBatchCreation<StorageAccount>,SupportsBatchDeletion,HasManager<StorageManager>,HasInner<StorageAccountsInner>
type: interface
uid: com.microsoft.azure.management.storage.StorageAccounts
fullName: com.microsoft.azure.management.storage.StorageAccounts
name: StorageAccounts
package: com.microsoft.azure.management.storage
summary: <p>Entry point for storage accounts management API. </p>
metadata: {}
