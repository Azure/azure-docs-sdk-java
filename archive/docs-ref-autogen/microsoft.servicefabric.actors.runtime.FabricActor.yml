### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.FabricActor.FabricActor(FabricActorService actorService, ActorId actorId)
  name: FabricActor(FabricActorService actorService, ActorId actorId)
  nameWithType: FabricActor.FabricActor(FabricActorService actorService, ActorId actorId)
  parameters:
  - description: <p>The <xref uid="microsoft.servicefabric.actors.runtime.FabricActorService" data-throw-if-not-resolved="false" data-raw-source="FabricActorService"></xref> will host this actor instance. </p>
    name: actorService
    type: <xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>
  - description: <p>The <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> for this actor instance. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of <xref uid="microsoft.servicefabric.actors.runtime.FabricActor" data-throw-if-not-resolved="false" data-raw-source="FabricActor"></xref></p>

    <p></p>
  syntax: protected FabricActor(FabricActorService actorService, ActorId actorId)
  uid: microsoft.servicefabric.actors.runtime.FabricActor.FabricActor(FabricActorService,ActorId)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.actors.runtime.ActorBase.ActorBase(FabricActorService,ActorId)
- microsoft.servicefabric.actors.runtime.ActorBase.getActorService()
- microsoft.servicefabric.actors.runtime.ActorBase.getApplicationName()
- microsoft.servicefabric.actors.runtime.ActorBase.getDiagnosticsContext()
- microsoft.servicefabric.actors.runtime.ActorBase.getId()
- microsoft.servicefabric.actors.runtime.ActorBase.getReminder(String)
- microsoft.servicefabric.actors.runtime.ActorBase.getServiceUri()
- microsoft.servicefabric.actors.runtime.ActorBase.isDirty()
- microsoft.servicefabric.actors.runtime.ActorBase.onActivateAsync()
- microsoft.servicefabric.actors.runtime.ActorBase.onDeactivateAsync()
- microsoft.servicefabric.actors.runtime.ActorBase.onPostActorMethodAsync(ActorMethodContext)
- microsoft.servicefabric.actors.runtime.ActorBase.onPreActorMethodAsync(ActorMethodContext)
- microsoft.servicefabric.actors.runtime.ActorBase.registerReminderAsync(String,byte [],Duration,Duration)
- microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,Object,Duration,Duration)
- microsoft.servicefabric.actors.runtime.ActorBase.registerTimer(Function<Object, CompletableFuture<?>>,String,Object,Duration,Duration)
- microsoft.servicefabric.actors.runtime.ActorBase.setDirty(boolean)
- microsoft.servicefabric.actors.runtime.ActorBase.setDummy(boolean)
- microsoft.servicefabric.actors.runtime.ActorBase.unregisterReminderAsync(ActorReminder)
- microsoft.servicefabric.actors.runtime.ActorBase.unregisterTimer(ActorTimer)
methods:
- fullName: microsoft.servicefabric.actors.runtime.FabricActor.getStateManager()
  name: getStateManager()
  nameWithType: FabricActor.getStateManager()
  returns:
    description: <p>An <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref> which can be used to manage actor state. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorStateManager?alt=microsoft.servicefabric.actors.runtime.ActorStateManager&text=ActorStateManager" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the state manager for <xref uid="microsoft.servicefabric.actors.runtime.FabricActor" data-throw-if-not-resolved="false" data-raw-source="FabricActor"></xref> which can be used to get/add/update/remove named states.</p>

    <p></p>
  syntax: public ActorStateManager getStateManager()
  uid: microsoft.servicefabric.actors.runtime.FabricActor.getStateManager()
- fullName: microsoft.servicefabric.actors.runtime.FabricActor.saveStateAsync()
  name: saveStateAsync()
  nameWithType: FabricActor.saveStateAsync()
  returns:
    description: <p>A task that represents the asynchronous save operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Saves all the state changes (add/update/remove) that were made since last call to <xref uid="microsoft.servicefabric.actors.runtime.FabricActor.saveStateAsync()" data-throw-if-not-resolved="false" data-raw-source="FabricActor#saveStateAsync()"></xref>, to the actor state provider associated with the actor.</p>

    <p></p>
  syntax: protected CompletableFuture<?> saveStateAsync()
  uid: microsoft.servicefabric.actors.runtime.FabricActor.saveStateAsync()
- fullName: microsoft.servicefabric.actors.runtime.FabricActor.stateManager()
  name: stateManager()
  nameWithType: FabricActor.stateManager()
  returns:
    description: <p>An <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref> which can be used to manage actor state. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorStateManager?alt=microsoft.servicefabric.actors.runtime.ActorStateManager&text=ActorStateManager" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the state manager for <xref uid="microsoft.servicefabric.actors.runtime.FabricActor" data-throw-if-not-resolved="false" data-raw-source="FabricActor"></xref> which can be used to get/add/update/remove named states.</p>

    <p></p>
  syntax: public ActorStateManager stateManager()
  uid: microsoft.servicefabric.actors.runtime.FabricActor.stateManager()
nameWithType: FabricActor
syntax: public class FabricActor extends ActorBase
type: class
uid: microsoft.servicefabric.actors.runtime.FabricActor
fullName: microsoft.servicefabric.actors.runtime.FabricActor
name: FabricActor
package: microsoft.servicefabric.actors.runtime
summary: >-
  <p>Represents a actor that can have multiple reliable 'named' states associated with it. <xref uid="microsoft.servicefabric.actors.runtime.ActorBase" data-throw-if-not-resolved="false" data-raw-source="ActorBase"></xref></p>

  <p>

    <b>Remarks:</b>The state is preserved across actor garbage collections and fail-overs. The storage and retrieval of the state is provided by the actor state provider <xref uid="microsoft.servicefabric.actors.runtime.ActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="ActorStateProvider"></xref>. </p>
metadata: {}
