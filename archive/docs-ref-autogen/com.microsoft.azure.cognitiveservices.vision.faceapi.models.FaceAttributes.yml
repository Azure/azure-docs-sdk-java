### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.accessories()
  name: accessories()
  nameWithType: FaceAttributes.accessories()
  returns:
    description: <p>the accessories value </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Accessory?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Accessory&text=Accessory" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the accessories value.</p>

    <p></p>
  syntax: public List<Accessory> accessories()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.accessories()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.age()
  name: age()
  nameWithType: FaceAttributes.age()
  returns:
    description: <p>the age value </p>
    type: <xref href="Double?alt=Double&text=Double" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the age value.</p>

    <p></p>
  syntax: public Double age()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.age()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.blur()
  name: blur()
  nameWithType: FaceAttributes.blur()
  returns:
    description: <p>the blur value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Blur?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Blur&text=Blur" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the blur value.</p>

    <p></p>
  syntax: public Blur blur()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.blur()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.emotion()
  name: emotion()
  nameWithType: FaceAttributes.emotion()
  returns:
    description: <p>the emotion value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Emotion?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Emotion&text=Emotion" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the emotion value.</p>

    <p></p>
  syntax: public Emotion emotion()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.emotion()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.exposure()
  name: exposure()
  nameWithType: FaceAttributes.exposure()
  returns:
    description: <p>the exposure value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Exposure?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Exposure&text=Exposure" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the exposure value.</p>

    <p></p>
  syntax: public Exposure exposure()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.exposure()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.facialHair()
  name: facialHair()
  nameWithType: FaceAttributes.facialHair()
  returns:
    description: <p>the facialHair value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FacialHair?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FacialHair&text=FacialHair" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the facialHair value.</p>

    <p></p>
  syntax: public FacialHair facialHair()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.facialHair()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.gender()
  name: gender()
  nameWithType: FaceAttributes.gender()
  returns:
    description: <p>the gender value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Gender?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Gender&text=Gender" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the gender value.</p>

    <p></p>
  syntax: public Gender gender()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.gender()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.glasses()
  name: glasses()
  nameWithType: FaceAttributes.glasses()
  returns:
    description: <p>the glasses value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.GlassesType?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.GlassesType&text=GlassesType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the glasses value.</p>

    <p></p>
  syntax: public GlassesType glasses()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.glasses()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.hair()
  name: hair()
  nameWithType: FaceAttributes.hair()
  returns:
    description: <p>the hair value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Hair?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Hair&text=Hair" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the hair value.</p>

    <p></p>
  syntax: public Hair hair()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.hair()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.headPose()
  name: headPose()
  nameWithType: FaceAttributes.headPose()
  returns:
    description: <p>the headPose value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.HeadPose?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.HeadPose&text=HeadPose" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the headPose value.</p>

    <p></p>
  syntax: public HeadPose headPose()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.headPose()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.makeup()
  name: makeup()
  nameWithType: FaceAttributes.makeup()
  returns:
    description: <p>the makeup value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Makeup?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Makeup&text=Makeup" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the makeup value.</p>

    <p></p>
  syntax: public Makeup makeup()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.makeup()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.noise()
  name: noise()
  nameWithType: FaceAttributes.noise()
  returns:
    description: <p>the noise value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Noise?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Noise&text=Noise" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the noise value.</p>

    <p></p>
  syntax: public Noise noise()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.noise()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.occlusion()
  name: occlusion()
  nameWithType: FaceAttributes.occlusion()
  returns:
    description: <p>the occlusion value </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Occlusion?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Occlusion&text=Occlusion" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the occlusion value.</p>

    <p></p>
  syntax: public Occlusion occlusion()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.occlusion()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.smile()
  name: smile()
  nameWithType: FaceAttributes.smile()
  returns:
    description: <p>the smile value </p>
    type: <xref href="Double?alt=Double&text=Double" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the smile value.</p>

    <p></p>
  syntax: public Double smile()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.smile()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withAccessories(List<Accessory> accessories)
  name: withAccessories(List<Accessory> accessories)
  nameWithType: FaceAttributes.withAccessories(List<Accessory> accessories)
  parameters:
  - description: <p>the accessories value to set </p>
    name: accessories
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Accessory?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Accessory&text=Accessory" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the accessories value.</p>

    <p></p>
  syntax: public FaceAttributes withAccessories(List<Accessory> accessories)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withAccessories(List<Accessory>)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withAge(Double age)
  name: withAge(Double age)
  nameWithType: FaceAttributes.withAge(Double age)
  parameters:
  - description: <p>the age value to set </p>
    name: age
    type: <xref href="Double?alt=Double&text=Double" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the age value.</p>

    <p></p>
  syntax: public FaceAttributes withAge(Double age)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withAge(Double)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withBlur(Blur blur)
  name: withBlur(Blur blur)
  nameWithType: FaceAttributes.withBlur(Blur blur)
  parameters:
  - description: <p>the blur value to set </p>
    name: blur
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Blur?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Blur&text=Blur" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the blur value.</p>

    <p></p>
  syntax: public FaceAttributes withBlur(Blur blur)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withBlur(Blur)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withEmotion(Emotion emotion)
  name: withEmotion(Emotion emotion)
  nameWithType: FaceAttributes.withEmotion(Emotion emotion)
  parameters:
  - description: <p>the emotion value to set </p>
    name: emotion
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Emotion?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Emotion&text=Emotion" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the emotion value.</p>

    <p></p>
  syntax: public FaceAttributes withEmotion(Emotion emotion)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withEmotion(Emotion)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withExposure(Exposure exposure)
  name: withExposure(Exposure exposure)
  nameWithType: FaceAttributes.withExposure(Exposure exposure)
  parameters:
  - description: <p>the exposure value to set </p>
    name: exposure
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Exposure?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Exposure&text=Exposure" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the exposure value.</p>

    <p></p>
  syntax: public FaceAttributes withExposure(Exposure exposure)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withExposure(Exposure)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withFacialHair(FacialHair facialHair)
  name: withFacialHair(FacialHair facialHair)
  nameWithType: FaceAttributes.withFacialHair(FacialHair facialHair)
  parameters:
  - description: <p>the facialHair value to set </p>
    name: facialHair
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FacialHair?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FacialHair&text=FacialHair" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the facialHair value.</p>

    <p></p>
  syntax: public FaceAttributes withFacialHair(FacialHair facialHair)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withFacialHair(FacialHair)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withGender(Gender gender)
  name: withGender(Gender gender)
  nameWithType: FaceAttributes.withGender(Gender gender)
  parameters:
  - description: <p>the gender value to set </p>
    name: gender
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Gender?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Gender&text=Gender" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the gender value.</p>

    <p></p>
  syntax: public FaceAttributes withGender(Gender gender)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withGender(Gender)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withGlasses(GlassesType glasses)
  name: withGlasses(GlassesType glasses)
  nameWithType: FaceAttributes.withGlasses(GlassesType glasses)
  parameters:
  - description: <p>the glasses value to set </p>
    name: glasses
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.GlassesType?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.GlassesType&text=GlassesType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the glasses value.</p>

    <p></p>
  syntax: public FaceAttributes withGlasses(GlassesType glasses)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withGlasses(GlassesType)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withHair(Hair hair)
  name: withHair(Hair hair)
  nameWithType: FaceAttributes.withHair(Hair hair)
  parameters:
  - description: <p>the hair value to set </p>
    name: hair
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Hair?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Hair&text=Hair" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the hair value.</p>

    <p></p>
  syntax: public FaceAttributes withHair(Hair hair)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withHair(Hair)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withHeadPose(HeadPose headPose)
  name: withHeadPose(HeadPose headPose)
  nameWithType: FaceAttributes.withHeadPose(HeadPose headPose)
  parameters:
  - description: <p>the headPose value to set </p>
    name: headPose
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.HeadPose?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.HeadPose&text=HeadPose" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the headPose value.</p>

    <p></p>
  syntax: public FaceAttributes withHeadPose(HeadPose headPose)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withHeadPose(HeadPose)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withMakeup(Makeup makeup)
  name: withMakeup(Makeup makeup)
  nameWithType: FaceAttributes.withMakeup(Makeup makeup)
  parameters:
  - description: <p>the makeup value to set </p>
    name: makeup
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Makeup?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Makeup&text=Makeup" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the makeup value.</p>

    <p></p>
  syntax: public FaceAttributes withMakeup(Makeup makeup)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withMakeup(Makeup)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withNoise(Noise noise)
  name: withNoise(Noise noise)
  nameWithType: FaceAttributes.withNoise(Noise noise)
  parameters:
  - description: <p>the noise value to set </p>
    name: noise
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Noise?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Noise&text=Noise" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the noise value.</p>

    <p></p>
  syntax: public FaceAttributes withNoise(Noise noise)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withNoise(Noise)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withOcclusion(Occlusion occlusion)
  name: withOcclusion(Occlusion occlusion)
  nameWithType: FaceAttributes.withOcclusion(Occlusion occlusion)
  parameters:
  - description: <p>the occlusion value to set </p>
    name: occlusion
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.Occlusion?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.Occlusion&text=Occlusion" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the occlusion value.</p>

    <p></p>
  syntax: public FaceAttributes withOcclusion(Occlusion occlusion)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withOcclusion(Occlusion)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withSmile(Double smile)
  name: withSmile(Double smile)
  nameWithType: FaceAttributes.withSmile(Double smile)
  parameters:
  - description: <p>the smile value to set </p>
    name: smile
    type: <xref href="Double?alt=Double&text=Double" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the FaceAttributes object itself. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes&text=FaceAttributes" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the smile value.</p>

    <p></p>
  syntax: public FaceAttributes withSmile(Double smile)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes.withSmile(Double)
nameWithType: FaceAttributes
syntax: public class FaceAttributes
type: class
uid: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes
fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.models.FaceAttributes
name: FaceAttributes
package: com.microsoft.azure.cognitiveservices.vision.faceapi.models
summary: <p>Face Attributes. </p>
metadata: {}
