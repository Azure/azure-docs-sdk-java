### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
  name: checkpointStoreExists()
  nameWithType: ICheckpointManager.checkpointStoreExists()
  returns:
    type: <xref href="CompletableFuture%3CBoolean%3E?alt=CompletableFuture%3CBoolean%3E&text=CompletableFuture%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Boolean> checkpointStoreExists()
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.checkpointStoreExists()
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists(List<String> partitionIds)
  name: createAllCheckpointsIfNotExists(List<String> partitionIds)
  nameWithType: ICheckpointManager.createAllCheckpointsIfNotExists(List<String> partitionIds)
  parameters:
  - name: partitionIds
    type: <xref href="List%3CString%3E?alt=List%3CString%3E&text=List%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> createAllCheckpointsIfNotExists(List<String> partitionIds)
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createAllCheckpointsIfNotExists(List<String>)
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
  name: createCheckpointStoreIfNotExists()
  nameWithType: ICheckpointManager.createCheckpointStoreIfNotExists()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> createCheckpointStoreIfNotExists()
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.createCheckpointStoreIfNotExists()
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String partitionId)
  name: deleteCheckpoint(String partitionId)
  nameWithType: ICheckpointManager.deleteCheckpoint(String partitionId)
  parameters:
  - name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> deleteCheckpoint(String partitionId)
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpoint(String)
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
  name: deleteCheckpointStore()
  nameWithType: ICheckpointManager.deleteCheckpointStore()
  returns:
    description: <p>CompletableFuture { -&gt;} null on success, completes exceptionally on error. </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the checkpoint store.</p>

    <p></p>
  syntax: public CompletableFuture<Void> deleteCheckpointStore()
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.deleteCheckpointStore()
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String partitionId)
  name: getCheckpoint(String partitionId)
  nameWithType: ICheckpointManager.getCheckpoint(String partitionId)
  parameters:
  - name: partitionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    type: CompletableFuture&lt;<xref href="com.microsoft.azure.eventprocessorhost.Checkpoint?alt=com.microsoft.azure.eventprocessorhost.Checkpoint&text=Checkpoint" data-throw-if-not-resolved="False"/>&gt;
  syntax: public CompletableFuture<Checkpoint> getCheckpoint(String partitionId)
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.getCheckpoint(String)
- fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  name: updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  nameWithType: ICheckpointManager.updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  parameters:
  - name: lease
    type: <xref href="com.microsoft.azure.eventprocessorhost.CompleteLease?alt=com.microsoft.azure.eventprocessorhost.CompleteLease&text=CompleteLease" data-throw-if-not-resolved="False"/>
  - name: checkpoint
    type: <xref href="com.microsoft.azure.eventprocessorhost.Checkpoint?alt=com.microsoft.azure.eventprocessorhost.Checkpoint&text=Checkpoint" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> updateCheckpoint(CompleteLease lease, Checkpoint checkpoint)
  uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager.updateCheckpoint(CompleteLease,Checkpoint)
nameWithType: ICheckpointManager
syntax: public interface ICheckpointManager
type: interface
uid: com.microsoft.azure.eventprocessorhost.ICheckpointManager
fullName: com.microsoft.azure.eventprocessorhost.ICheckpointManager
name: ICheckpointManager
package: com.microsoft.azure.eventprocessorhost
metadata: {}
