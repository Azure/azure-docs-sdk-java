### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>.withExistingElasticPool(SqlElasticPool sqlElasticPool)
  name: withExistingElasticPool(SqlElasticPool sqlElasticPool)
  nameWithType: SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>.withExistingElasticPool(SqlElasticPool sqlElasticPool)
  parameters:
  - description: <p>for the SQL Database </p>
    name: sqlElasticPool
    type: <xref href="com.microsoft.azure.management.sql.SqlElasticPool?alt=com.microsoft.azure.management.sql.SqlElasticPool&text=SqlElasticPool" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The next stage of the definition. </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool?alt=com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool&text=SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Sets the existing elastic pool for the SQLDatabase.</p>

    <p></p>
  syntax: public WithExistingDatabaseAfterElasticPool<ParentT> withExistingElasticPool(SqlElasticPool sqlElasticPool)
  uid: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName.withExistingElasticPool(SqlElasticPool)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>.withExistingElasticPool(String elasticPoolName)
  name: withExistingElasticPool(String elasticPoolName)
  nameWithType: SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>.withExistingElasticPool(String elasticPoolName)
  parameters:
  - description: <p>for the SQL Database </p>
    name: elasticPoolName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The next stage of the definition. </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool?alt=com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool&text=SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Sets the existing elastic pool for the SQLDatabase.</p>

    <p></p>
  syntax: public WithExistingDatabaseAfterElasticPool<ParentT> withExistingElasticPool(String elasticPoolName)
  uid: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName.withExistingElasticPool(String)
- fullName: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>.withNewElasticPool(Creatable<SqlElasticPool> sqlElasticPool)
  name: withNewElasticPool(Creatable<SqlElasticPool> sqlElasticPool)
  nameWithType: SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>.withNewElasticPool(Creatable<SqlElasticPool> sqlElasticPool)
  parameters:
  - description: <p>creatable definition for new elastic pool to be created for the SQL Database </p>
    name: sqlElasticPool
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.management.sql.SqlElasticPool?alt=com.microsoft.azure.management.sql.SqlElasticPool&text=SqlElasticPool" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>The next stage of the definition. </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool?alt=com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool&text=SqlDatabase.DefinitionStages.WithExistingDatabaseAfterElasticPool" data-throw-if-not-resolved="False"/>&lt;ParentT&gt;
  summary: >-
    <p>Sets the new elastic pool for the SQLDatabase, this will create a new elastic pool while creating database.</p>

    <p></p>
  syntax: public WithExistingDatabaseAfterElasticPool<ParentT> withNewElasticPool(Creatable<SqlElasticPool> sqlElasticPool)
  uid: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName.withNewElasticPool(Creatable<SqlElasticPool>)
nameWithType: SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>
syntax: public interface WithElasticPoolName<ParentT>
type: interface
typeParameters:
- description: <p>the stage of the parent definition to return to after attaching this definition</p>
  name: ParentT
uid: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName
fullName: com.microsoft.azure.management.sql.SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>
name: SqlDatabase.DefinitionStages.WithElasticPoolName<ParentT>
package: com.microsoft.azure.management.sql
summary: >-
  <p>The SQL Database definition to set the elastic pool for database.</p>

  <p>

  The SQL Database definition to set the elastic pool for database. </p>
metadata: {}
