### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageRegions()
  name: createImageRegions()
  nameWithType: Trainings.createImageRegions()
  returns:
    description: <p>the first stage of the createImageRegions call </p>
    type: <xref href="TrainingsCreateImageRegionsDefinitionStages.WithProjectId?alt=TrainingsCreateImageRegionsDefinitionStages.WithProjectId&text=TrainingsCreateImageRegionsDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a set of image regions. This API accepts a batch of image regions, and optionally tags, to update existing images with region information. There is a limit of 64 entries in the batch.</p>

    <p></p>
  syntax: public TrainingsCreateImageRegionsDefinitionStages.WithProjectId createImageRegions()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageRegions()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageRegions(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  name: createImageRegions(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  nameWithType: Trainings.createImageRegions(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createImageRegionsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageRegionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageRegionsOptionalParameter&text=CreateImageRegionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageRegionCreateSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary&text=ImageRegionCreateSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a set of image regions. This API accepts a batch of image regions, and optionally tags, to update existing images with region information. There is a limit of 64 entries in the batch.</p>

    <p></p>
  syntax: public ImageRegionCreateSummary createImageRegions(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageRegions(UUID,CreateImageRegionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageRegionsAsync(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  name: createImageRegionsAsync(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  nameWithType: Trainings.createImageRegionsAsync(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createImageRegionsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageRegionsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageRegionsOptionalParameter&text=CreateImageRegionsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageRegionCreateSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionCreateSummary&text=ImageRegionCreateSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a set of image regions. This API accepts a batch of image regions, and optionally tags, to update existing images with region information. There is a limit of 64 entries in the batch.</p>

    <p></p>
  syntax: public Observable<ImageRegionCreateSummary> createImageRegionsAsync(UUID projectId, CreateImageRegionsOptionalParameter createImageRegionsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageRegionsAsync(UUID,CreateImageRegionsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromData()
  name: createImagesFromData()
  nameWithType: Trainings.createImagesFromData()
  returns:
    description: <p>the first stage of the createImagesFromData call </p>
    type: <xref href="TrainingsCreateImagesFromDataDefinitionStages.WithProjectId?alt=TrainingsCreateImagesFromDataDefinitionStages.WithProjectId&text=TrainingsCreateImagesFromDataDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add the provided images to the set of training images. This API accepts body content as multipart/form-data and application/octet-stream. When using multipart multiple image files can be sent at once, with a maximum of 64 files.</p>

    <p></p>
  syntax: public TrainingsCreateImagesFromDataDefinitionStages.WithProjectId createImagesFromData()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromData()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromData(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  name: createImagesFromData(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  nameWithType: Trainings.createImagesFromData(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createImagesFromDataOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImagesFromDataOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImagesFromDataOptionalParameter&text=CreateImagesFromDataOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageCreateSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add the provided images to the set of training images. This API accepts body content as multipart/form-data and application/octet-stream. When using multipart multiple image files can be sent at once, with a maximum of 64 files.</p>

    <p></p>
  syntax: public ImageCreateSummary createImagesFromData(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromData(UUID,byte [],CreateImagesFromDataOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromDataAsync(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  name: createImagesFromDataAsync(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  nameWithType: Trainings.createImagesFromDataAsync(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createImagesFromDataOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImagesFromDataOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImagesFromDataOptionalParameter&text=CreateImagesFromDataOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageCreateSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add the provided images to the set of training images. This API accepts body content as multipart/form-data and application/octet-stream. When using multipart multiple image files can be sent at once, with a maximum of 64 files.</p>

    <p></p>
  syntax: public Observable<ImageCreateSummary> createImagesFromDataAsync(UUID projectId, byte[] imageData, CreateImagesFromDataOptionalParameter createImagesFromDataOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromDataAsync(UUID,byte [],CreateImagesFromDataOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromFiles(UUID projectId, ImageFileCreateBatch batch)
  name: createImagesFromFiles(UUID projectId, ImageFileCreateBatch batch)
  nameWithType: Trainings.createImagesFromFiles(UUID projectId, ImageFileCreateBatch batch)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The batch of image files to add. Limited to 64 images and 20 tags per batch. </p>
    name: batch
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch&text=ImageFileCreateBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageCreateSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add the provided batch of images to the set of training images. This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.</p>

    <p></p>
  syntax: public ImageCreateSummary createImagesFromFiles(UUID projectId, ImageFileCreateBatch batch)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromFiles(UUID,ImageFileCreateBatch)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch)
  name: createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch)
  nameWithType: Trainings.createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The batch of image files to add. Limited to 64 images and 20 tags per batch. </p>
    name: batch
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageFileCreateBatch&text=ImageFileCreateBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageCreateSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add the provided batch of images to the set of training images. This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64 images and 20 tags.</p>

    <p></p>
  syntax: public Observable<ImageCreateSummary> createImagesFromFilesAsync(UUID projectId, ImageFileCreateBatch batch)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromFilesAsync(UUID,ImageFileCreateBatch)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromPredictions(UUID projectId, ImageIdCreateBatch batch)
  name: createImagesFromPredictions(UUID projectId, ImageIdCreateBatch batch)
  nameWithType: Trainings.createImagesFromPredictions(UUID projectId, ImageIdCreateBatch batch)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Image and tag ids. Limited to 64 images and 20 tags per batch. </p>
    name: batch
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch&text=ImageIdCreateBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageCreateSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add the specified predicted images to the set of training images. This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.</p>

    <p></p>
  syntax: public ImageCreateSummary createImagesFromPredictions(UUID projectId, ImageIdCreateBatch batch)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromPredictions(UUID,ImageIdCreateBatch)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromPredictionsAsync(UUID projectId, ImageIdCreateBatch batch)
  name: createImagesFromPredictionsAsync(UUID projectId, ImageIdCreateBatch batch)
  nameWithType: Trainings.createImagesFromPredictionsAsync(UUID projectId, ImageIdCreateBatch batch)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Image and tag ids. Limited to 64 images and 20 tags per batch. </p>
    name: batch
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageIdCreateBatch&text=ImageIdCreateBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageCreateSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add the specified predicted images to the set of training images. This API creates a batch of images from predicted images specified. There is a limit of 64 images and 20 tags.</p>

    <p></p>
  syntax: public Observable<ImageCreateSummary> createImagesFromPredictionsAsync(UUID projectId, ImageIdCreateBatch batch)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromPredictionsAsync(UUID,ImageIdCreateBatch)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromUrls(UUID projectId, ImageUrlCreateBatch batch)
  name: createImagesFromUrls(UUID projectId, ImageUrlCreateBatch batch)
  nameWithType: Trainings.createImagesFromUrls(UUID projectId, ImageUrlCreateBatch batch)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Image urls and tag ids. Limited to 64 images and 20 tags per batch. </p>
    name: batch
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch&text=ImageUrlCreateBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageCreateSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add the provided images urls to the set of training images. This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.</p>

    <p></p>
  syntax: public ImageCreateSummary createImagesFromUrls(UUID projectId, ImageUrlCreateBatch batch)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromUrls(UUID,ImageUrlCreateBatch)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch)
  name: createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch)
  nameWithType: Trainings.createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Image urls and tag ids. Limited to 64 images and 20 tags per batch. </p>
    name: batch
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageUrlCreateBatch&text=ImageUrlCreateBatch" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageCreateSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageCreateSummary&text=ImageCreateSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add the provided images urls to the set of training images. This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64 images and 20 tags.</p>

    <p></p>
  syntax: public Observable<ImageCreateSummary> createImagesFromUrlsAsync(UUID projectId, ImageUrlCreateBatch batch)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImagesFromUrlsAsync(UUID,ImageUrlCreateBatch)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageTags()
  name: createImageTags()
  nameWithType: Trainings.createImageTags()
  returns:
    description: <p>the first stage of the createImageTags call </p>
    type: <xref href="TrainingsCreateImageTagsDefinitionStages.WithProjectId?alt=TrainingsCreateImageTagsDefinitionStages.WithProjectId&text=TrainingsCreateImageTagsDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Associate a set of images with a set of tags.</p>

    <p></p>
  syntax: public TrainingsCreateImageTagsDefinitionStages.WithProjectId createImageTags()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageTags()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageTags(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  name: createImageTags(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  nameWithType: Trainings.createImageTags(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createImageTagsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageTagsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageTagsOptionalParameter&text=CreateImageTagsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageTagCreateSummary object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary&text=ImageTagCreateSummary" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Associate a set of images with a set of tags.</p>

    <p></p>
  syntax: public ImageTagCreateSummary createImageTags(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageTags(UUID,CreateImageTagsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageTagsAsync(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  name: createImageTagsAsync(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  nameWithType: Trainings.createImageTagsAsync(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createImageTagsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageTagsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateImageTagsOptionalParameter&text=CreateImageTagsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageTagCreateSummary object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageTagCreateSummary&text=ImageTagCreateSummary" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Associate a set of images with a set of tags.</p>

    <p></p>
  syntax: public Observable<ImageTagCreateSummary> createImageTagsAsync(UUID projectId, CreateImageTagsOptionalParameter createImageTagsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createImageTagsAsync(UUID,CreateImageTagsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createProject()
  name: createProject()
  nameWithType: Trainings.createProject()
  returns:
    description: <p>the first stage of the createProject call </p>
    type: <xref href="TrainingsCreateProjectDefinitionStages.WithName?alt=TrainingsCreateProjectDefinitionStages.WithName&text=TrainingsCreateProjectDefinitionStages.WithName" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a project.</p>

    <p></p>
  syntax: public TrainingsCreateProjectDefinitionStages.WithName createProject()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createProject()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createProject(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  name: createProject(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  nameWithType: Trainings.createProject(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  parameters:
  - description: <p>Name of the project. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createProjectOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateProjectOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateProjectOptionalParameter&text=CreateProjectOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Project object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a project.</p>

    <p></p>
  syntax: public Project createProject(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createProject(String,CreateProjectOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createProjectAsync(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  name: createProjectAsync(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  nameWithType: Trainings.createProjectAsync(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  parameters:
  - description: <p>Name of the project. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createProjectOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateProjectOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateProjectOptionalParameter&text=CreateProjectOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Project object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a project.</p>

    <p></p>
  syntax: public Observable<Project> createProjectAsync(String name, CreateProjectOptionalParameter createProjectOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createProjectAsync(String,CreateProjectOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createTag()
  name: createTag()
  nameWithType: Trainings.createTag()
  returns:
    description: <p>the first stage of the createTag call </p>
    type: <xref href="TrainingsCreateTagDefinitionStages.WithProjectId?alt=TrainingsCreateTagDefinitionStages.WithProjectId&text=TrainingsCreateTagDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a tag for the project.</p>

    <p></p>
  syntax: public TrainingsCreateTagDefinitionStages.WithProjectId createTag()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createTag()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createTag(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  name: createTag(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  nameWithType: Trainings.createTag(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The tag name. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createTagOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateTagOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateTagOptionalParameter&text=CreateTagOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Tag object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a tag for the project.</p>

    <p></p>
  syntax: public Tag createTag(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createTag(UUID,String,CreateTagOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createTagAsync(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  name: createTagAsync(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  nameWithType: Trainings.createTagAsync(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The tag name. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createTagOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateTagOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.CreateTagOptionalParameter&text=CreateTagOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Tag object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Create a tag for the project.</p>

    <p></p>
  syntax: public Observable<Tag> createTagAsync(UUID projectId, String name, CreateTagOptionalParameter createTagOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.createTagAsync(UUID,String,CreateTagOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageRegions(UUID projectId, List<UUID> regionIds)
  name: deleteImageRegions(UUID projectId, List<UUID> regionIds)
  nameWithType: Trainings.deleteImageRegions(UUID projectId, List<UUID> regionIds)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Regions to delete. Limited to 64. </p>
    name: regionIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete a set of image regions.</p>

    <p></p>
  syntax: public void deleteImageRegions(UUID projectId, List<UUID> regionIds)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageRegions(UUID,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds)
  name: deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds)
  nameWithType: Trainings.deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Regions to delete. Limited to 64. </p>
    name: regionIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a set of image regions.</p>

    <p></p>
  syntax: public Observable<Void> deleteImageRegionsAsync(UUID projectId, List<UUID> regionIds)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageRegionsAsync(UUID,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImages(UUID projectId, List<UUID> imageIds)
  name: deleteImages(UUID projectId, List<UUID> imageIds)
  nameWithType: Trainings.deleteImages(UUID projectId, List<UUID> imageIds)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Ids of the images to be deleted. Limited to 256 images per batch. </p>
    name: imageIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete images from the set of training images.</p>

    <p></p>
  syntax: public void deleteImages(UUID projectId, List<UUID> imageIds)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImages(UUID,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImagesAsync(UUID projectId, List<UUID> imageIds)
  name: deleteImagesAsync(UUID projectId, List<UUID> imageIds)
  nameWithType: Trainings.deleteImagesAsync(UUID projectId, List<UUID> imageIds)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Ids of the images to be deleted. Limited to 256 images per batch. </p>
    name: imageIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete images from the set of training images.</p>

    <p></p>
  syntax: public Observable<Void> deleteImagesAsync(UUID projectId, List<UUID> imageIds)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImagesAsync(UUID,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageTags(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  name: deleteImageTags(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  nameWithType: Trainings.deleteImageTags(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Image ids. Limited to 64 images. </p>
    name: imageIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Tags to be deleted from the specified images. Limited to 20 tags. </p>
    name: tagIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Remove a set of tags from a set of images.</p>

    <p></p>
  syntax: public void deleteImageTags(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageTags(UUID,List<UUID>,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  name: deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  nameWithType: Trainings.deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Image ids. Limited to 64 images. </p>
    name: imageIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  - description: <p>Tags to be deleted from the specified images. Limited to 20 tags. </p>
    name: tagIds
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Remove a set of tags from a set of images.</p>

    <p></p>
  syntax: public Observable<Void> deleteImageTagsAsync(UUID projectId, List<UUID> imageIds, List<UUID> tagIds)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteImageTagsAsync(UUID,List<UUID>,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteIteration(UUID projectId, UUID iterationId)
  name: deleteIteration(UUID projectId, UUID iterationId)
  nameWithType: Trainings.deleteIteration(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete a specific iteration of a project.</p>

    <p></p>
  syntax: public void deleteIteration(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteIteration(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteIterationAsync(UUID projectId, UUID iterationId)
  name: deleteIterationAsync(UUID projectId, UUID iterationId)
  nameWithType: Trainings.deleteIterationAsync(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a specific iteration of a project.</p>

    <p></p>
  syntax: public Observable<Void> deleteIterationAsync(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteIterationAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deletePrediction(UUID projectId, List<UUID> ids)
  name: deletePrediction(UUID projectId, List<UUID> ids)
  nameWithType: Trainings.deletePrediction(UUID projectId, List<UUID> ids)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The prediction ids. Limited to 64. </p>
    name: ids
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete a set of predicted images and their associated prediction results.</p>

    <p></p>
  syntax: public void deletePrediction(UUID projectId, List<UUID> ids)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deletePrediction(UUID,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deletePredictionAsync(UUID projectId, List<UUID> ids)
  name: deletePredictionAsync(UUID projectId, List<UUID> ids)
  nameWithType: Trainings.deletePredictionAsync(UUID projectId, List<UUID> ids)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The prediction ids. Limited to 64. </p>
    name: ids
    type: <xref href="List%3CUUID%3E?alt=List%3CUUID%3E&text=List%3CUUID%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a set of predicted images and their associated prediction results.</p>

    <p></p>
  syntax: public Observable<Void> deletePredictionAsync(UUID projectId, List<UUID> ids)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deletePredictionAsync(UUID,List<UUID>)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteProject(UUID projectId)
  name: deleteProject(UUID projectId)
  nameWithType: Trainings.deleteProject(UUID projectId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete a specific project.</p>

    <p></p>
  syntax: public void deleteProject(UUID projectId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteProject(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteProjectAsync(UUID projectId)
  name: deleteProjectAsync(UUID projectId)
  nameWithType: Trainings.deleteProjectAsync(UUID projectId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a specific project.</p>

    <p></p>
  syntax: public Observable<Void> deleteProjectAsync(UUID projectId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteProjectAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteTag(UUID projectId, UUID tagId)
  name: deleteTag(UUID projectId, UUID tagId)
  nameWithType: Trainings.deleteTag(UUID projectId, UUID tagId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the tag to be deleted. </p>
    name: tagId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete a tag from the project.</p>

    <p></p>
  syntax: public void deleteTag(UUID projectId, UUID tagId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteTag(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteTagAsync(UUID projectId, UUID tagId)
  name: deleteTagAsync(UUID projectId, UUID tagId)
  nameWithType: Trainings.deleteTagAsync(UUID projectId, UUID tagId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the tag to be deleted. </p>
    name: tagId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete a tag from the project.</p>

    <p></p>
  syntax: public Observable<Void> deleteTagAsync(UUID projectId, UUID tagId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.deleteTagAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.exportIteration()
  name: exportIteration()
  nameWithType: Trainings.exportIteration()
  returns:
    description: <p>the first stage of the exportIteration call </p>
    type: <xref href="TrainingsExportIterationDefinitionStages.WithProjectId?alt=TrainingsExportIterationDefinitionStages.WithProjectId&text=TrainingsExportIterationDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Export a trained iteration.</p>

    <p></p>
  syntax: public TrainingsExportIterationDefinitionStages.WithProjectId exportIteration()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.exportIteration()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.exportIteration(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  name: exportIteration(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  nameWithType: Trainings.exportIteration(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: "<p>The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'. </p>"
    name: platform
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: exportIterationOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ExportIterationOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ExportIterationOptionalParameter&text=ExportIterationOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Export object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export&text=Export" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Export a trained iteration.</p>

    <p></p>
  syntax: public Export exportIteration(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.exportIteration(UUID,UUID,String,ExportIterationOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.exportIterationAsync(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  name: exportIterationAsync(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  nameWithType: Trainings.exportIterationAsync(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: "<p>The target platform. Possible values include: 'CoreML', 'TensorFlow', 'DockerFile', 'ONNX', 'VAIDK'. </p>"
    name: platform
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: exportIterationOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ExportIterationOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ExportIterationOptionalParameter&text=ExportIterationOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Export object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export&text=Export" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Export a trained iteration.</p>

    <p></p>
  syntax: public Observable<Export> exportIterationAsync(UUID projectId, UUID iterationId, String platform, ExportIterationOptionalParameter exportIterationOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.exportIterationAsync(UUID,UUID,String,ExportIterationOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomain(UUID domainId)
  name: getDomain(UUID domainId)
  nameWithType: Trainings.getDomain(UUID domainId)
  parameters:
  - description: <p>The id of the domain to get information about. </p>
    name: domainId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Domain object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain&text=Domain" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get information about a specific domain.</p>

    <p></p>
  syntax: public Domain getDomain(UUID domainId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomain(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomainAsync(UUID domainId)
  name: getDomainAsync(UUID domainId)
  nameWithType: Trainings.getDomainAsync(UUID domainId)
  parameters:
  - description: <p>The id of the domain to get information about. </p>
    name: domainId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Domain object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain&text=Domain" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get information about a specific domain.</p>

    <p></p>
  syntax: public Observable<Domain> getDomainAsync(UUID domainId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomainAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomains()
  name: getDomains()
  nameWithType: Trainings.getDomains()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Domain&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain&text=Domain" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a list of the available domains.</p>

    <p></p>
  syntax: public List<Domain> getDomains()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomains()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomainsAsync()
  name: getDomainsAsync()
  nameWithType: Trainings.getDomainsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Domain&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Domain&text=Domain" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get a list of the available domains.</p>

    <p></p>
  syntax: public Observable<List<Domain>> getDomainsAsync()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getDomainsAsync()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getExports(UUID projectId, UUID iterationId)
  name: getExports(UUID projectId, UUID iterationId)
  nameWithType: Trainings.getExports(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Export&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export&text=Export" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the list of exports for a specific iteration.</p>

    <p></p>
  syntax: public List<Export> getExports(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getExports(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getExportsAsync(UUID projectId, UUID iterationId)
  name: getExportsAsync(UUID projectId, UUID iterationId)
  nameWithType: Trainings.getExportsAsync(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Export&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Export&text=Export" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get the list of exports for a specific iteration.</p>

    <p></p>
  syntax: public Observable<List<Export>> getExportsAsync(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getExportsAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformanceCount()
  name: getImagePerformanceCount()
  nameWithType: Trainings.getImagePerformanceCount()
  returns:
    description: <p>the first stage of the getImagePerformanceCount call </p>
    type: <xref href="TrainingsGetImagePerformanceCountDefinitionStages.WithProjectId?alt=TrainingsGetImagePerformanceCountDefinitionStages.WithProjectId&text=TrainingsGetImagePerformanceCountDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds} that have prediction results from training for the provided iteration {iterationId}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public TrainingsGetImagePerformanceCountDefinitionStages.WithProjectId getImagePerformanceCount()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformanceCount()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformanceCount(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  name: getImagePerformanceCount(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  nameWithType: Trainings.getImagePerformanceCount(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. Defaults to workspace. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getImagePerformanceCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformanceCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformanceCountOptionalParameter&text=GetImagePerformanceCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the int object if successful. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds} that have prediction results from training for the provided iteration {iterationId}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public int getImagePerformanceCount(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformanceCount(UUID,UUID,GetImagePerformanceCountOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformanceCountAsync(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  name: getImagePerformanceCountAsync(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  nameWithType: Trainings.getImagePerformanceCountAsync(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. Defaults to workspace. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getImagePerformanceCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformanceCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformanceCountOptionalParameter&text=GetImagePerformanceCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the int object </p>
    type: <xref href="Observable%3CInteger%3E?alt=Observable%3CInteger%3E&text=Observable%3CInteger%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds} that have prediction results from training for the provided iteration {iterationId}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public Observable<Integer> getImagePerformanceCountAsync(UUID projectId, UUID iterationId, GetImagePerformanceCountOptionalParameter getImagePerformanceCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformanceCountAsync(UUID,UUID,GetImagePerformanceCountOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformances()
  name: getImagePerformances()
  nameWithType: Trainings.getImagePerformances()
  returns:
    description: <p>the first stage of the getImagePerformances call </p>
    type: <xref href="TrainingsGetImagePerformancesDefinitionStages.WithProjectId?alt=TrainingsGetImagePerformancesDefinitionStages.WithProjectId&text=TrainingsGetImagePerformancesDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get image with its prediction for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public TrainingsGetImagePerformancesDefinitionStages.WithProjectId getImagePerformances()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformances()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformances(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  name: getImagePerformances(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  nameWithType: Trainings.getImagePerformances(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. Defaults to workspace. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getImagePerformancesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformancesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformancesOptionalParameter&text=GetImagePerformancesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;ImagePerformance&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance&text=ImagePerformance" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get image with its prediction for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public List<ImagePerformance> getImagePerformances(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformances(UUID,UUID,GetImagePerformancesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformancesAsync(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  name: getImagePerformancesAsync(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  nameWithType: Trainings.getImagePerformancesAsync(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. Defaults to workspace. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getImagePerformancesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformancesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagePerformancesOptionalParameter&text=GetImagePerformancesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;ImagePerformance&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePerformance&text=ImagePerformance" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get image with its prediction for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public Observable<List<ImagePerformance>> getImagePerformancesAsync(UUID projectId, UUID iterationId, GetImagePerformancesOptionalParameter getImagePerformancesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagePerformancesAsync(UUID,UUID,GetImagePerformancesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImageRegionProposals(UUID projectId, UUID imageId)
  name: getImageRegionProposals(UUID projectId, UUID imageId)
  nameWithType: Trainings.getImageRegionProposals(UUID projectId, UUID imageId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The image id. </p>
    name: imageId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageRegionProposal object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal&text=ImageRegionProposal" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get region proposals for an image. Returns empty array if no proposals are found. This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.</p>

    <p></p>
  syntax: public ImageRegionProposal getImageRegionProposals(UUID projectId, UUID imageId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImageRegionProposals(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImageRegionProposalsAsync(UUID projectId, UUID imageId)
  name: getImageRegionProposalsAsync(UUID projectId, UUID imageId)
  nameWithType: Trainings.getImageRegionProposalsAsync(UUID projectId, UUID imageId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The image id. </p>
    name: imageId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageRegionProposal object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImageRegionProposal&text=ImageRegionProposal" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get region proposals for an image. Returns empty array if no proposals are found. This API will get region proposals for an image along with confidences for the region. It returns an empty array if no proposals are found.</p>

    <p></p>
  syntax: public Observable<ImageRegionProposal> getImageRegionProposalsAsync(UUID projectId, UUID imageId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImageRegionProposalsAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagesByIds()
  name: getImagesByIds()
  nameWithType: Trainings.getImagesByIds()
  returns:
    description: <p>the first stage of the getImagesByIds call </p>
    type: <xref href="TrainingsGetImagesByIdsDefinitionStages.WithProjectId?alt=TrainingsGetImagesByIdsDefinitionStages.WithProjectId&text=TrainingsGetImagesByIdsDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get images by id for a given project iteration. This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the current workspace is used.</p>

    <p></p>
  syntax: public TrainingsGetImagesByIdsDefinitionStages.WithProjectId getImagesByIds()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagesByIds()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagesByIds(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  name: getImagesByIds(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  nameWithType: Trainings.getImagesByIds(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getImagesByIdsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagesByIdsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagesByIdsOptionalParameter&text=GetImagesByIdsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Image&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get images by id for a given project iteration. This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the current workspace is used.</p>

    <p></p>
  syntax: public List<Image> getImagesByIds(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagesByIds(UUID,GetImagesByIdsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagesByIdsAsync(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  name: getImagesByIdsAsync(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  nameWithType: Trainings.getImagesByIdsAsync(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getImagesByIdsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagesByIdsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetImagesByIdsOptionalParameter&text=GetImagesByIdsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Image&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get images by id for a given project iteration. This API will return a set of Images for the specified tags and optionally iteration. If no iteration is specified the current workspace is used.</p>

    <p></p>
  syntax: public Observable<List<Image>> getImagesByIdsAsync(UUID projectId, GetImagesByIdsOptionalParameter getImagesByIdsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getImagesByIdsAsync(UUID,GetImagesByIdsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIteration(UUID projectId, UUID iterationId)
  name: getIteration(UUID projectId, UUID iterationId)
  nameWithType: Trainings.getIteration(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The id of the project the iteration belongs to. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the iteration to get. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Iteration object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a specific iteration.</p>

    <p></p>
  syntax: public Iteration getIteration(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIteration(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationAsync(UUID projectId, UUID iterationId)
  name: getIterationAsync(UUID projectId, UUID iterationId)
  nameWithType: Trainings.getIterationAsync(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The id of the project the iteration belongs to. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the iteration to get. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Iteration object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a specific iteration.</p>

    <p></p>
  syntax: public Observable<Iteration> getIterationAsync(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationPerformance()
  name: getIterationPerformance()
  nameWithType: Trainings.getIterationPerformance()
  returns:
    description: <p>the first stage of the getIterationPerformance call </p>
    type: <xref href="TrainingsGetIterationPerformanceDefinitionStages.WithProjectId?alt=TrainingsGetIterationPerformanceDefinitionStages.WithProjectId&text=TrainingsGetIterationPerformanceDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get detailed performance information about an iteration.</p>

    <p></p>
  syntax: public TrainingsGetIterationPerformanceDefinitionStages.WithProjectId getIterationPerformance()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationPerformance()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationPerformance(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  name: getIterationPerformance(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  nameWithType: Trainings.getIterationPerformance(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  parameters:
  - description: <p>The id of the project the iteration belongs to. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the iteration to get. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getIterationPerformanceOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetIterationPerformanceOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetIterationPerformanceOptionalParameter&text=GetIterationPerformanceOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the IterationPerformance object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance&text=IterationPerformance" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get detailed performance information about an iteration.</p>

    <p></p>
  syntax: public IterationPerformance getIterationPerformance(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationPerformance(UUID,UUID,GetIterationPerformanceOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationPerformanceAsync(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  name: getIterationPerformanceAsync(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  nameWithType: Trainings.getIterationPerformanceAsync(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  parameters:
  - description: <p>The id of the project the iteration belongs to. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the iteration to get. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getIterationPerformanceOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetIterationPerformanceOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetIterationPerformanceOptionalParameter&text=GetIterationPerformanceOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the IterationPerformance object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.IterationPerformance&text=IterationPerformance" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get detailed performance information about an iteration.</p>

    <p></p>
  syntax: public Observable<IterationPerformance> getIterationPerformanceAsync(UUID projectId, UUID iterationId, GetIterationPerformanceOptionalParameter getIterationPerformanceOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationPerformanceAsync(UUID,UUID,GetIterationPerformanceOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterations(UUID projectId)
  name: getIterations(UUID projectId)
  nameWithType: Trainings.getIterations(UUID projectId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Iteration&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get iterations for the project.</p>

    <p></p>
  syntax: public List<Iteration> getIterations(UUID projectId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterations(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationsAsync(UUID projectId)
  name: getIterationsAsync(UUID projectId)
  nameWithType: Trainings.getIterationsAsync(UUID projectId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Iteration&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get iterations for the project.</p>

    <p></p>
  syntax: public Observable<List<Iteration>> getIterationsAsync(UUID projectId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getIterationsAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProject(UUID projectId)
  name: getProject(UUID projectId)
  nameWithType: Trainings.getProject(UUID projectId)
  parameters:
  - description: <p>The id of the project to get. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Project object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a specific project.</p>

    <p></p>
  syntax: public Project getProject(UUID projectId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProject(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProjectAsync(UUID projectId)
  name: getProjectAsync(UUID projectId)
  nameWithType: Trainings.getProjectAsync(UUID projectId)
  parameters:
  - description: <p>The id of the project to get. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Project object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a specific project.</p>

    <p></p>
  syntax: public Observable<Project> getProjectAsync(UUID projectId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProjectAsync(UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProjects()
  name: getProjects()
  nameWithType: Trainings.getProjects()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Project&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get your projects.</p>

    <p></p>
  syntax: public List<Project> getProjects()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProjects()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProjectsAsync()
  name: getProjectsAsync()
  nameWithType: Trainings.getProjectsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Project&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get your projects.</p>

    <p></p>
  syntax: public Observable<List<Project>> getProjectsAsync()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getProjectsAsync()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTag()
  name: getTag()
  nameWithType: Trainings.getTag()
  returns:
    description: <p>the first stage of the getTag call </p>
    type: <xref href="TrainingsGetTagDefinitionStages.WithProjectId?alt=TrainingsGetTagDefinitionStages.WithProjectId&text=TrainingsGetTagDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get information about a specific tag.</p>

    <p></p>
  syntax: public TrainingsGetTagDefinitionStages.WithProjectId getTag()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTag()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTag(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  name: getTag(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  nameWithType: Trainings.getTag(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  parameters:
  - description: <p>The project this tag belongs to. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The tag id. </p>
    name: tagId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTagOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagOptionalParameter&text=GetTagOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Tag object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get information about a specific tag.</p>

    <p></p>
  syntax: public Tag getTag(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTag(UUID,UUID,GetTagOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTagAsync(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  name: getTagAsync(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  nameWithType: Trainings.getTagAsync(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  parameters:
  - description: <p>The project this tag belongs to. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The tag id. </p>
    name: tagId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTagOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagOptionalParameter&text=GetTagOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Tag object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get information about a specific tag.</p>

    <p></p>
  syntax: public Observable<Tag> getTagAsync(UUID projectId, UUID tagId, GetTagOptionalParameter getTagOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTagAsync(UUID,UUID,GetTagOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount()
  name: getTaggedImageCount()
  nameWithType: Trainings.getTaggedImageCount()
  returns:
    description: <p>the first stage of the getTaggedImageCount call </p>
    type: <xref href="TrainingsGetTaggedImageCountDefinitionStages.WithProjectId?alt=TrainingsGetTaggedImageCountDefinitionStages.WithProjectId&text=TrainingsGetTaggedImageCountDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public TrainingsGetTaggedImageCountDefinitionStages.WithProjectId getTaggedImageCount()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  name: getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  nameWithType: Trainings.getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTaggedImageCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImageCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImageCountOptionalParameter&text=GetTaggedImageCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the int object if successful. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public int getTaggedImageCount(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCount(UUID,GetTaggedImageCountOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCountAsync(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  name: getTaggedImageCountAsync(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  nameWithType: Trainings.getTaggedImageCountAsync(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTaggedImageCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImageCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImageCountOptionalParameter&text=GetTaggedImageCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the int object </p>
    type: <xref href="Observable%3CInteger%3E?alt=Observable%3CInteger%3E&text=Observable%3CInteger%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of images tagged with the provided {tagIds}. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public Observable<Integer> getTaggedImageCountAsync(UUID projectId, GetTaggedImageCountOptionalParameter getTaggedImageCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImageCountAsync(UUID,GetTaggedImageCountOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImages()
  name: getTaggedImages()
  nameWithType: Trainings.getTaggedImages()
  returns:
    description: <p>the first stage of the getTaggedImages call </p>
    type: <xref href="TrainingsGetTaggedImagesDefinitionStages.WithProjectId?alt=TrainingsGetTaggedImagesDefinitionStages.WithProjectId&text=TrainingsGetTaggedImagesDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get tagged images for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public TrainingsGetTaggedImagesDefinitionStages.WithProjectId getTaggedImages()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImages()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImages(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  name: getTaggedImages(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  nameWithType: Trainings.getTaggedImages(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTaggedImagesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImagesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImagesOptionalParameter&text=GetTaggedImagesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Image&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get tagged images for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public List<Image> getTaggedImages(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImages(UUID,GetTaggedImagesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImagesAsync(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  name: getTaggedImagesAsync(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  nameWithType: Trainings.getTaggedImagesAsync(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTaggedImagesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImagesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTaggedImagesOptionalParameter&text=GetTaggedImagesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Image&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get tagged images for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch. The filtering is on an and/or relationship. For example, if the provided tag ids are for the "Dog" and "Cat" tags, then only images tagged with Dog and/or Cat will be returned.</p>

    <p></p>
  syntax: public Observable<List<Image>> getTaggedImagesAsync(UUID projectId, GetTaggedImagesOptionalParameter getTaggedImagesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTaggedImagesAsync(UUID,GetTaggedImagesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTags()
  name: getTags()
  nameWithType: Trainings.getTags()
  returns:
    description: <p>the first stage of the getTags call </p>
    type: <xref href="TrainingsGetTagsDefinitionStages.WithProjectId?alt=TrainingsGetTagsDefinitionStages.WithProjectId&text=TrainingsGetTagsDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the tags for a given project and iteration.</p>

    <p></p>
  syntax: public TrainingsGetTagsDefinitionStages.WithProjectId getTags()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTags()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTags(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  name: getTags(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  nameWithType: Trainings.getTags(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTagsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagsOptionalParameter&text=GetTagsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Tag&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the tags for a given project and iteration.</p>

    <p></p>
  syntax: public List<Tag> getTags(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTags(UUID,GetTagsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTagsAsync(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  name: getTagsAsync(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  nameWithType: Trainings.getTagsAsync(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getTagsOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetTagsOptionalParameter&text=GetTagsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Tag&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get the tags for a given project and iteration.</p>

    <p></p>
  syntax: public Observable<List<Tag>> getTagsAsync(UUID projectId, GetTagsOptionalParameter getTagsOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getTagsAsync(UUID,GetTagsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImageCount()
  name: getUntaggedImageCount()
  nameWithType: Trainings.getUntaggedImageCount()
  returns:
    description: <p>the first stage of the getUntaggedImageCount call </p>
    type: <xref href="TrainingsGetUntaggedImageCountDefinitionStages.WithProjectId?alt=TrainingsGetUntaggedImageCountDefinitionStages.WithProjectId&text=TrainingsGetUntaggedImageCountDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of untagged images. This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the current workspace is used.</p>

    <p></p>
  syntax: public TrainingsGetUntaggedImageCountDefinitionStages.WithProjectId getUntaggedImageCount()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImageCount()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImageCount(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  name: getUntaggedImageCount(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  nameWithType: Trainings.getUntaggedImageCount(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getUntaggedImageCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImageCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImageCountOptionalParameter&text=GetUntaggedImageCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the int object if successful. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of untagged images. This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the current workspace is used.</p>

    <p></p>
  syntax: public int getUntaggedImageCount(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImageCount(UUID,GetUntaggedImageCountOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImageCountAsync(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  name: getUntaggedImageCountAsync(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  nameWithType: Trainings.getUntaggedImageCountAsync(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getUntaggedImageCountOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImageCountOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImageCountOptionalParameter&text=GetUntaggedImageCountOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the int object </p>
    type: <xref href="Observable%3CInteger%3E?alt=Observable%3CInteger%3E&text=Observable%3CInteger%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the number of untagged images. This API returns the images which have no tags for a given project and optionally an iteration. If no iteration is specified the current workspace is used.</p>

    <p></p>
  syntax: public Observable<Integer> getUntaggedImageCountAsync(UUID projectId, GetUntaggedImageCountOptionalParameter getUntaggedImageCountOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImageCountAsync(UUID,GetUntaggedImageCountOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImages()
  name: getUntaggedImages()
  nameWithType: Trainings.getUntaggedImages()
  returns:
    description: <p>the first stage of the getUntaggedImages call </p>
    type: <xref href="TrainingsGetUntaggedImagesDefinitionStages.WithProjectId?alt=TrainingsGetUntaggedImagesDefinitionStages.WithProjectId&text=TrainingsGetUntaggedImagesDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get untagged images for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch.</p>

    <p></p>
  syntax: public TrainingsGetUntaggedImagesDefinitionStages.WithProjectId getUntaggedImages()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImages()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImages(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  name: getUntaggedImages(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  nameWithType: Trainings.getUntaggedImages(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getUntaggedImagesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImagesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImagesOptionalParameter&text=GetUntaggedImagesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;Image&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get untagged images for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch.</p>

    <p></p>
  syntax: public List<Image> getUntaggedImages(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImages(UUID,GetUntaggedImagesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImagesAsync(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  name: getUntaggedImagesAsync(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  nameWithType: Trainings.getUntaggedImagesAsync(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: getUntaggedImagesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImagesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.GetUntaggedImagesOptionalParameter&text=GetUntaggedImagesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;Image&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Get untagged images for a given project iteration. This API supports batching and range selection. By default it will only return first 50 images matching images. Use the {take} and {skip} parameters to control how many images to return in a given batch.</p>

    <p></p>
  syntax: public Observable<List<Image>> getUntaggedImagesAsync(UUID projectId, GetUntaggedImagesOptionalParameter getUntaggedImagesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.getUntaggedImagesAsync(UUID,GetUntaggedImagesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.publishIteration(UUID projectId, UUID iterationId, String publishName, String predictionId)
  name: publishIteration(UUID projectId, UUID iterationId, String publishName, String predictionId)
  nameWithType: Trainings.publishIteration(UUID projectId, UUID iterationId, String publishName, String predictionId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The name to give the published iteration. </p>
    name: publishName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the prediction resource to publish to. </p>
    name: predictionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the boolean object if successful. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Publish a specific iteration.</p>

    <p></p>
  syntax: public boolean publishIteration(UUID projectId, UUID iterationId, String publishName, String predictionId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.publishIteration(UUID,UUID,String,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.publishIterationAsync(UUID projectId, UUID iterationId, String publishName, String predictionId)
  name: publishIterationAsync(UUID projectId, UUID iterationId, String publishName, String predictionId)
  nameWithType: Trainings.publishIterationAsync(UUID projectId, UUID iterationId, String publishName, String predictionId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The name to give the published iteration. </p>
    name: publishName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the prediction resource to publish to. </p>
    name: predictionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the boolean object </p>
    type: <xref href="Observable%3CBoolean%3E?alt=Observable%3CBoolean%3E&text=Observable%3CBoolean%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Publish a specific iteration.</p>

    <p></p>
  syntax: public Observable<Boolean> publishIterationAsync(UUID projectId, UUID iterationId, String publishName, String predictionId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.publishIterationAsync(UUID,UUID,String,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.queryPredictions(UUID projectId, PredictionQueryToken query)
  name: queryPredictions(UUID projectId, PredictionQueryToken query)
  nameWithType: Trainings.queryPredictions(UUID projectId, PredictionQueryToken query)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters used to query the predictions. Limited to combining 2 tags. </p>
    name: query
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken&text=PredictionQueryToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PredictionQueryResult object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult&text=PredictionQueryResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get images that were sent to your prediction endpoint.</p>

    <p></p>
  syntax: public PredictionQueryResult queryPredictions(UUID projectId, PredictionQueryToken query)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.queryPredictions(UUID,PredictionQueryToken)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.queryPredictionsAsync(UUID projectId, PredictionQueryToken query)
  name: queryPredictionsAsync(UUID projectId, PredictionQueryToken query)
  nameWithType: Trainings.queryPredictionsAsync(UUID projectId, PredictionQueryToken query)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters used to query the predictions. Limited to combining 2 tags. </p>
    name: query
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryToken&text=PredictionQueryToken" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PredictionQueryResult object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.PredictionQueryResult&text=PredictionQueryResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get images that were sent to your prediction endpoint.</p>

    <p></p>
  syntax: public Observable<PredictionQueryResult> queryPredictionsAsync(UUID projectId, PredictionQueryToken query)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.queryPredictionsAsync(UUID,PredictionQueryToken)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImage()
  name: quickTestImage()
  nameWithType: Trainings.quickTestImage()
  returns:
    description: <p>the first stage of the quickTestImage call </p>
    type: <xref href="TrainingsQuickTestImageDefinitionStages.WithProjectId?alt=TrainingsQuickTestImageDefinitionStages.WithProjectId&text=TrainingsQuickTestImageDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Quick test an image.</p>

    <p></p>
  syntax: public TrainingsQuickTestImageDefinitionStages.WithProjectId quickTestImage()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImage(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  name: quickTestImage(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  nameWithType: Trainings.quickTestImage(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: quickTestImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageOptionalParameter&text=QuickTestImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Quick test an image.</p>

    <p></p>
  syntax: public ImagePrediction quickTestImage(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImage(UUID,byte [],QuickTestImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageAsync(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  name: quickTestImageAsync(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  nameWithType: Trainings.quickTestImageAsync(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports images up to 6MB. </p>
    name: imageData
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: quickTestImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageOptionalParameter&text=QuickTestImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Quick test an image.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> quickTestImageAsync(UUID projectId, byte[] imageData, QuickTestImageOptionalParameter quickTestImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageAsync(UUID,byte [],QuickTestImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageUrl()
  name: quickTestImageUrl()
  nameWithType: Trainings.quickTestImageUrl()
  returns:
    description: <p>the first stage of the quickTestImageUrl call </p>
    type: <xref href="TrainingsQuickTestImageUrlDefinitionStages.WithProjectId?alt=TrainingsQuickTestImageUrlDefinitionStages.WithProjectId&text=TrainingsQuickTestImageUrlDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Quick test an image url.</p>

    <p></p>
  syntax: public TrainingsQuickTestImageUrlDefinitionStages.WithProjectId quickTestImageUrl()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageUrl()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageUrl(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  name: quickTestImageUrl(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  nameWithType: Trainings.quickTestImageUrl(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  parameters:
  - description: <p>The project to evaluate against. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: quickTestImageUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageUrlOptionalParameter&text=QuickTestImageUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImagePrediction object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Quick test an image url.</p>

    <p></p>
  syntax: public ImagePrediction quickTestImageUrl(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageUrl(UUID,String,QuickTestImageUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageUrlAsync(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  name: quickTestImageUrlAsync(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  nameWithType: Trainings.quickTestImageUrlAsync(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  parameters:
  - description: <p>The project to evaluate against. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Url of the image. </p>
    name: url
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: quickTestImageUrlOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.QuickTestImageUrlOptionalParameter&text=QuickTestImageUrlOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImagePrediction object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.ImagePrediction&text=ImagePrediction" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Quick test an image url.</p>

    <p></p>
  syntax: public Observable<ImagePrediction> quickTestImageUrlAsync(UUID projectId, String url, QuickTestImageUrlOptionalParameter quickTestImageUrlOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.quickTestImageUrlAsync(UUID,String,QuickTestImageUrlOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.trainProject()
  name: trainProject()
  nameWithType: Trainings.trainProject()
  returns:
    description: <p>the first stage of the trainProject call </p>
    type: <xref href="TrainingsTrainProjectDefinitionStages.WithProjectId?alt=TrainingsTrainProjectDefinitionStages.WithProjectId&text=TrainingsTrainProjectDefinitionStages.WithProjectId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Queues project for training.</p>

    <p></p>
  syntax: public TrainingsTrainProjectDefinitionStages.WithProjectId trainProject()
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.trainProject()
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.trainProject(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  name: trainProject(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  nameWithType: Trainings.trainProject(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: trainProjectOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.TrainProjectOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.TrainProjectOptionalParameter&text=TrainProjectOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Iteration object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Queues project for training.</p>

    <p></p>
  syntax: public Iteration trainProject(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.trainProject(UUID,TrainProjectOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.trainProjectAsync(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  name: trainProjectAsync(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  nameWithType: Trainings.trainProjectAsync(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: trainProjectOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.TrainProjectOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.TrainProjectOptionalParameter&text=TrainProjectOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Iteration object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Queues project for training.</p>

    <p></p>
  syntax: public Observable<Iteration> trainProjectAsync(UUID projectId, TrainProjectOptionalParameter trainProjectOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.trainProjectAsync(UUID,TrainProjectOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.unpublishIteration(UUID projectId, UUID iterationId)
  name: unpublishIteration(UUID projectId, UUID iterationId)
  nameWithType: Trainings.unpublishIteration(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Unpublish a specific iteration.</p>

    <p></p>
  syntax: public void unpublishIteration(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.unpublishIteration(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.unpublishIterationAsync(UUID projectId, UUID iterationId)
  name: unpublishIterationAsync(UUID projectId, UUID iterationId)
  nameWithType: Trainings.unpublishIterationAsync(UUID projectId, UUID iterationId)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unpublish a specific iteration.</p>

    <p></p>
  syntax: public Observable<Void> unpublishIterationAsync(UUID projectId, UUID iterationId)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.unpublishIterationAsync(UUID,UUID)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateIteration(UUID projectId, UUID iterationId, String name)
  name: updateIteration(UUID projectId, UUID iterationId, String name)
  nameWithType: Trainings.updateIteration(UUID projectId, UUID iterationId, String name)
  parameters:
  - description: <p>Project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Gets or sets the name of the iteration. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Iteration object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a specific iteration.</p>

    <p></p>
  syntax: public Iteration updateIteration(UUID projectId, UUID iterationId, String name)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateIteration(UUID,UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateIterationAsync(UUID projectId, UUID iterationId, String name)
  name: updateIterationAsync(UUID projectId, UUID iterationId, String name)
  nameWithType: Trainings.updateIterationAsync(UUID projectId, UUID iterationId, String name)
  parameters:
  - description: <p>Project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Iteration id. </p>
    name: iterationId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>Gets or sets the name of the iteration. </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Iteration object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Iteration&text=Iteration" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a specific iteration.</p>

    <p></p>
  syntax: public Observable<Iteration> updateIterationAsync(UUID projectId, UUID iterationId, String name)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateIterationAsync(UUID,UUID,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateProject(UUID projectId, Project updatedProject)
  name: updateProject(UUID projectId, Project updatedProject)
  nameWithType: Trainings.updateProject(UUID projectId, Project updatedProject)
  parameters:
  - description: <p>The id of the project to update. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The updated project model. </p>
    name: updatedProject
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Project object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a specific project.</p>

    <p></p>
  syntax: public Project updateProject(UUID projectId, Project updatedProject)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateProject(UUID,Project)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateProjectAsync(UUID projectId, Project updatedProject)
  name: updateProjectAsync(UUID projectId, Project updatedProject)
  nameWithType: Trainings.updateProjectAsync(UUID projectId, Project updatedProject)
  parameters:
  - description: <p>The id of the project to update. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The updated project model. </p>
    name: updatedProject
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Project object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Project&text=Project" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a specific project.</p>

    <p></p>
  syntax: public Observable<Project> updateProjectAsync(UUID projectId, Project updatedProject)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateProjectAsync(UUID,Project)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateTag(UUID projectId, UUID tagId, Tag updatedTag)
  name: updateTag(UUID projectId, UUID tagId, Tag updatedTag)
  nameWithType: Trainings.updateTag(UUID projectId, UUID tagId, Tag updatedTag)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the target tag. </p>
    name: tagId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The updated tag model. </p>
    name: updatedTag
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CustomVisionErrorException?alt=CustomVisionErrorException&text=CustomVisionErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Tag object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update a tag.</p>

    <p></p>
  syntax: public Tag updateTag(UUID projectId, UUID tagId, Tag updatedTag)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateTag(UUID,UUID,Tag)
- fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateTagAsync(UUID projectId, UUID tagId, Tag updatedTag)
  name: updateTagAsync(UUID projectId, UUID tagId, Tag updatedTag)
  nameWithType: Trainings.updateTagAsync(UUID projectId, UUID tagId, Tag updatedTag)
  parameters:
  - description: <p>The project id. </p>
    name: projectId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The id of the target tag. </p>
    name: tagId
    type: <xref href="UUID?alt=UUID&text=UUID" data-throw-if-not-resolved="False"/>
  - description: <p>The updated tag model. </p>
    name: updatedTag
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Tag object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag?alt=com.microsoft.azure.cognitiveservices.vision.customvision.training.models.Tag&text=Tag" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Update a tag.</p>

    <p></p>
  syntax: public Observable<Tag> updateTagAsync(UUID projectId, UUID tagId, Tag updatedTag)
  uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings.updateTagAsync(UUID,UUID,Tag)
nameWithType: Trainings
syntax: public interface Trainings
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings
fullName: com.microsoft.azure.cognitiveservices.vision.customvision.training.Trainings
name: Trainings
package: com.microsoft.azure.cognitiveservices.vision.customvision.training
summary: <p>An instance of this class provides access to all the operations defined in Trainings. </p>
metadata: {}
