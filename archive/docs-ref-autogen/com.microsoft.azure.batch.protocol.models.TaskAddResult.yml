### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.error()
  name: error()
  nameWithType: TaskAddResult.error()
  returns:
    description: <p>the error value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.BatchError?alt=com.microsoft.azure.batch.protocol.models.BatchError&text=BatchError" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the error value.</p>

    <p></p>
  syntax: public BatchError error()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.error()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.eTag()
  name: eTag()
  nameWithType: TaskAddResult.eTag()
  returns:
    description: <p>the eTag value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get you can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime.</p>

    <p></p>
  syntax: public String eTag()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.eTag()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.lastModified()
  name: lastModified()
  nameWithType: TaskAddResult.lastModified()
  returns:
    description: <p>the lastModified value </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the lastModified value.</p>

    <p></p>
  syntax: public DateTime lastModified()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.lastModified()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.location()
  name: location()
  nameWithType: TaskAddResult.location()
  returns:
    description: <p>the location value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the location value.</p>

    <p></p>
  syntax: public String location()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.location()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.status()
  name: status()
  nameWithType: TaskAddResult.status()
  returns:
    description: <p>the status value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddStatus?alt=com.microsoft.azure.batch.protocol.models.TaskAddStatus&text=TaskAddStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'success', 'clientError', 'serverError'.</p>

    <p></p>
  syntax: public TaskAddStatus status()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.status()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.taskId()
  name: taskId()
  nameWithType: TaskAddResult.taskId()
  returns:
    description: <p>the taskId value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the taskId value.</p>

    <p></p>
  syntax: public String taskId()
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.taskId()
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.withError(BatchError error)
  name: withError(BatchError error)
  nameWithType: TaskAddResult.withError(BatchError error)
  parameters:
  - description: <p>the error value to set </p>
    name: error
    type: <xref href="com.microsoft.azure.batch.protocol.models.BatchError?alt=com.microsoft.azure.batch.protocol.models.BatchError&text=BatchError" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddResult object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddResult&text=TaskAddResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the error value.</p>

    <p></p>
  syntax: public TaskAddResult withError(BatchError error)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.withError(BatchError)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.withETag(String eTag)
  name: withETag(String eTag)
  nameWithType: TaskAddResult.withETag(String eTag)
  parameters:
  - description: <p>the eTag value to set </p>
    name: eTag
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddResult object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddResult&text=TaskAddResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set you can use this to detect whether the task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the job in the meantime.</p>

    <p></p>
  syntax: public TaskAddResult withETag(String eTag)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.withETag(String)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.withLastModified(DateTime lastModified)
  name: withLastModified(DateTime lastModified)
  nameWithType: TaskAddResult.withLastModified(DateTime lastModified)
  parameters:
  - description: <p>the lastModified value to set </p>
    name: lastModified
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddResult object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddResult&text=TaskAddResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the lastModified value.</p>

    <p></p>
  syntax: public TaskAddResult withLastModified(DateTime lastModified)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.withLastModified(DateTime)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.withLocation(String location)
  name: withLocation(String location)
  nameWithType: TaskAddResult.withLocation(String location)
  parameters:
  - description: <p>the location value to set </p>
    name: location
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddResult object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddResult&text=TaskAddResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the location value.</p>

    <p></p>
  syntax: public TaskAddResult withLocation(String location)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.withLocation(String)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.withStatus(TaskAddStatus status)
  name: withStatus(TaskAddStatus status)
  nameWithType: TaskAddResult.withStatus(TaskAddStatus status)
  parameters:
  - description: <p>the status value to set </p>
    name: status
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddStatus?alt=com.microsoft.azure.batch.protocol.models.TaskAddStatus&text=TaskAddStatus" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddResult object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddResult&text=TaskAddResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'success', 'clientError', 'serverError'.</p>

    <p></p>
  syntax: public TaskAddResult withStatus(TaskAddStatus status)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.withStatus(TaskAddStatus)
- fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult.withTaskId(String taskId)
  name: withTaskId(String taskId)
  nameWithType: TaskAddResult.withTaskId(String taskId)
  parameters:
  - description: <p>the taskId value to set </p>
    name: taskId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the TaskAddResult object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskAddResult?alt=com.microsoft.azure.batch.protocol.models.TaskAddResult&text=TaskAddResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the taskId value.</p>

    <p></p>
  syntax: public TaskAddResult withTaskId(String taskId)
  uid: com.microsoft.azure.batch.protocol.models.TaskAddResult.withTaskId(String)
nameWithType: TaskAddResult
syntax: public class TaskAddResult
type: class
uid: com.microsoft.azure.batch.protocol.models.TaskAddResult
fullName: com.microsoft.azure.batch.protocol.models.TaskAddResult
name: TaskAddResult
package: com.microsoft.azure.batch.protocol.models
summary: <p>Result for a single task added as part of an add task collection operation. </p>
metadata: {}
