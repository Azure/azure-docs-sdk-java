### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  name: CloudToDeviceMessageConnectionHandler(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  nameWithType: CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  parameters:
  - name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: azureSasCredential
    type: <xref href="AzureSasCredential?alt=AzureSasCredential&text=AzureSasCredential" data-throw-if-not-resolved="False"/>
  - name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - name: errorProcessor
    type: Consumer&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.ErrorContext?alt=com.microsoft.azure.sdk.iot.service.messaging.ErrorContext&text=ErrorContext" data-throw-if-not-resolved="False"/>&gt;
  - name: proxyOptions
    type: <xref href="com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions" data-throw-if-not-resolved="False"/>
  - name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  - name: keepAliveIntervalSeconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public CloudToDeviceMessageConnectionHandler(String hostName, AzureSasCredential azureSasCredential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String,AzureSasCredential,IotHubServiceClientProtocol,Consumer<ErrorContext>,ProxyOptions,SSLContext,int)
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String connectionString, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  name: CloudToDeviceMessageConnectionHandler(String connectionString, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  nameWithType: CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String connectionString, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  parameters:
  - name: connectionString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - name: errorProcessor
    type: Consumer&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.ErrorContext?alt=com.microsoft.azure.sdk.iot.service.messaging.ErrorContext&text=ErrorContext" data-throw-if-not-resolved="False"/>&gt;
  - name: proxyOptions
    type: <xref href="com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions" data-throw-if-not-resolved="False"/>
  - name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  - name: keepAliveIntervalSeconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public CloudToDeviceMessageConnectionHandler(String connectionString, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String,IotHubServiceClientProtocol,Consumer<ErrorContext>,ProxyOptions,SSLContext,int)
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  name: CloudToDeviceMessageConnectionHandler(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  nameWithType: CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  parameters:
  - name: hostName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: credential
    type: <xref href="TokenCredential?alt=TokenCredential&text=TokenCredential" data-throw-if-not-resolved="False"/>
  - name: protocol
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.messaging.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol" data-throw-if-not-resolved="False"/>
  - name: errorProcessor
    type: Consumer&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.ErrorContext?alt=com.microsoft.azure.sdk.iot.service.messaging.ErrorContext&text=ErrorContext" data-throw-if-not-resolved="False"/>&gt;
  - name: proxyOptions
    type: <xref href="com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions" data-throw-if-not-resolved="False"/>
  - name: sslContext
    type: <xref href="SSLContext?alt=SSLContext&text=SSLContext" data-throw-if-not-resolved="False"/>
  - name: keepAliveIntervalSeconds
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  syntax: public CloudToDeviceMessageConnectionHandler(String hostName, TokenCredential credential, IotHubServiceClientProtocol protocol, Consumer<ErrorContext> errorProcessor, ProxyOptions proxyOptions, SSLContext sslContext, int keepAliveIntervalSeconds)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.CloudToDeviceMessageConnectionHandler(String,TokenCredential,IotHubServiceClientProtocol,Consumer<ErrorContext>,ProxyOptions,SSLContext,int)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="BaseHandler" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandler" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandler.errorProcessor
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.getConnectionId()
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.hostName
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onAuthenticationFailed(IotHubException)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onConnectionBound(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onConnectionInit(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onConnectionLocalClose(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onConnectionLocalOpen(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onConnectionRemoteClose(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onConnectionRemoteOpen(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onLinkLocalClose(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onLinkLocalOpen(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onLinkRemoteClose(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onLinkRemoteOpen(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onReactorInit(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onSessionLocalClose(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onSessionLocalOpen(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onSessionRemoteClose(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onSessionRemoteOpen(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandlerWithCleanup.onTransportError(Event)
- com.microsoft.azure.sdk.iot.service.transport.amqps.ErrorLoggingBaseHandler.protonJExceptionParser
- com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.verifyConnectionWasOpened()
methods:
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.closeAsync(Runnable onConnectionClosedCallback)
  name: closeAsync(Runnable onConnectionClosedCallback)
  nameWithType: CloudToDeviceMessageConnectionHandler.closeAsync(Runnable onConnectionClosedCallback)
  parameters:
  - name: onConnectionClosedCallback
    type: <xref href="Runnable?alt=Runnable&text=Runnable" data-throw-if-not-resolved="False"/>
  syntax: public void closeAsync(Runnable onConnectionClosedCallback)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.closeAsync(Runnable)
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.isOpen()
  name: isOpen()
  nameWithType: CloudToDeviceMessageConnectionHandler.isOpen()
  returns:
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isOpen()
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.isOpen()
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onAuthenticationSucceeded()
  name: onAuthenticationSucceeded()
  nameWithType: CloudToDeviceMessageConnectionHandler.onAuthenticationSucceeded()
  syntax: public void onAuthenticationSucceeded()
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onAuthenticationSucceeded()
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onReactorFinal(Event event)
  name: onReactorFinal(Event event)
  nameWithType: CloudToDeviceMessageConnectionHandler.onReactorFinal(Event event)
  parameters:
  - name: event
    type: <xref href="Event?alt=Event&text=Event" data-throw-if-not-resolved="False"/>
  syntax: public void onReactorFinal(Event event)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onReactorFinal(Event)
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onReceiverLinkRemoteOpen()
  name: onReceiverLinkRemoteOpen()
  nameWithType: CloudToDeviceMessageConnectionHandler.onReceiverLinkRemoteOpen()
  syntax: public void onReceiverLinkRemoteOpen()
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onReceiverLinkRemoteOpen()
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onSenderLinkRemoteOpen()
  name: onSenderLinkRemoteOpen()
  nameWithType: CloudToDeviceMessageConnectionHandler.onSenderLinkRemoteOpen()
  syntax: public void onSenderLinkRemoteOpen()
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.onSenderLinkRemoteOpen()
- fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.sendAsync(String deviceId, String moduleId, Message iotHubMessage, Consumer<SendResult> callback, Object context)
  name: sendAsync(String deviceId, String moduleId, Message iotHubMessage, Consumer<SendResult> callback, Object context)
  nameWithType: CloudToDeviceMessageConnectionHandler.sendAsync(String deviceId, String moduleId, Message iotHubMessage, Consumer<SendResult> callback, Object context)
  parameters:
  - name: deviceId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: moduleId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: iotHubMessage
    type: <xref href="com.microsoft.azure.sdk.iot.service.messaging.Message?alt=com.microsoft.azure.sdk.iot.service.messaging.Message&text=Message" data-throw-if-not-resolved="False"/>
  - name: callback
    type: Consumer&lt;<xref href="com.microsoft.azure.sdk.iot.service.messaging.SendResult?alt=com.microsoft.azure.sdk.iot.service.messaging.SendResult&text=SendResult" data-throw-if-not-resolved="False"/>&gt;
  - name: context
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  syntax: public void sendAsync(String deviceId, String moduleId, Message iotHubMessage, Consumer<SendResult> callback, Object context)
  uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler.sendAsync(String,String,Message,Consumer<SendResult>,Object)
nameWithType: CloudToDeviceMessageConnectionHandler
syntax: public class CloudToDeviceMessageConnectionHandler
type: class
uid: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler
fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.CloudToDeviceMessageConnectionHandler
name: CloudToDeviceMessageConnectionHandler
package: com.microsoft.azure.sdk.iot.service.transport.amqps
summary: <p>Instance of the QPID-Proton-J BaseHandler class to override the events what are needed to handle the receive operation Contains and sets connection parameters (path, port, endpoint) Maintains the layers of AMQP protocol (Link, Session, Connection, Transport) Creates and sets SASL authentication for transport </p>
metadata: {}
