### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.sql.SqlServer.Databases.define(String databaseName)
  name: define(String databaseName)
  nameWithType: SqlServer.Databases.define(String databaseName)
  parameters:
  - description: <p>name of the database to be created </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns a stage to specify arguments of the database </p>
    type: <xref href="SqlDatabase.DefinitionStages.Blank?alt=SqlDatabase.DefinitionStages.Blank&text=SqlDatabase.DefinitionStages.Blank" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new database in SQL Server.</p>

    <p></p>
  syntax: public SqlDatabase.DefinitionStages.Blank define(String databaseName)
  uid: com.microsoft.azure.management.sql.SqlServer.Databases.define(String)
- fullName: com.microsoft.azure.management.sql.SqlServer.Databases.delete(String databaseName)
  name: delete(String databaseName)
  nameWithType: SqlServer.Databases.delete(String databaseName)
  parameters:
  - description: <p>name of the database to delete </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete specified database in the server.</p>

    <p></p>
  syntax: public void delete(String databaseName)
  uid: com.microsoft.azure.management.sql.SqlServer.Databases.delete(String)
- fullName: com.microsoft.azure.management.sql.SqlServer.Databases.deleteAsync(String databaseName)
  name: deleteAsync(String databaseName)
  nameWithType: SqlServer.Databases.deleteAsync(String databaseName)
  parameters:
  - description: <p>name of the database to delete </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>observable for the delete operation </p>
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete specified database in the server.</p>

    <p></p>
  syntax: public Completable deleteAsync(String databaseName)
  uid: com.microsoft.azure.management.sql.SqlServer.Databases.deleteAsync(String)
- fullName: com.microsoft.azure.management.sql.SqlServer.Databases.get(String databaseName)
  name: get(String databaseName)
  nameWithType: SqlServer.Databases.get(String databaseName)
  parameters:
  - description: <p>name of the sql database to get </p>
    name: databaseName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Returns the database with in the SQL Server </p>
    type: <xref href="com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a particular sql database.</p>

    <p></p>
  syntax: public SqlDatabase get(String databaseName)
  uid: com.microsoft.azure.management.sql.SqlServer.Databases.get(String)
- fullName: com.microsoft.azure.management.sql.SqlServer.Databases.list()
  name: list()
  nameWithType: SqlServer.Databases.list()
  returns:
    description: <p>list of databases for the server. </p>
    type: List&lt;<xref href="com.microsoft.azure.management.sql.SqlDatabase?alt=com.microsoft.azure.management.sql.SqlDatabase&text=SqlDatabase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns all the databases for the server.</p>

    <p></p>
  syntax: public List<SqlDatabase> list()
  uid: com.microsoft.azure.management.sql.SqlServer.Databases.list()
nameWithType: SqlServer.Databases
syntax: public interface Databases
type: interface
uid: com.microsoft.azure.management.sql.SqlServer.Databases
fullName: com.microsoft.azure.management.sql.SqlServer.Databases
name: SqlServer.Databases
package: com.microsoft.azure.management.sql
summary: <p>Entry point to databases from the SQL Server. </p>
metadata: {}
