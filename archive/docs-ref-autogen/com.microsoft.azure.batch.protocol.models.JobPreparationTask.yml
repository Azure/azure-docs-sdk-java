### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine()
  name: commandLine()
  nameWithType: JobPreparationTask.commandLine()
  returns:
    description: <p>the commandLine value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public String commandLine()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.commandLine()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints()
  name: constraints()
  nameWithType: JobPreparationTask.constraints()
  returns:
    description: <p>the constraints value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the constraints value.</p>

    <p></p>
  syntax: public TaskConstraints constraints()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.constraints()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings()
  name: containerSettings()
  nameWithType: JobPreparationTask.containerSettings()
  returns:
    description: <p>the containerSettings value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public TaskContainerSettings containerSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.containerSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings()
  name: environmentSettings()
  nameWithType: JobPreparationTask.environmentSettings()
  returns:
    description: <p>the environmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the environmentSettings value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> environmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.environmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id()
  name: id()
  nameWithType: JobPreparationTask.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same ID as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.id()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess()
  name: rerunOnNodeRebootAfterSuccess()
  nameWithType: JobPreparationTask.rerunOnNodeRebootAfterSuccess()
  returns:
    description: <p>the rerunOnNodeRebootAfterSuccess value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true.</p>

    <p></p>
  syntax: public Boolean rerunOnNodeRebootAfterSuccess()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.rerunOnNodeRebootAfterSuccess()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles()
  name: resourceFiles()
  nameWithType: JobPreparationTask.resourceFiles()
  returns:
    description: <p>the resourceFiles value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public List<ResourceFile> resourceFiles()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.resourceFiles()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity()
  name: userIdentity()
  nameWithType: JobPreparationTask.userIdentity()
  returns:
    description: <p>the userIdentity value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if omitted, the task runs as a non-administrative user unique to the task on Windows nodes, or a non-administrative user unique to the pool on Linux nodes.</p>

    <p></p>
  syntax: public UserIdentity userIdentity()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.userIdentity()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess()
  name: waitForSuccess()
  nameWithType: JobPreparationTask.waitForSuccess()
  returns:
    description: <p>the waitForSuccess value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true.</p>

    <p></p>
  syntax: public Boolean waitForSuccess()
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.waitForSuccess()
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine(String commandLine)
  name: withCommandLine(String commandLine)
  nameWithType: JobPreparationTask.withCommandLine(String commandLine)
  parameters:
  - description: <p>the commandLine value to set </p>
    name: commandLine
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the task working directory), or use the Batch provided environment variable (<a href="https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables">https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables</a>).</p>

    <p></p>
  syntax: public JobPreparationTask withCommandLine(String commandLine)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withCommandLine(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints(TaskConstraints constraints)
  name: withConstraints(TaskConstraints constraints)
  nameWithType: JobPreparationTask.withConstraints(TaskConstraints constraints)
  parameters:
  - description: <p>the constraints value to set </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskConstraints?alt=com.microsoft.azure.batch.protocol.models.TaskConstraints&text=TaskConstraints" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the constraints value.</p>

    <p></p>
  syntax: public JobPreparationTask withConstraints(TaskConstraints constraints)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withConstraints(TaskConstraints)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings(TaskContainerSettings containerSettings)
  name: withContainerSettings(TaskContainerSettings containerSettings)
  nameWithType: JobPreparationTask.withContainerSettings(TaskContainerSettings containerSettings)
  parameters:
  - description: <p>the containerSettings value to set </p>
    name: containerSettings
    type: <xref href="com.microsoft.azure.batch.protocol.models.TaskContainerSettings?alt=com.microsoft.azure.batch.protocol.models.TaskContainerSettings&text=TaskContainerSettings" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set when this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container.</p>

    <p></p>
  syntax: public JobPreparationTask withContainerSettings(TaskContainerSettings containerSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withContainerSettings(TaskContainerSettings)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  name: withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  nameWithType: JobPreparationTask.withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  parameters:
  - description: <p>the environmentSettings value to set </p>
    name: environmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the environmentSettings value.</p>

    <p></p>
  syntax: public JobPreparationTask withEnvironmentSettings(List<EnvironmentSetting> environmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId(String id)
  name: withId(String id)
  nameWithType: JobPreparationTask.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the ID can contain any combination of alphanumeric characters including hyphens and underscores and cannot contain more than 64 characters. If you do not specify this property, the Batch service assigns a default value of 'jobpreparation'. No other task in the job can have the same ID as the Job Preparation task. If you try to submit a task with the same id, the Batch service rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the REST API directly, the HTTP status code is 409 (Conflict).</p>

    <p></p>
  syntax: public JobPreparationTask withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  name: withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  nameWithType: JobPreparationTask.withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  parameters:
  - description: <p>the rerunOnNodeRebootAfterSuccess value to set </p>
    name: rerunOnNodeRebootAfterSuccess
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the Job Preparation task is always rerun if a compute node is reimaged, or if the Job Preparation task did not complete (e.g. because the reboot occurred while the task was running). Therefore, you should always write a Job Preparation task to be idempotent and to behave correctly if run multiple times. The default value is true.</p>

    <p></p>
  syntax: public JobPreparationTask withRerunOnNodeRebootAfterSuccess(Boolean rerunOnNodeRebootAfterSuccess)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withRerunOnNodeRebootAfterSuccess(Boolean)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles(List<ResourceFile> resourceFiles)
  name: withResourceFiles(List<ResourceFile> resourceFiles)
  nameWithType: JobPreparationTask.withResourceFiles(List<ResourceFile> resourceFiles)
  parameters:
  - description: <p>the resourceFiles value to set </p>
    name: resourceFiles
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.ResourceFile?alt=com.microsoft.azure.batch.protocol.models.ResourceFile&text=ResourceFile" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set files listed under this element are located in the task's working directory. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers.</p>

    <p></p>
  syntax: public JobPreparationTask withResourceFiles(List<ResourceFile> resourceFiles)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withResourceFiles(List<ResourceFile>)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity(UserIdentity userIdentity)
  name: withUserIdentity(UserIdentity userIdentity)
  nameWithType: JobPreparationTask.withUserIdentity(UserIdentity userIdentity)
  parameters:
  - description: <p>the userIdentity value to set </p>
    name: userIdentity
    type: <xref href="com.microsoft.azure.batch.protocol.models.UserIdentity?alt=com.microsoft.azure.batch.protocol.models.UserIdentity&text=UserIdentity" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if omitted, the task runs as a non-administrative user unique to the task on Windows nodes, or a non-administrative user unique to the pool on Linux nodes.</p>

    <p></p>
  syntax: public JobPreparationTask withUserIdentity(UserIdentity userIdentity)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withUserIdentity(UserIdentity)
- fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess(Boolean waitForSuccess)
  name: withWaitForSuccess(Boolean waitForSuccess)
  nameWithType: JobPreparationTask.withWaitForSuccess(Boolean waitForSuccess)
  parameters:
  - description: <p>the waitForSuccess value to set </p>
    name: waitForSuccess
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobPreparationTask object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if true and the Job Preparation task fails on a compute node, the Batch service retries the Job Preparation task up to its maximum retry count (as specified in the constraints element). If the task has still not completed successfully after all retries, then the Batch service will not schedule tasks of the job to the compute node. The compute node remains active and eligible to run tasks of other jobs. If false, the Batch service will not wait for the Job Preparation task to complete. In this case, other tasks of the job can start executing on the compute node while the Job Preparation task is still running; and even if the Job Preparation task fails, new tasks will continue to be scheduled on the node. The default value is true.</p>

    <p></p>
  syntax: public JobPreparationTask withWaitForSuccess(Boolean waitForSuccess)
  uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask.withWaitForSuccess(Boolean)
nameWithType: JobPreparationTask
syntax: public class JobPreparationTask
type: class
uid: com.microsoft.azure.batch.protocol.models.JobPreparationTask
fullName: com.microsoft.azure.batch.protocol.models.JobPreparationTask
name: JobPreparationTask
package: com.microsoft.azure.batch.protocol.models
summary: '<p>A Job Preparation task to run before any tasks of the job on any given compute node. You can use Job Preparation to prepare a compute node to run tasks for the job. Activities commonly performed in Job Preparation include: Downloading common resource files used by all the tasks in the job. The Job Preparation task can download these common resource files to the shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR), or starting a local service on the compute node so that all tasks of that job can communicate with it. If the Job Preparation task fails (that is, exhausts its retry count before exiting with exit code 0), Batch will not run tasks of this job on the compute node. The node remains ineligible to run tasks of this job until it is reimaged. The node remains active and can be used for other jobs. The Job Preparation task can run multiple times on the same compute node. Therefore, you should write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job Preparation task is run again on the node before scheduling any other task of the job, if rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously complete. If the compute node is reimaged, the Job Preparation task is run again before scheduling any task of the job. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of recovery operations include (but are not limited to) when an unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running tasks is to use some form of checkpointing. </p>'
metadata: {}
