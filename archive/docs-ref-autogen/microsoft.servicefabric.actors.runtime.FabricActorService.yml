### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo)
  name: FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo)
  nameWithType: FabricActorService.FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo)
  parameters:
  - description: <p>Service context the actor service is operating under. </p>
    name: context
    type: <xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>
  - description: <p>Type information of the actor. </p>
    name: actorTypeInfo
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> class.</p>

    <p></p>
  syntax: public FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.FabricActorService(StatefulServiceContext,ActorTypeInformation)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory)
  name: FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory)
  nameWithType: FabricActorService.FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory)
  parameters:
  - description: <p>Service context the actor service is operating under. </p>
    name: context
    type: <xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>
  - description: <p>Type information of the actor. </p>
    name: actorTypeInfo
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  - description: <p>A factory method to create actor objects. </p>
    name: actorFactory
    type: BiFunction&lt;<xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Initializes a new instance of the <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> class.</p>

    <p></p>
  syntax: public FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.FabricActorService(StatefulServiceContext,ActorTypeInformation,BiFunction<FabricActorService, ActorId, ActorBase>)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory, BiFunction<ActorBase, ActorStateProvider, ActorStateManager> stateManagerFactory, ActorStateProvider stateProvider, ActorServiceSettings settings)
  name: FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory, BiFunction<ActorBase, ActorStateProvider, ActorStateManager> stateManagerFactory, ActorStateProvider stateProvider, ActorServiceSettings settings)
  nameWithType: FabricActorService.FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory, BiFunction<ActorBase, ActorStateProvider, ActorStateManager> stateManagerFactory, ActorStateProvider stateProvider, ActorServiceSettings settings)
  parameters:
  - description: <p>Service context the actor service is operating under. </p>
    name: context
    type: <xref href="system.fabric.StatefulServiceContext?alt=system.fabric.StatefulServiceContext&text=StatefulServiceContext" data-throw-if-not-resolved="False"/>
  - description: <p>Type information of the actor. </p>
    name: actorTypeInfo
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  - description: <p>A factory method to create actor objects. </p>
    name: actorFactory
    type: BiFunction&lt;<xref href="microsoft.servicefabric.actors.runtime.FabricActorService?alt=microsoft.servicefabric.actors.runtime.FabricActorService&text=FabricActorService" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>A factory method to create <xref uid="microsoft.servicefabric.actors.runtime.ActorStateManager" data-throw-if-not-resolved="false" data-raw-source="ActorStateManager"></xref>. </p>
    name: stateManagerFactory
    type: BiFunction&lt;<xref href="microsoft.servicefabric.actors.runtime.ActorBase?alt=microsoft.servicefabric.actors.runtime.ActorBase&text=ActorBase" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.runtime.ActorStateProvider?alt=microsoft.servicefabric.actors.runtime.ActorStateProvider&text=ActorStateProvider" data-throw-if-not-resolved="False"/>, <xref href="microsoft.servicefabric.actors.runtime.ActorStateManager?alt=microsoft.servicefabric.actors.runtime.ActorStateManager&text=ActorStateManager" data-throw-if-not-resolved="False"/>&gt;
  - description: <p>State provider to store the state for actor objects. </p>
    name: stateProvider
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorStateProvider?alt=microsoft.servicefabric.actors.runtime.ActorStateProvider&text=ActorStateProvider" data-throw-if-not-resolved="False"/>
  - description: <p>Settings to configures behavior of Actor Service. </p>
    name: settings
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorServiceSettings?alt=microsoft.servicefabric.actors.runtime.ActorServiceSettings&text=ActorServiceSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="microsoft.servicefabric.actors.ActorService" data-throw-if-not-resolved="false" data-raw-source="ActorService"></xref> class.</p>

    <p></p>
  syntax: public FabricActorService(StatefulServiceContext context, ActorTypeInformation actorTypeInfo, BiFunction<FabricActorService, ActorId, ActorBase> actorFactory, BiFunction<ActorBase, ActorStateProvider, ActorStateManager> stateManagerFactory, ActorStateProvider stateProvider, ActorServiceSettings settings)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.FabricActorService(StatefulServiceContext,ActorTypeInformation,BiFunction<FabricActorService, ActorId, ActorBase>,BiFunction<ActorBase, ActorStateProvider, ActorStateManager>,ActorStateProvider,ActorServiceSettings)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.runtime.StatefulServiceBase?alt=microsoft.servicefabric.services.runtime.StatefulServiceBase&text=StatefulServiceBase" data-throw-if-not-resolved="False"/>
inheritedMembers:
- microsoft.servicefabric.services.runtime.StatefulServiceBase.backupAsync(BackupDescription)
- microsoft.servicefabric.services.runtime.StatefulServiceBase.backupAsync(BackupDescription,Duration,CancellationToken)
- microsoft.servicefabric.services.runtime.StatefulServiceBase.getAddresses()
- microsoft.servicefabric.services.runtime.StatefulServiceBase.getPartition()
- microsoft.servicefabric.services.runtime.StatefulServiceBase.getServiceContext()
- microsoft.servicefabric.services.runtime.StatefulServiceBase.getStateProviderReplica()
- microsoft.servicefabric.services.runtime.StatefulServiceBase.onDataLossAsync(RestoreContext,CancellationToken)
- microsoft.servicefabric.services.runtime.StatefulServiceBase.setAddresses(Map<String, String>)
- microsoft.servicefabric.services.runtime.StatefulServiceBase.setPartition(StatefulServicePartition)
- microsoft.servicefabric.services.runtime.StatefulServiceBase.StatefulServiceBase(StatefulServiceContext,StateProviderReplica)
methods:
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.createServiceReplicaListeners()
  name: createServiceReplicaListeners()
  nameWithType: FabricActorService.createServiceReplicaListeners()
  returns:
    description: <p>Endpoint string pairs like {"Endpoints":{"Listener1":"Endpoint1","Listener2":"Endpoint2" ...}} </p>
    type: List&lt;<xref href="microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener?alt=microsoft.servicefabric.services.communication.runtime.ServiceReplicaListener&text=ServiceReplicaListener" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates Service Replica Listeners.</p>

    <p></p>
  syntax: protected List<ServiceReplicaListener> createServiceReplicaListeners()
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.createServiceReplicaListeners()
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  name: deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  nameWithType: FabricActorService.deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.ActorService.deleteActorAsync(ActorId,CancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.ActorId" data-throw-if-not-resolved="false" data-raw-source="ActorId"></xref> of the actor to be deleted. </p>
    name: actorId
    type: <xref href="microsoft.servicefabric.actors.ActorId?alt=microsoft.servicefabric.actors.ActorId&text=ActorId" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of call to server. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an Actor from the Actor service.</p>

    <p>

    An active actor, will be deactivated and its state will also be deleted from state provider. An in-active actor's state will be deleted from state provider. If this method is called for a non-existent actor id in the system, it will be a no-op. </p>
  syntax: public CompletableFuture<?> deleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.deleteActorAsync(ActorId,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  name: getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  nameWithType: FabricActorService.getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  overridden: microsoft.servicefabric.actors.ActorService.getActorsAsync(ContinuationToken,CancellationToken)
  parameters:
  - description: <p>A continuation token to start querying the results from. A null value of continuation token means start returning values form the beginning. </p>
    name: continuationToken
    type: <xref href="microsoft.servicefabric.actors.ContinuationToken?alt=microsoft.servicefabric.actors.ContinuationToken&text=ContinuationToken" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents the asynchronous operation of call to server. </p>
    type: CompletableFuture&lt;<xref href="microsoft.servicefabric.actors.PagedResult?alt=microsoft.servicefabric.actors.PagedResult&text=PagedResult" data-throw-if-not-resolved="False"/>&lt;<xref href="microsoft.servicefabric.actors.ActorInformation?alt=microsoft.servicefabric.actors.ActorInformation&text=ActorInformation" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the list of Actors by querying the actor service.</p>

    <p></p>
  syntax: public CompletableFuture<PagedResult<ActorInformation>> getActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.getActorsAsync(ContinuationToken,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.getActorTypeInformation()
  name: getActorTypeInformation()
  nameWithType: FabricActorService.getActorTypeInformation()
  returns:
    description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.runtime.ActorTypeInformation" data-throw-if-not-resolved="false" data-raw-source="ActorTypeInformation"></xref> for the actor hosted by the service replica. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorTypeInformation?alt=microsoft.servicefabric.actors.runtime.ActorTypeInformation&text=ActorTypeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets ActorTypeInformation for actor service.</p>

    <p></p>
  syntax: public ActorTypeInformation getActorTypeInformation()
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.getActorTypeInformation()
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.getSettings()
  name: getSettings()
  nameWithType: FabricActorService.getSettings()
  returns:
    description: <p>Settings for the actor service. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorServiceSettings?alt=microsoft.servicefabric.actors.runtime.ActorServiceSettings&text=ActorServiceSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets settings for the actor service.</p>

    <p></p>
  syntax: public ActorServiceSettings getSettings()
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.getSettings()
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.getStateProvider()
  name: getStateProvider()
  nameWithType: FabricActorService.getStateProvider()
  returns:
    description: >-
      <p>

        <xref uid="microsoft.servicefabric.actors.runtime.ActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="ActorStateProvider"></xref> representing the state provider for the actor service. </p>
    type: <xref href="microsoft.servicefabric.actors.runtime.ActorStateProvider?alt=microsoft.servicefabric.actors.runtime.ActorStateProvider&text=ActorStateProvider" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets a <xref uid="microsoft.servicefabric.actors.runtime.ActorStateProvider" data-throw-if-not-resolved="false" data-raw-source="ActorStateProvider"></xref> that represents the state provider for the actor service.</p>

    <p></p>
  syntax: public ActorStateProvider getStateProvider()
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.getStateProvider()
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.onAbort()
  name: onAbort()
  nameWithType: FabricActorService.onAbort()
  summary: <p>Overrides <xref uid="microsoft.servicefabric.services.runtime.StatefulServiceBase.onAbort()" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceBase#onAbort()"></xref></p>
  syntax: protected void onAbort()
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.onAbort()
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  name: onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  nameWithType: FabricActorService.onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  parameters:
  - description: <p>New role for the replica. </p>
    name: newRole
    type: <xref href="system.fabric.ReplicaRole?alt=system.fabric.ReplicaRole&text=ReplicaRole" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation performed when the replica becomes primary. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Overrides <xref uid="microsoft.servicefabric.services.runtime.StatefulServiceBase.onChangeRoleAsync(ReplicaRole,CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceBase#onChangeRoleAsync(ReplicaRole, system.fabric.CancellationToken)"></xref></p>
  syntax: protected CompletableFuture<?> onChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.onChangeRoleAsync(ReplicaRole,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.onCloseAsync(CancellationToken cancellationToken)
  name: onCloseAsync(CancellationToken cancellationToken)
  nameWithType: FabricActorService.onCloseAsync(CancellationToken cancellationToken)
  parameters:
  - description: <p>The token to monitor for cancellation requests. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation performed when the replica is closed. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Overrides <xref uid="microsoft.servicefabric.services.runtime.StatefulServiceBase.onCloseAsync(CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceBase#onCloseAsync(CancellationToken)"></xref></p>

    <p></p>
  syntax: protected CompletableFuture<?> onCloseAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.onCloseAsync(CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  name: onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  nameWithType: FabricActorService.onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  parameters:
  - description: <p>for this service replica. </p>
    name: openMode
    type: <xref href="system.fabric.ReplicaOpenMode?alt=system.fabric.ReplicaOpenMode&text=ReplicaOpenMode" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="" data-throw-if-not-resolved="false" data-raw-source="CompletableFuture"></xref> that represents outstanding operation. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>This method is called as the final step of opening the service. Override this method to be notified that Open has completed for this replica's internal components.</p>

    <p></p>
  syntax: protected CompletableFuture<?> onOpenAsync(ReplicaOpenMode openMode, CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.onOpenAsync(ReplicaOpenMode,CancellationToken)
- fullName: microsoft.servicefabric.actors.runtime.FabricActorService.runAsync(CancellationToken cancellationToken)
  name: runAsync(CancellationToken cancellationToken)
  nameWithType: FabricActorService.runAsync(CancellationToken cancellationToken)
  parameters:
  - description: >-
      <p>

        <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object to indicate the cancellation status of the operation. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A task that represents the asynchronous operation of loading reminders when the replica becomes primary. </p>
    type: <xref href="CompletableFuture%3C%3F%3E?alt=CompletableFuture%3C%3F%3E&text=CompletableFuture%3C%3F%3E" data-throw-if-not-resolved="False"/>
  summary: <p>Overrides <xref uid="microsoft.servicefabric.services.runtime.StatefulServiceBase.runAsync(CancellationToken)" data-throw-if-not-resolved="false" data-raw-source="StatefulServiceBase#runAsync(system.fabric.CancellationToken)"></xref></p>
  syntax: protected CompletableFuture<?> runAsync(CancellationToken cancellationToken)
  uid: microsoft.servicefabric.actors.runtime.FabricActorService.runAsync(CancellationToken)
nameWithType: FabricActorService
syntax: public class FabricActorService extends StatefulServiceBase implements ActorService
type: class
uid: microsoft.servicefabric.actors.runtime.FabricActorService
fullName: microsoft.servicefabric.actors.runtime.FabricActorService
name: FabricActorService
package: microsoft.servicefabric.actors.runtime
summary: >-
  <p>Represents the base class for Microsoft Service Fabric based reliable actors service. </p>

  <p>

    <b>Remarks:</b>Derive from this class to implement your own custom actor service if you want to override any service level behavior for your actors. </p>
metadata: {}
