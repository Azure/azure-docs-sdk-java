### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkus()
  name: listNodeAgentSkus()
  nameWithType: Accounts.listNodeAgentSkus()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;NodeAgentSku&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public PagedList<NodeAgentSku> listNodeAgentSkus()
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkus()
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkus(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  name: listNodeAgentSkus(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  nameWithType: Accounts.listNodeAgentSkus(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions&text=AccountListNodeAgentSkusOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;NodeAgentSku&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public PagedList<NodeAgentSku> listNodeAgentSkus(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkus(final AccountListNodeAgentSkusOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync()
  name: listNodeAgentSkusAsync()
  nameWithType: Accounts.listNodeAgentSkusAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<Page<NodeAgentSku>> listNodeAgentSkusAsync()
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync()
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  name: listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  nameWithType: Accounts.listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions&text=AccountListNodeAgentSkusOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<Page<NodeAgentSku>> listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions, final ListOperationCallback<NodeAgentSku> serviceCallback)
  name: listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions, final ListOperationCallback<NodeAgentSku> serviceCallback)
  nameWithType: Accounts.listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions, final ListOperationCallback<NodeAgentSku> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions&text=AccountListNodeAgentSkusOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public ServiceFuture<List<NodeAgentSku>> listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions, final ListOperationCallback<NodeAgentSku> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync(final AccountListNodeAgentSkusOptions,final ListOperationCallback<NodeAgentSku>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync(final ListOperationCallback<NodeAgentSku> serviceCallback)
  name: listNodeAgentSkusAsync(final ListOperationCallback<NodeAgentSku> serviceCallback)
  nameWithType: Accounts.listNodeAgentSkusAsync(final ListOperationCallback<NodeAgentSku> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public ServiceFuture<List<NodeAgentSku>> listNodeAgentSkusAsync(final ListOperationCallback<NodeAgentSku> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusAsync(final ListOperationCallback<NodeAgentSku>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNext(final String nextPageLink)
  name: listNodeAgentSkusNext(final String nextPageLink)
  nameWithType: Accounts.listNodeAgentSkusNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;NodeAgentSku&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public PagedList<NodeAgentSku> listNodeAgentSkusNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNext(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  name: listNodeAgentSkusNext(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  nameWithType: Accounts.listNodeAgentSkusNext(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions&text=AccountListNodeAgentSkusNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;NodeAgentSku&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public PagedList<NodeAgentSku> listNodeAgentSkusNext(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNext(final String,final AccountListNodeAgentSkusNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String nextPageLink)
  name: listNodeAgentSkusNextAsync(final String nextPageLink)
  nameWithType: Accounts.listNodeAgentSkusNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<Page<NodeAgentSku>> listNodeAgentSkusNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  name: listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  nameWithType: Accounts.listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions&text=AccountListNodeAgentSkusNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<Page<NodeAgentSku>> listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String,final AccountListNodeAgentSkusNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  name: listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  nameWithType: Accounts.listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions&text=AccountListNodeAgentSkusNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public ServiceFuture<List<NodeAgentSku>> listNodeAgentSkusNextAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String,final AccountListNodeAgentSkusNextOptions,final ServiceFuture<List<NodeAgentSku>>,final ListOperationCallback<NodeAgentSku>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String nextPageLink, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  name: listNodeAgentSkusNextAsync(final String nextPageLink, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  nameWithType: Accounts.listNodeAgentSkusNextAsync(final String nextPageLink, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public ServiceFuture<List<NodeAgentSku>> listNodeAgentSkusNextAsync(final String nextPageLink, final ServiceFuture<List<NodeAgentSku>> serviceFuture, final ListOperationCallback<NodeAgentSku> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextAsync(final String,final ServiceFuture<List<NodeAgentSku>>,final ListOperationCallback<NodeAgentSku>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink)
  name: listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Accounts.listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders&text=AccountListNodeAgentSkusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<NodeAgentSku>, AccountListNodeAgentSkusHeaders>> listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  name: listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  nameWithType: Accounts.listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusNextOptions&text=AccountListNodeAgentSkusNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders&text=AccountListNodeAgentSkusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<NodeAgentSku>, AccountListNodeAgentSkusHeaders>> listNodeAgentSkusNextWithServiceResponseAsync(final String nextPageLink, final AccountListNodeAgentSkusNextOptions accountListNodeAgentSkusNextOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusNextWithServiceResponseAsync(final String,final AccountListNodeAgentSkusNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusWithServiceResponseAsync()
  name: listNodeAgentSkusWithServiceResponseAsync()
  nameWithType: Accounts.listNodeAgentSkusWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders&text=AccountListNodeAgentSkusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<NodeAgentSku>, AccountListNodeAgentSkusHeaders>> listNodeAgentSkusWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusWithServiceResponseAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  name: listNodeAgentSkusWithServiceResponseAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  nameWithType: Accounts.listNodeAgentSkusWithServiceResponseAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListNodeAgentSkusOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusOptions&text=AccountListNodeAgentSkusOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;NodeAgentSku&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.NodeAgentSku?alt=com.microsoft.azure.batch.protocol.models.NodeAgentSku&text=NodeAgentSku" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListNodeAgentSkusHeaders&text=AccountListNodeAgentSkusHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists all node agent SKUs supported by the Azure Batch service.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<NodeAgentSku>, AccountListNodeAgentSkusHeaders>> listNodeAgentSkusWithServiceResponseAsync(final AccountListNodeAgentSkusOptions accountListNodeAgentSkusOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listNodeAgentSkusWithServiceResponseAsync(final AccountListNodeAgentSkusOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCounts()
  name: listPoolNodeCounts()
  nameWithType: Accounts.listPoolNodeCounts()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolNodeCounts&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public PagedList<PoolNodeCounts> listPoolNodeCounts()
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCounts()
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCounts(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  name: listPoolNodeCounts(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  nameWithType: Accounts.listPoolNodeCounts(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions&text=AccountListPoolNodeCountsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolNodeCounts&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public PagedList<PoolNodeCounts> listPoolNodeCounts(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCounts(final AccountListPoolNodeCountsOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync()
  name: listPoolNodeCountsAsync()
  nameWithType: Accounts.listPoolNodeCountsAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<Page<PoolNodeCounts>> listPoolNodeCountsAsync()
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync()
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  name: listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  nameWithType: Accounts.listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions&text=AccountListPoolNodeCountsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<Page<PoolNodeCounts>> listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  name: listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  nameWithType: Accounts.listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions&text=AccountListPoolNodeCountsOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolNodeCounts>> listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync(final AccountListPoolNodeCountsOptions,final ListOperationCallback<PoolNodeCounts>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync(final ListOperationCallback<PoolNodeCounts> serviceCallback)
  name: listPoolNodeCountsAsync(final ListOperationCallback<PoolNodeCounts> serviceCallback)
  nameWithType: Accounts.listPoolNodeCountsAsync(final ListOperationCallback<PoolNodeCounts> serviceCallback)
  parameters:
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolNodeCounts>> listPoolNodeCountsAsync(final ListOperationCallback<PoolNodeCounts> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsAsync(final ListOperationCallback<PoolNodeCounts>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNext(final String nextPageLink)
  name: listPoolNodeCountsNext(final String nextPageLink)
  nameWithType: Accounts.listPoolNodeCountsNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolNodeCounts&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public PagedList<PoolNodeCounts> listPoolNodeCountsNext(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNext(final String)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNext(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  name: listPoolNodeCountsNext(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  nameWithType: Accounts.listPoolNodeCountsNext(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions&text=AccountListPoolNodeCountsNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="BatchErrorException?alt=BatchErrorException&text=BatchErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;PoolNodeCounts&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public PagedList<PoolNodeCounts> listPoolNodeCountsNext(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNext(final String,final AccountListPoolNodeCountsNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String nextPageLink)
  name: listPoolNodeCountsNextAsync(final String nextPageLink)
  nameWithType: Accounts.listPoolNodeCountsNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<Page<PoolNodeCounts>> listPoolNodeCountsNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  name: listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  nameWithType: Accounts.listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions&text=AccountListPoolNodeCountsNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<Page<PoolNodeCounts>> listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String,final AccountListPoolNodeCountsNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  name: listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  nameWithType: Accounts.listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions&text=AccountListPoolNodeCountsNextOptions" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolNodeCounts>> listPoolNodeCountsNextAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String,final AccountListPoolNodeCountsNextOptions,final ServiceFuture<List<PoolNodeCounts>>,final ListOperationCallback<PoolNodeCounts>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  name: listPoolNodeCountsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  nameWithType: Accounts.listPoolNodeCountsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public ServiceFuture<List<PoolNodeCounts>> listPoolNodeCountsNextAsync(final String nextPageLink, final ServiceFuture<List<PoolNodeCounts>> serviceFuture, final ListOperationCallback<PoolNodeCounts> serviceCallback)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextAsync(final String,final ServiceFuture<List<PoolNodeCounts>>,final ListOperationCallback<PoolNodeCounts>)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink)
  name: listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: Accounts.listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders&text=AccountListPoolNodeCountsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolNodeCounts>, AccountListPoolNodeCountsHeaders>> listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  name: listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  nameWithType: Accounts.listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsNextOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsNextOptions&text=AccountListPoolNodeCountsNextOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders&text=AccountListPoolNodeCountsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolNodeCounts>, AccountListPoolNodeCountsHeaders>> listPoolNodeCountsNextWithServiceResponseAsync(final String nextPageLink, final AccountListPoolNodeCountsNextOptions accountListPoolNodeCountsNextOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsNextWithServiceResponseAsync(final String,final AccountListPoolNodeCountsNextOptions)
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsWithServiceResponseAsync()
  name: listPoolNodeCountsWithServiceResponseAsync()
  nameWithType: Accounts.listPoolNodeCountsWithServiceResponseAsync()
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders&text=AccountListPoolNodeCountsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolNodeCounts>, AccountListPoolNodeCountsHeaders>> listPoolNodeCountsWithServiceResponseAsync()
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsWithServiceResponseAsync()
- fullName: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsWithServiceResponseAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  name: listPoolNodeCountsWithServiceResponseAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  nameWithType: Accounts.listPoolNodeCountsWithServiceResponseAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  parameters:
  - description: <p>Additional parameters for the operation </p>
    name: accountListPoolNodeCountsOptions
    type: final <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsOptions&text=AccountListPoolNodeCountsOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;PoolNodeCounts&gt; object </p>
    type: Observable&lt;ServiceResponseWithHeaders&lt;Page&lt;<xref href="com.microsoft.azure.batch.protocol.models.PoolNodeCounts?alt=com.microsoft.azure.batch.protocol.models.PoolNodeCounts&text=PoolNodeCounts" data-throw-if-not-resolved="False"/>&gt;, <xref href="com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders?alt=com.microsoft.azure.batch.protocol.models.AccountListPoolNodeCountsHeaders&text=AccountListPoolNodeCountsHeaders" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the number of nodes in each state, grouped by pool.</p>

    <p></p>
  syntax: public Observable<ServiceResponseWithHeaders<Page<PoolNodeCounts>, AccountListPoolNodeCountsHeaders>> listPoolNodeCountsWithServiceResponseAsync(final AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
  uid: com.microsoft.azure.batch.protocol.Accounts.listPoolNodeCountsWithServiceResponseAsync(final AccountListPoolNodeCountsOptions)
nameWithType: Accounts
syntax: public interface Accounts
type: interface
uid: com.microsoft.azure.batch.protocol.Accounts
fullName: com.microsoft.azure.batch.protocol.Accounts
name: Accounts
package: com.microsoft.azure.batch.protocol
summary: <p>An instance of this class provides access to all the operations defined in Accounts. </p>
metadata: {}
