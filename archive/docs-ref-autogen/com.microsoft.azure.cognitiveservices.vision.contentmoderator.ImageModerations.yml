### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateFileInput()
  name: evaluateFileInput()
  nameWithType: ImageModerations.evaluateFileInput()
  returns:
    description: <p>the first stage of the evaluateFileInput call </p>
    type: <xref href="ImageModerationsEvaluateFileInputDefinitionStages.WithImageStream?alt=ImageModerationsEvaluateFileInputDefinitionStages.WithImageStream&text=ImageModerationsEvaluateFileInputDefinitionStages.WithImageStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public ImageModerationsEvaluateFileInputDefinitionStages.WithImageStream evaluateFileInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateFileInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateFileInput(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  name: evaluateFileInput(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  nameWithType: ImageModerations.evaluateFileInput(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  parameters:
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: evaluateFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateFileInputOptionalParameter&text=EvaluateFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Evaluate object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate&text=Evaluate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public Evaluate evaluateFileInput(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateFileInput(byte [],EvaluateFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateFileInputAsync(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  name: evaluateFileInputAsync(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  nameWithType: ImageModerations.evaluateFileInputAsync(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  parameters:
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: evaluateFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateFileInputOptionalParameter&text=EvaluateFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Evaluate object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate&text=Evaluate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public Observable<Evaluate> evaluateFileInputAsync(byte[] imageStream, EvaluateFileInputOptionalParameter evaluateFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateFileInputAsync(byte [],EvaluateFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateMethod()
  name: evaluateMethod()
  nameWithType: ImageModerations.evaluateMethod()
  returns:
    description: <p>the first stage of the evaluateMethod call </p>
    type: <xref href="ImageModerationsEvaluateMethodDefinitionStages.WithExecute?alt=ImageModerationsEvaluateMethodDefinitionStages.WithExecute&text=ImageModerationsEvaluateMethodDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public ImageModerationsEvaluateMethodDefinitionStages.WithExecute evaluateMethod()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateMethod()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateMethod(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  name: evaluateMethod(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  nameWithType: ImageModerations.evaluateMethod(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: evaluateMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateMethodOptionalParameter&text=EvaluateMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Evaluate object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate&text=Evaluate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public Evaluate evaluateMethod(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateMethod(EvaluateMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateMethodAsync(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  name: evaluateMethodAsync(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  nameWithType: ImageModerations.evaluateMethodAsync(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: evaluateMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateMethodOptionalParameter&text=EvaluateMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Evaluate object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate&text=Evaluate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public Observable<Evaluate> evaluateMethodAsync(EvaluateMethodOptionalParameter evaluateMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateMethodAsync(EvaluateMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateUrlInput()
  name: evaluateUrlInput()
  nameWithType: ImageModerations.evaluateUrlInput()
  returns:
    description: <p>the first stage of the evaluateUrlInput call </p>
    type: <xref href="ImageModerationsEvaluateUrlInputDefinitionStages.WithContentType?alt=ImageModerationsEvaluateUrlInputDefinitionStages.WithContentType&text=ImageModerationsEvaluateUrlInputDefinitionStages.WithContentType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public ImageModerationsEvaluateUrlInputDefinitionStages.WithContentType evaluateUrlInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateUrlInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateUrlInput(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  name: evaluateUrlInput(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  nameWithType: ImageModerations.evaluateUrlInput(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: evaluateUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateUrlInputOptionalParameter&text=EvaluateUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Evaluate object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate&text=Evaluate" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public Evaluate evaluateUrlInput(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateUrlInput(String,BodyModelModel,EvaluateUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateUrlInputAsync(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  name: evaluateUrlInputAsync(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  nameWithType: ImageModerations.evaluateUrlInputAsync(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: evaluateUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.EvaluateUrlInputOptionalParameter&text=EvaluateUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Evaluate object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Evaluate&text=Evaluate" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns probabilities of the image containing racy or adult content.</p>

    <p></p>
  syntax: public Observable<Evaluate> evaluateUrlInputAsync(String contentType, BodyModelModel imageUrl, EvaluateUrlInputOptionalParameter evaluateUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.evaluateUrlInputAsync(String,BodyModelModel,EvaluateUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFaces()
  name: findFaces()
  nameWithType: ImageModerations.findFaces()
  returns:
    description: <p>the first stage of the findFaces call </p>
    type: <xref href="ImageModerationsFindFacesDefinitionStages.WithExecute?alt=ImageModerationsFindFacesDefinitionStages.WithExecute&text=ImageModerationsFindFacesDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public ImageModerationsFindFacesDefinitionStages.WithExecute findFaces()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFaces()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFaces(FindFacesOptionalParameter findFacesOptionalParameter)
  name: findFaces(FindFacesOptionalParameter findFacesOptionalParameter)
  nameWithType: ImageModerations.findFaces(FindFacesOptionalParameter findFacesOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findFacesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesOptionalParameter&text=FindFacesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FoundFaces object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces&text=FoundFaces" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public FoundFaces findFaces(FindFacesOptionalParameter findFacesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFaces(FindFacesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesAsync(FindFacesOptionalParameter findFacesOptionalParameter)
  name: findFacesAsync(FindFacesOptionalParameter findFacesOptionalParameter)
  nameWithType: ImageModerations.findFacesAsync(FindFacesOptionalParameter findFacesOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findFacesOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesOptionalParameter&text=FindFacesOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FoundFaces object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces&text=FoundFaces" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public Observable<FoundFaces> findFacesAsync(FindFacesOptionalParameter findFacesOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesAsync(FindFacesOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesFileInput()
  name: findFacesFileInput()
  nameWithType: ImageModerations.findFacesFileInput()
  returns:
    description: <p>the first stage of the findFacesFileInput call </p>
    type: <xref href="ImageModerationsFindFacesFileInputDefinitionStages.WithImageStream?alt=ImageModerationsFindFacesFileInputDefinitionStages.WithImageStream&text=ImageModerationsFindFacesFileInputDefinitionStages.WithImageStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public ImageModerationsFindFacesFileInputDefinitionStages.WithImageStream findFacesFileInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesFileInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesFileInput(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  name: findFacesFileInput(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  nameWithType: ImageModerations.findFacesFileInput(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  parameters:
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findFacesFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesFileInputOptionalParameter&text=FindFacesFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FoundFaces object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces&text=FoundFaces" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public FoundFaces findFacesFileInput(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesFileInput(byte [],FindFacesFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesFileInputAsync(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  name: findFacesFileInputAsync(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  nameWithType: ImageModerations.findFacesFileInputAsync(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  parameters:
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findFacesFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesFileInputOptionalParameter&text=FindFacesFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FoundFaces object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces&text=FoundFaces" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public Observable<FoundFaces> findFacesFileInputAsync(byte[] imageStream, FindFacesFileInputOptionalParameter findFacesFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesFileInputAsync(byte [],FindFacesFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesUrlInput()
  name: findFacesUrlInput()
  nameWithType: ImageModerations.findFacesUrlInput()
  returns:
    description: <p>the first stage of the findFacesUrlInput call </p>
    type: <xref href="ImageModerationsFindFacesUrlInputDefinitionStages.WithContentType?alt=ImageModerationsFindFacesUrlInputDefinitionStages.WithContentType&text=ImageModerationsFindFacesUrlInputDefinitionStages.WithContentType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public ImageModerationsFindFacesUrlInputDefinitionStages.WithContentType findFacesUrlInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesUrlInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesUrlInput(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  name: findFacesUrlInput(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  nameWithType: ImageModerations.findFacesUrlInput(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findFacesUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesUrlInputOptionalParameter&text=FindFacesUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the FoundFaces object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces&text=FoundFaces" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public FoundFaces findFacesUrlInput(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesUrlInput(String,BodyModelModel,FindFacesUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesUrlInputAsync(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  name: findFacesUrlInputAsync(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  nameWithType: ImageModerations.findFacesUrlInputAsync(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: findFacesUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FindFacesUrlInputOptionalParameter&text=FindFacesUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the FoundFaces object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.FoundFaces&text=FoundFaces" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns the list of faces found.</p>

    <p></p>
  syntax: public Observable<FoundFaces> findFacesUrlInputAsync(String contentType, BodyModelModel imageUrl, FindFacesUrlInputOptionalParameter findFacesUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.findFacesUrlInputAsync(String,BodyModelModel,FindFacesUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchFileInput()
  name: matchFileInput()
  nameWithType: ImageModerations.matchFileInput()
  returns:
    description: <p>the first stage of the matchFileInput call </p>
    type: <xref href="ImageModerationsMatchFileInputDefinitionStages.WithImageStream?alt=ImageModerationsMatchFileInputDefinitionStages.WithImageStream&text=ImageModerationsMatchFileInputDefinitionStages.WithImageStream" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public ImageModerationsMatchFileInputDefinitionStages.WithImageStream matchFileInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchFileInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchFileInput(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  name: matchFileInput(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  nameWithType: ImageModerations.matchFileInput(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  parameters:
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: matchFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchFileInputOptionalParameter&text=MatchFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the MatchResponse object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse&text=MatchResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public MatchResponse matchFileInput(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchFileInput(byte [],MatchFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchFileInputAsync(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  name: matchFileInputAsync(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  nameWithType: ImageModerations.matchFileInputAsync(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  parameters:
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: matchFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchFileInputOptionalParameter&text=MatchFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MatchResponse object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse&text=MatchResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public Observable<MatchResponse> matchFileInputAsync(byte[] imageStream, MatchFileInputOptionalParameter matchFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchFileInputAsync(byte [],MatchFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchMethod()
  name: matchMethod()
  nameWithType: ImageModerations.matchMethod()
  returns:
    description: <p>the first stage of the matchMethod call </p>
    type: <xref href="ImageModerationsMatchMethodDefinitionStages.WithExecute?alt=ImageModerationsMatchMethodDefinitionStages.WithExecute&text=ImageModerationsMatchMethodDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public ImageModerationsMatchMethodDefinitionStages.WithExecute matchMethod()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchMethod()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchMethod(MatchMethodOptionalParameter matchMethodOptionalParameter)
  name: matchMethod(MatchMethodOptionalParameter matchMethodOptionalParameter)
  nameWithType: ImageModerations.matchMethod(MatchMethodOptionalParameter matchMethodOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: matchMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchMethodOptionalParameter&text=MatchMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the MatchResponse object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse&text=MatchResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public MatchResponse matchMethod(MatchMethodOptionalParameter matchMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchMethod(MatchMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchMethodAsync(MatchMethodOptionalParameter matchMethodOptionalParameter)
  name: matchMethodAsync(MatchMethodOptionalParameter matchMethodOptionalParameter)
  nameWithType: ImageModerations.matchMethodAsync(MatchMethodOptionalParameter matchMethodOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: matchMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchMethodOptionalParameter&text=MatchMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MatchResponse object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse&text=MatchResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public Observable<MatchResponse> matchMethodAsync(MatchMethodOptionalParameter matchMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchMethodAsync(MatchMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchUrlInput()
  name: matchUrlInput()
  nameWithType: ImageModerations.matchUrlInput()
  returns:
    description: <p>the first stage of the matchUrlInput call </p>
    type: <xref href="ImageModerationsMatchUrlInputDefinitionStages.WithContentType?alt=ImageModerationsMatchUrlInputDefinitionStages.WithContentType&text=ImageModerationsMatchUrlInputDefinitionStages.WithContentType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public ImageModerationsMatchUrlInputDefinitionStages.WithContentType matchUrlInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchUrlInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchUrlInput(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  name: matchUrlInput(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  nameWithType: ImageModerations.matchUrlInput(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: matchUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchUrlInputOptionalParameter&text=MatchUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the MatchResponse object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse&text=MatchResponse" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public MatchResponse matchUrlInput(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchUrlInput(String,BodyModelModel,MatchUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchUrlInputAsync(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  name: matchUrlInputAsync(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  nameWithType: ImageModerations.matchUrlInputAsync(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  parameters:
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: matchUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchUrlInputOptionalParameter&text=MatchUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the MatchResponse object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.MatchResponse&text=MatchResponse" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href="/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe"&gt;this&lt;/a&gt; API. Returns ID and tags of matching image.&lt;br/&gt; &lt;br/&gt; Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.</p>

    <p></p>
  syntax: public Observable<MatchResponse> matchUrlInputAsync(String contentType, BodyModelModel imageUrl, MatchUrlInputOptionalParameter matchUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.matchUrlInputAsync(String,BodyModelModel,MatchUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRFileInput()
  name: oCRFileInput()
  nameWithType: ImageModerations.oCRFileInput()
  returns:
    description: <p>the first stage of the oCRFileInput call </p>
    type: <xref href="ImageModerationsOCRFileInputDefinitionStages.WithLanguage?alt=ImageModerationsOCRFileInputDefinitionStages.WithLanguage&text=ImageModerationsOCRFileInputDefinitionStages.WithLanguage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public ImageModerationsOCRFileInputDefinitionStages.WithLanguage oCRFileInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRFileInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRFileInput(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  name: oCRFileInput(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  nameWithType: ImageModerations.oCRFileInput(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  parameters:
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: oCRFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRFileInputOptionalParameter&text=OCRFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OCR object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR&text=OCR" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public OCR oCRFileInput(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRFileInput(String,byte [],OCRFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRFileInputAsync(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  name: oCRFileInputAsync(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  nameWithType: ImageModerations.oCRFileInputAsync(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  parameters:
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: oCRFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRFileInputOptionalParameter&text=OCRFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OCR object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR&text=OCR" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public Observable<OCR> oCRFileInputAsync(String language, byte[] imageStream, OCRFileInputOptionalParameter oCRFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRFileInputAsync(String,byte [],OCRFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRMethod()
  name: oCRMethod()
  nameWithType: ImageModerations.oCRMethod()
  returns:
    description: <p>the first stage of the oCRMethod call </p>
    type: <xref href="ImageModerationsOCRMethodDefinitionStages.WithLanguage?alt=ImageModerationsOCRMethodDefinitionStages.WithLanguage&text=ImageModerationsOCRMethodDefinitionStages.WithLanguage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public ImageModerationsOCRMethodDefinitionStages.WithLanguage oCRMethod()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRMethod()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRMethod(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  name: oCRMethod(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  nameWithType: ImageModerations.oCRMethod(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  parameters:
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: oCRMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRMethodOptionalParameter&text=OCRMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OCR object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR&text=OCR" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public OCR oCRMethod(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRMethod(String,OCRMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRMethodAsync(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  name: oCRMethodAsync(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  nameWithType: ImageModerations.oCRMethodAsync(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  parameters:
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: oCRMethodOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRMethodOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRMethodOptionalParameter&text=OCRMethodOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OCR object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR&text=OCR" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public Observable<OCR> oCRMethodAsync(String language, OCRMethodOptionalParameter oCRMethodOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRMethodAsync(String,OCRMethodOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRUrlInput()
  name: oCRUrlInput()
  nameWithType: ImageModerations.oCRUrlInput()
  returns:
    description: <p>the first stage of the oCRUrlInput call </p>
    type: <xref href="ImageModerationsOCRUrlInputDefinitionStages.WithLanguage?alt=ImageModerationsOCRUrlInputDefinitionStages.WithLanguage&text=ImageModerationsOCRUrlInputDefinitionStages.WithLanguage" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public ImageModerationsOCRUrlInputDefinitionStages.WithLanguage oCRUrlInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRUrlInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRUrlInput(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  name: oCRUrlInput(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  nameWithType: ImageModerations.oCRUrlInput(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  parameters:
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: oCRUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRUrlInputOptionalParameter&text=OCRUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the OCR object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR&text=OCR" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public OCR oCRUrlInput(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRUrlInput(String,String,BodyModelModel,OCRUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRUrlInputAsync(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  name: oCRUrlInputAsync(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  nameWithType: ImageModerations.oCRUrlInputAsync(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  parameters:
  - description: <p>Language of the terms. </p>
    name: language
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: oCRUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCRUrlInputOptionalParameter&text=OCRUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the OCR object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.OCR&text=OCR" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.</p>

    <p></p>
  syntax: public Observable<OCR> oCRUrlInputAsync(String language, String contentType, BodyModelModel imageUrl, OCRUrlInputOptionalParameter oCRUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations.oCRUrlInputAsync(String,String,BodyModelModel,OCRUrlInputOptionalParameter)
nameWithType: ImageModerations
syntax: public interface ImageModerations
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations
fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ImageModerations
name: ImageModerations
package: com.microsoft.azure.cognitiveservices.vision.contentmoderator
summary: <p>An instance of this class provides access to all the operations defined in ImageModerations. </p>
metadata: {}
