### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  name: TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  nameWithType: TableEncryptionPolicy.TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  parameters:
  - description: <p>An object of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> that is used to wrap/unwrap the content encryption key. </p>
    name: key
    type: <xref href="com.microsoft.azure.keyvault.core.IKey?alt=com.microsoft.azure.keyvault.core.IKey&text=IKey" data-throw-if-not-resolved="False"/>
  - description: <p>The key resolver used to select the correct key for decrypting existing table entities. </p>
    name: keyResolver
    type: <xref href="com.microsoft.azure.keyvault.core.IKeyResolver?alt=com.microsoft.azure.keyvault.core.IKeyResolver&text=IKeyResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes a new instance of the <xref uid="com.microsoft.azure.storage.table.TableEncryptionPolicy" data-throw-if-not-resolved="false" data-raw-source="TableEncryptionPolicy"></xref> class with the specified key and resolver. </p>

    <p>If the generated policy is intended to be used for encryption, users are expected to provide a key at the minimum. The absence of key will cause an exception to be thrown during encryption. If the generated policy is intended to be used for decryption, users can provide a keyResolver. The client library will - 1. Invoke the key resolver if specified to get the key. 2. If resolver is not specified but a key is specified, match the key id on the key and use it.</p>

    <p></p>
  syntax: public TableEncryptionPolicy(IKey key, IKeyResolver keyResolver)
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.TableEncryptionPolicy(IKey,IKeyResolver)
fields:
- field:
    type: <xref href="com.microsoft.azure.keyvault.core.IKeyResolver?alt=com.microsoft.azure.keyvault.core.IKeyResolver&text=IKeyResolver" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver
  name: keyResolver
  nameWithType: TableEncryptionPolicy.keyResolver
  summary: <p>The <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKeyResolver"></xref> used to select the correct key for decrypting existing table entities. </p>
  syntax: public IKeyResolver keyResolver
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyResolver
- field:
    type: <xref href="com.microsoft.azure.keyvault.core.IKey?alt=com.microsoft.azure.keyvault.core.IKey&text=IKey" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper
  name: keyWrapper
  nameWithType: TableEncryptionPolicy.keyWrapper
  summary: <p>An object of type <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> that is used to wrap/unwrap the content key during encryption. </p>
  syntax: public IKey keyWrapper
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.keyWrapper
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()
  name: getKey()
  nameWithType: TableEncryptionPolicy.getKey()
  returns:
    description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> object. </p>
    type: <xref href="com.microsoft.azure.keyvault.core.IKey?alt=com.microsoft.azure.keyvault.core.IKey&text=IKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> that is used to wrap/unwrap the content key during encryption.</p>

    <p></p>
  syntax: public IKey getKey()
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKey()
- fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()
  name: getKeyResolver()
  nameWithType: TableEncryptionPolicy.getKeyResolver()
  returns:
    description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> given a keyId. </p>
    type: <xref href="com.microsoft.azure.keyvault.core.IKeyResolver?alt=com.microsoft.azure.keyvault.core.IKeyResolver&text=IKeyResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the key resolver used to select the correct key for decrypting existing table entities.</p>

    <p></p>
  syntax: public IKeyResolver getKeyResolver()
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.getKeyResolver()
- fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey key)
  name: setKey(IKey key)
  nameWithType: TableEncryptionPolicy.setKey(IKey key)
  parameters:
  - description: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> object. </p>
    name: key
    type: <xref href="com.microsoft.azure.keyvault.core.IKey?alt=com.microsoft.azure.keyvault.core.IKey&text=IKey" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> that is used to wrap/unwrap the content key during encryption.</p>

    <p></p>
  syntax: public void setKey(IKey key)
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKey(IKey)
- fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  name: setKeyResolver(IKeyResolver keyResolver)
  nameWithType: TableEncryptionPolicy.setKeyResolver(IKeyResolver keyResolver)
  parameters:
  - description: <p>A resolver that returns an <xref uid="" data-throw-if-not-resolved="false" data-raw-source="IKey"></xref> given a keyId. </p>
    name: keyResolver
    type: <xref href="com.microsoft.azure.keyvault.core.IKeyResolver?alt=com.microsoft.azure.keyvault.core.IKeyResolver&text=IKeyResolver" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the key resolver used to select the correct key for decrypting existing table entities.</p>

    <p></p>
  syntax: public void setKeyResolver(IKeyResolver keyResolver)
  uid: com.microsoft.azure.storage.table.TableEncryptionPolicy.setKeyResolver(IKeyResolver)
nameWithType: TableEncryptionPolicy
syntax: public class TableEncryptionPolicy
type: class
uid: com.microsoft.azure.storage.table.TableEncryptionPolicy
fullName: com.microsoft.azure.storage.table.TableEncryptionPolicy
name: TableEncryptionPolicy
package: com.microsoft.azure.storage.table
summary: <p>Represents a table encryption policy that is used to perform envelope encryption/decryption of Azure table entities. </p>
metadata: {}
