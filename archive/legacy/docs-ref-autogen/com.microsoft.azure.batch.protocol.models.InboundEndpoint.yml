### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.backendPort()
  name: backendPort()
  nameWithType: InboundEndpoint.backendPort()
  returns:
    description: <p>the backendPort value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the backendPort value.</p>

    <p></p>
  syntax: public int backendPort()
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.backendPort()
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.frontendPort()
  name: frontendPort()
  nameWithType: InboundEndpoint.frontendPort()
  returns:
    description: <p>the frontendPort value </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the frontendPort value.</p>

    <p></p>
  syntax: public int frontendPort()
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.frontendPort()
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.name()
  name: name()
  nameWithType: InboundEndpoint.name()
  returns:
    description: <p>the name value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name value.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.name()
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.protocol()
  name: protocol()
  nameWithType: InboundEndpoint.protocol()
  returns:
    description: <p>the protocol value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol?alt=com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol&text=InboundEndpointProtocol" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get possible values include: 'tcp', 'udp'.</p>

    <p></p>
  syntax: public InboundEndpointProtocol protocol()
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.protocol()
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.publicFQDN()
  name: publicFQDN()
  nameWithType: InboundEndpoint.publicFQDN()
  returns:
    description: <p>the publicFQDN value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the publicFQDN value.</p>

    <p></p>
  syntax: public String publicFQDN()
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.publicFQDN()
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.publicIPAddress()
  name: publicIPAddress()
  nameWithType: InboundEndpoint.publicIPAddress()
  returns:
    description: <p>the publicIPAddress value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the publicIPAddress value.</p>

    <p></p>
  syntax: public String publicIPAddress()
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.publicIPAddress()
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withBackendPort(int backendPort)
  name: withBackendPort(int backendPort)
  nameWithType: InboundEndpoint.withBackendPort(int backendPort)
  parameters:
  - description: <p>the backendPort value to set </p>
    name: backendPort
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundEndpoint object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpoint?alt=com.microsoft.azure.batch.protocol.models.InboundEndpoint&text=InboundEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the backendPort value.</p>

    <p></p>
  syntax: public InboundEndpoint withBackendPort(int backendPort)
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withBackendPort(int)
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withFrontendPort(int frontendPort)
  name: withFrontendPort(int frontendPort)
  nameWithType: InboundEndpoint.withFrontendPort(int frontendPort)
  parameters:
  - description: <p>the frontendPort value to set </p>
    name: frontendPort
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundEndpoint object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpoint?alt=com.microsoft.azure.batch.protocol.models.InboundEndpoint&text=InboundEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the frontendPort value.</p>

    <p></p>
  syntax: public InboundEndpoint withFrontendPort(int frontendPort)
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withFrontendPort(int)
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withName(String name)
  name: withName(String name)
  nameWithType: InboundEndpoint.withName(String name)
  parameters:
  - description: <p>the name value to set </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundEndpoint object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpoint?alt=com.microsoft.azure.batch.protocol.models.InboundEndpoint&text=InboundEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name value.</p>

    <p></p>
  syntax: public InboundEndpoint withName(String name)
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withName(String)
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withProtocol(InboundEndpointProtocol protocol)
  name: withProtocol(InboundEndpointProtocol protocol)
  nameWithType: InboundEndpoint.withProtocol(InboundEndpointProtocol protocol)
  parameters:
  - description: <p>the protocol value to set </p>
    name: protocol
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol?alt=com.microsoft.azure.batch.protocol.models.InboundEndpointProtocol&text=InboundEndpointProtocol" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundEndpoint object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpoint?alt=com.microsoft.azure.batch.protocol.models.InboundEndpoint&text=InboundEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set possible values include: 'tcp', 'udp'.</p>

    <p></p>
  syntax: public InboundEndpoint withProtocol(InboundEndpointProtocol protocol)
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withProtocol(InboundEndpointProtocol)
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withPublicFQDN(String publicFQDN)
  name: withPublicFQDN(String publicFQDN)
  nameWithType: InboundEndpoint.withPublicFQDN(String publicFQDN)
  parameters:
  - description: <p>the publicFQDN value to set </p>
    name: publicFQDN
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundEndpoint object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpoint?alt=com.microsoft.azure.batch.protocol.models.InboundEndpoint&text=InboundEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the publicFQDN value.</p>

    <p></p>
  syntax: public InboundEndpoint withPublicFQDN(String publicFQDN)
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withPublicFQDN(String)
- fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withPublicIPAddress(String publicIPAddress)
  name: withPublicIPAddress(String publicIPAddress)
  nameWithType: InboundEndpoint.withPublicIPAddress(String publicIPAddress)
  parameters:
  - description: <p>the publicIPAddress value to set </p>
    name: publicIPAddress
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the InboundEndpoint object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.InboundEndpoint?alt=com.microsoft.azure.batch.protocol.models.InboundEndpoint&text=InboundEndpoint" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the publicIPAddress value.</p>

    <p></p>
  syntax: public InboundEndpoint withPublicIPAddress(String publicIPAddress)
  uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint.withPublicIPAddress(String)
nameWithType: InboundEndpoint
syntax: public class InboundEndpoint
type: class
uid: com.microsoft.azure.batch.protocol.models.InboundEndpoint
fullName: com.microsoft.azure.batch.protocol.models.InboundEndpoint
name: InboundEndpoint
package: com.microsoft.azure.batch.protocol.models
summary: <p>An inbound endpoint on a compute node. </p>
metadata: {}
