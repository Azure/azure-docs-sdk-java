### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.RegistryImpl(String name, RegistryInner innerObject, ContainerRegistryManager manager, final StorageManager storageManager)
  name: RegistryImpl(String name, RegistryInner innerObject, ContainerRegistryManager manager, final StorageManager storageManager)
  nameWithType: RegistryImpl.RegistryImpl(String name, RegistryInner innerObject, ContainerRegistryManager manager, final StorageManager storageManager)
  parameters:
  - name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: innerObject
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>
  - name: manager
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManager?alt=com.microsoft.azure.management.containerregistry.implementation.ContainerRegistryManager&text=ContainerRegistryManager" data-throw-if-not-resolved="False"/>
  - name: storageManager
    type: <xref href="final+StorageManager?alt=final+StorageManager&text=final+StorageManager" data-throw-if-not-resolved="False"/>
  syntax: protected RegistryImpl(String name, RegistryInner innerObject, ContainerRegistryManager manager, final StorageManager storageManager)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.RegistryImpl(String,RegistryInner,ContainerRegistryManager,final StorageManager)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.arm.models.implementation.GroupableResourceImpl&lt;Registry, RegistryInner, RegistryImpl, ContainerRegistryManager&gt;" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.apply()
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync()
- com.microsoft.azure.management.resources.fluentcore.model.Appliable.applyAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.create()
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync(final ServiceCallback<T>)
- com.microsoft.azure.management.resources.fluentcore.model.Creatable.createAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasId.id()
- com.microsoft.azure.management.resources.fluentcore.model.HasInner.inner()
- com.microsoft.azure.management.resources.fluentcore.model.Indexable.key()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasManager.manager()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasName.name()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refresh()
- com.microsoft.azure.management.resources.fluentcore.model.Refreshable.refreshAsync()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.region()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.regionName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.HasResourceGroup.resourceGroupName()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.tags()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.type()
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.UpdateWithTags.withoutTag(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithRegion.withRegion(String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithRegion.withRegion(Region)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTag(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.UpdateWithTags.withTag(String,String)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.DefinitionWithTags.withTags(Map<String, String>)
- com.microsoft.azure.management.resources.fluentcore.arm.models.Resource.UpdateWithTags.withTags(Map<String, String>)
methods:
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.adminUserEnabled()
  name: adminUserEnabled()
  nameWithType: RegistryImpl.adminUserEnabled()
  overridden: com.microsoft.azure.management.containerregistry.Registry.adminUserEnabled()
  returns:
    description: <p>the value that indicates whether the admin user is enabled </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean adminUserEnabled()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.adminUserEnabled()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.afterPostRunAsync(boolean isGroupFaulted)
  name: afterPostRunAsync(boolean isGroupFaulted)
  nameWithType: RegistryImpl.afterPostRunAsync(boolean isGroupFaulted)
  parameters:
  - name: isGroupFaulted
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="Completable?alt=Completable&text=Completable" data-throw-if-not-resolved="False"/>
  syntax: public Completable afterPostRunAsync(boolean isGroupFaulted)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.afterPostRunAsync(boolean)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.createResourceAsync()
  name: createResourceAsync()
  nameWithType: RegistryImpl.createResourceAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.Registry?alt=com.microsoft.azure.management.containerregistry.Registry&text=Registry" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<Registry> createResourceAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.createResourceAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.creationDate()
  name: creationDate()
  nameWithType: RegistryImpl.creationDate()
  overridden: com.microsoft.azure.management.containerregistry.Registry.creationDate()
  returns:
    description: <p>the creation date of the container registry in ISO8601 format </p>
    type: <xref href="DateTime?alt=DateTime&text=DateTime" data-throw-if-not-resolved="False"/>
  syntax: public DateTime creationDate()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.creationDate()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.defineWebhook(String name)
  name: defineWebhook(String name)
  nameWithType: RegistryImpl.defineWebhook(String name)
  overridden: com.microsoft.azure.management.containerregistry.Registry.UpdateStages.WithWebhook.defineWebhook(String)
  parameters:
  - description: <p>the name of the new webhook </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the first stage of the new webhook definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Begins the definition of a new webhook to be added to this container registry. </p>
  syntax: public WebhookImpl defineWebhook(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.defineWebhook(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getBuildSourceUploadUrl()
  name: getBuildSourceUploadUrl()
  nameWithType: RegistryImpl.getBuildSourceUploadUrl()
  overridden: com.microsoft.azure.management.containerregistry.Registry.getBuildSourceUploadUrl()
  returns:
    description: <p>returns the upload location for the user to be able to upload the source. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.SourceUploadDefinition?alt=com.microsoft.azure.management.containerregistry.SourceUploadDefinition&text=SourceUploadDefinition" data-throw-if-not-resolved="False"/>
  syntax: public SourceUploadDefinition getBuildSourceUploadUrl()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getBuildSourceUploadUrl()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getBuildSourceUploadUrlAsync()
  name: getBuildSourceUploadUrlAsync()
  nameWithType: RegistryImpl.getBuildSourceUploadUrlAsync()
  overridden: com.microsoft.azure.management.containerregistry.Registry.getBuildSourceUploadUrlAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.SourceUploadDefinition?alt=com.microsoft.azure.management.containerregistry.SourceUploadDefinition&text=SourceUploadDefinition" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the upload location for the user to be able to upload the source asynchronously.</p>

    <p></p>
  syntax: public Observable<SourceUploadDefinition> getBuildSourceUploadUrlAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getBuildSourceUploadUrlAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getCredentials()
  name: getCredentials()
  nameWithType: RegistryImpl.getCredentials()
  overridden: com.microsoft.azure.management.containerregistry.Registry.getCredentials()
  returns:
    description: <p>the login credentials for the specified container registry </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>
  syntax: public RegistryCredentials getCredentials()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getCredentials()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getCredentialsAsync()
  name: getCredentialsAsync()
  nameWithType: RegistryImpl.getCredentialsAsync()
  overridden: com.microsoft.azure.management.containerregistry.Registry.getCredentialsAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>&gt;
  syntax: public Observable<RegistryCredentials> getCredentialsAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getCredentialsAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getInnerAsync()
  name: getInnerAsync()
  nameWithType: RegistryImpl.getInnerAsync()
  returns:
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryInner?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryInner&text=RegistryInner" data-throw-if-not-resolved="False"/>&gt;
  syntax: protected Observable<RegistryInner> getInnerAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.getInnerAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.listQuotaUsages()
  name: listQuotaUsages()
  nameWithType: RegistryImpl.listQuotaUsages()
  overridden: com.microsoft.azure.management.containerregistry.Registry.listQuotaUsages()
  returns:
    description: <p>the list of container registry's quota usages </p>
    type: Collection&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryUsage?alt=com.microsoft.azure.management.containerregistry.RegistryUsage&text=RegistryUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Collection<RegistryUsage> listQuotaUsages()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.listQuotaUsages()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.listQuotaUsagesAsync()
  name: listQuotaUsagesAsync()
  nameWithType: RegistryImpl.listQuotaUsagesAsync()
  overridden: com.microsoft.azure.management.containerregistry.Registry.listQuotaUsagesAsync()
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryUsage?alt=com.microsoft.azure.management.containerregistry.RegistryUsage&text=RegistryUsage" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the quota usages for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryUsage> listQuotaUsagesAsync()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.listQuotaUsagesAsync()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.loginServerUrl()
  name: loginServerUrl()
  nameWithType: RegistryImpl.loginServerUrl()
  overridden: com.microsoft.azure.management.containerregistry.Registry.loginServerUrl()
  returns:
    description: <p>the URL that can be used to log into the container registry </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String loginServerUrl()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.loginServerUrl()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.regenerateCredential(AccessKeyType accessKeyType)
  name: regenerateCredential(AccessKeyType accessKeyType)
  nameWithType: RegistryImpl.regenerateCredential(AccessKeyType accessKeyType)
  overridden: com.microsoft.azure.management.containerregistry.Registry.regenerateCredential(AccessKeyType)
  parameters:
  - description: <p>the admin user access key name to regenerate the value for </p>
    name: accessKeyType
    type: <xref href="com.microsoft.azure.management.containerregistry.AccessKeyType?alt=com.microsoft.azure.management.containerregistry.AccessKeyType&text=AccessKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the result of the regeneration </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>
  summary: <p>Regenerates one of the login credentials for the specified container registry. </p>
  syntax: public RegistryCredentials regenerateCredential(AccessKeyType accessKeyType)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.regenerateCredential(AccessKeyType)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.regenerateCredentialAsync(AccessKeyType accessKeyType)
  name: regenerateCredentialAsync(AccessKeyType accessKeyType)
  nameWithType: RegistryImpl.regenerateCredentialAsync(AccessKeyType accessKeyType)
  overridden: com.microsoft.azure.management.containerregistry.Registry.regenerateCredentialAsync(AccessKeyType)
  parameters:
  - description: <p>the admin user access key name to regenerate the value for </p>
    name: accessKeyType
    type: <xref href="com.microsoft.azure.management.containerregistry.AccessKeyType?alt=com.microsoft.azure.management.containerregistry.AccessKeyType&text=AccessKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>a representation of the future computation of this call </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.containerregistry.RegistryCredentials?alt=com.microsoft.azure.management.containerregistry.RegistryCredentials&text=RegistryCredentials" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Regenerates one of the login credentials for the specified container registry.</p>

    <p></p>
  syntax: public Observable<RegistryCredentials> regenerateCredentialAsync(AccessKeyType accessKeyType)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.regenerateCredentialAsync(AccessKeyType)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.scheduleRun()
  name: scheduleRun()
  nameWithType: RegistryImpl.scheduleRun()
  overridden: com.microsoft.azure.management.containerregistry.Registry.scheduleRun()
  returns:
    description: <p>returns entry point to manage the builds such as queued quick builds and queued build tasks for the container registry. </p>
    type: <xref href="RegistryTaskRun.DefinitionStages.BlankFromRegistry?alt=RegistryTaskRun.DefinitionStages.BlankFromRegistry&text=RegistryTaskRun.DefinitionStages.BlankFromRegistry" data-throw-if-not-resolved="False"/>
  syntax: public RegistryTaskRun.DefinitionStages.BlankFromRegistry scheduleRun()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.scheduleRun()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.sku()
  name: sku()
  nameWithType: RegistryImpl.sku()
  overridden: com.microsoft.azure.management.containerregistry.Registry.sku()
  returns:
    description: <p>the SKU of the container registry. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.Sku?alt=com.microsoft.azure.management.containerregistry.Sku&text=Sku" data-throw-if-not-resolved="False"/>
  syntax: public Sku sku()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.sku()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.storageAccountId()
  name: storageAccountId()
  nameWithType: RegistryImpl.storageAccountId()
  overridden: com.microsoft.azure.management.containerregistry.Registry.storageAccountId()
  returns:
    description: <p>the ID of the storage account for the container registry; 'null' if container register SKU a managed tier </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String storageAccountId()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.storageAccountId()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.storageAccountName()
  name: storageAccountName()
  nameWithType: RegistryImpl.storageAccountName()
  overridden: com.microsoft.azure.management.containerregistry.Registry.storageAccountName()
  returns:
    description: <p>the name of the storage account for the container registry; 'null' if container register SKU a managed tier </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String storageAccountName()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.storageAccountName()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.update()
  name: update()
  nameWithType: RegistryImpl.update()
  overridden: com.microsoft.azure.management.resources.fluentcore.model.Updatable.update()
  returns:
    description: <p>the stage of new resource update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Begins an update for a new resource. </p>

    <p>This is the beginning of the builder pattern used to update top level resources in Azure. The final method completing the definition and starting the actual resource creation process in Azure is <xref uid="com.microsoft.azure.management.resources.fluentcore.model.Appliable.apply()" data-throw-if-not-resolved="false" data-raw-source="Appliable#apply()"></xref>.</p>

    <p></p>
  syntax: public RegistryImpl update()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.update()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.updateWebhook(String name)
  name: updateWebhook(String name)
  nameWithType: RegistryImpl.updateWebhook(String name)
  overridden: com.microsoft.azure.management.containerregistry.Registry.UpdateStages.WithWebhook.updateWebhook(String)
  parameters:
  - description: <p>the name of an existing webhook </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the first stage of the webhook update description </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.WebhookImpl?alt=com.microsoft.azure.management.containerregistry.implementation.WebhookImpl&text=WebhookImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Begins the description of an update of an existing webhook of this container registry. </p>
  syntax: public WebhookImpl updateWebhook(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.updateWebhook(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.webhooks()
  name: webhooks()
  nameWithType: RegistryImpl.webhooks()
  overridden: com.microsoft.azure.management.containerregistry.Registry.webhooks()
  returns:
    description: <p>returns entry point to manage container registry webhooks. </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.WebhookOperations?alt=com.microsoft.azure.management.containerregistry.WebhookOperations&text=WebhookOperations" data-throw-if-not-resolved="False"/>
  syntax: public WebhookOperations webhooks()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.webhooks()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withBasicSku()
  name: withBasicSku()
  nameWithType: RegistryImpl.withBasicSku()
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithSku.withBasicSku()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a 'managed' registry with a 'Basic' SKU type. </p>
  syntax: public RegistryImpl withBasicSku()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withBasicSku()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withClassicSku()
  name: withClassicSku()
  nameWithType: RegistryImpl.withClassicSku()
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithSku.withClassicSku()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a container registry with a 'Classic' SKU type. </p>
  syntax: public RegistryImpl withClassicSku()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withClassicSku()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withExistingStorageAccount(StorageAccount storageAccount)
  name: withExistingStorageAccount(StorageAccount storageAccount)
  nameWithType: RegistryImpl.withExistingStorageAccount(StorageAccount storageAccount)
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithStorageAccount.withExistingStorageAccount(StorageAccount)
  parameters:
  - description: <p>the storage account </p>
    name: storageAccount
    type: <xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The parameters of a storage account for the container registry. </p>

    <p>If specified, the storage account must be in the same physical location as the container registry.</p>

    <p></p>
  syntax: public RegistryImpl withExistingStorageAccount(StorageAccount storageAccount)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withExistingStorageAccount(StorageAccount)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withExistingStorageAccount(String id)
  name: withExistingStorageAccount(String id)
  nameWithType: RegistryImpl.withExistingStorageAccount(String id)
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithStorageAccount.withExistingStorageAccount(String)
  parameters:
  - description: <p>the resource ID of the storage account; must be in the same physical location as the container registry </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The ID of an existing storage account for the container registry. </p>

    <p>If specified, the storage account must be in the same physical location as the container registry.</p>

    <p></p>
  syntax: public RegistryImpl withExistingStorageAccount(String id)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withExistingStorageAccount(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withNewStorageAccount(Creatable<StorageAccount> creatable)
  name: withNewStorageAccount(Creatable<StorageAccount> creatable)
  nameWithType: RegistryImpl.withNewStorageAccount(Creatable<StorageAccount> creatable)
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithStorageAccount.withNewStorageAccount(Creatable<StorageAccount>)
  parameters:
  - description: <p>the storage account to create </p>
    name: creatable
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.model.Creatable?alt=com.microsoft.azure.management.resources.fluentcore.model.Creatable&text=Creatable" data-throw-if-not-resolved="False"/>&lt;<xref href="com.microsoft.azure.management.storage.StorageAccount?alt=com.microsoft.azure.management.storage.StorageAccount&text=StorageAccount" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the next stage </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The parameters for a storage account for the container registry. </p>

    <p>If specified, the storage account must be in the same physical location as the container registry.</p>

    <p></p>
  syntax: public RegistryImpl withNewStorageAccount(Creatable<StorageAccount> creatable)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withNewStorageAccount(Creatable<StorageAccount>)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withNewStorageAccount(String storageAccountName)
  name: withNewStorageAccount(String storageAccountName)
  nameWithType: RegistryImpl.withNewStorageAccount(String storageAccountName)
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithStorageAccount.withNewStorageAccount(String)
  parameters:
  - description: <p>the name of the storage account </p>
    name: storageAccountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The parameters for a storage account for the container registry. </p>

    <p>A new storage account with default setting and specified name will be created.</p>

    <p></p>
  syntax: public RegistryImpl withNewStorageAccount(String storageAccountName)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withNewStorageAccount(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withoutRegistryNameAsAdminUser()
  name: withoutRegistryNameAsAdminUser()
  nameWithType: RegistryImpl.withoutRegistryNameAsAdminUser()
  overridden: com.microsoft.azure.management.containerregistry.Registry.UpdateStages.WithAdminUserEnabled.withoutRegistryNameAsAdminUser()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Disable admin user. </p>
  syntax: public RegistryImpl withoutRegistryNameAsAdminUser()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withoutRegistryNameAsAdminUser()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withoutWebhook(String name)
  name: withoutWebhook(String name)
  nameWithType: RegistryImpl.withoutWebhook(String name)
  overridden: com.microsoft.azure.management.containerregistry.Registry.UpdateStages.WithWebhook.withoutWebhook(String)
  parameters:
  - description: <p>name of the webhook to remove </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the next stage of the container registry update </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Removes a webhook from the container registry. </p>
  syntax: public RegistryImpl withoutWebhook(String name)
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withoutWebhook(String)
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withPremiumSku()
  name: withPremiumSku()
  nameWithType: RegistryImpl.withPremiumSku()
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithSku.withPremiumSku()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a 'managed' registry with a 'Premium' SKU type. </p>
  syntax: public RegistryImpl withPremiumSku()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withPremiumSku()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withRegistryNameAsAdminUser()
  name: withRegistryNameAsAdminUser()
  nameWithType: RegistryImpl.withRegistryNameAsAdminUser()
  overridden: com.microsoft.azure.management.containerregistry.Registry.UpdateStages.WithAdminUserEnabled.withRegistryNameAsAdminUser()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Enable admin user. </p>
  syntax: public RegistryImpl withRegistryNameAsAdminUser()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withRegistryNameAsAdminUser()
- fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withStandardSku()
  name: withStandardSku()
  nameWithType: RegistryImpl.withStandardSku()
  overridden: com.microsoft.azure.management.containerregistry.Registry.DefinitionStages.WithSku.withStandardSku()
  returns:
    description: <p>the next stage of the definition </p>
    type: <xref href="com.microsoft.azure.management.containerregistry.implementation.RegistryImpl?alt=com.microsoft.azure.management.containerregistry.implementation.RegistryImpl&text=RegistryImpl" data-throw-if-not-resolved="False"/>
  summary: <p>Creates a 'managed' registry with a 'Standard' SKU type. </p>
  syntax: public RegistryImpl withStandardSku()
  uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl.withStandardSku()
nameWithType: RegistryImpl
syntax: public class RegistryImpl implements Registry,Registry.Definition,Registry.Update
type: class
uid: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl
fullName: com.microsoft.azure.management.containerregistry.implementation.RegistryImpl
name: RegistryImpl
package: com.microsoft.azure.management.containerregistry.implementation
summary: <p>Implementation for Registry and its create and update interfaces. </p>
metadata: {}
