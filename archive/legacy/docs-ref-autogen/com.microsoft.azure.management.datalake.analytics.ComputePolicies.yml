### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdate(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  name: createOrUpdate(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  nameWithType: ComputePolicies.createOrUpdate(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to add or replace the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to create or update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the compute policy. The max degree of parallelism per job property, min priority per job property, or both must be present. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters&text=ComputePolicyCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputePolicy object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates or updates the specified compute policy. During update, the compute policy with the specified name will be replaced with this new compute policy. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public ComputePolicy createOrUpdate(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdate(String,String,String,ComputePolicyCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  name: createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  nameWithType: ComputePolicies.createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to add or replace the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to create or update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the compute policy. The max degree of parallelism per job property, min priority per job property, or both must be present. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters&text=ComputePolicyCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates or updates the specified compute policy. During update, the compute policy with the specified name will be replaced with this new compute policy. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public Observable<ComputePolicy> createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdateAsync(String,String,String,ComputePolicyCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  name: createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  nameWithType: ComputePolicies.createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to add or replace the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to create or update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the compute policy. The max degree of parallelism per job property, min priority per job property, or both must be present. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters&text=ComputePolicyCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates or updates the specified compute policy. During update, the compute policy with the specified name will be replaced with this new compute policy. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public ServiceFuture<ComputePolicy> createOrUpdateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdateAsync(String,String,String,ComputePolicyCreateOrUpdateParameters,final ServiceCallback<ComputePolicy>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  name: createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  nameWithType: ComputePolicies.createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to add or replace the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to create or update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to create or update the compute policy. The max degree of parallelism per job property, min priority per job property, or both must be present. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicyCreateOrUpdateParameters&text=ComputePolicyCreateOrUpdateParameters" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Creates or updates the specified compute policy. During update, the compute policy with the specified name will be replaced with this new compute policy. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ComputePolicy>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicyCreateOrUpdateParameters parameters)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.createOrUpdateWithServiceResponseAsync(String,String,String,ComputePolicyCreateOrUpdateParameters)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.delete(String resourceGroupName, String accountName, String computePolicyName)
  name: delete(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.delete(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to delete the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to delete. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Deletes the specified compute policy from the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public void delete(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.delete(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.deleteAsync(String resourceGroupName, String accountName, String computePolicyName)
  name: deleteAsync(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.deleteAsync(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to delete the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to delete. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified compute policy from the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.deleteAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.deleteAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<Void> serviceCallback)
  name: deleteAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<Void> serviceCallback)
  nameWithType: ComputePolicies.deleteAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<Void> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to delete the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to delete. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CVoid%3E?alt=final+ServiceCallback%3CVoid%3E&text=final+ServiceCallback%3CVoid%3E" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CVoid%3E?alt=ServiceFuture%3CVoid%3E&text=ServiceFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified compute policy from the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public ServiceFuture<Void> deleteAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<Void> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.deleteAsync(String,String,String,final ServiceCallback<Void>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  name: deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to delete the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to delete. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceResponse"></xref> object if successful. </p>
    type: <xref href="Observable%3CServiceResponse%3CVoid%3E%3E?alt=Observable%3CServiceResponse%3CVoid%3E%3E&text=Observable%3CServiceResponse%3CVoid%3E%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified compute policy from the specified Data Lake Analytics account.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.deleteWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.get(String resourceGroupName, String accountName, String computePolicyName)
  name: get(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.get(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to retrieve. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputePolicy object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified Data Lake Analytics compute policy.</p>

    <p></p>
  syntax: public ComputePolicy get(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.get(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.getAsync(String resourceGroupName, String accountName, String computePolicyName)
  name: getAsync(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.getAsync(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to retrieve. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Analytics compute policy.</p>

    <p></p>
  syntax: public Observable<ComputePolicy> getAsync(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.getAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.getAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  name: getAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  nameWithType: ComputePolicies.getAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to retrieve. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified Data Lake Analytics compute policy.</p>

    <p></p>
  syntax: public ServiceFuture<ComputePolicy> getAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.getAsync(String,String,String,final ServiceCallback<ComputePolicy>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.getWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  name: getWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.getWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to retrieve. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Gets the specified Data Lake Analytics compute policy.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ComputePolicy>> getWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.getWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccount(final String resourceGroupName, final String accountName)
  name: listByAccount(final String resourceGroupName, final String accountName)
  nameWithType: ComputePolicies.listByAccount(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policies. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ComputePolicy&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public PagedList<ComputePolicy> listByAccount(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccount(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountAsync(final String resourceGroupName, final String accountName)
  name: listByAccountAsync(final String resourceGroupName, final String accountName)
  nameWithType: ComputePolicies.listByAccountAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policies. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputePolicy&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public Observable<Page<ComputePolicy>> listByAccountAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ComputePolicy> serviceCallback)
  name: listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ComputePolicy> serviceCallback)
  nameWithType: ComputePolicies.listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ComputePolicy> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policies. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public ServiceFuture<List<ComputePolicy>> listByAccountAsync(final String resourceGroupName, final String accountName, final ListOperationCallback<ComputePolicy> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountAsync(final String,final String,final ListOperationCallback<ComputePolicy>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNext(final String nextPageLink)
  name: listByAccountNext(final String nextPageLink)
  nameWithType: ComputePolicies.listByAccountNext(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PagedList&lt;ComputePolicy&gt; object if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public PagedList<ComputePolicy> listByAccountNext(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNext(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNextAsync(final String nextPageLink)
  name: listByAccountNextAsync(final String nextPageLink)
  nameWithType: ComputePolicies.listByAccountNextAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputePolicy&gt; object </p>
    type: Observable&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public Observable<Page<ComputePolicy>> listByAccountNextAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNextAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<ComputePolicy>> serviceFuture, final ListOperationCallback<ComputePolicy> serviceCallback)
  name: listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<ComputePolicy>> serviceFuture, final ListOperationCallback<ComputePolicy> serviceCallback)
  nameWithType: ComputePolicies.listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<ComputePolicy>> serviceFuture, final ListOperationCallback<ComputePolicy> serviceCallback)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the ServiceFuture object tracking the Retrofit calls </p>
    name: serviceFuture
    type: final ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public ServiceFuture<List<ComputePolicy>> listByAccountNextAsync(final String nextPageLink, final ServiceFuture<List<ComputePolicy>> serviceFuture, final ListOperationCallback<ComputePolicy> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNextAsync(final String,final ServiceFuture<List<ComputePolicy>>,final ListOperationCallback<ComputePolicy>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  name: listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  nameWithType: ComputePolicies.listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  parameters:
  - description: <p>The NextLink from the previous successful call to List operation. </p>
    name: nextPageLink
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputePolicy&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ComputePolicy>>> listByAccountNextWithServiceResponseAsync(final String nextPageLink)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountNextWithServiceResponseAsync(final String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  name: listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  nameWithType: ComputePolicies.listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account from which to get the compute policies. </p>
    name: accountName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PagedList&lt;ComputePolicy&gt; object </p>
    type: Observable&lt;ServiceResponse&lt;Page&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;&gt;
  summary: >-
    <p>Lists the Data Lake Analytics compute policies within the specified Data Lake Analytics account. An account supports, at most, 50 policies.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<Page<ComputePolicy>>> listByAccountWithServiceResponseAsync(final String resourceGroupName, final String accountName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.listByAccountWithServiceResponseAsync(final String,final String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.update(String resourceGroupName, String accountName, String computePolicyName)
  name: update(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.update(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputePolicy object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public ComputePolicy update(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.update(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.update(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  name: update(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  nameWithType: ComputePolicies.update(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the compute policy. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="CloudException?alt=CloudException&text=CloudException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ComputePolicy object if successful. </p>
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public ComputePolicy update(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.update(String,String,String,ComputePolicy)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName)
  name: updateAsync(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public Observable<ComputePolicy> updateAsync(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  name: updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  nameWithType: ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the compute policy. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public Observable<ComputePolicy> updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String,String,String,ComputePolicy)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  nameWithType: ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the compute policy. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public ServiceFuture<ComputePolicy> updateAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters, final ServiceCallback<ComputePolicy> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String,String,String,ComputePolicy,final ServiceCallback<ComputePolicy>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  name: updateAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  nameWithType: ComputePolicies.updateAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public ServiceFuture<ComputePolicy> updateAsync(String resourceGroupName, String accountName, String computePolicyName, final ServiceCallback<ComputePolicy> serviceCallback)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateAsync(String,String,String,final ServiceCallback<ComputePolicy>)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  nameWithType: ComputePolicies.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ComputePolicy>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateWithServiceResponseAsync(String,String,String)
- fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  name: updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  nameWithType: ComputePolicies.updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  parameters:
  - description: <p>The name of the Azure resource group that contains the Data Lake Analytics account. </p>
    name: resourceGroupName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the Data Lake Analytics account to which to update the compute policy. </p>
    name: accountName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the compute policy to update. </p>
    name: computePolicyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Parameters supplied to update the compute policy. </p>
    name: parameters
    type: <xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ComputePolicy object </p>
    type: Observable&lt;ServiceResponse&lt;<xref href="com.microsoft.azure.management.datalake.analytics.models.ComputePolicy?alt=com.microsoft.azure.management.datalake.analytics.models.ComputePolicy&text=ComputePolicy" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Updates the specified compute policy.</p>

    <p></p>
  syntax: public Observable<ServiceResponse<ComputePolicy>> updateWithServiceResponseAsync(String resourceGroupName, String accountName, String computePolicyName, ComputePolicy parameters)
  uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies.updateWithServiceResponseAsync(String,String,String,ComputePolicy)
nameWithType: ComputePolicies
syntax: public interface ComputePolicies
type: interface
uid: com.microsoft.azure.management.datalake.analytics.ComputePolicies
fullName: com.microsoft.azure.management.datalake.analytics.ComputePolicies
name: ComputePolicies
package: com.microsoft.azure.management.datalake.analytics
summary: <p>An instance of this class provides access to all the operations defined in ComputePolicies. </p>
metadata: {}
