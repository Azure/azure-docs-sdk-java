### YamlMime:JavaType
fields:
- field:
    type: <xref href="final+TimeZone?alt=final+TimeZone&text=final+TimeZone" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.core.Utility.GMT_ZONE
  name: GMT_ZONE
  nameWithType: Utility.GMT_ZONE
  summary: <p>Stores a reference to the GMT time zone. </p>
  syntax: public static final TimeZone GMT_ZONE= TimeZone.getTimeZone("GMT")
  uid: com.microsoft.azure.storage.core.Utility.GMT_ZONE
- field:
    type: <xref href="final+Locale?alt=final+Locale&text=final+Locale" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.core.Utility.LOCALE_US
  name: LOCALE_US
  nameWithType: Utility.LOCALE_US
  summary: <p>Stores a reference to the US locale. </p>
  syntax: public static final Locale LOCALE_US= Locale.US
  uid: com.microsoft.azure.storage.core.Utility.LOCALE_US
- field:
    type: <xref href="final+TimeZone?alt=final+TimeZone&text=final+TimeZone" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.storage.core.Utility.UTC_ZONE
  name: UTC_ZONE
  nameWithType: Utility.UTC_ZONE
  summary: <p>Stores a reference to the UTC time zone. </p>
  syntax: public static final TimeZone UTC_ZONE= TimeZone.getTimeZone("UTC")
  uid: com.microsoft.azure.storage.core.Utility.UTC_ZONE
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.storage.core.Utility.analyzeStream(final InputStream sourceStream, long writeLength, long abandonLength, final boolean rewindSourceStream, final boolean calculateMD5)
  name: analyzeStream(final InputStream sourceStream, long writeLength, long abandonLength, final boolean rewindSourceStream, final boolean calculateMD5)
  nameWithType: Utility.analyzeStream(final InputStream sourceStream, long writeLength, long abandonLength, final boolean rewindSourceStream, final boolean calculateMD5)
  parameters:
  - description: <p>A <code>InputStream</code> object that represents the stream to measure. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read from the stream. </p>
    name: writeLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read before the analysis is abandoned. Set this value to <code>-1</code> to force the entire stream to be read. This parameter is provided to support upload thresholds. </p>
    name: abandonLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if the stream should be rewound after it is read; otherwise, <code>false</code>. </p>
    name: rewindSourceStream
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if an MD5 hash will be calculated; otherwise, <code>false</code>.</p>
    name: calculateMD5
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.core.StreamMd5AndLength" data-throw-if-not-resolved="false" data-raw-source="StreamMd5AndLength"></xref> object that contains the stream length, and optionally the MD5 hash.</p>
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determines the size of an input stream, and optionally calculates the MD5 hash for the stream.</p>

    <p></p>
  syntax: public static StreamMd5AndLength analyzeStream(final InputStream sourceStream, long writeLength, long abandonLength, final boolean rewindSourceStream, final boolean calculateMD5)
  uid: com.microsoft.azure.storage.core.Utility.analyzeStream(final InputStream,long,long,final boolean,final boolean)
- fullName: com.microsoft.azure.storage.core.Utility.assertContinuationType(final ResultContinuation continuationToken, final ResultContinuationType continuationType)
  name: assertContinuationType(final ResultContinuation continuationToken, final ResultContinuationType continuationType)
  nameWithType: Utility.assertContinuationType(final ResultContinuation continuationToken, final ResultContinuationType continuationType)
  parameters:
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuation" data-throw-if-not-resolved="false" data-raw-source="ResultContinuation"></xref> object that represents the continuation token whose type is being examined. </p>
    name: continuationToken
    type: final <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.ResultContinuationType" data-throw-if-not-resolved="false" data-raw-source="ResultContinuationType"></xref> value that represents the continuation token type being asserted with the specified continuation token. </p>
    name: continuationType
    type: final <xref href="com.microsoft.azure.storage.ResultContinuationType?alt=com.microsoft.azure.storage.ResultContinuationType&text=ResultContinuationType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asserts a continuation token is of the specified type.</p>

    <p></p>
  syntax: public static void assertContinuationType(final ResultContinuation continuationToken, final ResultContinuationType continuationType)
  uid: com.microsoft.azure.storage.core.Utility.assertContinuationType(final ResultContinuation,final ResultContinuationType)
- fullName: com.microsoft.azure.storage.core.Utility.assertGreaterThanOrEqual(final String param, final long value, final long min)
  name: assertGreaterThanOrEqual(final String param, final long value, final long min)
  nameWithType: Utility.assertGreaterThanOrEqual(final String param, final long value, final long min)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the parameter, which becomes the exception message text if the <code>value</code> parameter is out of bounds. </p>
    name: param
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The value of the specified parameter. </p>
    name: value
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>The minimum value for the specified parameter. </p>
    name: min
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asserts that the specified value is greater than or equal to the min value.</p>

    <p></p>
  syntax: public static void assertGreaterThanOrEqual(final String param, final long value, final long min)
  uid: com.microsoft.azure.storage.core.Utility.assertGreaterThanOrEqual(final String,final long,final long)
- fullName: com.microsoft.azure.storage.core.Utility.assertInBounds(final String param, final long value, final long min, final long max)
  name: assertInBounds(final String param, final long value, final long min, final long max)
  nameWithType: Utility.assertInBounds(final String param, final long value, final long min, final long max)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the parameter, which becomes the exception message text if the <code>value</code> parameter is out of bounds. </p>
    name: param
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The value of the specified parameter. </p>
    name: value
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>The minimum value for the specified parameter. </p>
    name: min
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum value for the specified parameter. </p>
    name: max
    type: <xref href="final+long?alt=final+long&text=final+long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asserts that the specified integer is in the valid range.</p>

    <p></p>
  syntax: public static void assertInBounds(final String param, final long value, final long min, final long max)
  uid: com.microsoft.azure.storage.core.Utility.assertInBounds(final String,final long,final long,final long)
- fullName: com.microsoft.azure.storage.core.Utility.assertNotNull(final String param, final Object value)
  name: assertNotNull(final String param, final Object value)
  nameWithType: Utility.assertNotNull(final String param, final Object value)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the parameter, which becomes the exception message text if the <code>value</code> parameter is <code>null</code>. </p>
    name: param
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>Object</code> object that represents the value of the specified parameter. This is the value being asserted as not <code>null</code>. </p>
    name: value
    type: <xref href="final+Object?alt=final+Object&text=final+Object" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asserts that a value is not .</p>

    <p></p>
  syntax: public static void assertNotNull(final String param, final Object value)
  uid: com.microsoft.azure.storage.core.Utility.assertNotNull(final String,final Object)
- fullName: com.microsoft.azure.storage.core.Utility.assertNotNullOrEmpty(final String param, final String value)
  name: assertNotNullOrEmpty(final String param, final String value)
  nameWithType: Utility.assertNotNullOrEmpty(final String param, final String value)
  parameters:
  - description: <p>A <code>String</code> that represents the name of the parameter, which becomes the exception message text if the <code>value</code> parameter is <code>null</code> or an empty string. </p>
    name: param
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the value of the specified parameter. This is the value being asserted as not <code>null</code> and not an empty string. </p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Asserts that the specified string is not  or empty.</p>

    <p></p>
  syntax: public static void assertNotNullOrEmpty(final String param, final String value)
  uid: com.microsoft.azure.storage.core.Utility.assertNotNullOrEmpty(final String,final String)
- fullName: com.microsoft.azure.storage.core.Utility.binaryAppend(byte[] arr1, byte[] arr2)
  name: binaryAppend(byte[] arr1, byte[] arr2)
  nameWithType: Utility.binaryAppend(byte[] arr1, byte[] arr2)
  parameters:
  - description: <p>First array. </p>
    name: arr1
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Second array. </p>
    name: arr2
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The result byte array. </p>
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  summary: <p>Appends 2 byte arrays. </p>
  syntax: public static byte [] binaryAppend(byte[] arr1, byte[] arr2)
  uid: com.microsoft.azure.storage.core.Utility.binaryAppend(byte [],byte [])
- fullName: com.microsoft.azure.storage.core.Utility.checkNullaryCtor(Class<?> clazzType)
  name: checkNullaryCtor(Class<?> clazzType)
  nameWithType: Utility.checkNullaryCtor(Class<?> clazzType)
  parameters:
  - name: clazzType
    type: <xref href="Class%3C%3F%3E?alt=Class%3C%3F%3E&text=Class%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public static void checkNullaryCtor(Class<?> clazzType)
  uid: com.microsoft.azure.storage.core.Utility.checkNullaryCtor(Class<?>)
- fullName: com.microsoft.azure.storage.core.Utility.createXMLStreamWriter(StringWriter outWriter)
  name: createXMLStreamWriter(StringWriter outWriter)
  nameWithType: Utility.createXMLStreamWriter(StringWriter outWriter)
  parameters:
  - description: <p>The <code>StringWriter</code> to use to create the <code>XMLStreamWriter</code> instance. </p>
    name: outWriter
    type: <xref href="StringWriter?alt=StringWriter&text=StringWriter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="XMLStreamException?alt=XMLStreamException&text=XMLStreamException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>XMLStreamWriter</code> instance</p>
    type: <xref href="XMLStreamWriter?alt=XMLStreamWriter&text=XMLStreamWriter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  with the specified .</p>

    <p></p>
  syntax: public static XMLStreamWriter createXMLStreamWriter(StringWriter outWriter)
  uid: com.microsoft.azure.storage.core.Utility.createXMLStreamWriter(StringWriter)
- fullName: com.microsoft.azure.storage.core.Utility.determinePathStyleFromUri(final URI baseURI)
  name: determinePathStyleFromUri(final URI baseURI)
  nameWithType: Utility.determinePathStyleFromUri(final URI baseURI)
  parameters:
  - description: <p>A <code>java.net.URI</code> value that represents the URI being checked. </p>
    name: baseURI
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the specified URI is path-style; otherwise, <code>false</code>. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether a specified URI is a path-style URI.</p>

    <p></p>
  syntax: public static boolean determinePathStyleFromUri(final URI baseURI)
  uid: com.microsoft.azure.storage.core.Utility.determinePathStyleFromUri(final URI)
- fullName: com.microsoft.azure.storage.core.Utility.encryptStreamIfUnderThreshold(final InputStream sourceStream, final ByteArrayOutputStream targetStream, Cipher cipher, long writeLength, long abandonLength)
  name: encryptStreamIfUnderThreshold(final InputStream sourceStream, final ByteArrayOutputStream targetStream, Cipher cipher, long writeLength, long abandonLength)
  nameWithType: Utility.encryptStreamIfUnderThreshold(final InputStream sourceStream, final ByteArrayOutputStream targetStream, Cipher cipher, long writeLength, long abandonLength)
  parameters:
  - description: <p>A <code>InputStream</code> object that represents the stream to measure. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>ByteArrayOutputStream</code> object that represents the stream to write the encrypted data. </p>
    name: targetStream
    type: <xref href="final+ByteArrayOutputStream?alt=final+ByteArrayOutputStream&text=final+ByteArrayOutputStream" data-throw-if-not-resolved="False"/>
  - description: <p>The <code>Cipher</code> to use to encrypt the data. </p>
    name: cipher
    type: <xref href="Cipher?alt=Cipher&text=Cipher" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read and encrypt from the sourceStream. </p>
    name: writeLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read before the analysis is abandoned. Set this value to <code>-1</code> to force the entire stream to be read. This parameter is provided to support upload thresholds. </p>
    name: abandonLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  returns:
    description: <p>The size of the encrypted stream, or -1 if the encrypted stream would be over the abandonLength. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Encrypts an input stream up to a given length. Exits early if the encrypted data is longer than the abandon length.</p>

    <p></p>
  syntax: public static long encryptStreamIfUnderThreshold(final InputStream sourceStream, final ByteArrayOutputStream targetStream, Cipher cipher, long writeLength, long abandonLength)
  uid: com.microsoft.azure.storage.core.Utility.encryptStreamIfUnderThreshold(final InputStream,final ByteArrayOutputStream,Cipher,long,long)
- fullName: com.microsoft.azure.storage.core.Utility.findAllPatternOccurences(byte[] array, byte[] pattern)
  name: findAllPatternOccurences(byte[] array, byte[] pattern)
  nameWithType: Utility.findAllPatternOccurences(byte[] array, byte[] pattern)
  parameters:
  - description: <p>The array to search. </p>
    name: array
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern to search for.</p>
    name: pattern
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A list of starting indices of all occurrences of the pattern, in ascending order. </p>
    type: <xref href="List%3CInteger%3E?alt=List%3CInteger%3E&text=List%3CInteger%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Scans a byte array for all occurrences of a pattern, with no overlap of occurrence spans.</p>

    <p></p>
  syntax: public static List<Integer> findAllPatternOccurences(byte[] array, byte[] pattern)
  uid: com.microsoft.azure.storage.core.Utility.findAllPatternOccurences(byte [],byte [])
- fullName: com.microsoft.azure.storage.core.Utility.findPattern(byte[] array, byte[] pattern, int scanOffset)
  name: findPattern(byte[] array, byte[] pattern, int scanOffset)
  nameWithType: Utility.findPattern(byte[] array, byte[] pattern, int scanOffset)
  parameters:
  - description: <p>The array to search. </p>
    name: array
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The pattern to search for. </p>
    name: pattern
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Where to begin the search.</p>
    name: scanOffset
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The starting index of the found pattern. -1 if not found. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Scans a byte array for the first occurrence of a pattern, starting at the offset provided.</p>

    <p></p>
  syntax: public static int findPattern(byte[] array, byte[] pattern, int scanOffset)
  uid: com.microsoft.azure.storage.core.Utility.findPattern(byte [],byte [],int)
- fullName: com.microsoft.azure.storage.core.Utility.formatETag(final String etag)
  name: formatETag(final String etag)
  nameWithType: Utility.formatETag(final String etag)
  parameters:
  - name: etag
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents the character data for the Etag element. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads character data for the Etag element from an XML stream reader.</p>

    <p></p>
  syntax: public static String formatETag(final String etag)
  uid: com.microsoft.azure.storage.core.Utility.formatETag(final String)
- fullName: com.microsoft.azure.storage.core.Utility.generateNewUnexpectedStorageException(final Exception cause)
  name: generateNewUnexpectedStorageException(final Exception cause)
  nameWithType: Utility.generateNewUnexpectedStorageException(final Exception cause)
  parameters:
  - description: <p>An <code>Exception</code> object that represents the initial exception that caused the unexpected error.</p>
    name: cause
    type: <xref href="final+Exception?alt=final+Exception&text=final+Exception" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.StorageException" data-throw-if-not-resolved="false" data-raw-source="StorageException"></xref> object that represents the unexpected storage exception being thrown. </p>
    type: <xref href="com.microsoft.azure.storage.StorageException?alt=com.microsoft.azure.storage.StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns an unexpected storage exception.</p>

    <p></p>
  syntax: public static StorageException generateNewUnexpectedStorageException(final Exception cause)
  uid: com.microsoft.azure.storage.core.Utility.generateNewUnexpectedStorageException(final Exception)
- fullName: com.microsoft.azure.storage.core.Utility.getGMTTime()
  name: getGMTTime()
  nameWithType: Utility.getGMTTime()
  returns:
    description: <p>A <code>String</code> that represents the current GMT date/time using the RFC1123 pattern. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the current GMT date/time String using the RFC1123 pattern.</p>

    <p></p>
  syntax: public static String getGMTTime()
  uid: com.microsoft.azure.storage.core.Utility.getGMTTime()
- fullName: com.microsoft.azure.storage.core.Utility.getGMTTime(final Date date)
  name: getGMTTime(final Date date)
  nameWithType: Utility.getGMTTime(final Date date)
  parameters:
  - description: <p>A <code>Date</code> object that represents the date to convert to GMT date/time in the RFC1123 pattern.</p>
    name: date
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents the GMT date/time for the specified value using the RFC1123 pattern. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the GTM date/time String for the specified value using the RFC1123 pattern.</p>

    <p></p>
  syntax: public static String getGMTTime(final Date date)
  uid: com.microsoft.azure.storage.core.Utility.getGMTTime(final Date)
- fullName: com.microsoft.azure.storage.core.Utility.getJavaISO8601Time(Date date)
  name: getJavaISO8601Time(Date date)
  nameWithType: Utility.getJavaISO8601Time(Date date)
  parameters:
  - description: <p>A <code>Date</code> object that represents the date to convert to UTC date/time in Java's version of the ISO8601 pattern.</p>
    name: date
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents the UTC date/time for the specified value using Java's version of the ISO8601 pattern. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the UTC date/time String for the specified value using Java's version of the ISO8601 pattern, which is limited to millisecond precision.</p>

    <p></p>
  syntax: public static String getJavaISO8601Time(Date date)
  uid: com.microsoft.azure.storage.core.Utility.getJavaISO8601Time(Date)
- fullName: com.microsoft.azure.storage.core.Utility.getJsonGenerator(OutputStream outStream)
  name: getJsonGenerator(OutputStream outStream)
  nameWithType: Utility.getJsonGenerator(OutputStream outStream)
  parameters:
  - description: <p>The <code>OutputStream</code> to use to create the <code>JsonGenerator</code> instance. </p>
    name: outStream
    type: <xref href="OutputStream?alt=OutputStream&text=OutputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>JsonGenerator</code> instance</p>
    type: <xref href="JsonGenerator?alt=JsonGenerator&text=JsonGenerator" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  with the specified .</p>

    <p></p>
  syntax: public static JsonGenerator getJsonGenerator(OutputStream outStream)
  uid: com.microsoft.azure.storage.core.Utility.getJsonGenerator(OutputStream)
- fullName: com.microsoft.azure.storage.core.Utility.getJsonGenerator(StringWriter strWriter)
  name: getJsonGenerator(StringWriter strWriter)
  nameWithType: Utility.getJsonGenerator(StringWriter strWriter)
  parameters:
  - description: <p>The <code>StringWriter</code> to use to create the <code>JsonGenerator</code> instance. </p>
    name: strWriter
    type: <xref href="StringWriter?alt=StringWriter&text=StringWriter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>JsonGenerator</code> instance</p>
    type: <xref href="JsonGenerator?alt=JsonGenerator&text=JsonGenerator" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  with the specified .</p>

    <p></p>
  syntax: public static JsonGenerator getJsonGenerator(StringWriter strWriter)
  uid: com.microsoft.azure.storage.core.Utility.getJsonGenerator(StringWriter)
- fullName: com.microsoft.azure.storage.core.Utility.getJsonParser(final InputStream inStream)
  name: getJsonParser(final InputStream inStream)
  nameWithType: Utility.getJsonParser(final InputStream inStream)
  parameters:
  - description: <p>The <code>InputStream</code> to use to create the <code>JsonGenerator</code> instance. </p>
    name: inStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>JsonGenerator</code> instance.</p>
    type: <xref href="JsonParser?alt=JsonParser&text=JsonParser" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  with the specified . This JsonParser will allow non-numeric numbers.</p>

    <p></p>
  syntax: public static JsonParser getJsonParser(final InputStream inStream)
  uid: com.microsoft.azure.storage.core.Utility.getJsonParser(final InputStream)
- fullName: com.microsoft.azure.storage.core.Utility.getJsonParser(final String jsonString)
  name: getJsonParser(final String jsonString)
  nameWithType: Utility.getJsonParser(final String jsonString)
  parameters:
  - description: <p>The <code>String</code> to use to create the <code>JsonGenerator</code> instance. </p>
    name: jsonString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>JsonGenerator</code> instance.</p>
    type: <xref href="JsonParser?alt=JsonParser&text=JsonParser" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a  with the specified . This JsonParser will allow non-numeric numbers.</p>

    <p></p>
  syntax: public static JsonParser getJsonParser(final String jsonString)
  uid: com.microsoft.azure.storage.core.Utility.getJsonParser(final String)
- fullName: com.microsoft.azure.storage.core.Utility.getListingLocationMode(ResultContinuation token)
  name: getListingLocationMode(ResultContinuation token)
  nameWithType: Utility.getListingLocationMode(ResultContinuation token)
  parameters:
  - description: <p>Continuation token </p>
    name: token
    type: <xref href="com.microsoft.azure.storage.ResultContinuation?alt=com.microsoft.azure.storage.ResultContinuation&text=ResultContinuation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Location mode </p>
    type: <xref href="com.microsoft.azure.storage.core.RequestLocationMode?alt=com.microsoft.azure.storage.core.RequestLocationMode&text=RequestLocationMode" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determines which location can the listing command target by looking at the continuation token.</p>

    <p></p>
  syntax: public static RequestLocationMode getListingLocationMode(ResultContinuation token)
  uid: com.microsoft.azure.storage.core.Utility.getListingLocationMode(ResultContinuation)
- fullName: com.microsoft.azure.storage.core.Utility.getRemainingTimeout(Long operationExpiryTimeInMs, Integer timeoutIntervalInMs)
  name: getRemainingTimeout(Long operationExpiryTimeInMs, Integer timeoutIntervalInMs)
  nameWithType: Utility.getRemainingTimeout(Long operationExpiryTimeInMs, Integer timeoutIntervalInMs)
  parameters:
  - description: <p>the time the request expires </p>
    name: operationExpiryTimeInMs
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  - description: <p>the server side timeout interval </p>
    name: timeoutIntervalInMs
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>wraps a TimeoutException if there is no more time remaining </p>
  returns:
    description: <p>the remaining time before the operation expires </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value representing the remaining time before the operation expires.</p>

    <p></p>
  syntax: public static int getRemainingTimeout(Long operationExpiryTimeInMs, Integer timeoutIntervalInMs)
  uid: com.microsoft.azure.storage.core.Utility.getRemainingTimeout(Long,Integer)
- fullName: com.microsoft.azure.storage.core.Utility.getSAXParser()
  name: getSAXParser()
  nameWithType: Utility.getSAXParser()
  exceptions:
  - type: <xref href="ParserConfigurationException?alt=ParserConfigurationException&text=ParserConfigurationException" data-throw-if-not-resolved="False"/>
  - type: <xref href="SAXException?alt=SAXException&text=SAXException" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>SAXParser</code> instance which is namespace aware</p>
    type: <xref href="SAXParser?alt=SAXParser&text=SAXParser" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a namespace aware .</p>

    <p></p>
  syntax: public static SAXParser getSAXParser()
  uid: com.microsoft.azure.storage.core.Utility.getSAXParser()
- fullName: com.microsoft.azure.storage.core.Utility.getStandardHeaderValue(final HttpURLConnection conn, final String headerName)
  name: getStandardHeaderValue(final HttpURLConnection conn, final String headerName)
  nameWithType: Utility.getStandardHeaderValue(final HttpURLConnection conn, final String headerName)
  parameters:
  - description: <p>An <code>HttpURLConnection</code> object that represents the request. </p>
    name: conn
    type: <xref href="final+HttpURLConnection?alt=final+HttpURLConnection&text=final+HttpURLConnection" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>String</code> that represents the name of the header being requested.</p>
    name: headerName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents the header value, or <code>null</code> if there is no corresponding header value for <code>headerName</code>. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the standard header value from the specified connection request, or an empty string if no header value has been specified for the request.</p>

    <p></p>
  syntax: public static String getStandardHeaderValue(final HttpURLConnection conn, final String headerName)
  uid: com.microsoft.azure.storage.core.Utility.getStandardHeaderValue(final HttpURLConnection,final String)
- fullName: com.microsoft.azure.storage.core.Utility.getUTCTimeOrEmpty(final Date value)
  name: getUTCTimeOrEmpty(final Date value)
  nameWithType: Utility.getUTCTimeOrEmpty(final Date value)
  parameters:
  - description: <p>A <code>Date</code> object that represents the date to convert to UTC date/time in the ISO8601 pattern. If this value is <code>null</code>, this method returns an empty string.</p>
    name: value
    type: <xref href="final+Date?alt=final+Date&text=final+Date" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>String</code> that represents the UTC date/time for the specified value using the ISO8601 pattern, or an empty string if <code>value</code> is <code>null</code>. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns the UTC date/time for the specified value using the ISO8601 pattern.</p>

    <p></p>
  syntax: public static String getUTCTimeOrEmpty(final Date value)
  uid: com.microsoft.azure.storage.core.Utility.getUTCTimeOrEmpty(final Date)
- fullName: com.microsoft.azure.storage.core.Utility.initIOException(final Exception ex)
  name: initIOException(final Exception ex)
  nameWithType: Utility.initIOException(final Exception ex)
  parameters:
  - description: <p>An <code>Exception</code> object that represents the exception used to create the IO exception.</p>
    name: ex
    type: <xref href="final+Exception?alt=final+Exception&text=final+Exception" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>java.io.IOException</code> object that represents the created IO exception. </p>
    type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates an instance of the  class using the specified exception.</p>

    <p></p>
  syntax: public static IOException initIOException(final Exception ex)
  uid: com.microsoft.azure.storage.core.Utility.initIOException(final Exception)
- fullName: com.microsoft.azure.storage.core.Utility.isNullOrEmpty(final String value)
  name: isNullOrEmpty(final String value)
  nameWithType: Utility.isNullOrEmpty(final String value)
  parameters:
  - description: <p>A <code>String</code> being examined for <code>null</code> or empty.</p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the specified value is <code>null</code> or empty; otherwise, <code>false</code></p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether the specified string is  or empty.</p>

    <p></p>
  syntax: public static boolean isNullOrEmpty(final String value)
  uid: com.microsoft.azure.storage.core.Utility.isNullOrEmpty(final String)
- fullName: com.microsoft.azure.storage.core.Utility.isNullOrEmptyOrWhitespace(final String value)
  name: isNullOrEmptyOrWhitespace(final String value)
  nameWithType: Utility.isNullOrEmptyOrWhitespace(final String value)
  parameters:
  - description: <p>A <code>String</code> being examined for <code>null</code>, empty, or whitespace.</p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the specified value is <code>null</code>, empty, or whitespace; otherwise, <code>false</code></p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value that indicates whether the specified string is , empty, or whitespace.</p>

    <p></p>
  syntax: public static boolean isNullOrEmptyOrWhitespace(final String value)
  uid: com.microsoft.azure.storage.core.Utility.isNullOrEmptyOrWhitespace(final String)
- fullName: com.microsoft.azure.storage.core.Utility.logHttpError(StorageException ex, OperationContext opContext)
  name: logHttpError(StorageException ex, OperationContext opContext)
  nameWithType: Utility.logHttpError(StorageException ex, OperationContext opContext)
  parameters:
  - description: <p>The StorageException to serialize. </p>
    name: ex
    type: <xref href="com.microsoft.azure.storage.StorageException?alt=com.microsoft.azure.storage.StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
  - description: <p>The operation context which provides the logger. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Serializes the parsed StorageException. If an exception is encountered, returns empty string.</p>

    <p></p>
  syntax: public static void logHttpError(StorageException ex, OperationContext opContext)
  uid: com.microsoft.azure.storage.core.Utility.logHttpError(StorageException,OperationContext)
- fullName: com.microsoft.azure.storage.core.Utility.logHttpRequest(HttpURLConnection conn, OperationContext opContext)
  name: logHttpRequest(HttpURLConnection conn, OperationContext opContext)
  nameWithType: Utility.logHttpRequest(HttpURLConnection conn, OperationContext opContext)
  parameters:
  - description: <p>The HttpURLConnection to serialize. </p>
    name: conn
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - description: <p>The operation context which provides the logger. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Logs the HttpURLConnection request. If an exception is encountered, logs nothing.</p>

    <p></p>
  syntax: public static void logHttpRequest(HttpURLConnection conn, OperationContext opContext)
  uid: com.microsoft.azure.storage.core.Utility.logHttpRequest(HttpURLConnection,OperationContext)
- fullName: com.microsoft.azure.storage.core.Utility.logHttpResponse(HttpURLConnection conn, OperationContext opContext)
  name: logHttpResponse(HttpURLConnection conn, OperationContext opContext)
  nameWithType: Utility.logHttpResponse(HttpURLConnection conn, OperationContext opContext)
  parameters:
  - description: <p>The HttpURLConnection to serialize. </p>
    name: conn
    type: <xref href="HttpURLConnection?alt=HttpURLConnection&text=HttpURLConnection" data-throw-if-not-resolved="False"/>
  - description: <p>The operation context which provides the logger. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Logs the HttpURLConnection response. If an exception is encountered, logs nothing.</p>

    <p></p>
  syntax: public static void logHttpResponse(HttpURLConnection conn, OperationContext opContext)
  uid: com.microsoft.azure.storage.core.Utility.logHttpResponse(HttpURLConnection,OperationContext)
- fullName: com.microsoft.azure.storage.core.Utility.parseAccountString(final String parseString)
  name: parseAccountString(final String parseString)
  nameWithType: Utility.parseAccountString(final String parseString)
  parameters:
  - description: <p>A <code>String</code> that represents the connection string to parse.</p>
    name: parseString
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A <code>java.util.HashMap</code> object that represents the hash map of the key / value pairs parsed from the connection string. </p>
    type: <xref href="HashMap%3CString%2C+String%3E?alt=HashMap%3CString%2C+String%3E&text=HashMap%3CString%2C+String%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Parses a connection string and returns its values as a hash map of key/value pairs.</p>

    <p></p>
  syntax: public static HashMap<String, String> parseAccountString(final String parseString)
  uid: com.microsoft.azure.storage.core.Utility.parseAccountString(final String)
- fullName: com.microsoft.azure.storage.core.Utility.parseDate(String dateString)
  name: parseDate(String dateString)
  nameWithType: Utility.parseDate(String dateString)
  parameters:
  - description: <p>the <code>String</code> to be interpreted as a <code>Date</code></p>
    name: dateString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the corresponding <code>Date</code> object </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a String representing a date in a form of the ISO8601 pattern, generates a Date representing it with up to millisecond precision.</p>

    <p></p>
  syntax: public static Date parseDate(String dateString)
  uid: com.microsoft.azure.storage.core.Utility.parseDate(String)
- fullName: com.microsoft.azure.storage.core.Utility.parseDate(String dateString, boolean dateBackwardCompatibility)
  name: parseDate(String dateString, boolean dateBackwardCompatibility)
  nameWithType: Utility.parseDate(String dateString, boolean dateBackwardCompatibility)
  parameters:
  - description: <p>the <code>String</code> to be interpreted as a <code>Date</code></p>
    name: dateString
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> to correct Date values that may have been written using versions of this library prior to 2.0.0; otherwise, <code>false</code></p>
    name: dateBackwardCompatibility
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the corresponding <code>Date</code> object </p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Given a String representing a date in a form of the ISO8601 pattern, generates a Date representing it with up to millisecond precision. Use <xref uid="com.microsoft.azure.storage.core.Utility.parseDate(String)" data-throw-if-not-resolved="false" data-raw-source="parseDate(String)"></xref> instead unless  is needed. </p>

    <p>See <a href="http://go.microsoft.com/fwlink/?LinkId=523753">here</a> for more details.</p>

    <p></p>
  syntax: public static Date parseDate(String dateString, boolean dateBackwardCompatibility)
  uid: com.microsoft.azure.storage.core.Utility.parseDate(String,boolean)
- fullName: com.microsoft.azure.storage.core.Utility.parseRFC1123DateFromStringInGMT(final String value)
  name: parseRFC1123DateFromStringInGMT(final String value)
  nameWithType: Utility.parseRFC1123DateFromStringInGMT(final String value)
  parameters:
  - description: <p>A <code>String</code> that represents the string to parse.</p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ParseException?alt=ParseException&text=ParseException" data-throw-if-not-resolved="False"/>
    description: <p>If the specified string is invalid. </p>
  returns:
    description: <p>A <code>Date</code> object that represents the GMT date in the RFC1123 pattern.</p>
    type: <xref href="Date?alt=Date&text=Date" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a GMT date for the specified string in the RFC1123 pattern.</p>

    <p></p>
  syntax: public static Date parseRFC1123DateFromStringInGMT(final String value)
  uid: com.microsoft.azure.storage.core.Utility.parseRFC1123DateFromStringInGMT(final String)
- fullName: com.microsoft.azure.storage.core.Utility.safeDecode(final String stringToDecode)
  name: safeDecode(final String stringToDecode)
  nameWithType: Utility.safeDecode(final String stringToDecode)
  parameters:
  - description: <p>A <code>String</code> that represents the string to decode.</p>
    name: stringToDecode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the decoded string.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs safe decoding of the specified string, taking care to preserve each  character, rather than replacing it with a space character.</p>

    <p></p>
  syntax: public static String safeDecode(final String stringToDecode)
  uid: com.microsoft.azure.storage.core.Utility.safeDecode(final String)
- fullName: com.microsoft.azure.storage.core.Utility.safeEncode(final String stringToEncode)
  name: safeEncode(final String stringToEncode)
  nameWithType: Utility.safeEncode(final String stringToEncode)
  parameters:
  - description: <p>A <code>String</code> that represents the string to encode.</p>
    name: stringToEncode
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <code>String</code> that represents the encoded string.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Performs safe encoding of the specified string, taking care to insert  for each space character, instead of inserting the  character.</p>

    <p></p>
  syntax: public static String safeEncode(final String stringToEncode)
  uid: com.microsoft.azure.storage.core.Utility.safeEncode(final String)
- fullName: com.microsoft.azure.storage.core.Utility.safeRelativize(final URI baseURI, final URI toUri)
  name: safeRelativize(final URI baseURI, final URI toUri)
  nameWithType: Utility.safeRelativize(final URI baseURI, final URI toUri)
  parameters:
  - description: <p>A <code>java.net.URI</code> object that represents the base URI for which <code>toUri</code> will be made relative. </p>
    name: baseURI
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  - description: <p>A <code>java.net.URI</code> object that represents the URI to make relative to <code>baseURI</code>.</p>
    name: toUri
    type: <xref href="final+URI?alt=final+URI&text=final+URI" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="URISyntaxException?alt=URISyntaxException&text=URISyntaxException" data-throw-if-not-resolved="False"/>
    description: <p>If <code>baseURI</code> or <code>toUri</code> is invalid. </p>
  returns:
    description: <p>A <code>String</code> that either represents the relative URI of <code>toUri</code> to <code>baseURI</code>, or the URI of <code>toUri</code> itself, depending on whether the hostname and scheme are identical for <code>toUri</code> and <code>baseURI</code>. If the hostname and scheme of <code>baseURI</code> and <code>toUri</code> are identical, this method returns an unencoded relative URI such that if appended to <code>baseURI</code>, it will yield <code>toUri</code>. If the hostname or scheme of <code>baseURI</code> and <code>toUri</code> are not identical, this method returns an unencoded full URI specified by <code>toUri</code>.</p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Determines the relative difference between the two specified URIs.</p>

    <p></p>
  syntax: public static String safeRelativize(final URI baseURI, final URI toUri)
  uid: com.microsoft.azure.storage.core.Utility.safeRelativize(final URI,final URI)
- fullName: com.microsoft.azure.storage.core.Utility.splitOnPattern(byte[] array, byte[] pattern)
  name: splitOnPattern(byte[] array, byte[] pattern)
  nameWithType: Utility.splitOnPattern(byte[] array, byte[] pattern)
  parameters:
  - name: array
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - name: pattern
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    type: <xref href="List%3Cbyte%5B%5D%3E?alt=List%3Cbyte%5B%5D%3E&text=List%3Cbyte%5B%5D%3E" data-throw-if-not-resolved="False"/>
  syntax: public static List<byte[]> splitOnPattern(byte[] array, byte[] pattern)
  uid: com.microsoft.azure.storage.core.Utility.splitOnPattern(byte [],byte [])
- fullName: com.microsoft.azure.storage.core.Utility.stringJoin(CharSequence delimiter, final String... strings)
  name: stringJoin(CharSequence delimiter, final String... strings)
  nameWithType: Utility.stringJoin(CharSequence delimiter, final String... strings)
  parameters:
  - description: <p>Characters to join strings with. </p>
    name: delimiter
    type: <xref href="CharSequence?alt=CharSequence&text=CharSequence" data-throw-if-not-resolved="False"/>
  - description: <p>Strings to join. </p>
    name: strings
    type: <xref href="final+String...?alt=final+String...&text=final+String..." data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The joined string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Equivalent of String.join() in Java 8.</p>

    <p></p>
  syntax: public static String stringJoin(CharSequence delimiter, final String... strings)
  uid: com.microsoft.azure.storage.core.Utility.stringJoin(CharSequence,final String...)
- fullName: com.microsoft.azure.storage.core.Utility.stringJoin(CharSequence delimiter, Iterable<String> strings)
  name: stringJoin(CharSequence delimiter, Iterable<String> strings)
  nameWithType: Utility.stringJoin(CharSequence delimiter, Iterable<String> strings)
  parameters:
  - description: <p>Characters to join strings with. </p>
    name: delimiter
    type: <xref href="CharSequence?alt=CharSequence&text=CharSequence" data-throw-if-not-resolved="False"/>
  - description: <p>Strings to join. </p>
    name: strings
    type: <xref href="Iterable%3CString%3E?alt=Iterable%3CString%3E&text=Iterable%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The joined string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Equivalent of String.join() in Java 8.</p>

    <p></p>
  syntax: public static String stringJoin(CharSequence delimiter, Iterable<String> strings)
  uid: com.microsoft.azure.storage.core.Utility.stringJoin(CharSequence,Iterable<String>)
- fullName: com.microsoft.azure.storage.core.Utility.trimEnd(final String value, final char trimChar)
  name: trimEnd(final String value, final char trimChar)
  nameWithType: Utility.trimEnd(final String value, final char trimChar)
  parameters:
  - description: <p>A <code>String</code> that represents the string to trim. </p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The character to trim from the end of the string.</p>
    name: trimChar
    type: <xref href="final+char?alt=final+char&text=final+char" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The string with the specified character trimmed from the end. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Trims the specified character from the end of a string.</p>

    <p></p>
  syntax: protected static String trimEnd(final String value, final char trimChar)
  uid: com.microsoft.azure.storage.core.Utility.trimEnd(final String,final char)
- fullName: com.microsoft.azure.storage.core.Utility.trimStart(final String value)
  name: trimStart(final String value)
  nameWithType: Utility.trimStart(final String value)
  parameters:
  - description: <p>A <code>String</code> that represents the string to trim.</p>
    name: value
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The string with whitespace trimmed from the beginning. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Trims whitespace from the beginning of a string.</p>

    <p></p>
  syntax: public static String trimStart(final String value)
  uid: com.microsoft.azure.storage.core.Utility.trimStart(final String)
- fullName: com.microsoft.azure.storage.core.Utility.validateMaxExecutionTimeout(Long operationExpiryTimeInMs)
  name: validateMaxExecutionTimeout(Long operationExpiryTimeInMs)
  nameWithType: Utility.validateMaxExecutionTimeout(Long operationExpiryTimeInMs)
  parameters:
  - description: <p>the time the request expires </p>
    name: operationExpiryTimeInMs
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the maximum execution time would be surpassed; otherwise, <code>false</code>. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value representing whether the maximum execution time would be surpassed.</p>

    <p></p>
  syntax: public static boolean validateMaxExecutionTimeout(Long operationExpiryTimeInMs)
  uid: com.microsoft.azure.storage.core.Utility.validateMaxExecutionTimeout(Long)
- fullName: com.microsoft.azure.storage.core.Utility.validateMaxExecutionTimeout(Long operationExpiryTimeInMs, long additionalInterval)
  name: validateMaxExecutionTimeout(Long operationExpiryTimeInMs, long additionalInterval)
  nameWithType: Utility.validateMaxExecutionTimeout(Long operationExpiryTimeInMs, long additionalInterval)
  parameters:
  - description: <p>the time the request expires </p>
    name: operationExpiryTimeInMs
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  - description: <p>any additional time required from now </p>
    name: additionalInterval
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the maximum execution time would be surpassed; otherwise, <code>false</code>. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Returns a value representing whether the maximum execution time would be surpassed.</p>

    <p></p>
  syntax: public static boolean validateMaxExecutionTimeout(Long operationExpiryTimeInMs, long additionalInterval)
  uid: com.microsoft.azure.storage.core.Utility.validateMaxExecutionTimeout(Long,long)
- fullName: com.microsoft.azure.storage.core.Utility.writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options)
  name: writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options)
  nameWithType: Utility.writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options)
  parameters:
  - description: <p>An <code>InputStream</code> object that represents the input stream to use as the source. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>OutputStream</code> object that represents the output stream to use as the destination. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read from the stream. </p>
    name: writeLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if the input stream should be rewound <b>before</b> it is read; otherwise, <code>false</code></p>
    name: rewindSourceStream
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if an MD5 hash will be calculated; otherwise, <code>false</code>. </p>
    name: calculateMD5
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.RequestOptions" data-throw-if-not-resolved="false" data-raw-source="RequestOptions"></xref> object that specifies any additional options for the request. Namely, the maximum execution time. </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.core.StreamMd5AndLength" data-throw-if-not-resolved="false" data-raw-source="StreamMd5AndLength"></xref> object that contains the output stream length, and optionally the MD5 hash.</p>
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads data from an input stream and writes it to an output stream, calculates the length of the data written, and optionally calculates the MD5 hash for the data.</p>

    <p></p>
  syntax: public static StreamMd5AndLength writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options)
  uid: com.microsoft.azure.storage.core.Utility.writeToOutputStream(final InputStream,final OutputStream,long,final boolean,final boolean,OperationContext,final RequestOptions)
- fullName: com.microsoft.azure.storage.core.Utility.writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush)
  name: writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush)
  nameWithType: Utility.writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush)
  parameters:
  - description: <p>An <code>InputStream</code> object that represents the input stream to use as the source. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>OutputStream</code> object that represents the output stream to use as the destination. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read from the stream. </p>
    name: writeLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if the input stream should be rewound <b>before</b> it is read; otherwise, <code>false</code></p>
    name: rewindSourceStream
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if an MD5 hash will be calculated; otherwise, <code>false</code>. </p>
    name: calculateMD5
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.RequestOptions" data-throw-if-not-resolved="false" data-raw-source="RequestOptions"></xref> object that specifies any additional options for the request. Namely, the maximum execution time. </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  - name: shouldFlush
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.core.StreamMd5AndLength" data-throw-if-not-resolved="false" data-raw-source="StreamMd5AndLength"></xref> object that contains the output stream length, and optionally the MD5 hash.</p>
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads data from an input stream and writes it to an output stream, calculates the length of the data written, and optionally calculates the MD5 hash for the data.</p>

    <p></p>
  syntax: public static StreamMd5AndLength writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush)
  uid: com.microsoft.azure.storage.core.Utility.writeToOutputStream(final InputStream,final OutputStream,long,final boolean,final boolean,OperationContext,final RequestOptions,final Boolean)
- fullName: com.microsoft.azure.storage.core.Utility.writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush, StorageRequest<?, ?, Integer> request, StreamMd5AndLength descriptor)
  name: writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush, StorageRequest<?, ?, Integer> request, StreamMd5AndLength descriptor)
  nameWithType: Utility.writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush, StorageRequest<?, ?, Integer> request, StreamMd5AndLength descriptor)
  parameters:
  - description: <p>An <code>InputStream</code> object that represents the input stream to use as the source. </p>
    name: sourceStream
    type: <xref href="final+InputStream?alt=final+InputStream&text=final+InputStream" data-throw-if-not-resolved="False"/>
  - description: <p>An <code>OutputStream</code> object that represents the output stream to use as the destination. </p>
    name: outStream
    type: <xref href="final+OutputStream?alt=final+OutputStream&text=final+OutputStream" data-throw-if-not-resolved="False"/>
  - description: <p>The number of bytes to read from the stream. </p>
    name: writeLength
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if the input stream should be rewound <b>before</b> it is read; otherwise, <code>false</code></p>
    name: rewindSourceStream
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>

        <code>true</code> if an MD5 hash will be calculated; otherwise, <code>false</code>. </p>
    name: calculateMD5
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  - description: <p>An <xref uid="com.microsoft.azure.storage.OperationContext" data-throw-if-not-resolved="false" data-raw-source="OperationContext"></xref> object that represents the context for the current operation. This object is used to track requests to the storage service, and to provide additional runtime information about the operation. </p>
    name: opContext
    type: <xref href="com.microsoft.azure.storage.OperationContext?alt=com.microsoft.azure.storage.OperationContext&text=OperationContext" data-throw-if-not-resolved="False"/>
  - description: <p>A <xref uid="com.microsoft.azure.storage.RequestOptions" data-throw-if-not-resolved="false" data-raw-source="RequestOptions"></xref> object that specifies any additional options for the request. Namely, the maximum execution time. </p>
    name: options
    type: final <xref href="com.microsoft.azure.storage.RequestOptions?alt=com.microsoft.azure.storage.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="False"/>
  - name: shouldFlush
    type: <xref href="final+Boolean?alt=final+Boolean&text=final+Boolean" data-throw-if-not-resolved="False"/>
  - description: <p>Used by download resume to set currentRequestByteCount on the request. Otherwise, null is always used. </p>
    name: request
    type: <xref href="com.microsoft.azure.storage.core.StorageRequest?alt=com.microsoft.azure.storage.core.StorageRequest&text=StorageRequest" data-throw-if-not-resolved="False"/>&lt;?, ?, Integer&gt;
  - description: <p>A <xref uid="com.microsoft.azure.storage.core.StreamMd5AndLength" data-throw-if-not-resolved="false" data-raw-source="StreamMd5AndLength"></xref> object to append to in the case of recovery action or null if this is not called from a recovery. This value needs to be passed for recovery in case part of the body has already been read, the recovery will attempt to download the remaining bytes but will do MD5 validation on the originally requested range size. </p>
    name: descriptor
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IOException?alt=IOException&text=IOException" data-throw-if-not-resolved="False"/>
    description: <p>If an I/O error occurs. </p>
  - type: <xref href="StorageException?alt=StorageException&text=StorageException" data-throw-if-not-resolved="False"/>
    description: <p>If a storage service error occurred. </p>
  returns:
    description: <p>A <xref uid="com.microsoft.azure.storage.core.StreamMd5AndLength" data-throw-if-not-resolved="false" data-raw-source="StreamMd5AndLength"></xref> object that contains the output stream length, and optionally the MD5 hash.</p>
    type: <xref href="com.microsoft.azure.storage.core.StreamMd5AndLength?alt=com.microsoft.azure.storage.core.StreamMd5AndLength&text=StreamMd5AndLength" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reads data from an input stream and writes it to an output stream, calculates the length of the data written, and optionally calculates the MD5 hash for the data.</p>

    <p></p>
  syntax: public static StreamMd5AndLength writeToOutputStream(final InputStream sourceStream, final OutputStream outStream, long writeLength, final boolean rewindSourceStream, final boolean calculateMD5, OperationContext opContext, final RequestOptions options, final Boolean shouldFlush, StorageRequest<?, ?, Integer> request, StreamMd5AndLength descriptor)
  uid: com.microsoft.azure.storage.core.Utility.writeToOutputStream(final InputStream,final OutputStream,long,final boolean,final boolean,OperationContext,final RequestOptions,final Boolean,StorageRequest<?, ?, Integer>,StreamMd5AndLength)
nameWithType: Utility
syntax: public class Utility
type: class
uid: com.microsoft.azure.storage.core.Utility
fullName: com.microsoft.azure.storage.core.Utility
name: Utility
package: com.microsoft.azure.storage.core
summary: <p>RESERVED FOR INTERNAL USE. A class which provides utility methods. </p>
metadata: {}
