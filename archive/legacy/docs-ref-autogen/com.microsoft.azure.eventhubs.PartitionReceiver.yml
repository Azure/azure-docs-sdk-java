### YamlMime:JavaType
fields:
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
  name: DEFAULT_PREFETCH_COUNT
  nameWithType: PartitionReceiver.DEFAULT_PREFETCH_COUNT
  syntax: public int DEFAULT_PREFETCH_COUNT= 500
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.DEFAULT_PREFETCH_COUNT
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  name: MAXIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MAXIMUM_PREFETCH_COUNT
  syntax: public int MAXIMUM_PREFETCH_COUNT= 4000
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.MAXIMUM_PREFETCH_COUNT
- field:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
  name: MINIMUM_PREFETCH_COUNT
  nameWithType: PartitionReceiver.MINIMUM_PREFETCH_COUNT
  syntax: public int MINIMUM_PREFETCH_COUNT= 1
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.MINIMUM_PREFETCH_COUNT
- field:
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
  name: NULL_EPOCH
  nameWithType: PartitionReceiver.NULL_EPOCH
  syntax: public long NULL_EPOCH= 0
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.NULL_EPOCH
methods:
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.close()
  name: close()
  nameWithType: PartitionReceiver.close()
  returns:
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  syntax: public CompletableFuture<Void> close()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.close()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
  name: closeSync()
  nameWithType: PartitionReceiver.closeSync()
  syntax: public void closeSync()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.closeSync()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
  name: getEpoch()
  nameWithType: PartitionReceiver.getEpoch()
  returns:
    description: <p>the epoch value that this receiver is currently using for partition ownership. </p>
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the epoch value that this receiver is currently using for partition ownership. </p>

    <p>A value of 0 means this receiver is not an epoch-based receiver.</p>

    <p></p>
  syntax: public long getEpoch()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEpoch()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
  name: getEventPosition()
  nameWithType: PartitionReceiver.getEventPosition()
  returns:
    description: <p>the EventPosition object. </p>
    type: <xref href="com.microsoft.azure.eventhubs.EventPosition?alt=com.microsoft.azure.eventhubs.EventPosition&text=EventPosition" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the <xref uid="com.microsoft.azure.eventhubs.EventPosition" data-throw-if-not-resolved="false" data-raw-source="EventPosition"></xref> that corresponds to an <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> which was returned last by the receiver. </p>

    <p>This value will not be populated, unless the knob <xref uid="com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)" data-throw-if-not-resolved="false" data-raw-source="ReceiverOptions#setReceiverRuntimeMetricEnabled(boolean)"></xref> is set. Note that EventPosition object is initialized using SequenceNumber and other parameters are not set and get will return null.</p>

    <p></p>
  syntax: public EventPosition getEventPosition()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.getEventPosition()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
  name: getPartitionId()
  nameWithType: PartitionReceiver.getPartitionId()
  returns:
    description: <p>The identifier representing the partition from which this receiver is fetching data </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get EventHubs partition identifier.</p>

    <p></p>
  syntax: public String getPartitionId()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.getPartitionId()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
  name: getReceiveTimeout()
  nameWithType: PartitionReceiver.getReceiveTimeout()
  returns:
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public Duration getReceiveTimeout()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.getReceiveTimeout()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
  name: getRuntimeInformation()
  nameWithType: PartitionReceiver.getRuntimeInformation()
  returns:
    description: <p>receiver runtime information </p>
    type: <xref href="com.microsoft.azure.eventhubs.ReceiverRuntimeInformation?alt=com.microsoft.azure.eventhubs.ReceiverRuntimeInformation&text=ReceiverRuntimeInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the temporal <xref uid="com.microsoft.azure.eventhubs.ReceiverRuntimeInformation" data-throw-if-not-resolved="false" data-raw-source="ReceiverRuntimeInformation"></xref> for this EventHub partition. In general, this information is a representation of, where this <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiver"></xref>'s end of stream is, at the time <xref uid="com.microsoft.azure.eventhubs.ReceiverRuntimeInformation.getRetrievalTime()" data-throw-if-not-resolved="false" data-raw-source="ReceiverRuntimeInformation#getRetrievalTime()"></xref>. </p>

    <p>This value will not be populated, unless the knob <xref uid="com.microsoft.azure.eventhubs.ReceiverOptions.setReceiverRuntimeMetricEnabled(boolean)" data-throw-if-not-resolved="false" data-raw-source="ReceiverOptions#setReceiverRuntimeMetricEnabled(boolean)"></xref> is set. This value will be refreshed every time an <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> is consumed from <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiver"></xref>. For ex: if no events have been consumed, then this value is not populated.</p>

    <p></p>
  syntax: public ReceiverRuntimeInformation getRuntimeInformation()
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.getRuntimeInformation()
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int maxEventCount)
  name: receive(final int maxEventCount)
  nameWithType: PartitionReceiver.receive(final int maxEventCount)
  parameters:
  - description: <p>maximum number of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s that this call should return </p>
    name: maxEventCount
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A completableFuture that will yield a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> is present. </p>
    type: CompletableFuture&lt;Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Receive a batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s from an EventHub partition </p>

    <p>Sample code (sample uses sync version of the api but concept are identical): <pre>

    EventHubClient client = EventHubClient.createSync("__connection__");

    PartitionReceiver receiver = client.createPartitionReceiverSync("ConsumerGroup1", "1");

    Iterable{&lt;}EventData{&gt;} receivedEvents = receiver.receiveSync();</pre></p>

    <p>

      <pre>while (true)

    {

        int batchSize = 0;

        if (receivedEvents != null)

        {

            for(EventData receivedEvent: receivedEvents)

            {

                System.out.println(String.format("Message Payload: %s", new String(receivedEvent.getBytes(), Charset.defaultCharset())));

                System.out.println(String.format("Offset: %s, SeqNo: %s, EnqueueTime: %s",

                    receivedEvent.getSystemProperties().getOffset(),

                    receivedEvent.getSystemProperties().getSequenceNumber(),

                    receivedEvent.getSystemProperties().getEnqueuedTime()));

                batchSize++;

            }

        }</pre>

    </p>

    <p>

      <pre>    System.out.println(String.format("ReceivedBatch Size: %s", batchSize));

        receivedEvents = receiver.receiveSync();

    }

    </pre>

    </p>

    <p></p>
  syntax: public CompletableFuture<Iterable<EventData>> receive(final int maxEventCount)
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(final int maxEventCount)
  name: receiveSync(final int maxEventCount)
  nameWithType: PartitionReceiver.receiveSync(final int maxEventCount)
  parameters:
  - description: <p>maximum number of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s that this call should return </p>
    name: maxEventCount
    type: <xref href="final+int?alt=final+int&text=final+int" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="EventHubException?alt=EventHubException&text=EventHubException" data-throw-if-not-resolved="False"/>
    description: <p>if ServiceBus client encountered any unrecoverable/non-transient problems during <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)" data-throw-if-not-resolved="false" data-raw-source="receive"></xref></p>
  returns:
    description: <p>Batch of <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref>'s from the partition on which this receiver is created. Returns 'null' if no <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false" data-raw-source="EventData"></xref> is present. </p>
    type: default Iterable&lt;<xref href="com.microsoft.azure.eventhubs.EventData?alt=com.microsoft.azure.eventhubs.EventData&text=EventData" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Synchronous version of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver.receive(final int)" data-throw-if-not-resolved="false" data-raw-source="receive"></xref>.</p>

    <p></p>
  syntax: public default Iterable<EventData> receiveSync(final int maxEventCount)
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.receiveSync(final int)
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  name: setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  nameWithType: PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  parameters:
  - description: <p>An implementation of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler"></xref>. Setting this handler to <code>null</code> will stop the receive pump. </p>
    name: receiveHandler
    type: final <xref href="com.microsoft.azure.eventhubs.PartitionReceiveHandler?alt=com.microsoft.azure.eventhubs.PartitionReceiveHandler&text=PartitionReceiveHandler" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A completableFuture which sets receiveHandler </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Register a receive handler that will be called when an event is available. A <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler"></xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.</p>

    <p></p>
  syntax: public CompletableFuture<Void> setReceiveHandler(final PartitionReceiveHandler receiveHandler)
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler)
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  name: setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  nameWithType: PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  parameters:
  - description: <p>An implementation of <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler"></xref></p>
    name: receiveHandler
    type: final <xref href="com.microsoft.azure.eventhubs.PartitionReceiveHandler?alt=com.microsoft.azure.eventhubs.PartitionReceiveHandler&text=PartitionReceiveHandler" data-throw-if-not-resolved="False"/>
  - description: <p>flag to indicate whether the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler#onReceive(Iterable)"></xref> should be invoked when the receive call times out </p>
    name: invokeWhenNoEvents
    type: <xref href="final+boolean?alt=final+boolean&text=final+boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>A completableFuture which sets receiveHandler </p>
    type: <xref href="CompletableFuture%3CVoid%3E?alt=CompletableFuture%3CVoid%3E&text=CompletableFuture%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Register a receive handler that will be called when an event is available. A <xref uid="com.microsoft.azure.eventhubs.PartitionReceiveHandler" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiveHandler"></xref> is a handler that allows user to specify a callback for event processing and error handling in a receive pump model.</p>

    <p></p>
  syntax: public CompletableFuture<Void> setReceiveHandler(final PartitionReceiveHandler receiveHandler, final boolean invokeWhenNoEvents)
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveHandler(final PartitionReceiveHandler,final boolean)
- fullName: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration value)
  name: setReceiveTimeout(Duration value)
  nameWithType: PartitionReceiver.setReceiveTimeout(Duration value)
  parameters:
  - name: value
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  syntax: public void setReceiveTimeout(Duration value)
  uid: com.microsoft.azure.eventhubs.PartitionReceiver.setReceiveTimeout(Duration)
nameWithType: PartitionReceiver
syntax: public interface PartitionReceiver
type: interface
uid: com.microsoft.azure.eventhubs.PartitionReceiver
fullName: com.microsoft.azure.eventhubs.PartitionReceiver
name: PartitionReceiver
package: com.microsoft.azure.eventhubs
summary: >-
  <p>This is a logical representation of receiving from a EventHub partition. </p>

  <p>A <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiver"></xref> is tied to a ConsumerGroup + EventHub Partition combination. <ul><li><p>If an epoch based <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiver"></xref> (i.e., PartitionReceiver.getEpoch != 0) is created, EventHubs service will guarantee only 1 active receiver exists per ConsumerGroup + Partition combo. This is the recommended approach to create a <xref uid="com.microsoft.azure.eventhubs.PartitionReceiver" data-throw-if-not-resolved="false" data-raw-source="PartitionReceiver"></xref>. </p></li><li><p>Multiple receivers per ConsumerGroup + Partition combo can be created using non-epoch receivers. </p></li></ul></p>

  <p></p>
metadata: {}
