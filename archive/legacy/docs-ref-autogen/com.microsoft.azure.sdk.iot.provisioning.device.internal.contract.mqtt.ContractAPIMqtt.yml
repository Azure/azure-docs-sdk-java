### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.ContractAPIMqtt(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  name: ContractAPIMqtt(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  nameWithType: ContractAPIMqtt.ContractAPIMqtt(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  parameters:
  - description: >-
      <p>Config used for provisioning Cannot be<code>null 

          </code> . </p>
    name: provisioningDeviceClientConfig
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.ProvisioningDeviceClientConfig?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.ProvisioningDeviceClientConfig&text=ProvisioningDeviceClientConfig" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: <p>is thrown when any of the input parameters are invalid </p>
  summary: <p>This constructor creates an instance of Mqtt class and initializes member variables </p>
  syntax: public ContractAPIMqtt(ProvisioningDeviceClientConfig provisioningDeviceClientConfig)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.ContractAPIMqtt(ProvisioningDeviceClientConfig)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract&text=ProvisioningDeviceClientContract" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.createProvisioningContract(ProvisioningDeviceClientConfig)
- com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.getRetryValue()
- com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.RETRY_AFTER
- com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ProvisioningDeviceClientContract.setRetrieveRetryAfterValue(String)
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  name: authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  nameWithType: ContractAPIMqtt.authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  parameters:
  - description: >-
      <p>A non<code>null 

          </code> value with all the required request data </p>
    name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>A non<code>null 

          </code> value for the callback </p>
    name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>An object for context. Can be<code>null 

          </code></p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>If any of the parameters are invalid (<code>null 

          </code> or empty) </p>
  - type: <xref href="ProvisioningDeviceTransportException?alt=ProvisioningDeviceTransportException&text=ProvisioningDeviceTransportException" data-throw-if-not-resolved="False"/>
    description: <p>If any of the API calls to transport fail </p>
  - type: <xref href="ProvisioningDeviceHubException?alt=ProvisioningDeviceHubException&text=ProvisioningDeviceHubException" data-throw-if-not-resolved="False"/>
    description: <p>If hub responds back with an invalid status </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Requests hub to authenticate this connection and start the registration process over MQTT </p>
  syntax: public synchronized void authenticateWithProvisioningService(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.authenticateWithProvisioningService(RequestData,ResponseCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.close()
  name: close()
  nameWithType: ContractAPIMqtt.close()
  exceptions:
  - type: <xref href="ProvisioningDeviceConnectionException?alt=ProvisioningDeviceConnectionException&text=ProvisioningDeviceConnectionException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if a failure in disconnect </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Indicates to close the connection </p>
  syntax: public synchronized void close()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.close()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.connectionLost(Throwable throwable)
  name: connectionLost(Throwable throwable)
  nameWithType: ContractAPIMqtt.connectionLost(Throwable throwable)
  overridden: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttListener.connectionLost(Throwable)
  parameters:
  - description: <p>the disconnection reason. </p>
    name: throwable
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: <p>Called by PAHO when the connection is lost </p>
  syntax: public void connectionLost(Throwable throwable)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.connectionLost(Throwable)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.getConnectionId()
  name: getConnectionId()
  nameWithType: ContractAPIMqtt.getConnectionId()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getConnectionId()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.getConnectionId()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.getHostName()
  name: getHostName()
  nameWithType: ContractAPIMqtt.getHostName()
  returns:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: public String getHostName()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.getHostName()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  name: getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  nameWithType: ContractAPIMqtt.getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  parameters:
  - description: >-
      <p>A non<code>null 

          </code> value with all the request data </p>
    name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>A non<code>null 

          </code> value for the callback </p>
    name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>An object for context. Can be<code>null 

          </code></p>
    name: callbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>If any of the parameters are invalid (<code>null 

          </code> or empty) </p>
  - type: <xref href="ProvisioningDeviceTransportException?alt=ProvisioningDeviceTransportException&text=ProvisioningDeviceTransportException" data-throw-if-not-resolved="False"/>
    description: <p>If any of the API calls to transport fail </p>
  - type: <xref href="ProvisioningDeviceHubException?alt=ProvisioningDeviceHubException&text=ProvisioningDeviceHubException" data-throw-if-not-resolved="False"/>
    description: <p>If hub responds back with an invalid status </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Gets the registration status over MQTT </p>
  syntax: public synchronized void getRegistrationStatus(RequestData requestData, ResponseCallback responseCallback, Object callbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.getRegistrationStatus(RequestData,ResponseCallback,Object)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.messageReceived(MqttMessage message)
  name: messageReceived(MqttMessage message)
  nameWithType: ContractAPIMqtt.messageReceived(MqttMessage message)
  overridden: com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttListener.messageReceived(MqttMessage)
  parameters:
  - description: <p>the received Mqtt message </p>
    name: message
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.mqtt.MqttMessage&text=MqttMessage" data-throw-if-not-resolved="False"/>
  summary: <p>Called when the message gets received by PAHO </p>
  syntax: public void messageReceived(MqttMessage message)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.messageReceived(MqttMessage)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.open(RequestData requestData)
  name: open(RequestData requestData)
  nameWithType: ContractAPIMqtt.open(RequestData requestData)
  parameters:
  - description: <p>Data used for the connection initialization </p>
    name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceConnectionException?alt=ProvisioningDeviceConnectionException&text=ProvisioningDeviceConnectionException" data-throw-if-not-resolved="False"/>
    description: <p>is thrown when any of the input parameters are invalid </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Indicates need to open MQTT connection </p>
  syntax: public synchronized void open(RequestData requestData)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.open(RequestData)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object authorizationCallbackContext)
  name: requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object authorizationCallbackContext)
  nameWithType: ContractAPIMqtt.requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object authorizationCallbackContext)
  parameters:
  - description: <p>the request data to be used while requesting nonce for TPM </p>
    name: requestData
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.task.RequestData&text=RequestData" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>A non<code>null 

          </code> value for the callback </p>
    name: responseCallback
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback?alt=com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.ResponseCallback&text=ResponseCallback" data-throw-if-not-resolved="False"/>
  - description: >-
      <p>An object for context. Can be<code>null 

          </code></p>
    name: authorizationCallbackContext
    type: <xref href="Object?alt=Object&text=Object" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="ProvisioningDeviceClientException?alt=ProvisioningDeviceClientException&text=ProvisioningDeviceClientException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>If any of the parameters are invalid (<code>null 

          </code> or empty) </p>
  - type: <xref href="ProvisioningDeviceTransportException?alt=ProvisioningDeviceTransportException&text=ProvisioningDeviceTransportException" data-throw-if-not-resolved="False"/>
    description: <p>If any of the API calls to transport fail </p>
  - type: <xref href="ProvisioningDeviceHubException?alt=ProvisioningDeviceHubException&text=ProvisioningDeviceHubException" data-throw-if-not-resolved="False"/>
    description: <p>If hub responds back with an invalid status </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Requests hub to provide a device key to begin authentication over MQTT (Only for TPM) </p>
  syntax: public synchronized void requestNonceForTPM(RequestData requestData, ResponseCallback responseCallback, Object authorizationCallbackContext)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt.requestNonceForTPM(RequestData,ResponseCallback,Object)
nameWithType: ContractAPIMqtt
syntax: public class ContractAPIMqtt extends ProvisioningDeviceClientContract implements MqttListener
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt
fullName: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt.ContractAPIMqtt
name: ContractAPIMqtt
package: com.microsoft.azure.sdk.iot.provisioning.device.internal.contract.mqtt
metadata: {}
