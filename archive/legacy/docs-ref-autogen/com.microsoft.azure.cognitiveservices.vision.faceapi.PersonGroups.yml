### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.create()
  name: create()
  nameWithType: PersonGroups.create()
  returns:
    description: <p>the first stage of the create call </p>
    type: <xref href="PersonGroupsCreateDefinitionStages.WithPersonGroupId?alt=PersonGroupsCreateDefinitionStages.WithPersonGroupId&text=PersonGroupsCreateDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new person group with specified personGroupId, name and user-provided userData.</p>

    <p></p>
  syntax: public PersonGroupsCreateDefinitionStages.WithPersonGroupId create()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.create()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.create(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  name: create(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  nameWithType: PersonGroups.create(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupsOptionalParameter&text=CreatePersonGroupsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Create a new person group with specified personGroupId, name and user-provided userData.</p>

    <p></p>
  syntax: public void create(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.create(String,CreatePersonGroupsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.createAsync(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  name: createAsync(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  nameWithType: PersonGroups.createAsync(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: createOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.CreatePersonGroupsOptionalParameter&text=CreatePersonGroupsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Create a new person group with specified personGroupId, name and user-provided userData.</p>

    <p></p>
  syntax: public Observable<Void> createAsync(String personGroupId, CreatePersonGroupsOptionalParameter createOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.createAsync(String,CreatePersonGroupsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.delete(String personGroupId)
  name: delete(String personGroupId)
  nameWithType: PersonGroups.delete(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Delete an existing person group. Persisted face images of all people in the person group will also be deleted.</p>

    <p></p>
  syntax: public void delete(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.delete(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.deleteAsync(String personGroupId)
  name: deleteAsync(String personGroupId)
  nameWithType: PersonGroups.deleteAsync(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Delete an existing person group. Persisted face images of all people in the person group will also be deleted.</p>

    <p></p>
  syntax: public Observable<Void> deleteAsync(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.deleteAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.get(String personGroupId)
  name: get(String personGroupId)
  nameWithType: PersonGroups.get(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the PersonGroup object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup&text=PersonGroup" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve the information of a person group, including its name and userData.</p>

    <p></p>
  syntax: public PersonGroup get(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.get(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.getAsync(String personGroupId)
  name: getAsync(String personGroupId)
  nameWithType: PersonGroups.getAsync(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the PersonGroup object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup&text=PersonGroup" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieve the information of a person group, including its name and userData.</p>

    <p></p>
  syntax: public Observable<PersonGroup> getAsync(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.getAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.getTrainingStatus(String personGroupId)
  name: getTrainingStatus(String personGroupId)
  nameWithType: PersonGroups.getTrainingStatus(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the TrainingStatus object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus&text=TrainingStatus" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Retrieve the training status of a person group (completed or ongoing).</p>

    <p></p>
  syntax: public TrainingStatus getTrainingStatus(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.getTrainingStatus(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.getTrainingStatusAsync(String personGroupId)
  name: getTrainingStatusAsync(String personGroupId)
  nameWithType: PersonGroups.getTrainingStatusAsync(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the TrainingStatus object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.TrainingStatus&text=TrainingStatus" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieve the training status of a person group (completed or ongoing).</p>

    <p></p>
  syntax: public Observable<TrainingStatus> getTrainingStatusAsync(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.getTrainingStatusAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.list()
  name: list()
  nameWithType: PersonGroups.list()
  returns:
    description: <p>the first stage of the list call </p>
    type: <xref href="PersonGroupsListDefinitionStages.WithExecute?alt=PersonGroupsListDefinitionStages.WithExecute&text=PersonGroupsListDefinitionStages.WithExecute" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>List person groups and their information.</p>

    <p></p>
  syntax: public PersonGroupsListDefinitionStages.WithExecute list()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.list()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.list(ListPersonGroupsOptionalParameter listOptionalParameter)
  name: list(ListPersonGroupsOptionalParameter listOptionalParameter)
  nameWithType: PersonGroups.list(ListPersonGroupsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupsOptionalParameter&text=ListPersonGroupsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the List&lt;PersonGroup&gt; object if successful. </p>
    type: List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup&text=PersonGroup" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List person groups and their information.</p>

    <p></p>
  syntax: public List<PersonGroup> list(ListPersonGroupsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.list(ListPersonGroupsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.listAsync(ListPersonGroupsOptionalParameter listOptionalParameter)
  name: listAsync(ListPersonGroupsOptionalParameter listOptionalParameter)
  nameWithType: PersonGroups.listAsync(ListPersonGroupsOptionalParameter listOptionalParameter)
  parameters:
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: listOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.ListPersonGroupsOptionalParameter&text=ListPersonGroupsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the List&lt;PersonGroup&gt; object </p>
    type: Observable&lt;List&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.PersonGroup&text=PersonGroup" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List person groups and their information.</p>

    <p></p>
  syntax: public Observable<List<PersonGroup>> listAsync(ListPersonGroupsOptionalParameter listOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.listAsync(ListPersonGroupsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.train(String personGroupId)
  name: train(String personGroupId)
  nameWithType: PersonGroups.train(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Queue a person group training task, the training task may not be started immediately.</p>

    <p></p>
  syntax: public void train(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.train(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.trainAsync(String personGroupId)
  name: trainAsync(String personGroupId)
  nameWithType: PersonGroups.trainAsync(String personGroupId)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Queue a person group training task, the training task may not be started immediately.</p>

    <p></p>
  syntax: public Observable<Void> trainAsync(String personGroupId)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.trainAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.update()
  name: update()
  nameWithType: PersonGroups.update()
  returns:
    description: <p>the first stage of the update call </p>
    type: <xref href="PersonGroupsUpdateDefinitionStages.WithPersonGroupId?alt=PersonGroupsUpdateDefinitionStages.WithPersonGroupId&text=PersonGroupsUpdateDefinitionStages.WithPersonGroupId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.</p>

    <p></p>
  syntax: public PersonGroupsUpdateDefinitionStages.WithPersonGroupId update()
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.update()
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.update(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  name: update(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  nameWithType: PersonGroups.update(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupsOptionalParameter&text=UpdatePersonGroupsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  summary: >-
    <p>Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.</p>

    <p></p>
  syntax: public void update(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.update(String,UpdatePersonGroupsOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.updateAsync(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  name: updateAsync(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  nameWithType: PersonGroups.updateAsync(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  parameters:
  - description: <p>Id referencing a particular person group. </p>
    name: personGroupId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: updateOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupsOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.UpdatePersonGroupsOptionalParameter&text=UpdatePersonGroupsOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>a representation of the deferred computation of this call if successful. </p>
    type: <xref href="Observable%3CVoid%3E?alt=Observable%3CVoid%3E&text=Observable%3CVoid%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Update an existing person group's display name and userData. The properties which does not appear in request body will not be updated.</p>

    <p></p>
  syntax: public Observable<Void> updateAsync(String personGroupId, UpdatePersonGroupsOptionalParameter updateOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups.updateAsync(String,UpdatePersonGroupsOptionalParameter)
nameWithType: PersonGroups
syntax: public interface PersonGroups
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups
fullName: com.microsoft.azure.cognitiveservices.vision.faceapi.PersonGroups
name: PersonGroups
package: com.microsoft.azure.cognitiveservices.vision.faceapi
summary: <p>An instance of this class provides access to all the operations defined in PersonGroups. </p>
metadata: {}
