### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(String exceptionId, boolean isTransient, Duration retryDelay, int maxRetryCount)
  name: ExceptionHandlingRetryResult(String exceptionId, boolean isTransient, Duration retryDelay, int maxRetryCount)
  nameWithType: ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(String exceptionId, boolean isTransient, Duration retryDelay, int maxRetryCount)
  parameters:
  - description: <p>An identifier for the exception that needs to be retried. </p>
    name: exceptionId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if this is a transient retriable exception. Transient retriable exceptions are those where the communication channel from client to service still exists. Non transient retriable exceptions are those where we need to re-resolve the service endpoint before we retry. </p>
    name: isTransient
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The interval to wait before retrying </p>
    name: retryDelay
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of times the exception identified by the exceptionId parameter needs to be retried for. </p>
    name: maxRetryCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates the ExceptionHandlingRetryResult using the given arguments.</p>

    <p></p>
  syntax: public ExceptionHandlingRetryResult(String exceptionId, boolean isTransient, Duration retryDelay, int maxRetryCount)
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(String,boolean,Duration,int)
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, Duration retryDelay, int maxRetryCount)
  name: ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, Duration retryDelay, int maxRetryCount)
  nameWithType: ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, Duration retryDelay, int maxRetryCount)
  parameters:
  - description: <p>An identifier for the exception that needs to be retried. </p>
    name: exception
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if this is a transient retriable exception. Transient retriable exceptions are those where the communication channel from client to service still exists. Non transient retriable exceptions are those where we need to re-resolve the service endpoint before we retry. </p>
    name: isTransient
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The interval to wait before retrying </p>
    name: retryDelay
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of times the exception identified by the exceptionId parameter needs to be retried for. </p>
    name: maxRetryCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates the ExceptionHandlingRetryResult using the given arguments.</p>

    <p></p>
  syntax: public ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, Duration retryDelay, int maxRetryCount)
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(Throwable,boolean,Duration,int)
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, OperationRetrySettings retrySettings, int maxRetryCount)
  name: ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, OperationRetrySettings retrySettings, int maxRetryCount)
  nameWithType: ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, OperationRetrySettings retrySettings, int maxRetryCount)
  parameters:
  - description: <p>The exception that needs to be retried. </p>
    name: exception
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  - description: <p>Indicates if this is a transient retriable exception. Transient retriable exceptions are those where the communication channel from client to service still exists. Non transient retriable exceptions are those where we need to re-resolve the service endpoint before we retry. </p>
    name: isTransient
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  - description: <p>The retrySettings from which the interval to wait before retrying is figured out. </p>
    name: retrySettings
    type: <xref href="microsoft.servicefabric.services.communication.client.OperationRetrySettings?alt=microsoft.servicefabric.services.communication.client.OperationRetrySettings&text=OperationRetrySettings" data-throw-if-not-resolved="False"/>
  - description: <p>The maximum number of times the exception identified by the exceptionId parameter needs to be retried for. </p>
    name: maxRetryCount
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Instantiates the ExceptionHandlingRetryResult using the given arguments.</p>

    <p></p>
  syntax: public ExceptionHandlingRetryResult(Throwable exception, boolean isTransient, OperationRetrySettings retrySettings, int maxRetryCount)
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.ExceptionHandlingRetryResult(Throwable,boolean,OperationRetrySettings,int)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="microsoft.servicefabric.services.communication.client.ExceptionHandlingResult?alt=microsoft.servicefabric.services.communication.client.ExceptionHandlingResult&text=ExceptionHandlingResult" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.getExceptionId()
  name: getExceptionId()
  nameWithType: ExceptionHandlingRetryResult.getExceptionId()
  returns:
    description: <p>Unique id for this exception. This id is used to keep track of the number of times this exception is retried </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>String that uniquely identifies the exception type.</p>

    <p></p>
  syntax: public String getExceptionId()
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.getExceptionId()
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.getMaxRetryCount()
  name: getMaxRetryCount()
  nameWithType: ExceptionHandlingRetryResult.getMaxRetryCount()
  returns:
    description: <p>Max retry count </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Maximum number of times this exception type needs to be retried before giving up. The default value is int.MaxValue</p>

    <p></p>
  syntax: public int getMaxRetryCount()
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.getMaxRetryCount()
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.getRetryDelay()
  name: getRetryDelay()
  nameWithType: ExceptionHandlingRetryResult.getRetryDelay()
  returns:
    description: <p>Time delay after which the operation should be retried </p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The operation should be retried after this delay.</p>

    <p></p>
  syntax: public Duration getRetryDelay()
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.getRetryDelay()
- fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.isTransient()
  name: isTransient()
  nameWithType: ExceptionHandlingRetryResult.isTransient()
  returns:
    description: <p>true indicates that this is a transient retriable exception. false indicates that this is a non transient retriable exception. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Transient retriable exceptions are those where the communication channel from client to service still exists. Non transient retriable exceptions are those where we need to re-resolve the service endpoint before we retry.</p>

    <p></p>
  syntax: public boolean isTransient()
  uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult.isTransient()
nameWithType: ExceptionHandlingRetryResult
syntax: public class ExceptionHandlingRetryResult extends ExceptionHandlingResult
type: class
uid: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult
fullName: microsoft.servicefabric.services.communication.client.ExceptionHandlingRetryResult
name: ExceptionHandlingRetryResult
package: microsoft.servicefabric.services.communication.client
summary: <p>Specifies the exception handling result when the request from client to service can be retried </p>
metadata: {}
