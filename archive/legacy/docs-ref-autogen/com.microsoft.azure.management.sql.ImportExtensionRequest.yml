### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.ImportExtensionRequest()
  name: ImportExtensionRequest()
  nameWithType: ImportExtensionRequest.ImportExtensionRequest()
  summary: <p>Creates an instance of ImportExtensionRequest class. </p>
  syntax: public ImportExtensionRequest()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.ImportExtensionRequest()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.administratorLogin()
  name: administratorLogin()
  nameWithType: ImportExtensionRequest.administratorLogin()
  returns:
    description: <p>the administratorLogin value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name of the SQL administrator.</p>

    <p></p>
  syntax: public String administratorLogin()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.administratorLogin()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.administratorLoginPassword()
  name: administratorLoginPassword()
  nameWithType: ImportExtensionRequest.administratorLoginPassword()
  returns:
    description: <p>the administratorLoginPassword value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the password of the SQL administrator.</p>

    <p></p>
  syntax: public String administratorLoginPassword()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.administratorLoginPassword()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.authenticationType()
  name: authenticationType()
  nameWithType: ImportExtensionRequest.authenticationType()
  returns:
    description: <p>the authenticationType value </p>
    type: <xref href="com.microsoft.azure.management.sql.AuthenticationType?alt=com.microsoft.azure.management.sql.AuthenticationType&text=AuthenticationType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the authentication type. Possible values include: 'SQL', 'ADPassword'.</p>

    <p></p>
  syntax: public AuthenticationType authenticationType()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.authenticationType()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.name()
  name: name()
  nameWithType: ImportExtensionRequest.name()
  returns:
    description: <p>the name value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the name of the extension.</p>

    <p></p>
  syntax: public String name()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.name()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.operationMode()
  name: operationMode()
  nameWithType: ImportExtensionRequest.operationMode()
  returns:
    description: <p>the operationMode value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the type of import operation being performed. This is always Import.</p>

    <p></p>
  syntax: public String operationMode()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.operationMode()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.storageKey()
  name: storageKey()
  nameWithType: ImportExtensionRequest.storageKey()
  returns:
    description: <p>the storageKey value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the storage key to use. If storage key type is SharedAccessKey, it must be preceded with a "?.".</p>

    <p></p>
  syntax: public String storageKey()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.storageKey()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.storageKeyType()
  name: storageKeyType()
  nameWithType: ImportExtensionRequest.storageKeyType()
  returns:
    description: <p>the storageKeyType value </p>
    type: <xref href="com.microsoft.azure.management.sql.StorageKeyType?alt=com.microsoft.azure.management.sql.StorageKeyType&text=StorageKeyType" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the type of the storage key to use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'.</p>

    <p></p>
  syntax: public StorageKeyType storageKeyType()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.storageKeyType()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.storageUri()
  name: storageUri()
  nameWithType: ImportExtensionRequest.storageUri()
  returns:
    description: <p>the storageUri value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the storage uri to use.</p>

    <p></p>
  syntax: public String storageUri()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.storageUri()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.type()
  name: type()
  nameWithType: ImportExtensionRequest.type()
  returns:
    description: <p>the type value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the type of the extension.</p>

    <p></p>
  syntax: public String type()
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.type()
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withAdministratorLogin(String administratorLogin)
  name: withAdministratorLogin(String administratorLogin)
  nameWithType: ImportExtensionRequest.withAdministratorLogin(String administratorLogin)
  parameters:
  - description: <p>the administratorLogin value to set </p>
    name: administratorLogin
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name of the SQL administrator.</p>

    <p></p>
  syntax: public ImportExtensionRequest withAdministratorLogin(String administratorLogin)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withAdministratorLogin(String)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withAdministratorLoginPassword(String administratorLoginPassword)
  name: withAdministratorLoginPassword(String administratorLoginPassword)
  nameWithType: ImportExtensionRequest.withAdministratorLoginPassword(String administratorLoginPassword)
  parameters:
  - description: <p>the administratorLoginPassword value to set </p>
    name: administratorLoginPassword
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the password of the SQL administrator.</p>

    <p></p>
  syntax: public ImportExtensionRequest withAdministratorLoginPassword(String administratorLoginPassword)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withAdministratorLoginPassword(String)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withAuthenticationType(AuthenticationType authenticationType)
  name: withAuthenticationType(AuthenticationType authenticationType)
  nameWithType: ImportExtensionRequest.withAuthenticationType(AuthenticationType authenticationType)
  parameters:
  - description: <p>the authenticationType value to set </p>
    name: authenticationType
    type: <xref href="com.microsoft.azure.management.sql.AuthenticationType?alt=com.microsoft.azure.management.sql.AuthenticationType&text=AuthenticationType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the authentication type. Possible values include: 'SQL', 'ADPassword'.</p>

    <p></p>
  syntax: public ImportExtensionRequest withAuthenticationType(AuthenticationType authenticationType)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withAuthenticationType(AuthenticationType)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withName(String name)
  name: withName(String name)
  nameWithType: ImportExtensionRequest.withName(String name)
  parameters:
  - description: <p>the name value to set </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the name of the extension.</p>

    <p></p>
  syntax: public ImportExtensionRequest withName(String name)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withName(String)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withOperationMode(String operationMode)
  name: withOperationMode(String operationMode)
  nameWithType: ImportExtensionRequest.withOperationMode(String operationMode)
  parameters:
  - description: <p>the operationMode value to set </p>
    name: operationMode
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the type of import operation being performed. This is always Import.</p>

    <p></p>
  syntax: public ImportExtensionRequest withOperationMode(String operationMode)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withOperationMode(String)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withStorageKey(String storageKey)
  name: withStorageKey(String storageKey)
  nameWithType: ImportExtensionRequest.withStorageKey(String storageKey)
  parameters:
  - description: <p>the storageKey value to set </p>
    name: storageKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the storage key to use. If storage key type is SharedAccessKey, it must be preceded with a "?.".</p>

    <p></p>
  syntax: public ImportExtensionRequest withStorageKey(String storageKey)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withStorageKey(String)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withStorageKeyType(StorageKeyType storageKeyType)
  name: withStorageKeyType(StorageKeyType storageKeyType)
  nameWithType: ImportExtensionRequest.withStorageKeyType(StorageKeyType storageKeyType)
  parameters:
  - description: <p>the storageKeyType value to set </p>
    name: storageKeyType
    type: <xref href="com.microsoft.azure.management.sql.StorageKeyType?alt=com.microsoft.azure.management.sql.StorageKeyType&text=StorageKeyType" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the type of the storage key to use. Possible values include: 'StorageAccessKey', 'SharedAccessKey'.</p>

    <p></p>
  syntax: public ImportExtensionRequest withStorageKeyType(StorageKeyType storageKeyType)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withStorageKeyType(StorageKeyType)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withStorageUri(String storageUri)
  name: withStorageUri(String storageUri)
  nameWithType: ImportExtensionRequest.withStorageUri(String storageUri)
  parameters:
  - description: <p>the storageUri value to set </p>
    name: storageUri
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the storage uri to use.</p>

    <p></p>
  syntax: public ImportExtensionRequest withStorageUri(String storageUri)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withStorageUri(String)
- fullName: com.microsoft.azure.management.sql.ImportExtensionRequest.withType(String type)
  name: withType(String type)
  nameWithType: ImportExtensionRequest.withType(String type)
  parameters:
  - description: <p>the type value to set </p>
    name: type
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the ImportExtensionRequest object itself. </p>
    type: <xref href="com.microsoft.azure.management.sql.ImportExtensionRequest?alt=com.microsoft.azure.management.sql.ImportExtensionRequest&text=ImportExtensionRequest" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the type of the extension.</p>

    <p></p>
  syntax: public ImportExtensionRequest withType(String type)
  uid: com.microsoft.azure.management.sql.ImportExtensionRequest.withType(String)
nameWithType: ImportExtensionRequest
syntax: public class ImportExtensionRequest
type: class
uid: com.microsoft.azure.management.sql.ImportExtensionRequest
fullName: com.microsoft.azure.management.sql.ImportExtensionRequest
name: ImportExtensionRequest
package: com.microsoft.azure.management.sql
summary: <p>Import database parameters. </p>
metadata: {}
