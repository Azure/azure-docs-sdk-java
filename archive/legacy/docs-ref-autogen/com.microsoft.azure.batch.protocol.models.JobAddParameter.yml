### YamlMime:JavaType
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.commonEnvironmentSettings()
  name: commonEnvironmentSettings()
  nameWithType: JobAddParameter.commonEnvironmentSettings()
  returns:
    description: <p>the commonEnvironmentSettings value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get individual tasks can override an environment setting specified here by specifying the same setting name with a different value.</p>

    <p></p>
  syntax: public List<EnvironmentSetting> commonEnvironmentSettings()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.commonEnvironmentSettings()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.constraints()
  name: constraints()
  nameWithType: JobAddParameter.constraints()
  returns:
    description: <p>the constraints value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobConstraints?alt=com.microsoft.azure.batch.protocol.models.JobConstraints&text=JobConstraints" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the execution constraints for the job.</p>

    <p></p>
  syntax: public JobConstraints constraints()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.constraints()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.displayName()
  name: displayName()
  nameWithType: JobAddParameter.displayName()
  returns:
    description: <p>the displayName value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public String displayName()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.displayName()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.id()
  name: id()
  nameWithType: JobAddParameter.id()
  returns:
    description: <p>the id value </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p>

    <p></p>
  syntax: public String id()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.id()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.jobManagerTask()
  name: jobManagerTask()
  nameWithType: JobAddParameter.jobManagerTask()
  returns:
    description: <p>the jobManagerTask value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if the job does not specify a Job Manager task, the user must explicitly add tasks to the job. If the job does specify a Job Manager task, the Batch service creates the Job Manager task when the job is created, and will try to schedule the Job Manager task before scheduling other tasks in the job. The Job Manager task's typical purpose is to control and/or monitor job execution, for example by deciding what additional tasks to run, determining when the work is complete, etc. (However, a Job Manager task is not restricted to these activities - it is a fully-fledged task in the system and perform whatever actions are required for the job.) For example, a Job Manager task might download a file specified as a parameter, analyze the contents of that file and submit additional tasks based on those contents.</p>

    <p></p>
  syntax: public JobManagerTask jobManagerTask()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.jobManagerTask()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.jobPreparationTask()
  name: jobPreparationTask()
  nameWithType: JobAddParameter.jobPreparationTask()
  returns:
    description: <p>the jobPreparationTask value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get if a job has a Job Preparation task, the Batch service will run the Job Preparation task on a compute node before starting any tasks of that job on that compute node.</p>

    <p></p>
  syntax: public JobPreparationTask jobPreparationTask()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.jobPreparationTask()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.jobReleaseTask()
  name: jobReleaseTask()
  nameWithType: JobAddParameter.jobReleaseTask()
  returns:
    description: <p>the jobReleaseTask value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a Job Release task cannot be specified without also specifying a Job Preparation task for the job. The Batch service runs the Job Release task on the compute nodes that have run the Job Preparation task. The primary purpose of the Job Release task is to undo changes to compute nodes made by the Job Preparation task. Example activities include deleting local files, or shutting down services that were started as part of job preparation.</p>

    <p></p>
  syntax: public JobReleaseTask jobReleaseTask()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.jobReleaseTask()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.metadata()
  name: metadata()
  nameWithType: JobAddParameter.metadata()
  returns:
    description: <p>the metadata value </p>
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get the Batch service does not assign any meaning to metadata; it is solely for the use of user code.</p>

    <p></p>
  syntax: public List<MetadataItem> metadata()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.metadata()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.networkConfiguration()
  name: networkConfiguration()
  nameWithType: JobAddParameter.networkConfiguration()
  returns:
    description: <p>the networkConfiguration value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration?alt=com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration&text=JobNetworkConfiguration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the networkConfiguration value.</p>

    <p></p>
  syntax: public JobNetworkConfiguration networkConfiguration()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.networkConfiguration()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.onAllTasksComplete()
  name: onAllTasksComplete()
  nameWithType: JobAddParameter.onAllTasksComplete()
  returns:
    description: <p>the onAllTasksComplete value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.OnAllTasksComplete?alt=com.microsoft.azure.batch.protocol.models.OnAllTasksComplete&text=OnAllTasksComplete" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction. Possible values include: 'noAction', 'terminateJob'.</p>

    <p></p>
  syntax: public OnAllTasksComplete onAllTasksComplete()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.onAllTasksComplete()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.onTaskFailure()
  name: onTaskFailure()
  nameWithType: JobAddParameter.onTaskFailure()
  returns:
    description: <p>the onTaskFailure value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.OnTaskFailure?alt=com.microsoft.azure.batch.protocol.models.OnTaskFailure&text=OnTaskFailure" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. The default is noaction. Possible values include: 'noAction', 'performExitOptionsJobAction'.</p>

    <p></p>
  syntax: public OnTaskFailure onTaskFailure()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.onTaskFailure()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.poolInfo()
  name: poolInfo()
  nameWithType: JobAddParameter.poolInfo()
  returns:
    description: <p>the poolInfo value </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolInformation?alt=com.microsoft.azure.batch.protocol.models.PoolInformation&text=PoolInformation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the poolInfo value.</p>

    <p></p>
  syntax: public PoolInformation poolInfo()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.poolInfo()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.priority()
  name: priority()
  nameWithType: JobAddParameter.priority()
  returns:
    description: <p>the priority value </p>
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.</p>

    <p></p>
  syntax: public Integer priority()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.priority()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.usesTaskDependencies()
  name: usesTaskDependencies()
  nameWithType: JobAddParameter.usesTaskDependencies()
  returns:
    description: <p>the usesTaskDependencies value </p>
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get the usesTaskDependencies value.</p>

    <p></p>
  syntax: public Boolean usesTaskDependencies()
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.usesTaskDependencies()
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings)
  name: withCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings)
  nameWithType: JobAddParameter.withCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings)
  parameters:
  - description: <p>the commonEnvironmentSettings value to set </p>
    name: commonEnvironmentSettings
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.EnvironmentSetting?alt=com.microsoft.azure.batch.protocol.models.EnvironmentSetting&text=EnvironmentSetting" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set individual tasks can override an environment setting specified here by specifying the same setting name with a different value.</p>

    <p></p>
  syntax: public JobAddParameter withCommonEnvironmentSettings(List<EnvironmentSetting> commonEnvironmentSettings)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withCommonEnvironmentSettings(List<EnvironmentSetting>)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withConstraints(JobConstraints constraints)
  name: withConstraints(JobConstraints constraints)
  nameWithType: JobAddParameter.withConstraints(JobConstraints constraints)
  parameters:
  - description: <p>the constraints value to set </p>
    name: constraints
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobConstraints?alt=com.microsoft.azure.batch.protocol.models.JobConstraints&text=JobConstraints" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the execution constraints for the job.</p>

    <p></p>
  syntax: public JobAddParameter withConstraints(JobConstraints constraints)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withConstraints(JobConstraints)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withDisplayName(String displayName)
  name: withDisplayName(String displayName)
  nameWithType: JobAddParameter.withDisplayName(String displayName)
  parameters:
  - description: <p>the displayName value to set </p>
    name: displayName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.</p>

    <p></p>
  syntax: public JobAddParameter withDisplayName(String displayName)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withDisplayName(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withId(String id)
  name: withId(String id)
  nameWithType: JobAddParameter.withId(String id)
  parameters:
  - description: <p>the id value to set </p>
    name: id
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an account that differ only by case).</p>

    <p></p>
  syntax: public JobAddParameter withId(String id)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withId(String)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withJobManagerTask(JobManagerTask jobManagerTask)
  name: withJobManagerTask(JobManagerTask jobManagerTask)
  nameWithType: JobAddParameter.withJobManagerTask(JobManagerTask jobManagerTask)
  parameters:
  - description: <p>the jobManagerTask value to set </p>
    name: jobManagerTask
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobManagerTask?alt=com.microsoft.azure.batch.protocol.models.JobManagerTask&text=JobManagerTask" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if the job does not specify a Job Manager task, the user must explicitly add tasks to the job. If the job does specify a Job Manager task, the Batch service creates the Job Manager task when the job is created, and will try to schedule the Job Manager task before scheduling other tasks in the job. The Job Manager task's typical purpose is to control and/or monitor job execution, for example by deciding what additional tasks to run, determining when the work is complete, etc. (However, a Job Manager task is not restricted to these activities - it is a fully-fledged task in the system and perform whatever actions are required for the job.) For example, a Job Manager task might download a file specified as a parameter, analyze the contents of that file and submit additional tasks based on those contents.</p>

    <p></p>
  syntax: public JobAddParameter withJobManagerTask(JobManagerTask jobManagerTask)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withJobManagerTask(JobManagerTask)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withJobPreparationTask(JobPreparationTask jobPreparationTask)
  name: withJobPreparationTask(JobPreparationTask jobPreparationTask)
  nameWithType: JobAddParameter.withJobPreparationTask(JobPreparationTask jobPreparationTask)
  parameters:
  - description: <p>the jobPreparationTask value to set </p>
    name: jobPreparationTask
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobPreparationTask?alt=com.microsoft.azure.batch.protocol.models.JobPreparationTask&text=JobPreparationTask" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set if a job has a Job Preparation task, the Batch service will run the Job Preparation task on a compute node before starting any tasks of that job on that compute node.</p>

    <p></p>
  syntax: public JobAddParameter withJobPreparationTask(JobPreparationTask jobPreparationTask)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withJobPreparationTask(JobPreparationTask)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withJobReleaseTask(JobReleaseTask jobReleaseTask)
  name: withJobReleaseTask(JobReleaseTask jobReleaseTask)
  nameWithType: JobAddParameter.withJobReleaseTask(JobReleaseTask jobReleaseTask)
  parameters:
  - description: <p>the jobReleaseTask value to set </p>
    name: jobReleaseTask
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobReleaseTask?alt=com.microsoft.azure.batch.protocol.models.JobReleaseTask&text=JobReleaseTask" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set a Job Release task cannot be specified without also specifying a Job Preparation task for the job. The Batch service runs the Job Release task on the compute nodes that have run the Job Preparation task. The primary purpose of the Job Release task is to undo changes to compute nodes made by the Job Preparation task. Example activities include deleting local files, or shutting down services that were started as part of job preparation.</p>

    <p></p>
  syntax: public JobAddParameter withJobReleaseTask(JobReleaseTask jobReleaseTask)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withJobReleaseTask(JobReleaseTask)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withMetadata(List<MetadataItem> metadata)
  name: withMetadata(List<MetadataItem> metadata)
  nameWithType: JobAddParameter.withMetadata(List<MetadataItem> metadata)
  parameters:
  - description: <p>the metadata value to set </p>
    name: metadata
    type: List&lt;<xref href="com.microsoft.azure.batch.protocol.models.MetadataItem?alt=com.microsoft.azure.batch.protocol.models.MetadataItem&text=MetadataItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the Batch service does not assign any meaning to metadata; it is solely for the use of user code.</p>

    <p></p>
  syntax: public JobAddParameter withMetadata(List<MetadataItem> metadata)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withMetadata(List<MetadataItem>)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withNetworkConfiguration(JobNetworkConfiguration networkConfiguration)
  name: withNetworkConfiguration(JobNetworkConfiguration networkConfiguration)
  nameWithType: JobAddParameter.withNetworkConfiguration(JobNetworkConfiguration networkConfiguration)
  parameters:
  - description: <p>the networkConfiguration value to set </p>
    name: networkConfiguration
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration?alt=com.microsoft.azure.batch.protocol.models.JobNetworkConfiguration&text=JobNetworkConfiguration" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the networkConfiguration value.</p>

    <p></p>
  syntax: public JobAddParameter withNetworkConfiguration(JobNetworkConfiguration networkConfiguration)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withNetworkConfiguration(JobNetworkConfiguration)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  name: withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  nameWithType: JobAddParameter.withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  parameters:
  - description: <p>the onAllTasksComplete value to set </p>
    name: onAllTasksComplete
    type: <xref href="com.microsoft.azure.batch.protocol.models.OnAllTasksComplete?alt=com.microsoft.azure.batch.protocol.models.OnAllTasksComplete&text=OnAllTasksComplete" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set note that if a job contains no tasks, then all tasks are considered complete. This option is therefore most commonly used with a Job Manager task; if you want to use automatic job termination without a Job Manager, you should initially set onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to terminatejob once you have finished adding tasks. The default is noaction. Possible values include: 'noAction', 'terminateJob'.</p>

    <p></p>
  syntax: public JobAddParameter withOnAllTasksComplete(OnAllTasksComplete onAllTasksComplete)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withOnAllTasksComplete(OnAllTasksComplete)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withOnTaskFailure(OnTaskFailure onTaskFailure)
  name: withOnTaskFailure(OnTaskFailure onTaskFailure)
  nameWithType: JobAddParameter.withOnTaskFailure(OnTaskFailure onTaskFailure)
  parameters:
  - description: <p>the onTaskFailure value to set </p>
    name: onTaskFailure
    type: <xref href="com.microsoft.azure.batch.protocol.models.OnTaskFailure?alt=com.microsoft.azure.batch.protocol.models.OnTaskFailure&text=OnTaskFailure" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set a task is considered to have failed if has a failureInfo. A failureInfo is set if the task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the task, for example due to a resource file download error. The default is noaction. Possible values include: 'noAction', 'performExitOptionsJobAction'.</p>

    <p></p>
  syntax: public JobAddParameter withOnTaskFailure(OnTaskFailure onTaskFailure)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withOnTaskFailure(OnTaskFailure)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withPoolInfo(PoolInformation poolInfo)
  name: withPoolInfo(PoolInformation poolInfo)
  nameWithType: JobAddParameter.withPoolInfo(PoolInformation poolInfo)
  parameters:
  - description: <p>the poolInfo value to set </p>
    name: poolInfo
    type: <xref href="com.microsoft.azure.batch.protocol.models.PoolInformation?alt=com.microsoft.azure.batch.protocol.models.PoolInformation&text=PoolInformation" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the poolInfo value.</p>

    <p></p>
  syntax: public JobAddParameter withPoolInfo(PoolInformation poolInfo)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withPoolInfo(PoolInformation)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withPriority(Integer priority)
  name: withPriority(Integer priority)
  nameWithType: JobAddParameter.withPriority(Integer priority)
  parameters:
  - description: <p>the priority value to set </p>
    name: priority
    type: <xref href="Integer?alt=Integer&text=Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0.</p>

    <p></p>
  syntax: public JobAddParameter withPriority(Integer priority)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withPriority(Integer)
- fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter.withUsesTaskDependencies(Boolean usesTaskDependencies)
  name: withUsesTaskDependencies(Boolean usesTaskDependencies)
  nameWithType: JobAddParameter.withUsesTaskDependencies(Boolean usesTaskDependencies)
  parameters:
  - description: <p>the usesTaskDependencies value to set </p>
    name: usesTaskDependencies
    type: <xref href="Boolean?alt=Boolean&text=Boolean" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the JobAddParameter object itself. </p>
    type: <xref href="com.microsoft.azure.batch.protocol.models.JobAddParameter?alt=com.microsoft.azure.batch.protocol.models.JobAddParameter&text=JobAddParameter" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Set the usesTaskDependencies value.</p>

    <p></p>
  syntax: public JobAddParameter withUsesTaskDependencies(Boolean usesTaskDependencies)
  uid: com.microsoft.azure.batch.protocol.models.JobAddParameter.withUsesTaskDependencies(Boolean)
nameWithType: JobAddParameter
syntax: public class JobAddParameter
type: class
uid: com.microsoft.azure.batch.protocol.models.JobAddParameter
fullName: com.microsoft.azure.batch.protocol.models.JobAddParameter
name: JobAddParameter
package: com.microsoft.azure.batch.protocol.models
summary: <p>An Azure Batch job to add. </p>
metadata: {}
