### YamlMime:JavaType
constructors:
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings()
  name: FabricTransportRemotingSettings()
  nameWithType: FabricTransportRemotingSettings.FabricTransportRemotingSettings()
  summary: <p>Creates a new FabricTransportRemotingSettings with default Values. </p>
  syntax: public FabricTransportRemotingSettings()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.FabricTransportRemotingSettings()
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout()
  name: getConnectTimeout()
  nameWithType: FabricTransportRemotingSettings.getConnectTimeout()
  returns:
    description: <p>ConnectTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Connect timeout specifies the maximum time allowed for the connection to be established successfully.</p>

    <p>

      <b>Remarks:</b>Default Value for ConnectTimeout Timeout is set as 5 seconds. </p>
  syntax: public Duration getConnectTimeout()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getConnectTimeout()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault()
  name: getDefault()
  nameWithType: FabricTransportRemotingSettings.getDefault()
  returns:
    description: <p>FabricTransportSettings </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>FabricTransportSettings returns the default Settings .Loads the configuration file from default Config Package"Config" , if not found then try to load from default config file "ClientExeName.Settings.xml" from Client Exe directory.</p>

    <p></p>
  syntax: public static FabricTransportRemotingSettings getDefault()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault(String sectionName)
  name: getDefault(String sectionName)
  nameWithType: FabricTransportRemotingSettings.getDefault(String sectionName)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it will return the default Settings </p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>FabricTransportSettings </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>FabricTransportSettings returns the default Settings .Loads the configuration file from default Config Package"Config" , if not found then try to load from default config file "ClientExeName.Settings.xml" from Client Exe directory.</p>

    <p></p>
  syntax: public static FabricTransportRemotingSettings getDefault(String sectionName)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getDefault(String)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings()
  name: getInternalSettings()
  nameWithType: FabricTransportRemotingSettings.getInternalSettings()
  returns:
    type: <xref href="FabricTransportSettings?alt=FabricTransportSettings&text=FabricTransportSettings" data-throw-if-not-resolved="False"/>
  syntax: public FabricTransportSettings getInternalSettings()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getInternalSettings()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout()
  name: getKeepAliveTimeout()
  nameWithType: FabricTransportRemotingSettings.getKeepAliveTimeout()
  returns:
    description: <p>KeepAliveTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>KeepAliveTimeout is provides a way to configure Tcp keep-alive option.</p>

    <p>

      <b>Remarks:</b>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option. If you are using loadbalancer , you may need to configure this in order to avoid the loadbalancer to close the connection after certain time </p>
  syntax: public Duration getKeepAliveTimeout()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getKeepAliveTimeout()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls()
  name: getMaxConcurrentCalls()
  nameWithType: FabricTransportRemotingSettings.getMaxConcurrentCalls()
  returns:
    description: <p>MaxConcurrentCalls is the upper limit of active messages in the service. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>MaxConcurrentCalls represents maximum number of messages actively service processes at one time.</p>

    <p>

      <b>Remarks:</b>Defaults value for the MaxConcurrentCalls is to the Number of processors. </p>
  syntax: public Long getMaxConcurrentCalls()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxConcurrentCalls()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize()
  name: getMaxMessageSize()
  nameWithType: FabricTransportRemotingSettings.getMaxMessageSize()
  returns:
    description: <p>Maximum size of the message in bytes. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>MaxMessageSize represents the maximum size for a message that can be received on a channel configured with this setting.</p>

    <p>

      <b>Remarks:</b>Default Value for MaxMessageSize used is 4194304 bytes </p>
  syntax: public Long getMaxMessageSize()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxMessageSize()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize()
  name: getMaxQueueSize()
  nameWithType: FabricTransportRemotingSettings.getMaxQueueSize()
  returns:
    description: <p>Max Size for a Queue that recieves messages from the channel. </p>
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting.</p>

    <p>

      <b>Remarks:</b>Default value is 10,000 messages </p>
  syntax: public Long getMaxQueueSize()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getMaxQueueSize()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout()
  name: getOperationTimeout()
  nameWithType: FabricTransportRemotingSettings.getOperationTimeout()
  returns:
    description: <p>OperationTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Operation Timeout which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation. This timeout also applies when sending reply messages from a callback contract method.</p>

    <p>

      <b>Remarks:</b>Default Value for Operation Timeout is set as 5 mins </p>
  syntax: public Duration getOperationTimeout()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getOperationTimeout()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials()
  name: getSecurityCredentials()
  nameWithType: FabricTransportRemotingSettings.getSecurityCredentials()
  returns:
    description: <p>SecurityCredentials as <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.SecurityCredentials"></xref></p>
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Security credentials for securing the communication</p>

    <p>

      <b>Remarks:</b>Default Value for SecurityCredentials is None SecurityCredential can be of type x509SecurityCredentail <xref uid="system.fabric.X509Credentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.X509Credentials"></xref>or WindowsCredentials <xref uid="system.fabric.WindowsCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.WindowsCredentials"></xref></p>
  syntax: public SecurityCredentials getSecurityCredentials()
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.getSecurityCredentials()
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom(String sectionName)
  name: loadFrom(String sectionName)
  nameWithType: FabricTransportRemotingSettings.loadFrom(String sectionName)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException </p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>FabricTransportSettings </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Loads the FabricTransport settings from a sectionName specified in the configuration file Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>

    <p>

      <b>Remarks:</b> The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>
  syntax: public static FabricTransportRemotingSettings loadFrom(String sectionName)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFrom(String)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage(String sectionName, String configPackageName)
  name: loadFromConfigPackage(String sectionName, String configPackageName)
  nameWithType: FabricTransportRemotingSettings.loadFromConfigPackage(String sectionName, String configPackageName)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException</p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the configuration package.If its null or empty,it will check for file in filePath </p>
    name: configPackageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>FabricTransportSettings </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Loads the FabricTransport settings from a sectionName specified in the configuration file Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>

    <p>

      <b>Remarks:</b> The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>
  syntax: public static FabricTransportRemotingSettings loadFromConfigPackage(String sectionName, String configPackageName)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromConfigPackage(String,String)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile(String sectionName, String filePath)
  name: loadFromFile(String sectionName, String filePath)
  nameWithType: FabricTransportRemotingSettings.loadFromFile(String sectionName, String filePath)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it will throw ArgumentException </p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Full path of the file where the settings will be loaded from. If not specified , it will first try to load from default Config Package"Config" , if not found then load from Settings "ClientExeName.Settings.xml" present in Client Exe directory. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>FabricTransportSettings </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Loads the FabricTransport settings from a sectionName specified in the configuration file Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>

    <p>

      <b>Remarks:</b> The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>
  syntax: public static FabricTransportRemotingSettings loadFromFile(String sectionName, String filePath)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.loadFromFile(String,String)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout(Duration connectTimeout)
  name: setConnectTimeout(Duration connectTimeout)
  nameWithType: FabricTransportRemotingSettings.setConnectTimeout(Duration connectTimeout)
  parameters:
  - description: <p>ConnectTimeout as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
    name: connectTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Connect timeout specifies the maximum time allowed for the connection to be established successfully.</p>

    <p>

      <b>Remarks:</b>Default Value for ConnectTimeout Timeout is set as 5 seconds. </p>
  syntax: public void setConnectTimeout(Duration connectTimeout)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setConnectTimeout(Duration)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout(Duration keepAliveTimeout)
  name: setKeepAliveTimeout(Duration keepAliveTimeout)
  nameWithType: FabricTransportRemotingSettings.setKeepAliveTimeout(Duration keepAliveTimeout)
  parameters:
  - description: <p>as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
    name: keepAliveTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>KeepAliveTimeout is provides a way to configure Tcp keep-alive option.</p>

    <p>

      <b>Remarks:</b>Default Value for KeepAliveTimeout Timeout is set as TimeSpan.Zero. which indicates we disable the tcp keepalive option. If you are using loadbalancer , you may need to configure this in order to avoid the loadbalancer to close the connection after certain time </p>
  syntax: public void setKeepAliveTimeout(Duration keepAliveTimeout)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setKeepAliveTimeout(Duration)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls(Long maxConcurrentCalls)
  name: setMaxConcurrentCalls(Long maxConcurrentCalls)
  nameWithType: FabricTransportRemotingSettings.setMaxConcurrentCalls(Long maxConcurrentCalls)
  parameters:
  - description: <p>MaxConcurrentCalls is the upper limit of active messages in the service. </p>
    name: maxConcurrentCalls
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>MaxConcurrentCalls represents maximum number of messages actively service processes at one time.</p>

    <p>

      <b>Remarks:</b>Defaults value for the MaxConcurrentCalls is to the Number of processors. </p>
  syntax: public void setMaxConcurrentCalls(Long maxConcurrentCalls)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxConcurrentCalls(Long)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize(Long maxMessageSize)
  name: setMaxMessageSize(Long maxMessageSize)
  nameWithType: FabricTransportRemotingSettings.setMaxMessageSize(Long maxMessageSize)
  parameters:
  - description: <p>Maximum size of the message in bytes. </p>
    name: maxMessageSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>MaxMessageSize represents the maximum size for a message that can be received on a channel configured with this setting.</p>

    <p>

      <b>Remarks:</b>Default Value for MaxMessageSize used is 4194304 bytes </p>
  syntax: public void setMaxMessageSize(Long maxMessageSize)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxMessageSize(Long)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize(Long maxQueueSize)
  name: setMaxQueueSize(Long maxQueueSize)
  nameWithType: FabricTransportRemotingSettings.setMaxQueueSize(Long maxQueueSize)
  parameters:
  - description: <p>Max Size for a Queue that recieves messages from the channel. </p>
    name: maxQueueSize
    type: <xref href="Long?alt=Long&text=Long" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The maximum size, of a queue that stores messages while they are processed for an endpoint configured with this setting.</p>

    <p>

      <b>Remarks:</b>Default value is 10,000 messages </p>
  syntax: public void setMaxQueueSize(Long maxQueueSize)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setMaxQueueSize(Long)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout(Duration operationTimeout)
  name: setOperationTimeout(Duration operationTimeout)
  nameWithType: FabricTransportRemotingSettings.setOperationTimeout(Duration operationTimeout)
  parameters:
  - description: <p>as <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.time.Duration"></xref></p>
    name: operationTimeout
    type: <xref href="Duration?alt=Duration&text=Duration" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Operation Timeout which governs the whole process of sending a message, including receiving a reply message for a request/reply service operation. This timeout also applies when sending reply messages from a callback contract method.</p>

    <p>

      <b>Remarks:</b>Default Value for Operation Timeout is set as 5 mins </p>
  syntax: public void setOperationTimeout(Duration operationTimeout)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setOperationTimeout(Duration)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  name: setSecurityCredentials(SecurityCredentials securityCredentials)
  nameWithType: FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials securityCredentials)
  parameters:
  - description: <p>SecurityCredentials as <xref uid="system.fabric.SecurityCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.SecurityCredentials"></xref></p>
    name: securityCredentials
    type: <xref href="system.fabric.SecurityCredentials?alt=system.fabric.SecurityCredentials&text=SecurityCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Security credentials for securing the communication</p>

    <p>

      <b>Remarks:</b>Default Value for SecurityCredentials is None SecurityCredential can be of type x509SecurityCredentail <xref uid="system.fabric.X509Credentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.X509Credentials"></xref> or WindowsCredentials <xref uid="system.fabric.WindowsCredentials" data-throw-if-not-resolved="false" data-raw-source="system.fabric.WindowsCredentials"></xref></p>
  syntax: public void setSecurityCredentials(SecurityCredentials securityCredentials)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.setSecurityCredentials(SecurityCredentials)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom(String sectionName)
  name: tryLoadFrom(String sectionName)
  nameWithType: FabricTransportRemotingSettings.tryLoadFrom(String sectionName)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it return false </p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Boolean specifies whether the settings get loaded successfully from Config. It returns true when load from Config succeeded, else return false. </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Try to load the FabricTransport settings from a sectionName specified in the configuration file. Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>

    <p>

      <b>Remarks:</b>The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>
  syntax: public static FabricTransportRemotingSettings tryLoadFrom(String sectionName)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFrom(String)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage(String sectionName, String configPackageName)
  name: tryLoadFromConfigPackage(String sectionName, String configPackageName)
  nameWithType: FabricTransportRemotingSettings.tryLoadFromConfigPackage(String sectionName, String configPackageName)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it return false </p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Name of the configuration package. If its null or empty,it will check for file in filePath </p>
    name: configPackageName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Boolean specifies whether the settings get loaded successfully from Config. It returns true when load from Config succeeded, else return false. </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Try to load the FabricTransport settings from a sectionName specified in the configuration file. Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>

    <p>

      <b>Remarks:</b>The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>
  syntax: public static FabricTransportRemotingSettings tryLoadFromConfigPackage(String sectionName, String configPackageName)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromConfigPackage(String,String)
- fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile(String sectionName, String filePath)
  name: tryLoadFromFile(String sectionName, String filePath)
  nameWithType: FabricTransportRemotingSettings.tryLoadFromFile(String sectionName, String filePath)
  parameters:
  - description: <p>Name of the section within the configuration file. If not found section in configuration file, it return false </p>
    name: sectionName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Full path of the file where the settings will be loaded from. If not specified , it will first try to load from default Config Package"Config" , if not found then load from Settings "ClientExeName.Settings.xml" present in Client Exe directory. </p>
    name: filePath
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>Boolean specifies whether the settings get loaded successfully from Config. It returns true when load from Config succeeded, else return false. </p>
    type: <xref href="microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings?alt=microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings&text=FabricTransportRemotingSettings" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Try to load the FabricTransport settings from a sectionName specified in the configuration file. Configuration File can be specified using the filePath or using the name of the configuration package specified in the service manifest . It will first try to load config using configPackageName . if configPackageName is not specified then try to load from filePath.</p>

    <p>

      <b>Remarks:</b>The following are the parameter names that should be provided in the configuration file,to be recognizable by service fabric to load the transport settings. 1. MaxQueueSize - value in long. 2. MaxMessageSize - value in bytes. 3. MaxConcurrentCalls - value in long. 4. SecurityCredentials - SecurityCredentials value. 5. OperationTimeoutInSeconds - value in seconds. 6. KeepAliveTimeoutInSeconds<ul><li><p>value in seconds. </p></li></ul></p>
  syntax: public static FabricTransportRemotingSettings tryLoadFromFile(String sectionName, String filePath)
  uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings.tryLoadFromFile(String,String)
nameWithType: FabricTransportRemotingSettings
syntax: public class FabricTransportRemotingSettings
type: class
uid: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
fullName: microsoft.servicefabric.services.remoting.fabrictransport.FabricTransportRemotingSettings
name: FabricTransportRemotingSettings
package: microsoft.servicefabric.services.remoting.fabrictransport
summary: <p>Settings that configures the FabricTransport communication. </p>
metadata: {}
