### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.DAGraph(NodeT rootNode)
  name: DAGraph(NodeT rootNode)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.DAGraph(NodeT rootNode)
  parameters:
  - description: <p>the root node of this DAG </p>
    name: rootNode
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new DAG.</p>

    <p></p>
  syntax: public DAGraph(NodeT rootNode)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.DAGraph(NodeT)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.management.resources.fluentcore.dag.Graph?alt=com.microsoft.azure.management.resources.fluentcore.dag.Graph&text=Graph%3CDataT%2CNodeT%2CNodeT%3E" data-throw-if-not-resolved="False"/>
inheritedMembers:
- com.microsoft.azure.management.resources.fluentcore.dag.Graph.addNode(NodeT)
- com.microsoft.azure.management.resources.fluentcore.dag.Graph.findPath(String,String)
- com.microsoft.azure.management.resources.fluentcore.dag.Graph.getNodes()
- com.microsoft.azure.management.resources.fluentcore.dag.Graph.graph
- com.microsoft.azure.management.resources.fluentcore.dag.Graph.Graph()
- com.microsoft.azure.management.resources.fluentcore.dag.Graph.visit(Visitor)
methods:
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNext()
  name: getNext()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNext()
  returns:
    description: <p>next node or null if all the nodes have been explored or no node is available at this moment. </p>
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets next node in the DAG which has no dependency or all of it's dependencies are resolved and ready to be consumed.</p>

    <p></p>
  syntax: public NodeT getNext()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.getNext()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.getNode(String key)
  name: getNode(String key)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.getNode(String key)
  parameters:
  - description: <p>the key of the node </p>
    name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the node </p>
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  summary: <p>Gets a node from the graph with the given key. </p>
  syntax: public NodeT getNode(String key)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.getNode(String)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.hasParent()
  name: hasParent()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.hasParent()
  returns:
    description: >-
      <p>

        <code>true</code> if this DAG is merged with another DAG and hence has a parent </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean hasParent()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.hasParent()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isPreparer()
  name: isPreparer()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isPreparer()
  returns:
    description: >-
      <p>

        <code>true</code> if this dag is the preparer responsible for preparing the DAG for traversal. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  syntax: public boolean isPreparer()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.isPreparer()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.isRootNode(NodeT node)
  name: isRootNode(NodeT node)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.isRootNode(NodeT node)
  parameters:
  - description: <p>the node <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.DAGNode" data-throw-if-not-resolved="false" data-raw-source="DAGNode"></xref> to be checked </p>
    name: node
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <code>true</code> if the given node is root node </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Checks whether the given node is root node of this DAG.</p>

    <p></p>
  syntax: public boolean isRootNode(NodeT node)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.isRootNode(NodeT)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.merge(DAGraph<DataT, NodeT> parent)
  name: merge(DAGraph<DataT, NodeT> parent)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.merge(DAGraph<DataT, NodeT> parent)
  parameters:
  - description: <p>the parent DAG </p>
    name: parent
    type: <xref href="com.microsoft.azure.management.resources.fluentcore.dag.DAGraph?alt=com.microsoft.azure.management.resources.fluentcore.dag.DAGraph&text=DAGraph" data-throw-if-not-resolved="False"/>&lt;DataT, NodeT&gt;
  summary: >-
    <p>Merge this DAG with another DAG. </p>

    <p>This will mark this DAG as a child DAG, the dependencies of nodes in this DAG will be merged with (copied to) the parent DAG</p>

    <p></p>
  syntax: public void merge(DAGraph<DataT, NodeT> parent)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.merge(DAGraph<DataT, NodeT>)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.mergeChildToParent(String parentKey, NodeT childNode)
  name: mergeChildToParent(String parentKey, NodeT childNode)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.mergeChildToParent(String parentKey, NodeT childNode)
  parameters:
  - description: <p>the key of the parent node </p>
    name: parentKey
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the child node </p>
    name: childNode
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Merges DAG associated with childNode to DAG associated with a parent node of given key.</p>

    <p></p>
  syntax: public void mergeChildToParent(String parentKey, NodeT childNode)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.mergeChildToParent(String,NodeT)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.prepare()
  name: prepare()
  nameWithType: DAGraph<DataT,NodeT,NodeT>.prepare()
  summary: <p>Prepares this DAG for traversal using getNext method, each call to getNext returns next node in the DAG with no dependencies. </p>
  syntax: public void prepare()
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.prepare()
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportCompletion(NodeT completed)
  name: reportCompletion(NodeT completed)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportCompletion(NodeT completed)
  parameters:
  - description: <p>the node ready to be consumed </p>
    name: completed
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reports that a node is resolved hence other nodes depends on it can consume it.</p>

    <p></p>
  syntax: public void reportCompletion(NodeT completed)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.reportCompletion(NodeT)
- fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT, NodeT extends DAGNode<DataT, NodeT>.reportError(NodeT faulted, Throwable throwable)
  name: reportError(NodeT faulted, Throwable throwable)
  nameWithType: DAGraph<DataT,NodeT,NodeT>.reportError(NodeT faulted, Throwable throwable)
  parameters:
  - description: <p>the node faulted </p>
    name: faulted
    type: <xref href="NodeT?alt=NodeT&text=NodeT" data-throw-if-not-resolved="False"/>
  - description: <p>the reason for fault </p>
    name: throwable
    type: <xref href="Throwable?alt=Throwable&text=Throwable" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Reports that a node is faulted.</p>

    <p></p>
  syntax: public void reportError(NodeT faulted, Throwable throwable)
  uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph.reportError(NodeT,Throwable)
nameWithType: DAGraph<DataT,NodeT,NodeT>
syntax: public class DAGraph<DataT,NodeT extends DAGNode<DataT,NodeT>> extends Graph<DataT, NodeT>
type: class
typeParameters:
- description: <p>the type of the data stored in the graph nodes </p>
  name: DataT
- description: <p>the type of the nodes in the graph </p>
  name: NodeT
- description: <p>the type of the nodes in the graph </p>
  name: NodeT
uid: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph
fullName: com.microsoft.azure.management.resources.fluentcore.dag.DAGraph<DataT,NodeT,NodeT>
name: DAGraph<DataT,NodeT,NodeT>
package: com.microsoft.azure.management.resources.fluentcore.dag
summary: >-
  <p>Type representing a DAG (directed acyclic graph). </p>

  <p>each node in a DAG is represented by <xref uid="com.microsoft.azure.management.resources.fluentcore.dag.DAGNode" data-throw-if-not-resolved="false" data-raw-source="DAGNode"></xref></p>

  <p></p>
metadata: {}
