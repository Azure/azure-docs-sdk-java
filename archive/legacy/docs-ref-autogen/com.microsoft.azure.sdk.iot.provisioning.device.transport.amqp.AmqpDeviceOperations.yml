### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.AmqpDeviceOperations()
  name: AmqpDeviceOperations()
  nameWithType: AmqpDeviceOperations.AmqpDeviceOperations()
  summary: <p>Constructor for Amqp Device Operations </p>
  syntax: public AmqpDeviceOperations()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.AmqpDeviceOperations()
fields:
- field:
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.amqpLinkAddress
  name: amqpLinkAddress
  nameWithType: AmqpDeviceOperations.amqpLinkAddress
  syntax: protected String amqpLinkAddress
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.amqpLinkAddress
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.addAmqpLinkProperty(String key, String value)
  name: addAmqpLinkProperty(String key, String value)
  nameWithType: AmqpDeviceOperations.addAmqpLinkProperty(String key, String value)
  parameters:
  - name: key
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - name: value
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  syntax: protected void addAmqpLinkProperty(String key, String value)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.addAmqpLinkProperty(String,String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.closeLinks()
  name: closeLinks()
  nameWithType: AmqpDeviceOperations.closeLinks()
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Close the links </p>
  syntax: public synchronized void closeLinks()
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.closeLinks()
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.initLink(Link link)
  name: initLink(Link link)
  nameWithType: AmqpDeviceOperations.initLink(Link link)
  parameters:
  - description: <p>The link which shall be initialize. </p>
    name: link
    type: <xref href="Link?alt=Link&text=Link" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>if link argument is null </p>
  returns:
    type: <xref href="synchronized+void?alt=synchronized+void&text=synchronized+void" data-throw-if-not-resolved="False"/>
  summary: <p>Initializes the link's other endpoint according to its type </p>
  syntax: public synchronized void initLink(Link link)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.initLink(Link)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.isReceiverLinkTag(String name)
  name: isReceiverLinkTag(String name)
  nameWithType: AmqpDeviceOperations.isReceiverLinkTag(String name)
  parameters:
  - description: <p>Name of the link </p>
    name: name
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>if this is a receiver link </p>
    type: <xref href="synchronized+boolean?alt=synchronized+boolean&text=synchronized+boolean" data-throw-if-not-resolved="False"/>
  summary: <p>Is this name a receiver Link </p>
  syntax: public synchronized boolean isReceiverLinkTag(String name)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.isReceiverLinkTag(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.openLinks(Session session)
  name: openLinks(Session session)
  nameWithType: AmqpDeviceOperations.openLinks(Session session)
  parameters:
  - description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="Session"></xref> endpoint. </p>
    name: session
    type: <xref href="Session?alt=Session&text=Session" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: >-
      <p>if the session is<code>nullÂ 

          </code> . </p>
  summary: <p>Open the Session links for session </p>
  syntax: public void openLinks(Session session)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.openLinks(Session)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.receiverMessageFromLink(String linkName)
  name: receiverMessageFromLink(String linkName)
  nameWithType: AmqpDeviceOperations.receiverMessageFromLink(String linkName)
  parameters:
  - description: <p>The name of the link to receive </p>
    name: linkName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>The Amqp Message from the specified link </p>
    type: <xref href="com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage?alt=com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpMessage&text=AmqpMessage" data-throw-if-not-resolved="False"/>
  summary: <p>Retrieves a message from a link </p>
  syntax: public AmqpMessage receiverMessageFromLink(String linkName)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.receiverMessageFromLink(String)
- fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.sendMessage(byte[] tag, byte[] data, int length, int offset)
  name: sendMessage(byte[] tag, byte[] data, int length, int offset)
  nameWithType: AmqpDeviceOperations.sendMessage(byte[] tag, byte[] data, int length, int offset)
  parameters:
  - description: <p>delivery tag </p>
    name: tag
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Data to be sent on the link </p>
    name: data
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>Length of the data </p>
    name: length
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  - description: <p>Offset of the data to send </p>
    name: offset
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: <p>Sends a Message on the senderLink </p>
  syntax: public void sendMessage(byte[] tag, byte[] data, int length, int offset)
  uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations.sendMessage(byte [],byte [],int,int)
nameWithType: AmqpDeviceOperations
syntax: public class AmqpDeviceOperations
type: class
uid: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations
fullName: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp.AmqpDeviceOperations
name: AmqpDeviceOperations
package: com.microsoft.azure.sdk.iot.provisioning.device.transport.amqp
metadata: {}
