### YamlMime:JavaType
methods:
- fullName: system.fabric.OperationDataStream.getNextAsync(CancellationToken cancellationToken)
  name: getNextAsync(CancellationToken cancellationToken)
  nameWithType: OperationDataStream.getNextAsync(CancellationToken cancellationToken)
  parameters:
  - description: <p>The <xref uid="system.fabric.CancellationToken" data-throw-if-not-resolved="false" data-raw-source="system.fabric.CancellationToken"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled. </p>
    name: cancellationToken
    type: <xref href="system.fabric.CancellationToken?alt=system.fabric.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="False"/>
  returns:
    description: >-
      <p>

        <xref uid="" data-throw-if-not-resolved="false" data-raw-source="java.util.concurrent.CompletableFuture"></xref> of type <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref> The future completes exceptionally with <xref uid="" data-throw-if-not-resolved="false" data-raw-source="FabricException"></xref> for fabric related failures. </p>
    type: CompletableFuture&lt;<xref href="system.fabric.OperationData?alt=system.fabric.OperationData&text=OperationData" data-throw-if-not-resolved="False"/>&gt;
  summary: <p>Gets the next <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref> object from the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref>. </p>
  syntax: public CompletableFuture<OperationData> getNextAsync(CancellationToken cancellationToken)
  uid: system.fabric.OperationDataStream.getNextAsync(CancellationToken)
nameWithType: OperationDataStream
syntax: public interface OperationDataStream
type: interface
uid: system.fabric.OperationDataStream
fullName: system.fabric.OperationDataStream
name: OperationDataStream
package: system.fabric
summary: <p>An <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref> encapsulates a stream of <xref uid="system.fabric.OperationData" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationData"></xref> objects that are exchanged between Primary replica and Secondary replica. Objects that implement <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref> are used during the copy process. Both the copy context <xref uid="system.fabric.StateProvider.getCopyContext()" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider#getCopyContext()"></xref> method that is sent from the Secondary replica to the Primary replica and the copy state <xref uid="system.fabric.StateProvider.getCopyState(SequenceNumber,OperationDataStream)" data-throw-if-not-resolved="false" data-raw-source="system.fabric.StateProvider#getCopyState(SequenceNumber, OperationDataStream)"></xref> method implement the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="system.fabric.OperationDataStream"></xref> interface. </p>
metadata: {}
