### YamlMime:JavaType
methods:
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImage()
  name: addImage()
  nameWithType: ListManagementImages.addImage()
  returns:
    description: <p>the first stage of the addImage call </p>
    type: <xref href="ListManagementImagesAddImageDefinitionStages.WithListId?alt=ListManagementImagesAddImageDefinitionStages.WithListId&text=ListManagementImagesAddImageDefinitionStages.WithListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public ListManagementImagesAddImageDefinitionStages.WithListId addImage()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImage()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImage(String listId, AddImageOptionalParameter addImageOptionalParameter)
  name: addImage(String listId, AddImageOptionalParameter addImageOptionalParameter)
  nameWithType: ListManagementImages.addImage(String listId, AddImageOptionalParameter addImageOptionalParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageOptionalParameter&text=AddImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Image object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image&text=Image" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Image addImage(String listId, AddImageOptionalParameter addImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImage(String,AddImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageAsync(String listId, AddImageOptionalParameter addImageOptionalParameter)
  name: addImageAsync(String listId, AddImageOptionalParameter addImageOptionalParameter)
  nameWithType: ListManagementImages.addImageAsync(String listId, AddImageOptionalParameter addImageOptionalParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addImageOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageOptionalParameter&text=AddImageOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Image object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<Image> addImageAsync(String listId, AddImageOptionalParameter addImageOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageAsync(String,AddImageOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageFileInput()
  name: addImageFileInput()
  nameWithType: ListManagementImages.addImageFileInput()
  returns:
    description: <p>the first stage of the addImageFileInput call </p>
    type: <xref href="ListManagementImagesAddImageFileInputDefinitionStages.WithListId?alt=ListManagementImagesAddImageFileInputDefinitionStages.WithListId&text=ListManagementImagesAddImageFileInputDefinitionStages.WithListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public ListManagementImagesAddImageFileInputDefinitionStages.WithListId addImageFileInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageFileInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageFileInput(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  name: addImageFileInput(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  nameWithType: ListManagementImages.addImageFileInput(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addImageFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageFileInputOptionalParameter&text=AddImageFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Image object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image&text=Image" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Image addImageFileInput(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageFileInput(String,byte [],AddImageFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageFileInputAsync(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  name: addImageFileInputAsync(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  nameWithType: ListManagementImages.addImageFileInputAsync(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image file. </p>
    name: imageStream
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addImageFileInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageFileInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageFileInputOptionalParameter&text=AddImageFileInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Image object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<Image> addImageFileInputAsync(String listId, byte[] imageStream, AddImageFileInputOptionalParameter addImageFileInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageFileInputAsync(String,byte [],AddImageFileInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageUrlInput()
  name: addImageUrlInput()
  nameWithType: ListManagementImages.addImageUrlInput()
  returns:
    description: <p>the first stage of the addImageUrlInput call </p>
    type: <xref href="ListManagementImagesAddImageUrlInputDefinitionStages.WithListId?alt=ListManagementImagesAddImageUrlInputDefinitionStages.WithListId&text=ListManagementImagesAddImageUrlInputDefinitionStages.WithListId" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public ListManagementImagesAddImageUrlInputDefinitionStages.WithListId addImageUrlInput()
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageUrlInput()
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageUrlInput(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  name: addImageUrlInput(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  nameWithType: ListManagementImages.addImageUrlInput(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addImageUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageUrlInputOptionalParameter&text=AddImageUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the Image object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image&text=Image" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Image addImageUrlInput(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageUrlInput(String,String,BodyModelModel,AddImageUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageUrlInputAsync(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  name: addImageUrlInputAsync(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  nameWithType: ListManagementImages.addImageUrlInputAsync(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The content type. </p>
    name: contentType
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The image url. </p>
    name: imageUrl
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.BodyModelModel&text=BodyModelModel" data-throw-if-not-resolved="False"/>
  - description: <p>the object representing the optional parameters to be set before calling this API </p>
    name: addImageUrlInputOptionalParameter
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageUrlInputOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.AddImageUrlInputOptionalParameter&text=AddImageUrlInputOptionalParameter" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the Image object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.Image&text=Image" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Add an image to the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<Image> addImageUrlInputAsync(String listId, String contentType, BodyModelModel imageUrl, AddImageUrlInputOptionalParameter addImageUrlInputOptionalParameter)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.addImageUrlInputAsync(String,String,BodyModelModel,AddImageUrlInputOptionalParameter)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteAllImages(String listId)
  name: deleteAllImages(String listId)
  nameWithType: ListManagementImages.deleteAllImages(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes all images from the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public String deleteAllImages(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteAllImages(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteAllImagesAsync(String listId)
  name: deleteAllImagesAsync(String listId)
  nameWithType: ListManagementImages.deleteAllImagesAsync(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes all images from the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<String> deleteAllImagesAsync(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteAllImagesAsync(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteImage(String listId, String imageId)
  name: deleteImage(String listId, String imageId)
  nameWithType: ListManagementImages.deleteImage(String listId, String imageId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the image. </p>
    name: imageId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the String object if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an image from the list with list Id and image Id passed.</p>

    <p></p>
  syntax: public String deleteImage(String listId, String imageId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteImage(String,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteImageAsync(String listId, String imageId)
  name: deleteImageAsync(String listId, String imageId)
  nameWithType: ListManagementImages.deleteImageAsync(String listId, String imageId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>Id of the image. </p>
    name: imageId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the String object </p>
    type: <xref href="Observable%3CString%3E?alt=Observable%3CString%3E&text=Observable%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes an image from the list with list Id and image Id passed.</p>

    <p></p>
  syntax: public Observable<String> deleteImageAsync(String listId, String imageId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.deleteImageAsync(String,String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.getAllImageIds(String listId)
  name: getAllImageIds(String listId)
  nameWithType: ListManagementImages.getAllImageIds(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  - type: <xref href="APIErrorException?alt=APIErrorException&text=APIErrorException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if the request is rejected by server </p>
  - type: <xref href="RuntimeException?alt=RuntimeException&text=RuntimeException" data-throw-if-not-resolved="False"/>
    description: <p>all other wrapped checked exceptions if the request fails to be sent </p>
  returns:
    description: <p>the ImageIds object if successful. </p>
    type: <xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ImageIds?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ImageIds&text=ImageIds" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets all image Ids from the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public ImageIds getAllImageIds(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.getAllImageIds(String)
- fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.getAllImageIdsAsync(String listId)
  name: getAllImageIdsAsync(String listId)
  nameWithType: ListManagementImages.getAllImageIdsAsync(String listId)
  parameters:
  - description: <p>List Id of the image list. </p>
    name: listId
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if parameters fail the validation </p>
  returns:
    description: <p>the observable to the ImageIds object </p>
    type: Observable&lt;<xref href="com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ImageIds?alt=com.microsoft.azure.cognitiveservices.vision.contentmoderator.models.ImageIds&text=ImageIds" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets all image Ids from the list with list Id equal to list Id passed.</p>

    <p></p>
  syntax: public Observable<ImageIds> getAllImageIdsAsync(String listId)
  uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages.getAllImageIdsAsync(String)
nameWithType: ListManagementImages
syntax: public interface ListManagementImages
type: interface
uid: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages
fullName: com.microsoft.azure.cognitiveservices.vision.contentmoderator.ListManagementImages
name: ListManagementImages
package: com.microsoft.azure.cognitiveservices.vision.contentmoderator
summary: <p>An instance of this class provides access to all the operations defined in ListManagementImages. </p>
metadata: {}
