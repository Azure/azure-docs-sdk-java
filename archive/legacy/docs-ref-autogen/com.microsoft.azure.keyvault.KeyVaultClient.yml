### YamlMime:JavaType
constructors:
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.KeyVaultClient(RestClient restClient)
  name: KeyVaultClient(RestClient restClient)
  nameWithType: KeyVaultClient.KeyVaultClient(RestClient restClient)
  parameters:
  - description: <p>the REST client to connect to Azure. </p>
    name: restClient
    type: <xref href="RestClient?alt=RestClient&text=RestClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of KeyVaultClient client.</p>

    <p></p>
  syntax: public KeyVaultClient(RestClient restClient)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.KeyVaultClient(RestClient)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.KeyVaultClient(ServiceClientCredentials credentials)
  name: KeyVaultClient(ServiceClientCredentials credentials)
  nameWithType: KeyVaultClient.KeyVaultClient(ServiceClientCredentials credentials)
  parameters:
  - description: <p>the management credentials for Azure </p>
    name: credentials
    type: <xref href="ServiceClientCredentials?alt=ServiceClientCredentials&text=ServiceClientCredentials" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Initializes an instance of KeyVaultClient client.</p>

    <p></p>
  syntax: public KeyVaultClient(ServiceClientCredentials credentials)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.KeyVaultClient(ServiceClientCredentials)
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
methods:
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.acceptLanguage()
  name: acceptLanguage()
  nameWithType: KeyVaultClient.acceptLanguage()
  returns:
    description: <p>the acceptLanguage value. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets Gets or sets the preferred language for the response.</p>

    <p></p>
  syntax: public String acceptLanguage()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.acceptLanguage()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.apiVersion()
  name: apiVersion()
  nameWithType: KeyVaultClient.apiVersion()
  returns:
    description: <p>the apiVersion value. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets Client Api Version.</p>

    <p></p>
  syntax: public String apiVersion()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.apiVersion()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.backupKey(String vaultBaseUrl, String keyName)
  name: backupKey(String vaultBaseUrl, String keyName)
  nameWithType: KeyVaultClient.backupKey(String vaultBaseUrl, String keyName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key</p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the BackupKeyResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.BackupKeyResult?alt=com.microsoft.azure.keyvault.models.BackupKeyResult&text=BackupKeyResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Requests that a backup of the specified key be downloaded to the client.</p>

    <p></p>
  syntax: public BackupKeyResult backupKey(String vaultBaseUrl, String keyName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.backupKey(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.backupKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<BackupKeyResult> serviceCallback)
  name: backupKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<BackupKeyResult> serviceCallback)
  nameWithType: KeyVaultClient.backupKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<BackupKeyResult> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.BackupKeyResult?alt=com.microsoft.azure.keyvault.models.BackupKeyResult&text=BackupKeyResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.BackupKeyResult?alt=com.microsoft.azure.keyvault.models.BackupKeyResult&text=BackupKeyResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Requests that a backup of the specified key be downloaded to the client.</p>

    <p></p>
  syntax: public ServiceFuture<BackupKeyResult> backupKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<BackupKeyResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.backupKeyAsync(String,String,final ServiceCallback<BackupKeyResult>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.createCertificate(CreateCertificateRequest createCertificateRequest)
  name: createCertificate(CreateCertificateRequest createCertificateRequest)
  nameWithType: KeyVaultClient.createCertificate(CreateCertificateRequest createCertificateRequest)
  parameters:
  - description: <p>the grouped properties for creating a certificate request</p>
    name: createCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.CreateCertificateRequest?alt=com.microsoft.azure.keyvault.requests.CreateCertificateRequest&text=CreateCertificateRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateOperation if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new certificate version. If this is the first version, the certificate resource is created.</p>

    <p></p>
  syntax: public CertificateOperation createCertificate(CreateCertificateRequest createCertificateRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.createCertificate(CreateCertificateRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.createCertificateAsync(CreateCertificateRequest createCertificateRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  name: createCertificateAsync(CreateCertificateRequest createCertificateRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  nameWithType: KeyVaultClient.createCertificateAsync(CreateCertificateRequest createCertificateRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  parameters:
  - description: <p>the grouped properties for creating a certificate request</p>
    name: createCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.CreateCertificateRequest?alt=com.microsoft.azure.keyvault.requests.CreateCertificateRequest&text=CreateCertificateRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new certificate version. If this is the first version, the certificate resource is created.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateOperation> createCertificateAsync(CreateCertificateRequest createCertificateRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.createCertificateAsync(CreateCertificateRequest,final ServiceCallback<CertificateOperation>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.createKey(CreateKeyRequest createKeyRequest)
  name: createKey(CreateKeyRequest createKeyRequest)
  nameWithType: KeyVaultClient.createKey(CreateKeyRequest createKeyRequest)
  parameters:
  - description: <p>the grouped properties for creating a key request </p>
    name: createKeyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.CreateKeyRequest?alt=com.microsoft.azure.keyvault.requests.CreateKeyRequest&text=CreateKeyRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a new key, stores it, then returns key parameters and attributes to the client. The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. Authorization: Requires the keys/create permission.</p>

    <p></p>
  syntax: public KeyBundle createKey(CreateKeyRequest createKeyRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.createKey(CreateKeyRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.createKeyAsync(CreateKeyRequest createKeyRequest, ServiceCallback<KeyBundle> serviceCallback)
  name: createKeyAsync(CreateKeyRequest createKeyRequest, ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.createKeyAsync(CreateKeyRequest createKeyRequest, ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for creating a key request</p>
    name: createKeyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.CreateKeyRequest?alt=com.microsoft.azure.keyvault.requests.CreateKeyRequest&text=CreateKeyRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a new key, stores it, then returns key parameters and attributes to the client. The create key operation can be used to create any key type in Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. Authorization: Requires the keys/create permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> createKeyAsync(CreateKeyRequest createKeyRequest, ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.createKeyAsync(CreateKeyRequest,ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.decrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  name: decrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  nameWithType: KeyVaultClient.decrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the content to be decrypted</p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyOperationResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Decrypts a single block of encrypted data.</p>

    <p></p>
  syntax: public KeyOperationResult decrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.decrypt(String,JsonWebKeyEncryptionAlgorithm,byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.decryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  name: decryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  nameWithType: KeyVaultClient.decryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the content to be decrypted </p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Decrypts a single block of encrypted data.</p>

    <p></p>
  syntax: public ServiceFuture<KeyOperationResult> decryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.decryptAsync(String,JsonWebKeyEncryptionAlgorithm,byte [],final ServiceCallback<KeyOperationResult>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificate(String vaultBaseUrl, String certificateName)
  name: deleteCertificate(String vaultBaseUrl, String certificateName)
  nameWithType: KeyVaultClient.deleteCertificate(String vaultBaseUrl, String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault</p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a certificate from the specified vault.</p>

    <p></p>
  syntax: public CertificateBundle deleteCertificate(String vaultBaseUrl, String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificate(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  name: deleteCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.deleteCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a certificate from the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> deleteCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateAsync(String,String,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateContacts(String vaultBaseUrl)
  name: deleteCertificateContacts(String vaultBaseUrl)
  nameWithType: KeyVaultClient.deleteCertificateContacts(String vaultBaseUrl)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Contacts if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public Contacts deleteCertificateContacts(String vaultBaseUrl)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateContacts(String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  name: deleteCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  nameWithType: KeyVaultClient.deleteCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<Contacts> deleteCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateContactsAsync(String,final ServiceCallback<Contacts>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateIssuer(String vaultBaseUrl, String issuerName)
  name: deleteCertificateIssuer(String vaultBaseUrl, String issuerName)
  nameWithType: KeyVaultClient.deleteCertificateIssuer(String vaultBaseUrl, String issuerName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the issuer.</p>
    name: issuerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the IssuerBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the specified certificate issuer.</p>

    <p></p>
  syntax: public IssuerBundle deleteCertificateIssuer(String vaultBaseUrl, String issuerName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateIssuer(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  name: deleteCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  nameWithType: KeyVaultClient.deleteCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the issuer. </p>
    name: issuerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes the specified certificate issuer.</p>

    <p></p>
  syntax: public ServiceFuture<IssuerBundle> deleteCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateIssuerAsync(String,String,final ServiceCallback<IssuerBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateOperation(String vaultBaseUrl, String certificateName)
  name: deleteCertificateOperation(String vaultBaseUrl, String certificateName)
  nameWithType: KeyVaultClient.deleteCertificateOperation(String vaultBaseUrl, String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate</p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateOperation if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes the operation for a specified certificate.</p>

    <p></p>
  syntax: public CertificateOperation deleteCertificateOperation(String vaultBaseUrl, String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateOperation(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  name: deleteCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  nameWithType: KeyVaultClient.deleteCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes the operation for a specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateOperation> deleteCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteCertificateOperationAsync(String,String,final ServiceCallback<CertificateOperation>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteKey(String vaultBaseUrl, String keyName)
  name: deleteKey(String vaultBaseUrl, String keyName)
  nameWithType: KeyVaultClient.deleteKey(String vaultBaseUrl, String keyName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a key of any type from storage in Azure Key Vault. The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. Authorization: Requires the keys/delete permission.</p>

    <p></p>
  syntax: public KeyBundle deleteKey(String vaultBaseUrl, String keyName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteKey(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  name: deleteKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.deleteKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a key of any type from storage in Azure Key Vault. The delete key operation cannot be used to remove individual versions of a key. This operation removes the cryptographic material associated with the key, which means the key is not usable for Sign/Verify, Wrap/Unwrap or Encrypt/Decrypt operations. Authorization: Requires the keys/delete permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> deleteKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteKeyAsync(String,String,final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteSecret(String vaultBaseUrl, String secretName)
  name: deleteSecret(String vaultBaseUrl, String secretName)
  nameWithType: KeyVaultClient.deleteSecret(String vaultBaseUrl, String secretName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault</p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SecretBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Deletes a secret from the specified vault.</p>

    <p></p>
  syntax: public SecretBundle deleteSecret(String vaultBaseUrl, String secretName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteSecret(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.deleteSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  name: deleteSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  nameWithType: KeyVaultClient.deleteSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Deletes a secret from the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<SecretBundle> deleteSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.deleteSecretAsync(String,String,final ServiceCallback<SecretBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.encrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  name: encrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  nameWithType: KeyVaultClient.encrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the content to be encrypted</p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyOperationResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.</p>

    <p></p>
  syntax: public KeyOperationResult encrypt(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.encrypt(String,JsonWebKeyEncryptionAlgorithm,byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.encryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  name: encryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  nameWithType: KeyVaultClient.encryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the content to be encrypted </p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Encrypts an arbitrary sequence of bytes using an encryption key that is stored in a key vault.</p>

    <p></p>
  syntax: public ServiceFuture<KeyOperationResult> encryptAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.encryptAsync(String,JsonWebKeyEncryptionAlgorithm,byte [],final ServiceCallback<KeyOperationResult>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.generateClientRequestId()
  name: generateClientRequestId()
  nameWithType: KeyVaultClient.generateClientRequestId()
  returns:
    description: <p>the generateClientRequestId value. </p>
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.</p>

    <p></p>
  syntax: public boolean generateClientRequestId()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.generateClientRequestId()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getAzureClient()
  name: getAzureClient()
  nameWithType: KeyVaultClient.getAzureClient()
  returns:
    description: <p>the azure client; </p>
    type: <xref href="AzureClient?alt=AzureClient&text=AzureClient" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="AzureClient"></xref> used for long running operations.</p>

    <p></p>
  syntax: public AzureClient getAzureClient()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getAzureClient()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificate(String certificateIdentifier)
  name: getCertificate(String certificateIdentifier)
  nameWithType: KeyVaultClient.getCertificate(String certificateIdentifier)
  parameters:
  - description: <p>The certificate identifier</p>
    name: certificateIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a specified certificate.</p>

    <p></p>
  syntax: public CertificateBundle getCertificate(String certificateIdentifier)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificate(String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificate(String vaultBaseUrl, String certificateName)
  name: getCertificate(String vaultBaseUrl, String certificateName)
  nameWithType: KeyVaultClient.getCertificate(String vaultBaseUrl, String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault</p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a specified certificate.</p>

    <p></p>
  syntax: public CertificateBundle getCertificate(String vaultBaseUrl, String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificate(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificate(String vaultBaseUrl, String certificateName, String certificateVersion)
  name: getCertificate(String vaultBaseUrl, String certificateName, String certificateVersion)
  nameWithType: KeyVaultClient.getCertificate(String vaultBaseUrl, String certificateName, String certificateVersion)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the certificate</p>
    name: certificateVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets information about a specified certificate.</p>

    <p></p>
  syntax: public CertificateBundle getCertificate(String vaultBaseUrl, String certificateName, String certificateVersion)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificate(String,String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateAsync(String certificateIdentifier, final ServiceCallback<CertificateBundle> serviceCallback)
  name: getCertificateAsync(String certificateIdentifier, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.getCertificateAsync(String certificateIdentifier, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>The certificate identifier </p>
    name: certificateIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> getCertificateAsync(String certificateIdentifier, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateAsync(String,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  name: getCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.getCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> getCertificateAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateAsync(String,String,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, final ServiceCallback<CertificateBundle> serviceCallback)
  name: getCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.getCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the certificate </p>
    name: certificateVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets information about a specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> getCertificateAsync(String vaultBaseUrl, String certificateName, String certificateVersion, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateAsync(String,String,String,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateContacts(String vaultBaseUrl)
  name: getCertificateContacts(String vaultBaseUrl)
  nameWithType: KeyVaultClient.getCertificateContacts(String vaultBaseUrl)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Contacts if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public Contacts getCertificateContacts(String vaultBaseUrl)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateContacts(String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  name: getCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  nameWithType: KeyVaultClient.getCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<Contacts> getCertificateContactsAsync(String vaultBaseUrl, final ServiceCallback<Contacts> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateContactsAsync(String,final ServiceCallback<Contacts>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateIssuer(String vaultBaseUrl, String issuerName)
  name: getCertificateIssuer(String vaultBaseUrl, String issuerName)
  nameWithType: KeyVaultClient.getCertificateIssuer(String vaultBaseUrl, String issuerName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the issuer.</p>
    name: issuerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the IssuerBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the specified certificate issuer.</p>

    <p></p>
  syntax: public IssuerBundle getCertificateIssuer(String vaultBaseUrl, String issuerName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateIssuer(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  name: getCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  nameWithType: KeyVaultClient.getCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the issuer. </p>
    name: issuerName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the specified certificate issuer.</p>

    <p></p>
  syntax: public ServiceFuture<IssuerBundle> getCertificateIssuerAsync(String vaultBaseUrl, String issuerName, final ServiceCallback<IssuerBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateIssuerAsync(String,String,final ServiceCallback<IssuerBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateOperation(String vaultBaseUrl, String certificateName)
  name: getCertificateOperation(String vaultBaseUrl, String certificateName)
  nameWithType: KeyVaultClient.getCertificateOperation(String vaultBaseUrl, String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate</p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateOperation if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the operation associated with a specified certificate.</p>

    <p></p>
  syntax: public CertificateOperation getCertificateOperation(String vaultBaseUrl, String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateOperation(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  name: getCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  nameWithType: KeyVaultClient.getCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the operation associated with a specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateOperation> getCertificateOperationAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificateOperation> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificateOperationAsync(String,String,final ServiceCallback<CertificateOperation>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificatePolicy(String vaultBaseUrl, String certificateName)
  name: getCertificatePolicy(String vaultBaseUrl, String certificateName)
  nameWithType: KeyVaultClient.getCertificatePolicy(String vaultBaseUrl, String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault.</p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificatePolicy if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificatePolicy?alt=com.microsoft.azure.keyvault.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the policy for a certificate.</p>

    <p></p>
  syntax: public CertificatePolicy getCertificatePolicy(String vaultBaseUrl, String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificatePolicy(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getCertificatePolicyAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificatePolicy> serviceCallback)
  name: getCertificatePolicyAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificatePolicy> serviceCallback)
  nameWithType: KeyVaultClient.getCertificatePolicyAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificatePolicy> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate in the given vault. </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificatePolicy?alt=com.microsoft.azure.keyvault.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificatePolicy?alt=com.microsoft.azure.keyvault.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the policy for a certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificatePolicy> getCertificatePolicyAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<CertificatePolicy> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getCertificatePolicyAsync(String,String,final ServiceCallback<CertificatePolicy>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getKey(String keyIdentifier)
  name: getKey(String keyIdentifier)
  nameWithType: KeyVaultClient.getKey(String keyIdentifier)
  parameters:
  - description: <p>The full key identifier</p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. Authorization: Requires the keys/get permission.</p>

    <p></p>
  syntax: public KeyBundle getKey(String keyIdentifier)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getKey(String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getKey(String vaultBaseUrl, String keyName)
  name: getKey(String vaultBaseUrl, String keyName)
  nameWithType: KeyVaultClient.getKey(String vaultBaseUrl, String keyName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. Authorization: Requires the keys/get permission.</p>

    <p></p>
  syntax: public KeyBundle getKey(String vaultBaseUrl, String keyName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getKey(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getKey(String vaultBaseUrl, String keyName, String keyVersion)
  name: getKey(String vaultBaseUrl, String keyName, String keyVersion)
  nameWithType: KeyVaultClient.getKey(String vaultBaseUrl, String keyName, String keyVersion)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the key</p>
    name: keyVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. Authorization: Requires the keys/get permission.</p>

    <p></p>
  syntax: public KeyBundle getKey(String vaultBaseUrl, String keyName, String keyVersion)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getKey(String,String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getKeyAsync(String keyIdentifier, final ServiceCallback<KeyBundle> serviceCallback)
  name: getKeyAsync(String keyIdentifier, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.getKeyAsync(String keyIdentifier, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. Authorization: Requires the keys/get permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> getKeyAsync(String keyIdentifier, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getKeyAsync(String,final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  name: getKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.getKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. Authorization: Requires the keys/get permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> getKeyAsync(String vaultBaseUrl, String keyName, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getKeyAsync(String,String,final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, final ServiceCallback<KeyBundle> serviceCallback)
  name: getKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.getKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the key </p>
    name: keyVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Gets the public part of a stored key. The get key operation is applicable to all key types. If the requested key is symmetric, then no key material is released in the response. Authorization: Requires the keys/get permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> getKeyAsync(String vaultBaseUrl, String keyName, String keyVersion, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getKeyAsync(String,String,String,final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getPendingCertificateSigningRequest(String vaultBaseUrl, String certificateName)
  name: getPendingCertificateSigningRequest(String vaultBaseUrl, String certificateName)
  nameWithType: KeyVaultClient.getPendingCertificateSigningRequest(String vaultBaseUrl, String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate</p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the String if successful. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the pending certificate signing request response.</p>

    <p></p>
  syntax: public String getPendingCertificateSigningRequest(String vaultBaseUrl, String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getPendingCertificateSigningRequest(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getPendingCertificateSigningRequestAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<String> serviceCallback)
  name: getPendingCertificateSigningRequestAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<String> serviceCallback)
  nameWithType: KeyVaultClient.getPendingCertificateSigningRequestAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<String> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate </p>
    name: certificateName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: <xref href="final+ServiceCallback%3CString%3E?alt=final+ServiceCallback%3CString%3E&text=final+ServiceCallback%3CString%3E" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: <xref href="ServiceFuture%3CString%3E?alt=ServiceFuture%3CString%3E&text=ServiceFuture%3CString%3E" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the pending certificate signing request response.</p>

    <p></p>
  syntax: public ServiceFuture<String> getPendingCertificateSigningRequestAsync(String vaultBaseUrl, String certificateName, final ServiceCallback<String> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getPendingCertificateSigningRequestAsync(String,String,final ServiceCallback<String>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getSecret(String secretIdentifier)
  name: getSecret(String secretIdentifier)
  nameWithType: KeyVaultClient.getSecret(String secretIdentifier)
  parameters:
  - description: <p>The URL for the secret.</p>
    name: secretIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SecretBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a specified secret from a given key vault.</p>

    <p></p>
  syntax: public SecretBundle getSecret(String secretIdentifier)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getSecret(String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getSecret(String vaultBaseUrl, String secretName)
  name: getSecret(String vaultBaseUrl, String secretName)
  nameWithType: KeyVaultClient.getSecret(String vaultBaseUrl, String secretName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault</p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SecretBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a specified secret from a given key vault.</p>

    <p></p>
  syntax: public SecretBundle getSecret(String vaultBaseUrl, String secretName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getSecret(String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getSecret(String vaultBaseUrl, String secretName, String secretVersion)
  name: getSecret(String vaultBaseUrl, String secretName, String secretVersion)
  nameWithType: KeyVaultClient.getSecret(String vaultBaseUrl, String secretName, String secretVersion)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the secret</p>
    name: secretVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SecretBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Get a specified secret from a given key vault.</p>

    <p></p>
  syntax: public SecretBundle getSecret(String vaultBaseUrl, String secretName, String secretVersion)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getSecret(String,String,String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getSecretAsync(String secretIdentifier, final ServiceCallback<SecretBundle> serviceCallback)
  name: getSecretAsync(String secretIdentifier, final ServiceCallback<SecretBundle> serviceCallback)
  nameWithType: KeyVaultClient.getSecretAsync(String secretIdentifier, final ServiceCallback<SecretBundle> serviceCallback)
  parameters:
  - description: <p>The URL for the secret. </p>
    name: secretIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a specified secret from a given key vault.</p>

    <p></p>
  syntax: public ServiceFuture<SecretBundle> getSecretAsync(String secretIdentifier, final ServiceCallback<SecretBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getSecretAsync(String,final ServiceCallback<SecretBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  name: getSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  nameWithType: KeyVaultClient.getSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a specified secret from a given key vault.</p>

    <p></p>
  syntax: public ServiceFuture<SecretBundle> getSecretAsync(String vaultBaseUrl, String secretName, final ServiceCallback<SecretBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getSecretAsync(String,String,final ServiceCallback<SecretBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.getSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, final ServiceCallback<SecretBundle> serviceCallback)
  name: getSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, final ServiceCallback<SecretBundle> serviceCallback)
  nameWithType: KeyVaultClient.getSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, final ServiceCallback<SecretBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The version of the secret </p>
    name: secretVersion
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Get a specified secret from a given key vault.</p>

    <p></p>
  syntax: public ServiceFuture<SecretBundle> getSecretAsync(String vaultBaseUrl, String secretName, String secretVersion, final ServiceCallback<SecretBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.getSecretAsync(String,String,String,final ServiceCallback<SecretBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.httpClient()
  name: httpClient()
  nameWithType: KeyVaultClient.httpClient()
  returns:
    description: <p>the HTTP client. </p>
    type: <xref href="OkHttpClient?alt=OkHttpClient&text=OkHttpClient" data-throw-if-not-resolved="False"/>
  syntax: public OkHttpClient httpClient()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.httpClient()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.importCertificate(ImportCertificateRequest importCertificateRequest)
  name: importCertificate(ImportCertificateRequest importCertificateRequest)
  nameWithType: KeyVaultClient.importCertificate(ImportCertificateRequest importCertificateRequest)
  parameters:
  - description: <p>the grouped properties for importing a certificate request</p>
    name: importCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.ImportCertificateRequest?alt=com.microsoft.azure.keyvault.requests.ImportCertificateRequest&text=ImportCertificateRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports a certificate into the specified vault.</p>

    <p></p>
  syntax: public CertificateBundle importCertificate(ImportCertificateRequest importCertificateRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.importCertificate(ImportCertificateRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.importCertificateAsync(ImportCertificateRequest importCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  name: importCertificateAsync(ImportCertificateRequest importCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.importCertificateAsync(ImportCertificateRequest importCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for importing a certificate request</p>
    name: importCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.ImportCertificateRequest?alt=com.microsoft.azure.keyvault.requests.ImportCertificateRequest&text=ImportCertificateRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Imports a certificate into the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> importCertificateAsync(ImportCertificateRequest importCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.importCertificateAsync(ImportCertificateRequest,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.importKey(ImportKeyRequest importKeyRequest)
  name: importKey(ImportKeyRequest importKeyRequest)
  nameWithType: KeyVaultClient.importKey(ImportKeyRequest importKeyRequest)
  parameters:
  - description: <p>the grouped properties for importing a key request</p>
    name: importKeyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.ImportKeyRequest?alt=com.microsoft.azure.keyvault.requests.ImportKeyRequest&text=ImportKeyRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Imports an externally created key, stores it, and returns key parameters and attributes to the client. The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. Authorization: requires the keys/import permission.</p>

    <p></p>
  syntax: public KeyBundle importKey(ImportKeyRequest importKeyRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.importKey(ImportKeyRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.importKeyAsync(ImportKeyRequest importKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  name: importKeyAsync(ImportKeyRequest importKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.importKeyAsync(ImportKeyRequest importKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for importing a key request</p>
    name: importKeyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.ImportKeyRequest?alt=com.microsoft.azure.keyvault.requests.ImportKeyRequest&text=ImportKeyRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Imports an externally created key, stores it, and returns key parameters and attributes to the client. The import key operation may be used to import any key type into an Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the key. Authorization: requires the keys/import permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> importKeyAsync(ImportKeyRequest importKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.importKeyAsync(ImportKeyRequest,final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuers(final String vaultBaseUrl)
  name: listCertificateIssuers(final String vaultBaseUrl)
  nameWithType: KeyVaultClient.listCertificateIssuers(final String vaultBaseUrl)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;CertificateIssuerItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateIssuerItem?alt=com.microsoft.azure.keyvault.models.CertificateIssuerItem&text=CertificateIssuerItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List certificate issuers for the specified vault.</p>

    <p></p>
  syntax: public PagedList<CertificateIssuerItem> listCertificateIssuers(final String vaultBaseUrl)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuers(final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuers(final String vaultBaseUrl, final Integer maxresults)
  name: listCertificateIssuers(final String vaultBaseUrl, final Integer maxresults)
  nameWithType: KeyVaultClient.listCertificateIssuers(final String vaultBaseUrl, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;CertificateIssuerItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateIssuerItem?alt=com.microsoft.azure.keyvault.models.CertificateIssuerItem&text=CertificateIssuerItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List certificate issuers for the specified vault.</p>

    <p></p>
  syntax: public PagedList<CertificateIssuerItem> listCertificateIssuers(final String vaultBaseUrl, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuers(final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuersAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  name: listCertificateIssuersAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  nameWithType: KeyVaultClient.listCertificateIssuersAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateIssuerItem?alt=com.microsoft.azure.keyvault.models.CertificateIssuerItem&text=CertificateIssuerItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateIssuerItem?alt=com.microsoft.azure.keyvault.models.CertificateIssuerItem&text=CertificateIssuerItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List certificate issuers for the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateIssuerItem>> listCertificateIssuersAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuersAsync(final String,final Integer,final ListOperationCallback<CertificateIssuerItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuersAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  name: listCertificateIssuersAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  nameWithType: KeyVaultClient.listCertificateIssuersAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateIssuerItem?alt=com.microsoft.azure.keyvault.models.CertificateIssuerItem&text=CertificateIssuerItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateIssuerItem?alt=com.microsoft.azure.keyvault.models.CertificateIssuerItem&text=CertificateIssuerItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List certificate issuers for the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateIssuerItem>> listCertificateIssuersAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateIssuerItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateIssuersAsync(final String,final ListOperationCallback<CertificateIssuerItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificates(final String vaultBaseUrl)
  name: listCertificates(final String vaultBaseUrl)
  nameWithType: KeyVaultClient.listCertificates(final String vaultBaseUrl)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;CertificateItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List certificates in the specified vault.</p>

    <p></p>
  syntax: public PagedList<CertificateItem> listCertificates(final String vaultBaseUrl)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificates(final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificates(final String vaultBaseUrl, final Integer maxresults)
  name: listCertificates(final String vaultBaseUrl, final Integer maxresults)
  nameWithType: KeyVaultClient.listCertificates(final String vaultBaseUrl, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;CertificateItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List certificates in the specified vault.</p>

    <p></p>
  syntax: public PagedList<CertificateItem> listCertificates(final String vaultBaseUrl, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificates(final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificatesAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  name: listCertificatesAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  nameWithType: KeyVaultClient.listCertificatesAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List certificates in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateItem>> listCertificatesAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificatesAsync(final String,final Integer,final ListOperationCallback<CertificateItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificatesAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateItem> serviceCallback)
  name: listCertificatesAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateItem> serviceCallback)
  nameWithType: KeyVaultClient.listCertificatesAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List certificates in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateItem>> listCertificatesAsync(final String vaultBaseUrl, final ListOperationCallback<CertificateItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificatesAsync(final String,final ListOperationCallback<CertificateItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersions(final String vaultBaseUrl, final String certificateName)
  name: listCertificateVersions(final String vaultBaseUrl, final String certificateName)
  nameWithType: KeyVaultClient.listCertificateVersions(final String vaultBaseUrl, final String certificateName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate</p>
    name: certificateName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;CertificateItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List the versions of a certificate.</p>

    <p></p>
  syntax: public PagedList<CertificateItem> listCertificateVersions(final String vaultBaseUrl, final String certificateName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersions(final String,final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersions(final String vaultBaseUrl, final String certificateName, final Integer maxresults)
  name: listCertificateVersions(final String vaultBaseUrl, final String certificateName, final Integer maxresults)
  nameWithType: KeyVaultClient.listCertificateVersions(final String vaultBaseUrl, final String certificateName, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate </p>
    name: certificateName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;CertificateItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List the versions of a certificate.</p>

    <p></p>
  syntax: public PagedList<CertificateItem> listCertificateVersions(final String vaultBaseUrl, final String certificateName, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersions(final String,final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  name: listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  nameWithType: KeyVaultClient.listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate </p>
    name: certificateName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List the versions of a certificate.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateItem>> listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final Integer maxresults, final ListOperationCallback<CertificateItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersionsAsync(final String,final String,final Integer,final ListOperationCallback<CertificateItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final ListOperationCallback<CertificateItem> serviceCallback)
  name: listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final ListOperationCallback<CertificateItem> serviceCallback)
  nameWithType: KeyVaultClient.listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final ListOperationCallback<CertificateItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the certificate </p>
    name: certificateName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateItem?alt=com.microsoft.azure.keyvault.models.CertificateItem&text=CertificateItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List the versions of a certificate.</p>

    <p></p>
  syntax: public ServiceFuture<List<CertificateItem>> listCertificateVersionsAsync(final String vaultBaseUrl, final String certificateName, final ListOperationCallback<CertificateItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listCertificateVersionsAsync(final String,final String,final ListOperationCallback<CertificateItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeys(final String vaultBaseUrl)
  name: listKeys(final String vaultBaseUrl)
  nameWithType: KeyVaultClient.listKeys(final String vaultBaseUrl)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;KeyItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List keys in the specified vault.</p>

    <p></p>
  syntax: public PagedList<KeyItem> listKeys(final String vaultBaseUrl)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeys(final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeys(final String vaultBaseUrl, final Integer maxresults)
  name: listKeys(final String vaultBaseUrl, final Integer maxresults)
  nameWithType: KeyVaultClient.listKeys(final String vaultBaseUrl, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;KeyItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List keys in the specified vault.</p>

    <p></p>
  syntax: public PagedList<KeyItem> listKeys(final String vaultBaseUrl, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeys(final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeysAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  name: listKeysAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  nameWithType: KeyVaultClient.listKeysAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List keys in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<KeyItem>> listKeysAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeysAsync(final String,final Integer,final ListOperationCallback<KeyItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeysAsync(final String vaultBaseUrl, final ListOperationCallback<KeyItem> serviceCallback)
  name: listKeysAsync(final String vaultBaseUrl, final ListOperationCallback<KeyItem> serviceCallback)
  nameWithType: KeyVaultClient.listKeysAsync(final String vaultBaseUrl, final ListOperationCallback<KeyItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List keys in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<KeyItem>> listKeysAsync(final String vaultBaseUrl, final ListOperationCallback<KeyItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeysAsync(final String,final ListOperationCallback<KeyItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersions(final String vaultBaseUrl, final String keyName)
  name: listKeyVersions(final String vaultBaseUrl, final String keyName)
  nameWithType: KeyVaultClient.listKeyVersions(final String vaultBaseUrl, final String keyName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key</p>
    name: keyName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;KeyItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. Authorization: Requires the keys/list permission.</p>

    <p></p>
  syntax: public PagedList<KeyItem> listKeyVersions(final String vaultBaseUrl, final String keyName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersions(final String,final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersions(final String vaultBaseUrl, final String keyName, final Integer maxresults)
  name: listKeyVersions(final String vaultBaseUrl, final String keyName, final Integer maxresults)
  nameWithType: KeyVaultClient.listKeyVersions(final String vaultBaseUrl, final String keyName, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;KeyItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. Authorization: Requires the keys/list permission.</p>

    <p></p>
  syntax: public PagedList<KeyItem> listKeyVersions(final String vaultBaseUrl, final String keyName, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersions(final String,final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  name: listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  nameWithType: KeyVaultClient.listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. Authorization: Requires the keys/list permission.</p>

    <p></p>
  syntax: public ServiceFuture<List<KeyItem>> listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final Integer maxresults, final ListOperationCallback<KeyItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersionsAsync(final String,final String,final Integer,final ListOperationCallback<KeyItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final ListOperationCallback<KeyItem> serviceCallback)
  name: listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final ListOperationCallback<KeyItem> serviceCallback)
  nameWithType: KeyVaultClient.listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final ListOperationCallback<KeyItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the key </p>
    name: keyName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.KeyItem?alt=com.microsoft.azure.keyvault.models.KeyItem&text=KeyItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>Retrieves a list of individual key versions with the same key name. The full key identifier, attributes, and tags are provided in the response. Authorization: Requires the keys/list permission.</p>

    <p></p>
  syntax: public ServiceFuture<List<KeyItem>> listKeyVersionsAsync(final String vaultBaseUrl, final String keyName, final ListOperationCallback<KeyItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listKeyVersionsAsync(final String,final String,final ListOperationCallback<KeyItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecrets(final String vaultBaseUrl)
  name: listSecrets(final String vaultBaseUrl)
  nameWithType: KeyVaultClient.listSecrets(final String vaultBaseUrl)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;SecretItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List secrets in the specified vault.</p>

    <p></p>
  syntax: public PagedList<SecretItem> listSecrets(final String vaultBaseUrl)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecrets(final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecrets(final String vaultBaseUrl, final Integer maxresults)
  name: listSecrets(final String vaultBaseUrl, final Integer maxresults)
  nameWithType: KeyVaultClient.listSecrets(final String vaultBaseUrl, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;SecretItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List secrets in the specified vault.</p>

    <p></p>
  syntax: public PagedList<SecretItem> listSecrets(final String vaultBaseUrl, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecrets(final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecretsAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  name: listSecretsAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  nameWithType: KeyVaultClient.listSecretsAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List secrets in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<SecretItem>> listSecretsAsync(final String vaultBaseUrl, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecretsAsync(final String,final Integer,final ListOperationCallback<SecretItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecretsAsync(final String vaultBaseUrl, final ListOperationCallback<SecretItem> serviceCallback)
  name: listSecretsAsync(final String vaultBaseUrl, final ListOperationCallback<SecretItem> serviceCallback)
  nameWithType: KeyVaultClient.listSecretsAsync(final String vaultBaseUrl, final ListOperationCallback<SecretItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List secrets in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<List<SecretItem>> listSecretsAsync(final String vaultBaseUrl, final ListOperationCallback<SecretItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecretsAsync(final String,final ListOperationCallback<SecretItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersions(final String vaultBaseUrl, final String secretName)
  name: listSecretVersions(final String vaultBaseUrl, final String secretName)
  nameWithType: KeyVaultClient.listSecretVersions(final String vaultBaseUrl, final String secretName)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault</p>
    name: secretName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;SecretItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List the versions of the specified secret.</p>

    <p></p>
  syntax: public PagedList<SecretItem> listSecretVersions(final String vaultBaseUrl, final String secretName)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersions(final String,final String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersions(final String vaultBaseUrl, final String secretName, final Integer maxresults)
  name: listSecretVersions(final String vaultBaseUrl, final String secretName, final Integer maxresults)
  nameWithType: KeyVaultClient.listSecretVersions(final String vaultBaseUrl, final String secretName, final Integer maxresults)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results.</p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the PagedList&lt;SecretItem&gt; if successful. </p>
    type: PagedList&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>List the versions of the specified secret.</p>

    <p></p>
  syntax: public PagedList<SecretItem> listSecretVersions(final String vaultBaseUrl, final String secretName, final Integer maxresults)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersions(final String,final String,final Integer)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  name: listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  nameWithType: KeyVaultClient.listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>Maximum number of results to return in a page. If not specified the service will return up to 25 results. </p>
    name: maxresults
    type: <xref href="final+Integer?alt=final+Integer&text=final+Integer" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List the versions of the specified secret.</p>

    <p></p>
  syntax: public ServiceFuture<List<SecretItem>> listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final Integer maxresults, final ListOperationCallback<SecretItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersionsAsync(final String,final String,final Integer,final ListOperationCallback<SecretItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final ListOperationCallback<SecretItem> serviceCallback)
  name: listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final ListOperationCallback<SecretItem> serviceCallback)
  nameWithType: KeyVaultClient.listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final ListOperationCallback<SecretItem> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>The name of the secret in the given vault </p>
    name: secretName
    type: <xref href="final+String?alt=final+String&text=final+String" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ListOperationCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;List&lt;<xref href="com.microsoft.azure.keyvault.models.SecretItem?alt=com.microsoft.azure.keyvault.models.SecretItem&text=SecretItem" data-throw-if-not-resolved="False"/>&gt;&gt;
  summary: >-
    <p>List the versions of the specified secret.</p>

    <p></p>
  syntax: public ServiceFuture<List<SecretItem>> listSecretVersionsAsync(final String vaultBaseUrl, final String secretName, final ListOperationCallback<SecretItem> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.listSecretVersionsAsync(final String,final String,final ListOperationCallback<SecretItem>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.longRunningOperationRetryTimeout()
  name: longRunningOperationRetryTimeout()
  nameWithType: KeyVaultClient.longRunningOperationRetryTimeout()
  returns:
    description: <p>the longRunningOperationRetryTimeout value. </p>
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.</p>

    <p></p>
  syntax: public int longRunningOperationRetryTimeout()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.longRunningOperationRetryTimeout()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.mergeCertificate(MergeCertificateRequest mergeCertificateRequest)
  name: mergeCertificate(MergeCertificateRequest mergeCertificateRequest)
  nameWithType: KeyVaultClient.mergeCertificate(MergeCertificateRequest mergeCertificateRequest)
  parameters:
  - description: <p>the grouped properties for merging a certificate request</p>
    name: mergeCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.MergeCertificateRequest?alt=com.microsoft.azure.keyvault.requests.MergeCertificateRequest&text=MergeCertificateRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Merges a certificate or a certificate chain with a key pair existing on the server.</p>

    <p></p>
  syntax: public CertificateBundle mergeCertificate(MergeCertificateRequest mergeCertificateRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.mergeCertificate(MergeCertificateRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.mergeCertificateAsync(MergeCertificateRequest mergeCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  name: mergeCertificateAsync(MergeCertificateRequest mergeCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.mergeCertificateAsync(MergeCertificateRequest mergeCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for merging a certificate request</p>
    name: mergeCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.MergeCertificateRequest?alt=com.microsoft.azure.keyvault.requests.MergeCertificateRequest&text=MergeCertificateRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Merges a certificate or a certificate chain with a key pair existing on the server.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> mergeCertificateAsync(MergeCertificateRequest mergeCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.mergeCertificateAsync(MergeCertificateRequest,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.restClient()
  name: restClient()
  nameWithType: KeyVaultClient.restClient()
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="RestClient"></xref> instance. </p>
    type: <xref href="RestClient?alt=RestClient&text=RestClient" data-throw-if-not-resolved="False"/>
  syntax: public RestClient restClient()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.restClient()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.restoreKey(String vaultBaseUrl, byte[] keyBundleBackup)
  name: restoreKey(String vaultBaseUrl, byte[] keyBundleBackup)
  nameWithType: KeyVaultClient.restoreKey(String vaultBaseUrl, byte[] keyBundleBackup)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the backup blob associated with a key bundle</p>
    name: keyBundleBackup
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Restores the backup key in to a vault.</p>

    <p></p>
  syntax: public KeyBundle restoreKey(String vaultBaseUrl, byte[] keyBundleBackup)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.restoreKey(String,byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.restoreKeyAsync(String vaultBaseUrl, byte[] keyBundleBackup, final ServiceCallback<KeyBundle> serviceCallback)
  name: restoreKeyAsync(String vaultBaseUrl, byte[] keyBundleBackup, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.restoreKeyAsync(String vaultBaseUrl, byte[] keyBundleBackup, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>the backup blob associated with a key bundle </p>
    name: keyBundleBackup
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Restores the backup key in to a vault.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> restoreKeyAsync(String vaultBaseUrl, byte[] keyBundleBackup, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.restoreKeyAsync(String,byte [],final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.retrofit()
  name: retrofit()
  nameWithType: KeyVaultClient.retrofit()
  returns:
    description: <p>the Retrofit instance. </p>
    type: <xref href="Retrofit?alt=Retrofit&text=Retrofit" data-throw-if-not-resolved="False"/>
  syntax: public Retrofit retrofit()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.retrofit()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.serializerAdapter()
  name: serializerAdapter()
  nameWithType: KeyVaultClient.serializerAdapter()
  returns:
    description: <p>the adapter to a Jackson <xref uid="" data-throw-if-not-resolved="false" data-raw-source="com.fasterxml.jackson.databind.ObjectMapper"></xref>. </p>
    type: <xref href="SerializerAdapter%3C%3F%3E?alt=SerializerAdapter%3C%3F%3E&text=SerializerAdapter%3C%3F%3E" data-throw-if-not-resolved="False"/>
  syntax: public SerializerAdapter<?> serializerAdapter()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.serializerAdapter()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateContacts(String vaultBaseUrl, Contacts contacts)
  name: setCertificateContacts(String vaultBaseUrl, Contacts contacts)
  nameWithType: KeyVaultClient.setCertificateContacts(String vaultBaseUrl, Contacts contacts)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The contacts for the vault certificates.</p>
    name: contacts
    type: <xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the Contacts if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public Contacts setCertificateContacts(String vaultBaseUrl, Contacts contacts)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateContacts(String,Contacts)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateContactsAsync(String vaultBaseUrl, Contacts contacts, final ServiceCallback<Contacts> serviceCallback)
  name: setCertificateContactsAsync(String vaultBaseUrl, Contacts contacts, final ServiceCallback<Contacts> serviceCallback)
  nameWithType: KeyVaultClient.setCertificateContactsAsync(String vaultBaseUrl, Contacts contacts, final ServiceCallback<Contacts> serviceCallback)
  parameters:
  - description: <p>The vault name, e.g. <a href="https://myvault.vault.azure.net">https://myvault.vault.azure.net</a></p>
    name: vaultBaseUrl
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The contacts for the vault certificates. </p>
    name: contacts
    type: <xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.Contacts?alt=com.microsoft.azure.keyvault.models.Contacts&text=Contacts" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Sets the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<Contacts> setCertificateContactsAsync(String vaultBaseUrl, Contacts contacts, final ServiceCallback<Contacts> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateContactsAsync(String,Contacts,final ServiceCallback<Contacts>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateIssuer(SetCertificateIssuerRequest setCertificateIssuerRequest)
  name: setCertificateIssuer(SetCertificateIssuerRequest setCertificateIssuerRequest)
  nameWithType: KeyVaultClient.setCertificateIssuer(SetCertificateIssuerRequest setCertificateIssuerRequest)
  parameters:
  - description: <p>the grouped properties for setting a certificate issuer request</p>
    name: setCertificateIssuerRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.SetCertificateIssuerRequest?alt=com.microsoft.azure.keyvault.requests.SetCertificateIssuerRequest&text=SetCertificateIssuerRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the IssuerBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public IssuerBundle setCertificateIssuer(SetCertificateIssuerRequest setCertificateIssuerRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateIssuer(SetCertificateIssuerRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateIssuerAsync(SetCertificateIssuerRequest setCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  name: setCertificateIssuerAsync(SetCertificateIssuerRequest setCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  nameWithType: KeyVaultClient.setCertificateIssuerAsync(SetCertificateIssuerRequest setCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for setting a certificate issuer request</p>
    name: setCertificateIssuerRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.SetCertificateIssuerRequest?alt=com.microsoft.azure.keyvault.requests.SetCertificateIssuerRequest&text=SetCertificateIssuerRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Sets the certificate contacts for the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<IssuerBundle> setCertificateIssuerAsync(SetCertificateIssuerRequest setCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.setCertificateIssuerAsync(SetCertificateIssuerRequest,final ServiceCallback<IssuerBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.setSecret(SetSecretRequest setSecretRequest)
  name: setSecret(SetSecretRequest setSecretRequest)
  nameWithType: KeyVaultClient.setSecret(SetSecretRequest setSecretRequest)
  parameters:
  - description: <p>the grouped properties for setting a secret request</p>
    name: setSecretRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.SetSecretRequest?alt=com.microsoft.azure.keyvault.requests.SetSecretRequest&text=SetSecretRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SecretBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets a secret in the specified vault.</p>

    <p></p>
  syntax: public SecretBundle setSecret(SetSecretRequest setSecretRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.setSecret(SetSecretRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.setSecretAsync(SetSecretRequest setSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  name: setSecretAsync(SetSecretRequest setSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  nameWithType: KeyVaultClient.setSecretAsync(SetSecretRequest setSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for setting a secret request</p>
    name: setSecretRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.SetSecretRequest?alt=com.microsoft.azure.keyvault.requests.SetSecretRequest&text=SetSecretRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Sets a secret in the specified vault.</p>

    <p></p>
  syntax: public ServiceFuture<SecretBundle> setSecretAsync(SetSecretRequest setSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.setSecretAsync(SetSecretRequest,final ServiceCallback<SecretBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.sign(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value)
  name: sign(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value)
  nameWithType: KeyVaultClient.sign(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the content to be signed</p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyOperationResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Creates a signature from a digest using the specified key.</p>

    <p></p>
  syntax: public KeyOperationResult sign(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.sign(String,JsonWebKeySignatureAlgorithm,byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.signAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  name: signAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  nameWithType: KeyVaultClient.signAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the content to be signed </p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Creates a signature from a digest using the specified key.</p>

    <p></p>
  syntax: public ServiceFuture<KeyOperationResult> signAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.signAsync(String,JsonWebKeySignatureAlgorithm,byte [],final ServiceCallback<KeyOperationResult>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.unwrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  name: unwrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  nameWithType: KeyVaultClient.unwrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the key to be unwrapped</p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyOperationResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Unwraps a symmetric key using the specified key in the vault that has initially been used for wrapping the key.</p>

    <p></p>
  syntax: public KeyOperationResult unwrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.unwrapKey(String,JsonWebKeyEncryptionAlgorithm,byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.unwrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  name: unwrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  nameWithType: KeyVaultClient.unwrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the key to be unwrapped </p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Unwraps a symmetric key using the specified key in the vault that has initially been used for wrapping the key.</p>

    <p></p>
  syntax: public ServiceFuture<KeyOperationResult> unwrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.unwrapKeyAsync(String,JsonWebKeyEncryptionAlgorithm,byte [],final ServiceCallback<KeyOperationResult>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificate(UpdateCertificateRequest updateCertificateRequest)
  name: updateCertificate(UpdateCertificateRequest updateCertificateRequest)
  nameWithType: KeyVaultClient.updateCertificate(UpdateCertificateRequest updateCertificateRequest)
  parameters:
  - description: <p>the grouped properties for updating a certificate request</p>
    name: updateCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificateRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificateRequest&text=UpdateCertificateRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the attributes associated with the specified certificate.</p>

    <p></p>
  syntax: public CertificateBundle updateCertificate(UpdateCertificateRequest updateCertificateRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificate(UpdateCertificateRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateAsync(UpdateCertificateRequest updateCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  name: updateCertificateAsync(UpdateCertificateRequest updateCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  nameWithType: KeyVaultClient.updateCertificateAsync(UpdateCertificateRequest updateCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for updating a certificate request</p>
    name: updateCertificateRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificateRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificateRequest&text=UpdateCertificateRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateBundle?alt=com.microsoft.azure.keyvault.models.CertificateBundle&text=CertificateBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the attributes associated with the specified certificate.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateBundle> updateCertificateAsync(UpdateCertificateRequest updateCertificateRequest, final ServiceCallback<CertificateBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateAsync(UpdateCertificateRequest,final ServiceCallback<CertificateBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateIssuer(UpdateCertificateIssuerRequest updateCertificateIssuerRequest)
  name: updateCertificateIssuer(UpdateCertificateIssuerRequest updateCertificateIssuerRequest)
  nameWithType: KeyVaultClient.updateCertificateIssuer(UpdateCertificateIssuerRequest updateCertificateIssuerRequest)
  parameters:
  - description: <p>the grouped properties for updating a certificate issuer request</p>
    name: updateCertificateIssuerRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificateIssuerRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificateIssuerRequest&text=UpdateCertificateIssuerRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the IssuerBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the specified certificate issuer.</p>

    <p></p>
  syntax: public IssuerBundle updateCertificateIssuer(UpdateCertificateIssuerRequest updateCertificateIssuerRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateIssuer(UpdateCertificateIssuerRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateIssuerAsync(UpdateCertificateIssuerRequest updateCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  name: updateCertificateIssuerAsync(UpdateCertificateIssuerRequest updateCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  nameWithType: KeyVaultClient.updateCertificateIssuerAsync(UpdateCertificateIssuerRequest updateCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for updating a certificate issuer request</p>
    name: updateCertificateIssuerRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificateIssuerRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificateIssuerRequest&text=UpdateCertificateIssuerRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  exceptions:
  - type: <xref href="IllegalArgumentException?alt=IllegalArgumentException&text=IllegalArgumentException" data-throw-if-not-resolved="False"/>
    description: <p>thrown if callback is null </p>
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.IssuerBundle?alt=com.microsoft.azure.keyvault.models.IssuerBundle&text=IssuerBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the specified certificate issuer.</p>

    <p></p>
  syntax: public ServiceFuture<IssuerBundle> updateCertificateIssuerAsync(UpdateCertificateIssuerRequest updateCertificateIssuerRequest, final ServiceCallback<IssuerBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateIssuerAsync(UpdateCertificateIssuerRequest,final ServiceCallback<IssuerBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateOperation(UpdateCertificateOperationRequest updateCertificateOperationRequest)
  name: updateCertificateOperation(UpdateCertificateOperationRequest updateCertificateOperationRequest)
  nameWithType: KeyVaultClient.updateCertificateOperation(UpdateCertificateOperationRequest updateCertificateOperationRequest)
  parameters:
  - description: <p>the grouped properties for updating a certificate operation request</p>
    name: updateCertificateOperationRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificateOperationRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificateOperationRequest&text=UpdateCertificateOperationRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificateOperation if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates a certificate operation.</p>

    <p></p>
  syntax: public CertificateOperation updateCertificateOperation(UpdateCertificateOperationRequest updateCertificateOperationRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateOperation(UpdateCertificateOperationRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateOperationAsync(UpdateCertificateOperationRequest updateCertificateOperationRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  name: updateCertificateOperationAsync(UpdateCertificateOperationRequest updateCertificateOperationRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  nameWithType: KeyVaultClient.updateCertificateOperationAsync(UpdateCertificateOperationRequest updateCertificateOperationRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  parameters:
  - description: <p>the grouped properties for updating a certificate operation request</p>
    name: updateCertificateOperationRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificateOperationRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificateOperationRequest&text=UpdateCertificateOperationRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificateOperation?alt=com.microsoft.azure.keyvault.models.CertificateOperation&text=CertificateOperation" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates a certificate operation.</p>

    <p></p>
  syntax: public ServiceFuture<CertificateOperation> updateCertificateOperationAsync(UpdateCertificateOperationRequest updateCertificateOperationRequest, final ServiceCallback<CertificateOperation> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificateOperationAsync(UpdateCertificateOperationRequest,final ServiceCallback<CertificateOperation>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificatePolicy(UpdateCertificatePolicyRequest updateCertificatePolicyRequest)
  name: updateCertificatePolicy(UpdateCertificatePolicyRequest updateCertificatePolicyRequest)
  nameWithType: KeyVaultClient.updateCertificatePolicy(UpdateCertificatePolicyRequest updateCertificatePolicyRequest)
  parameters:
  - description: <p>the grouped properties for updating a certificate policy request</p>
    name: updateCertificatePolicyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificatePolicyRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificatePolicyRequest&text=UpdateCertificatePolicyRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the CertificatePolicy if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.CertificatePolicy?alt=com.microsoft.azure.keyvault.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the policy for a certificate. Set appropriate members in the certificatePolicy that must be updated. Leave others as null.</p>

    <p></p>
  syntax: public CertificatePolicy updateCertificatePolicy(UpdateCertificatePolicyRequest updateCertificatePolicyRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificatePolicy(UpdateCertificatePolicyRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificatePolicyAsync(UpdateCertificatePolicyRequest updateCertificatePolicyRequest, final ServiceCallback<CertificatePolicy> serviceCallback)
  name: updateCertificatePolicyAsync(UpdateCertificatePolicyRequest updateCertificatePolicyRequest, final ServiceCallback<CertificatePolicy> serviceCallback)
  nameWithType: KeyVaultClient.updateCertificatePolicyAsync(UpdateCertificatePolicyRequest updateCertificatePolicyRequest, final ServiceCallback<CertificatePolicy> serviceCallback)
  parameters:
  - description: <p>the grouped properties for updating a certificate policy request</p>
    name: updateCertificatePolicyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateCertificatePolicyRequest?alt=com.microsoft.azure.keyvault.requests.UpdateCertificatePolicyRequest&text=UpdateCertificatePolicyRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.CertificatePolicy?alt=com.microsoft.azure.keyvault.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.CertificatePolicy?alt=com.microsoft.azure.keyvault.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the policy for a certificate. Set appropriate members in the certificatePolicy that must be updated. Leave others as null.</p>

    <p></p>
  syntax: public ServiceFuture<CertificatePolicy> updateCertificatePolicyAsync(UpdateCertificatePolicyRequest updateCertificatePolicyRequest, final ServiceCallback<CertificatePolicy> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateCertificatePolicyAsync(UpdateCertificatePolicyRequest,final ServiceCallback<CertificatePolicy>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateKey(UpdateKeyRequest updateKeyRequest)
  name: updateKey(UpdateKeyRequest updateKeyRequest)
  nameWithType: KeyVaultClient.updateKey(UpdateKeyRequest updateKeyRequest)
  parameters:
  - description: <p>the grouped properties for updating a key request</p>
    name: updateKeyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateKeyRequest?alt=com.microsoft.azure.keyvault.requests.UpdateKeyRequest&text=UpdateKeyRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. The cryptographic material of a key itself cannot be changed. In order to perform this operation, the key must already exist in the Key Vault. Authorization: requires the keys/update permission.</p>

    <p></p>
  syntax: public KeyBundle updateKey(UpdateKeyRequest updateKeyRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateKey(UpdateKeyRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateKeyAsync(UpdateKeyRequest updateKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  name: updateKeyAsync(UpdateKeyRequest updateKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  nameWithType: KeyVaultClient.updateKeyAsync(UpdateKeyRequest updateKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for updating a key request</p>
    name: updateKeyRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateKeyRequest?alt=com.microsoft.azure.keyvault.requests.UpdateKeyRequest&text=UpdateKeyRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyBundle?alt=com.microsoft.azure.keyvault.models.KeyBundle&text=KeyBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>The update key operation changes specified attributes of a stored key and can be applied to any key type and key version stored in Azure Key Vault. The cryptographic material of a key itself cannot be changed. In order to perform this operation, the key must already exist in the Key Vault. Authorization: requires the keys/update permission.</p>

    <p></p>
  syntax: public ServiceFuture<KeyBundle> updateKeyAsync(UpdateKeyRequest updateKeyRequest, final ServiceCallback<KeyBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateKeyAsync(UpdateKeyRequest,final ServiceCallback<KeyBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateSecret(UpdateSecretRequest updateSecretRequest)
  name: updateSecret(UpdateSecretRequest updateSecretRequest)
  nameWithType: KeyVaultClient.updateSecret(UpdateSecretRequest updateSecretRequest)
  parameters:
  - description: <p>the grouped properties for updating a secret request</p>
    name: updateSecretRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateSecretRequest?alt=com.microsoft.azure.keyvault.requests.UpdateSecretRequest&text=UpdateSecretRequest" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the SecretBundle if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Updates the attributes associated with a specified secret in a given key vault.</p>

    <p></p>
  syntax: public SecretBundle updateSecret(UpdateSecretRequest updateSecretRequest)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateSecret(UpdateSecretRequest)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.updateSecretAsync(UpdateSecretRequest updateSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  name: updateSecretAsync(UpdateSecretRequest updateSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  nameWithType: KeyVaultClient.updateSecretAsync(UpdateSecretRequest updateSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  parameters:
  - description: <p>the grouped properties for updating a secret request</p>
    name: updateSecretRequest
    type: <xref href="com.microsoft.azure.keyvault.requests.UpdateSecretRequest?alt=com.microsoft.azure.keyvault.requests.UpdateSecretRequest&text=UpdateSecretRequest" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.SecretBundle?alt=com.microsoft.azure.keyvault.models.SecretBundle&text=SecretBundle" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Updates the attributes associated with a specified secret in a given key vault.</p>

    <p></p>
  syntax: public ServiceFuture<SecretBundle> updateSecretAsync(UpdateSecretRequest updateSecretRequest, final ServiceCallback<SecretBundle> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.updateSecretAsync(UpdateSecretRequest,final ServiceCallback<SecretBundle>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.userAgent()
  name: userAgent()
  nameWithType: KeyVaultClient.userAgent()
  returns:
    description: <p>the user agent string. </p>
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Gets the User-Agent header for the client.</p>

    <p></p>
  syntax: public String userAgent()
  uid: com.microsoft.azure.keyvault.KeyVaultClient.userAgent()
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.verify(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  name: verify(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  nameWithType: KeyVaultClient.verify(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>The digest used for signing </p>
    name: digest
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature to be verified</p>
    name: signature
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyVerifyResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyVerifyResult?alt=com.microsoft.azure.keyvault.models.KeyVerifyResult&text=KeyVerifyResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Verifies a signature using the specified key.</p>

    <p></p>
  syntax: public KeyVerifyResult verify(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.verify(String,JsonWebKeySignatureAlgorithm,byte [],byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.verifyAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature, final ServiceCallback<KeyVerifyResult> serviceCallback)
  name: verifyAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature, final ServiceCallback<KeyVerifyResult> serviceCallback)
  nameWithType: KeyVaultClient.verifyAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature, final ServiceCallback<KeyVerifyResult> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>The signing/verification algorithm. For more information on possible algorithm types, see JsonWebKeySignatureAlgorithm. </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeySignatureAlgorithm&text=JsonWebKeySignatureAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>The digest used for signing </p>
    name: digest
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>The signature to be verified </p>
    name: signature
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyVerifyResult?alt=com.microsoft.azure.keyvault.models.KeyVerifyResult&text=KeyVerifyResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyVerifyResult?alt=com.microsoft.azure.keyvault.models.KeyVerifyResult&text=KeyVerifyResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Verifies a signature using the specified key.</p>

    <p></p>
  syntax: public ServiceFuture<KeyVerifyResult> verifyAsync(String keyIdentifier, JsonWebKeySignatureAlgorithm algorithm, byte[] digest, byte[] signature, final ServiceCallback<KeyVerifyResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.verifyAsync(String,JsonWebKeySignatureAlgorithm,byte [],byte [],final ServiceCallback<KeyVerifyResult>)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.withAcceptLanguage(String acceptLanguage)
  name: withAcceptLanguage(String acceptLanguage)
  nameWithType: KeyVaultClient.withAcceptLanguage(String acceptLanguage)
  parameters:
  - description: <p>the acceptLanguage value. </p>
    name: acceptLanguage
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets Gets or sets the preferred language for the response.</p>

    <p></p>
  syntax: public void withAcceptLanguage(String acceptLanguage)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.withAcceptLanguage(String)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.withGenerateClientRequestId(boolean generateClientRequestId)
  name: withGenerateClientRequestId(boolean generateClientRequestId)
  nameWithType: KeyVaultClient.withGenerateClientRequestId(boolean generateClientRequestId)
  parameters:
  - description: <p>the generateClientRequestId value. </p>
    name: generateClientRequestId
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets When set to true a unique x-ms-client-request-id value is generated and included in each request. Default is true.</p>

    <p></p>
  syntax: public void withGenerateClientRequestId(boolean generateClientRequestId)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.withGenerateClientRequestId(boolean)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  name: withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  nameWithType: KeyVaultClient.withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  parameters:
  - description: <p>the longRunningOperationRetryTimeout value. </p>
    name: longRunningOperationRetryTimeout
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Sets Gets or sets the retry timeout in seconds for Long Running Operations. Default value is 30.</p>

    <p></p>
  syntax: public void withLongRunningOperationRetryTimeout(int longRunningOperationRetryTimeout)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.withLongRunningOperationRetryTimeout(int)
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.wrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  name: wrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  nameWithType: KeyVaultClient.wrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the key to be wrapped</p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  returns:
    description: <p>the KeyOperationResult if successful. </p>
    type: <xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>
  summary: >-
    <p>Wraps a symmetric key using the specified key.</p>

    <p></p>
  syntax: public KeyOperationResult wrapKey(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.wrapKey(String,JsonWebKeyEncryptionAlgorithm,byte [])
- fullName: com.microsoft.azure.keyvault.KeyVaultClient.wrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  name: wrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  nameWithType: KeyVaultClient.wrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  parameters:
  - description: <p>The full key identifier </p>
    name: keyIdentifier
    type: <xref href="String?alt=String&text=String" data-throw-if-not-resolved="False"/>
  - description: <p>algorithm identifier </p>
    name: algorithm
    type: <xref href="com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm?alt=com.microsoft.azure.keyvault.webkey.JsonWebKeyEncryptionAlgorithm&text=JsonWebKeyEncryptionAlgorithm" data-throw-if-not-resolved="False"/>
  - description: <p>the key to be wrapped </p>
    name: value
    type: <xref href="byte+%5B%5D?alt=byte+%5B%5D&text=byte+%5B%5D" data-throw-if-not-resolved="False"/>
  - description: <p>the async ServiceCallback to handle successful and failed responses. </p>
    name: serviceCallback
    type: final ServiceCallback&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  returns:
    description: <p>the <xref uid="" data-throw-if-not-resolved="false" data-raw-source="ServiceFuture"></xref> object </p>
    type: ServiceFuture&lt;<xref href="com.microsoft.azure.keyvault.models.KeyOperationResult?alt=com.microsoft.azure.keyvault.models.KeyOperationResult&text=KeyOperationResult" data-throw-if-not-resolved="False"/>&gt;
  summary: >-
    <p>Wraps a symmetric key using the specified key.</p>

    <p></p>
  syntax: public ServiceFuture<KeyOperationResult> wrapKeyAsync(String keyIdentifier, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, final ServiceCallback<KeyOperationResult> serviceCallback)
  uid: com.microsoft.azure.keyvault.KeyVaultClient.wrapKeyAsync(String,JsonWebKeyEncryptionAlgorithm,byte [],final ServiceCallback<KeyOperationResult>)
nameWithType: KeyVaultClient
syntax: public class KeyVaultClient
type: class
uid: com.microsoft.azure.keyvault.KeyVaultClient
fullName: com.microsoft.azure.keyvault.KeyVaultClient
name: KeyVaultClient
package: com.microsoft.azure.keyvault
summary: <p>Initializes a new instance of the KeyVaultClient class. </p>
metadata: {}
