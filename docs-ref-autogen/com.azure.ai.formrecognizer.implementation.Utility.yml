### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.implementation.Utility
  id: Utility
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation
  children:
  - com.azure.ai.formrecognizer.implementation.Utility.<T>forEachWithIndex(java.lang.Iterable<T>,java.util.function.BiConsumer<java.lang.Integer,T>)
  - com.azure.ai.formrecognizer.implementation.Utility.detectContentType(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  - com.azure.ai.formrecognizer.implementation.Utility.mapToHttpResponseExceptionIfExist(java.lang.Throwable)
  - com.azure.ai.formrecognizer.implementation.Utility.parseModelId(java.lang.String)
  - com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer(java.io.InputStream)
  langs:
  - java
  name: Utility
  nameWithType: Utility
  fullName: com.azure.ai.formrecognizer.implementation.Utility
  type: Class
  package: com.azure.ai.formrecognizer.implementation
  summary: Utility method class.
  syntax:
    content: public final class Utility
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.implementation.Utility.<T>forEachWithIndex(java.lang.Iterable<T>,java.util.function.BiConsumer<java.lang.Integer,T>)
  id: <T>forEachWithIndex(java.lang.Iterable<T>,java.util.function.BiConsumer<java.lang.Integer,T>)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation.Utility
  langs:
  - java
  name: <T>forEachWithIndex(Iterable<T> iterable, BiConsumer<Integer,T> biConsumer)
  nameWithType: Utility.<T>forEachWithIndex(Iterable<T> iterable, BiConsumer<Integer,T> biConsumer)
  fullName: com.azure.ai.formrecognizer.implementation.Utility.<T>forEachWithIndex(Iterable<T> iterable, BiConsumer<Integer,T> biConsumer)
  overload: com.azure.ai.formrecognizer.implementation.Utility.forEachWithIndex*
  type: Method
  package: com.azure.ai.formrecognizer.implementation
  summary: Given an iterable will apply the indexing function to it and return the index and each item of the iterable.
  syntax:
    content: public static void <T>forEachWithIndex(Iterable<T> iterable, BiConsumer<Integer,T> biConsumer)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
      description: the list to apply the mapping function to.
    - id: biConsumer
      type: java.util.function.BiConsumer<java.lang.Integer,T>
      description: the function which accepts the index and the each value of the iterable.
- uid: com.azure.ai.formrecognizer.implementation.Utility.Utility()
  id: Utility()
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation.Utility
  langs:
  - java
  name: Utility()
  nameWithType: Utility.Utility()
  fullName: com.azure.ai.formrecognizer.implementation.Utility.Utility()
  overload: com.azure.ai.formrecognizer.implementation.Utility.Utility*
  type: Constructor
  package: com.azure.ai.formrecognizer.implementation
  syntax:
    content: private Utility()
- uid: com.azure.ai.formrecognizer.implementation.Utility.detectContentType(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  id: detectContentType(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation.Utility
  langs:
  - java
  name: detectContentType(Flux<ByteBuffer> buffer)
  nameWithType: Utility.detectContentType(Flux<ByteBuffer> buffer)
  fullName: com.azure.ai.formrecognizer.implementation.Utility.detectContentType(Flux<ByteBuffer> buffer)
  overload: com.azure.ai.formrecognizer.implementation.Utility.detectContentType*
  type: Method
  package: com.azure.ai.formrecognizer.implementation
  summary: >-
    Automatically detect byte buffer's content type.


    Given the source: .
  syntax:
    content: public static Mono<ContentType> detectContentType(Flux<ByteBuffer> buffer)
    parameters:
    - id: buffer
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The byte buffer input.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.formrecognizer.implementation.models.ContentType>
      description: The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> of <xref uid="com.azure.ai.formrecognizer.implementation.models.ContentType" data-throw-if-not-resolved="false">ContentType</xref> content type.
- uid: com.azure.ai.formrecognizer.implementation.Utility.mapToHttpResponseExceptionIfExist(java.lang.Throwable)
  id: mapToHttpResponseExceptionIfExist(java.lang.Throwable)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation.Utility
  langs:
  - java
  name: mapToHttpResponseExceptionIfExist(Throwable throwable)
  nameWithType: Utility.mapToHttpResponseExceptionIfExist(Throwable throwable)
  fullName: com.azure.ai.formrecognizer.implementation.Utility.mapToHttpResponseExceptionIfExist(Throwable throwable)
  overload: com.azure.ai.formrecognizer.implementation.Utility.mapToHttpResponseExceptionIfExist*
  type: Method
  package: com.azure.ai.formrecognizer.implementation
  summary: Mapping a <xref uid="com.azure.ai.formrecognizer.implementation.models.ErrorResponseException" data-throw-if-not-resolved="false">ErrorResponseException</xref> to <xref uid="com.azure.core.exception.HttpResponseException" data-throw-if-not-resolved="false">HttpResponseException</xref> if exist. Otherwise, return original <xref uid="java.lang.Throwable" data-throw-if-not-resolved="false">Throwable</xref>.
  syntax:
    content: public static Throwable mapToHttpResponseExceptionIfExist(Throwable throwable)
    parameters:
    - id: throwable
      type: java.lang.Throwable
      description: A <xref uid="java.lang.Throwable" data-throw-if-not-resolved="false">Throwable</xref>.
    return:
      type: java.lang.Throwable
      description: A <xref uid="com.azure.core.exception.HttpResponseException" data-throw-if-not-resolved="false">HttpResponseException</xref> or the original throwable type.
- uid: com.azure.ai.formrecognizer.implementation.Utility.parseModelId(java.lang.String)
  id: parseModelId(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation.Utility
  langs:
  - java
  name: parseModelId(String operationLocation)
  nameWithType: Utility.parseModelId(String operationLocation)
  fullName: com.azure.ai.formrecognizer.implementation.Utility.parseModelId(String operationLocation)
  overload: com.azure.ai.formrecognizer.implementation.Utility.parseModelId*
  type: Method
  package: com.azure.ai.formrecognizer.implementation
  summary: Extracts the result ID from the URL.
  syntax:
    content: public static String parseModelId(String operationLocation)
    parameters:
    - id: operationLocation
      type: java.lang.String
      description: >-
        The URL specified in the 'Operation-Location' response header containing the
         resultId used to track the progress and obtain the result of the analyze operation.
    return:
      type: java.lang.String
      description: The resultId used to track the progress.
- uid: com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer(java.io.InputStream)
  id: toFluxByteBuffer(java.io.InputStream)
  artifact: com.azure:azure-ai-formrecognizer:3.0.0
  parent: com.azure.ai.formrecognizer.implementation.Utility
  langs:
  - java
  name: toFluxByteBuffer(InputStream inputStream)
  nameWithType: Utility.toFluxByteBuffer(InputStream inputStream)
  fullName: com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer(InputStream inputStream)
  overload: com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer*
  type: Method
  package: com.azure.ai.formrecognizer.implementation
  summary: Creates a Flux of ByteBuffer, with each ByteBuffer wrapping bytes read from the given InputStream.
  syntax:
    content: public static Flux<ByteBuffer> toFluxByteBuffer(InputStream inputStream)
    parameters:
    - id: inputStream
      type: java.io.InputStream
      description: InputStream to back the Flux
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: Flux of ByteBuffer backed by the InputStream
references:
- uid: com.azure.ai.formrecognizer.implementation.Utility.Utility*
  name: Utility
  nameWithType: Utility.Utility
  fullName: com.azure.ai.formrecognizer.implementation.Utility.Utility
  package: com.azure.ai.formrecognizer.implementation
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.ai.formrecognizer.implementation.models.ContentType>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.implementation.models.ContentType
    name: ContentType
    fullName: com.azure.ai.formrecognizer.implementation.models.ContentType
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.implementation.Utility.detectContentType*
  name: detectContentType
  nameWithType: Utility.detectContentType
  fullName: com.azure.ai.formrecognizer.implementation.Utility.detectContentType
  package: com.azure.ai.formrecognizer.implementation
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer*
  name: toFluxByteBuffer
  nameWithType: Utility.toFluxByteBuffer
  fullName: com.azure.ai.formrecognizer.implementation.Utility.toFluxByteBuffer
  package: com.azure.ai.formrecognizer.implementation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.formrecognizer.implementation.Utility.parseModelId*
  name: parseModelId
  nameWithType: Utility.parseModelId
  fullName: com.azure.ai.formrecognizer.implementation.Utility.parseModelId
  package: com.azure.ai.formrecognizer.implementation
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.function.BiConsumer<java.lang.Integer,T>
  spec.java:
  - uid: java.util.function.BiConsumer
    name: BiConsumer
    fullName: java.util.function.BiConsumer
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.implementation.Utility.forEachWithIndex*
  name: <T>forEachWithIndex
  nameWithType: Utility.<T>forEachWithIndex
  fullName: com.azure.ai.formrecognizer.implementation.Utility.<T>forEachWithIndex
  package: com.azure.ai.formrecognizer.implementation
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: com.azure.ai.formrecognizer.implementation.Utility.mapToHttpResponseExceptionIfExist*
  name: mapToHttpResponseExceptionIfExist
  nameWithType: Utility.mapToHttpResponseExceptionIfExist
  fullName: com.azure.ai.formrecognizer.implementation.Utility.mapToHttpResponseExceptionIfExist
  package: com.azure.ai.formrecognizer.implementation
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.nio.ByteBuffer
  name: ByteBuffer
  nameWithType: ByteBuffer
  fullName: java.nio.ByteBuffer
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.ai.formrecognizer.implementation.models.ContentType
  name: ContentType
  nameWithType: ContentType
  fullName: com.azure.ai.formrecognizer.implementation.models.ContentType
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.function.BiConsumer
  name: BiConsumer
  nameWithType: BiConsumer
  fullName: java.util.function.BiConsumer
- uid: java.lang.Integer,T
  name: Integer,T
  nameWithType: Integer,T
  fullName: java.lang.Integer,T
