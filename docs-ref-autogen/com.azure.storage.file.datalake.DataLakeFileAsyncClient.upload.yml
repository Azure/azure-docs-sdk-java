### YamlMime:JavaMember
uid: "com.azure.storage.file.datalake.DataLakeFileAsyncClient.upload*"
fullName: "com.azure.storage.file.datalake.DataLakeFileAsyncClient.upload"
name: "upload"
nameWithType: "DataLakeFileAsyncClient.upload"
members:
- uid: "com.azure.storage.file.datalake.DataLakeFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.common.ParallelTransferOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  name: "upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  nameWithType: "DataLakeFileAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  summary: "Creates a new file and uploads content.\n\n**Code Samples**\n\n```java\nclient.uploadFromFile(filePath)\n     .doOnError(throwable -> System.err.printf(\"Failed to upload from file %s%n\", throwable.getMessage()))\n     .subscribe(completion -> System.out.println(\"Upload from file succeeded\"));\n```"
  parameters:
  - description: "The data to write to the file. Unlike other upload methods, this method does not require that the\n <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not expected\n to produce the same values across subscriptions."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> used to configure buffered uploading."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.common.ParallelTransferOptions?alt=com.azure.storage.common.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PathInfo> upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  returns:
    description: "A reactive response containing the information of the uploaded file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.DataLakeFileAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.common.ParallelTransferOptions,boolean)"
  fullName: "com.azure.storage.file.datalake.DataLakeFileAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  name: "upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  nameWithType: "DataLakeFileAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  summary: "Creates a new file and uploads content.\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default behavior\n client.uploadFromFile(filePath, overwrite)\n     .doOnError(throwable -> System.err.printf(\"Failed to upload from file %s%n\", throwable.getMessage()))\n     .subscribe(completion -> System.out.println(\"Upload from file succeeded\"));\n```"
  parameters:
  - description: "The data to write to the file. Unlike other upload methods, this method does not require that the\n <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not expected\n to produce the same values across subscriptions."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.common.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> used to configure buffered uploading."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.common.ParallelTransferOptions?alt=com.azure.storage.common.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether or not to overwrite, should the file already exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PathInfo> upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  returns:
    description: "A reactive response containing the information of the uploaded file."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.4.0
