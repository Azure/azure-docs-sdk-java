### YamlMime:JavaType
constructors:
- com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity()
- com.microsoft.azure.storage.table.TableServiceEntity.TableServiceEntity(String,String)
fields:
- com.microsoft.azure.storage.table.TableServiceEntity.etag
- com.microsoft.azure.storage.table.TableServiceEntity.partitionKey
- com.microsoft.azure.storage.table.TableServiceEntity.rowKey
- com.microsoft.azure.storage.table.TableServiceEntity.timeStamp
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False"/>
- <xref href="com.microsoft.azure.storage.table.TableEntity?alt=com.microsoft.azure.storage.table.TableEntity&text=TableEntity" data-throw-if-not-resolved="False"/>
methods:
- com.microsoft.azure.storage.table.TableServiceEntity.getEtag()
- com.microsoft.azure.storage.table.TableServiceEntity.getPartitionKey()
- com.microsoft.azure.storage.table.TableServiceEntity.getReflectedEntityCache()
- com.microsoft.azure.storage.table.TableServiceEntity.getRowKey()
- com.microsoft.azure.storage.table.TableServiceEntity.getTimestamp()
- com.microsoft.azure.storage.table.TableServiceEntity.isReflectedEntityCacheDisabled()
- com.microsoft.azure.storage.table.TableServiceEntity.readEntity(final HashMap<String, EntityProperty>,final OperationContext)
- com.microsoft.azure.storage.table.TableServiceEntity.readEntityWithReflection(final Object,final HashMap<String, EntityProperty>,final OperationContext)
- com.microsoft.azure.storage.table.TableServiceEntity.setEtag(final String)
- com.microsoft.azure.storage.table.TableServiceEntity.setPartitionKey(final String)
- com.microsoft.azure.storage.table.TableServiceEntity.setReflectedEntityCacheDisabled(boolean)
- com.microsoft.azure.storage.table.TableServiceEntity.setRowKey(final String)
- com.microsoft.azure.storage.table.TableServiceEntity.setTimestamp(final Date)
- com.microsoft.azure.storage.table.TableServiceEntity.writeEntity(final OperationContext)
- com.microsoft.azure.storage.table.TableServiceEntity.writeEntityWithReflection(final Object)
nameWithType: TableServiceEntity
syntax: public class TableServiceEntity implements TableEntity
type: class
uid: com.microsoft.azure.storage.table.TableServiceEntity
fullName: com.microsoft.azure.storage.table.TableServiceEntity
name: TableServiceEntity
package: com.microsoft.azure.storage.table
summary: >-
  <p>The <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> class represents the base object type for a table entity in the Storage service. <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> provides a base implementation for the <xref uid="com.microsoft.azure.storage.table.TableEntity" data-throw-if-not-resolved="false">TableEntity</xref> interface that provides  and  methods that by default serialize and deserialize all properties via reflection. A table entity class may extend this class and override the  and  methods to provide customized or more performant serialization logic. </p>

  <p>The use of reflection allows subclasses of <xref uid="com.microsoft.azure.storage.table.TableServiceEntity" data-throw-if-not-resolved="false">TableServiceEntity</xref> to be serialized and deserialized without having to implement the serialization code themselves. When both a getter method and setter method are found for a given property name and data type, then the appropriate method is invoked automatically to serialize or deserialize the data. To take advantage of the automatic serialization code, your table entity classes should provide getter and setter methods for each property in the corresponding table entity in Microsoft Azure table storage. The reflection code looks for getter and setter methods in pairs of the form </p>

  <p></p>

  <p>and </p>

  <p></p>

  <p>where <em>PropertyName</em> is a property name for the table entity, and <em>type</em> is a Java type compatible with the EDM data type of the property. See the table below for a map of property types to their Java equivalents. The <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false">StoreAs</xref> annotation may be applied with a  attribute to specify a property name for reflection on getter and setter methods that do not follow the property name convention. Method names and the  attribute of <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false">StoreAs</xref> annotations are case sensitive for matching property names with reflection. Use the <xref uid="com.microsoft.azure.storage.table.Ignore" data-throw-if-not-resolved="false">Ignore</xref> annotation to prevent methods from being used by reflection for automatic serialization and deserialization. Note that the names "PartitionKey", "RowKey", "Timestamp", and "Etag" are reserved and will be ignored if set with the <xref uid="com.microsoft.azure.storage.table.StoreAs" data-throw-if-not-resolved="false">StoreAs</xref> annotation in a subclass. </p>

  <p>The following table shows the supported property data types in Microsoft Azure storage and the corresponding Java types when deserialized. <table rows="9" cols="4"><caption>Supported property data types in Microsoft Azure storage</caption><row><entry thead="yes"><p>Storage Type </p></entry><entry thead="yes"><p>EdmType Value </p></entry><entry thead="yes"><p>Java Type </p></entry><entry thead="yes"><p>Description  </p></entry></row><row><entry thead="no"><p><b>Edm.Binary</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.BINARY" data-throw-if-not-resolved="false">EdmType#BINARY</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>An array of bytes up to 64 KB in size.  </p></entry></row><row><entry thead="no"><p><b>Edm.Boolean</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.BOOLEAN" data-throw-if-not-resolved="false">EdmType#BOOLEAN</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A Boolean value.  </p></entry></row><row><entry thead="no"><p><b>Edm.DateTime</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.DATE_TIME" data-throw-if-not-resolved="false">EdmType#DATE_TIME</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 64-bit value expressed as Coordinated Universal Time (UTC). The supported range begins from 12:00 midnight, January 1, 1601 A.D. (C.E.), UTC. The range ends at December 31, 9999.  </p></entry></row><row><entry thead="no"><p><b>Edm.Double</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.DOUBLE" data-throw-if-not-resolved="false">EdmType#DOUBLE</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 64-bit double-precision floating point value.  </p></entry></row><row><entry thead="no"><p><b>Edm.Guid</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.GUID" data-throw-if-not-resolved="false">EdmType#GUID</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 128-bit globally unique identifier.  </p></entry></row><row><entry thead="no"><p><b>Edm.Int32</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.INT32" data-throw-if-not-resolved="false">EdmType#INT32</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 32-bit integer value.  </p></entry></row><row><entry thead="no"><p><b>Edm.Int64</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.INT64" data-throw-if-not-resolved="false">EdmType#INT64</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A 64-bit integer value.  </p></entry></row><row><entry thead="no"><p><b>Edm.String</b></p></entry><entry thead="no"><p><xref uid="com.microsoft.azure.storage.table.EdmType.STRING" data-throw-if-not-resolved="false">EdmType#STRING</xref></p></entry><entry thead="no"><p></p></entry><entry thead="no"><p>A UTF-16-encoded value. String values may be up to 64 KB in size.  </p></entry></row></table></p>

  <p>See the MSDN topic <a href="http://msdn.microsoft.com//library/azure/dd179338.aspx">Understanding the Table Service Data Model</a> for an overview of tables, entities, and properties as used in the Microsoft Azure Storage service. </p>

  <p>For an overview of the available EDM primitive data types and names, see the</p>

  <p>

    <a href="http://www.odata.org/developers/protocols/overview#AbstractTypeSystem">Primitive Data Types</a> section of the <a href="http://www.odata.org/developers/protocols/overview">OData Protocol Overview</a>. </p>

  <p></p>
metadata: {}
