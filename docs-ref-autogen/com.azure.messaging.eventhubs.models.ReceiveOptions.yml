### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions
  id: ReceiveOptions
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.models
  children:
  - com.azure.messaging.eventhubs.models.ReceiveOptions.ReceiveOptions()
  - com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()
  - com.azure.messaging.eventhubs.models.ReceiveOptions.getTrackLastEnqueuedEventProperties()
  - com.azure.messaging.eventhubs.models.ReceiveOptions.setOwnerLevel(java.lang.Long)
  - com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties(boolean)
  langs:
  - java
  name: ReceiveOptions
  nameWithType: ReceiveOptions
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions
  type: Class
  package: com.azure.messaging.eventhubs.models
  summary: Set of options that can be specified when receiving events from an <xref uid="com.azure.messaging.eventhubs.EventHubConsumerAsyncClient" data-throw-if-not-resolved="false">EventHubConsumerAsyncClient</xref> or <xref uid="com.azure.messaging.eventhubs.EventHubConsumerClient" data-throw-if-not-resolved="false">EventHubConsumerClient</xref>.
  syntax:
    content: public class ReceiveOptions
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.ReceiveOptions()
  id: ReceiveOptions()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.models.ReceiveOptions
  langs:
  - java
  name: ReceiveOptions()
  nameWithType: ReceiveOptions.ReceiveOptions()
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.ReceiveOptions()
  overload: com.azure.messaging.eventhubs.models.ReceiveOptions.ReceiveOptions*
  type: Constructor
  package: com.azure.messaging.eventhubs.models
  syntax:
    content: public ReceiveOptions()
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()
  id: getOwnerLevel()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.models.ReceiveOptions
  langs:
  - java
  name: getOwnerLevel()
  nameWithType: ReceiveOptions.getOwnerLevel()
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()
  overload: com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel*
  type: Method
  package: com.azure.messaging.eventhubs.models
  summary: Gets the owner level for this consumer. If the value is `null`, then this is not an exclusive consumer. Otherwise, it is an exclusive consumer, and there can only be one active consumer for each partition and consumer group combination. The exclusive consumer is be based on which one has the higher owner level value.
  syntax:
    content: public Long getOwnerLevel()
    return:
      type: java.lang.Long
      description: The owner level for this receive operation. If the <code>null</code>, then this is not an exclusive consumer.
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.getTrackLastEnqueuedEventProperties()
  id: getTrackLastEnqueuedEventProperties()
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.models.ReceiveOptions
  langs:
  - java
  name: getTrackLastEnqueuedEventProperties()
  nameWithType: ReceiveOptions.getTrackLastEnqueuedEventProperties()
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.getTrackLastEnqueuedEventProperties()
  overload: com.azure.messaging.eventhubs.models.ReceiveOptions.getTrackLastEnqueuedEventProperties*
  type: Method
  package: com.azure.messaging.eventhubs.models
  summary: Gets whether or not the receive operation should request information on the last enqueued event on its associated partition, and track that information as events are received.
  syntax:
    content: public boolean getTrackLastEnqueuedEventProperties()
    return:
      type: boolean
      description: >-
        <code>true</code> if the resulting receive operation will keep track of the last enqueued information for that
             partition; <code>false</code> otherwise.
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.setOwnerLevel(java.lang.Long)
  id: setOwnerLevel(java.lang.Long)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.models.ReceiveOptions
  langs:
  - java
  name: setOwnerLevel(Long priority)
  nameWithType: ReceiveOptions.setOwnerLevel(Long priority)
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.setOwnerLevel(Long priority)
  overload: com.azure.messaging.eventhubs.models.ReceiveOptions.setOwnerLevel*
  type: Method
  package: com.azure.messaging.eventhubs.models
  summary: >-
    Sets the `ownerLevel` value on this receive operation. When populated, the level indicates that the receive operation is intended to be the only reader of events for the requested partition and associated consumer group. To do so, this receive operation will attempt to assert ownership over the partition; in the case where there is more than one exclusive receive operation for the same partition/consumer group pair, the one having a larger <xref uid="com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()" data-throw-if-not-resolved="false">ReceiveOptions#getOwnerLevel()</xref> value will "win".


    When an exclusive receive operation is used, those receive operations which are not exclusive or which have a lower priority will either not be allowed to be created. If they already exist, will encounter an exception during the next attempted operation.
  syntax:
    content: public ReceiveOptions setOwnerLevel(Long priority)
    parameters:
    - id: priority
      type: java.lang.Long
      description: >-
        The priority associated with an exclusive receive operation; for a non-exclusive receive
             operation, this value should be <code>null</code>.
    return:
      type: com.azure.messaging.eventhubs.models.ReceiveOptions
      description: The updated <xref uid="com.azure.messaging.eventhubs.models.ReceiveOptions" data-throw-if-not-resolved="false">ReceiveOptions</xref> object.
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties(boolean)
  id: setTrackLastEnqueuedEventProperties(boolean)
  artifact: com.azure:azure-messaging-eventhubs:5.1.1
  parent: com.azure.messaging.eventhubs.models.ReceiveOptions
  langs:
  - java
  name: setTrackLastEnqueuedEventProperties(boolean trackLastEnqueuedEventProperties)
  nameWithType: ReceiveOptions.setTrackLastEnqueuedEventProperties(boolean trackLastEnqueuedEventProperties)
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties(boolean trackLastEnqueuedEventProperties)
  overload: com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties*
  type: Method
  package: com.azure.messaging.eventhubs.models
  summary: >-
    Sets whether or not the receive operation should request information on the last enqueued event on its associated partition, and track that information as events are received.


    When information about the partition's last enqueued event is being tracked, each event received from the Event Hubs service will carry metadata about the partition that it otherwise would not. This results in a small amount of additional network bandwidth consumption that is generally a favorable trade-off when considered against periodically making requests for partition properties using the Event Hub client.
  syntax:
    content: public ReceiveOptions setTrackLastEnqueuedEventProperties(boolean trackLastEnqueuedEventProperties)
    parameters:
    - id: trackLastEnqueuedEventProperties
      type: boolean
      description: >-
        <code>true</code> if the resulting events will keep track of the last
             enqueued information for that partition; <code>false</code> otherwise.
    return:
      type: com.azure.messaging.eventhubs.models.ReceiveOptions
      description: The updated <xref uid="com.azure.messaging.eventhubs.models.ReceiveOptions" data-throw-if-not-resolved="false">ReceiveOptions</xref> object.
references:
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.ReceiveOptions*
  name: ReceiveOptions
  nameWithType: ReceiveOptions.ReceiveOptions
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.ReceiveOptions
  package: com.azure.messaging.eventhubs.models
- uid: java.lang.Long
  spec.java:
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel*
  name: getOwnerLevel
  nameWithType: ReceiveOptions.getOwnerLevel
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel
  package: com.azure.messaging.eventhubs.models
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.setOwnerLevel*
  name: setOwnerLevel
  nameWithType: ReceiveOptions.setOwnerLevel
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.setOwnerLevel
  package: com.azure.messaging.eventhubs.models
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.getTrackLastEnqueuedEventProperties*
  name: getTrackLastEnqueuedEventProperties
  nameWithType: ReceiveOptions.getTrackLastEnqueuedEventProperties
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.getTrackLastEnqueuedEventProperties
  package: com.azure.messaging.eventhubs.models
- uid: com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties*
  name: setTrackLastEnqueuedEventProperties
  nameWithType: ReceiveOptions.setTrackLastEnqueuedEventProperties
  fullName: com.azure.messaging.eventhubs.models.ReceiveOptions.setTrackLastEnqueuedEventProperties
  package: com.azure.messaging.eventhubs.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
